
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015f6c  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  0801623c  0801623c  0002623c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801643c  0801643c  0002643c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08016444  08016444  00026444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08016448  08016448  00026448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000164  24000000  0801644c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000025e4  24000164  080165b0  00030164  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  24002748  080165b0  00032748  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030164  2**0
                  CONTENTS, READONLY
 10 .debug_info   00037533  00000000  00000000  00030192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005f78  00000000  00000000  000676c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002ab8  00000000  00000000  0006d640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002850  00000000  00000000  000700f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e5d3  00000000  00000000  00072948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003952e  00000000  00000000  000b0f1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017d866  00000000  00000000  000ea449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00267caf  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000bdac  00000000  00000000  00267d00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000164 	.word	0x24000164
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08016224 	.word	0x08016224

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000168 	.word	0x24000168
 800030c:	08016224 	.word	0x08016224

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr

08000324 <strlen>:
 8000324:	4603      	mov	r3, r0
 8000326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800032a:	2a00      	cmp	r2, #0
 800032c:	d1fb      	bne.n	8000326 <strlen+0x2>
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	3801      	subs	r0, #1
 8000332:	4770      	bx	lr
	...

08000340 <memchr>:
 8000340:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000344:	2a10      	cmp	r2, #16
 8000346:	db2b      	blt.n	80003a0 <memchr+0x60>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	d008      	beq.n	8000360 <memchr+0x20>
 800034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000352:	3a01      	subs	r2, #1
 8000354:	428b      	cmp	r3, r1
 8000356:	d02d      	beq.n	80003b4 <memchr+0x74>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	b342      	cbz	r2, 80003b0 <memchr+0x70>
 800035e:	d1f6      	bne.n	800034e <memchr+0xe>
 8000360:	b4f0      	push	{r4, r5, r6, r7}
 8000362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800036a:	f022 0407 	bic.w	r4, r2, #7
 800036e:	f07f 0700 	mvns.w	r7, #0
 8000372:	2300      	movs	r3, #0
 8000374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000378:	3c08      	subs	r4, #8
 800037a:	ea85 0501 	eor.w	r5, r5, r1
 800037e:	ea86 0601 	eor.w	r6, r6, r1
 8000382:	fa85 f547 	uadd8	r5, r5, r7
 8000386:	faa3 f587 	sel	r5, r3, r7
 800038a:	fa86 f647 	uadd8	r6, r6, r7
 800038e:	faa5 f687 	sel	r6, r5, r7
 8000392:	b98e      	cbnz	r6, 80003b8 <memchr+0x78>
 8000394:	d1ee      	bne.n	8000374 <memchr+0x34>
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800039c:	f002 0207 	and.w	r2, r2, #7
 80003a0:	b132      	cbz	r2, 80003b0 <memchr+0x70>
 80003a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a6:	3a01      	subs	r2, #1
 80003a8:	ea83 0301 	eor.w	r3, r3, r1
 80003ac:	b113      	cbz	r3, 80003b4 <memchr+0x74>
 80003ae:	d1f8      	bne.n	80003a2 <memchr+0x62>
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	bf06      	itte	eq
 80003bc:	4635      	moveq	r5, r6
 80003be:	3803      	subeq	r0, #3
 80003c0:	3807      	subne	r0, #7
 80003c2:	f015 0f01 	tst.w	r5, #1
 80003c6:	d107      	bne.n	80003d8 <memchr+0x98>
 80003c8:	3001      	adds	r0, #1
 80003ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ce:	bf02      	ittt	eq
 80003d0:	3001      	addeq	r0, #1
 80003d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003d6:	3001      	addeq	r0, #1
 80003d8:	bcf0      	pop	{r4, r5, r6, r7}
 80003da:	3801      	subs	r0, #1
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295
 80003f4:	f000 b974 	b.w	80006e0 <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9d08      	ldr	r5, [sp, #32]
 8000416:	4604      	mov	r4, r0
 8000418:	468e      	mov	lr, r1
 800041a:	2b00      	cmp	r3, #0
 800041c:	d14d      	bne.n	80004ba <__udivmoddi4+0xaa>
 800041e:	428a      	cmp	r2, r1
 8000420:	4694      	mov	ip, r2
 8000422:	d969      	bls.n	80004f8 <__udivmoddi4+0xe8>
 8000424:	fab2 f282 	clz	r2, r2
 8000428:	b152      	cbz	r2, 8000440 <__udivmoddi4+0x30>
 800042a:	fa01 f302 	lsl.w	r3, r1, r2
 800042e:	f1c2 0120 	rsb	r1, r2, #32
 8000432:	fa20 f101 	lsr.w	r1, r0, r1
 8000436:	fa0c fc02 	lsl.w	ip, ip, r2
 800043a:	ea41 0e03 	orr.w	lr, r1, r3
 800043e:	4094      	lsls	r4, r2
 8000440:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000444:	0c21      	lsrs	r1, r4, #16
 8000446:	fbbe f6f8 	udiv	r6, lr, r8
 800044a:	fa1f f78c 	uxth.w	r7, ip
 800044e:	fb08 e316 	mls	r3, r8, r6, lr
 8000452:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000456:	fb06 f107 	mul.w	r1, r6, r7
 800045a:	4299      	cmp	r1, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x64>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f106 30ff 	add.w	r0, r6, #4294967295
 8000466:	f080 811f 	bcs.w	80006a8 <__udivmoddi4+0x298>
 800046a:	4299      	cmp	r1, r3
 800046c:	f240 811c 	bls.w	80006a8 <__udivmoddi4+0x298>
 8000470:	3e02      	subs	r6, #2
 8000472:	4463      	add	r3, ip
 8000474:	1a5b      	subs	r3, r3, r1
 8000476:	b2a4      	uxth	r4, r4
 8000478:	fbb3 f0f8 	udiv	r0, r3, r8
 800047c:	fb08 3310 	mls	r3, r8, r0, r3
 8000480:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000484:	fb00 f707 	mul.w	r7, r0, r7
 8000488:	42a7      	cmp	r7, r4
 800048a:	d90a      	bls.n	80004a2 <__udivmoddi4+0x92>
 800048c:	eb1c 0404 	adds.w	r4, ip, r4
 8000490:	f100 33ff 	add.w	r3, r0, #4294967295
 8000494:	f080 810a 	bcs.w	80006ac <__udivmoddi4+0x29c>
 8000498:	42a7      	cmp	r7, r4
 800049a:	f240 8107 	bls.w	80006ac <__udivmoddi4+0x29c>
 800049e:	4464      	add	r4, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004a6:	1be4      	subs	r4, r4, r7
 80004a8:	2600      	movs	r6, #0
 80004aa:	b11d      	cbz	r5, 80004b4 <__udivmoddi4+0xa4>
 80004ac:	40d4      	lsrs	r4, r2
 80004ae:	2300      	movs	r3, #0
 80004b0:	e9c5 4300 	strd	r4, r3, [r5]
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d909      	bls.n	80004d2 <__udivmoddi4+0xc2>
 80004be:	2d00      	cmp	r5, #0
 80004c0:	f000 80ef 	beq.w	80006a2 <__udivmoddi4+0x292>
 80004c4:	2600      	movs	r6, #0
 80004c6:	e9c5 0100 	strd	r0, r1, [r5]
 80004ca:	4630      	mov	r0, r6
 80004cc:	4631      	mov	r1, r6
 80004ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d2:	fab3 f683 	clz	r6, r3
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	d14a      	bne.n	8000570 <__udivmoddi4+0x160>
 80004da:	428b      	cmp	r3, r1
 80004dc:	d302      	bcc.n	80004e4 <__udivmoddi4+0xd4>
 80004de:	4282      	cmp	r2, r0
 80004e0:	f200 80f9 	bhi.w	80006d6 <__udivmoddi4+0x2c6>
 80004e4:	1a84      	subs	r4, r0, r2
 80004e6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ea:	2001      	movs	r0, #1
 80004ec:	469e      	mov	lr, r3
 80004ee:	2d00      	cmp	r5, #0
 80004f0:	d0e0      	beq.n	80004b4 <__udivmoddi4+0xa4>
 80004f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004f6:	e7dd      	b.n	80004b4 <__udivmoddi4+0xa4>
 80004f8:	b902      	cbnz	r2, 80004fc <__udivmoddi4+0xec>
 80004fa:	deff      	udf	#255	; 0xff
 80004fc:	fab2 f282 	clz	r2, r2
 8000500:	2a00      	cmp	r2, #0
 8000502:	f040 8092 	bne.w	800062a <__udivmoddi4+0x21a>
 8000506:	eba1 010c 	sub.w	r1, r1, ip
 800050a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800050e:	fa1f fe8c 	uxth.w	lr, ip
 8000512:	2601      	movs	r6, #1
 8000514:	0c20      	lsrs	r0, r4, #16
 8000516:	fbb1 f3f7 	udiv	r3, r1, r7
 800051a:	fb07 1113 	mls	r1, r7, r3, r1
 800051e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000522:	fb0e f003 	mul.w	r0, lr, r3
 8000526:	4288      	cmp	r0, r1
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x12c>
 800052a:	eb1c 0101 	adds.w	r1, ip, r1
 800052e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000532:	d202      	bcs.n	800053a <__udivmoddi4+0x12a>
 8000534:	4288      	cmp	r0, r1
 8000536:	f200 80cb 	bhi.w	80006d0 <__udivmoddi4+0x2c0>
 800053a:	4643      	mov	r3, r8
 800053c:	1a09      	subs	r1, r1, r0
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb1 f0f7 	udiv	r0, r1, r7
 8000544:	fb07 1110 	mls	r1, r7, r0, r1
 8000548:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800054c:	fb0e fe00 	mul.w	lr, lr, r0
 8000550:	45a6      	cmp	lr, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x156>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f100 31ff 	add.w	r1, r0, #4294967295
 800055c:	d202      	bcs.n	8000564 <__udivmoddi4+0x154>
 800055e:	45a6      	cmp	lr, r4
 8000560:	f200 80bb 	bhi.w	80006da <__udivmoddi4+0x2ca>
 8000564:	4608      	mov	r0, r1
 8000566:	eba4 040e 	sub.w	r4, r4, lr
 800056a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800056e:	e79c      	b.n	80004aa <__udivmoddi4+0x9a>
 8000570:	f1c6 0720 	rsb	r7, r6, #32
 8000574:	40b3      	lsls	r3, r6
 8000576:	fa22 fc07 	lsr.w	ip, r2, r7
 800057a:	ea4c 0c03 	orr.w	ip, ip, r3
 800057e:	fa20 f407 	lsr.w	r4, r0, r7
 8000582:	fa01 f306 	lsl.w	r3, r1, r6
 8000586:	431c      	orrs	r4, r3
 8000588:	40f9      	lsrs	r1, r7
 800058a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800058e:	fa00 f306 	lsl.w	r3, r0, r6
 8000592:	fbb1 f8f9 	udiv	r8, r1, r9
 8000596:	0c20      	lsrs	r0, r4, #16
 8000598:	fa1f fe8c 	uxth.w	lr, ip
 800059c:	fb09 1118 	mls	r1, r9, r8, r1
 80005a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80005a4:	fb08 f00e 	mul.w	r0, r8, lr
 80005a8:	4288      	cmp	r0, r1
 80005aa:	fa02 f206 	lsl.w	r2, r2, r6
 80005ae:	d90b      	bls.n	80005c8 <__udivmoddi4+0x1b8>
 80005b0:	eb1c 0101 	adds.w	r1, ip, r1
 80005b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80005b8:	f080 8088 	bcs.w	80006cc <__udivmoddi4+0x2bc>
 80005bc:	4288      	cmp	r0, r1
 80005be:	f240 8085 	bls.w	80006cc <__udivmoddi4+0x2bc>
 80005c2:	f1a8 0802 	sub.w	r8, r8, #2
 80005c6:	4461      	add	r1, ip
 80005c8:	1a09      	subs	r1, r1, r0
 80005ca:	b2a4      	uxth	r4, r4
 80005cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80005d0:	fb09 1110 	mls	r1, r9, r0, r1
 80005d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005dc:	458e      	cmp	lr, r1
 80005de:	d908      	bls.n	80005f2 <__udivmoddi4+0x1e2>
 80005e0:	eb1c 0101 	adds.w	r1, ip, r1
 80005e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005e8:	d26c      	bcs.n	80006c4 <__udivmoddi4+0x2b4>
 80005ea:	458e      	cmp	lr, r1
 80005ec:	d96a      	bls.n	80006c4 <__udivmoddi4+0x2b4>
 80005ee:	3802      	subs	r0, #2
 80005f0:	4461      	add	r1, ip
 80005f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005f6:	fba0 9402 	umull	r9, r4, r0, r2
 80005fa:	eba1 010e 	sub.w	r1, r1, lr
 80005fe:	42a1      	cmp	r1, r4
 8000600:	46c8      	mov	r8, r9
 8000602:	46a6      	mov	lr, r4
 8000604:	d356      	bcc.n	80006b4 <__udivmoddi4+0x2a4>
 8000606:	d053      	beq.n	80006b0 <__udivmoddi4+0x2a0>
 8000608:	b15d      	cbz	r5, 8000622 <__udivmoddi4+0x212>
 800060a:	ebb3 0208 	subs.w	r2, r3, r8
 800060e:	eb61 010e 	sbc.w	r1, r1, lr
 8000612:	fa01 f707 	lsl.w	r7, r1, r7
 8000616:	fa22 f306 	lsr.w	r3, r2, r6
 800061a:	40f1      	lsrs	r1, r6
 800061c:	431f      	orrs	r7, r3
 800061e:	e9c5 7100 	strd	r7, r1, [r5]
 8000622:	2600      	movs	r6, #0
 8000624:	4631      	mov	r1, r6
 8000626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	40d8      	lsrs	r0, r3
 8000630:	fa0c fc02 	lsl.w	ip, ip, r2
 8000634:	fa21 f303 	lsr.w	r3, r1, r3
 8000638:	4091      	lsls	r1, r2
 800063a:	4301      	orrs	r1, r0
 800063c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000640:	fa1f fe8c 	uxth.w	lr, ip
 8000644:	fbb3 f0f7 	udiv	r0, r3, r7
 8000648:	fb07 3610 	mls	r6, r7, r0, r3
 800064c:	0c0b      	lsrs	r3, r1, #16
 800064e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000652:	fb00 f60e 	mul.w	r6, r0, lr
 8000656:	429e      	cmp	r6, r3
 8000658:	fa04 f402 	lsl.w	r4, r4, r2
 800065c:	d908      	bls.n	8000670 <__udivmoddi4+0x260>
 800065e:	eb1c 0303 	adds.w	r3, ip, r3
 8000662:	f100 38ff 	add.w	r8, r0, #4294967295
 8000666:	d22f      	bcs.n	80006c8 <__udivmoddi4+0x2b8>
 8000668:	429e      	cmp	r6, r3
 800066a:	d92d      	bls.n	80006c8 <__udivmoddi4+0x2b8>
 800066c:	3802      	subs	r0, #2
 800066e:	4463      	add	r3, ip
 8000670:	1b9b      	subs	r3, r3, r6
 8000672:	b289      	uxth	r1, r1
 8000674:	fbb3 f6f7 	udiv	r6, r3, r7
 8000678:	fb07 3316 	mls	r3, r7, r6, r3
 800067c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000680:	fb06 f30e 	mul.w	r3, r6, lr
 8000684:	428b      	cmp	r3, r1
 8000686:	d908      	bls.n	800069a <__udivmoddi4+0x28a>
 8000688:	eb1c 0101 	adds.w	r1, ip, r1
 800068c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000690:	d216      	bcs.n	80006c0 <__udivmoddi4+0x2b0>
 8000692:	428b      	cmp	r3, r1
 8000694:	d914      	bls.n	80006c0 <__udivmoddi4+0x2b0>
 8000696:	3e02      	subs	r6, #2
 8000698:	4461      	add	r1, ip
 800069a:	1ac9      	subs	r1, r1, r3
 800069c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80006a0:	e738      	b.n	8000514 <__udivmoddi4+0x104>
 80006a2:	462e      	mov	r6, r5
 80006a4:	4628      	mov	r0, r5
 80006a6:	e705      	b.n	80004b4 <__udivmoddi4+0xa4>
 80006a8:	4606      	mov	r6, r0
 80006aa:	e6e3      	b.n	8000474 <__udivmoddi4+0x64>
 80006ac:	4618      	mov	r0, r3
 80006ae:	e6f8      	b.n	80004a2 <__udivmoddi4+0x92>
 80006b0:	454b      	cmp	r3, r9
 80006b2:	d2a9      	bcs.n	8000608 <__udivmoddi4+0x1f8>
 80006b4:	ebb9 0802 	subs.w	r8, r9, r2
 80006b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80006bc:	3801      	subs	r0, #1
 80006be:	e7a3      	b.n	8000608 <__udivmoddi4+0x1f8>
 80006c0:	4646      	mov	r6, r8
 80006c2:	e7ea      	b.n	800069a <__udivmoddi4+0x28a>
 80006c4:	4620      	mov	r0, r4
 80006c6:	e794      	b.n	80005f2 <__udivmoddi4+0x1e2>
 80006c8:	4640      	mov	r0, r8
 80006ca:	e7d1      	b.n	8000670 <__udivmoddi4+0x260>
 80006cc:	46d0      	mov	r8, sl
 80006ce:	e77b      	b.n	80005c8 <__udivmoddi4+0x1b8>
 80006d0:	3b02      	subs	r3, #2
 80006d2:	4461      	add	r1, ip
 80006d4:	e732      	b.n	800053c <__udivmoddi4+0x12c>
 80006d6:	4630      	mov	r0, r6
 80006d8:	e709      	b.n	80004ee <__udivmoddi4+0xde>
 80006da:	4464      	add	r4, ip
 80006dc:	3802      	subs	r0, #2
 80006de:	e742      	b.n	8000566 <__udivmoddi4+0x156>

080006e0 <__aeabi_idiv0>:
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop

080006e4 <HG2_Write_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);

	return reg_value;
}

void HG2_Write_Register(uint8_t addr, uint8_t data){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	460a      	mov	r2, r1
 80006ee:	71fb      	strb	r3, [r7, #7]
 80006f0:	4613      	mov	r3, r2
 80006f2:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 80006f4:	2200      	movs	r2, #0
 80006f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006fa:	480c      	ldr	r0, [pc, #48]	; (800072c <HG2_Write_Register+0x48>)
 80006fc:	f006 fc44 	bl	8006f88 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000700:	1df9      	adds	r1, r7, #7
 8000702:	2364      	movs	r3, #100	; 0x64
 8000704:	2201      	movs	r2, #1
 8000706:	480a      	ldr	r0, [pc, #40]	; (8000730 <HG2_Write_Register+0x4c>)
 8000708:	f00d f9c0 	bl	800da8c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 800070c:	1db9      	adds	r1, r7, #6
 800070e:	2364      	movs	r3, #100	; 0x64
 8000710:	2201      	movs	r2, #1
 8000712:	4807      	ldr	r0, [pc, #28]	; (8000730 <HG2_Write_Register+0x4c>)
 8000714:	f00d f9ba 	bl	800da8c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 8000718:	2201      	movs	r2, #1
 800071a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800071e:	4803      	ldr	r0, [pc, #12]	; (800072c <HG2_Write_Register+0x48>)
 8000720:	f006 fc32 	bl	8006f88 <HAL_GPIO_WritePin>

}
 8000724:	bf00      	nop
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	58020c00 	.word	0x58020c00
 8000730:	24000548 	.word	0x24000548

08000734 <LG2_Read_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
}



uint8_t LG2_Read_Register(uint8_t addr){
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	addr |= (1<<7);
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000744:	b2db      	uxtb	r3, r3
 8000746:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000748:	2200      	movs	r2, #0
 800074a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800074e:	480d      	ldr	r0, [pc, #52]	; (8000784 <LG2_Read_Register+0x50>)
 8000750:	f006 fc1a 	bl	8006f88 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000754:	1df9      	adds	r1, r7, #7
 8000756:	2364      	movs	r3, #100	; 0x64
 8000758:	2201      	movs	r2, #1
 800075a:	480b      	ldr	r0, [pc, #44]	; (8000788 <LG2_Read_Register+0x54>)
 800075c:	f00d f996 	bl	800da8c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &reg_value, 1, 100);
 8000760:	f107 010f 	add.w	r1, r7, #15
 8000764:	2364      	movs	r3, #100	; 0x64
 8000766:	2201      	movs	r2, #1
 8000768:	4807      	ldr	r0, [pc, #28]	; (8000788 <LG2_Read_Register+0x54>)
 800076a:	f00d fb8b 	bl	800de84 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 800076e:	2201      	movs	r2, #1
 8000770:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000774:	4803      	ldr	r0, [pc, #12]	; (8000784 <LG2_Read_Register+0x50>)
 8000776:	f006 fc07 	bl	8006f88 <HAL_GPIO_WritePin>

	return reg_value;
 800077a:	7bfb      	ldrb	r3, [r7, #15]
}
 800077c:	4618      	mov	r0, r3
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	58020c00 	.word	0x58020c00
 8000788:	24000548 	.word	0x24000548

0800078c <LG2_Write_Register>:

void LG2_Write_Register(uint8_t addr, uint8_t data){
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	460a      	mov	r2, r1
 8000796:	71fb      	strb	r3, [r7, #7]
 8000798:	4613      	mov	r3, r2
 800079a:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 800079c:	2200      	movs	r2, #0
 800079e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a2:	480c      	ldr	r0, [pc, #48]	; (80007d4 <LG2_Write_Register+0x48>)
 80007a4:	f006 fbf0 	bl	8006f88 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 80007a8:	1df9      	adds	r1, r7, #7
 80007aa:	2364      	movs	r3, #100	; 0x64
 80007ac:	2201      	movs	r2, #1
 80007ae:	480a      	ldr	r0, [pc, #40]	; (80007d8 <LG2_Write_Register+0x4c>)
 80007b0:	f00d f96c 	bl	800da8c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 80007b4:	1db9      	adds	r1, r7, #6
 80007b6:	2364      	movs	r3, #100	; 0x64
 80007b8:	2201      	movs	r2, #1
 80007ba:	4807      	ldr	r0, [pc, #28]	; (80007d8 <LG2_Write_Register+0x4c>)
 80007bc:	f00d f966 	bl	800da8c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 80007c0:	2201      	movs	r2, #1
 80007c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007c6:	4803      	ldr	r0, [pc, #12]	; (80007d4 <LG2_Write_Register+0x48>)
 80007c8:	f006 fbde 	bl	8006f88 <HAL_GPIO_WritePin>

}
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	58020c00 	.word	0x58020c00
 80007d8:	24000548 	.word	0x24000548

080007dc <LG2_Get_Gyro_X>:

float LG2_Get_Gyro_X(){
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x22);
 80007e2:	2022      	movs	r0, #34	; 0x22
 80007e4:	f7ff ffa6 	bl	8000734 <LG2_Read_Register>
 80007e8:	4603      	mov	r3, r0
 80007ea:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x23);
 80007ec:	2023      	movs	r0, #35	; 0x23
 80007ee:	f7ff ffa1 	bl	8000734 <LG2_Read_Register>
 80007f2:	4603      	mov	r3, r0
 80007f4:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80007f6:	79bb      	ldrb	r3, [r7, #6]
 80007f8:	021b      	lsls	r3, r3, #8
 80007fa:	b21a      	sxth	r2, r3
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	b21b      	sxth	r3, r3
 8000800:	4313      	orrs	r3, r2
 8000802:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 8000804:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000808:	ee07 3a90 	vmov	s15, r3
 800080c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000810:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000834 <LG2_Get_Gyro_X+0x58>
 8000814:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000818:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000838 <LG2_Get_Gyro_X+0x5c>
 800081c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000820:	edc7 7a00 	vstr	s15, [r7]
	return omega;
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	ee07 3a90 	vmov	s15, r3
}
 800082a:	eeb0 0a67 	vmov.f32	s0, s15
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	46fffe00 	.word	0x46fffe00
 8000838:	437a0000 	.word	0x437a0000

0800083c <LG2_Get_Gyro_Y>:

float LG2_Get_Gyro_Y(){
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x24);
 8000842:	2024      	movs	r0, #36	; 0x24
 8000844:	f7ff ff76 	bl	8000734 <LG2_Read_Register>
 8000848:	4603      	mov	r3, r0
 800084a:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x25);
 800084c:	2025      	movs	r0, #37	; 0x25
 800084e:	f7ff ff71 	bl	8000734 <LG2_Read_Register>
 8000852:	4603      	mov	r3, r0
 8000854:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 8000856:	79bb      	ldrb	r3, [r7, #6]
 8000858:	021b      	lsls	r3, r3, #8
 800085a:	b21a      	sxth	r2, r3
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	b21b      	sxth	r3, r3
 8000860:	4313      	orrs	r3, r2
 8000862:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 8000864:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000868:	ee07 3a90 	vmov	s15, r3
 800086c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000870:	eddf 6a08 	vldr	s13, [pc, #32]	; 8000894 <LG2_Get_Gyro_Y+0x58>
 8000874:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000878:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000898 <LG2_Get_Gyro_Y+0x5c>
 800087c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000880:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	ee07 3a90 	vmov	s15, r3
}
 800088a:	eeb0 0a67 	vmov.f32	s0, s15
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	46fffe00 	.word	0x46fffe00
 8000898:	437a0000 	.word	0x437a0000
 800089c:	00000000 	.word	0x00000000

080008a0 <LG2_Get_Gyro_Z>:

float LG2_Get_Gyro_Z(){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x26);
 80008a6:	2026      	movs	r0, #38	; 0x26
 80008a8:	f7ff ff44 	bl	8000734 <LG2_Read_Register>
 80008ac:	4603      	mov	r3, r0
 80008ae:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x27);
 80008b0:	2027      	movs	r0, #39	; 0x27
 80008b2:	f7ff ff3f 	bl	8000734 <LG2_Read_Register>
 80008b6:	4603      	mov	r3, r0
 80008b8:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80008ba:	79bb      	ldrb	r3, [r7, #6]
 80008bc:	021b      	lsls	r3, r3, #8
 80008be:	b21a      	sxth	r2, r3
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	b21b      	sxth	r3, r3
 80008c4:	4313      	orrs	r3, r2
 80008c6:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767.0) * 250.0;
 80008c8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008cc:	ee07 3a90 	vmov	s15, r3
 80008d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008d4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80008d8:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000900 <LG2_Get_Gyro_Z+0x60>
 80008dc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008e0:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000908 <LG2_Get_Gyro_Z+0x68>
 80008e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008e8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008ec:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	ee07 3a90 	vmov	s15, r3
}
 80008f6:	eeb0 0a67 	vmov.f32	s0, s15
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	00000000 	.word	0x00000000
 8000904:	40dfffc0 	.word	0x40dfffc0
 8000908:	00000000 	.word	0x00000000
 800090c:	406f4000 	.word	0x406f4000

08000910 <setServo>:
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;


void setServo(int servoNum, float angle){
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal =(int)( 3000 + (4000 * (angle/180)));
 800091c:	ed97 7a00 	vldr	s14, [r7]
 8000920:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000990 <setServo+0x80>
 8000924:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000928:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000994 <setServo+0x84>
 800092c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000930:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000998 <setServo+0x88>
 8000934:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000938:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800093c:	ee17 3a90 	vmov	r3, s15
 8000940:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	3b01      	subs	r3, #1
 8000946:	2b03      	cmp	r3, #3
 8000948:	d81a      	bhi.n	8000980 <setServo+0x70>
 800094a:	a201      	add	r2, pc, #4	; (adr r2, 8000950 <setServo+0x40>)
 800094c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000950:	08000961 	.word	0x08000961
 8000954:	08000969 	.word	0x08000969
 8000958:	08000971 	.word	0x08000971
 800095c:	08000979 	.word	0x08000979
		case 1:
			TIM4->CCR4 = timerVal;
 8000960:	4a0e      	ldr	r2, [pc, #56]	; (800099c <setServo+0x8c>)
 8000962:	89fb      	ldrh	r3, [r7, #14]
 8000964:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 8000966:	e00c      	b.n	8000982 <setServo+0x72>
		case 2:
			TIM4->CCR3 = timerVal;
 8000968:	4a0c      	ldr	r2, [pc, #48]	; (800099c <setServo+0x8c>)
 800096a:	89fb      	ldrh	r3, [r7, #14]
 800096c:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 800096e:	e008      	b.n	8000982 <setServo+0x72>
		case 3:
			TIM4->CCR2 = timerVal;
 8000970:	4a0a      	ldr	r2, [pc, #40]	; (800099c <setServo+0x8c>)
 8000972:	89fb      	ldrh	r3, [r7, #14]
 8000974:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 8000976:	e004      	b.n	8000982 <setServo+0x72>
		case 4:
			TIM4->CCR1 = timerVal;
 8000978:	4a08      	ldr	r2, [pc, #32]	; (800099c <setServo+0x8c>)
 800097a:	89fb      	ldrh	r3, [r7, #14]
 800097c:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 800097e:	e000      	b.n	8000982 <setServo+0x72>

		default:
			break;
 8000980:	bf00      	nop
	}
}
 8000982:	bf00      	nop
 8000984:	3714      	adds	r7, #20
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	43340000 	.word	0x43340000
 8000994:	457a0000 	.word	0x457a0000
 8000998:	453b8000 	.word	0x453b8000
 800099c:	40000800 	.word	0x40000800

080009a0 <LoRA_Read_Register>:
	}
}



uint8_t LoRA_Read_Register(uint8_t addr){
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 80009aa:	2200      	movs	r2, #0
 80009ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009b0:	480d      	ldr	r0, [pc, #52]	; (80009e8 <LoRA_Read_Register+0x48>)
 80009b2:	f006 fae9 	bl	8006f88 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 80009b6:	1df9      	adds	r1, r7, #7
 80009b8:	2364      	movs	r3, #100	; 0x64
 80009ba:	2201      	movs	r2, #1
 80009bc:	480b      	ldr	r0, [pc, #44]	; (80009ec <LoRA_Read_Register+0x4c>)
 80009be:	f00d f865 	bl	800da8c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 80009c2:	f107 010f 	add.w	r1, r7, #15
 80009c6:	2364      	movs	r3, #100	; 0x64
 80009c8:	2201      	movs	r2, #1
 80009ca:	4808      	ldr	r0, [pc, #32]	; (80009ec <LoRA_Read_Register+0x4c>)
 80009cc:	f00d fa5a 	bl	800de84 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 80009d0:	2201      	movs	r2, #1
 80009d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009d6:	4804      	ldr	r0, [pc, #16]	; (80009e8 <LoRA_Read_Register+0x48>)
 80009d8:	f006 fad6 	bl	8006f88 <HAL_GPIO_WritePin>

	return reg_value;
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3710      	adds	r7, #16
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	58020000 	.word	0x58020000
 80009ec:	240005d0 	.word	0x240005d0

080009f0 <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data){
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	460a      	mov	r2, r1
 80009fa:	71fb      	strb	r3, [r7, #7]
 80009fc:	4613      	mov	r3, r2
 80009fe:	71bb      	strb	r3, [r7, #6]
	addr |= (1<<7);
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a10:	480c      	ldr	r0, [pc, #48]	; (8000a44 <LoRA_Write_Register+0x54>)
 8000a12:	f006 fab9 	bl	8006f88 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000a16:	1df9      	adds	r1, r7, #7
 8000a18:	2364      	movs	r3, #100	; 0x64
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	480a      	ldr	r0, [pc, #40]	; (8000a48 <LoRA_Write_Register+0x58>)
 8000a1e:	f00d f835 	bl	800da8c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 8000a22:	1db9      	adds	r1, r7, #6
 8000a24:	2364      	movs	r3, #100	; 0x64
 8000a26:	2201      	movs	r2, #1
 8000a28:	4807      	ldr	r0, [pc, #28]	; (8000a48 <LoRA_Write_Register+0x58>)
 8000a2a:	f00d f82f 	bl	800da8c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a34:	4803      	ldr	r0, [pc, #12]	; (8000a44 <LoRA_Write_Register+0x54>)
 8000a36:	f006 faa7 	bl	8006f88 <HAL_GPIO_WritePin>

}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	58020000 	.word	0x58020000
 8000a48:	240005d0 	.word	0x240005d0

08000a4c <LoRA_sleep>:


void LoRA_sleep(void){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8000a50:	2180      	movs	r1, #128	; 0x80
 8000a52:	2001      	movs	r0, #1
 8000a54:	f7ff ffcc 	bl	80009f0 <LoRA_Write_Register>
}
 8000a58:	bf00      	nop
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency){
 8000a5c:	b5b0      	push	{r4, r5, r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8000a64:	6879      	ldr	r1, [r7, #4]
 8000a66:	17c8      	asrs	r0, r1, #31
 8000a68:	460a      	mov	r2, r1
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	1355      	asrs	r5, r2, #13
 8000a6e:	04d4      	lsls	r4, r2, #19
 8000a70:	4a18      	ldr	r2, [pc, #96]	; (8000ad4 <LoRA_set_frequency+0x78>)
 8000a72:	f04f 0300 	mov.w	r3, #0
 8000a76:	4620      	mov	r0, r4
 8000a78:	4629      	mov	r1, r5
 8000a7a:	f7ff fcb1 	bl	80003e0 <__aeabi_uldivmod>
 8000a7e:	4602      	mov	r2, r0
 8000a80:	460b      	mov	r3, r1
 8000a82:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8000a86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000a8a:	f04f 0200 	mov.w	r2, #0
 8000a8e:	f04f 0300 	mov.w	r3, #0
 8000a92:	0c02      	lsrs	r2, r0, #16
 8000a94:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a98:	0c0b      	lsrs	r3, r1, #16
 8000a9a:	b2d3      	uxtb	r3, r2
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	2006      	movs	r0, #6
 8000aa0:	f7ff ffa6 	bl	80009f0 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t)(frf >> 8));
 8000aa4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000aa8:	f04f 0200 	mov.w	r2, #0
 8000aac:	f04f 0300 	mov.w	r3, #0
 8000ab0:	0a02      	lsrs	r2, r0, #8
 8000ab2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000ab6:	0a0b      	lsrs	r3, r1, #8
 8000ab8:	b2d3      	uxtb	r3, r2
 8000aba:	4619      	mov	r1, r3
 8000abc:	2007      	movs	r0, #7
 8000abe:	f7ff ff97 	bl	80009f0 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8000ac2:	7a3b      	ldrb	r3, [r7, #8]
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	2008      	movs	r0, #8
 8000ac8:	f7ff ff92 	bl	80009f0 <LoRA_Write_Register>
}
 8000acc:	bf00      	nop
 8000ace:	3710      	adds	r7, #16
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bdb0      	pop	{r4, r5, r7, pc}
 8000ad4:	01e84800 	.word	0x01e84800

08000ad8 <LoRA_idle>:

void LoRA_idle(){
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8000adc:	2181      	movs	r1, #129	; 0x81
 8000ade:	2001      	movs	r0, #1
 8000ae0:	f7ff ff86 	bl	80009f0 <LoRA_Write_Register>
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <LoRA_setOCP>:

void LoRA_setOCP(uint8_t mA){
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	71fb      	strb	r3, [r7, #7]
	  uint8_t ocpTrim = 27;
 8000af2:	231b      	movs	r3, #27
 8000af4:	73fb      	strb	r3, [r7, #15]

	  if (mA <= 120) {
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	2b78      	cmp	r3, #120	; 0x78
 8000afa:	d809      	bhi.n	8000b10 <LoRA_setOCP+0x28>
	    ocpTrim = (mA - 45) / 5;
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	3b2d      	subs	r3, #45	; 0x2d
 8000b00:	4a11      	ldr	r2, [pc, #68]	; (8000b48 <LoRA_setOCP+0x60>)
 8000b02:	fb82 1203 	smull	r1, r2, r2, r3
 8000b06:	1052      	asrs	r2, r2, #1
 8000b08:	17db      	asrs	r3, r3, #31
 8000b0a:	1ad3      	subs	r3, r2, r3
 8000b0c:	73fb      	strb	r3, [r7, #15]
 8000b0e:	e00b      	b.n	8000b28 <LoRA_setOCP+0x40>
	  } else if (mA <=240) {
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	2bf0      	cmp	r3, #240	; 0xf0
 8000b14:	d808      	bhi.n	8000b28 <LoRA_setOCP+0x40>
	    ocpTrim = (mA + 30) / 10;
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	331e      	adds	r3, #30
 8000b1a:	4a0b      	ldr	r2, [pc, #44]	; (8000b48 <LoRA_setOCP+0x60>)
 8000b1c:	fb82 1203 	smull	r1, r2, r2, r3
 8000b20:	1092      	asrs	r2, r2, #2
 8000b22:	17db      	asrs	r3, r3, #31
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	73fb      	strb	r3, [r7, #15]
	  }

	  LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8000b28:	7bfb      	ldrb	r3, [r7, #15]
 8000b2a:	f003 031f 	and.w	r3, r3, #31
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	f043 0320 	orr.w	r3, r3, #32
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	4619      	mov	r1, r3
 8000b38:	200b      	movs	r0, #11
 8000b3a:	f7ff ff59 	bl	80009f0 <LoRA_Write_Register>
}
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	66666667 	.word	0x66666667

08000b4c <LoRA_setTxPower>:

void LoRA_setTxPower(int level){
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
    // PA BOOST
    if (level > 17) {
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2b11      	cmp	r3, #17
 8000b58:	dd0f      	ble.n	8000b7a <LoRA_setTxPower+0x2e>
      if (level > 20) {
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b14      	cmp	r3, #20
 8000b5e:	dd01      	ble.n	8000b64 <LoRA_setTxPower+0x18>
        level = 20;
 8000b60:	2314      	movs	r3, #20
 8000b62:	607b      	str	r3, [r7, #4]
      }

      // subtract 3 from level, so 18 - 20 maps to 15 - 17
      level -= 3;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	3b03      	subs	r3, #3
 8000b68:	607b      	str	r3, [r7, #4]

      // High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
      LoRA_Write_Register(REG_PA_DAC, 0x87);
 8000b6a:	2187      	movs	r1, #135	; 0x87
 8000b6c:	204d      	movs	r0, #77	; 0x4d
 8000b6e:	f7ff ff3f 	bl	80009f0 <LoRA_Write_Register>
      LoRA_setOCP(140);
 8000b72:	208c      	movs	r0, #140	; 0x8c
 8000b74:	f7ff ffb8 	bl	8000ae8 <LoRA_setOCP>
 8000b78:	e00b      	b.n	8000b92 <LoRA_setTxPower+0x46>
    } else {
      if (level < 2) {
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	dc01      	bgt.n	8000b84 <LoRA_setTxPower+0x38>
        level = 2;
 8000b80:	2302      	movs	r3, #2
 8000b82:	607b      	str	r3, [r7, #4]
      }
      //Default value PA_HF/LF or +17dBm
      LoRA_Write_Register(REG_PA_DAC, 0x84);
 8000b84:	2184      	movs	r1, #132	; 0x84
 8000b86:	204d      	movs	r0, #77	; 0x4d
 8000b88:	f7ff ff32 	bl	80009f0 <LoRA_Write_Register>
      LoRA_setOCP(100);
 8000b8c:	2064      	movs	r0, #100	; 0x64
 8000b8e:	f7ff ffab 	bl	8000ae8 <LoRA_setOCP>
    }

    LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	3b02      	subs	r3, #2
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	b25b      	sxtb	r3, r3
 8000b9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ba0:	b25b      	sxtb	r3, r3
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	2009      	movs	r0, #9
 8000ba8:	f7ff ff22 	bl	80009f0 <LoRA_Write_Register>
}
 8000bac:	bf00      	nop
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <LoRA_explicit_header_mode>:

void LoRA_explicit_header_mode(){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_MODEM_CONFIG_1, LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
 8000bb8:	201d      	movs	r0, #29
 8000bba:	f7ff fef1 	bl	80009a0 <LoRA_Read_Register>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	f023 0301 	bic.w	r3, r3, #1
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	201d      	movs	r0, #29
 8000bca:	f7ff ff11 	bl	80009f0 <LoRA_Write_Register>
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <LoRA_begin>:

void LoRA_begin(long frequency){
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b09c      	sub	sp, #112	; 0x70
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	2101      	movs	r1, #1
 8000be0:	4822      	ldr	r0, [pc, #136]	; (8000c6c <LoRA_begin+0x98>)
 8000be2:	f006 f9d1 	bl	8006f88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000be6:	2201      	movs	r2, #1
 8000be8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bec:	4820      	ldr	r0, [pc, #128]	; (8000c70 <LoRA_begin+0x9c>)
 8000bee:	f006 f9cb 	bl	8006f88 <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 8000bf2:	2042      	movs	r0, #66	; 0x42
 8000bf4:	f7ff fed4 	bl	80009a0 <LoRA_Read_Register>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    char data_debug[100];
	sprintf( data_debug,  "%x\n", version);
 8000bfe:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000c02:	f107 0308 	add.w	r3, r7, #8
 8000c06:	491b      	ldr	r1, [pc, #108]	; (8000c74 <LoRA_begin+0xa0>)
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f014 fea3 	bl	8015954 <siprintf>
	CDC_Transmit_HS(data_debug, strlen(data_debug));
 8000c0e:	f107 0308 	add.w	r3, r7, #8
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fb86 	bl	8000324 <strlen>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	f107 0308 	add.w	r3, r7, #8
 8000c1e:	4611      	mov	r1, r2
 8000c20:	4618      	mov	r0, r3
 8000c22:	f014 fa03 	bl	801502c <CDC_Transmit_HS>

	LoRA_sleep();
 8000c26:	f7ff ff11 	bl	8000a4c <LoRA_sleep>
	LoRA_set_frequency(868000000);
 8000c2a:	4813      	ldr	r0, [pc, #76]	; (8000c78 <LoRA_begin+0xa4>)
 8000c2c:	f7ff ff16 	bl	8000a5c <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 8000c30:	2100      	movs	r1, #0
 8000c32:	200f      	movs	r0, #15
 8000c34:	f7ff fedc 	bl	80009f0 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 8000c38:	2100      	movs	r1, #0
 8000c3a:	200e      	movs	r0, #14
 8000c3c:	f7ff fed8 	bl	80009f0 <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 8000c40:	200c      	movs	r0, #12
 8000c42:	f7ff fead 	bl	80009a0 <LoRA_Read_Register>
 8000c46:	4603      	mov	r3, r0
 8000c48:	f043 0303 	orr.w	r3, r3, #3
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	4619      	mov	r1, r3
 8000c50:	200c      	movs	r0, #12
 8000c52:	f7ff fecd 	bl	80009f0 <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 8000c56:	2104      	movs	r1, #4
 8000c58:	2026      	movs	r0, #38	; 0x26
 8000c5a:	f7ff fec9 	bl	80009f0 <LoRA_Write_Register>

	LoRA_setTxPower(17);
 8000c5e:	2011      	movs	r0, #17
 8000c60:	f7ff ff74 	bl	8000b4c <LoRA_setTxPower>

}
 8000c64:	bf00      	nop
 8000c66:	3770      	adds	r7, #112	; 0x70
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	58020c00 	.word	0x58020c00
 8000c70:	58020000 	.word	0x58020000
 8000c74:	0801623c 	.word	0x0801623c
 8000c78:	33bca100 	.word	0x33bca100

08000c7c <LoRA_beginPacket>:


void LoRA_beginPacket(){
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
	LoRA_explicit_header_mode();
 8000c80:	f7ff ff98 	bl	8000bb4 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8000c84:	2100      	movs	r1, #0
 8000c86:	200d      	movs	r0, #13
 8000c88:	f7ff feb2 	bl	80009f0 <LoRA_Write_Register>
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, 0);
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	2022      	movs	r0, #34	; 0x22
 8000c90:	f7ff feae 	bl	80009f0 <LoRA_Write_Register>
}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <LoRA_endPacket>:

void LoRA_endPacket(){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8000c9e:	2183      	movs	r1, #131	; 0x83
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	f7ff fea5 	bl	80009f0 <LoRA_Write_Register>

	while((LoRA_Read_Register(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0){
 8000ca6:	bf00      	nop
 8000ca8:	2012      	movs	r0, #18
 8000caa:	f7ff fe79 	bl	80009a0 <LoRA_Read_Register>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	f003 0308 	and.w	r3, r3, #8
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d0f7      	beq.n	8000ca8 <LoRA_endPacket+0x10>

	}

	LoRA_Write_Register(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8000cb8:	2108      	movs	r1, #8
 8000cba:	2012      	movs	r0, #18
 8000cbc:	f7ff fe98 	bl	80009f0 <LoRA_Write_Register>

	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 8000cc0:	2012      	movs	r0, #18
 8000cc2:	f7ff fe6d 	bl	80009a0 <LoRA_Read_Register>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	607b      	str	r3, [r7, #4]

	LoRA_explicit_header_mode();
 8000cca:	f7ff ff73 	bl	8000bb4 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	2012      	movs	r0, #18
 8000cd6:	f7ff fe8b 	bl	80009f0 <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d00f      	beq.n	8000d04 <LoRA_endPacket+0x6c>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f003 0320 	and.w	r3, r3, #32
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d10a      	bne.n	8000d04 <LoRA_endPacket+0x6c>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
 8000cee:	2010      	movs	r0, #16
 8000cf0:	f7ff fe56 	bl	80009a0 <LoRA_Read_Register>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	200d      	movs	r0, #13
 8000cfa:	f7ff fe79 	bl	80009f0 <LoRA_Write_Register>
		LoRA_idle();
 8000cfe:	f7ff feeb 	bl	8000ad8 <LoRA_idle>
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)){
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
	}
}
 8000d02:	e00d      	b.n	8000d20 <LoRA_endPacket+0x88>
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)){
 8000d04:	2001      	movs	r0, #1
 8000d06:	f7ff fe4b 	bl	80009a0 <LoRA_Read_Register>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b86      	cmp	r3, #134	; 0x86
 8000d0e:	d007      	beq.n	8000d20 <LoRA_endPacket+0x88>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8000d10:	2100      	movs	r1, #0
 8000d12:	200d      	movs	r0, #13
 8000d14:	f7ff fe6c 	bl	80009f0 <LoRA_Write_Register>
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 8000d18:	2186      	movs	r1, #134	; 0x86
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	f7ff fe68 	bl	80009f0 <LoRA_Write_Register>
}
 8000d20:	bf00      	nop
 8000d22:	3708      	adds	r7, #8
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <LoRA_parsePacket>:


int LoRA_parsePacket(){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
	int packetLenght = 0;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	607b      	str	r3, [r7, #4]
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 8000d32:	2012      	movs	r0, #18
 8000d34:	f7ff fe34 	bl	80009a0 <LoRA_Read_Register>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	603b      	str	r3, [r7, #0]

	LoRA_explicit_header_mode();
 8000d3c:	f7ff ff3a 	bl	8000bb4 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	4619      	mov	r1, r3
 8000d46:	2012      	movs	r0, #18
 8000d48:	f7ff fe52 	bl	80009f0 <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d014      	beq.n	8000d80 <LoRA_parsePacket+0x58>
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	f003 0320 	and.w	r3, r3, #32
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d10f      	bne.n	8000d80 <LoRA_parsePacket+0x58>
		packetLenght = LoRA_Read_Register(REG_RX_NB_BYTES);
 8000d60:	2013      	movs	r0, #19
 8000d62:	f7ff fe1d 	bl	80009a0 <LoRA_Read_Register>
 8000d66:	4603      	mov	r3, r0
 8000d68:	607b      	str	r3, [r7, #4]
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
 8000d6a:	2010      	movs	r0, #16
 8000d6c:	f7ff fe18 	bl	80009a0 <LoRA_Read_Register>
 8000d70:	4603      	mov	r3, r0
 8000d72:	4619      	mov	r1, r3
 8000d74:	200d      	movs	r0, #13
 8000d76:	f7ff fe3b 	bl	80009f0 <LoRA_Write_Register>
		LoRA_idle();
 8000d7a:	f7ff fead 	bl	8000ad8 <LoRA_idle>
 8000d7e:	e00d      	b.n	8000d9c <LoRA_parsePacket+0x74>
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)){
 8000d80:	2001      	movs	r0, #1
 8000d82:	f7ff fe0d 	bl	80009a0 <LoRA_Read_Register>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b86      	cmp	r3, #134	; 0x86
 8000d8a:	d007      	beq.n	8000d9c <LoRA_parsePacket+0x74>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	200d      	movs	r0, #13
 8000d90:	f7ff fe2e 	bl	80009f0 <LoRA_Write_Register>

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 8000d94:	2186      	movs	r1, #134	; 0x86
 8000d96:	2001      	movs	r0, #1
 8000d98:	f7ff fe2a 	bl	80009f0 <LoRA_Write_Register>
	}
	return packetLenght;
 8000d9c:	687b      	ldr	r3, [r7, #4]

}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <LoRA_sendPacket>:

void LoRA_sendPacket(char * data){
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b084      	sub	sp, #16
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
    LoRA_beginPacket();
 8000dae:	f7ff ff65 	bl	8000c7c <LoRA_beginPacket>
    for(int i = 0; i < strlen(data); i++){
 8000db2:	2300      	movs	r3, #0
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	e00a      	b.n	8000dce <LoRA_sendPacket+0x28>
    	LoRA_Write_Register(REG_FIFO, data[i]);
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	f7ff fe14 	bl	80009f0 <LoRA_Write_Register>
    for(int i = 0; i < strlen(data); i++){
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f7ff faa8 	bl	8000324 <strlen>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d8ed      	bhi.n	8000db8 <LoRA_sendPacket+0x12>
    }
    LoRA_Write_Register(REG_PAYLOAD_LENGTH, strlen(data));
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff faa1 	bl	8000324 <strlen>
 8000de2:	4603      	mov	r3, r0
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	4619      	mov	r1, r3
 8000de8:	2022      	movs	r0, #34	; 0x22
 8000dea:	f7ff fe01 	bl	80009f0 <LoRA_Write_Register>
    LoRA_endPacket();
 8000dee:	f7ff ff53 	bl	8000c98 <LoRA_endPacket>
}
 8000df2:	bf00      	nop
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <recv_packet>:
  setLEDs();
  return 0;
}

int recv_packet(char* LoRA_data, int max_length)
{
 8000dfa:	b590      	push	{r4, r7, lr}
 8000dfc:	b085      	sub	sp, #20
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
 8000e02:	6039      	str	r1, [r7, #0]
  int packet_length = LoRA_parsePacket();
 8000e04:	f7ff ff90 	bl	8000d28 <LoRA_parsePacket>
 8000e08:	60b8      	str	r0, [r7, #8]
  if(max_length-1 < packet_length) //-1 for the null terminator
 8000e0a:	683a      	ldr	r2, [r7, #0]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	dc01      	bgt.n	8000e16 <recv_packet+0x1c>
  {
    return 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	e01c      	b.n	8000e50 <recv_packet+0x56>
  }
  if(packet_length){
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d018      	beq.n	8000e4e <recv_packet+0x54>
    for(int i = 0; i < packet_length; i++){
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	e00a      	b.n	8000e38 <recv_packet+0x3e>
      LoRA_data[i] = LoRA_Read_Register(0x00);
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	18d4      	adds	r4, r2, r3
 8000e28:	2000      	movs	r0, #0
 8000e2a:	f7ff fdb9 	bl	80009a0 <LoRA_Read_Register>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	7023      	strb	r3, [r4, #0]
    for(int i = 0; i < packet_length; i++){
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	3301      	adds	r3, #1
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fa      	ldr	r2, [r7, #12]
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	dbf0      	blt.n	8000e22 <recv_packet+0x28>
    }
    LoRA_data[packet_length] = '\0';
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	4413      	add	r3, r2
 8000e46:	2200      	movs	r2, #0
 8000e48:	701a      	strb	r2, [r3, #0]
    return packet_length;
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	e000      	b.n	8000e50 <recv_packet+0x56>
  }
  else{
    return 0;
 8000e4e:	2300      	movs	r3, #0
  }
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd90      	pop	{r4, r7, pc}

08000e58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e58:	b5b0      	push	{r4, r5, r7, lr}
 8000e5a:	f5ad 6d89 	sub.w	sp, sp, #1096	; 0x448
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 8000e60:	4bd5      	ldr	r3, [pc, #852]	; (80011b8 <main+0x360>)
 8000e62:	f507 7475 	add.w	r4, r7, #980	; 0x3d4
 8000e66:	461d      	mov	r5, r3
 8000e68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e6c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000e70:	c403      	stmia	r4!, {r0, r1}
 8000e72:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e74:	f002 f958 	bl	8003128 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e78:	f000 fa28 	bl	80012cc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000e7c:	f000 faa2 	bl	80013c4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e80:	f001 f806 	bl	8001e90 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e84:	f000 ffa4 	bl	8001dd0 <MX_DMA_Init>
  MX_SPI3_Init();
 8000e88:	f000 fd22 	bl	80018d0 <MX_SPI3_Init>
  MX_FDCAN3_Init();
 8000e8c:	f000 fbb2 	bl	80015f4 <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 8000e90:	f000 ff52 	bl	8001d38 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000e94:	f000 fac8 	bl	8001428 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000e98:	f000 fe2c 	bl	8001af4 <MX_TIM4_Init>
  MX_ADC3_Init();
 8000e9c:	f000 fb3c 	bl	8001518 <MX_ADC3_Init>
  MX_SPI2_Init();
 8000ea0:	f000 fcc0 	bl	8001824 <MX_SPI2_Init>
  MX_I2C2_Init();
 8000ea4:	f000 fc0a 	bl	80016bc <MX_I2C2_Init>
  MX_TIM2_Init();
 8000ea8:	f000 fd68 	bl	800197c <MX_TIM2_Init>
  MX_TIM5_Init();
 8000eac:	f000 fe9e 	bl	8001bec <MX_TIM5_Init>
  MX_TIM3_Init();
 8000eb0:	f000 fdbc 	bl	8001a2c <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8000eb4:	f013 fffa 	bl	8014eac <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8000eb8:	f000 fc5e 	bl	8001778 <MX_SPI1_Init>
  MX_UART4_Init();
 8000ebc:	f000 fef0 	bl	8001ca0 <MX_UART4_Init>
  MX_FATFS_Init();
 8000ec0:	f011 fd88 	bl	80129d4 <MX_FATFS_Init>
  MX_SDMMC2_SD_Init();
 8000ec4:	f000 fc3a 	bl	800173c <MX_SDMMC2_SD_Init>
  /* USER CODE BEGIN 2 */

	const int MAX = 50;
 8000ec8:	2332      	movs	r3, #50	; 0x32
 8000eca:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
	const double SPEED = 2.0/2000;
 8000ece:	a3b8      	add	r3, pc, #736	; (adr r3, 80011b0 <main+0x358>)
 8000ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed4:	f507 6184 	add.w	r1, r7, #1056	; 0x420
 8000ed8:	e9c1 2300 	strd	r2, r3, [r1]
	const double r_offset = 0;
 8000edc:	f04f 0200 	mov.w	r2, #0
 8000ee0:	f04f 0300 	mov.w	r3, #0
 8000ee4:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 8000ee8:	e9c1 2300 	strd	r2, r3, [r1]
	const double g_offset = 1;
 8000eec:	f04f 0200 	mov.w	r2, #0
 8000ef0:	4bb2      	ldr	r3, [pc, #712]	; (80011bc <main+0x364>)
 8000ef2:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8000ef6:	e9c1 2300 	strd	r2, r3, [r1]
	const double b_offset = 2;
 8000efa:	f04f 0200 	mov.w	r2, #0
 8000efe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f02:	f507 6181 	add.w	r1, r7, #1032	; 0x408
 8000f06:	e9c1 2300 	strd	r2, r3, [r1]

	LG2_Write_Register(0x10, 0b00111100); //Accelerometer setup - CTRL1_XL
 8000f0a:	213c      	movs	r1, #60	; 0x3c
 8000f0c:	2010      	movs	r0, #16
 8000f0e:	f7ff fc3d 	bl	800078c <LG2_Write_Register>
	LG2_Write_Register(0x11, 0b00110000); //Gyroscope setup - CTRL2_G
 8000f12:	2130      	movs	r1, #48	; 0x30
 8000f14:	2011      	movs	r0, #17
 8000f16:	f7ff fc39 	bl	800078c <LG2_Write_Register>
	LG2_Write_Register(0x13, 0b00000100); //disables I2C - CTRL4_C
 8000f1a:	2104      	movs	r1, #4
 8000f1c:	2013      	movs	r0, #19
 8000f1e:	f7ff fc35 	bl	800078c <LG2_Write_Register>

	HAL_Delay(3000);
 8000f22:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000f26:	f002 f991 	bl	800324c <HAL_Delay>
	HG2_Write_Register(0x1C, 0b10111111);
 8000f2a:	21bf      	movs	r1, #191	; 0xbf
 8000f2c:	201c      	movs	r0, #28
 8000f2e:	f7ff fbd9 	bl	80006e4 <HG2_Write_Register>
	HAL_Delay(2);
 8000f32:	2002      	movs	r0, #2
 8000f34:	f002 f98a 	bl	800324c <HAL_Delay>

	HG2_Write_Register(0x1B, 0b01011000);
 8000f38:	2158      	movs	r1, #88	; 0x58
 8000f3a:	201b      	movs	r0, #27
 8000f3c:	f7ff fbd2 	bl	80006e4 <HG2_Write_Register>
	HG2_Write_Register(0x1B, 0b11011000);
 8000f40:	21d8      	movs	r1, #216	; 0xd8
 8000f42:	201b      	movs	r0, #27
 8000f44:	f7ff fbce 	bl	80006e4 <HG2_Write_Register>

	float rotZ = 0;
 8000f48:	f04f 0300 	mov.w	r3, #0
 8000f4c:	f207 4204 	addw	r2, r7, #1028	; 0x404
 8000f50:	6013      	str	r3, [r2, #0]
	uint32_t lastTime = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444

	float calOmegaX = 0;
 8000f58:	f04f 0300 	mov.w	r3, #0
 8000f5c:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8000f60:	6013      	str	r3, [r2, #0]
	float calOmegaY = 0;
 8000f62:	f04f 0300 	mov.w	r3, #0
 8000f66:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 8000f6a:	6013      	str	r3, [r2, #0]
	float calOmegaZ = 0;
 8000f6c:	f04f 0300 	mov.w	r3, #0
 8000f70:	f507 6287 	add.w	r2, r7, #1080	; 0x438
 8000f74:	6013      	str	r3, [r2, #0]
	//HAL_Delay(2000);
	for(int i = 0; i < 500; i++){
 8000f76:	2300      	movs	r3, #0
 8000f78:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 8000f7c:	e02e      	b.n	8000fdc <main+0x184>
		calOmegaX += LG2_Get_Gyro_X();
 8000f7e:	f7ff fc2d 	bl	80007dc <LG2_Get_Gyro_X>
 8000f82:	eeb0 7a40 	vmov.f32	s14, s0
 8000f86:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8000f8a:	edd3 7a00 	vldr	s15, [r3]
 8000f8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f92:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8000f96:	edc3 7a00 	vstr	s15, [r3]
		calOmegaY += LG2_Get_Gyro_Y();
 8000f9a:	f7ff fc4f 	bl	800083c <LG2_Get_Gyro_Y>
 8000f9e:	eeb0 7a40 	vmov.f32	s14, s0
 8000fa2:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8000fa6:	edd3 7a00 	vldr	s15, [r3]
 8000faa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fae:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8000fb2:	edc3 7a00 	vstr	s15, [r3]
		calOmegaZ += LG2_Get_Gyro_Z();
 8000fb6:	f7ff fc73 	bl	80008a0 <LG2_Get_Gyro_Z>
 8000fba:	eeb0 7a40 	vmov.f32	s14, s0
 8000fbe:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8000fc2:	edd3 7a00 	vldr	s15, [r3]
 8000fc6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fca:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8000fce:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < 500; i++){
 8000fd2:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 8000fdc:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8000fe0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000fe4:	dbcb      	blt.n	8000f7e <main+0x126>

		//HAL_Delay(20);
	}
	calOmegaX /= 500;
 8000fe6:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8000fea:	ed93 7a00 	vldr	s14, [r3]
 8000fee:	eddf 6a74 	vldr	s13, [pc, #464]	; 80011c0 <main+0x368>
 8000ff2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ff6:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8000ffa:	edc3 7a00 	vstr	s15, [r3]
	calOmegaY /= 500;
 8000ffe:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001002:	ed93 7a00 	vldr	s14, [r3]
 8001006:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80011c0 <main+0x368>
 800100a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800100e:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001012:	edc3 7a00 	vstr	s15, [r3]
	calOmegaZ /= 500;
 8001016:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800101a:	ed93 7a00 	vldr	s14, [r3]
 800101e:	eddf 6a68 	vldr	s13, [pc, #416]	; 80011c0 <main+0x368>
 8001022:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001026:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 800102a:	edc3 7a00 	vstr	s15, [r3]

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 800102e:	2201      	movs	r2, #1
 8001030:	2101      	movs	r1, #1
 8001032:	4864      	ldr	r0, [pc, #400]	; (80011c4 <main+0x36c>)
 8001034:	f005 ffa8 	bl	8006f88 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001038:	20c8      	movs	r0, #200	; 0xc8
 800103a:	f002 f907 	bl	800324c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	2101      	movs	r1, #1
 8001042:	4860      	ldr	r0, [pc, #384]	; (80011c4 <main+0x36c>)
 8001044:	f005 ffa0 	bl	8006f88 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001048:	20c8      	movs	r0, #200	; 0xc8
 800104a:	f002 f8ff 	bl	800324c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 800104e:	2201      	movs	r2, #1
 8001050:	2101      	movs	r1, #1
 8001052:	485c      	ldr	r0, [pc, #368]	; (80011c4 <main+0x36c>)
 8001054:	f005 ff98 	bl	8006f88 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001058:	20c8      	movs	r0, #200	; 0xc8
 800105a:	f002 f8f7 	bl	800324c <HAL_Delay>


	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 800105e:	2201      	movs	r2, #1
 8001060:	2104      	movs	r1, #4
 8001062:	4859      	ldr	r0, [pc, #356]	; (80011c8 <main+0x370>)
 8001064:	f005 ff90 	bl	8006f88 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 8001068:	2201      	movs	r2, #1
 800106a:	2108      	movs	r1, #8
 800106c:	4856      	ldr	r0, [pc, #344]	; (80011c8 <main+0x370>)
 800106e:	f005 ff8b 	bl	8006f88 <HAL_GPIO_WritePin>


    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001072:	2100      	movs	r1, #0
 8001074:	4855      	ldr	r0, [pc, #340]	; (80011cc <main+0x374>)
 8001076:	f00d f9d5 	bl	800e424 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800107a:	2104      	movs	r1, #4
 800107c:	4853      	ldr	r0, [pc, #332]	; (80011cc <main+0x374>)
 800107e:	f00d f9d1 	bl	800e424 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001082:	2108      	movs	r1, #8
 8001084:	4851      	ldr	r0, [pc, #324]	; (80011cc <main+0x374>)
 8001086:	f00d f9cd 	bl	800e424 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800108a:	210c      	movs	r1, #12
 800108c:	484f      	ldr	r0, [pc, #316]	; (80011cc <main+0x374>)
 800108e:	f00d f9c9 	bl	800e424 <HAL_TIM_PWM_Start>

    setServo(1, 90);
 8001092:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 80011d0 <main+0x378>
 8001096:	2001      	movs	r0, #1
 8001098:	f7ff fc3a 	bl	8000910 <setServo>
    setServo(2, 180);
 800109c:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 80011d4 <main+0x37c>
 80010a0:	2002      	movs	r0, #2
 80010a2:	f7ff fc35 	bl	8000910 <setServo>
    setServo(3, 0);
 80010a6:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 80011d8 <main+0x380>
 80010aa:	2003      	movs	r0, #3
 80010ac:	f7ff fc30 	bl	8000910 <setServo>
    setServo(4, 45);
 80010b0:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 80011dc <main+0x384>
 80010b4:	2004      	movs	r0, #4
 80010b6:	f7ff fc2b 	bl	8000910 <setServo>

    LoRA_begin(868000000);
 80010ba:	4849      	ldr	r0, [pc, #292]	; (80011e0 <main+0x388>)
 80010bc:	f7ff fd8a 	bl	8000bd4 <LoRA_begin>
//    		}
//    	}
//    	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);


	int connected = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
	long last_packet = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
	int ARMED = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	f8c7 33f8 	str.w	r3, [r7, #1016]	; 0x3f8

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//HAL_ADC_Start_DMA(&hadc3, &read_Data, 1);

  char state[50] = "DISARMED";
 80010d2:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80010d6:	f5a3 7443 	sub.w	r4, r3, #780	; 0x30c
 80010da:	4a42      	ldr	r2, [pc, #264]	; (80011e4 <main+0x38c>)
 80010dc:	4623      	mov	r3, r4
 80010de:	ca07      	ldmia	r2, {r0, r1, r2}
 80010e0:	c303      	stmia	r3!, {r0, r1}
 80010e2:	701a      	strb	r2, [r3, #0]
 80010e4:	f104 0309 	add.w	r3, r4, #9
 80010e8:	2229      	movs	r2, #41	; 0x29
 80010ea:	2100      	movs	r1, #0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f014 fc29 	bl	8015944 <memset>
  char command[50];
  char acknowledge[50];
  char recieved_packet[50];
  char response_packet[50];
  char sendMessage[50];
  int last = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
  int packetId;
  char communication_state[50] = "RECIEVING";
 80010f8:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80010fc:	f2a3 4444 	subw	r4, r3, #1092	; 0x444
 8001100:	4a39      	ldr	r2, [pc, #228]	; (80011e8 <main+0x390>)
 8001102:	4623      	mov	r3, r4
 8001104:	ca07      	ldmia	r2, {r0, r1, r2}
 8001106:	c303      	stmia	r3!, {r0, r1}
 8001108:	801a      	strh	r2, [r3, #0]
 800110a:	f104 030a 	add.w	r3, r4, #10
 800110e:	2228      	movs	r2, #40	; 0x28
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f014 fc16 	bl	8015944 <memset>
  int isReceived = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430

	while (1) {


    if(strcmp(communication_state,"RECIEVING") == 0)
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	4932      	ldr	r1, [pc, #200]	; (80011ec <main+0x394>)
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff f8f4 	bl	8000310 <strcmp>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d164      	bne.n	80011f8 <main+0x3a0>
    {

      if(isReceived)
 800112e:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8001132:	2b00      	cmp	r3, #0
 8001134:	d018      	beq.n	8001168 <main+0x310>
      {
        //if crc then:
        //send acknowledge
        //{
        strcpy(command, recieved_packet);
 8001136:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800113a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800113e:	4611      	mov	r1, r2
 8001140:	4618      	mov	r0, r3
 8001142:	f014 fc27 	bl	8015994 <strcpy>
        LoRA_sendPacket(recieved_packet);
 8001146:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff fe2b 	bl	8000da6 <LoRA_sendPacket>
        strcpy(communication_state,"WAITING FOR PRIVILIGE");
 8001150:	1d3b      	adds	r3, r7, #4
 8001152:	4a27      	ldr	r2, [pc, #156]	; (80011f0 <main+0x398>)
 8001154:	461c      	mov	r4, r3
 8001156:	4615      	mov	r5, r2
 8001158:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800115a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800115c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001160:	6020      	str	r0, [r4, #0]
 8001162:	3404      	adds	r4, #4
 8001164:	8021      	strh	r1, [r4, #0]
 8001166:	e08e      	b.n	8001286 <main+0x42e>
        //}
      }
      else
      {
        //give up MASTER
        LoRA_sendPacket("$");
 8001168:	4822      	ldr	r0, [pc, #136]	; (80011f4 <main+0x39c>)
 800116a:	f7ff fe1c 	bl	8000da6 <LoRA_sendPacket>
        isReceived = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
        for(int i = 0; i < 1000; i++){
 8001174:	2300      	movs	r3, #0
 8001176:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 800117a:	e013      	b.n	80011a4 <main+0x34c>
        	if(recv_packet(recieved_packet, 50)){
 800117c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001180:	2132      	movs	r1, #50	; 0x32
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff fe39 	bl	8000dfa <recv_packet>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d002      	beq.n	8001194 <main+0x33c>
        		isReceived = 1;
 800118e:	2301      	movs	r3, #1
 8001190:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
        	}
        	HAL_Delay(1);
 8001194:	2001      	movs	r0, #1
 8001196:	f002 f859 	bl	800324c <HAL_Delay>
        for(int i = 0; i < 1000; i++){
 800119a:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 800119e:	3301      	adds	r3, #1
 80011a0:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 80011a4:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 80011a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011ac:	dbe6      	blt.n	800117c <main+0x324>
 80011ae:	e06a      	b.n	8001286 <main+0x42e>
 80011b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80011b4:	3f50624d 	.word	0x3f50624d
 80011b8:	080162a4 	.word	0x080162a4
 80011bc:	3ff00000 	.word	0x3ff00000
 80011c0:	43fa0000 	.word	0x43fa0000
 80011c4:	58020c00 	.word	0x58020c00
 80011c8:	58021800 	.word	0x58021800
 80011cc:	240006f0 	.word	0x240006f0
 80011d0:	42b40000 	.word	0x42b40000
 80011d4:	43340000 	.word	0x43340000
 80011d8:	00000000 	.word	0x00000000
 80011dc:	42340000 	.word	0x42340000
 80011e0:	33bca100 	.word	0x33bca100
 80011e4:	080162c0 	.word	0x080162c0
 80011e8:	080162f4 	.word	0x080162f4
 80011ec:	08016254 	.word	0x08016254
 80011f0:	08016260 	.word	0x08016260
 80011f4:	08016278 	.word	0x08016278
        //sprintf(gotten,"gotten: %d",LoRA_parsePacket());
        //LoRA_sendPacket(gotten);
		//HAL_Delay(1000);
      }
    }
    else if(strcmp(communication_state,"WAITING FOR PRIVILIGE") == 0)
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	492d      	ldr	r1, [pc, #180]	; (80012b0 <main+0x458>)
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f887 	bl	8000310 <strcmp>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d12b      	bne.n	8001260 <main+0x408>
    {
      if(recv_packet(recieved_packet, 50))
 8001208:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800120c:	2132      	movs	r1, #50	; 0x32
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fdf3 	bl	8000dfa <recv_packet>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d035      	beq.n	8001286 <main+0x42e>
      {
          LoRA_sendPacket("Recived packet");
 800121a:	4826      	ldr	r0, [pc, #152]	; (80012b4 <main+0x45c>)
 800121c:	f7ff fdc3 	bl	8000da6 <LoRA_sendPacket>

        //if crc then:
        //{
          if(strcmp(recieved_packet, "$") == 0)
 8001220:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001224:	4924      	ldr	r1, [pc, #144]	; (80012b8 <main+0x460>)
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff f872 	bl	8000310 <strcmp>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d10a      	bne.n	8001248 <main+0x3f0>
          {

            strcpy(communication_state,"MASTER");
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	4a21      	ldr	r2, [pc, #132]	; (80012bc <main+0x464>)
 8001236:	e892 0003 	ldmia.w	r2, {r0, r1}
 800123a:	6018      	str	r0, [r3, #0]
 800123c:	3304      	adds	r3, #4
 800123e:	8019      	strh	r1, [r3, #0]
 8001240:	3302      	adds	r3, #2
 8001242:	0c0a      	lsrs	r2, r1, #16
 8001244:	701a      	strb	r2, [r3, #0]
 8001246:	e01e      	b.n	8001286 <main+0x42e>
          }
          else
          {
              LoRA_sendPacket("Received not $");
 8001248:	481d      	ldr	r0, [pc, #116]	; (80012c0 <main+0x468>)
 800124a:	f7ff fdac 	bl	8000da6 <LoRA_sendPacket>

            //send acknowledge again
            strcpy(command, recieved_packet);
 800124e:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001256:	4611      	mov	r1, r2
 8001258:	4618      	mov	r0, r3
 800125a:	f014 fb9b 	bl	8015994 <strcpy>
 800125e:	e012      	b.n	8001286 <main+0x42e>

          }
        //}
      }     
    }
    else if(strcmp(communication_state,"MASTER") == 0)
 8001260:	1d3b      	adds	r3, r7, #4
 8001262:	4916      	ldr	r1, [pc, #88]	; (80012bc <main+0x464>)
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff f853 	bl	8000310 <strcmp>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d10a      	bne.n	8001286 <main+0x42e>
    {
    	HAL_Delay(10);
 8001270:	200a      	movs	r0, #10
 8001272:	f001 ffeb 	bl	800324c <HAL_Delay>
    	LoRA_sendPacket("MASTER");
 8001276:	4811      	ldr	r0, [pc, #68]	; (80012bc <main+0x464>)
 8001278:	f7ff fd95 	bl	8000da6 <LoRA_sendPacket>
//        {
//
//        }
//      }

      strcpy(communication_state,"RECIEVING");
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	4a11      	ldr	r2, [pc, #68]	; (80012c4 <main+0x46c>)
 8001280:	ca07      	ldmia	r2, {r0, r1, r2}
 8001282:	c303      	stmia	r3!, {r0, r1}
 8001284:	801a      	strh	r2, [r3, #0]
//			LED_Color_Data[i][0] = (uint32_t)MAX*triangle_space(color_offset+r_offset);
//			LED_Color_Data[i][1] = (uint32_t)MAX*triangle_space(color_offset+g_offset);
//			LED_Color_Data[i][2] = (uint32_t)MAX*triangle_space(color_offset+b_offset);
//		}

		float timeElapsed = ((float)(HAL_GetTick() - lastTime)) / 1000;
 8001286:	f001 ffd5 	bl	8003234 <HAL_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	ee07 3a90 	vmov	s15, r3
 8001296:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800129a:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80012c8 <main+0x470>
 800129e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012a2:	edc7 7afc 	vstr	s15, [r7, #1008]	; 0x3f0

		//float GyroX = LG2_Get_Gyro_X() - calOmegaX;
		//float GyroY = LG2_Get_Gyro_Y() - calOmegaY;
		//float GyroZ = LG2_Get_Gyro_Z() - calOmegaZ;

		lastTime = HAL_GetTick();
 80012a6:	f001 ffc5 	bl	8003234 <HAL_GetTick>
 80012aa:	f8c7 0444 	str.w	r0, [r7, #1092]	; 0x444
	while (1) {
 80012ae:	e736      	b.n	800111e <main+0x2c6>
 80012b0:	08016260 	.word	0x08016260
 80012b4:	0801627c 	.word	0x0801627c
 80012b8:	08016278 	.word	0x08016278
 80012bc:	0801628c 	.word	0x0801628c
 80012c0:	08016294 	.word	0x08016294
 80012c4:	08016254 	.word	0x08016254
 80012c8:	447a0000 	.word	0x447a0000

080012cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b09c      	sub	sp, #112	; 0x70
 80012d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d6:	224c      	movs	r2, #76	; 0x4c
 80012d8:	2100      	movs	r1, #0
 80012da:	4618      	mov	r0, r3
 80012dc:	f014 fb32 	bl	8015944 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e0:	1d3b      	adds	r3, r7, #4
 80012e2:	2220      	movs	r2, #32
 80012e4:	2100      	movs	r1, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f014 fb2c 	bl	8015944 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80012ec:	2002      	movs	r0, #2
 80012ee:	f007 fa45 	bl	800877c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80012f2:	2300      	movs	r3, #0
 80012f4:	603b      	str	r3, [r7, #0]
 80012f6:	4b32      	ldr	r3, [pc, #200]	; (80013c0 <SystemClock_Config+0xf4>)
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012fe:	4a30      	ldr	r2, [pc, #192]	; (80013c0 <SystemClock_Config+0xf4>)
 8001300:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001304:	6193      	str	r3, [r2, #24]
 8001306:	4b2e      	ldr	r3, [pc, #184]	; (80013c0 <SystemClock_Config+0xf4>)
 8001308:	699b      	ldr	r3, [r3, #24]
 800130a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800130e:	603b      	str	r3, [r7, #0]
 8001310:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001312:	bf00      	nop
 8001314:	4b2a      	ldr	r3, [pc, #168]	; (80013c0 <SystemClock_Config+0xf4>)
 8001316:	699b      	ldr	r3, [r3, #24]
 8001318:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800131c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001320:	d1f8      	bne.n	8001314 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8001322:	2323      	movs	r3, #35	; 0x23
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001326:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800132a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800132c:	2301      	movs	r3, #1
 800132e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001330:	2340      	movs	r3, #64	; 0x40
 8001332:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001334:	2301      	movs	r3, #1
 8001336:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001338:	2302      	movs	r3, #2
 800133a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800133c:	2300      	movs	r3, #0
 800133e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001340:	2304      	movs	r3, #4
 8001342:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001344:	230c      	movs	r3, #12
 8001346:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001348:	2301      	movs	r3, #1
 800134a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 800134c:	230c      	movs	r3, #12
 800134e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001350:	2302      	movs	r3, #2
 8001352:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001354:	230c      	movs	r3, #12
 8001356:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001358:	2300      	movs	r3, #0
 800135a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001360:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001364:	4618      	mov	r0, r3
 8001366:	f007 fa53 	bl	8008810 <HAL_RCC_OscConfig>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001370:	f000 ff02 	bl	8002178 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001374:	233f      	movs	r3, #63	; 0x3f
 8001376:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001378:	2303      	movs	r3, #3
 800137a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001380:	2308      	movs	r3, #8
 8001382:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001384:	2340      	movs	r3, #64	; 0x40
 8001386:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001388:	2340      	movs	r3, #64	; 0x40
 800138a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800138c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001390:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001392:	2340      	movs	r3, #64	; 0x40
 8001394:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	2101      	movs	r1, #1
 800139a:	4618      	mov	r0, r3
 800139c:	f007 fe12 	bl	8008fc4 <HAL_RCC_ClockConfig>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <SystemClock_Config+0xde>
  {
    Error_Handler();
 80013a6:	f000 fee7 	bl	8002178 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80013aa:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80013ae:	2100      	movs	r1, #0
 80013b0:	2000      	movs	r0, #0
 80013b2:	f007 ffbd 	bl	8009330 <HAL_RCC_MCOConfig>
}
 80013b6:	bf00      	nop
 80013b8:	3770      	adds	r7, #112	; 0x70
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	58024800 	.word	0x58024800

080013c4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b0ae      	sub	sp, #184	; 0xb8
 80013c8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013ca:	463b      	mov	r3, r7
 80013cc:	22b8      	movs	r2, #184	; 0xb8
 80013ce:	2100      	movs	r1, #0
 80013d0:	4618      	mov	r0, r3
 80013d2:	f014 fab7 	bl	8015944 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 80013d6:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 80013da:	f04f 0300 	mov.w	r3, #0
 80013de:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 80013e2:	2304      	movs	r3, #4
 80013e4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80013e6:	230c      	movs	r3, #12
 80013e8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 80013ea:	2304      	movs	r3, #4
 80013ec:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80013ee:	2302      	movs	r3, #2
 80013f0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80013f2:	2302      	movs	r3, #2
 80013f4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80013f6:	23c0      	movs	r3, #192	; 0xc0
 80013f8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001402:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001406:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001408:	2300      	movs	r3, #0
 800140a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800140e:	463b      	mov	r3, r7
 8001410:	4618      	mov	r0, r3
 8001412:	f008 f9cd 	bl	80097b0 <HAL_RCCEx_PeriphCLKConfig>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 800141c:	f000 feac 	bl	8002178 <Error_Handler>
  }
}
 8001420:	bf00      	nop
 8001422:	37b8      	adds	r7, #184	; 0xb8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08c      	sub	sp, #48	; 0x30
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800142e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800143a:	463b      	mov	r3, r7
 800143c:	2224      	movs	r2, #36	; 0x24
 800143e:	2100      	movs	r1, #0
 8001440:	4618      	mov	r0, r3
 8001442:	f014 fa7f 	bl	8015944 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001446:	4b31      	ldr	r3, [pc, #196]	; (800150c <MX_ADC1_Init+0xe4>)
 8001448:	4a31      	ldr	r2, [pc, #196]	; (8001510 <MX_ADC1_Init+0xe8>)
 800144a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 800144c:	4b2f      	ldr	r3, [pc, #188]	; (800150c <MX_ADC1_Init+0xe4>)
 800144e:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001452:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001454:	4b2d      	ldr	r3, [pc, #180]	; (800150c <MX_ADC1_Init+0xe4>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800145a:	4b2c      	ldr	r3, [pc, #176]	; (800150c <MX_ADC1_Init+0xe4>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001460:	4b2a      	ldr	r3, [pc, #168]	; (800150c <MX_ADC1_Init+0xe4>)
 8001462:	2204      	movs	r2, #4
 8001464:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001466:	4b29      	ldr	r3, [pc, #164]	; (800150c <MX_ADC1_Init+0xe4>)
 8001468:	2200      	movs	r2, #0
 800146a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800146c:	4b27      	ldr	r3, [pc, #156]	; (800150c <MX_ADC1_Init+0xe4>)
 800146e:	2200      	movs	r2, #0
 8001470:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001472:	4b26      	ldr	r3, [pc, #152]	; (800150c <MX_ADC1_Init+0xe4>)
 8001474:	2201      	movs	r2, #1
 8001476:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001478:	4b24      	ldr	r3, [pc, #144]	; (800150c <MX_ADC1_Init+0xe4>)
 800147a:	2200      	movs	r2, #0
 800147c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001480:	4b22      	ldr	r3, [pc, #136]	; (800150c <MX_ADC1_Init+0xe4>)
 8001482:	2200      	movs	r2, #0
 8001484:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001486:	4b21      	ldr	r3, [pc, #132]	; (800150c <MX_ADC1_Init+0xe4>)
 8001488:	2200      	movs	r2, #0
 800148a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800148c:	4b1f      	ldr	r3, [pc, #124]	; (800150c <MX_ADC1_Init+0xe4>)
 800148e:	2200      	movs	r2, #0
 8001490:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001492:	4b1e      	ldr	r3, [pc, #120]	; (800150c <MX_ADC1_Init+0xe4>)
 8001494:	2200      	movs	r2, #0
 8001496:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001498:	4b1c      	ldr	r3, [pc, #112]	; (800150c <MX_ADC1_Init+0xe4>)
 800149a:	2200      	movs	r2, #0
 800149c:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800149e:	4b1b      	ldr	r3, [pc, #108]	; (800150c <MX_ADC1_Init+0xe4>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014a6:	4819      	ldr	r0, [pc, #100]	; (800150c <MX_ADC1_Init+0xe4>)
 80014a8:	f002 f950 	bl	800374c <HAL_ADC_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80014b2:	f000 fe61 	bl	8002178 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80014b6:	2300      	movs	r3, #0
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80014ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014be:	4619      	mov	r1, r3
 80014c0:	4812      	ldr	r0, [pc, #72]	; (800150c <MX_ADC1_Init+0xe4>)
 80014c2:	f003 f98b 	bl	80047dc <HAL_ADCEx_MultiModeConfigChannel>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80014cc:	f000 fe54 	bl	8002178 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80014d0:	4b10      	ldr	r3, [pc, #64]	; (8001514 <MX_ADC1_Init+0xec>)
 80014d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014d4:	2306      	movs	r3, #6
 80014d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 80014d8:	2303      	movs	r3, #3
 80014da:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014dc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80014e0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014e2:	2304      	movs	r3, #4
 80014e4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014f0:	463b      	mov	r3, r7
 80014f2:	4619      	mov	r1, r3
 80014f4:	4805      	ldr	r0, [pc, #20]	; (800150c <MX_ADC1_Init+0xe4>)
 80014f6:	f002 fb31 	bl	8003b5c <HAL_ADC_ConfigChannel>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001500:	f000 fe3a 	bl	8002178 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001504:	bf00      	nop
 8001506:	3730      	adds	r7, #48	; 0x30
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	24000180 	.word	0x24000180
 8001510:	40022000 	.word	0x40022000
 8001514:	2a000400 	.word	0x2a000400

08001518 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	; 0x28
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	2224      	movs	r2, #36	; 0x24
 8001522:	2100      	movs	r1, #0
 8001524:	4618      	mov	r0, r3
 8001526:	f014 fa0d 	bl	8015944 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800152a:	4b2f      	ldr	r3, [pc, #188]	; (80015e8 <MX_ADC3_Init+0xd0>)
 800152c:	4a2f      	ldr	r2, [pc, #188]	; (80015ec <MX_ADC3_Init+0xd4>)
 800152e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001530:	4b2d      	ldr	r3, [pc, #180]	; (80015e8 <MX_ADC3_Init+0xd0>)
 8001532:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001536:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001538:	4b2b      	ldr	r3, [pc, #172]	; (80015e8 <MX_ADC3_Init+0xd0>)
 800153a:	2208      	movs	r2, #8
 800153c:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 800153e:	4b2a      	ldr	r3, [pc, #168]	; (80015e8 <MX_ADC3_Init+0xd0>)
 8001540:	2200      	movs	r2, #0
 8001542:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001544:	4b28      	ldr	r3, [pc, #160]	; (80015e8 <MX_ADC3_Init+0xd0>)
 8001546:	2200      	movs	r2, #0
 8001548:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800154a:	4b27      	ldr	r3, [pc, #156]	; (80015e8 <MX_ADC3_Init+0xd0>)
 800154c:	2204      	movs	r2, #4
 800154e:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001550:	4b25      	ldr	r3, [pc, #148]	; (80015e8 <MX_ADC3_Init+0xd0>)
 8001552:	2200      	movs	r2, #0
 8001554:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001556:	4b24      	ldr	r3, [pc, #144]	; (80015e8 <MX_ADC3_Init+0xd0>)
 8001558:	2200      	movs	r2, #0
 800155a:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 800155c:	4b22      	ldr	r3, [pc, #136]	; (80015e8 <MX_ADC3_Init+0xd0>)
 800155e:	2201      	movs	r2, #1
 8001560:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001562:	4b21      	ldr	r3, [pc, #132]	; (80015e8 <MX_ADC3_Init+0xd0>)
 8001564:	2200      	movs	r2, #0
 8001566:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800156a:	4b1f      	ldr	r3, [pc, #124]	; (80015e8 <MX_ADC3_Init+0xd0>)
 800156c:	2200      	movs	r2, #0
 800156e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001570:	4b1d      	ldr	r3, [pc, #116]	; (80015e8 <MX_ADC3_Init+0xd0>)
 8001572:	2200      	movs	r2, #0
 8001574:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001576:	4b1c      	ldr	r3, [pc, #112]	; (80015e8 <MX_ADC3_Init+0xd0>)
 8001578:	2201      	movs	r2, #1
 800157a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 800157e:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <MX_ADC3_Init+0xd0>)
 8001580:	2200      	movs	r2, #0
 8001582:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001584:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <MX_ADC3_Init+0xd0>)
 8001586:	2200      	movs	r2, #0
 8001588:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800158a:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <MX_ADC3_Init+0xd0>)
 800158c:	2200      	movs	r2, #0
 800158e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001590:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <MX_ADC3_Init+0xd0>)
 8001592:	2200      	movs	r2, #0
 8001594:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001596:	4b14      	ldr	r3, [pc, #80]	; (80015e8 <MX_ADC3_Init+0xd0>)
 8001598:	2200      	movs	r2, #0
 800159a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800159e:	4812      	ldr	r0, [pc, #72]	; (80015e8 <MX_ADC3_Init+0xd0>)
 80015a0:	f002 f8d4 	bl	800374c <HAL_ADC_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 80015aa:	f000 fde5 	bl	8002178 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <MX_ADC3_Init+0xd8>)
 80015b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015b2:	2306      	movs	r3, #6
 80015b4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015ba:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80015be:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015c0:	2304      	movs	r3, #4
 80015c2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 80015c8:	2300      	movs	r3, #0
 80015ca:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015cc:	1d3b      	adds	r3, r7, #4
 80015ce:	4619      	mov	r1, r3
 80015d0:	4805      	ldr	r0, [pc, #20]	; (80015e8 <MX_ADC3_Init+0xd0>)
 80015d2:	f002 fac3 	bl	8003b5c <HAL_ADC_ConfigChannel>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 80015dc:	f000 fdcc 	bl	8002178 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80015e0:	bf00      	nop
 80015e2:	3728      	adds	r7, #40	; 0x28
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	240001f0 	.word	0x240001f0
 80015ec:	58026000 	.word	0x58026000
 80015f0:	04300002 	.word	0x04300002

080015f4 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 80015f8:	4b2e      	ldr	r3, [pc, #184]	; (80016b4 <MX_FDCAN3_Init+0xc0>)
 80015fa:	4a2f      	ldr	r2, [pc, #188]	; (80016b8 <MX_FDCAN3_Init+0xc4>)
 80015fc:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80015fe:	4b2d      	ldr	r3, [pc, #180]	; (80016b4 <MX_FDCAN3_Init+0xc0>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001604:	4b2b      	ldr	r3, [pc, #172]	; (80016b4 <MX_FDCAN3_Init+0xc0>)
 8001606:	2200      	movs	r2, #0
 8001608:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 800160a:	4b2a      	ldr	r3, [pc, #168]	; (80016b4 <MX_FDCAN3_Init+0xc0>)
 800160c:	2200      	movs	r2, #0
 800160e:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8001610:	4b28      	ldr	r3, [pc, #160]	; (80016b4 <MX_FDCAN3_Init+0xc0>)
 8001612:	2200      	movs	r2, #0
 8001614:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001616:	4b27      	ldr	r3, [pc, #156]	; (80016b4 <MX_FDCAN3_Init+0xc0>)
 8001618:	2200      	movs	r2, #0
 800161a:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 800161c:	4b25      	ldr	r3, [pc, #148]	; (80016b4 <MX_FDCAN3_Init+0xc0>)
 800161e:	2210      	movs	r2, #16
 8001620:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8001622:	4b24      	ldr	r3, [pc, #144]	; (80016b4 <MX_FDCAN3_Init+0xc0>)
 8001624:	2201      	movs	r2, #1
 8001626:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8001628:	4b22      	ldr	r3, [pc, #136]	; (80016b4 <MX_FDCAN3_Init+0xc0>)
 800162a:	2202      	movs	r2, #2
 800162c:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 800162e:	4b21      	ldr	r3, [pc, #132]	; (80016b4 <MX_FDCAN3_Init+0xc0>)
 8001630:	2202      	movs	r2, #2
 8001632:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8001634:	4b1f      	ldr	r3, [pc, #124]	; (80016b4 <MX_FDCAN3_Init+0xc0>)
 8001636:	2201      	movs	r2, #1
 8001638:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 800163a:	4b1e      	ldr	r3, [pc, #120]	; (80016b4 <MX_FDCAN3_Init+0xc0>)
 800163c:	2201      	movs	r2, #1
 800163e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8001640:	4b1c      	ldr	r3, [pc, #112]	; (80016b4 <MX_FDCAN3_Init+0xc0>)
 8001642:	2201      	movs	r2, #1
 8001644:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8001646:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <MX_FDCAN3_Init+0xc0>)
 8001648:	2201      	movs	r2, #1
 800164a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 800164c:	4b19      	ldr	r3, [pc, #100]	; (80016b4 <MX_FDCAN3_Init+0xc0>)
 800164e:	2200      	movs	r2, #0
 8001650:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 8001652:	4b18      	ldr	r3, [pc, #96]	; (80016b4 <MX_FDCAN3_Init+0xc0>)
 8001654:	2200      	movs	r2, #0
 8001656:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8001658:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <MX_FDCAN3_Init+0xc0>)
 800165a:	2200      	movs	r2, #0
 800165c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 800165e:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <MX_FDCAN3_Init+0xc0>)
 8001660:	2200      	movs	r2, #0
 8001662:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001664:	4b13      	ldr	r3, [pc, #76]	; (80016b4 <MX_FDCAN3_Init+0xc0>)
 8001666:	2204      	movs	r2, #4
 8001668:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 800166a:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <MX_FDCAN3_Init+0xc0>)
 800166c:	2200      	movs	r2, #0
 800166e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001670:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <MX_FDCAN3_Init+0xc0>)
 8001672:	2204      	movs	r2, #4
 8001674:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8001676:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <MX_FDCAN3_Init+0xc0>)
 8001678:	2200      	movs	r2, #0
 800167a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800167c:	4b0d      	ldr	r3, [pc, #52]	; (80016b4 <MX_FDCAN3_Init+0xc0>)
 800167e:	2204      	movs	r2, #4
 8001680:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8001682:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <MX_FDCAN3_Init+0xc0>)
 8001684:	2200      	movs	r2, #0
 8001686:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8001688:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <MX_FDCAN3_Init+0xc0>)
 800168a:	2200      	movs	r2, #0
 800168c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 800168e:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <MX_FDCAN3_Init+0xc0>)
 8001690:	2200      	movs	r2, #0
 8001692:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001694:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <MX_FDCAN3_Init+0xc0>)
 8001696:	2200      	movs	r2, #0
 8001698:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <MX_FDCAN3_Init+0xc0>)
 800169c:	2204      	movs	r2, #4
 800169e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 80016a0:	4804      	ldr	r0, [pc, #16]	; (80016b4 <MX_FDCAN3_Init+0xc0>)
 80016a2:	f004 ff4d 	bl	8006540 <HAL_FDCAN_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 80016ac:	f000 fd64 	bl	8002178 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	24000350 	.word	0x24000350
 80016b8:	4000d400 	.word	0x4000d400

080016bc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80016c0:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <MX_I2C2_Init+0x74>)
 80016c2:	4a1c      	ldr	r2, [pc, #112]	; (8001734 <MX_I2C2_Init+0x78>)
 80016c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 80016c6:	4b1a      	ldr	r3, [pc, #104]	; (8001730 <MX_I2C2_Init+0x74>)
 80016c8:	4a1b      	ldr	r2, [pc, #108]	; (8001738 <MX_I2C2_Init+0x7c>)
 80016ca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80016cc:	4b18      	ldr	r3, [pc, #96]	; (8001730 <MX_I2C2_Init+0x74>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016d2:	4b17      	ldr	r3, [pc, #92]	; (8001730 <MX_I2C2_Init+0x74>)
 80016d4:	2201      	movs	r2, #1
 80016d6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016d8:	4b15      	ldr	r3, [pc, #84]	; (8001730 <MX_I2C2_Init+0x74>)
 80016da:	2200      	movs	r2, #0
 80016dc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80016de:	4b14      	ldr	r3, [pc, #80]	; (8001730 <MX_I2C2_Init+0x74>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016e4:	4b12      	ldr	r3, [pc, #72]	; (8001730 <MX_I2C2_Init+0x74>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016ea:	4b11      	ldr	r3, [pc, #68]	; (8001730 <MX_I2C2_Init+0x74>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016f0:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <MX_I2C2_Init+0x74>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80016f6:	480e      	ldr	r0, [pc, #56]	; (8001730 <MX_I2C2_Init+0x74>)
 80016f8:	f005 fc60 	bl	8006fbc <HAL_I2C_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001702:	f000 fd39 	bl	8002178 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001706:	2100      	movs	r1, #0
 8001708:	4809      	ldr	r0, [pc, #36]	; (8001730 <MX_I2C2_Init+0x74>)
 800170a:	f005 fce7 	bl	80070dc <HAL_I2CEx_ConfigAnalogFilter>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001714:	f000 fd30 	bl	8002178 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001718:	2100      	movs	r1, #0
 800171a:	4805      	ldr	r0, [pc, #20]	; (8001730 <MX_I2C2_Init+0x74>)
 800171c:	f005 fd29 	bl	8007172 <HAL_I2CEx_ConfigDigitalFilter>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001726:	f000 fd27 	bl	8002178 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	240003f0 	.word	0x240003f0
 8001734:	40005800 	.word	0x40005800
 8001738:	20303e5d 	.word	0x20303e5d

0800173c <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8001740:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <MX_SDMMC2_SD_Init+0x34>)
 8001742:	4a0c      	ldr	r2, [pc, #48]	; (8001774 <MX_SDMMC2_SD_Init+0x38>)
 8001744:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001746:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <MX_SDMMC2_SD_Init+0x34>)
 8001748:	2200      	movs	r2, #0
 800174a:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800174c:	4b08      	ldr	r3, [pc, #32]	; (8001770 <MX_SDMMC2_SD_Init+0x34>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001752:	4b07      	ldr	r3, [pc, #28]	; (8001770 <MX_SDMMC2_SD_Init+0x34>)
 8001754:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001758:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800175a:	4b05      	ldr	r3, [pc, #20]	; (8001770 <MX_SDMMC2_SD_Init+0x34>)
 800175c:	2200      	movs	r2, #0
 800175e:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
 8001760:	4b03      	ldr	r3, [pc, #12]	; (8001770 <MX_SDMMC2_SD_Init+0x34>)
 8001762:	2200      	movs	r2, #0
 8001764:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8001766:	bf00      	nop
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	24000444 	.word	0x24000444
 8001774:	48022400 	.word	0x48022400

08001778 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800177c:	4b27      	ldr	r3, [pc, #156]	; (800181c <MX_SPI1_Init+0xa4>)
 800177e:	4a28      	ldr	r2, [pc, #160]	; (8001820 <MX_SPI1_Init+0xa8>)
 8001780:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001782:	4b26      	ldr	r3, [pc, #152]	; (800181c <MX_SPI1_Init+0xa4>)
 8001784:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001788:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800178a:	4b24      	ldr	r3, [pc, #144]	; (800181c <MX_SPI1_Init+0xa4>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001790:	4b22      	ldr	r3, [pc, #136]	; (800181c <MX_SPI1_Init+0xa4>)
 8001792:	2207      	movs	r2, #7
 8001794:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001796:	4b21      	ldr	r3, [pc, #132]	; (800181c <MX_SPI1_Init+0xa4>)
 8001798:	2200      	movs	r2, #0
 800179a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800179c:	4b1f      	ldr	r3, [pc, #124]	; (800181c <MX_SPI1_Init+0xa4>)
 800179e:	2200      	movs	r2, #0
 80017a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017a2:	4b1e      	ldr	r3, [pc, #120]	; (800181c <MX_SPI1_Init+0xa4>)
 80017a4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80017a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80017aa:	4b1c      	ldr	r3, [pc, #112]	; (800181c <MX_SPI1_Init+0xa4>)
 80017ac:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80017b0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017b2:	4b1a      	ldr	r3, [pc, #104]	; (800181c <MX_SPI1_Init+0xa4>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017b8:	4b18      	ldr	r3, [pc, #96]	; (800181c <MX_SPI1_Init+0xa4>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017be:	4b17      	ldr	r3, [pc, #92]	; (800181c <MX_SPI1_Init+0xa4>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80017c4:	4b15      	ldr	r3, [pc, #84]	; (800181c <MX_SPI1_Init+0xa4>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017ca:	4b14      	ldr	r3, [pc, #80]	; (800181c <MX_SPI1_Init+0xa4>)
 80017cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017d0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017d2:	4b12      	ldr	r3, [pc, #72]	; (800181c <MX_SPI1_Init+0xa4>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017d8:	4b10      	ldr	r3, [pc, #64]	; (800181c <MX_SPI1_Init+0xa4>)
 80017da:	2200      	movs	r2, #0
 80017dc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017de:	4b0f      	ldr	r3, [pc, #60]	; (800181c <MX_SPI1_Init+0xa4>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017e4:	4b0d      	ldr	r3, [pc, #52]	; (800181c <MX_SPI1_Init+0xa4>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017ea:	4b0c      	ldr	r3, [pc, #48]	; (800181c <MX_SPI1_Init+0xa4>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017f0:	4b0a      	ldr	r3, [pc, #40]	; (800181c <MX_SPI1_Init+0xa4>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017f6:	4b09      	ldr	r3, [pc, #36]	; (800181c <MX_SPI1_Init+0xa4>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017fc:	4b07      	ldr	r3, [pc, #28]	; (800181c <MX_SPI1_Init+0xa4>)
 80017fe:	2200      	movs	r2, #0
 8001800:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <MX_SPI1_Init+0xa4>)
 8001804:	2200      	movs	r2, #0
 8001806:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001808:	4804      	ldr	r0, [pc, #16]	; (800181c <MX_SPI1_Init+0xa4>)
 800180a:	f00c f81b 	bl	800d844 <HAL_SPI_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001814:	f000 fcb0 	bl	8002178 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}
 800181c:	240004c0 	.word	0x240004c0
 8001820:	40013000 	.word	0x40013000

08001824 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001828:	4b27      	ldr	r3, [pc, #156]	; (80018c8 <MX_SPI2_Init+0xa4>)
 800182a:	4a28      	ldr	r2, [pc, #160]	; (80018cc <MX_SPI2_Init+0xa8>)
 800182c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800182e:	4b26      	ldr	r3, [pc, #152]	; (80018c8 <MX_SPI2_Init+0xa4>)
 8001830:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001834:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001836:	4b24      	ldr	r3, [pc, #144]	; (80018c8 <MX_SPI2_Init+0xa4>)
 8001838:	2200      	movs	r2, #0
 800183a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800183c:	4b22      	ldr	r3, [pc, #136]	; (80018c8 <MX_SPI2_Init+0xa4>)
 800183e:	2207      	movs	r2, #7
 8001840:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001842:	4b21      	ldr	r3, [pc, #132]	; (80018c8 <MX_SPI2_Init+0xa4>)
 8001844:	2200      	movs	r2, #0
 8001846:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001848:	4b1f      	ldr	r3, [pc, #124]	; (80018c8 <MX_SPI2_Init+0xa4>)
 800184a:	2200      	movs	r2, #0
 800184c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800184e:	4b1e      	ldr	r3, [pc, #120]	; (80018c8 <MX_SPI2_Init+0xa4>)
 8001850:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001854:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001856:	4b1c      	ldr	r3, [pc, #112]	; (80018c8 <MX_SPI2_Init+0xa4>)
 8001858:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800185c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800185e:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <MX_SPI2_Init+0xa4>)
 8001860:	2200      	movs	r2, #0
 8001862:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001864:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <MX_SPI2_Init+0xa4>)
 8001866:	2200      	movs	r2, #0
 8001868:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800186a:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <MX_SPI2_Init+0xa4>)
 800186c:	2200      	movs	r2, #0
 800186e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001870:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <MX_SPI2_Init+0xa4>)
 8001872:	2200      	movs	r2, #0
 8001874:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001876:	4b14      	ldr	r3, [pc, #80]	; (80018c8 <MX_SPI2_Init+0xa4>)
 8001878:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800187c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800187e:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <MX_SPI2_Init+0xa4>)
 8001880:	2200      	movs	r2, #0
 8001882:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001884:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <MX_SPI2_Init+0xa4>)
 8001886:	2200      	movs	r2, #0
 8001888:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800188a:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <MX_SPI2_Init+0xa4>)
 800188c:	2200      	movs	r2, #0
 800188e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001890:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <MX_SPI2_Init+0xa4>)
 8001892:	2200      	movs	r2, #0
 8001894:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001896:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <MX_SPI2_Init+0xa4>)
 8001898:	2200      	movs	r2, #0
 800189a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800189c:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <MX_SPI2_Init+0xa4>)
 800189e:	2200      	movs	r2, #0
 80018a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80018a2:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <MX_SPI2_Init+0xa4>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80018a8:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <MX_SPI2_Init+0xa4>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80018ae:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <MX_SPI2_Init+0xa4>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018b4:	4804      	ldr	r0, [pc, #16]	; (80018c8 <MX_SPI2_Init+0xa4>)
 80018b6:	f00b ffc5 	bl	800d844 <HAL_SPI_Init>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 80018c0:	f000 fc5a 	bl	8002178 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	24000548 	.word	0x24000548
 80018cc:	40003800 	.word	0x40003800

080018d0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80018d4:	4b27      	ldr	r3, [pc, #156]	; (8001974 <MX_SPI3_Init+0xa4>)
 80018d6:	4a28      	ldr	r2, [pc, #160]	; (8001978 <MX_SPI3_Init+0xa8>)
 80018d8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80018da:	4b26      	ldr	r3, [pc, #152]	; (8001974 <MX_SPI3_Init+0xa4>)
 80018dc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80018e0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80018e2:	4b24      	ldr	r3, [pc, #144]	; (8001974 <MX_SPI3_Init+0xa4>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80018e8:	4b22      	ldr	r3, [pc, #136]	; (8001974 <MX_SPI3_Init+0xa4>)
 80018ea:	2207      	movs	r2, #7
 80018ec:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018ee:	4b21      	ldr	r3, [pc, #132]	; (8001974 <MX_SPI3_Init+0xa4>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018f4:	4b1f      	ldr	r3, [pc, #124]	; (8001974 <MX_SPI3_Init+0xa4>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80018fa:	4b1e      	ldr	r3, [pc, #120]	; (8001974 <MX_SPI3_Init+0xa4>)
 80018fc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001900:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001902:	4b1c      	ldr	r3, [pc, #112]	; (8001974 <MX_SPI3_Init+0xa4>)
 8001904:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001908:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800190a:	4b1a      	ldr	r3, [pc, #104]	; (8001974 <MX_SPI3_Init+0xa4>)
 800190c:	2200      	movs	r2, #0
 800190e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001910:	4b18      	ldr	r3, [pc, #96]	; (8001974 <MX_SPI3_Init+0xa4>)
 8001912:	2200      	movs	r2, #0
 8001914:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001916:	4b17      	ldr	r3, [pc, #92]	; (8001974 <MX_SPI3_Init+0xa4>)
 8001918:	2200      	movs	r2, #0
 800191a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800191c:	4b15      	ldr	r3, [pc, #84]	; (8001974 <MX_SPI3_Init+0xa4>)
 800191e:	2200      	movs	r2, #0
 8001920:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001922:	4b14      	ldr	r3, [pc, #80]	; (8001974 <MX_SPI3_Init+0xa4>)
 8001924:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001928:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800192a:	4b12      	ldr	r3, [pc, #72]	; (8001974 <MX_SPI3_Init+0xa4>)
 800192c:	2200      	movs	r2, #0
 800192e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001930:	4b10      	ldr	r3, [pc, #64]	; (8001974 <MX_SPI3_Init+0xa4>)
 8001932:	2200      	movs	r2, #0
 8001934:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001936:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <MX_SPI3_Init+0xa4>)
 8001938:	2200      	movs	r2, #0
 800193a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800193c:	4b0d      	ldr	r3, [pc, #52]	; (8001974 <MX_SPI3_Init+0xa4>)
 800193e:	2200      	movs	r2, #0
 8001940:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001942:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <MX_SPI3_Init+0xa4>)
 8001944:	2200      	movs	r2, #0
 8001946:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001948:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <MX_SPI3_Init+0xa4>)
 800194a:	2200      	movs	r2, #0
 800194c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800194e:	4b09      	ldr	r3, [pc, #36]	; (8001974 <MX_SPI3_Init+0xa4>)
 8001950:	2200      	movs	r2, #0
 8001952:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001954:	4b07      	ldr	r3, [pc, #28]	; (8001974 <MX_SPI3_Init+0xa4>)
 8001956:	2200      	movs	r2, #0
 8001958:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800195a:	4b06      	ldr	r3, [pc, #24]	; (8001974 <MX_SPI3_Init+0xa4>)
 800195c:	2200      	movs	r2, #0
 800195e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001960:	4804      	ldr	r0, [pc, #16]	; (8001974 <MX_SPI3_Init+0xa4>)
 8001962:	f00b ff6f 	bl	800d844 <HAL_SPI_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 800196c:	f000 fc04 	bl	8002178 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}
 8001974:	240005d0 	.word	0x240005d0
 8001978:	40003c00 	.word	0x40003c00

0800197c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b08a      	sub	sp, #40	; 0x28
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001982:	f107 031c 	add.w	r3, r7, #28
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	605a      	str	r2, [r3, #4]
 800198c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800198e:	463b      	mov	r3, r7
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
 800199c:	615a      	str	r2, [r3, #20]
 800199e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019a0:	4b21      	ldr	r3, [pc, #132]	; (8001a28 <MX_TIM2_Init+0xac>)
 80019a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80019a8:	4b1f      	ldr	r3, [pc, #124]	; (8001a28 <MX_TIM2_Init+0xac>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ae:	4b1e      	ldr	r3, [pc, #120]	; (8001a28 <MX_TIM2_Init+0xac>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 80019b4:	4b1c      	ldr	r3, [pc, #112]	; (8001a28 <MX_TIM2_Init+0xac>)
 80019b6:	225a      	movs	r2, #90	; 0x5a
 80019b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ba:	4b1b      	ldr	r3, [pc, #108]	; (8001a28 <MX_TIM2_Init+0xac>)
 80019bc:	2200      	movs	r2, #0
 80019be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c0:	4b19      	ldr	r3, [pc, #100]	; (8001a28 <MX_TIM2_Init+0xac>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019c6:	4818      	ldr	r0, [pc, #96]	; (8001a28 <MX_TIM2_Init+0xac>)
 80019c8:	f00c fcd5 	bl	800e376 <HAL_TIM_PWM_Init>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80019d2:	f000 fbd1 	bl	8002178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019da:	2300      	movs	r3, #0
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019de:	f107 031c 	add.w	r3, r7, #28
 80019e2:	4619      	mov	r1, r3
 80019e4:	4810      	ldr	r0, [pc, #64]	; (8001a28 <MX_TIM2_Init+0xac>)
 80019e6:	f00d fc41 	bl	800f26c <HAL_TIMEx_MasterConfigSynchronization>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80019f0:	f000 fbc2 	bl	8002178 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019f4:	2360      	movs	r3, #96	; 0x60
 80019f6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a00:	2300      	movs	r3, #0
 8001a02:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a04:	463b      	mov	r3, r7
 8001a06:	2208      	movs	r2, #8
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4807      	ldr	r0, [pc, #28]	; (8001a28 <MX_TIM2_Init+0xac>)
 8001a0c:	f00c ff46 	bl	800e89c <HAL_TIM_PWM_ConfigChannel>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001a16:	f000 fbaf 	bl	8002178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a1a:	4803      	ldr	r0, [pc, #12]	; (8001a28 <MX_TIM2_Init+0xac>)
 8001a1c:	f001 f8a0 	bl	8002b60 <HAL_TIM_MspPostInit>

}
 8001a20:	bf00      	nop
 8001a22:	3728      	adds	r7, #40	; 0x28
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	24000658 	.word	0x24000658

08001a2c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	; 0x28
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a32:	f107 031c 	add.w	r3, r7, #28
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a3e:	463b      	mov	r3, r7
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	611a      	str	r2, [r3, #16]
 8001a4c:	615a      	str	r2, [r3, #20]
 8001a4e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a50:	4b26      	ldr	r3, [pc, #152]	; (8001aec <MX_TIM3_Init+0xc0>)
 8001a52:	4a27      	ldr	r2, [pc, #156]	; (8001af0 <MX_TIM3_Init+0xc4>)
 8001a54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a56:	4b25      	ldr	r3, [pc, #148]	; (8001aec <MX_TIM3_Init+0xc0>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a5c:	4b23      	ldr	r3, [pc, #140]	; (8001aec <MX_TIM3_Init+0xc0>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 8001a62:	4b22      	ldr	r3, [pc, #136]	; (8001aec <MX_TIM3_Init+0xc0>)
 8001a64:	225a      	movs	r2, #90	; 0x5a
 8001a66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a68:	4b20      	ldr	r3, [pc, #128]	; (8001aec <MX_TIM3_Init+0xc0>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a6e:	4b1f      	ldr	r3, [pc, #124]	; (8001aec <MX_TIM3_Init+0xc0>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a74:	481d      	ldr	r0, [pc, #116]	; (8001aec <MX_TIM3_Init+0xc0>)
 8001a76:	f00c fc7e 	bl	800e376 <HAL_TIM_PWM_Init>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001a80:	f000 fb7a 	bl	8002178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a84:	2300      	movs	r3, #0
 8001a86:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a8c:	f107 031c 	add.w	r3, r7, #28
 8001a90:	4619      	mov	r1, r3
 8001a92:	4816      	ldr	r0, [pc, #88]	; (8001aec <MX_TIM3_Init+0xc0>)
 8001a94:	f00d fbea 	bl	800f26c <HAL_TIMEx_MasterConfigSynchronization>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001a9e:	f000 fb6b 	bl	8002178 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aa2:	2360      	movs	r3, #96	; 0x60
 8001aa4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ab2:	463b      	mov	r3, r7
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	480c      	ldr	r0, [pc, #48]	; (8001aec <MX_TIM3_Init+0xc0>)
 8001aba:	f00c feef 	bl	800e89c <HAL_TIM_PWM_ConfigChannel>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001ac4:	f000 fb58 	bl	8002178 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ac8:	463b      	mov	r3, r7
 8001aca:	2204      	movs	r2, #4
 8001acc:	4619      	mov	r1, r3
 8001ace:	4807      	ldr	r0, [pc, #28]	; (8001aec <MX_TIM3_Init+0xc0>)
 8001ad0:	f00c fee4 	bl	800e89c <HAL_TIM_PWM_ConfigChannel>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001ada:	f000 fb4d 	bl	8002178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ade:	4803      	ldr	r0, [pc, #12]	; (8001aec <MX_TIM3_Init+0xc0>)
 8001ae0:	f001 f83e 	bl	8002b60 <HAL_TIM_MspPostInit>

}
 8001ae4:	bf00      	nop
 8001ae6:	3728      	adds	r7, #40	; 0x28
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	240006a4 	.word	0x240006a4
 8001af0:	40000400 	.word	0x40000400

08001af4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08a      	sub	sp, #40	; 0x28
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001afa:	f107 031c 	add.w	r3, r7, #28
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]
 8001b04:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b06:	463b      	mov	r3, r7
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
 8001b14:	615a      	str	r2, [r3, #20]
 8001b16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b18:	4b32      	ldr	r3, [pc, #200]	; (8001be4 <MX_TIM4_Init+0xf0>)
 8001b1a:	4a33      	ldr	r2, [pc, #204]	; (8001be8 <MX_TIM4_Init+0xf4>)
 8001b1c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 28;
 8001b1e:	4b31      	ldr	r3, [pc, #196]	; (8001be4 <MX_TIM4_Init+0xf0>)
 8001b20:	221c      	movs	r2, #28
 8001b22:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b24:	4b2f      	ldr	r3, [pc, #188]	; (8001be4 <MX_TIM4_Init+0xf0>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001b2a:	4b2e      	ldr	r3, [pc, #184]	; (8001be4 <MX_TIM4_Init+0xf0>)
 8001b2c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001b30:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b32:	4b2c      	ldr	r3, [pc, #176]	; (8001be4 <MX_TIM4_Init+0xf0>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b38:	4b2a      	ldr	r3, [pc, #168]	; (8001be4 <MX_TIM4_Init+0xf0>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001b3e:	4829      	ldr	r0, [pc, #164]	; (8001be4 <MX_TIM4_Init+0xf0>)
 8001b40:	f00c fc19 	bl	800e376 <HAL_TIM_PWM_Init>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001b4a:	f000 fb15 	bl	8002178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b52:	2300      	movs	r3, #0
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b56:	f107 031c 	add.w	r3, r7, #28
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4821      	ldr	r0, [pc, #132]	; (8001be4 <MX_TIM4_Init+0xf0>)
 8001b5e:	f00d fb85 	bl	800f26c <HAL_TIMEx_MasterConfigSynchronization>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001b68:	f000 fb06 	bl	8002178 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b6c:	2360      	movs	r3, #96	; 0x60
 8001b6e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b7c:	463b      	mov	r3, r7
 8001b7e:	2200      	movs	r2, #0
 8001b80:	4619      	mov	r1, r3
 8001b82:	4818      	ldr	r0, [pc, #96]	; (8001be4 <MX_TIM4_Init+0xf0>)
 8001b84:	f00c fe8a 	bl	800e89c <HAL_TIM_PWM_ConfigChannel>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001b8e:	f000 faf3 	bl	8002178 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b92:	463b      	mov	r3, r7
 8001b94:	2204      	movs	r2, #4
 8001b96:	4619      	mov	r1, r3
 8001b98:	4812      	ldr	r0, [pc, #72]	; (8001be4 <MX_TIM4_Init+0xf0>)
 8001b9a:	f00c fe7f 	bl	800e89c <HAL_TIM_PWM_ConfigChannel>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001ba4:	f000 fae8 	bl	8002178 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ba8:	463b      	mov	r3, r7
 8001baa:	2208      	movs	r2, #8
 8001bac:	4619      	mov	r1, r3
 8001bae:	480d      	ldr	r0, [pc, #52]	; (8001be4 <MX_TIM4_Init+0xf0>)
 8001bb0:	f00c fe74 	bl	800e89c <HAL_TIM_PWM_ConfigChannel>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8001bba:	f000 fadd 	bl	8002178 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001bbe:	463b      	mov	r3, r7
 8001bc0:	220c      	movs	r2, #12
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4807      	ldr	r0, [pc, #28]	; (8001be4 <MX_TIM4_Init+0xf0>)
 8001bc6:	f00c fe69 	bl	800e89c <HAL_TIM_PWM_ConfigChannel>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8001bd0:	f000 fad2 	bl	8002178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001bd4:	4803      	ldr	r0, [pc, #12]	; (8001be4 <MX_TIM4_Init+0xf0>)
 8001bd6:	f000 ffc3 	bl	8002b60 <HAL_TIM_MspPostInit>

}
 8001bda:	bf00      	nop
 8001bdc:	3728      	adds	r7, #40	; 0x28
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	240006f0 	.word	0x240006f0
 8001be8:	40000800 	.word	0x40000800

08001bec <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08a      	sub	sp, #40	; 0x28
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf2:	f107 031c 	add.w	r3, r7, #28
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bfe:	463b      	mov	r3, r7
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	611a      	str	r2, [r3, #16]
 8001c0c:	615a      	str	r2, [r3, #20]
 8001c0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001c10:	4b21      	ldr	r3, [pc, #132]	; (8001c98 <MX_TIM5_Init+0xac>)
 8001c12:	4a22      	ldr	r2, [pc, #136]	; (8001c9c <MX_TIM5_Init+0xb0>)
 8001c14:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001c16:	4b20      	ldr	r3, [pc, #128]	; (8001c98 <MX_TIM5_Init+0xac>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c1c:	4b1e      	ldr	r3, [pc, #120]	; (8001c98 <MX_TIM5_Init+0xac>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 8001c22:	4b1d      	ldr	r3, [pc, #116]	; (8001c98 <MX_TIM5_Init+0xac>)
 8001c24:	225a      	movs	r2, #90	; 0x5a
 8001c26:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c28:	4b1b      	ldr	r3, [pc, #108]	; (8001c98 <MX_TIM5_Init+0xac>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c2e:	4b1a      	ldr	r3, [pc, #104]	; (8001c98 <MX_TIM5_Init+0xac>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001c34:	4818      	ldr	r0, [pc, #96]	; (8001c98 <MX_TIM5_Init+0xac>)
 8001c36:	f00c fb9e 	bl	800e376 <HAL_TIM_PWM_Init>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001c40:	f000 fa9a 	bl	8002178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c44:	2300      	movs	r3, #0
 8001c46:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001c4c:	f107 031c 	add.w	r3, r7, #28
 8001c50:	4619      	mov	r1, r3
 8001c52:	4811      	ldr	r0, [pc, #68]	; (8001c98 <MX_TIM5_Init+0xac>)
 8001c54:	f00d fb0a 	bl	800f26c <HAL_TIMEx_MasterConfigSynchronization>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001c5e:	f000 fa8b 	bl	8002178 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c62:	2360      	movs	r3, #96	; 0x60
 8001c64:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c72:	463b      	mov	r3, r7
 8001c74:	220c      	movs	r2, #12
 8001c76:	4619      	mov	r1, r3
 8001c78:	4807      	ldr	r0, [pc, #28]	; (8001c98 <MX_TIM5_Init+0xac>)
 8001c7a:	f00c fe0f 	bl	800e89c <HAL_TIM_PWM_ConfigChannel>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001c84:	f000 fa78 	bl	8002178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001c88:	4803      	ldr	r0, [pc, #12]	; (8001c98 <MX_TIM5_Init+0xac>)
 8001c8a:	f000 ff69 	bl	8002b60 <HAL_TIM_MspPostInit>

}
 8001c8e:	bf00      	nop
 8001c90:	3728      	adds	r7, #40	; 0x28
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	2400073c 	.word	0x2400073c
 8001c9c:	40000c00 	.word	0x40000c00

08001ca0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001ca4:	4b22      	ldr	r3, [pc, #136]	; (8001d30 <MX_UART4_Init+0x90>)
 8001ca6:	4a23      	ldr	r2, [pc, #140]	; (8001d34 <MX_UART4_Init+0x94>)
 8001ca8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001caa:	4b21      	ldr	r3, [pc, #132]	; (8001d30 <MX_UART4_Init+0x90>)
 8001cac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cb0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001cb2:	4b1f      	ldr	r3, [pc, #124]	; (8001d30 <MX_UART4_Init+0x90>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001cb8:	4b1d      	ldr	r3, [pc, #116]	; (8001d30 <MX_UART4_Init+0x90>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001cbe:	4b1c      	ldr	r3, [pc, #112]	; (8001d30 <MX_UART4_Init+0x90>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001cc4:	4b1a      	ldr	r3, [pc, #104]	; (8001d30 <MX_UART4_Init+0x90>)
 8001cc6:	220c      	movs	r2, #12
 8001cc8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cca:	4b19      	ldr	r3, [pc, #100]	; (8001d30 <MX_UART4_Init+0x90>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cd0:	4b17      	ldr	r3, [pc, #92]	; (8001d30 <MX_UART4_Init+0x90>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cd6:	4b16      	ldr	r3, [pc, #88]	; (8001d30 <MX_UART4_Init+0x90>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cdc:	4b14      	ldr	r3, [pc, #80]	; (8001d30 <MX_UART4_Init+0x90>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ce2:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <MX_UART4_Init+0x90>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001ce8:	4811      	ldr	r0, [pc, #68]	; (8001d30 <MX_UART4_Init+0x90>)
 8001cea:	f00d fb79 	bl	800f3e0 <HAL_UART_Init>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001cf4:	f000 fa40 	bl	8002178 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	480d      	ldr	r0, [pc, #52]	; (8001d30 <MX_UART4_Init+0x90>)
 8001cfc:	f00e fc7f 	bl	80105fe <HAL_UARTEx_SetTxFifoThreshold>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001d06:	f000 fa37 	bl	8002178 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	4808      	ldr	r0, [pc, #32]	; (8001d30 <MX_UART4_Init+0x90>)
 8001d0e:	f00e fcb4 	bl	801067a <HAL_UARTEx_SetRxFifoThreshold>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001d18:	f000 fa2e 	bl	8002178 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001d1c:	4804      	ldr	r0, [pc, #16]	; (8001d30 <MX_UART4_Init+0x90>)
 8001d1e:	f00e fc35 	bl	801058c <HAL_UARTEx_DisableFifoMode>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001d28:	f000 fa26 	bl	8002178 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001d2c:	bf00      	nop
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	240009e0 	.word	0x240009e0
 8001d34:	40004c00 	.word	0x40004c00

08001d38 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001d3c:	4b22      	ldr	r3, [pc, #136]	; (8001dc8 <MX_USART6_UART_Init+0x90>)
 8001d3e:	4a23      	ldr	r2, [pc, #140]	; (8001dcc <MX_USART6_UART_Init+0x94>)
 8001d40:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001d42:	4b21      	ldr	r3, [pc, #132]	; (8001dc8 <MX_USART6_UART_Init+0x90>)
 8001d44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d48:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001d4a:	4b1f      	ldr	r3, [pc, #124]	; (8001dc8 <MX_USART6_UART_Init+0x90>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001d50:	4b1d      	ldr	r3, [pc, #116]	; (8001dc8 <MX_USART6_UART_Init+0x90>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001d56:	4b1c      	ldr	r3, [pc, #112]	; (8001dc8 <MX_USART6_UART_Init+0x90>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001d5c:	4b1a      	ldr	r3, [pc, #104]	; (8001dc8 <MX_USART6_UART_Init+0x90>)
 8001d5e:	220c      	movs	r2, #12
 8001d60:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d62:	4b19      	ldr	r3, [pc, #100]	; (8001dc8 <MX_USART6_UART_Init+0x90>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d68:	4b17      	ldr	r3, [pc, #92]	; (8001dc8 <MX_USART6_UART_Init+0x90>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d6e:	4b16      	ldr	r3, [pc, #88]	; (8001dc8 <MX_USART6_UART_Init+0x90>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d74:	4b14      	ldr	r3, [pc, #80]	; (8001dc8 <MX_USART6_UART_Init+0x90>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d7a:	4b13      	ldr	r3, [pc, #76]	; (8001dc8 <MX_USART6_UART_Init+0x90>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001d80:	4811      	ldr	r0, [pc, #68]	; (8001dc8 <MX_USART6_UART_Init+0x90>)
 8001d82:	f00d fb2d 	bl	800f3e0 <HAL_UART_Init>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8001d8c:	f000 f9f4 	bl	8002178 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d90:	2100      	movs	r1, #0
 8001d92:	480d      	ldr	r0, [pc, #52]	; (8001dc8 <MX_USART6_UART_Init+0x90>)
 8001d94:	f00e fc33 	bl	80105fe <HAL_UARTEx_SetTxFifoThreshold>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8001d9e:	f000 f9eb 	bl	8002178 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001da2:	2100      	movs	r1, #0
 8001da4:	4808      	ldr	r0, [pc, #32]	; (8001dc8 <MX_USART6_UART_Init+0x90>)
 8001da6:	f00e fc68 	bl	801067a <HAL_UARTEx_SetRxFifoThreshold>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8001db0:	f000 f9e2 	bl	8002178 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001db4:	4804      	ldr	r0, [pc, #16]	; (8001dc8 <MX_USART6_UART_Init+0x90>)
 8001db6:	f00e fbe9 	bl	801058c <HAL_UARTEx_DisableFifoMode>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8001dc0:	f000 f9da 	bl	8002178 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001dc4:	bf00      	nop
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	24000a74 	.word	0x24000a74
 8001dcc:	40011400 	.word	0x40011400

08001dd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dd6:	4b2d      	ldr	r3, [pc, #180]	; (8001e8c <MX_DMA_Init+0xbc>)
 8001dd8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001ddc:	4a2b      	ldr	r2, [pc, #172]	; (8001e8c <MX_DMA_Init+0xbc>)
 8001dde:	f043 0301 	orr.w	r3, r3, #1
 8001de2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001de6:	4b29      	ldr	r3, [pc, #164]	; (8001e8c <MX_DMA_Init+0xbc>)
 8001de8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	607b      	str	r3, [r7, #4]
 8001df2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001df4:	4b25      	ldr	r3, [pc, #148]	; (8001e8c <MX_DMA_Init+0xbc>)
 8001df6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001dfa:	4a24      	ldr	r2, [pc, #144]	; (8001e8c <MX_DMA_Init+0xbc>)
 8001dfc:	f043 0302 	orr.w	r3, r3, #2
 8001e00:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001e04:	4b21      	ldr	r3, [pc, #132]	; (8001e8c <MX_DMA_Init+0xbc>)
 8001e06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	603b      	str	r3, [r7, #0]
 8001e10:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001e12:	2200      	movs	r2, #0
 8001e14:	2100      	movs	r1, #0
 8001e16:	200b      	movs	r0, #11
 8001e18:	f002 fe9d 	bl	8004b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001e1c:	200b      	movs	r0, #11
 8001e1e:	f002 feb4 	bl	8004b8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2100      	movs	r1, #0
 8001e26:	200c      	movs	r0, #12
 8001e28:	f002 fe95 	bl	8004b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001e2c:	200c      	movs	r0, #12
 8001e2e:	f002 feac 	bl	8004b8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2100      	movs	r1, #0
 8001e36:	200d      	movs	r0, #13
 8001e38:	f002 fe8d 	bl	8004b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001e3c:	200d      	movs	r0, #13
 8001e3e:	f002 fea4 	bl	8004b8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001e42:	2200      	movs	r2, #0
 8001e44:	2100      	movs	r1, #0
 8001e46:	200e      	movs	r0, #14
 8001e48:	f002 fe85 	bl	8004b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001e4c:	200e      	movs	r0, #14
 8001e4e:	f002 fe9c 	bl	8004b8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001e52:	2200      	movs	r2, #0
 8001e54:	2100      	movs	r1, #0
 8001e56:	200f      	movs	r0, #15
 8001e58:	f002 fe7d 	bl	8004b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001e5c:	200f      	movs	r0, #15
 8001e5e:	f002 fe94 	bl	8004b8a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001e62:	2200      	movs	r2, #0
 8001e64:	2100      	movs	r1, #0
 8001e66:	2010      	movs	r0, #16
 8001e68:	f002 fe75 	bl	8004b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001e6c:	2010      	movs	r0, #16
 8001e6e:	f002 fe8c 	bl	8004b8a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001e72:	2200      	movs	r2, #0
 8001e74:	2100      	movs	r1, #0
 8001e76:	2046      	movs	r0, #70	; 0x46
 8001e78:	f002 fe6d 	bl	8004b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001e7c:	2046      	movs	r0, #70	; 0x46
 8001e7e:	f002 fe84 	bl	8004b8a <HAL_NVIC_EnableIRQ>

}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	58024400 	.word	0x58024400

08001e90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08e      	sub	sp, #56	; 0x38
 8001e94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	605a      	str	r2, [r3, #4]
 8001ea0:	609a      	str	r2, [r3, #8]
 8001ea2:	60da      	str	r2, [r3, #12]
 8001ea4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ea6:	4bac      	ldr	r3, [pc, #688]	; (8002158 <MX_GPIO_Init+0x2c8>)
 8001ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eac:	4aaa      	ldr	r2, [pc, #680]	; (8002158 <MX_GPIO_Init+0x2c8>)
 8001eae:	f043 0310 	orr.w	r3, r3, #16
 8001eb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eb6:	4ba8      	ldr	r3, [pc, #672]	; (8002158 <MX_GPIO_Init+0x2c8>)
 8001eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ebc:	f003 0310 	and.w	r3, r3, #16
 8001ec0:	623b      	str	r3, [r7, #32]
 8001ec2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ec4:	4ba4      	ldr	r3, [pc, #656]	; (8002158 <MX_GPIO_Init+0x2c8>)
 8001ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eca:	4aa3      	ldr	r2, [pc, #652]	; (8002158 <MX_GPIO_Init+0x2c8>)
 8001ecc:	f043 0320 	orr.w	r3, r3, #32
 8001ed0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ed4:	4ba0      	ldr	r3, [pc, #640]	; (8002158 <MX_GPIO_Init+0x2c8>)
 8001ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eda:	f003 0320 	and.w	r3, r3, #32
 8001ede:	61fb      	str	r3, [r7, #28]
 8001ee0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ee2:	4b9d      	ldr	r3, [pc, #628]	; (8002158 <MX_GPIO_Init+0x2c8>)
 8001ee4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ee8:	4a9b      	ldr	r2, [pc, #620]	; (8002158 <MX_GPIO_Init+0x2c8>)
 8001eea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ef2:	4b99      	ldr	r3, [pc, #612]	; (8002158 <MX_GPIO_Init+0x2c8>)
 8001ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001efc:	61bb      	str	r3, [r7, #24]
 8001efe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f00:	4b95      	ldr	r3, [pc, #596]	; (8002158 <MX_GPIO_Init+0x2c8>)
 8001f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f06:	4a94      	ldr	r2, [pc, #592]	; (8002158 <MX_GPIO_Init+0x2c8>)
 8001f08:	f043 0304 	orr.w	r3, r3, #4
 8001f0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f10:	4b91      	ldr	r3, [pc, #580]	; (8002158 <MX_GPIO_Init+0x2c8>)
 8001f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f16:	f003 0304 	and.w	r3, r3, #4
 8001f1a:	617b      	str	r3, [r7, #20]
 8001f1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1e:	4b8e      	ldr	r3, [pc, #568]	; (8002158 <MX_GPIO_Init+0x2c8>)
 8001f20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f24:	4a8c      	ldr	r2, [pc, #560]	; (8002158 <MX_GPIO_Init+0x2c8>)
 8001f26:	f043 0301 	orr.w	r3, r3, #1
 8001f2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f2e:	4b8a      	ldr	r3, [pc, #552]	; (8002158 <MX_GPIO_Init+0x2c8>)
 8001f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	613b      	str	r3, [r7, #16]
 8001f3a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f3c:	4b86      	ldr	r3, [pc, #536]	; (8002158 <MX_GPIO_Init+0x2c8>)
 8001f3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f42:	4a85      	ldr	r2, [pc, #532]	; (8002158 <MX_GPIO_Init+0x2c8>)
 8001f44:	f043 0302 	orr.w	r3, r3, #2
 8001f48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f4c:	4b82      	ldr	r3, [pc, #520]	; (8002158 <MX_GPIO_Init+0x2c8>)
 8001f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f52:	f003 0302 	and.w	r3, r3, #2
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f5a:	4b7f      	ldr	r3, [pc, #508]	; (8002158 <MX_GPIO_Init+0x2c8>)
 8001f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f60:	4a7d      	ldr	r2, [pc, #500]	; (8002158 <MX_GPIO_Init+0x2c8>)
 8001f62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f6a:	4b7b      	ldr	r3, [pc, #492]	; (8002158 <MX_GPIO_Init+0x2c8>)
 8001f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f78:	4b77      	ldr	r3, [pc, #476]	; (8002158 <MX_GPIO_Init+0x2c8>)
 8001f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f7e:	4a76      	ldr	r2, [pc, #472]	; (8002158 <MX_GPIO_Init+0x2c8>)
 8001f80:	f043 0308 	orr.w	r3, r3, #8
 8001f84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f88:	4b73      	ldr	r3, [pc, #460]	; (8002158 <MX_GPIO_Init+0x2c8>)
 8001f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	607b      	str	r3, [r7, #4]
 8001f94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin, GPIO_PIN_RESET);
 8001f96:	2200      	movs	r2, #0
 8001f98:	f241 5104 	movw	r1, #5380	; 0x1504
 8001f9c:	486f      	ldr	r0, [pc, #444]	; (800215c <MX_GPIO_Init+0x2cc>)
 8001f9e:	f004 fff3 	bl	8006f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARM1_Pin|ARM2_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f248 0106 	movw	r1, #32774	; 0x8006
 8001fa8:	486d      	ldr	r0, [pc, #436]	; (8002160 <MX_GPIO_Init+0x2d0>)
 8001faa:	f004 ffed 	bl	8006f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001fae:	2200      	movs	r2, #0
 8001fb0:	2130      	movs	r1, #48	; 0x30
 8001fb2:	486c      	ldr	r0, [pc, #432]	; (8002164 <MX_GPIO_Init+0x2d4>)
 8001fb4:	f004 ffe8 	bl	8006f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, GPIO_PIN_RESET);
 8001fb8:	2200      	movs	r2, #0
 8001fba:	2102      	movs	r1, #2
 8001fbc:	486a      	ldr	r0, [pc, #424]	; (8002168 <MX_GPIO_Init+0x2d8>)
 8001fbe:	f004 ffe3 	bl	8006f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PYRO2_Pin|PYRO3_Pin|PYRO4_Pin, GPIO_PIN_RESET);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8001fc8:	4868      	ldr	r0, [pc, #416]	; (800216c <MX_GPIO_Init+0x2dc>)
 8001fca:	f004 ffdd 	bl	8006f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	210e      	movs	r1, #14
 8001fd2:	4867      	ldr	r0, [pc, #412]	; (8002170 <MX_GPIO_Init+0x2e0>)
 8001fd4:	f004 ffd8 	bl	8006f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0, GPIO_PIN_RESET);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f240 3101 	movw	r1, #769	; 0x301
 8001fde:	4865      	ldr	r0, [pc, #404]	; (8002174 <MX_GPIO_Init+0x2e4>)
 8001fe0:	f004 ffd2 	bl	8006f88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin;
 8001fe4:	f241 5304 	movw	r3, #5380	; 0x1504
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fea:	2301      	movs	r3, #1
 8001fec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ff6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4857      	ldr	r0, [pc, #348]	; (800215c <MX_GPIO_Init+0x2cc>)
 8001ffe:	f004 fe03 	bl	8006c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARM1_Pin ARM2_Pin PA15 */
  GPIO_InitStruct.Pin = ARM1_Pin|ARM2_Pin|GPIO_PIN_15;
 8002002:	f248 0306 	movw	r3, #32774	; 0x8006
 8002006:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002008:	2301      	movs	r3, #1
 800200a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	2300      	movs	r3, #0
 800200e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002010:	2300      	movs	r3, #0
 8002012:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002014:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002018:	4619      	mov	r1, r3
 800201a:	4851      	ldr	r0, [pc, #324]	; (8002160 <MX_GPIO_Init+0x2d0>)
 800201c:	f004 fdf4 	bl	8006c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002020:	2330      	movs	r3, #48	; 0x30
 8002022:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002024:	2301      	movs	r3, #1
 8002026:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202c:	2300      	movs	r3, #0
 800202e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002030:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002034:	4619      	mov	r1, r3
 8002036:	484b      	ldr	r0, [pc, #300]	; (8002164 <MX_GPIO_Init+0x2d4>)
 8002038:	f004 fde6 	bl	8006c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PYRO1_Pin */
  GPIO_InitStruct.Pin = PYRO1_Pin;
 800203c:	2302      	movs	r3, #2
 800203e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002040:	2301      	movs	r3, #1
 8002042:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002048:	2300      	movs	r3, #0
 800204a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PYRO1_GPIO_Port, &GPIO_InitStruct);
 800204c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002050:	4619      	mov	r1, r3
 8002052:	4845      	ldr	r0, [pc, #276]	; (8002168 <MX_GPIO_Init+0x2d8>)
 8002054:	f004 fdd8 	bl	8006c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT1_Pin */
  GPIO_InitStruct.Pin = CONT1_Pin;
 8002058:	2304      	movs	r3, #4
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800205c:	2300      	movs	r3, #0
 800205e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002060:	2301      	movs	r3, #1
 8002062:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 8002064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002068:	4619      	mov	r1, r3
 800206a:	483f      	ldr	r0, [pc, #252]	; (8002168 <MX_GPIO_Init+0x2d8>)
 800206c:	f004 fdcc 	bl	8006c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
  GPIO_InitStruct.Pin = PYRO2_Pin|PYRO3_Pin|PYRO4_Pin;
 8002070:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002076:	2301      	movs	r3, #1
 8002078:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207a:	2300      	movs	r3, #0
 800207c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207e:	2300      	movs	r3, #0
 8002080:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002086:	4619      	mov	r1, r3
 8002088:	4838      	ldr	r0, [pc, #224]	; (800216c <MX_GPIO_Init+0x2dc>)
 800208a:	f004 fdbd 	bl	8006c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT2_Pin CONT3_Pin */
  GPIO_InitStruct.Pin = CONT2_Pin|CONT3_Pin;
 800208e:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002092:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002094:	2300      	movs	r3, #0
 8002096:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002098:	2301      	movs	r3, #1
 800209a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800209c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a0:	4619      	mov	r1, r3
 80020a2:	4832      	ldr	r0, [pc, #200]	; (800216c <MX_GPIO_Init+0x2dc>)
 80020a4:	f004 fdb0 	bl	8006c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT4_Pin */
  GPIO_InitStruct.Pin = CONT4_Pin;
 80020a8:	2301      	movs	r3, #1
 80020aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020ac:	2300      	movs	r3, #0
 80020ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020b0:	2301      	movs	r3, #1
 80020b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 80020b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b8:	4619      	mov	r1, r3
 80020ba:	482d      	ldr	r0, [pc, #180]	; (8002170 <MX_GPIO_Init+0x2e0>)
 80020bc:	f004 fda4 	bl	8006c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
  GPIO_InitStruct.Pin = PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3;
 80020c0:	230e      	movs	r3, #14
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020c4:	2301      	movs	r3, #1
 80020c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020cc:	2300      	movs	r3, #0
 80020ce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80020d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020d4:	4619      	mov	r1, r3
 80020d6:	4826      	ldr	r0, [pc, #152]	; (8002170 <MX_GPIO_Init+0x2e0>)
 80020d8:	f004 fd96 	bl	8006c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
  GPIO_InitStruct.Pin = CONT5_Pin|CONT6_Pin|CONT7_Pin|CONT8_Pin;
 80020dc:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 80020e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020e2:	2300      	movs	r3, #0
 80020e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020e6:	2301      	movs	r3, #1
 80020e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ee:	4619      	mov	r1, r3
 80020f0:	481a      	ldr	r0, [pc, #104]	; (800215c <MX_GPIO_Init+0x2cc>)
 80020f2:	f004 fd89 	bl	8006c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0;
 80020f6:	f240 3301 	movw	r3, #769	; 0x301
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020fc:	2301      	movs	r3, #1
 80020fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002100:	2300      	movs	r3, #0
 8002102:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002104:	2300      	movs	r3, #0
 8002106:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800210c:	4619      	mov	r1, r3
 800210e:	4819      	ldr	r0, [pc, #100]	; (8002174 <MX_GPIO_Init+0x2e4>)
 8002110:	f004 fd7a 	bl	8006c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_ARM_CHECK_Pin */
  GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 8002114:	2310      	movs	r3, #16
 8002116:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002118:	2300      	movs	r3, #0
 800211a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002120:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002124:	4619      	mov	r1, r3
 8002126:	4812      	ldr	r0, [pc, #72]	; (8002170 <MX_GPIO_Init+0x2e0>)
 8002128:	f004 fd6e 	bl	8006c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800212c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002132:	2302      	movs	r3, #2
 8002134:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213a:	2300      	movs	r3, #0
 800213c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800213e:	2300      	movs	r3, #0
 8002140:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002146:	4619      	mov	r1, r3
 8002148:	4805      	ldr	r0, [pc, #20]	; (8002160 <MX_GPIO_Init+0x2d0>)
 800214a:	f004 fd5d 	bl	8006c08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800214e:	bf00      	nop
 8002150:	3738      	adds	r7, #56	; 0x38
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	58024400 	.word	0x58024400
 800215c:	58021000 	.word	0x58021000
 8002160:	58020000 	.word	0x58020000
 8002164:	58020800 	.word	0x58020800
 8002168:	58020400 	.word	0x58020400
 800216c:	58021400 	.word	0x58021400
 8002170:	58021800 	.word	0x58021800
 8002174:	58020c00 	.word	0x58020c00

08002178 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800217c:	b672      	cpsid	i
}
 800217e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002180:	e7fe      	b.n	8002180 <Error_Handler+0x8>
	...

08002184 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800218a:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <HAL_MspInit+0x30>)
 800218c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002190:	4a08      	ldr	r2, [pc, #32]	; (80021b4 <HAL_MspInit+0x30>)
 8002192:	f043 0302 	orr.w	r3, r3, #2
 8002196:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800219a:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <HAL_MspInit+0x30>)
 800219c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80021a0:	f003 0302 	and.w	r3, r3, #2
 80021a4:	607b      	str	r3, [r7, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	58024400 	.word	0x58024400

080021b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08c      	sub	sp, #48	; 0x30
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c0:	f107 031c 	add.w	r3, r7, #28
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a5d      	ldr	r2, [pc, #372]	; (800234c <HAL_ADC_MspInit+0x194>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d159      	bne.n	800228e <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80021da:	4b5d      	ldr	r3, [pc, #372]	; (8002350 <HAL_ADC_MspInit+0x198>)
 80021dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80021e0:	4a5b      	ldr	r2, [pc, #364]	; (8002350 <HAL_ADC_MspInit+0x198>)
 80021e2:	f043 0320 	orr.w	r3, r3, #32
 80021e6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80021ea:	4b59      	ldr	r3, [pc, #356]	; (8002350 <HAL_ADC_MspInit+0x198>)
 80021ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80021f0:	f003 0320 	and.w	r3, r3, #32
 80021f4:	61bb      	str	r3, [r7, #24]
 80021f6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021f8:	4b55      	ldr	r3, [pc, #340]	; (8002350 <HAL_ADC_MspInit+0x198>)
 80021fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021fe:	4a54      	ldr	r2, [pc, #336]	; (8002350 <HAL_ADC_MspInit+0x198>)
 8002200:	f043 0304 	orr.w	r3, r3, #4
 8002204:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002208:	4b51      	ldr	r3, [pc, #324]	; (8002350 <HAL_ADC_MspInit+0x198>)
 800220a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800220e:	f003 0304 	and.w	r3, r3, #4
 8002212:	617b      	str	r3, [r7, #20]
 8002214:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = ARM_CHECK_Pin;
 8002216:	2301      	movs	r3, #1
 8002218:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800221a:	2303      	movs	r3, #3
 800221c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002222:	f107 031c 	add.w	r3, r7, #28
 8002226:	4619      	mov	r1, r3
 8002228:	484a      	ldr	r0, [pc, #296]	; (8002354 <HAL_ADC_MspInit+0x19c>)
 800222a:	f004 fced 	bl	8006c08 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 800222e:	4b4a      	ldr	r3, [pc, #296]	; (8002358 <HAL_ADC_MspInit+0x1a0>)
 8002230:	4a4a      	ldr	r2, [pc, #296]	; (800235c <HAL_ADC_MspInit+0x1a4>)
 8002232:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002234:	4b48      	ldr	r3, [pc, #288]	; (8002358 <HAL_ADC_MspInit+0x1a0>)
 8002236:	2209      	movs	r2, #9
 8002238:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800223a:	4b47      	ldr	r3, [pc, #284]	; (8002358 <HAL_ADC_MspInit+0x1a0>)
 800223c:	2200      	movs	r2, #0
 800223e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002240:	4b45      	ldr	r3, [pc, #276]	; (8002358 <HAL_ADC_MspInit+0x1a0>)
 8002242:	2200      	movs	r2, #0
 8002244:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002246:	4b44      	ldr	r3, [pc, #272]	; (8002358 <HAL_ADC_MspInit+0x1a0>)
 8002248:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800224c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800224e:	4b42      	ldr	r3, [pc, #264]	; (8002358 <HAL_ADC_MspInit+0x1a0>)
 8002250:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002254:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002256:	4b40      	ldr	r3, [pc, #256]	; (8002358 <HAL_ADC_MspInit+0x1a0>)
 8002258:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800225c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800225e:	4b3e      	ldr	r3, [pc, #248]	; (8002358 <HAL_ADC_MspInit+0x1a0>)
 8002260:	2200      	movs	r2, #0
 8002262:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002264:	4b3c      	ldr	r3, [pc, #240]	; (8002358 <HAL_ADC_MspInit+0x1a0>)
 8002266:	2200      	movs	r2, #0
 8002268:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800226a:	4b3b      	ldr	r3, [pc, #236]	; (8002358 <HAL_ADC_MspInit+0x1a0>)
 800226c:	2200      	movs	r2, #0
 800226e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002270:	4839      	ldr	r0, [pc, #228]	; (8002358 <HAL_ADC_MspInit+0x1a0>)
 8002272:	f002 fca5 	bl	8004bc0 <HAL_DMA_Init>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 800227c:	f7ff ff7c 	bl	8002178 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4a35      	ldr	r2, [pc, #212]	; (8002358 <HAL_ADC_MspInit+0x1a0>)
 8002284:	659a      	str	r2, [r3, #88]	; 0x58
 8002286:	4a34      	ldr	r2, [pc, #208]	; (8002358 <HAL_ADC_MspInit+0x1a0>)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800228c:	e059      	b.n	8002342 <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a33      	ldr	r2, [pc, #204]	; (8002360 <HAL_ADC_MspInit+0x1a8>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d154      	bne.n	8002342 <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002298:	4b2d      	ldr	r3, [pc, #180]	; (8002350 <HAL_ADC_MspInit+0x198>)
 800229a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800229e:	4a2c      	ldr	r2, [pc, #176]	; (8002350 <HAL_ADC_MspInit+0x198>)
 80022a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022a8:	4b29      	ldr	r3, [pc, #164]	; (8002350 <HAL_ADC_MspInit+0x198>)
 80022aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022b2:	613b      	str	r3, [r7, #16]
 80022b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022b6:	4b26      	ldr	r3, [pc, #152]	; (8002350 <HAL_ADC_MspInit+0x198>)
 80022b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022bc:	4a24      	ldr	r2, [pc, #144]	; (8002350 <HAL_ADC_MspInit+0x198>)
 80022be:	f043 0304 	orr.w	r3, r3, #4
 80022c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022c6:	4b22      	ldr	r3, [pc, #136]	; (8002350 <HAL_ADC_MspInit+0x198>)
 80022c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80022d4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80022d8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80022dc:	f000 ffda 	bl	8003294 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 80022e0:	4b20      	ldr	r3, [pc, #128]	; (8002364 <HAL_ADC_MspInit+0x1ac>)
 80022e2:	4a21      	ldr	r2, [pc, #132]	; (8002368 <HAL_ADC_MspInit+0x1b0>)
 80022e4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80022e6:	4b1f      	ldr	r3, [pc, #124]	; (8002364 <HAL_ADC_MspInit+0x1ac>)
 80022e8:	2273      	movs	r2, #115	; 0x73
 80022ea:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022ec:	4b1d      	ldr	r3, [pc, #116]	; (8002364 <HAL_ADC_MspInit+0x1ac>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80022f2:	4b1c      	ldr	r3, [pc, #112]	; (8002364 <HAL_ADC_MspInit+0x1ac>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80022f8:	4b1a      	ldr	r3, [pc, #104]	; (8002364 <HAL_ADC_MspInit+0x1ac>)
 80022fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022fe:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002300:	4b18      	ldr	r3, [pc, #96]	; (8002364 <HAL_ADC_MspInit+0x1ac>)
 8002302:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002306:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002308:	4b16      	ldr	r3, [pc, #88]	; (8002364 <HAL_ADC_MspInit+0x1ac>)
 800230a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800230e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002310:	4b14      	ldr	r3, [pc, #80]	; (8002364 <HAL_ADC_MspInit+0x1ac>)
 8002312:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002316:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002318:	4b12      	ldr	r3, [pc, #72]	; (8002364 <HAL_ADC_MspInit+0x1ac>)
 800231a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800231e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002320:	4b10      	ldr	r3, [pc, #64]	; (8002364 <HAL_ADC_MspInit+0x1ac>)
 8002322:	2200      	movs	r2, #0
 8002324:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002326:	480f      	ldr	r0, [pc, #60]	; (8002364 <HAL_ADC_MspInit+0x1ac>)
 8002328:	f002 fc4a 	bl	8004bc0 <HAL_DMA_Init>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 8002332:	f7ff ff21 	bl	8002178 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a0a      	ldr	r2, [pc, #40]	; (8002364 <HAL_ADC_MspInit+0x1ac>)
 800233a:	659a      	str	r2, [r3, #88]	; 0x58
 800233c:	4a09      	ldr	r2, [pc, #36]	; (8002364 <HAL_ADC_MspInit+0x1ac>)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002342:	bf00      	nop
 8002344:	3730      	adds	r7, #48	; 0x30
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40022000 	.word	0x40022000
 8002350:	58024400 	.word	0x58024400
 8002354:	58020800 	.word	0x58020800
 8002358:	24000260 	.word	0x24000260
 800235c:	40020088 	.word	0x40020088
 8002360:	58026000 	.word	0x58026000
 8002364:	240002d8 	.word	0x240002d8
 8002368:	400204b8 	.word	0x400204b8

0800236c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b0b8      	sub	sp, #224	; 0xe0
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002374:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	605a      	str	r2, [r3, #4]
 800237e:	609a      	str	r2, [r3, #8]
 8002380:	60da      	str	r2, [r3, #12]
 8002382:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002384:	f107 0310 	add.w	r3, r7, #16
 8002388:	22b8      	movs	r2, #184	; 0xb8
 800238a:	2100      	movs	r1, #0
 800238c:	4618      	mov	r0, r3
 800238e:	f013 fad9 	bl	8015944 <memset>
  if(hfdcan->Instance==FDCAN3)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a26      	ldr	r2, [pc, #152]	; (8002430 <HAL_FDCAN_MspInit+0xc4>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d144      	bne.n	8002426 <HAL_FDCAN_MspInit+0xba>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800239c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80023a0:	f04f 0300 	mov.w	r3, #0
 80023a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 80023a8:	2300      	movs	r3, #0
 80023aa:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80023ac:	f107 0310 	add.w	r3, r7, #16
 80023b0:	4618      	mov	r0, r3
 80023b2:	f007 f9fd 	bl	80097b0 <HAL_RCCEx_PeriphCLKConfig>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <HAL_FDCAN_MspInit+0x54>
    {
      Error_Handler();
 80023bc:	f7ff fedc 	bl	8002178 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80023c0:	4b1c      	ldr	r3, [pc, #112]	; (8002434 <HAL_FDCAN_MspInit+0xc8>)
 80023c2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80023c6:	4a1b      	ldr	r2, [pc, #108]	; (8002434 <HAL_FDCAN_MspInit+0xc8>)
 80023c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023cc:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80023d0:	4b18      	ldr	r3, [pc, #96]	; (8002434 <HAL_FDCAN_MspInit+0xc8>)
 80023d2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80023d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80023de:	4b15      	ldr	r3, [pc, #84]	; (8002434 <HAL_FDCAN_MspInit+0xc8>)
 80023e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023e4:	4a13      	ldr	r2, [pc, #76]	; (8002434 <HAL_FDCAN_MspInit+0xc8>)
 80023e6:	f043 0320 	orr.w	r3, r3, #32
 80023ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023ee:	4b11      	ldr	r3, [pc, #68]	; (8002434 <HAL_FDCAN_MspInit+0xc8>)
 80023f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023f4:	f003 0320 	and.w	r3, r3, #32
 80023f8:	60bb      	str	r3, [r7, #8]
 80023fa:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023fc:	23c0      	movs	r3, #192	; 0xc0
 80023fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002402:	2302      	movs	r3, #2
 8002404:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002408:	2300      	movs	r3, #0
 800240a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240e:	2300      	movs	r3, #0
 8002410:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8002414:	2302      	movs	r3, #2
 8002416:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800241a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800241e:	4619      	mov	r1, r3
 8002420:	4805      	ldr	r0, [pc, #20]	; (8002438 <HAL_FDCAN_MspInit+0xcc>)
 8002422:	f004 fbf1 	bl	8006c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8002426:	bf00      	nop
 8002428:	37e0      	adds	r7, #224	; 0xe0
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	4000d400 	.word	0x4000d400
 8002434:	58024400 	.word	0x58024400
 8002438:	58021400 	.word	0x58021400

0800243c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b0b8      	sub	sp, #224	; 0xe0
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002444:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	605a      	str	r2, [r3, #4]
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	60da      	str	r2, [r3, #12]
 8002452:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002454:	f107 0310 	add.w	r3, r7, #16
 8002458:	22b8      	movs	r2, #184	; 0xb8
 800245a:	2100      	movs	r1, #0
 800245c:	4618      	mov	r0, r3
 800245e:	f013 fa71 	bl	8015944 <memset>
  if(hi2c->Instance==I2C2)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a26      	ldr	r2, [pc, #152]	; (8002500 <HAL_I2C_MspInit+0xc4>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d145      	bne.n	80024f8 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800246c:	f04f 0208 	mov.w	r2, #8
 8002470:	f04f 0300 	mov.w	r3, #0
 8002474:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002478:	2300      	movs	r3, #0
 800247a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800247e:	f107 0310 	add.w	r3, r7, #16
 8002482:	4618      	mov	r0, r3
 8002484:	f007 f994 	bl	80097b0 <HAL_RCCEx_PeriphCLKConfig>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800248e:	f7ff fe73 	bl	8002178 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002492:	4b1c      	ldr	r3, [pc, #112]	; (8002504 <HAL_I2C_MspInit+0xc8>)
 8002494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002498:	4a1a      	ldr	r2, [pc, #104]	; (8002504 <HAL_I2C_MspInit+0xc8>)
 800249a:	f043 0320 	orr.w	r3, r3, #32
 800249e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024a2:	4b18      	ldr	r3, [pc, #96]	; (8002504 <HAL_I2C_MspInit+0xc8>)
 80024a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024a8:	f003 0320 	and.w	r3, r3, #32
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024b0:	2303      	movs	r3, #3
 80024b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024b6:	2312      	movs	r3, #18
 80024b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024bc:	2300      	movs	r3, #0
 80024be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c2:	2300      	movs	r3, #0
 80024c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80024c8:	2304      	movs	r3, #4
 80024ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80024ce:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80024d2:	4619      	mov	r1, r3
 80024d4:	480c      	ldr	r0, [pc, #48]	; (8002508 <HAL_I2C_MspInit+0xcc>)
 80024d6:	f004 fb97 	bl	8006c08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80024da:	4b0a      	ldr	r3, [pc, #40]	; (8002504 <HAL_I2C_MspInit+0xc8>)
 80024dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024e0:	4a08      	ldr	r2, [pc, #32]	; (8002504 <HAL_I2C_MspInit+0xc8>)
 80024e2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80024ea:	4b06      	ldr	r3, [pc, #24]	; (8002504 <HAL_I2C_MspInit+0xc8>)
 80024ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024f4:	60bb      	str	r3, [r7, #8]
 80024f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80024f8:	bf00      	nop
 80024fa:	37e0      	adds	r7, #224	; 0xe0
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40005800 	.word	0x40005800
 8002504:	58024400 	.word	0x58024400
 8002508:	58021400 	.word	0x58021400

0800250c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b0ba      	sub	sp, #232	; 0xe8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002514:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	605a      	str	r2, [r3, #4]
 800251e:	609a      	str	r2, [r3, #8]
 8002520:	60da      	str	r2, [r3, #12]
 8002522:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002524:	f107 0318 	add.w	r3, r7, #24
 8002528:	22b8      	movs	r2, #184	; 0xb8
 800252a:	2100      	movs	r1, #0
 800252c:	4618      	mov	r0, r3
 800252e:	f013 fa09 	bl	8015944 <memset>
  if(hsd->Instance==SDMMC2)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a5d      	ldr	r2, [pc, #372]	; (80026ac <HAL_SD_MspInit+0x1a0>)
 8002538:	4293      	cmp	r3, r2
 800253a:	f040 80b3 	bne.w	80026a4 <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800253e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002542:	f04f 0300 	mov.w	r3, #0
 8002546:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800254a:	2300      	movs	r3, #0
 800254c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800254e:	f107 0318 	add.w	r3, r7, #24
 8002552:	4618      	mov	r0, r3
 8002554:	f007 f92c 	bl	80097b0 <HAL_RCCEx_PeriphCLKConfig>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 800255e:	f7ff fe0b 	bl	8002178 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8002562:	4b53      	ldr	r3, [pc, #332]	; (80026b0 <HAL_SD_MspInit+0x1a4>)
 8002564:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002568:	4a51      	ldr	r2, [pc, #324]	; (80026b0 <HAL_SD_MspInit+0x1a4>)
 800256a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800256e:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002572:	4b4f      	ldr	r3, [pc, #316]	; (80026b0 <HAL_SD_MspInit+0x1a4>)
 8002574:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002578:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800257c:	617b      	str	r3, [r7, #20]
 800257e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002580:	4b4b      	ldr	r3, [pc, #300]	; (80026b0 <HAL_SD_MspInit+0x1a4>)
 8002582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002586:	4a4a      	ldr	r2, [pc, #296]	; (80026b0 <HAL_SD_MspInit+0x1a4>)
 8002588:	f043 0308 	orr.w	r3, r3, #8
 800258c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002590:	4b47      	ldr	r3, [pc, #284]	; (80026b0 <HAL_SD_MspInit+0x1a4>)
 8002592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002596:	f003 0308 	and.w	r3, r3, #8
 800259a:	613b      	str	r3, [r7, #16]
 800259c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800259e:	4b44      	ldr	r3, [pc, #272]	; (80026b0 <HAL_SD_MspInit+0x1a4>)
 80025a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025a4:	4a42      	ldr	r2, [pc, #264]	; (80026b0 <HAL_SD_MspInit+0x1a4>)
 80025a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025ae:	4b40      	ldr	r3, [pc, #256]	; (80026b0 <HAL_SD_MspInit+0x1a4>)
 80025b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80025bc:	2340      	movs	r3, #64	; 0x40
 80025be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c2:	2302      	movs	r3, #2
 80025c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ce:	2303      	movs	r3, #3
 80025d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80025d4:	230b      	movs	r3, #11
 80025d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025da:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80025de:	4619      	mov	r1, r3
 80025e0:	4834      	ldr	r0, [pc, #208]	; (80026b4 <HAL_SD_MspInit+0x1a8>)
 80025e2:	f004 fb11 	bl	8006c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80025e6:	2380      	movs	r3, #128	; 0x80
 80025e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ec:	2302      	movs	r3, #2
 80025ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025f2:	2301      	movs	r3, #1
 80025f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f8:	2303      	movs	r3, #3
 80025fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80025fe:	230b      	movs	r3, #11
 8002600:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002604:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002608:	4619      	mov	r1, r3
 800260a:	482a      	ldr	r0, [pc, #168]	; (80026b4 <HAL_SD_MspInit+0x1a8>)
 800260c:	f004 fafc 	bl	8006c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002610:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002614:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002618:	2302      	movs	r3, #2
 800261a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800261e:	2301      	movs	r3, #1
 8002620:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002624:	2303      	movs	r3, #3
 8002626:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800262a:	230b      	movs	r3, #11
 800262c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002630:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002634:	4619      	mov	r1, r3
 8002636:	4820      	ldr	r0, [pc, #128]	; (80026b8 <HAL_SD_MspInit+0x1ac>)
 8002638:	f004 fae6 	bl	8006c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800263c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002640:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002644:	2302      	movs	r3, #2
 8002646:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264a:	2300      	movs	r3, #0
 800264c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002650:	2303      	movs	r3, #3
 8002652:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002656:	230b      	movs	r3, #11
 8002658:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800265c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002660:	4619      	mov	r1, r3
 8002662:	4815      	ldr	r0, [pc, #84]	; (80026b8 <HAL_SD_MspInit+0x1ac>)
 8002664:	f004 fad0 	bl	8006c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002668:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800266c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002670:	2302      	movs	r3, #2
 8002672:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002676:	2300      	movs	r3, #0
 8002678:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800267c:	2303      	movs	r3, #3
 800267e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8002682:	230a      	movs	r3, #10
 8002684:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002688:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800268c:	4619      	mov	r1, r3
 800268e:	480a      	ldr	r0, [pc, #40]	; (80026b8 <HAL_SD_MspInit+0x1ac>)
 8002690:	f004 faba 	bl	8006c08 <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8002694:	2200      	movs	r2, #0
 8002696:	2100      	movs	r1, #0
 8002698:	207c      	movs	r0, #124	; 0x7c
 800269a:	f002 fa5c 	bl	8004b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 800269e:	207c      	movs	r0, #124	; 0x7c
 80026a0:	f002 fa73 	bl	8004b8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 80026a4:	bf00      	nop
 80026a6:	37e8      	adds	r7, #232	; 0xe8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	48022400 	.word	0x48022400
 80026b0:	58024400 	.word	0x58024400
 80026b4:	58020c00 	.word	0x58020c00
 80026b8:	58021800 	.word	0x58021800

080026bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b08e      	sub	sp, #56	; 0x38
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	605a      	str	r2, [r3, #4]
 80026ce:	609a      	str	r2, [r3, #8]
 80026d0:	60da      	str	r2, [r3, #12]
 80026d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a4f      	ldr	r2, [pc, #316]	; (8002818 <HAL_SPI_MspInit+0x15c>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d12e      	bne.n	800273c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80026de:	4b4f      	ldr	r3, [pc, #316]	; (800281c <HAL_SPI_MspInit+0x160>)
 80026e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026e4:	4a4d      	ldr	r2, [pc, #308]	; (800281c <HAL_SPI_MspInit+0x160>)
 80026e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80026ee:	4b4b      	ldr	r3, [pc, #300]	; (800281c <HAL_SPI_MspInit+0x160>)
 80026f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026f8:	623b      	str	r3, [r7, #32]
 80026fa:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026fc:	4b47      	ldr	r3, [pc, #284]	; (800281c <HAL_SPI_MspInit+0x160>)
 80026fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002702:	4a46      	ldr	r2, [pc, #280]	; (800281c <HAL_SPI_MspInit+0x160>)
 8002704:	f043 0301 	orr.w	r3, r3, #1
 8002708:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800270c:	4b43      	ldr	r3, [pc, #268]	; (800281c <HAL_SPI_MspInit+0x160>)
 800270e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	61fb      	str	r3, [r7, #28]
 8002718:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800271a:	23e0      	movs	r3, #224	; 0xe0
 800271c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271e:	2302      	movs	r3, #2
 8002720:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002722:	2300      	movs	r3, #0
 8002724:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002726:	2300      	movs	r3, #0
 8002728:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800272a:	2305      	movs	r3, #5
 800272c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800272e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002732:	4619      	mov	r1, r3
 8002734:	483a      	ldr	r0, [pc, #232]	; (8002820 <HAL_SPI_MspInit+0x164>)
 8002736:	f004 fa67 	bl	8006c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800273a:	e068      	b.n	800280e <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a38      	ldr	r2, [pc, #224]	; (8002824 <HAL_SPI_MspInit+0x168>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d12f      	bne.n	80027a6 <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002746:	4b35      	ldr	r3, [pc, #212]	; (800281c <HAL_SPI_MspInit+0x160>)
 8002748:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800274c:	4a33      	ldr	r2, [pc, #204]	; (800281c <HAL_SPI_MspInit+0x160>)
 800274e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002752:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002756:	4b31      	ldr	r3, [pc, #196]	; (800281c <HAL_SPI_MspInit+0x160>)
 8002758:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800275c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002760:	61bb      	str	r3, [r7, #24]
 8002762:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002764:	4b2d      	ldr	r3, [pc, #180]	; (800281c <HAL_SPI_MspInit+0x160>)
 8002766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800276a:	4a2c      	ldr	r2, [pc, #176]	; (800281c <HAL_SPI_MspInit+0x160>)
 800276c:	f043 0302 	orr.w	r3, r3, #2
 8002770:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002774:	4b29      	ldr	r3, [pc, #164]	; (800281c <HAL_SPI_MspInit+0x160>)
 8002776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	617b      	str	r3, [r7, #20]
 8002780:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002782:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002786:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002788:	2302      	movs	r3, #2
 800278a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278c:	2300      	movs	r3, #0
 800278e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002790:	2300      	movs	r3, #0
 8002792:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002794:	2305      	movs	r3, #5
 8002796:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002798:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800279c:	4619      	mov	r1, r3
 800279e:	4822      	ldr	r0, [pc, #136]	; (8002828 <HAL_SPI_MspInit+0x16c>)
 80027a0:	f004 fa32 	bl	8006c08 <HAL_GPIO_Init>
}
 80027a4:	e033      	b.n	800280e <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a20      	ldr	r2, [pc, #128]	; (800282c <HAL_SPI_MspInit+0x170>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d12e      	bne.n	800280e <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80027b0:	4b1a      	ldr	r3, [pc, #104]	; (800281c <HAL_SPI_MspInit+0x160>)
 80027b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027b6:	4a19      	ldr	r2, [pc, #100]	; (800281c <HAL_SPI_MspInit+0x160>)
 80027b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027bc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80027c0:	4b16      	ldr	r3, [pc, #88]	; (800281c <HAL_SPI_MspInit+0x160>)
 80027c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027ca:	613b      	str	r3, [r7, #16]
 80027cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ce:	4b13      	ldr	r3, [pc, #76]	; (800281c <HAL_SPI_MspInit+0x160>)
 80027d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027d4:	4a11      	ldr	r2, [pc, #68]	; (800281c <HAL_SPI_MspInit+0x160>)
 80027d6:	f043 0304 	orr.w	r3, r3, #4
 80027da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027de:	4b0f      	ldr	r3, [pc, #60]	; (800281c <HAL_SPI_MspInit+0x160>)
 80027e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027e4:	f003 0304 	and.w	r3, r3, #4
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80027ec:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f2:	2302      	movs	r3, #2
 80027f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fa:	2300      	movs	r3, #0
 80027fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80027fe:	2306      	movs	r3, #6
 8002800:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002806:	4619      	mov	r1, r3
 8002808:	4809      	ldr	r0, [pc, #36]	; (8002830 <HAL_SPI_MspInit+0x174>)
 800280a:	f004 f9fd 	bl	8006c08 <HAL_GPIO_Init>
}
 800280e:	bf00      	nop
 8002810:	3738      	adds	r7, #56	; 0x38
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40013000 	.word	0x40013000
 800281c:	58024400 	.word	0x58024400
 8002820:	58020000 	.word	0x58020000
 8002824:	40003800 	.word	0x40003800
 8002828:	58020400 	.word	0x58020400
 800282c:	40003c00 	.word	0x40003c00
 8002830:	58020800 	.word	0x58020800

08002834 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08c      	sub	sp, #48	; 0x30
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800283c:	f107 031c 	add.w	r3, r7, #28
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	609a      	str	r2, [r3, #8]
 8002848:	60da      	str	r2, [r3, #12]
 800284a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002854:	d15d      	bne.n	8002912 <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002856:	4b8e      	ldr	r3, [pc, #568]	; (8002a90 <HAL_TIM_PWM_MspInit+0x25c>)
 8002858:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800285c:	4a8c      	ldr	r2, [pc, #560]	; (8002a90 <HAL_TIM_PWM_MspInit+0x25c>)
 800285e:	f043 0301 	orr.w	r3, r3, #1
 8002862:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002866:	4b8a      	ldr	r3, [pc, #552]	; (8002a90 <HAL_TIM_PWM_MspInit+0x25c>)
 8002868:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	61bb      	str	r3, [r7, #24]
 8002872:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002874:	4b86      	ldr	r3, [pc, #536]	; (8002a90 <HAL_TIM_PWM_MspInit+0x25c>)
 8002876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800287a:	4a85      	ldr	r2, [pc, #532]	; (8002a90 <HAL_TIM_PWM_MspInit+0x25c>)
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002884:	4b82      	ldr	r3, [pc, #520]	; (8002a90 <HAL_TIM_PWM_MspInit+0x25c>)
 8002886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002892:	2301      	movs	r3, #1
 8002894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002896:	2302      	movs	r3, #2
 8002898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289a:	2300      	movs	r3, #0
 800289c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289e:	2300      	movs	r3, #0
 80028a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80028a2:	2301      	movs	r3, #1
 80028a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a6:	f107 031c 	add.w	r3, r7, #28
 80028aa:	4619      	mov	r1, r3
 80028ac:	4879      	ldr	r0, [pc, #484]	; (8002a94 <HAL_TIM_PWM_MspInit+0x260>)
 80028ae:	f004 f9ab 	bl	8006c08 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 80028b2:	4b79      	ldr	r3, [pc, #484]	; (8002a98 <HAL_TIM_PWM_MspInit+0x264>)
 80028b4:	4a79      	ldr	r2, [pc, #484]	; (8002a9c <HAL_TIM_PWM_MspInit+0x268>)
 80028b6:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 80028b8:	4b77      	ldr	r3, [pc, #476]	; (8002a98 <HAL_TIM_PWM_MspInit+0x264>)
 80028ba:	2214      	movs	r2, #20
 80028bc:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028be:	4b76      	ldr	r3, [pc, #472]	; (8002a98 <HAL_TIM_PWM_MspInit+0x264>)
 80028c0:	2240      	movs	r2, #64	; 0x40
 80028c2:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80028c4:	4b74      	ldr	r3, [pc, #464]	; (8002a98 <HAL_TIM_PWM_MspInit+0x264>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80028ca:	4b73      	ldr	r3, [pc, #460]	; (8002a98 <HAL_TIM_PWM_MspInit+0x264>)
 80028cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028d0:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80028d2:	4b71      	ldr	r3, [pc, #452]	; (8002a98 <HAL_TIM_PWM_MspInit+0x264>)
 80028d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028d8:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80028da:	4b6f      	ldr	r3, [pc, #444]	; (8002a98 <HAL_TIM_PWM_MspInit+0x264>)
 80028dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028e0:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 80028e2:	4b6d      	ldr	r3, [pc, #436]	; (8002a98 <HAL_TIM_PWM_MspInit+0x264>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80028e8:	4b6b      	ldr	r3, [pc, #428]	; (8002a98 <HAL_TIM_PWM_MspInit+0x264>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028ee:	4b6a      	ldr	r3, [pc, #424]	; (8002a98 <HAL_TIM_PWM_MspInit+0x264>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 80028f4:	4868      	ldr	r0, [pc, #416]	; (8002a98 <HAL_TIM_PWM_MspInit+0x264>)
 80028f6:	f002 f963 	bl	8004bc0 <HAL_DMA_Init>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 8002900:	f7ff fc3a 	bl	8002178 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a64      	ldr	r2, [pc, #400]	; (8002a98 <HAL_TIM_PWM_MspInit+0x264>)
 8002908:	62da      	str	r2, [r3, #44]	; 0x2c
 800290a:	4a63      	ldr	r2, [pc, #396]	; (8002a98 <HAL_TIM_PWM_MspInit+0x264>)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002910:	e119      	b.n	8002b46 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a62      	ldr	r2, [pc, #392]	; (8002aa0 <HAL_TIM_PWM_MspInit+0x26c>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d16d      	bne.n	80029f8 <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800291c:	4b5c      	ldr	r3, [pc, #368]	; (8002a90 <HAL_TIM_PWM_MspInit+0x25c>)
 800291e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002922:	4a5b      	ldr	r2, [pc, #364]	; (8002a90 <HAL_TIM_PWM_MspInit+0x25c>)
 8002924:	f043 0302 	orr.w	r3, r3, #2
 8002928:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800292c:	4b58      	ldr	r3, [pc, #352]	; (8002a90 <HAL_TIM_PWM_MspInit+0x25c>)
 800292e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	613b      	str	r3, [r7, #16]
 8002938:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 800293a:	4b5a      	ldr	r3, [pc, #360]	; (8002aa4 <HAL_TIM_PWM_MspInit+0x270>)
 800293c:	4a5a      	ldr	r2, [pc, #360]	; (8002aa8 <HAL_TIM_PWM_MspInit+0x274>)
 800293e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8002940:	4b58      	ldr	r3, [pc, #352]	; (8002aa4 <HAL_TIM_PWM_MspInit+0x270>)
 8002942:	2218      	movs	r2, #24
 8002944:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002946:	4b57      	ldr	r3, [pc, #348]	; (8002aa4 <HAL_TIM_PWM_MspInit+0x270>)
 8002948:	2240      	movs	r2, #64	; 0x40
 800294a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800294c:	4b55      	ldr	r3, [pc, #340]	; (8002aa4 <HAL_TIM_PWM_MspInit+0x270>)
 800294e:	2200      	movs	r2, #0
 8002950:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002952:	4b54      	ldr	r3, [pc, #336]	; (8002aa4 <HAL_TIM_PWM_MspInit+0x270>)
 8002954:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002958:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800295a:	4b52      	ldr	r3, [pc, #328]	; (8002aa4 <HAL_TIM_PWM_MspInit+0x270>)
 800295c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002960:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002962:	4b50      	ldr	r3, [pc, #320]	; (8002aa4 <HAL_TIM_PWM_MspInit+0x270>)
 8002964:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002968:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 800296a:	4b4e      	ldr	r3, [pc, #312]	; (8002aa4 <HAL_TIM_PWM_MspInit+0x270>)
 800296c:	2200      	movs	r2, #0
 800296e:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002970:	4b4c      	ldr	r3, [pc, #304]	; (8002aa4 <HAL_TIM_PWM_MspInit+0x270>)
 8002972:	2200      	movs	r2, #0
 8002974:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002976:	4b4b      	ldr	r3, [pc, #300]	; (8002aa4 <HAL_TIM_PWM_MspInit+0x270>)
 8002978:	2200      	movs	r2, #0
 800297a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 800297c:	4849      	ldr	r0, [pc, #292]	; (8002aa4 <HAL_TIM_PWM_MspInit+0x270>)
 800297e:	f002 f91f 	bl	8004bc0 <HAL_DMA_Init>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 8002988:	f7ff fbf6 	bl	8002178 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a45      	ldr	r2, [pc, #276]	; (8002aa4 <HAL_TIM_PWM_MspInit+0x270>)
 8002990:	629a      	str	r2, [r3, #40]	; 0x28
 8002992:	4a44      	ldr	r2, [pc, #272]	; (8002aa4 <HAL_TIM_PWM_MspInit+0x270>)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 8002998:	4b44      	ldr	r3, [pc, #272]	; (8002aac <HAL_TIM_PWM_MspInit+0x278>)
 800299a:	4a45      	ldr	r2, [pc, #276]	; (8002ab0 <HAL_TIM_PWM_MspInit+0x27c>)
 800299c:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 800299e:	4b43      	ldr	r3, [pc, #268]	; (8002aac <HAL_TIM_PWM_MspInit+0x278>)
 80029a0:	2217      	movs	r2, #23
 80029a2:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029a4:	4b41      	ldr	r3, [pc, #260]	; (8002aac <HAL_TIM_PWM_MspInit+0x278>)
 80029a6:	2240      	movs	r2, #64	; 0x40
 80029a8:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80029aa:	4b40      	ldr	r3, [pc, #256]	; (8002aac <HAL_TIM_PWM_MspInit+0x278>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80029b0:	4b3e      	ldr	r3, [pc, #248]	; (8002aac <HAL_TIM_PWM_MspInit+0x278>)
 80029b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029b6:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80029b8:	4b3c      	ldr	r3, [pc, #240]	; (8002aac <HAL_TIM_PWM_MspInit+0x278>)
 80029ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029be:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80029c0:	4b3a      	ldr	r3, [pc, #232]	; (8002aac <HAL_TIM_PWM_MspInit+0x278>)
 80029c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029c6:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 80029c8:	4b38      	ldr	r3, [pc, #224]	; (8002aac <HAL_TIM_PWM_MspInit+0x278>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80029ce:	4b37      	ldr	r3, [pc, #220]	; (8002aac <HAL_TIM_PWM_MspInit+0x278>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029d4:	4b35      	ldr	r3, [pc, #212]	; (8002aac <HAL_TIM_PWM_MspInit+0x278>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 80029da:	4834      	ldr	r0, [pc, #208]	; (8002aac <HAL_TIM_PWM_MspInit+0x278>)
 80029dc:	f002 f8f0 	bl	8004bc0 <HAL_DMA_Init>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 80029e6:	f7ff fbc7 	bl	8002178 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a2f      	ldr	r2, [pc, #188]	; (8002aac <HAL_TIM_PWM_MspInit+0x278>)
 80029ee:	625a      	str	r2, [r3, #36]	; 0x24
 80029f0:	4a2e      	ldr	r2, [pc, #184]	; (8002aac <HAL_TIM_PWM_MspInit+0x278>)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80029f6:	e0a6      	b.n	8002b46 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a2d      	ldr	r2, [pc, #180]	; (8002ab4 <HAL_TIM_PWM_MspInit+0x280>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d15e      	bne.n	8002ac0 <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a02:	4b23      	ldr	r3, [pc, #140]	; (8002a90 <HAL_TIM_PWM_MspInit+0x25c>)
 8002a04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a08:	4a21      	ldr	r2, [pc, #132]	; (8002a90 <HAL_TIM_PWM_MspInit+0x25c>)
 8002a0a:	f043 0304 	orr.w	r3, r3, #4
 8002a0e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a12:	4b1f      	ldr	r3, [pc, #124]	; (8002a90 <HAL_TIM_PWM_MspInit+0x25c>)
 8002a14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	60fb      	str	r3, [r7, #12]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 8002a20:	4b25      	ldr	r3, [pc, #148]	; (8002ab8 <HAL_TIM_PWM_MspInit+0x284>)
 8002a22:	4a26      	ldr	r2, [pc, #152]	; (8002abc <HAL_TIM_PWM_MspInit+0x288>)
 8002a24:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 8002a26:	4b24      	ldr	r3, [pc, #144]	; (8002ab8 <HAL_TIM_PWM_MspInit+0x284>)
 8002a28:	221f      	movs	r2, #31
 8002a2a:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a2c:	4b22      	ldr	r3, [pc, #136]	; (8002ab8 <HAL_TIM_PWM_MspInit+0x284>)
 8002a2e:	2240      	movs	r2, #64	; 0x40
 8002a30:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a32:	4b21      	ldr	r3, [pc, #132]	; (8002ab8 <HAL_TIM_PWM_MspInit+0x284>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002a38:	4b1f      	ldr	r3, [pc, #124]	; (8002ab8 <HAL_TIM_PWM_MspInit+0x284>)
 8002a3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a3e:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a40:	4b1d      	ldr	r3, [pc, #116]	; (8002ab8 <HAL_TIM_PWM_MspInit+0x284>)
 8002a42:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a46:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a48:	4b1b      	ldr	r3, [pc, #108]	; (8002ab8 <HAL_TIM_PWM_MspInit+0x284>)
 8002a4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a4e:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8002a50:	4b19      	ldr	r3, [pc, #100]	; (8002ab8 <HAL_TIM_PWM_MspInit+0x284>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002a56:	4b18      	ldr	r3, [pc, #96]	; (8002ab8 <HAL_TIM_PWM_MspInit+0x284>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a5c:	4b16      	ldr	r3, [pc, #88]	; (8002ab8 <HAL_TIM_PWM_MspInit+0x284>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8002a62:	4815      	ldr	r0, [pc, #84]	; (8002ab8 <HAL_TIM_PWM_MspInit+0x284>)
 8002a64:	f002 f8ac 	bl	8004bc0 <HAL_DMA_Init>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 8002a6e:	f7ff fb83 	bl	8002178 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a10      	ldr	r2, [pc, #64]	; (8002ab8 <HAL_TIM_PWM_MspInit+0x284>)
 8002a76:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a78:	4a0f      	ldr	r2, [pc, #60]	; (8002ab8 <HAL_TIM_PWM_MspInit+0x284>)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002a7e:	2200      	movs	r2, #0
 8002a80:	2100      	movs	r1, #0
 8002a82:	201e      	movs	r0, #30
 8002a84:	f002 f867 	bl	8004b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002a88:	201e      	movs	r0, #30
 8002a8a:	f002 f87e 	bl	8004b8a <HAL_NVIC_EnableIRQ>
}
 8002a8e:	e05a      	b.n	8002b46 <HAL_TIM_PWM_MspInit+0x312>
 8002a90:	58024400 	.word	0x58024400
 8002a94:	58020000 	.word	0x58020000
 8002a98:	24000788 	.word	0x24000788
 8002a9c:	40020028 	.word	0x40020028
 8002aa0:	40000400 	.word	0x40000400
 8002aa4:	24000800 	.word	0x24000800
 8002aa8:	40020058 	.word	0x40020058
 8002aac:	24000878 	.word	0x24000878
 8002ab0:	40020070 	.word	0x40020070
 8002ab4:	40000800 	.word	0x40000800
 8002ab8:	240008f0 	.word	0x240008f0
 8002abc:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a22      	ldr	r2, [pc, #136]	; (8002b50 <HAL_TIM_PWM_MspInit+0x31c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d13d      	bne.n	8002b46 <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002aca:	4b22      	ldr	r3, [pc, #136]	; (8002b54 <HAL_TIM_PWM_MspInit+0x320>)
 8002acc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ad0:	4a20      	ldr	r2, [pc, #128]	; (8002b54 <HAL_TIM_PWM_MspInit+0x320>)
 8002ad2:	f043 0308 	orr.w	r3, r3, #8
 8002ad6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ada:	4b1e      	ldr	r3, [pc, #120]	; (8002b54 <HAL_TIM_PWM_MspInit+0x320>)
 8002adc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ae0:	f003 0308 	and.w	r3, r3, #8
 8002ae4:	60bb      	str	r3, [r7, #8]
 8002ae6:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 8002ae8:	4b1b      	ldr	r3, [pc, #108]	; (8002b58 <HAL_TIM_PWM_MspInit+0x324>)
 8002aea:	4a1c      	ldr	r2, [pc, #112]	; (8002b5c <HAL_TIM_PWM_MspInit+0x328>)
 8002aec:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 8002aee:	4b1a      	ldr	r3, [pc, #104]	; (8002b58 <HAL_TIM_PWM_MspInit+0x324>)
 8002af0:	223a      	movs	r2, #58	; 0x3a
 8002af2:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002af4:	4b18      	ldr	r3, [pc, #96]	; (8002b58 <HAL_TIM_PWM_MspInit+0x324>)
 8002af6:	2240      	movs	r2, #64	; 0x40
 8002af8:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002afa:	4b17      	ldr	r3, [pc, #92]	; (8002b58 <HAL_TIM_PWM_MspInit+0x324>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8002b00:	4b15      	ldr	r3, [pc, #84]	; (8002b58 <HAL_TIM_PWM_MspInit+0x324>)
 8002b02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b06:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002b08:	4b13      	ldr	r3, [pc, #76]	; (8002b58 <HAL_TIM_PWM_MspInit+0x324>)
 8002b0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b0e:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002b10:	4b11      	ldr	r3, [pc, #68]	; (8002b58 <HAL_TIM_PWM_MspInit+0x324>)
 8002b12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b16:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 8002b18:	4b0f      	ldr	r3, [pc, #60]	; (8002b58 <HAL_TIM_PWM_MspInit+0x324>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8002b1e:	4b0e      	ldr	r3, [pc, #56]	; (8002b58 <HAL_TIM_PWM_MspInit+0x324>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b24:	4b0c      	ldr	r3, [pc, #48]	; (8002b58 <HAL_TIM_PWM_MspInit+0x324>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 8002b2a:	480b      	ldr	r0, [pc, #44]	; (8002b58 <HAL_TIM_PWM_MspInit+0x324>)
 8002b2c:	f002 f848 	bl	8004bc0 <HAL_DMA_Init>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 8002b36:	f7ff fb1f 	bl	8002178 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a06      	ldr	r2, [pc, #24]	; (8002b58 <HAL_TIM_PWM_MspInit+0x324>)
 8002b3e:	631a      	str	r2, [r3, #48]	; 0x30
 8002b40:	4a05      	ldr	r2, [pc, #20]	; (8002b58 <HAL_TIM_PWM_MspInit+0x324>)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002b46:	bf00      	nop
 8002b48:	3730      	adds	r7, #48	; 0x30
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40000c00 	.word	0x40000c00
 8002b54:	58024400 	.word	0x58024400
 8002b58:	24000968 	.word	0x24000968
 8002b5c:	40020040 	.word	0x40020040

08002b60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b08c      	sub	sp, #48	; 0x30
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b68:	f107 031c 	add.w	r3, r7, #28
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	605a      	str	r2, [r3, #4]
 8002b72:	609a      	str	r2, [r3, #8]
 8002b74:	60da      	str	r2, [r3, #12]
 8002b76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b80:	d120      	bne.n	8002bc4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b82:	4b52      	ldr	r3, [pc, #328]	; (8002ccc <HAL_TIM_MspPostInit+0x16c>)
 8002b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b88:	4a50      	ldr	r2, [pc, #320]	; (8002ccc <HAL_TIM_MspPostInit+0x16c>)
 8002b8a:	f043 0302 	orr.w	r3, r3, #2
 8002b8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b92:	4b4e      	ldr	r3, [pc, #312]	; (8002ccc <HAL_TIM_MspPostInit+0x16c>)
 8002b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	61bb      	str	r3, [r7, #24]
 8002b9e:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ba0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002baa:	2302      	movs	r3, #2
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bb6:	f107 031c 	add.w	r3, r7, #28
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4844      	ldr	r0, [pc, #272]	; (8002cd0 <HAL_TIM_MspPostInit+0x170>)
 8002bbe:	f004 f823 	bl	8006c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002bc2:	e07f      	b.n	8002cc4 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a42      	ldr	r2, [pc, #264]	; (8002cd4 <HAL_TIM_MspPostInit+0x174>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d11f      	bne.n	8002c0e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bce:	4b3f      	ldr	r3, [pc, #252]	; (8002ccc <HAL_TIM_MspPostInit+0x16c>)
 8002bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bd4:	4a3d      	ldr	r2, [pc, #244]	; (8002ccc <HAL_TIM_MspPostInit+0x16c>)
 8002bd6:	f043 0302 	orr.w	r3, r3, #2
 8002bda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bde:	4b3b      	ldr	r3, [pc, #236]	; (8002ccc <HAL_TIM_MspPostInit+0x16c>)
 8002be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002be4:	f003 0302 	and.w	r3, r3, #2
 8002be8:	617b      	str	r3, [r7, #20]
 8002bea:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002bec:	2330      	movs	r3, #48	; 0x30
 8002bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c00:	f107 031c 	add.w	r3, r7, #28
 8002c04:	4619      	mov	r1, r3
 8002c06:	4832      	ldr	r0, [pc, #200]	; (8002cd0 <HAL_TIM_MspPostInit+0x170>)
 8002c08:	f003 fffe 	bl	8006c08 <HAL_GPIO_Init>
}
 8002c0c:	e05a      	b.n	8002cc4 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a31      	ldr	r2, [pc, #196]	; (8002cd8 <HAL_TIM_MspPostInit+0x178>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d131      	bne.n	8002c7c <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c18:	4b2c      	ldr	r3, [pc, #176]	; (8002ccc <HAL_TIM_MspPostInit+0x16c>)
 8002c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c1e:	4a2b      	ldr	r2, [pc, #172]	; (8002ccc <HAL_TIM_MspPostInit+0x16c>)
 8002c20:	f043 0308 	orr.w	r3, r3, #8
 8002c24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c28:	4b28      	ldr	r3, [pc, #160]	; (8002ccc <HAL_TIM_MspPostInit+0x16c>)
 8002c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c2e:	f003 0308 	and.w	r3, r3, #8
 8002c32:	613b      	str	r3, [r7, #16]
 8002c34:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002c36:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8002c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c44:	2300      	movs	r3, #0
 8002c46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002c48:	2302      	movs	r3, #2
 8002c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c4c:	f107 031c 	add.w	r3, r7, #28
 8002c50:	4619      	mov	r1, r3
 8002c52:	4822      	ldr	r0, [pc, #136]	; (8002cdc <HAL_TIM_MspPostInit+0x17c>)
 8002c54:	f003 ffd8 	bl	8006c08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002c58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5e:	2302      	movs	r3, #2
 8002c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002c62:	2302      	movs	r3, #2
 8002c64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c66:	2300      	movs	r3, #0
 8002c68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c6e:	f107 031c 	add.w	r3, r7, #28
 8002c72:	4619      	mov	r1, r3
 8002c74:	4819      	ldr	r0, [pc, #100]	; (8002cdc <HAL_TIM_MspPostInit+0x17c>)
 8002c76:	f003 ffc7 	bl	8006c08 <HAL_GPIO_Init>
}
 8002c7a:	e023      	b.n	8002cc4 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a17      	ldr	r2, [pc, #92]	; (8002ce0 <HAL_TIM_MspPostInit+0x180>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d11e      	bne.n	8002cc4 <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c86:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <HAL_TIM_MspPostInit+0x16c>)
 8002c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c8c:	4a0f      	ldr	r2, [pc, #60]	; (8002ccc <HAL_TIM_MspPostInit+0x16c>)
 8002c8e:	f043 0301 	orr.w	r3, r3, #1
 8002c92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c96:	4b0d      	ldr	r3, [pc, #52]	; (8002ccc <HAL_TIM_MspPostInit+0x16c>)
 8002c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	60fb      	str	r3, [r7, #12]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002ca4:	2308      	movs	r3, #8
 8002ca6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca8:	2302      	movs	r3, #2
 8002caa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002cac:	2302      	movs	r3, #2
 8002cae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb8:	f107 031c 	add.w	r3, r7, #28
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4809      	ldr	r0, [pc, #36]	; (8002ce4 <HAL_TIM_MspPostInit+0x184>)
 8002cc0:	f003 ffa2 	bl	8006c08 <HAL_GPIO_Init>
}
 8002cc4:	bf00      	nop
 8002cc6:	3730      	adds	r7, #48	; 0x30
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	58024400 	.word	0x58024400
 8002cd0:	58020400 	.word	0x58020400
 8002cd4:	40000400 	.word	0x40000400
 8002cd8:	40000800 	.word	0x40000800
 8002cdc:	58020c00 	.word	0x58020c00
 8002ce0:	40000c00 	.word	0x40000c00
 8002ce4:	58020000 	.word	0x58020000

08002ce8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b0ba      	sub	sp, #232	; 0xe8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	605a      	str	r2, [r3, #4]
 8002cfa:	609a      	str	r2, [r3, #8]
 8002cfc:	60da      	str	r2, [r3, #12]
 8002cfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d00:	f107 0318 	add.w	r3, r7, #24
 8002d04:	22b8      	movs	r2, #184	; 0xb8
 8002d06:	2100      	movs	r1, #0
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f012 fe1b 	bl	8015944 <memset>
  if(huart->Instance==UART4)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a4d      	ldr	r2, [pc, #308]	; (8002e48 <HAL_UART_MspInit+0x160>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d147      	bne.n	8002da8 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002d18:	f04f 0202 	mov.w	r2, #2
 8002d1c:	f04f 0300 	mov.w	r3, #0
 8002d20:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002d24:	2300      	movs	r3, #0
 8002d26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d2a:	f107 0318 	add.w	r3, r7, #24
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f006 fd3e 	bl	80097b0 <HAL_RCCEx_PeriphCLKConfig>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002d3a:	f7ff fa1d 	bl	8002178 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002d3e:	4b43      	ldr	r3, [pc, #268]	; (8002e4c <HAL_UART_MspInit+0x164>)
 8002d40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d44:	4a41      	ldr	r2, [pc, #260]	; (8002e4c <HAL_UART_MspInit+0x164>)
 8002d46:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002d4a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d4e:	4b3f      	ldr	r3, [pc, #252]	; (8002e4c <HAL_UART_MspInit+0x164>)
 8002d50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d58:	617b      	str	r3, [r7, #20]
 8002d5a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d5c:	4b3b      	ldr	r3, [pc, #236]	; (8002e4c <HAL_UART_MspInit+0x164>)
 8002d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d62:	4a3a      	ldr	r2, [pc, #232]	; (8002e4c <HAL_UART_MspInit+0x164>)
 8002d64:	f043 0302 	orr.w	r3, r3, #2
 8002d68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d6c:	4b37      	ldr	r3, [pc, #220]	; (8002e4c <HAL_UART_MspInit+0x164>)
 8002d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	613b      	str	r3, [r7, #16]
 8002d78:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d7a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d82:	2302      	movs	r3, #2
 8002d84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002d94:	2308      	movs	r3, #8
 8002d96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d9a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d9e:	4619      	mov	r1, r3
 8002da0:	482b      	ldr	r0, [pc, #172]	; (8002e50 <HAL_UART_MspInit+0x168>)
 8002da2:	f003 ff31 	bl	8006c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002da6:	e04a      	b.n	8002e3e <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a29      	ldr	r2, [pc, #164]	; (8002e54 <HAL_UART_MspInit+0x16c>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d145      	bne.n	8002e3e <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002db2:	f04f 0201 	mov.w	r2, #1
 8002db6:	f04f 0300 	mov.w	r3, #0
 8002dba:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dc4:	f107 0318 	add.w	r3, r7, #24
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f006 fcf1 	bl	80097b0 <HAL_RCCEx_PeriphCLKConfig>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8002dd4:	f7ff f9d0 	bl	8002178 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002dd8:	4b1c      	ldr	r3, [pc, #112]	; (8002e4c <HAL_UART_MspInit+0x164>)
 8002dda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002dde:	4a1b      	ldr	r2, [pc, #108]	; (8002e4c <HAL_UART_MspInit+0x164>)
 8002de0:	f043 0320 	orr.w	r3, r3, #32
 8002de4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002de8:	4b18      	ldr	r3, [pc, #96]	; (8002e4c <HAL_UART_MspInit+0x164>)
 8002dea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002dee:	f003 0320 	and.w	r3, r3, #32
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002df6:	4b15      	ldr	r3, [pc, #84]	; (8002e4c <HAL_UART_MspInit+0x164>)
 8002df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dfc:	4a13      	ldr	r2, [pc, #76]	; (8002e4c <HAL_UART_MspInit+0x164>)
 8002dfe:	f043 0304 	orr.w	r3, r3, #4
 8002e02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e06:	4b11      	ldr	r3, [pc, #68]	; (8002e4c <HAL_UART_MspInit+0x164>)
 8002e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	60bb      	str	r3, [r7, #8]
 8002e12:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e14:	23c0      	movs	r3, #192	; 0xc0
 8002e16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e20:	2300      	movs	r3, #0
 8002e22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e26:	2300      	movs	r3, #0
 8002e28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8002e2c:	2307      	movs	r3, #7
 8002e2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e32:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002e36:	4619      	mov	r1, r3
 8002e38:	4807      	ldr	r0, [pc, #28]	; (8002e58 <HAL_UART_MspInit+0x170>)
 8002e3a:	f003 fee5 	bl	8006c08 <HAL_GPIO_Init>
}
 8002e3e:	bf00      	nop
 8002e40:	37e8      	adds	r7, #232	; 0xe8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40004c00 	.word	0x40004c00
 8002e4c:	58024400 	.word	0x58024400
 8002e50:	58020400 	.word	0x58020400
 8002e54:	40011400 	.word	0x40011400
 8002e58:	58020800 	.word	0x58020800

08002e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e60:	e7fe      	b.n	8002e60 <NMI_Handler+0x4>

08002e62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e62:	b480      	push	{r7}
 8002e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e66:	e7fe      	b.n	8002e66 <HardFault_Handler+0x4>

08002e68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e6c:	e7fe      	b.n	8002e6c <MemManage_Handler+0x4>

08002e6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e72:	e7fe      	b.n	8002e72 <BusFault_Handler+0x4>

08002e74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e78:	e7fe      	b.n	8002e78 <UsageFault_Handler+0x4>

08002e7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e7e:	bf00      	nop
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e8c:	bf00      	nop
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e96:	b480      	push	{r7}
 8002e98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e9a:	bf00      	nop
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ea8:	f000 f9b0 	bl	800320c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002eac:	bf00      	nop
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8002eb4:	4802      	ldr	r0, [pc, #8]	; (8002ec0 <DMA1_Stream0_IRQHandler+0x10>)
 8002eb6:	f002 f9dd 	bl	8005274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002eba:	bf00      	nop
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	240008f0 	.word	0x240008f0

08002ec4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8002ec8:	4802      	ldr	r0, [pc, #8]	; (8002ed4 <DMA1_Stream1_IRQHandler+0x10>)
 8002eca:	f002 f9d3 	bl	8005274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002ece:	bf00      	nop
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	24000788 	.word	0x24000788

08002ed8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8002edc:	4802      	ldr	r0, [pc, #8]	; (8002ee8 <DMA1_Stream2_IRQHandler+0x10>)
 8002ede:	f002 f9c9 	bl	8005274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002ee2:	bf00      	nop
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	24000968 	.word	0x24000968

08002eec <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8002ef0:	4802      	ldr	r0, [pc, #8]	; (8002efc <DMA1_Stream3_IRQHandler+0x10>)
 8002ef2:	f002 f9bf 	bl	8005274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002ef6:	bf00      	nop
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	24000800 	.word	0x24000800

08002f00 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8002f04:	4802      	ldr	r0, [pc, #8]	; (8002f10 <DMA1_Stream4_IRQHandler+0x10>)
 8002f06:	f002 f9b5 	bl	8005274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002f0a:	bf00      	nop
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	24000878 	.word	0x24000878

08002f14 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002f18:	4802      	ldr	r0, [pc, #8]	; (8002f24 <DMA1_Stream5_IRQHandler+0x10>)
 8002f1a:	f002 f9ab 	bl	8005274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002f1e:	bf00      	nop
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	24000260 	.word	0x24000260

08002f28 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002f2c:	4802      	ldr	r0, [pc, #8]	; (8002f38 <TIM4_IRQHandler+0x10>)
 8002f2e:	f00b fb95 	bl	800e65c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002f32:	bf00      	nop
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	240006f0 	.word	0x240006f0

08002f3c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002f40:	4802      	ldr	r0, [pc, #8]	; (8002f4c <DMA2_Stream7_IRQHandler+0x10>)
 8002f42:	f002 f997 	bl	8005274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002f46:	bf00      	nop
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	240002d8 	.word	0x240002d8

08002f50 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002f54:	4802      	ldr	r0, [pc, #8]	; (8002f60 <OTG_HS_IRQHandler+0x10>)
 8002f56:	f004 fab1 	bl	80074bc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002f5a:	bf00      	nop
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	2400200c 	.word	0x2400200c

08002f64 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8002f68:	4802      	ldr	r0, [pc, #8]	; (8002f74 <SDMMC2_IRQHandler+0x10>)
 8002f6a:	f009 fa77 	bl	800c45c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 8002f6e:	bf00      	nop
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	24000444 	.word	0x24000444

08002f78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f80:	4a14      	ldr	r2, [pc, #80]	; (8002fd4 <_sbrk+0x5c>)
 8002f82:	4b15      	ldr	r3, [pc, #84]	; (8002fd8 <_sbrk+0x60>)
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f8c:	4b13      	ldr	r3, [pc, #76]	; (8002fdc <_sbrk+0x64>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d102      	bne.n	8002f9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f94:	4b11      	ldr	r3, [pc, #68]	; (8002fdc <_sbrk+0x64>)
 8002f96:	4a12      	ldr	r2, [pc, #72]	; (8002fe0 <_sbrk+0x68>)
 8002f98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f9a:	4b10      	ldr	r3, [pc, #64]	; (8002fdc <_sbrk+0x64>)
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d207      	bcs.n	8002fb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fa8:	f012 fc94 	bl	80158d4 <__errno>
 8002fac:	4603      	mov	r3, r0
 8002fae:	220c      	movs	r2, #12
 8002fb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fb6:	e009      	b.n	8002fcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fb8:	4b08      	ldr	r3, [pc, #32]	; (8002fdc <_sbrk+0x64>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fbe:	4b07      	ldr	r3, [pc, #28]	; (8002fdc <_sbrk+0x64>)
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	4a05      	ldr	r2, [pc, #20]	; (8002fdc <_sbrk+0x64>)
 8002fc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fca:	68fb      	ldr	r3, [r7, #12]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3718      	adds	r7, #24
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	24050000 	.word	0x24050000
 8002fd8:	00000800 	.word	0x00000800
 8002fdc:	24000b08 	.word	0x24000b08
 8002fe0:	24002748 	.word	0x24002748

08002fe4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002fe8:	4b32      	ldr	r3, [pc, #200]	; (80030b4 <SystemInit+0xd0>)
 8002fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fee:	4a31      	ldr	r2, [pc, #196]	; (80030b4 <SystemInit+0xd0>)
 8002ff0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ff4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002ff8:	4b2f      	ldr	r3, [pc, #188]	; (80030b8 <SystemInit+0xd4>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 030f 	and.w	r3, r3, #15
 8003000:	2b06      	cmp	r3, #6
 8003002:	d807      	bhi.n	8003014 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003004:	4b2c      	ldr	r3, [pc, #176]	; (80030b8 <SystemInit+0xd4>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f023 030f 	bic.w	r3, r3, #15
 800300c:	4a2a      	ldr	r2, [pc, #168]	; (80030b8 <SystemInit+0xd4>)
 800300e:	f043 0307 	orr.w	r3, r3, #7
 8003012:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003014:	4b29      	ldr	r3, [pc, #164]	; (80030bc <SystemInit+0xd8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a28      	ldr	r2, [pc, #160]	; (80030bc <SystemInit+0xd8>)
 800301a:	f043 0301 	orr.w	r3, r3, #1
 800301e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003020:	4b26      	ldr	r3, [pc, #152]	; (80030bc <SystemInit+0xd8>)
 8003022:	2200      	movs	r2, #0
 8003024:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003026:	4b25      	ldr	r3, [pc, #148]	; (80030bc <SystemInit+0xd8>)
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	4924      	ldr	r1, [pc, #144]	; (80030bc <SystemInit+0xd8>)
 800302c:	4b24      	ldr	r3, [pc, #144]	; (80030c0 <SystemInit+0xdc>)
 800302e:	4013      	ands	r3, r2
 8003030:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003032:	4b21      	ldr	r3, [pc, #132]	; (80030b8 <SystemInit+0xd4>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0308 	and.w	r3, r3, #8
 800303a:	2b00      	cmp	r3, #0
 800303c:	d007      	beq.n	800304e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800303e:	4b1e      	ldr	r3, [pc, #120]	; (80030b8 <SystemInit+0xd4>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f023 030f 	bic.w	r3, r3, #15
 8003046:	4a1c      	ldr	r2, [pc, #112]	; (80030b8 <SystemInit+0xd4>)
 8003048:	f043 0307 	orr.w	r3, r3, #7
 800304c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800304e:	4b1b      	ldr	r3, [pc, #108]	; (80030bc <SystemInit+0xd8>)
 8003050:	2200      	movs	r2, #0
 8003052:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003054:	4b19      	ldr	r3, [pc, #100]	; (80030bc <SystemInit+0xd8>)
 8003056:	2200      	movs	r2, #0
 8003058:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800305a:	4b18      	ldr	r3, [pc, #96]	; (80030bc <SystemInit+0xd8>)
 800305c:	2200      	movs	r2, #0
 800305e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003060:	4b16      	ldr	r3, [pc, #88]	; (80030bc <SystemInit+0xd8>)
 8003062:	4a18      	ldr	r2, [pc, #96]	; (80030c4 <SystemInit+0xe0>)
 8003064:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003066:	4b15      	ldr	r3, [pc, #84]	; (80030bc <SystemInit+0xd8>)
 8003068:	4a17      	ldr	r2, [pc, #92]	; (80030c8 <SystemInit+0xe4>)
 800306a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800306c:	4b13      	ldr	r3, [pc, #76]	; (80030bc <SystemInit+0xd8>)
 800306e:	4a17      	ldr	r2, [pc, #92]	; (80030cc <SystemInit+0xe8>)
 8003070:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003072:	4b12      	ldr	r3, [pc, #72]	; (80030bc <SystemInit+0xd8>)
 8003074:	2200      	movs	r2, #0
 8003076:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003078:	4b10      	ldr	r3, [pc, #64]	; (80030bc <SystemInit+0xd8>)
 800307a:	4a14      	ldr	r2, [pc, #80]	; (80030cc <SystemInit+0xe8>)
 800307c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800307e:	4b0f      	ldr	r3, [pc, #60]	; (80030bc <SystemInit+0xd8>)
 8003080:	2200      	movs	r2, #0
 8003082:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003084:	4b0d      	ldr	r3, [pc, #52]	; (80030bc <SystemInit+0xd8>)
 8003086:	4a11      	ldr	r2, [pc, #68]	; (80030cc <SystemInit+0xe8>)
 8003088:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800308a:	4b0c      	ldr	r3, [pc, #48]	; (80030bc <SystemInit+0xd8>)
 800308c:	2200      	movs	r2, #0
 800308e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003090:	4b0a      	ldr	r3, [pc, #40]	; (80030bc <SystemInit+0xd8>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a09      	ldr	r2, [pc, #36]	; (80030bc <SystemInit+0xd8>)
 8003096:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800309a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800309c:	4b07      	ldr	r3, [pc, #28]	; (80030bc <SystemInit+0xd8>)
 800309e:	2200      	movs	r2, #0
 80030a0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80030a2:	4b0b      	ldr	r3, [pc, #44]	; (80030d0 <SystemInit+0xec>)
 80030a4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80030a8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80030aa:	bf00      	nop
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	e000ed00 	.word	0xe000ed00
 80030b8:	52002000 	.word	0x52002000
 80030bc:	58024400 	.word	0x58024400
 80030c0:	eaf6ed7f 	.word	0xeaf6ed7f
 80030c4:	02020200 	.word	0x02020200
 80030c8:	01ff0000 	.word	0x01ff0000
 80030cc:	01010280 	.word	0x01010280
 80030d0:	52004000 	.word	0x52004000

080030d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80030d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800310c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80030d8:	f7ff ff84 	bl	8002fe4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030dc:	480c      	ldr	r0, [pc, #48]	; (8003110 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80030de:	490d      	ldr	r1, [pc, #52]	; (8003114 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80030e0:	4a0d      	ldr	r2, [pc, #52]	; (8003118 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80030e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030e4:	e002      	b.n	80030ec <LoopCopyDataInit>

080030e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030ea:	3304      	adds	r3, #4

080030ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030f0:	d3f9      	bcc.n	80030e6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030f2:	4a0a      	ldr	r2, [pc, #40]	; (800311c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80030f4:	4c0a      	ldr	r4, [pc, #40]	; (8003120 <LoopFillZerobss+0x22>)
  movs r3, #0
 80030f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030f8:	e001      	b.n	80030fe <LoopFillZerobss>

080030fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030fc:	3204      	adds	r2, #4

080030fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003100:	d3fb      	bcc.n	80030fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003102:	f012 fbed 	bl	80158e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003106:	f7fd fea7 	bl	8000e58 <main>
  bx  lr
 800310a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800310c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003110:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003114:	24000164 	.word	0x24000164
  ldr r2, =_sidata
 8003118:	0801644c 	.word	0x0801644c
  ldr r2, =_sbss
 800311c:	24000164 	.word	0x24000164
  ldr r4, =_ebss
 8003120:	24002748 	.word	0x24002748

08003124 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003124:	e7fe      	b.n	8003124 <ADC3_IRQHandler>
	...

08003128 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800312e:	2003      	movs	r0, #3
 8003130:	f001 fd06 	bl	8004b40 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003134:	f006 f966 	bl	8009404 <HAL_RCC_GetSysClockFreq>
 8003138:	4602      	mov	r2, r0
 800313a:	4b15      	ldr	r3, [pc, #84]	; (8003190 <HAL_Init+0x68>)
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	0a1b      	lsrs	r3, r3, #8
 8003140:	f003 030f 	and.w	r3, r3, #15
 8003144:	4913      	ldr	r1, [pc, #76]	; (8003194 <HAL_Init+0x6c>)
 8003146:	5ccb      	ldrb	r3, [r1, r3]
 8003148:	f003 031f 	and.w	r3, r3, #31
 800314c:	fa22 f303 	lsr.w	r3, r2, r3
 8003150:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003152:	4b0f      	ldr	r3, [pc, #60]	; (8003190 <HAL_Init+0x68>)
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	4a0e      	ldr	r2, [pc, #56]	; (8003194 <HAL_Init+0x6c>)
 800315c:	5cd3      	ldrb	r3, [r2, r3]
 800315e:	f003 031f 	and.w	r3, r3, #31
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	fa22 f303 	lsr.w	r3, r2, r3
 8003168:	4a0b      	ldr	r2, [pc, #44]	; (8003198 <HAL_Init+0x70>)
 800316a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800316c:	4a0b      	ldr	r2, [pc, #44]	; (800319c <HAL_Init+0x74>)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003172:	200f      	movs	r0, #15
 8003174:	f000 f814 	bl	80031a0 <HAL_InitTick>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e002      	b.n	8003188 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003182:	f7fe ffff 	bl	8002184 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3708      	adds	r7, #8
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	58024400 	.word	0x58024400
 8003194:	080163b4 	.word	0x080163b4
 8003198:	24000004 	.word	0x24000004
 800319c:	24000000 	.word	0x24000000

080031a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80031a8:	4b15      	ldr	r3, [pc, #84]	; (8003200 <HAL_InitTick+0x60>)
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d101      	bne.n	80031b4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e021      	b.n	80031f8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80031b4:	4b13      	ldr	r3, [pc, #76]	; (8003204 <HAL_InitTick+0x64>)
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	4b11      	ldr	r3, [pc, #68]	; (8003200 <HAL_InitTick+0x60>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	4619      	mov	r1, r3
 80031be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80031c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ca:	4618      	mov	r0, r3
 80031cc:	f001 fceb 	bl	8004ba6 <HAL_SYSTICK_Config>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e00e      	b.n	80031f8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b0f      	cmp	r3, #15
 80031de:	d80a      	bhi.n	80031f6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031e0:	2200      	movs	r2, #0
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	f04f 30ff 	mov.w	r0, #4294967295
 80031e8:	f001 fcb5 	bl	8004b56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031ec:	4a06      	ldr	r2, [pc, #24]	; (8003208 <HAL_InitTick+0x68>)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	e000      	b.n	80031f8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	2400000c 	.word	0x2400000c
 8003204:	24000000 	.word	0x24000000
 8003208:	24000008 	.word	0x24000008

0800320c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003210:	4b06      	ldr	r3, [pc, #24]	; (800322c <HAL_IncTick+0x20>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	461a      	mov	r2, r3
 8003216:	4b06      	ldr	r3, [pc, #24]	; (8003230 <HAL_IncTick+0x24>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4413      	add	r3, r2
 800321c:	4a04      	ldr	r2, [pc, #16]	; (8003230 <HAL_IncTick+0x24>)
 800321e:	6013      	str	r3, [r2, #0]
}
 8003220:	bf00      	nop
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	2400000c 	.word	0x2400000c
 8003230:	24000b0c 	.word	0x24000b0c

08003234 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  return uwTick;
 8003238:	4b03      	ldr	r3, [pc, #12]	; (8003248 <HAL_GetTick+0x14>)
 800323a:	681b      	ldr	r3, [r3, #0]
}
 800323c:	4618      	mov	r0, r3
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	24000b0c 	.word	0x24000b0c

0800324c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003254:	f7ff ffee 	bl	8003234 <HAL_GetTick>
 8003258:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003264:	d005      	beq.n	8003272 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003266:	4b0a      	ldr	r3, [pc, #40]	; (8003290 <HAL_Delay+0x44>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	461a      	mov	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4413      	add	r3, r2
 8003270:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003272:	bf00      	nop
 8003274:	f7ff ffde 	bl	8003234 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	429a      	cmp	r2, r3
 8003282:	d8f7      	bhi.n	8003274 <HAL_Delay+0x28>
  {
  }
}
 8003284:	bf00      	nop
 8003286:	bf00      	nop
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	2400000c 	.word	0x2400000c

08003294 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800329e:	4b07      	ldr	r3, [pc, #28]	; (80032bc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	43db      	mvns	r3, r3
 80032a6:	401a      	ands	r2, r3
 80032a8:	4904      	ldr	r1, [pc, #16]	; (80032bc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	604b      	str	r3, [r1, #4]
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	58000400 	.word	0x58000400

080032c0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	431a      	orrs	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	609a      	str	r2, [r3, #8]
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
 80032ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	431a      	orrs	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	609a      	str	r2, [r3, #8]
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800331c:	4618      	mov	r0, r3
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003328:	b480      	push	{r7}
 800332a:	b087      	sub	sp, #28
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
 8003334:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	3360      	adds	r3, #96	; 0x60
 800333a:	461a      	mov	r2, r3
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	4a10      	ldr	r2, [pc, #64]	; (8003388 <LL_ADC_SetOffset+0x60>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d10b      	bne.n	8003364 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	4313      	orrs	r3, r2
 800335a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003362:	e00b      	b.n	800337c <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	430b      	orrs	r3, r1
 8003376:	431a      	orrs	r2, r3
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	601a      	str	r2, [r3, #0]
}
 800337c:	bf00      	nop
 800337e:	371c      	adds	r7, #28
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	58026000 	.word	0x58026000

0800338c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	3360      	adds	r3, #96	; 0x60
 800339a:	461a      	mov	r2, r3
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4413      	add	r3, r2
 80033a2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	f003 031f 	and.w	r3, r3, #31
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	fa01 f303 	lsl.w	r3, r1, r3
 80033d8:	431a      	orrs	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	611a      	str	r2, [r3, #16]
}
 80033de:	bf00      	nop
 80033e0:	3714      	adds	r7, #20
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
	...

080033ec <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b087      	sub	sp, #28
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	4a0c      	ldr	r2, [pc, #48]	; (800342c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d00e      	beq.n	800341e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	3360      	adds	r3, #96	; 0x60
 8003404:	461a      	mov	r2, r3
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	431a      	orrs	r2, r3
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	601a      	str	r2, [r3, #0]
  }
}
 800341e:	bf00      	nop
 8003420:	371c      	adds	r7, #28
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	58026000 	.word	0x58026000

08003430 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003430:	b480      	push	{r7}
 8003432:	b087      	sub	sp, #28
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	4a0c      	ldr	r2, [pc, #48]	; (8003470 <LL_ADC_SetOffsetSaturation+0x40>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d10e      	bne.n	8003462 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	3360      	adds	r3, #96	; 0x60
 8003448:	461a      	mov	r2, r3
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4413      	add	r3, r2
 8003450:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	431a      	orrs	r2, r3
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003462:	bf00      	nop
 8003464:	371c      	adds	r7, #28
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	58026000 	.word	0x58026000

08003474 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003474:	b480      	push	{r7}
 8003476:	b087      	sub	sp, #28
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	4a0c      	ldr	r2, [pc, #48]	; (80034b4 <LL_ADC_SetOffsetSign+0x40>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d10e      	bne.n	80034a6 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	3360      	adds	r3, #96	; 0x60
 800348c:	461a      	mov	r2, r3
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	431a      	orrs	r2, r3
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80034a6:	bf00      	nop
 80034a8:	371c      	adds	r7, #28
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	58026000 	.word	0x58026000

080034b8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b087      	sub	sp, #28
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	3360      	adds	r3, #96	; 0x60
 80034c8:	461a      	mov	r2, r3
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	4413      	add	r3, r2
 80034d0:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	4a0c      	ldr	r2, [pc, #48]	; (8003508 <LL_ADC_SetOffsetState+0x50>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d108      	bne.n	80034ec <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	431a      	orrs	r2, r3
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80034ea:	e007      	b.n	80034fc <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	431a      	orrs	r2, r3
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	601a      	str	r2, [r3, #0]
}
 80034fc:	bf00      	nop
 80034fe:	371c      	adds	r7, #28
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	58026000 	.word	0x58026000

0800350c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800350c:	b480      	push	{r7}
 800350e:	b087      	sub	sp, #28
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	3330      	adds	r3, #48	; 0x30
 800351c:	461a      	mov	r2, r3
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	0a1b      	lsrs	r3, r3, #8
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	f003 030c 	and.w	r3, r3, #12
 8003528:	4413      	add	r3, r2
 800352a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	f003 031f 	and.w	r3, r3, #31
 8003536:	211f      	movs	r1, #31
 8003538:	fa01 f303 	lsl.w	r3, r1, r3
 800353c:	43db      	mvns	r3, r3
 800353e:	401a      	ands	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	0e9b      	lsrs	r3, r3, #26
 8003544:	f003 011f 	and.w	r1, r3, #31
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	f003 031f 	and.w	r3, r3, #31
 800354e:	fa01 f303 	lsl.w	r3, r1, r3
 8003552:	431a      	orrs	r2, r3
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003558:	bf00      	nop
 800355a:	371c      	adds	r7, #28
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003564:	b480      	push	{r7}
 8003566:	b087      	sub	sp, #28
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	3314      	adds	r3, #20
 8003574:	461a      	mov	r2, r3
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	0e5b      	lsrs	r3, r3, #25
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	4413      	add	r3, r2
 8003582:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	0d1b      	lsrs	r3, r3, #20
 800358c:	f003 031f 	and.w	r3, r3, #31
 8003590:	2107      	movs	r1, #7
 8003592:	fa01 f303 	lsl.w	r3, r1, r3
 8003596:	43db      	mvns	r3, r3
 8003598:	401a      	ands	r2, r3
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	0d1b      	lsrs	r3, r3, #20
 800359e:	f003 031f 	and.w	r3, r3, #31
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	fa01 f303 	lsl.w	r3, r1, r3
 80035a8:	431a      	orrs	r2, r3
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80035ae:	bf00      	nop
 80035b0:	371c      	adds	r7, #28
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
	...

080035bc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4a1a      	ldr	r2, [pc, #104]	; (8003634 <LL_ADC_SetChannelSingleDiff+0x78>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d115      	bne.n	80035fc <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035dc:	43db      	mvns	r3, r3
 80035de:	401a      	ands	r2, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f003 0318 	and.w	r3, r3, #24
 80035e6:	4914      	ldr	r1, [pc, #80]	; (8003638 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80035e8:	40d9      	lsrs	r1, r3
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	400b      	ands	r3, r1
 80035ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035f2:	431a      	orrs	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80035fa:	e014      	b.n	8003626 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003608:	43db      	mvns	r3, r3
 800360a:	401a      	ands	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f003 0318 	and.w	r3, r3, #24
 8003612:	4909      	ldr	r1, [pc, #36]	; (8003638 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003614:	40d9      	lsrs	r1, r3
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	400b      	ands	r3, r1
 800361a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800361e:	431a      	orrs	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003626:	bf00      	nop
 8003628:	3714      	adds	r7, #20
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	58026000 	.word	0x58026000
 8003638:	000fffff 	.word	0x000fffff

0800363c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	4b04      	ldr	r3, [pc, #16]	; (800365c <LL_ADC_DisableDeepPowerDown+0x20>)
 800364a:	4013      	ands	r3, r2
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	6093      	str	r3, [r2, #8]
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	5fffffc0 	.word	0x5fffffc0

08003660 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003670:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003674:	d101      	bne.n	800367a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003676:	2301      	movs	r3, #1
 8003678:	e000      	b.n	800367c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	4b05      	ldr	r3, [pc, #20]	; (80036ac <LL_ADC_EnableInternalRegulator+0x24>)
 8003696:	4013      	ands	r3, r2
 8003698:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	6fffffc0 	.word	0x6fffffc0

080036b0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036c4:	d101      	bne.n	80036ca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80036c6:	2301      	movs	r3, #1
 80036c8:	e000      	b.n	80036cc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80036ca:	2300      	movs	r3, #0
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d101      	bne.n	80036f0 <LL_ADC_IsEnabled+0x18>
 80036ec:	2301      	movs	r3, #1
 80036ee:	e000      	b.n	80036f2 <LL_ADC_IsEnabled+0x1a>
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80036fe:	b480      	push	{r7}
 8003700:	b083      	sub	sp, #12
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 0304 	and.w	r3, r3, #4
 800370e:	2b04      	cmp	r3, #4
 8003710:	d101      	bne.n	8003716 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003712:	2301      	movs	r3, #1
 8003714:	e000      	b.n	8003718 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f003 0308 	and.w	r3, r3, #8
 8003734:	2b08      	cmp	r3, #8
 8003736:	d101      	bne.n	800373c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003738:	2301      	movs	r3, #1
 800373a:	e000      	b.n	800373e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
	...

0800374c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800374c:	b590      	push	{r4, r7, lr}
 800374e:	b089      	sub	sp, #36	; 0x24
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003754:	2300      	movs	r3, #0
 8003756:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003758:	2300      	movs	r3, #0
 800375a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e1ee      	b.n	8003b44 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003770:	2b00      	cmp	r3, #0
 8003772:	d109      	bne.n	8003788 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f7fe fd1f 	bl	80021b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4618      	mov	r0, r3
 800378e:	f7ff ff67 	bl	8003660 <LL_ADC_IsDeepPowerDownEnabled>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d004      	beq.n	80037a2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff ff4d 	bl	800363c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7ff ff82 	bl	80036b0 <LL_ADC_IsInternalRegulatorEnabled>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d114      	bne.n	80037dc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7ff ff66 	bl	8003688 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037bc:	4b8e      	ldr	r3, [pc, #568]	; (80039f8 <HAL_ADC_Init+0x2ac>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	099b      	lsrs	r3, r3, #6
 80037c2:	4a8e      	ldr	r2, [pc, #568]	; (80039fc <HAL_ADC_Init+0x2b0>)
 80037c4:	fba2 2303 	umull	r2, r3, r2, r3
 80037c8:	099b      	lsrs	r3, r3, #6
 80037ca:	3301      	adds	r3, #1
 80037cc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80037ce:	e002      	b.n	80037d6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	3b01      	subs	r3, #1
 80037d4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1f9      	bne.n	80037d0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7ff ff65 	bl	80036b0 <LL_ADC_IsInternalRegulatorEnabled>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10d      	bne.n	8003808 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037f0:	f043 0210 	orr.w	r2, r3, #16
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037fc:	f043 0201 	orr.w	r2, r3, #1
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4618      	mov	r0, r3
 800380e:	f7ff ff76 	bl	80036fe <LL_ADC_REG_IsConversionOngoing>
 8003812:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003818:	f003 0310 	and.w	r3, r3, #16
 800381c:	2b00      	cmp	r3, #0
 800381e:	f040 8188 	bne.w	8003b32 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	2b00      	cmp	r3, #0
 8003826:	f040 8184 	bne.w	8003b32 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800382e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003832:	f043 0202 	orr.w	r2, r3, #2
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4618      	mov	r0, r3
 8003840:	f7ff ff4a 	bl	80036d8 <LL_ADC_IsEnabled>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d136      	bne.n	80038b8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a6c      	ldr	r2, [pc, #432]	; (8003a00 <HAL_ADC_Init+0x2b4>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d004      	beq.n	800385e <HAL_ADC_Init+0x112>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a6a      	ldr	r2, [pc, #424]	; (8003a04 <HAL_ADC_Init+0x2b8>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d10e      	bne.n	800387c <HAL_ADC_Init+0x130>
 800385e:	4868      	ldr	r0, [pc, #416]	; (8003a00 <HAL_ADC_Init+0x2b4>)
 8003860:	f7ff ff3a 	bl	80036d8 <LL_ADC_IsEnabled>
 8003864:	4604      	mov	r4, r0
 8003866:	4867      	ldr	r0, [pc, #412]	; (8003a04 <HAL_ADC_Init+0x2b8>)
 8003868:	f7ff ff36 	bl	80036d8 <LL_ADC_IsEnabled>
 800386c:	4603      	mov	r3, r0
 800386e:	4323      	orrs	r3, r4
 8003870:	2b00      	cmp	r3, #0
 8003872:	bf0c      	ite	eq
 8003874:	2301      	moveq	r3, #1
 8003876:	2300      	movne	r3, #0
 8003878:	b2db      	uxtb	r3, r3
 800387a:	e008      	b.n	800388e <HAL_ADC_Init+0x142>
 800387c:	4862      	ldr	r0, [pc, #392]	; (8003a08 <HAL_ADC_Init+0x2bc>)
 800387e:	f7ff ff2b 	bl	80036d8 <LL_ADC_IsEnabled>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	bf0c      	ite	eq
 8003888:	2301      	moveq	r3, #1
 800388a:	2300      	movne	r3, #0
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d012      	beq.n	80038b8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a5a      	ldr	r2, [pc, #360]	; (8003a00 <HAL_ADC_Init+0x2b4>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d004      	beq.n	80038a6 <HAL_ADC_Init+0x15a>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a58      	ldr	r2, [pc, #352]	; (8003a04 <HAL_ADC_Init+0x2b8>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d101      	bne.n	80038aa <HAL_ADC_Init+0x15e>
 80038a6:	4a59      	ldr	r2, [pc, #356]	; (8003a0c <HAL_ADC_Init+0x2c0>)
 80038a8:	e000      	b.n	80038ac <HAL_ADC_Init+0x160>
 80038aa:	4a59      	ldr	r2, [pc, #356]	; (8003a10 <HAL_ADC_Init+0x2c4>)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	4619      	mov	r1, r3
 80038b2:	4610      	mov	r0, r2
 80038b4:	f7ff fd04 	bl	80032c0 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a52      	ldr	r2, [pc, #328]	; (8003a08 <HAL_ADC_Init+0x2bc>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d129      	bne.n	8003916 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	7e5b      	ldrb	r3, [r3, #25]
 80038c6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80038cc:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80038d2:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	2b08      	cmp	r3, #8
 80038da:	d013      	beq.n	8003904 <HAL_ADC_Init+0x1b8>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	2b0c      	cmp	r3, #12
 80038e2:	d00d      	beq.n	8003900 <HAL_ADC_Init+0x1b4>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	2b1c      	cmp	r3, #28
 80038ea:	d007      	beq.n	80038fc <HAL_ADC_Init+0x1b0>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	2b18      	cmp	r3, #24
 80038f2:	d101      	bne.n	80038f8 <HAL_ADC_Init+0x1ac>
 80038f4:	2318      	movs	r3, #24
 80038f6:	e006      	b.n	8003906 <HAL_ADC_Init+0x1ba>
 80038f8:	2300      	movs	r3, #0
 80038fa:	e004      	b.n	8003906 <HAL_ADC_Init+0x1ba>
 80038fc:	2310      	movs	r3, #16
 80038fe:	e002      	b.n	8003906 <HAL_ADC_Init+0x1ba>
 8003900:	2308      	movs	r3, #8
 8003902:	e000      	b.n	8003906 <HAL_ADC_Init+0x1ba>
 8003904:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003906:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800390e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003910:	4313      	orrs	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
 8003914:	e00e      	b.n	8003934 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	7e5b      	ldrb	r3, [r3, #25]
 800391a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003920:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003926:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800392e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003930:	4313      	orrs	r3, r2
 8003932:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 3020 	ldrb.w	r3, [r3, #32]
 800393a:	2b01      	cmp	r3, #1
 800393c:	d106      	bne.n	800394c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003942:	3b01      	subs	r3, #1
 8003944:	045b      	lsls	r3, r3, #17
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	4313      	orrs	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003950:	2b00      	cmp	r3, #0
 8003952:	d009      	beq.n	8003968 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003958:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003960:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	4313      	orrs	r3, r2
 8003966:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a26      	ldr	r2, [pc, #152]	; (8003a08 <HAL_ADC_Init+0x2bc>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d115      	bne.n	800399e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68da      	ldr	r2, [r3, #12]
 8003978:	4b26      	ldr	r3, [pc, #152]	; (8003a14 <HAL_ADC_Init+0x2c8>)
 800397a:	4013      	ands	r3, r2
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6812      	ldr	r2, [r2, #0]
 8003980:	69b9      	ldr	r1, [r7, #24]
 8003982:	430b      	orrs	r3, r1
 8003984:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	430a      	orrs	r2, r1
 800399a:	611a      	str	r2, [r3, #16]
 800399c:	e009      	b.n	80039b2 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	68da      	ldr	r2, [r3, #12]
 80039a4:	4b1c      	ldr	r3, [pc, #112]	; (8003a18 <HAL_ADC_Init+0x2cc>)
 80039a6:	4013      	ands	r3, r2
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6812      	ldr	r2, [r2, #0]
 80039ac:	69b9      	ldr	r1, [r7, #24]
 80039ae:	430b      	orrs	r3, r1
 80039b0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7ff fea1 	bl	80036fe <LL_ADC_REG_IsConversionOngoing>
 80039bc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7ff feae 	bl	8003724 <LL_ADC_INJ_IsConversionOngoing>
 80039c8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f040 808e 	bne.w	8003aee <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f040 808a 	bne.w	8003aee <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a0a      	ldr	r2, [pc, #40]	; (8003a08 <HAL_ADC_Init+0x2bc>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d11b      	bne.n	8003a1c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	7e1b      	ldrb	r3, [r3, #24]
 80039e8:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80039f0:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80039f2:	4313      	orrs	r3, r2
 80039f4:	61bb      	str	r3, [r7, #24]
 80039f6:	e018      	b.n	8003a2a <HAL_ADC_Init+0x2de>
 80039f8:	24000000 	.word	0x24000000
 80039fc:	053e2d63 	.word	0x053e2d63
 8003a00:	40022000 	.word	0x40022000
 8003a04:	40022100 	.word	0x40022100
 8003a08:	58026000 	.word	0x58026000
 8003a0c:	40022300 	.word	0x40022300
 8003a10:	58026300 	.word	0x58026300
 8003a14:	fff04007 	.word	0xfff04007
 8003a18:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	7e1b      	ldrb	r3, [r3, #24]
 8003a20:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8003a26:	4313      	orrs	r3, r2
 8003a28:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68da      	ldr	r2, [r3, #12]
 8003a30:	4b46      	ldr	r3, [pc, #280]	; (8003b4c <HAL_ADC_Init+0x400>)
 8003a32:	4013      	ands	r3, r2
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6812      	ldr	r2, [r2, #0]
 8003a38:	69b9      	ldr	r1, [r7, #24]
 8003a3a:	430b      	orrs	r3, r1
 8003a3c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d137      	bne.n	8003ab8 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a3f      	ldr	r2, [pc, #252]	; (8003b50 <HAL_ADC_Init+0x404>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d116      	bne.n	8003a86 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	691a      	ldr	r2, [r3, #16]
 8003a5e:	4b3d      	ldr	r3, [pc, #244]	; (8003b54 <HAL_ADC_Init+0x408>)
 8003a60:	4013      	ands	r3, r2
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003a6a:	4311      	orrs	r1, r2
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a70:	4311      	orrs	r1, r2
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003a76:	430a      	orrs	r2, r1
 8003a78:	431a      	orrs	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f042 0201 	orr.w	r2, r2, #1
 8003a82:	611a      	str	r2, [r3, #16]
 8003a84:	e020      	b.n	8003ac8 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	691a      	ldr	r2, [r3, #16]
 8003a8c:	4b32      	ldr	r3, [pc, #200]	; (8003b58 <HAL_ADC_Init+0x40c>)
 8003a8e:	4013      	ands	r3, r2
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003a94:	3a01      	subs	r2, #1
 8003a96:	0411      	lsls	r1, r2, #16
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003a9c:	4311      	orrs	r1, r2
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003aa2:	4311      	orrs	r1, r2
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f042 0201 	orr.w	r2, r2, #1
 8003ab4:	611a      	str	r2, [r3, #16]
 8003ab6:	e007      	b.n	8003ac8 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	691a      	ldr	r2, [r3, #16]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0201 	bic.w	r2, r2, #1
 8003ac6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a1b      	ldr	r2, [pc, #108]	; (8003b50 <HAL_ADC_Init+0x404>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d002      	beq.n	8003aee <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 fd63 	bl	80045b4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d10c      	bne.n	8003b10 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afc:	f023 010f 	bic.w	r1, r3, #15
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	69db      	ldr	r3, [r3, #28]
 8003b04:	1e5a      	subs	r2, r3, #1
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	631a      	str	r2, [r3, #48]	; 0x30
 8003b0e:	e007      	b.n	8003b20 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 020f 	bic.w	r2, r2, #15
 8003b1e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b24:	f023 0303 	bic.w	r3, r3, #3
 8003b28:	f043 0201 	orr.w	r2, r3, #1
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	661a      	str	r2, [r3, #96]	; 0x60
 8003b30:	e007      	b.n	8003b42 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b36:	f043 0210 	orr.w	r2, r3, #16
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b42:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3724      	adds	r7, #36	; 0x24
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd90      	pop	{r4, r7, pc}
 8003b4c:	ffffbffc 	.word	0xffffbffc
 8003b50:	58026000 	.word	0x58026000
 8003b54:	fc00f81f 	.word	0xfc00f81f
 8003b58:	fc00f81e 	.word	0xfc00f81e

08003b5c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003b5c:	b590      	push	{r4, r7, lr}
 8003b5e:	b0b9      	sub	sp, #228	; 0xe4
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b66:	2300      	movs	r3, #0
 8003b68:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b76:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	4aa9      	ldr	r2, [pc, #676]	; (8003e24 <HAL_ADC_ConfigChannel+0x2c8>)
 8003b7e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d102      	bne.n	8003b90 <HAL_ADC_ConfigChannel+0x34>
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	f000 bcfa 	b.w	8004584 <HAL_ADC_ConfigChannel+0xa28>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7ff fdae 	bl	80036fe <LL_ADC_REG_IsConversionOngoing>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f040 84de 	bne.w	8004566 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a9e      	ldr	r2, [pc, #632]	; (8003e28 <HAL_ADC_ConfigChannel+0x2cc>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d033      	beq.n	8003c1c <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d108      	bne.n	8003bd2 <HAL_ADC_ConfigChannel+0x76>
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	0e9b      	lsrs	r3, r3, #26
 8003bc6:	f003 031f 	and.w	r3, r3, #31
 8003bca:	2201      	movs	r2, #1
 8003bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd0:	e01d      	b.n	8003c0e <HAL_ADC_ConfigChannel+0xb2>
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003bde:	fa93 f3a3 	rbit	r3, r3
 8003be2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003be6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003bea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003bee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8003bf6:	2320      	movs	r3, #32
 8003bf8:	e004      	b.n	8003c04 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8003bfa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003bfe:	fab3 f383 	clz	r3, r3
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	f003 031f 	and.w	r3, r3, #31
 8003c08:	2201      	movs	r2, #1
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6812      	ldr	r2, [r2, #0]
 8003c12:	69d1      	ldr	r1, [r2, #28]
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	6812      	ldr	r2, [r2, #0]
 8003c18:	430b      	orrs	r3, r1
 8003c1a:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6818      	ldr	r0, [r3, #0]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	6859      	ldr	r1, [r3, #4]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	461a      	mov	r2, r3
 8003c2a:	f7ff fc6f 	bl	800350c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7ff fd63 	bl	80036fe <LL_ADC_REG_IsConversionOngoing>
 8003c38:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7ff fd6f 	bl	8003724 <LL_ADC_INJ_IsConversionOngoing>
 8003c46:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f040 8270 	bne.w	8004134 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c54:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f040 826b 	bne.w	8004134 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6818      	ldr	r0, [r3, #0]
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	6819      	ldr	r1, [r3, #0]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	f7ff fc7a 	bl	8003564 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a6c      	ldr	r2, [pc, #432]	; (8003e28 <HAL_ADC_ConfigChannel+0x2cc>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d10d      	bne.n	8003c96 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	695a      	ldr	r2, [r3, #20]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	08db      	lsrs	r3, r3, #3
 8003c86:	f003 0303 	and.w	r3, r3, #3
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003c94:	e032      	b.n	8003cfc <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003c96:	4b65      	ldr	r3, [pc, #404]	; (8003e2c <HAL_ADC_ConfigChannel+0x2d0>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003c9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ca2:	d10b      	bne.n	8003cbc <HAL_ADC_ConfigChannel+0x160>
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	695a      	ldr	r2, [r3, #20]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	089b      	lsrs	r3, r3, #2
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	e01d      	b.n	8003cf8 <HAL_ADC_ConfigChannel+0x19c>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	f003 0310 	and.w	r3, r3, #16
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10b      	bne.n	8003ce2 <HAL_ADC_ConfigChannel+0x186>
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	695a      	ldr	r2, [r3, #20]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	089b      	lsrs	r3, r3, #2
 8003cd6:	f003 0307 	and.w	r3, r3, #7
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	e00a      	b.n	8003cf8 <HAL_ADC_ConfigChannel+0x19c>
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	695a      	ldr	r2, [r3, #20]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	089b      	lsrs	r3, r3, #2
 8003cee:	f003 0304 	and.w	r3, r3, #4
 8003cf2:	005b      	lsls	r3, r3, #1
 8003cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	2b04      	cmp	r3, #4
 8003d02:	d048      	beq.n	8003d96 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6818      	ldr	r0, [r3, #0]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	6919      	ldr	r1, [r3, #16]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d14:	f7ff fb08 	bl	8003328 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a42      	ldr	r2, [pc, #264]	; (8003e28 <HAL_ADC_ConfigChannel+0x2cc>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d119      	bne.n	8003d56 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6818      	ldr	r0, [r3, #0]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	6919      	ldr	r1, [r3, #16]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	461a      	mov	r2, r3
 8003d30:	f7ff fba0 	bl	8003474 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6818      	ldr	r0, [r3, #0]
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	6919      	ldr	r1, [r3, #16]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d102      	bne.n	8003d4c <HAL_ADC_ConfigChannel+0x1f0>
 8003d46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d4a:	e000      	b.n	8003d4e <HAL_ADC_ConfigChannel+0x1f2>
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	461a      	mov	r2, r3
 8003d50:	f7ff fb6e 	bl	8003430 <LL_ADC_SetOffsetSaturation>
 8003d54:	e1ee      	b.n	8004134 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6818      	ldr	r0, [r3, #0]
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	6919      	ldr	r1, [r3, #16]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d102      	bne.n	8003d6e <HAL_ADC_ConfigChannel+0x212>
 8003d68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003d6c:	e000      	b.n	8003d70 <HAL_ADC_ConfigChannel+0x214>
 8003d6e:	2300      	movs	r3, #0
 8003d70:	461a      	mov	r2, r3
 8003d72:	f7ff fb3b 	bl	80033ec <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6818      	ldr	r0, [r3, #0]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	6919      	ldr	r1, [r3, #16]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	7e1b      	ldrb	r3, [r3, #24]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d102      	bne.n	8003d8c <HAL_ADC_ConfigChannel+0x230>
 8003d86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d8a:	e000      	b.n	8003d8e <HAL_ADC_ConfigChannel+0x232>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	461a      	mov	r2, r3
 8003d90:	f7ff fb12 	bl	80033b8 <LL_ADC_SetDataRightShift>
 8003d94:	e1ce      	b.n	8004134 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a23      	ldr	r2, [pc, #140]	; (8003e28 <HAL_ADC_ConfigChannel+0x2cc>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	f040 8181 	bne.w	80040a4 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2100      	movs	r1, #0
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7ff faef 	bl	800338c <LL_ADC_GetOffsetChannel>
 8003dae:	4603      	mov	r3, r0
 8003db0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d10a      	bne.n	8003dce <HAL_ADC_ConfigChannel+0x272>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	f7ff fae4 	bl	800338c <LL_ADC_GetOffsetChannel>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	0e9b      	lsrs	r3, r3, #26
 8003dc8:	f003 021f 	and.w	r2, r3, #31
 8003dcc:	e01e      	b.n	8003e0c <HAL_ADC_ConfigChannel+0x2b0>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7ff fad9 	bl	800338c <LL_ADC_GetOffsetChannel>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003de4:	fa93 f3a3 	rbit	r3, r3
 8003de8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8003dec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003df0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8003df4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d101      	bne.n	8003e00 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8003dfc:	2320      	movs	r3, #32
 8003dfe:	e004      	b.n	8003e0a <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8003e00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003e04:	fab3 f383 	clz	r3, r3
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10b      	bne.n	8003e30 <HAL_ADC_ConfigChannel+0x2d4>
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	0e9b      	lsrs	r3, r3, #26
 8003e1e:	f003 031f 	and.w	r3, r3, #31
 8003e22:	e01e      	b.n	8003e62 <HAL_ADC_ConfigChannel+0x306>
 8003e24:	47ff0000 	.word	0x47ff0000
 8003e28:	58026000 	.word	0x58026000
 8003e2c:	5c001000 	.word	0x5c001000
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e38:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e3c:	fa93 f3a3 	rbit	r3, r3
 8003e40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003e44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003e4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d101      	bne.n	8003e58 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8003e54:	2320      	movs	r3, #32
 8003e56:	e004      	b.n	8003e62 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8003e58:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003e5c:	fab3 f383 	clz	r3, r3
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d106      	bne.n	8003e74 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	2100      	movs	r1, #0
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7ff fb22 	bl	80034b8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2101      	movs	r1, #1
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff fa86 	bl	800338c <LL_ADC_GetOffsetChannel>
 8003e80:	4603      	mov	r3, r0
 8003e82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10a      	bne.n	8003ea0 <HAL_ADC_ConfigChannel+0x344>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2101      	movs	r1, #1
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7ff fa7b 	bl	800338c <LL_ADC_GetOffsetChannel>
 8003e96:	4603      	mov	r3, r0
 8003e98:	0e9b      	lsrs	r3, r3, #26
 8003e9a:	f003 021f 	and.w	r2, r3, #31
 8003e9e:	e01e      	b.n	8003ede <HAL_ADC_ConfigChannel+0x382>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2101      	movs	r1, #1
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7ff fa70 	bl	800338c <LL_ADC_GetOffsetChannel>
 8003eac:	4603      	mov	r3, r0
 8003eae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003eb6:	fa93 f3a3 	rbit	r3, r3
 8003eba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003ebe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ec2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003ec6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8003ece:	2320      	movs	r3, #32
 8003ed0:	e004      	b.n	8003edc <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8003ed2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003ed6:	fab3 f383 	clz	r3, r3
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	461a      	mov	r2, r3
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d105      	bne.n	8003ef6 <HAL_ADC_ConfigChannel+0x39a>
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	0e9b      	lsrs	r3, r3, #26
 8003ef0:	f003 031f 	and.w	r3, r3, #31
 8003ef4:	e018      	b.n	8003f28 <HAL_ADC_ConfigChannel+0x3cc>
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003f02:	fa93 f3a3 	rbit	r3, r3
 8003f06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003f0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003f0e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003f12:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8003f1a:	2320      	movs	r3, #32
 8003f1c:	e004      	b.n	8003f28 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8003f1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f22:	fab3 f383 	clz	r3, r3
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d106      	bne.n	8003f3a <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2200      	movs	r2, #0
 8003f32:	2101      	movs	r1, #1
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7ff fabf 	bl	80034b8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2102      	movs	r1, #2
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7ff fa23 	bl	800338c <LL_ADC_GetOffsetChannel>
 8003f46:	4603      	mov	r3, r0
 8003f48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10a      	bne.n	8003f66 <HAL_ADC_ConfigChannel+0x40a>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2102      	movs	r1, #2
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7ff fa18 	bl	800338c <LL_ADC_GetOffsetChannel>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	0e9b      	lsrs	r3, r3, #26
 8003f60:	f003 021f 	and.w	r2, r3, #31
 8003f64:	e01e      	b.n	8003fa4 <HAL_ADC_ConfigChannel+0x448>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2102      	movs	r1, #2
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7ff fa0d 	bl	800338c <LL_ADC_GetOffsetChannel>
 8003f72:	4603      	mov	r3, r0
 8003f74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f7c:	fa93 f3a3 	rbit	r3, r3
 8003f80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003f84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003f8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d101      	bne.n	8003f98 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8003f94:	2320      	movs	r3, #32
 8003f96:	e004      	b.n	8003fa2 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8003f98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f9c:	fab3 f383 	clz	r3, r3
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d105      	bne.n	8003fbc <HAL_ADC_ConfigChannel+0x460>
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	0e9b      	lsrs	r3, r3, #26
 8003fb6:	f003 031f 	and.w	r3, r3, #31
 8003fba:	e014      	b.n	8003fe6 <HAL_ADC_ConfigChannel+0x48a>
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003fc4:	fa93 f3a3 	rbit	r3, r3
 8003fc8:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003fca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003fd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d101      	bne.n	8003fdc <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8003fd8:	2320      	movs	r3, #32
 8003fda:	e004      	b.n	8003fe6 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8003fdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003fe0:	fab3 f383 	clz	r3, r3
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d106      	bne.n	8003ff8 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	2102      	movs	r1, #2
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7ff fa60 	bl	80034b8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2103      	movs	r1, #3
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7ff f9c4 	bl	800338c <LL_ADC_GetOffsetChannel>
 8004004:	4603      	mov	r3, r0
 8004006:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10a      	bne.n	8004024 <HAL_ADC_ConfigChannel+0x4c8>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2103      	movs	r1, #3
 8004014:	4618      	mov	r0, r3
 8004016:	f7ff f9b9 	bl	800338c <LL_ADC_GetOffsetChannel>
 800401a:	4603      	mov	r3, r0
 800401c:	0e9b      	lsrs	r3, r3, #26
 800401e:	f003 021f 	and.w	r2, r3, #31
 8004022:	e017      	b.n	8004054 <HAL_ADC_ConfigChannel+0x4f8>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2103      	movs	r1, #3
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff f9ae 	bl	800338c <LL_ADC_GetOffsetChannel>
 8004030:	4603      	mov	r3, r0
 8004032:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004034:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004036:	fa93 f3a3 	rbit	r3, r3
 800403a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800403c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800403e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004040:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004046:	2320      	movs	r3, #32
 8004048:	e003      	b.n	8004052 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800404a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800404c:	fab3 f383 	clz	r3, r3
 8004050:	b2db      	uxtb	r3, r3
 8004052:	461a      	mov	r2, r3
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800405c:	2b00      	cmp	r3, #0
 800405e:	d105      	bne.n	800406c <HAL_ADC_ConfigChannel+0x510>
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	0e9b      	lsrs	r3, r3, #26
 8004066:	f003 031f 	and.w	r3, r3, #31
 800406a:	e011      	b.n	8004090 <HAL_ADC_ConfigChannel+0x534>
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004072:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004074:	fa93 f3a3 	rbit	r3, r3
 8004078:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800407a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800407c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800407e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8004084:	2320      	movs	r3, #32
 8004086:	e003      	b.n	8004090 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8004088:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800408a:	fab3 f383 	clz	r3, r3
 800408e:	b2db      	uxtb	r3, r3
 8004090:	429a      	cmp	r2, r3
 8004092:	d14f      	bne.n	8004134 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2200      	movs	r2, #0
 800409a:	2103      	movs	r1, #3
 800409c:	4618      	mov	r0, r3
 800409e:	f7ff fa0b 	bl	80034b8 <LL_ADC_SetOffsetState>
 80040a2:	e047      	b.n	8004134 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	069b      	lsls	r3, r3, #26
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d107      	bne.n	80040c8 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80040c6:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	069b      	lsls	r3, r3, #26
 80040d8:	429a      	cmp	r2, r3
 80040da:	d107      	bne.n	80040ec <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80040ea:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	069b      	lsls	r3, r3, #26
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d107      	bne.n	8004110 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800410e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004116:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	069b      	lsls	r3, r3, #26
 8004120:	429a      	cmp	r2, r3
 8004122:	d107      	bne.n	8004134 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004132:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4618      	mov	r0, r3
 800413a:	f7ff facd 	bl	80036d8 <LL_ADC_IsEnabled>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	f040 8219 	bne.w	8004578 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6818      	ldr	r0, [r3, #0]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	6819      	ldr	r1, [r3, #0]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	461a      	mov	r2, r3
 8004154:	f7ff fa32 	bl	80035bc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	4aa1      	ldr	r2, [pc, #644]	; (80043e4 <HAL_ADC_ConfigChannel+0x888>)
 800415e:	4293      	cmp	r3, r2
 8004160:	f040 812e 	bne.w	80043c0 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10b      	bne.n	800418c <HAL_ADC_ConfigChannel+0x630>
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	0e9b      	lsrs	r3, r3, #26
 800417a:	3301      	adds	r3, #1
 800417c:	f003 031f 	and.w	r3, r3, #31
 8004180:	2b09      	cmp	r3, #9
 8004182:	bf94      	ite	ls
 8004184:	2301      	movls	r3, #1
 8004186:	2300      	movhi	r3, #0
 8004188:	b2db      	uxtb	r3, r3
 800418a:	e019      	b.n	80041c0 <HAL_ADC_ConfigChannel+0x664>
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004192:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004194:	fa93 f3a3 	rbit	r3, r3
 8004198:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800419a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800419c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800419e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d101      	bne.n	80041a8 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 80041a4:	2320      	movs	r3, #32
 80041a6:	e003      	b.n	80041b0 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 80041a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041aa:	fab3 f383 	clz	r3, r3
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	3301      	adds	r3, #1
 80041b2:	f003 031f 	and.w	r3, r3, #31
 80041b6:	2b09      	cmp	r3, #9
 80041b8:	bf94      	ite	ls
 80041ba:	2301      	movls	r3, #1
 80041bc:	2300      	movhi	r3, #0
 80041be:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d079      	beq.n	80042b8 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d107      	bne.n	80041e0 <HAL_ADC_ConfigChannel+0x684>
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	0e9b      	lsrs	r3, r3, #26
 80041d6:	3301      	adds	r3, #1
 80041d8:	069b      	lsls	r3, r3, #26
 80041da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041de:	e015      	b.n	800420c <HAL_ADC_ConfigChannel+0x6b0>
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041e8:	fa93 f3a3 	rbit	r3, r3
 80041ec:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80041ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041f0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80041f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d101      	bne.n	80041fc <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80041f8:	2320      	movs	r3, #32
 80041fa:	e003      	b.n	8004204 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 80041fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041fe:	fab3 f383 	clz	r3, r3
 8004202:	b2db      	uxtb	r3, r3
 8004204:	3301      	adds	r3, #1
 8004206:	069b      	lsls	r3, r3, #26
 8004208:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004214:	2b00      	cmp	r3, #0
 8004216:	d109      	bne.n	800422c <HAL_ADC_ConfigChannel+0x6d0>
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	0e9b      	lsrs	r3, r3, #26
 800421e:	3301      	adds	r3, #1
 8004220:	f003 031f 	and.w	r3, r3, #31
 8004224:	2101      	movs	r1, #1
 8004226:	fa01 f303 	lsl.w	r3, r1, r3
 800422a:	e017      	b.n	800425c <HAL_ADC_ConfigChannel+0x700>
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004234:	fa93 f3a3 	rbit	r3, r3
 8004238:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800423a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800423c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800423e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004240:	2b00      	cmp	r3, #0
 8004242:	d101      	bne.n	8004248 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8004244:	2320      	movs	r3, #32
 8004246:	e003      	b.n	8004250 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8004248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800424a:	fab3 f383 	clz	r3, r3
 800424e:	b2db      	uxtb	r3, r3
 8004250:	3301      	adds	r3, #1
 8004252:	f003 031f 	and.w	r3, r3, #31
 8004256:	2101      	movs	r1, #1
 8004258:	fa01 f303 	lsl.w	r3, r1, r3
 800425c:	ea42 0103 	orr.w	r1, r2, r3
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10a      	bne.n	8004282 <HAL_ADC_ConfigChannel+0x726>
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	0e9b      	lsrs	r3, r3, #26
 8004272:	3301      	adds	r3, #1
 8004274:	f003 021f 	and.w	r2, r3, #31
 8004278:	4613      	mov	r3, r2
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	4413      	add	r3, r2
 800427e:	051b      	lsls	r3, r3, #20
 8004280:	e018      	b.n	80042b4 <HAL_ADC_ConfigChannel+0x758>
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800428a:	fa93 f3a3 	rbit	r3, r3
 800428e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004292:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 800429a:	2320      	movs	r3, #32
 800429c:	e003      	b.n	80042a6 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 800429e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a0:	fab3 f383 	clz	r3, r3
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	3301      	adds	r3, #1
 80042a8:	f003 021f 	and.w	r2, r3, #31
 80042ac:	4613      	mov	r3, r2
 80042ae:	005b      	lsls	r3, r3, #1
 80042b0:	4413      	add	r3, r2
 80042b2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042b4:	430b      	orrs	r3, r1
 80042b6:	e07e      	b.n	80043b6 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d107      	bne.n	80042d4 <HAL_ADC_ConfigChannel+0x778>
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	0e9b      	lsrs	r3, r3, #26
 80042ca:	3301      	adds	r3, #1
 80042cc:	069b      	lsls	r3, r3, #26
 80042ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80042d2:	e015      	b.n	8004300 <HAL_ADC_ConfigChannel+0x7a4>
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042dc:	fa93 f3a3 	rbit	r3, r3
 80042e0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80042e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80042e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d101      	bne.n	80042f0 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 80042ec:	2320      	movs	r3, #32
 80042ee:	e003      	b.n	80042f8 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 80042f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f2:	fab3 f383 	clz	r3, r3
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	3301      	adds	r3, #1
 80042fa:	069b      	lsls	r3, r3, #26
 80042fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004308:	2b00      	cmp	r3, #0
 800430a:	d109      	bne.n	8004320 <HAL_ADC_ConfigChannel+0x7c4>
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	0e9b      	lsrs	r3, r3, #26
 8004312:	3301      	adds	r3, #1
 8004314:	f003 031f 	and.w	r3, r3, #31
 8004318:	2101      	movs	r1, #1
 800431a:	fa01 f303 	lsl.w	r3, r1, r3
 800431e:	e017      	b.n	8004350 <HAL_ADC_ConfigChannel+0x7f4>
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	fa93 f3a3 	rbit	r3, r3
 800432c:	61bb      	str	r3, [r7, #24]
  return result;
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004332:	6a3b      	ldr	r3, [r7, #32]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d101      	bne.n	800433c <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004338:	2320      	movs	r3, #32
 800433a:	e003      	b.n	8004344 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 800433c:	6a3b      	ldr	r3, [r7, #32]
 800433e:	fab3 f383 	clz	r3, r3
 8004342:	b2db      	uxtb	r3, r3
 8004344:	3301      	adds	r3, #1
 8004346:	f003 031f 	and.w	r3, r3, #31
 800434a:	2101      	movs	r1, #1
 800434c:	fa01 f303 	lsl.w	r3, r1, r3
 8004350:	ea42 0103 	orr.w	r1, r2, r3
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800435c:	2b00      	cmp	r3, #0
 800435e:	d10d      	bne.n	800437c <HAL_ADC_ConfigChannel+0x820>
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	0e9b      	lsrs	r3, r3, #26
 8004366:	3301      	adds	r3, #1
 8004368:	f003 021f 	and.w	r2, r3, #31
 800436c:	4613      	mov	r3, r2
 800436e:	005b      	lsls	r3, r3, #1
 8004370:	4413      	add	r3, r2
 8004372:	3b1e      	subs	r3, #30
 8004374:	051b      	lsls	r3, r3, #20
 8004376:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800437a:	e01b      	b.n	80043b4 <HAL_ADC_ConfigChannel+0x858>
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	fa93 f3a3 	rbit	r3, r3
 8004388:	60fb      	str	r3, [r7, #12]
  return result;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004394:	2320      	movs	r3, #32
 8004396:	e003      	b.n	80043a0 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	fab3 f383 	clz	r3, r3
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	3301      	adds	r3, #1
 80043a2:	f003 021f 	and.w	r2, r3, #31
 80043a6:	4613      	mov	r3, r2
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	4413      	add	r3, r2
 80043ac:	3b1e      	subs	r3, #30
 80043ae:	051b      	lsls	r3, r3, #20
 80043b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043b4:	430b      	orrs	r3, r1
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	6892      	ldr	r2, [r2, #8]
 80043ba:	4619      	mov	r1, r3
 80043bc:	f7ff f8d2 	bl	8003564 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f280 80d7 	bge.w	8004578 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a06      	ldr	r2, [pc, #24]	; (80043e8 <HAL_ADC_ConfigChannel+0x88c>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d004      	beq.n	80043de <HAL_ADC_ConfigChannel+0x882>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a04      	ldr	r2, [pc, #16]	; (80043ec <HAL_ADC_ConfigChannel+0x890>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d10a      	bne.n	80043f4 <HAL_ADC_ConfigChannel+0x898>
 80043de:	4b04      	ldr	r3, [pc, #16]	; (80043f0 <HAL_ADC_ConfigChannel+0x894>)
 80043e0:	e009      	b.n	80043f6 <HAL_ADC_ConfigChannel+0x89a>
 80043e2:	bf00      	nop
 80043e4:	47ff0000 	.word	0x47ff0000
 80043e8:	40022000 	.word	0x40022000
 80043ec:	40022100 	.word	0x40022100
 80043f0:	40022300 	.word	0x40022300
 80043f4:	4b65      	ldr	r3, [pc, #404]	; (800458c <HAL_ADC_ConfigChannel+0xa30>)
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7fe ff88 	bl	800330c <LL_ADC_GetCommonPathInternalCh>
 80043fc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a62      	ldr	r2, [pc, #392]	; (8004590 <HAL_ADC_ConfigChannel+0xa34>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d004      	beq.n	8004414 <HAL_ADC_ConfigChannel+0x8b8>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a61      	ldr	r2, [pc, #388]	; (8004594 <HAL_ADC_ConfigChannel+0xa38>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d10e      	bne.n	8004432 <HAL_ADC_ConfigChannel+0x8d6>
 8004414:	485e      	ldr	r0, [pc, #376]	; (8004590 <HAL_ADC_ConfigChannel+0xa34>)
 8004416:	f7ff f95f 	bl	80036d8 <LL_ADC_IsEnabled>
 800441a:	4604      	mov	r4, r0
 800441c:	485d      	ldr	r0, [pc, #372]	; (8004594 <HAL_ADC_ConfigChannel+0xa38>)
 800441e:	f7ff f95b 	bl	80036d8 <LL_ADC_IsEnabled>
 8004422:	4603      	mov	r3, r0
 8004424:	4323      	orrs	r3, r4
 8004426:	2b00      	cmp	r3, #0
 8004428:	bf0c      	ite	eq
 800442a:	2301      	moveq	r3, #1
 800442c:	2300      	movne	r3, #0
 800442e:	b2db      	uxtb	r3, r3
 8004430:	e008      	b.n	8004444 <HAL_ADC_ConfigChannel+0x8e8>
 8004432:	4859      	ldr	r0, [pc, #356]	; (8004598 <HAL_ADC_ConfigChannel+0xa3c>)
 8004434:	f7ff f950 	bl	80036d8 <LL_ADC_IsEnabled>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	bf0c      	ite	eq
 800443e:	2301      	moveq	r3, #1
 8004440:	2300      	movne	r3, #0
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 8084 	beq.w	8004552 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a53      	ldr	r2, [pc, #332]	; (800459c <HAL_ADC_ConfigChannel+0xa40>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d132      	bne.n	80044ba <HAL_ADC_ConfigChannel+0x95e>
 8004454:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004458:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d12c      	bne.n	80044ba <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a4c      	ldr	r2, [pc, #304]	; (8004598 <HAL_ADC_ConfigChannel+0xa3c>)
 8004466:	4293      	cmp	r3, r2
 8004468:	f040 8086 	bne.w	8004578 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a47      	ldr	r2, [pc, #284]	; (8004590 <HAL_ADC_ConfigChannel+0xa34>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d004      	beq.n	8004480 <HAL_ADC_ConfigChannel+0x924>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a46      	ldr	r2, [pc, #280]	; (8004594 <HAL_ADC_ConfigChannel+0xa38>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d101      	bne.n	8004484 <HAL_ADC_ConfigChannel+0x928>
 8004480:	4a47      	ldr	r2, [pc, #284]	; (80045a0 <HAL_ADC_ConfigChannel+0xa44>)
 8004482:	e000      	b.n	8004486 <HAL_ADC_ConfigChannel+0x92a>
 8004484:	4a41      	ldr	r2, [pc, #260]	; (800458c <HAL_ADC_ConfigChannel+0xa30>)
 8004486:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800448a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800448e:	4619      	mov	r1, r3
 8004490:	4610      	mov	r0, r2
 8004492:	f7fe ff28 	bl	80032e6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004496:	4b43      	ldr	r3, [pc, #268]	; (80045a4 <HAL_ADC_ConfigChannel+0xa48>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	099b      	lsrs	r3, r3, #6
 800449c:	4a42      	ldr	r2, [pc, #264]	; (80045a8 <HAL_ADC_ConfigChannel+0xa4c>)
 800449e:	fba2 2303 	umull	r2, r3, r2, r3
 80044a2:	099b      	lsrs	r3, r3, #6
 80044a4:	3301      	adds	r3, #1
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80044aa:	e002      	b.n	80044b2 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	3b01      	subs	r3, #1
 80044b0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1f9      	bne.n	80044ac <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044b8:	e05e      	b.n	8004578 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a3b      	ldr	r2, [pc, #236]	; (80045ac <HAL_ADC_ConfigChannel+0xa50>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d120      	bne.n	8004506 <HAL_ADC_ConfigChannel+0x9aa>
 80044c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80044c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d11a      	bne.n	8004506 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a30      	ldr	r2, [pc, #192]	; (8004598 <HAL_ADC_ConfigChannel+0xa3c>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d14e      	bne.n	8004578 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a2c      	ldr	r2, [pc, #176]	; (8004590 <HAL_ADC_ConfigChannel+0xa34>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d004      	beq.n	80044ee <HAL_ADC_ConfigChannel+0x992>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a2a      	ldr	r2, [pc, #168]	; (8004594 <HAL_ADC_ConfigChannel+0xa38>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d101      	bne.n	80044f2 <HAL_ADC_ConfigChannel+0x996>
 80044ee:	4a2c      	ldr	r2, [pc, #176]	; (80045a0 <HAL_ADC_ConfigChannel+0xa44>)
 80044f0:	e000      	b.n	80044f4 <HAL_ADC_ConfigChannel+0x998>
 80044f2:	4a26      	ldr	r2, [pc, #152]	; (800458c <HAL_ADC_ConfigChannel+0xa30>)
 80044f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80044f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044fc:	4619      	mov	r1, r3
 80044fe:	4610      	mov	r0, r2
 8004500:	f7fe fef1 	bl	80032e6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004504:	e038      	b.n	8004578 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a29      	ldr	r2, [pc, #164]	; (80045b0 <HAL_ADC_ConfigChannel+0xa54>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d133      	bne.n	8004578 <HAL_ADC_ConfigChannel+0xa1c>
 8004510:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004514:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d12d      	bne.n	8004578 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a1d      	ldr	r2, [pc, #116]	; (8004598 <HAL_ADC_ConfigChannel+0xa3c>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d128      	bne.n	8004578 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a19      	ldr	r2, [pc, #100]	; (8004590 <HAL_ADC_ConfigChannel+0xa34>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d004      	beq.n	800453a <HAL_ADC_ConfigChannel+0x9de>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a17      	ldr	r2, [pc, #92]	; (8004594 <HAL_ADC_ConfigChannel+0xa38>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d101      	bne.n	800453e <HAL_ADC_ConfigChannel+0x9e2>
 800453a:	4a19      	ldr	r2, [pc, #100]	; (80045a0 <HAL_ADC_ConfigChannel+0xa44>)
 800453c:	e000      	b.n	8004540 <HAL_ADC_ConfigChannel+0x9e4>
 800453e:	4a13      	ldr	r2, [pc, #76]	; (800458c <HAL_ADC_ConfigChannel+0xa30>)
 8004540:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004544:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004548:	4619      	mov	r1, r3
 800454a:	4610      	mov	r0, r2
 800454c:	f7fe fecb 	bl	80032e6 <LL_ADC_SetCommonPathInternalCh>
 8004550:	e012      	b.n	8004578 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004556:	f043 0220 	orr.w	r2, r3, #32
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8004564:	e008      	b.n	8004578 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800456a:	f043 0220 	orr.w	r2, r3, #32
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004580:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004584:	4618      	mov	r0, r3
 8004586:	37e4      	adds	r7, #228	; 0xe4
 8004588:	46bd      	mov	sp, r7
 800458a:	bd90      	pop	{r4, r7, pc}
 800458c:	58026300 	.word	0x58026300
 8004590:	40022000 	.word	0x40022000
 8004594:	40022100 	.word	0x40022100
 8004598:	58026000 	.word	0x58026000
 800459c:	c7520000 	.word	0xc7520000
 80045a0:	40022300 	.word	0x40022300
 80045a4:	24000000 	.word	0x24000000
 80045a8:	053e2d63 	.word	0x053e2d63
 80045ac:	c3210000 	.word	0xc3210000
 80045b0:	cb840000 	.word	0xcb840000

080045b4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a6c      	ldr	r2, [pc, #432]	; (8004774 <ADC_ConfigureBoostMode+0x1c0>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d004      	beq.n	80045d0 <ADC_ConfigureBoostMode+0x1c>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a6b      	ldr	r2, [pc, #428]	; (8004778 <ADC_ConfigureBoostMode+0x1c4>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d109      	bne.n	80045e4 <ADC_ConfigureBoostMode+0x30>
 80045d0:	4b6a      	ldr	r3, [pc, #424]	; (800477c <ADC_ConfigureBoostMode+0x1c8>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	bf14      	ite	ne
 80045dc:	2301      	movne	r3, #1
 80045de:	2300      	moveq	r3, #0
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	e008      	b.n	80045f6 <ADC_ConfigureBoostMode+0x42>
 80045e4:	4b66      	ldr	r3, [pc, #408]	; (8004780 <ADC_ConfigureBoostMode+0x1cc>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	bf14      	ite	ne
 80045f0:	2301      	movne	r3, #1
 80045f2:	2300      	moveq	r3, #0
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d01c      	beq.n	8004634 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80045fa:	f005 f87d 	bl	80096f8 <HAL_RCC_GetHCLKFreq>
 80045fe:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004608:	d010      	beq.n	800462c <ADC_ConfigureBoostMode+0x78>
 800460a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800460e:	d873      	bhi.n	80046f8 <ADC_ConfigureBoostMode+0x144>
 8004610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004614:	d002      	beq.n	800461c <ADC_ConfigureBoostMode+0x68>
 8004616:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800461a:	d16d      	bne.n	80046f8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	0c1b      	lsrs	r3, r3, #16
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	fbb2 f3f3 	udiv	r3, r2, r3
 8004628:	60fb      	str	r3, [r7, #12]
        break;
 800462a:	e068      	b.n	80046fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	089b      	lsrs	r3, r3, #2
 8004630:	60fb      	str	r3, [r7, #12]
        break;
 8004632:	e064      	b.n	80046fe <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004634:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004638:	f04f 0100 	mov.w	r1, #0
 800463c:	f006 fa58 	bl	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004640:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800464a:	d051      	beq.n	80046f0 <ADC_ConfigureBoostMode+0x13c>
 800464c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004650:	d854      	bhi.n	80046fc <ADC_ConfigureBoostMode+0x148>
 8004652:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004656:	d047      	beq.n	80046e8 <ADC_ConfigureBoostMode+0x134>
 8004658:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800465c:	d84e      	bhi.n	80046fc <ADC_ConfigureBoostMode+0x148>
 800465e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004662:	d03d      	beq.n	80046e0 <ADC_ConfigureBoostMode+0x12c>
 8004664:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004668:	d848      	bhi.n	80046fc <ADC_ConfigureBoostMode+0x148>
 800466a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800466e:	d033      	beq.n	80046d8 <ADC_ConfigureBoostMode+0x124>
 8004670:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004674:	d842      	bhi.n	80046fc <ADC_ConfigureBoostMode+0x148>
 8004676:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800467a:	d029      	beq.n	80046d0 <ADC_ConfigureBoostMode+0x11c>
 800467c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004680:	d83c      	bhi.n	80046fc <ADC_ConfigureBoostMode+0x148>
 8004682:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004686:	d01a      	beq.n	80046be <ADC_ConfigureBoostMode+0x10a>
 8004688:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800468c:	d836      	bhi.n	80046fc <ADC_ConfigureBoostMode+0x148>
 800468e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004692:	d014      	beq.n	80046be <ADC_ConfigureBoostMode+0x10a>
 8004694:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004698:	d830      	bhi.n	80046fc <ADC_ConfigureBoostMode+0x148>
 800469a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800469e:	d00e      	beq.n	80046be <ADC_ConfigureBoostMode+0x10a>
 80046a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046a4:	d82a      	bhi.n	80046fc <ADC_ConfigureBoostMode+0x148>
 80046a6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80046aa:	d008      	beq.n	80046be <ADC_ConfigureBoostMode+0x10a>
 80046ac:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80046b0:	d824      	bhi.n	80046fc <ADC_ConfigureBoostMode+0x148>
 80046b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046b6:	d002      	beq.n	80046be <ADC_ConfigureBoostMode+0x10a>
 80046b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80046bc:	d11e      	bne.n	80046fc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	0c9b      	lsrs	r3, r3, #18
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046cc:	60fb      	str	r3, [r7, #12]
        break;
 80046ce:	e016      	b.n	80046fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	091b      	lsrs	r3, r3, #4
 80046d4:	60fb      	str	r3, [r7, #12]
        break;
 80046d6:	e012      	b.n	80046fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	095b      	lsrs	r3, r3, #5
 80046dc:	60fb      	str	r3, [r7, #12]
        break;
 80046de:	e00e      	b.n	80046fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	099b      	lsrs	r3, r3, #6
 80046e4:	60fb      	str	r3, [r7, #12]
        break;
 80046e6:	e00a      	b.n	80046fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	09db      	lsrs	r3, r3, #7
 80046ec:	60fb      	str	r3, [r7, #12]
        break;
 80046ee:	e006      	b.n	80046fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	0a1b      	lsrs	r3, r3, #8
 80046f4:	60fb      	str	r3, [r7, #12]
        break;
 80046f6:	e002      	b.n	80046fe <ADC_ConfigureBoostMode+0x14a>
        break;
 80046f8:	bf00      	nop
 80046fa:	e000      	b.n	80046fe <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80046fc:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	085b      	lsrs	r3, r3, #1
 8004702:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	4a1f      	ldr	r2, [pc, #124]	; (8004784 <ADC_ConfigureBoostMode+0x1d0>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d808      	bhi.n	800471e <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689a      	ldr	r2, [r3, #8]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800471a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800471c:	e025      	b.n	800476a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	4a19      	ldr	r2, [pc, #100]	; (8004788 <ADC_ConfigureBoostMode+0x1d4>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d80a      	bhi.n	800473c <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004738:	609a      	str	r2, [r3, #8]
}
 800473a:	e016      	b.n	800476a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	4a13      	ldr	r2, [pc, #76]	; (800478c <ADC_ConfigureBoostMode+0x1d8>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d80a      	bhi.n	800475a <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004756:	609a      	str	r2, [r3, #8]
}
 8004758:	e007      	b.n	800476a <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	689a      	ldr	r2, [r3, #8]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004768:	609a      	str	r2, [r3, #8]
}
 800476a:	bf00      	nop
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	40022000 	.word	0x40022000
 8004778:	40022100 	.word	0x40022100
 800477c:	40022300 	.word	0x40022300
 8004780:	58026300 	.word	0x58026300
 8004784:	005f5e10 	.word	0x005f5e10
 8004788:	00bebc20 	.word	0x00bebc20
 800478c:	017d7840 	.word	0x017d7840

08004790 <LL_ADC_IsEnabled>:
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d101      	bne.n	80047a8 <LL_ADC_IsEnabled+0x18>
 80047a4:	2301      	movs	r3, #1
 80047a6:	e000      	b.n	80047aa <LL_ADC_IsEnabled+0x1a>
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr

080047b6 <LL_ADC_REG_IsConversionOngoing>:
{
 80047b6:	b480      	push	{r7}
 80047b8:	b083      	sub	sp, #12
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 0304 	and.w	r3, r3, #4
 80047c6:	2b04      	cmp	r3, #4
 80047c8:	d101      	bne.n	80047ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80047ca:	2301      	movs	r3, #1
 80047cc:	e000      	b.n	80047d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80047dc:	b590      	push	{r4, r7, lr}
 80047de:	b0a3      	sub	sp, #140	; 0x8c
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047e6:	2300      	movs	r3, #0
 80047e8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d101      	bne.n	80047fa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80047f6:	2302      	movs	r3, #2
 80047f8:	e0c1      	b.n	800497e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004802:	2300      	movs	r3, #0
 8004804:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004806:	2300      	movs	r3, #0
 8004808:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a5e      	ldr	r2, [pc, #376]	; (8004988 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d102      	bne.n	800481a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004814:	4b5d      	ldr	r3, [pc, #372]	; (800498c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004816:	60fb      	str	r3, [r7, #12]
 8004818:	e001      	b.n	800481e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800481a:	2300      	movs	r3, #0
 800481c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d10b      	bne.n	800483c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004828:	f043 0220 	orr.w	r2, r3, #32
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e0a0      	b.n	800497e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	4618      	mov	r0, r3
 8004840:	f7ff ffb9 	bl	80047b6 <LL_ADC_REG_IsConversionOngoing>
 8004844:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4618      	mov	r0, r3
 800484e:	f7ff ffb2 	bl	80047b6 <LL_ADC_REG_IsConversionOngoing>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	f040 8081 	bne.w	800495c <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800485a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800485e:	2b00      	cmp	r3, #0
 8004860:	d17c      	bne.n	800495c <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a48      	ldr	r2, [pc, #288]	; (8004988 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d004      	beq.n	8004876 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a46      	ldr	r2, [pc, #280]	; (800498c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d101      	bne.n	800487a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004876:	4b46      	ldr	r3, [pc, #280]	; (8004990 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004878:	e000      	b.n	800487c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800487a:	4b46      	ldr	r3, [pc, #280]	; (8004994 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800487c:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d039      	beq.n	80048fa <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004886:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	431a      	orrs	r2, r3
 8004894:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004896:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a3a      	ldr	r2, [pc, #232]	; (8004988 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d004      	beq.n	80048ac <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a39      	ldr	r2, [pc, #228]	; (800498c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d10e      	bne.n	80048ca <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80048ac:	4836      	ldr	r0, [pc, #216]	; (8004988 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80048ae:	f7ff ff6f 	bl	8004790 <LL_ADC_IsEnabled>
 80048b2:	4604      	mov	r4, r0
 80048b4:	4835      	ldr	r0, [pc, #212]	; (800498c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80048b6:	f7ff ff6b 	bl	8004790 <LL_ADC_IsEnabled>
 80048ba:	4603      	mov	r3, r0
 80048bc:	4323      	orrs	r3, r4
 80048be:	2b00      	cmp	r3, #0
 80048c0:	bf0c      	ite	eq
 80048c2:	2301      	moveq	r3, #1
 80048c4:	2300      	movne	r3, #0
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	e008      	b.n	80048dc <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80048ca:	4833      	ldr	r0, [pc, #204]	; (8004998 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80048cc:	f7ff ff60 	bl	8004790 <LL_ADC_IsEnabled>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	bf0c      	ite	eq
 80048d6:	2301      	moveq	r3, #1
 80048d8:	2300      	movne	r3, #0
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d047      	beq.n	8004970 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80048e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	4b2d      	ldr	r3, [pc, #180]	; (800499c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80048e6:	4013      	ands	r3, r2
 80048e8:	683a      	ldr	r2, [r7, #0]
 80048ea:	6811      	ldr	r1, [r2, #0]
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	6892      	ldr	r2, [r2, #8]
 80048f0:	430a      	orrs	r2, r1
 80048f2:	431a      	orrs	r2, r3
 80048f4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80048f6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80048f8:	e03a      	b.n	8004970 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80048fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004902:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004904:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a1f      	ldr	r2, [pc, #124]	; (8004988 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d004      	beq.n	800491a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a1d      	ldr	r2, [pc, #116]	; (800498c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d10e      	bne.n	8004938 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800491a:	481b      	ldr	r0, [pc, #108]	; (8004988 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800491c:	f7ff ff38 	bl	8004790 <LL_ADC_IsEnabled>
 8004920:	4604      	mov	r4, r0
 8004922:	481a      	ldr	r0, [pc, #104]	; (800498c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004924:	f7ff ff34 	bl	8004790 <LL_ADC_IsEnabled>
 8004928:	4603      	mov	r3, r0
 800492a:	4323      	orrs	r3, r4
 800492c:	2b00      	cmp	r3, #0
 800492e:	bf0c      	ite	eq
 8004930:	2301      	moveq	r3, #1
 8004932:	2300      	movne	r3, #0
 8004934:	b2db      	uxtb	r3, r3
 8004936:	e008      	b.n	800494a <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8004938:	4817      	ldr	r0, [pc, #92]	; (8004998 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800493a:	f7ff ff29 	bl	8004790 <LL_ADC_IsEnabled>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	bf0c      	ite	eq
 8004944:	2301      	moveq	r3, #1
 8004946:	2300      	movne	r3, #0
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d010      	beq.n	8004970 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800494e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004950:	689a      	ldr	r2, [r3, #8]
 8004952:	4b12      	ldr	r3, [pc, #72]	; (800499c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8004954:	4013      	ands	r3, r2
 8004956:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004958:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800495a:	e009      	b.n	8004970 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004960:	f043 0220 	orr.w	r2, r3, #32
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800496e:	e000      	b.n	8004972 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004970:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800497a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800497e:	4618      	mov	r0, r3
 8004980:	378c      	adds	r7, #140	; 0x8c
 8004982:	46bd      	mov	sp, r7
 8004984:	bd90      	pop	{r4, r7, pc}
 8004986:	bf00      	nop
 8004988:	40022000 	.word	0x40022000
 800498c:	40022100 	.word	0x40022100
 8004990:	40022300 	.word	0x40022300
 8004994:	58026300 	.word	0x58026300
 8004998:	58026000 	.word	0x58026000
 800499c:	fffff0e0 	.word	0xfffff0e0

080049a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f003 0307 	and.w	r3, r3, #7
 80049ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049b0:	4b0b      	ldr	r3, [pc, #44]	; (80049e0 <__NVIC_SetPriorityGrouping+0x40>)
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049b6:	68ba      	ldr	r2, [r7, #8]
 80049b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80049bc:	4013      	ands	r3, r2
 80049be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80049c8:	4b06      	ldr	r3, [pc, #24]	; (80049e4 <__NVIC_SetPriorityGrouping+0x44>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80049ce:	4a04      	ldr	r2, [pc, #16]	; (80049e0 <__NVIC_SetPriorityGrouping+0x40>)
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	60d3      	str	r3, [r2, #12]
}
 80049d4:	bf00      	nop
 80049d6:	3714      	adds	r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	e000ed00 	.word	0xe000ed00
 80049e4:	05fa0000 	.word	0x05fa0000

080049e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80049e8:	b480      	push	{r7}
 80049ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049ec:	4b04      	ldr	r3, [pc, #16]	; (8004a00 <__NVIC_GetPriorityGrouping+0x18>)
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	0a1b      	lsrs	r3, r3, #8
 80049f2:	f003 0307 	and.w	r3, r3, #7
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr
 8004a00:	e000ed00 	.word	0xe000ed00

08004a04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004a0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	db0b      	blt.n	8004a2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a16:	88fb      	ldrh	r3, [r7, #6]
 8004a18:	f003 021f 	and.w	r2, r3, #31
 8004a1c:	4907      	ldr	r1, [pc, #28]	; (8004a3c <__NVIC_EnableIRQ+0x38>)
 8004a1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a22:	095b      	lsrs	r3, r3, #5
 8004a24:	2001      	movs	r0, #1
 8004a26:	fa00 f202 	lsl.w	r2, r0, r2
 8004a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a2e:	bf00      	nop
 8004a30:	370c      	adds	r7, #12
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	e000e100 	.word	0xe000e100

08004a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	4603      	mov	r3, r0
 8004a48:	6039      	str	r1, [r7, #0]
 8004a4a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004a4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	db0a      	blt.n	8004a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	b2da      	uxtb	r2, r3
 8004a58:	490c      	ldr	r1, [pc, #48]	; (8004a8c <__NVIC_SetPriority+0x4c>)
 8004a5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a5e:	0112      	lsls	r2, r2, #4
 8004a60:	b2d2      	uxtb	r2, r2
 8004a62:	440b      	add	r3, r1
 8004a64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a68:	e00a      	b.n	8004a80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	4908      	ldr	r1, [pc, #32]	; (8004a90 <__NVIC_SetPriority+0x50>)
 8004a70:	88fb      	ldrh	r3, [r7, #6]
 8004a72:	f003 030f 	and.w	r3, r3, #15
 8004a76:	3b04      	subs	r3, #4
 8004a78:	0112      	lsls	r2, r2, #4
 8004a7a:	b2d2      	uxtb	r2, r2
 8004a7c:	440b      	add	r3, r1
 8004a7e:	761a      	strb	r2, [r3, #24]
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr
 8004a8c:	e000e100 	.word	0xe000e100
 8004a90:	e000ed00 	.word	0xe000ed00

08004a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b089      	sub	sp, #36	; 0x24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f003 0307 	and.w	r3, r3, #7
 8004aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	f1c3 0307 	rsb	r3, r3, #7
 8004aae:	2b04      	cmp	r3, #4
 8004ab0:	bf28      	it	cs
 8004ab2:	2304      	movcs	r3, #4
 8004ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	3304      	adds	r3, #4
 8004aba:	2b06      	cmp	r3, #6
 8004abc:	d902      	bls.n	8004ac4 <NVIC_EncodePriority+0x30>
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	3b03      	subs	r3, #3
 8004ac2:	e000      	b.n	8004ac6 <NVIC_EncodePriority+0x32>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad2:	43da      	mvns	r2, r3
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	401a      	ands	r2, r3
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004adc:	f04f 31ff 	mov.w	r1, #4294967295
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae6:	43d9      	mvns	r1, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004aec:	4313      	orrs	r3, r2
         );
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3724      	adds	r7, #36	; 0x24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
	...

08004afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	3b01      	subs	r3, #1
 8004b08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b0c:	d301      	bcc.n	8004b12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e00f      	b.n	8004b32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b12:	4a0a      	ldr	r2, [pc, #40]	; (8004b3c <SysTick_Config+0x40>)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	3b01      	subs	r3, #1
 8004b18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b1a:	210f      	movs	r1, #15
 8004b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b20:	f7ff ff8e 	bl	8004a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b24:	4b05      	ldr	r3, [pc, #20]	; (8004b3c <SysTick_Config+0x40>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b2a:	4b04      	ldr	r3, [pc, #16]	; (8004b3c <SysTick_Config+0x40>)
 8004b2c:	2207      	movs	r2, #7
 8004b2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	e000e010 	.word	0xe000e010

08004b40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f7ff ff29 	bl	80049a0 <__NVIC_SetPriorityGrouping>
}
 8004b4e:	bf00      	nop
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b086      	sub	sp, #24
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	60b9      	str	r1, [r7, #8]
 8004b60:	607a      	str	r2, [r7, #4]
 8004b62:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b64:	f7ff ff40 	bl	80049e8 <__NVIC_GetPriorityGrouping>
 8004b68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	68b9      	ldr	r1, [r7, #8]
 8004b6e:	6978      	ldr	r0, [r7, #20]
 8004b70:	f7ff ff90 	bl	8004a94 <NVIC_EncodePriority>
 8004b74:	4602      	mov	r2, r0
 8004b76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b7a:	4611      	mov	r1, r2
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7ff ff5f 	bl	8004a40 <__NVIC_SetPriority>
}
 8004b82:	bf00      	nop
 8004b84:	3718      	adds	r7, #24
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b082      	sub	sp, #8
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	4603      	mov	r3, r0
 8004b92:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f7ff ff33 	bl	8004a04 <__NVIC_EnableIRQ>
}
 8004b9e:	bf00      	nop
 8004ba0:	3708      	adds	r7, #8
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b082      	sub	sp, #8
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f7ff ffa4 	bl	8004afc <SysTick_Config>
 8004bb4:	4603      	mov	r3, r0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
	...

08004bc0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004bc8:	f7fe fb34 	bl	8003234 <HAL_GetTick>
 8004bcc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d101      	bne.n	8004bd8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e314      	b.n	8005202 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a66      	ldr	r2, [pc, #408]	; (8004d78 <HAL_DMA_Init+0x1b8>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d04a      	beq.n	8004c78 <HAL_DMA_Init+0xb8>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a65      	ldr	r2, [pc, #404]	; (8004d7c <HAL_DMA_Init+0x1bc>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d045      	beq.n	8004c78 <HAL_DMA_Init+0xb8>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a63      	ldr	r2, [pc, #396]	; (8004d80 <HAL_DMA_Init+0x1c0>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d040      	beq.n	8004c78 <HAL_DMA_Init+0xb8>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a62      	ldr	r2, [pc, #392]	; (8004d84 <HAL_DMA_Init+0x1c4>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d03b      	beq.n	8004c78 <HAL_DMA_Init+0xb8>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a60      	ldr	r2, [pc, #384]	; (8004d88 <HAL_DMA_Init+0x1c8>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d036      	beq.n	8004c78 <HAL_DMA_Init+0xb8>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a5f      	ldr	r2, [pc, #380]	; (8004d8c <HAL_DMA_Init+0x1cc>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d031      	beq.n	8004c78 <HAL_DMA_Init+0xb8>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a5d      	ldr	r2, [pc, #372]	; (8004d90 <HAL_DMA_Init+0x1d0>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d02c      	beq.n	8004c78 <HAL_DMA_Init+0xb8>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a5c      	ldr	r2, [pc, #368]	; (8004d94 <HAL_DMA_Init+0x1d4>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d027      	beq.n	8004c78 <HAL_DMA_Init+0xb8>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a5a      	ldr	r2, [pc, #360]	; (8004d98 <HAL_DMA_Init+0x1d8>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d022      	beq.n	8004c78 <HAL_DMA_Init+0xb8>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a59      	ldr	r2, [pc, #356]	; (8004d9c <HAL_DMA_Init+0x1dc>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d01d      	beq.n	8004c78 <HAL_DMA_Init+0xb8>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a57      	ldr	r2, [pc, #348]	; (8004da0 <HAL_DMA_Init+0x1e0>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d018      	beq.n	8004c78 <HAL_DMA_Init+0xb8>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a56      	ldr	r2, [pc, #344]	; (8004da4 <HAL_DMA_Init+0x1e4>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d013      	beq.n	8004c78 <HAL_DMA_Init+0xb8>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a54      	ldr	r2, [pc, #336]	; (8004da8 <HAL_DMA_Init+0x1e8>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d00e      	beq.n	8004c78 <HAL_DMA_Init+0xb8>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a53      	ldr	r2, [pc, #332]	; (8004dac <HAL_DMA_Init+0x1ec>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d009      	beq.n	8004c78 <HAL_DMA_Init+0xb8>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a51      	ldr	r2, [pc, #324]	; (8004db0 <HAL_DMA_Init+0x1f0>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d004      	beq.n	8004c78 <HAL_DMA_Init+0xb8>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a50      	ldr	r2, [pc, #320]	; (8004db4 <HAL_DMA_Init+0x1f4>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d101      	bne.n	8004c7c <HAL_DMA_Init+0xbc>
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e000      	b.n	8004c7e <HAL_DMA_Init+0xbe>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f000 813c 	beq.w	8004efc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2202      	movs	r2, #2
 8004c88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a37      	ldr	r2, [pc, #220]	; (8004d78 <HAL_DMA_Init+0x1b8>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d04a      	beq.n	8004d34 <HAL_DMA_Init+0x174>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a36      	ldr	r2, [pc, #216]	; (8004d7c <HAL_DMA_Init+0x1bc>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d045      	beq.n	8004d34 <HAL_DMA_Init+0x174>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a34      	ldr	r2, [pc, #208]	; (8004d80 <HAL_DMA_Init+0x1c0>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d040      	beq.n	8004d34 <HAL_DMA_Init+0x174>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a33      	ldr	r2, [pc, #204]	; (8004d84 <HAL_DMA_Init+0x1c4>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d03b      	beq.n	8004d34 <HAL_DMA_Init+0x174>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a31      	ldr	r2, [pc, #196]	; (8004d88 <HAL_DMA_Init+0x1c8>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d036      	beq.n	8004d34 <HAL_DMA_Init+0x174>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a30      	ldr	r2, [pc, #192]	; (8004d8c <HAL_DMA_Init+0x1cc>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d031      	beq.n	8004d34 <HAL_DMA_Init+0x174>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a2e      	ldr	r2, [pc, #184]	; (8004d90 <HAL_DMA_Init+0x1d0>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d02c      	beq.n	8004d34 <HAL_DMA_Init+0x174>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a2d      	ldr	r2, [pc, #180]	; (8004d94 <HAL_DMA_Init+0x1d4>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d027      	beq.n	8004d34 <HAL_DMA_Init+0x174>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a2b      	ldr	r2, [pc, #172]	; (8004d98 <HAL_DMA_Init+0x1d8>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d022      	beq.n	8004d34 <HAL_DMA_Init+0x174>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a2a      	ldr	r2, [pc, #168]	; (8004d9c <HAL_DMA_Init+0x1dc>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d01d      	beq.n	8004d34 <HAL_DMA_Init+0x174>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a28      	ldr	r2, [pc, #160]	; (8004da0 <HAL_DMA_Init+0x1e0>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d018      	beq.n	8004d34 <HAL_DMA_Init+0x174>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a27      	ldr	r2, [pc, #156]	; (8004da4 <HAL_DMA_Init+0x1e4>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d013      	beq.n	8004d34 <HAL_DMA_Init+0x174>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a25      	ldr	r2, [pc, #148]	; (8004da8 <HAL_DMA_Init+0x1e8>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d00e      	beq.n	8004d34 <HAL_DMA_Init+0x174>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a24      	ldr	r2, [pc, #144]	; (8004dac <HAL_DMA_Init+0x1ec>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d009      	beq.n	8004d34 <HAL_DMA_Init+0x174>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a22      	ldr	r2, [pc, #136]	; (8004db0 <HAL_DMA_Init+0x1f0>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d004      	beq.n	8004d34 <HAL_DMA_Init+0x174>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a21      	ldr	r2, [pc, #132]	; (8004db4 <HAL_DMA_Init+0x1f4>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d108      	bne.n	8004d46 <HAL_DMA_Init+0x186>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 0201 	bic.w	r2, r2, #1
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	e007      	b.n	8004d56 <HAL_DMA_Init+0x196>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 0201 	bic.w	r2, r2, #1
 8004d54:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004d56:	e02f      	b.n	8004db8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d58:	f7fe fa6c 	bl	8003234 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b05      	cmp	r3, #5
 8004d64:	d928      	bls.n	8004db8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2203      	movs	r2, #3
 8004d70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e244      	b.n	8005202 <HAL_DMA_Init+0x642>
 8004d78:	40020010 	.word	0x40020010
 8004d7c:	40020028 	.word	0x40020028
 8004d80:	40020040 	.word	0x40020040
 8004d84:	40020058 	.word	0x40020058
 8004d88:	40020070 	.word	0x40020070
 8004d8c:	40020088 	.word	0x40020088
 8004d90:	400200a0 	.word	0x400200a0
 8004d94:	400200b8 	.word	0x400200b8
 8004d98:	40020410 	.word	0x40020410
 8004d9c:	40020428 	.word	0x40020428
 8004da0:	40020440 	.word	0x40020440
 8004da4:	40020458 	.word	0x40020458
 8004da8:	40020470 	.word	0x40020470
 8004dac:	40020488 	.word	0x40020488
 8004db0:	400204a0 	.word	0x400204a0
 8004db4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1c8      	bne.n	8004d58 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	4b84      	ldr	r3, [pc, #528]	; (8004fe4 <HAL_DMA_Init+0x424>)
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004dde:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004dea:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004df6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a1b      	ldr	r3, [r3, #32]
 8004dfc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	2b04      	cmp	r3, #4
 8004e0a:	d107      	bne.n	8004e1c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e14:	4313      	orrs	r3, r2
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	2b28      	cmp	r3, #40	; 0x28
 8004e22:	d903      	bls.n	8004e2c <HAL_DMA_Init+0x26c>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	2b2e      	cmp	r3, #46	; 0x2e
 8004e2a:	d91f      	bls.n	8004e6c <HAL_DMA_Init+0x2ac>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	2b3e      	cmp	r3, #62	; 0x3e
 8004e32:	d903      	bls.n	8004e3c <HAL_DMA_Init+0x27c>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	2b42      	cmp	r3, #66	; 0x42
 8004e3a:	d917      	bls.n	8004e6c <HAL_DMA_Init+0x2ac>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	2b46      	cmp	r3, #70	; 0x46
 8004e42:	d903      	bls.n	8004e4c <HAL_DMA_Init+0x28c>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	2b48      	cmp	r3, #72	; 0x48
 8004e4a:	d90f      	bls.n	8004e6c <HAL_DMA_Init+0x2ac>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	2b4e      	cmp	r3, #78	; 0x4e
 8004e52:	d903      	bls.n	8004e5c <HAL_DMA_Init+0x29c>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	2b52      	cmp	r3, #82	; 0x52
 8004e5a:	d907      	bls.n	8004e6c <HAL_DMA_Init+0x2ac>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	2b73      	cmp	r3, #115	; 0x73
 8004e62:	d905      	bls.n	8004e70 <HAL_DMA_Init+0x2b0>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	2b77      	cmp	r3, #119	; 0x77
 8004e6a:	d801      	bhi.n	8004e70 <HAL_DMA_Init+0x2b0>
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e000      	b.n	8004e72 <HAL_DMA_Init+0x2b2>
 8004e70:	2300      	movs	r3, #0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d003      	beq.n	8004e7e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e7c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	f023 0307 	bic.w	r3, r3, #7
 8004e94:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea4:	2b04      	cmp	r3, #4
 8004ea6:	d117      	bne.n	8004ed8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00e      	beq.n	8004ed8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f001 f9b6 	bl	800622c <DMA_CheckFifoParam>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d008      	beq.n	8004ed8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2240      	movs	r2, #64	; 0x40
 8004eca:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e194      	b.n	8005202 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f001 f8f1 	bl	80060c8 <DMA_CalcBaseAndBitshift>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eee:	f003 031f 	and.w	r3, r3, #31
 8004ef2:	223f      	movs	r2, #63	; 0x3f
 8004ef4:	409a      	lsls	r2, r3
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	609a      	str	r2, [r3, #8]
 8004efa:	e0ca      	b.n	8005092 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a39      	ldr	r2, [pc, #228]	; (8004fe8 <HAL_DMA_Init+0x428>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d022      	beq.n	8004f4c <HAL_DMA_Init+0x38c>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a38      	ldr	r2, [pc, #224]	; (8004fec <HAL_DMA_Init+0x42c>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d01d      	beq.n	8004f4c <HAL_DMA_Init+0x38c>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a36      	ldr	r2, [pc, #216]	; (8004ff0 <HAL_DMA_Init+0x430>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d018      	beq.n	8004f4c <HAL_DMA_Init+0x38c>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a35      	ldr	r2, [pc, #212]	; (8004ff4 <HAL_DMA_Init+0x434>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d013      	beq.n	8004f4c <HAL_DMA_Init+0x38c>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a33      	ldr	r2, [pc, #204]	; (8004ff8 <HAL_DMA_Init+0x438>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d00e      	beq.n	8004f4c <HAL_DMA_Init+0x38c>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a32      	ldr	r2, [pc, #200]	; (8004ffc <HAL_DMA_Init+0x43c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d009      	beq.n	8004f4c <HAL_DMA_Init+0x38c>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a30      	ldr	r2, [pc, #192]	; (8005000 <HAL_DMA_Init+0x440>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d004      	beq.n	8004f4c <HAL_DMA_Init+0x38c>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a2f      	ldr	r2, [pc, #188]	; (8005004 <HAL_DMA_Init+0x444>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d101      	bne.n	8004f50 <HAL_DMA_Init+0x390>
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e000      	b.n	8004f52 <HAL_DMA_Init+0x392>
 8004f50:	2300      	movs	r3, #0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	f000 8094 	beq.w	8005080 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a22      	ldr	r2, [pc, #136]	; (8004fe8 <HAL_DMA_Init+0x428>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d021      	beq.n	8004fa6 <HAL_DMA_Init+0x3e6>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a21      	ldr	r2, [pc, #132]	; (8004fec <HAL_DMA_Init+0x42c>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d01c      	beq.n	8004fa6 <HAL_DMA_Init+0x3e6>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a1f      	ldr	r2, [pc, #124]	; (8004ff0 <HAL_DMA_Init+0x430>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d017      	beq.n	8004fa6 <HAL_DMA_Init+0x3e6>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a1e      	ldr	r2, [pc, #120]	; (8004ff4 <HAL_DMA_Init+0x434>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d012      	beq.n	8004fa6 <HAL_DMA_Init+0x3e6>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a1c      	ldr	r2, [pc, #112]	; (8004ff8 <HAL_DMA_Init+0x438>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d00d      	beq.n	8004fa6 <HAL_DMA_Init+0x3e6>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a1b      	ldr	r2, [pc, #108]	; (8004ffc <HAL_DMA_Init+0x43c>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d008      	beq.n	8004fa6 <HAL_DMA_Init+0x3e6>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a19      	ldr	r2, [pc, #100]	; (8005000 <HAL_DMA_Init+0x440>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d003      	beq.n	8004fa6 <HAL_DMA_Init+0x3e6>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a18      	ldr	r2, [pc, #96]	; (8005004 <HAL_DMA_Init+0x444>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2202      	movs	r2, #2
 8004fac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	4b11      	ldr	r3, [pc, #68]	; (8005008 <HAL_DMA_Init+0x448>)
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	2b40      	cmp	r3, #64	; 0x40
 8004fce:	d01d      	beq.n	800500c <HAL_DMA_Init+0x44c>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	2b80      	cmp	r3, #128	; 0x80
 8004fd6:	d102      	bne.n	8004fde <HAL_DMA_Init+0x41e>
 8004fd8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004fdc:	e017      	b.n	800500e <HAL_DMA_Init+0x44e>
 8004fde:	2300      	movs	r3, #0
 8004fe0:	e015      	b.n	800500e <HAL_DMA_Init+0x44e>
 8004fe2:	bf00      	nop
 8004fe4:	fe10803f 	.word	0xfe10803f
 8004fe8:	58025408 	.word	0x58025408
 8004fec:	5802541c 	.word	0x5802541c
 8004ff0:	58025430 	.word	0x58025430
 8004ff4:	58025444 	.word	0x58025444
 8004ff8:	58025458 	.word	0x58025458
 8004ffc:	5802546c 	.word	0x5802546c
 8005000:	58025480 	.word	0x58025480
 8005004:	58025494 	.word	0x58025494
 8005008:	fffe000f 	.word	0xfffe000f
 800500c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	68d2      	ldr	r2, [r2, #12]
 8005012:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005014:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800501c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005024:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800502c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	69db      	ldr	r3, [r3, #28]
 8005032:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005034:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800503c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	4313      	orrs	r3, r2
 8005042:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	461a      	mov	r2, r3
 8005052:	4b6e      	ldr	r3, [pc, #440]	; (800520c <HAL_DMA_Init+0x64c>)
 8005054:	4413      	add	r3, r2
 8005056:	4a6e      	ldr	r2, [pc, #440]	; (8005210 <HAL_DMA_Init+0x650>)
 8005058:	fba2 2303 	umull	r2, r3, r2, r3
 800505c:	091b      	lsrs	r3, r3, #4
 800505e:	009a      	lsls	r2, r3, #2
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f001 f82f 	bl	80060c8 <DMA_CalcBaseAndBitshift>
 800506a:	4603      	mov	r3, r0
 800506c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005072:	f003 031f 	and.w	r3, r3, #31
 8005076:	2201      	movs	r2, #1
 8005078:	409a      	lsls	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	605a      	str	r2, [r3, #4]
 800507e:	e008      	b.n	8005092 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2240      	movs	r2, #64	; 0x40
 8005084:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2203      	movs	r2, #3
 800508a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e0b7      	b.n	8005202 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a5f      	ldr	r2, [pc, #380]	; (8005214 <HAL_DMA_Init+0x654>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d072      	beq.n	8005182 <HAL_DMA_Init+0x5c2>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a5d      	ldr	r2, [pc, #372]	; (8005218 <HAL_DMA_Init+0x658>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d06d      	beq.n	8005182 <HAL_DMA_Init+0x5c2>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a5c      	ldr	r2, [pc, #368]	; (800521c <HAL_DMA_Init+0x65c>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d068      	beq.n	8005182 <HAL_DMA_Init+0x5c2>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a5a      	ldr	r2, [pc, #360]	; (8005220 <HAL_DMA_Init+0x660>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d063      	beq.n	8005182 <HAL_DMA_Init+0x5c2>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a59      	ldr	r2, [pc, #356]	; (8005224 <HAL_DMA_Init+0x664>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d05e      	beq.n	8005182 <HAL_DMA_Init+0x5c2>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a57      	ldr	r2, [pc, #348]	; (8005228 <HAL_DMA_Init+0x668>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d059      	beq.n	8005182 <HAL_DMA_Init+0x5c2>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a56      	ldr	r2, [pc, #344]	; (800522c <HAL_DMA_Init+0x66c>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d054      	beq.n	8005182 <HAL_DMA_Init+0x5c2>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a54      	ldr	r2, [pc, #336]	; (8005230 <HAL_DMA_Init+0x670>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d04f      	beq.n	8005182 <HAL_DMA_Init+0x5c2>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a53      	ldr	r2, [pc, #332]	; (8005234 <HAL_DMA_Init+0x674>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d04a      	beq.n	8005182 <HAL_DMA_Init+0x5c2>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a51      	ldr	r2, [pc, #324]	; (8005238 <HAL_DMA_Init+0x678>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d045      	beq.n	8005182 <HAL_DMA_Init+0x5c2>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a50      	ldr	r2, [pc, #320]	; (800523c <HAL_DMA_Init+0x67c>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d040      	beq.n	8005182 <HAL_DMA_Init+0x5c2>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a4e      	ldr	r2, [pc, #312]	; (8005240 <HAL_DMA_Init+0x680>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d03b      	beq.n	8005182 <HAL_DMA_Init+0x5c2>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a4d      	ldr	r2, [pc, #308]	; (8005244 <HAL_DMA_Init+0x684>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d036      	beq.n	8005182 <HAL_DMA_Init+0x5c2>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a4b      	ldr	r2, [pc, #300]	; (8005248 <HAL_DMA_Init+0x688>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d031      	beq.n	8005182 <HAL_DMA_Init+0x5c2>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a4a      	ldr	r2, [pc, #296]	; (800524c <HAL_DMA_Init+0x68c>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d02c      	beq.n	8005182 <HAL_DMA_Init+0x5c2>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a48      	ldr	r2, [pc, #288]	; (8005250 <HAL_DMA_Init+0x690>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d027      	beq.n	8005182 <HAL_DMA_Init+0x5c2>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a47      	ldr	r2, [pc, #284]	; (8005254 <HAL_DMA_Init+0x694>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d022      	beq.n	8005182 <HAL_DMA_Init+0x5c2>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a45      	ldr	r2, [pc, #276]	; (8005258 <HAL_DMA_Init+0x698>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d01d      	beq.n	8005182 <HAL_DMA_Init+0x5c2>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a44      	ldr	r2, [pc, #272]	; (800525c <HAL_DMA_Init+0x69c>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d018      	beq.n	8005182 <HAL_DMA_Init+0x5c2>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a42      	ldr	r2, [pc, #264]	; (8005260 <HAL_DMA_Init+0x6a0>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d013      	beq.n	8005182 <HAL_DMA_Init+0x5c2>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a41      	ldr	r2, [pc, #260]	; (8005264 <HAL_DMA_Init+0x6a4>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d00e      	beq.n	8005182 <HAL_DMA_Init+0x5c2>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a3f      	ldr	r2, [pc, #252]	; (8005268 <HAL_DMA_Init+0x6a8>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d009      	beq.n	8005182 <HAL_DMA_Init+0x5c2>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a3e      	ldr	r2, [pc, #248]	; (800526c <HAL_DMA_Init+0x6ac>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d004      	beq.n	8005182 <HAL_DMA_Init+0x5c2>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a3c      	ldr	r2, [pc, #240]	; (8005270 <HAL_DMA_Init+0x6b0>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d101      	bne.n	8005186 <HAL_DMA_Init+0x5c6>
 8005182:	2301      	movs	r3, #1
 8005184:	e000      	b.n	8005188 <HAL_DMA_Init+0x5c8>
 8005186:	2300      	movs	r3, #0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d032      	beq.n	80051f2 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f001 f8c9 	bl	8006324 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	2b80      	cmp	r3, #128	; 0x80
 8005198:	d102      	bne.n	80051a0 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685a      	ldr	r2, [r3, #4]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051a8:	b2d2      	uxtb	r2, r2
 80051aa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80051b4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d010      	beq.n	80051e0 <HAL_DMA_Init+0x620>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	2b08      	cmp	r3, #8
 80051c4:	d80c      	bhi.n	80051e0 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f001 f946 	bl	8006458 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80051d0:	2200      	movs	r2, #0
 80051d2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80051dc:	605a      	str	r2, [r3, #4]
 80051de:	e008      	b.n	80051f2 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3718      	adds	r7, #24
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	a7fdabf8 	.word	0xa7fdabf8
 8005210:	cccccccd 	.word	0xcccccccd
 8005214:	40020010 	.word	0x40020010
 8005218:	40020028 	.word	0x40020028
 800521c:	40020040 	.word	0x40020040
 8005220:	40020058 	.word	0x40020058
 8005224:	40020070 	.word	0x40020070
 8005228:	40020088 	.word	0x40020088
 800522c:	400200a0 	.word	0x400200a0
 8005230:	400200b8 	.word	0x400200b8
 8005234:	40020410 	.word	0x40020410
 8005238:	40020428 	.word	0x40020428
 800523c:	40020440 	.word	0x40020440
 8005240:	40020458 	.word	0x40020458
 8005244:	40020470 	.word	0x40020470
 8005248:	40020488 	.word	0x40020488
 800524c:	400204a0 	.word	0x400204a0
 8005250:	400204b8 	.word	0x400204b8
 8005254:	58025408 	.word	0x58025408
 8005258:	5802541c 	.word	0x5802541c
 800525c:	58025430 	.word	0x58025430
 8005260:	58025444 	.word	0x58025444
 8005264:	58025458 	.word	0x58025458
 8005268:	5802546c 	.word	0x5802546c
 800526c:	58025480 	.word	0x58025480
 8005270:	58025494 	.word	0x58025494

08005274 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b08a      	sub	sp, #40	; 0x28
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800527c:	2300      	movs	r3, #0
 800527e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005280:	4b67      	ldr	r3, [pc, #412]	; (8005420 <HAL_DMA_IRQHandler+0x1ac>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a67      	ldr	r2, [pc, #412]	; (8005424 <HAL_DMA_IRQHandler+0x1b0>)
 8005286:	fba2 2303 	umull	r2, r3, r2, r3
 800528a:	0a9b      	lsrs	r3, r3, #10
 800528c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005292:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005298:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800529a:	6a3b      	ldr	r3, [r7, #32]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a5f      	ldr	r2, [pc, #380]	; (8005428 <HAL_DMA_IRQHandler+0x1b4>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d04a      	beq.n	8005346 <HAL_DMA_IRQHandler+0xd2>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a5d      	ldr	r2, [pc, #372]	; (800542c <HAL_DMA_IRQHandler+0x1b8>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d045      	beq.n	8005346 <HAL_DMA_IRQHandler+0xd2>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a5c      	ldr	r2, [pc, #368]	; (8005430 <HAL_DMA_IRQHandler+0x1bc>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d040      	beq.n	8005346 <HAL_DMA_IRQHandler+0xd2>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a5a      	ldr	r2, [pc, #360]	; (8005434 <HAL_DMA_IRQHandler+0x1c0>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d03b      	beq.n	8005346 <HAL_DMA_IRQHandler+0xd2>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a59      	ldr	r2, [pc, #356]	; (8005438 <HAL_DMA_IRQHandler+0x1c4>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d036      	beq.n	8005346 <HAL_DMA_IRQHandler+0xd2>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a57      	ldr	r2, [pc, #348]	; (800543c <HAL_DMA_IRQHandler+0x1c8>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d031      	beq.n	8005346 <HAL_DMA_IRQHandler+0xd2>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a56      	ldr	r2, [pc, #344]	; (8005440 <HAL_DMA_IRQHandler+0x1cc>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d02c      	beq.n	8005346 <HAL_DMA_IRQHandler+0xd2>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a54      	ldr	r2, [pc, #336]	; (8005444 <HAL_DMA_IRQHandler+0x1d0>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d027      	beq.n	8005346 <HAL_DMA_IRQHandler+0xd2>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a53      	ldr	r2, [pc, #332]	; (8005448 <HAL_DMA_IRQHandler+0x1d4>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d022      	beq.n	8005346 <HAL_DMA_IRQHandler+0xd2>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a51      	ldr	r2, [pc, #324]	; (800544c <HAL_DMA_IRQHandler+0x1d8>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d01d      	beq.n	8005346 <HAL_DMA_IRQHandler+0xd2>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a50      	ldr	r2, [pc, #320]	; (8005450 <HAL_DMA_IRQHandler+0x1dc>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d018      	beq.n	8005346 <HAL_DMA_IRQHandler+0xd2>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a4e      	ldr	r2, [pc, #312]	; (8005454 <HAL_DMA_IRQHandler+0x1e0>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d013      	beq.n	8005346 <HAL_DMA_IRQHandler+0xd2>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a4d      	ldr	r2, [pc, #308]	; (8005458 <HAL_DMA_IRQHandler+0x1e4>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d00e      	beq.n	8005346 <HAL_DMA_IRQHandler+0xd2>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a4b      	ldr	r2, [pc, #300]	; (800545c <HAL_DMA_IRQHandler+0x1e8>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d009      	beq.n	8005346 <HAL_DMA_IRQHandler+0xd2>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a4a      	ldr	r2, [pc, #296]	; (8005460 <HAL_DMA_IRQHandler+0x1ec>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d004      	beq.n	8005346 <HAL_DMA_IRQHandler+0xd2>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a48      	ldr	r2, [pc, #288]	; (8005464 <HAL_DMA_IRQHandler+0x1f0>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d101      	bne.n	800534a <HAL_DMA_IRQHandler+0xd6>
 8005346:	2301      	movs	r3, #1
 8005348:	e000      	b.n	800534c <HAL_DMA_IRQHandler+0xd8>
 800534a:	2300      	movs	r3, #0
 800534c:	2b00      	cmp	r3, #0
 800534e:	f000 842b 	beq.w	8005ba8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005356:	f003 031f 	and.w	r3, r3, #31
 800535a:	2208      	movs	r2, #8
 800535c:	409a      	lsls	r2, r3
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	4013      	ands	r3, r2
 8005362:	2b00      	cmp	r3, #0
 8005364:	f000 80a2 	beq.w	80054ac <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a2e      	ldr	r2, [pc, #184]	; (8005428 <HAL_DMA_IRQHandler+0x1b4>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d04a      	beq.n	8005408 <HAL_DMA_IRQHandler+0x194>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a2d      	ldr	r2, [pc, #180]	; (800542c <HAL_DMA_IRQHandler+0x1b8>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d045      	beq.n	8005408 <HAL_DMA_IRQHandler+0x194>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a2b      	ldr	r2, [pc, #172]	; (8005430 <HAL_DMA_IRQHandler+0x1bc>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d040      	beq.n	8005408 <HAL_DMA_IRQHandler+0x194>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a2a      	ldr	r2, [pc, #168]	; (8005434 <HAL_DMA_IRQHandler+0x1c0>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d03b      	beq.n	8005408 <HAL_DMA_IRQHandler+0x194>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a28      	ldr	r2, [pc, #160]	; (8005438 <HAL_DMA_IRQHandler+0x1c4>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d036      	beq.n	8005408 <HAL_DMA_IRQHandler+0x194>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a27      	ldr	r2, [pc, #156]	; (800543c <HAL_DMA_IRQHandler+0x1c8>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d031      	beq.n	8005408 <HAL_DMA_IRQHandler+0x194>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a25      	ldr	r2, [pc, #148]	; (8005440 <HAL_DMA_IRQHandler+0x1cc>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d02c      	beq.n	8005408 <HAL_DMA_IRQHandler+0x194>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a24      	ldr	r2, [pc, #144]	; (8005444 <HAL_DMA_IRQHandler+0x1d0>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d027      	beq.n	8005408 <HAL_DMA_IRQHandler+0x194>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a22      	ldr	r2, [pc, #136]	; (8005448 <HAL_DMA_IRQHandler+0x1d4>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d022      	beq.n	8005408 <HAL_DMA_IRQHandler+0x194>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a21      	ldr	r2, [pc, #132]	; (800544c <HAL_DMA_IRQHandler+0x1d8>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d01d      	beq.n	8005408 <HAL_DMA_IRQHandler+0x194>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a1f      	ldr	r2, [pc, #124]	; (8005450 <HAL_DMA_IRQHandler+0x1dc>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d018      	beq.n	8005408 <HAL_DMA_IRQHandler+0x194>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a1e      	ldr	r2, [pc, #120]	; (8005454 <HAL_DMA_IRQHandler+0x1e0>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d013      	beq.n	8005408 <HAL_DMA_IRQHandler+0x194>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a1c      	ldr	r2, [pc, #112]	; (8005458 <HAL_DMA_IRQHandler+0x1e4>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d00e      	beq.n	8005408 <HAL_DMA_IRQHandler+0x194>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a1b      	ldr	r2, [pc, #108]	; (800545c <HAL_DMA_IRQHandler+0x1e8>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d009      	beq.n	8005408 <HAL_DMA_IRQHandler+0x194>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a19      	ldr	r2, [pc, #100]	; (8005460 <HAL_DMA_IRQHandler+0x1ec>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d004      	beq.n	8005408 <HAL_DMA_IRQHandler+0x194>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a18      	ldr	r2, [pc, #96]	; (8005464 <HAL_DMA_IRQHandler+0x1f0>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d12f      	bne.n	8005468 <HAL_DMA_IRQHandler+0x1f4>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0304 	and.w	r3, r3, #4
 8005412:	2b00      	cmp	r3, #0
 8005414:	bf14      	ite	ne
 8005416:	2301      	movne	r3, #1
 8005418:	2300      	moveq	r3, #0
 800541a:	b2db      	uxtb	r3, r3
 800541c:	e02e      	b.n	800547c <HAL_DMA_IRQHandler+0x208>
 800541e:	bf00      	nop
 8005420:	24000000 	.word	0x24000000
 8005424:	1b4e81b5 	.word	0x1b4e81b5
 8005428:	40020010 	.word	0x40020010
 800542c:	40020028 	.word	0x40020028
 8005430:	40020040 	.word	0x40020040
 8005434:	40020058 	.word	0x40020058
 8005438:	40020070 	.word	0x40020070
 800543c:	40020088 	.word	0x40020088
 8005440:	400200a0 	.word	0x400200a0
 8005444:	400200b8 	.word	0x400200b8
 8005448:	40020410 	.word	0x40020410
 800544c:	40020428 	.word	0x40020428
 8005450:	40020440 	.word	0x40020440
 8005454:	40020458 	.word	0x40020458
 8005458:	40020470 	.word	0x40020470
 800545c:	40020488 	.word	0x40020488
 8005460:	400204a0 	.word	0x400204a0
 8005464:	400204b8 	.word	0x400204b8
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0308 	and.w	r3, r3, #8
 8005472:	2b00      	cmp	r3, #0
 8005474:	bf14      	ite	ne
 8005476:	2301      	movne	r3, #1
 8005478:	2300      	moveq	r3, #0
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b00      	cmp	r3, #0
 800547e:	d015      	beq.n	80054ac <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f022 0204 	bic.w	r2, r2, #4
 800548e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005494:	f003 031f 	and.w	r3, r3, #31
 8005498:	2208      	movs	r2, #8
 800549a:	409a      	lsls	r2, r3
 800549c:	6a3b      	ldr	r3, [r7, #32]
 800549e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a4:	f043 0201 	orr.w	r2, r3, #1
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054b0:	f003 031f 	and.w	r3, r3, #31
 80054b4:	69ba      	ldr	r2, [r7, #24]
 80054b6:	fa22 f303 	lsr.w	r3, r2, r3
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d06e      	beq.n	80055a0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a69      	ldr	r2, [pc, #420]	; (800566c <HAL_DMA_IRQHandler+0x3f8>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d04a      	beq.n	8005562 <HAL_DMA_IRQHandler+0x2ee>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a67      	ldr	r2, [pc, #412]	; (8005670 <HAL_DMA_IRQHandler+0x3fc>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d045      	beq.n	8005562 <HAL_DMA_IRQHandler+0x2ee>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a66      	ldr	r2, [pc, #408]	; (8005674 <HAL_DMA_IRQHandler+0x400>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d040      	beq.n	8005562 <HAL_DMA_IRQHandler+0x2ee>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a64      	ldr	r2, [pc, #400]	; (8005678 <HAL_DMA_IRQHandler+0x404>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d03b      	beq.n	8005562 <HAL_DMA_IRQHandler+0x2ee>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a63      	ldr	r2, [pc, #396]	; (800567c <HAL_DMA_IRQHandler+0x408>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d036      	beq.n	8005562 <HAL_DMA_IRQHandler+0x2ee>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a61      	ldr	r2, [pc, #388]	; (8005680 <HAL_DMA_IRQHandler+0x40c>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d031      	beq.n	8005562 <HAL_DMA_IRQHandler+0x2ee>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a60      	ldr	r2, [pc, #384]	; (8005684 <HAL_DMA_IRQHandler+0x410>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d02c      	beq.n	8005562 <HAL_DMA_IRQHandler+0x2ee>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a5e      	ldr	r2, [pc, #376]	; (8005688 <HAL_DMA_IRQHandler+0x414>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d027      	beq.n	8005562 <HAL_DMA_IRQHandler+0x2ee>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a5d      	ldr	r2, [pc, #372]	; (800568c <HAL_DMA_IRQHandler+0x418>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d022      	beq.n	8005562 <HAL_DMA_IRQHandler+0x2ee>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a5b      	ldr	r2, [pc, #364]	; (8005690 <HAL_DMA_IRQHandler+0x41c>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d01d      	beq.n	8005562 <HAL_DMA_IRQHandler+0x2ee>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a5a      	ldr	r2, [pc, #360]	; (8005694 <HAL_DMA_IRQHandler+0x420>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d018      	beq.n	8005562 <HAL_DMA_IRQHandler+0x2ee>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a58      	ldr	r2, [pc, #352]	; (8005698 <HAL_DMA_IRQHandler+0x424>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d013      	beq.n	8005562 <HAL_DMA_IRQHandler+0x2ee>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a57      	ldr	r2, [pc, #348]	; (800569c <HAL_DMA_IRQHandler+0x428>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d00e      	beq.n	8005562 <HAL_DMA_IRQHandler+0x2ee>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a55      	ldr	r2, [pc, #340]	; (80056a0 <HAL_DMA_IRQHandler+0x42c>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d009      	beq.n	8005562 <HAL_DMA_IRQHandler+0x2ee>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a54      	ldr	r2, [pc, #336]	; (80056a4 <HAL_DMA_IRQHandler+0x430>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d004      	beq.n	8005562 <HAL_DMA_IRQHandler+0x2ee>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a52      	ldr	r2, [pc, #328]	; (80056a8 <HAL_DMA_IRQHandler+0x434>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d10a      	bne.n	8005578 <HAL_DMA_IRQHandler+0x304>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	695b      	ldr	r3, [r3, #20]
 8005568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800556c:	2b00      	cmp	r3, #0
 800556e:	bf14      	ite	ne
 8005570:	2301      	movne	r3, #1
 8005572:	2300      	moveq	r3, #0
 8005574:	b2db      	uxtb	r3, r3
 8005576:	e003      	b.n	8005580 <HAL_DMA_IRQHandler+0x30c>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2300      	movs	r3, #0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00d      	beq.n	80055a0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005588:	f003 031f 	and.w	r3, r3, #31
 800558c:	2201      	movs	r2, #1
 800558e:	409a      	lsls	r2, r3
 8005590:	6a3b      	ldr	r3, [r7, #32]
 8005592:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005598:	f043 0202 	orr.w	r2, r3, #2
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a4:	f003 031f 	and.w	r3, r3, #31
 80055a8:	2204      	movs	r2, #4
 80055aa:	409a      	lsls	r2, r3
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	4013      	ands	r3, r2
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f000 808f 	beq.w	80056d4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a2c      	ldr	r2, [pc, #176]	; (800566c <HAL_DMA_IRQHandler+0x3f8>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d04a      	beq.n	8005656 <HAL_DMA_IRQHandler+0x3e2>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a2a      	ldr	r2, [pc, #168]	; (8005670 <HAL_DMA_IRQHandler+0x3fc>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d045      	beq.n	8005656 <HAL_DMA_IRQHandler+0x3e2>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a29      	ldr	r2, [pc, #164]	; (8005674 <HAL_DMA_IRQHandler+0x400>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d040      	beq.n	8005656 <HAL_DMA_IRQHandler+0x3e2>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a27      	ldr	r2, [pc, #156]	; (8005678 <HAL_DMA_IRQHandler+0x404>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d03b      	beq.n	8005656 <HAL_DMA_IRQHandler+0x3e2>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a26      	ldr	r2, [pc, #152]	; (800567c <HAL_DMA_IRQHandler+0x408>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d036      	beq.n	8005656 <HAL_DMA_IRQHandler+0x3e2>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a24      	ldr	r2, [pc, #144]	; (8005680 <HAL_DMA_IRQHandler+0x40c>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d031      	beq.n	8005656 <HAL_DMA_IRQHandler+0x3e2>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a23      	ldr	r2, [pc, #140]	; (8005684 <HAL_DMA_IRQHandler+0x410>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d02c      	beq.n	8005656 <HAL_DMA_IRQHandler+0x3e2>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a21      	ldr	r2, [pc, #132]	; (8005688 <HAL_DMA_IRQHandler+0x414>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d027      	beq.n	8005656 <HAL_DMA_IRQHandler+0x3e2>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a20      	ldr	r2, [pc, #128]	; (800568c <HAL_DMA_IRQHandler+0x418>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d022      	beq.n	8005656 <HAL_DMA_IRQHandler+0x3e2>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a1e      	ldr	r2, [pc, #120]	; (8005690 <HAL_DMA_IRQHandler+0x41c>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d01d      	beq.n	8005656 <HAL_DMA_IRQHandler+0x3e2>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a1d      	ldr	r2, [pc, #116]	; (8005694 <HAL_DMA_IRQHandler+0x420>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d018      	beq.n	8005656 <HAL_DMA_IRQHandler+0x3e2>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a1b      	ldr	r2, [pc, #108]	; (8005698 <HAL_DMA_IRQHandler+0x424>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d013      	beq.n	8005656 <HAL_DMA_IRQHandler+0x3e2>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a1a      	ldr	r2, [pc, #104]	; (800569c <HAL_DMA_IRQHandler+0x428>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d00e      	beq.n	8005656 <HAL_DMA_IRQHandler+0x3e2>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a18      	ldr	r2, [pc, #96]	; (80056a0 <HAL_DMA_IRQHandler+0x42c>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d009      	beq.n	8005656 <HAL_DMA_IRQHandler+0x3e2>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a17      	ldr	r2, [pc, #92]	; (80056a4 <HAL_DMA_IRQHandler+0x430>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d004      	beq.n	8005656 <HAL_DMA_IRQHandler+0x3e2>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a15      	ldr	r2, [pc, #84]	; (80056a8 <HAL_DMA_IRQHandler+0x434>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d12a      	bne.n	80056ac <HAL_DMA_IRQHandler+0x438>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0302 	and.w	r3, r3, #2
 8005660:	2b00      	cmp	r3, #0
 8005662:	bf14      	ite	ne
 8005664:	2301      	movne	r3, #1
 8005666:	2300      	moveq	r3, #0
 8005668:	b2db      	uxtb	r3, r3
 800566a:	e023      	b.n	80056b4 <HAL_DMA_IRQHandler+0x440>
 800566c:	40020010 	.word	0x40020010
 8005670:	40020028 	.word	0x40020028
 8005674:	40020040 	.word	0x40020040
 8005678:	40020058 	.word	0x40020058
 800567c:	40020070 	.word	0x40020070
 8005680:	40020088 	.word	0x40020088
 8005684:	400200a0 	.word	0x400200a0
 8005688:	400200b8 	.word	0x400200b8
 800568c:	40020410 	.word	0x40020410
 8005690:	40020428 	.word	0x40020428
 8005694:	40020440 	.word	0x40020440
 8005698:	40020458 	.word	0x40020458
 800569c:	40020470 	.word	0x40020470
 80056a0:	40020488 	.word	0x40020488
 80056a4:	400204a0 	.word	0x400204a0
 80056a8:	400204b8 	.word	0x400204b8
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2300      	movs	r3, #0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00d      	beq.n	80056d4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056bc:	f003 031f 	and.w	r3, r3, #31
 80056c0:	2204      	movs	r2, #4
 80056c2:	409a      	lsls	r2, r3
 80056c4:	6a3b      	ldr	r3, [r7, #32]
 80056c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056cc:	f043 0204 	orr.w	r2, r3, #4
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056d8:	f003 031f 	and.w	r3, r3, #31
 80056dc:	2210      	movs	r2, #16
 80056de:	409a      	lsls	r2, r3
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	4013      	ands	r3, r2
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f000 80a6 	beq.w	8005836 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a85      	ldr	r2, [pc, #532]	; (8005904 <HAL_DMA_IRQHandler+0x690>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d04a      	beq.n	800578a <HAL_DMA_IRQHandler+0x516>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a83      	ldr	r2, [pc, #524]	; (8005908 <HAL_DMA_IRQHandler+0x694>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d045      	beq.n	800578a <HAL_DMA_IRQHandler+0x516>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a82      	ldr	r2, [pc, #520]	; (800590c <HAL_DMA_IRQHandler+0x698>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d040      	beq.n	800578a <HAL_DMA_IRQHandler+0x516>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a80      	ldr	r2, [pc, #512]	; (8005910 <HAL_DMA_IRQHandler+0x69c>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d03b      	beq.n	800578a <HAL_DMA_IRQHandler+0x516>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a7f      	ldr	r2, [pc, #508]	; (8005914 <HAL_DMA_IRQHandler+0x6a0>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d036      	beq.n	800578a <HAL_DMA_IRQHandler+0x516>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a7d      	ldr	r2, [pc, #500]	; (8005918 <HAL_DMA_IRQHandler+0x6a4>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d031      	beq.n	800578a <HAL_DMA_IRQHandler+0x516>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a7c      	ldr	r2, [pc, #496]	; (800591c <HAL_DMA_IRQHandler+0x6a8>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d02c      	beq.n	800578a <HAL_DMA_IRQHandler+0x516>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a7a      	ldr	r2, [pc, #488]	; (8005920 <HAL_DMA_IRQHandler+0x6ac>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d027      	beq.n	800578a <HAL_DMA_IRQHandler+0x516>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a79      	ldr	r2, [pc, #484]	; (8005924 <HAL_DMA_IRQHandler+0x6b0>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d022      	beq.n	800578a <HAL_DMA_IRQHandler+0x516>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a77      	ldr	r2, [pc, #476]	; (8005928 <HAL_DMA_IRQHandler+0x6b4>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d01d      	beq.n	800578a <HAL_DMA_IRQHandler+0x516>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a76      	ldr	r2, [pc, #472]	; (800592c <HAL_DMA_IRQHandler+0x6b8>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d018      	beq.n	800578a <HAL_DMA_IRQHandler+0x516>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a74      	ldr	r2, [pc, #464]	; (8005930 <HAL_DMA_IRQHandler+0x6bc>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d013      	beq.n	800578a <HAL_DMA_IRQHandler+0x516>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a73      	ldr	r2, [pc, #460]	; (8005934 <HAL_DMA_IRQHandler+0x6c0>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d00e      	beq.n	800578a <HAL_DMA_IRQHandler+0x516>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a71      	ldr	r2, [pc, #452]	; (8005938 <HAL_DMA_IRQHandler+0x6c4>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d009      	beq.n	800578a <HAL_DMA_IRQHandler+0x516>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a70      	ldr	r2, [pc, #448]	; (800593c <HAL_DMA_IRQHandler+0x6c8>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d004      	beq.n	800578a <HAL_DMA_IRQHandler+0x516>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a6e      	ldr	r2, [pc, #440]	; (8005940 <HAL_DMA_IRQHandler+0x6cc>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d10a      	bne.n	80057a0 <HAL_DMA_IRQHandler+0x52c>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0308 	and.w	r3, r3, #8
 8005794:	2b00      	cmp	r3, #0
 8005796:	bf14      	ite	ne
 8005798:	2301      	movne	r3, #1
 800579a:	2300      	moveq	r3, #0
 800579c:	b2db      	uxtb	r3, r3
 800579e:	e009      	b.n	80057b4 <HAL_DMA_IRQHandler+0x540>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0304 	and.w	r3, r3, #4
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	bf14      	ite	ne
 80057ae:	2301      	movne	r3, #1
 80057b0:	2300      	moveq	r3, #0
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d03e      	beq.n	8005836 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057bc:	f003 031f 	and.w	r3, r3, #31
 80057c0:	2210      	movs	r2, #16
 80057c2:	409a      	lsls	r2, r3
 80057c4:	6a3b      	ldr	r3, [r7, #32]
 80057c6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d018      	beq.n	8005808 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d108      	bne.n	80057f6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d024      	beq.n	8005836 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	4798      	blx	r3
 80057f4:	e01f      	b.n	8005836 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d01b      	beq.n	8005836 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	4798      	blx	r3
 8005806:	e016      	b.n	8005836 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005812:	2b00      	cmp	r3, #0
 8005814:	d107      	bne.n	8005826 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f022 0208 	bic.w	r2, r2, #8
 8005824:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582a:	2b00      	cmp	r3, #0
 800582c:	d003      	beq.n	8005836 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800583a:	f003 031f 	and.w	r3, r3, #31
 800583e:	2220      	movs	r2, #32
 8005840:	409a      	lsls	r2, r3
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	4013      	ands	r3, r2
 8005846:	2b00      	cmp	r3, #0
 8005848:	f000 8110 	beq.w	8005a6c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a2c      	ldr	r2, [pc, #176]	; (8005904 <HAL_DMA_IRQHandler+0x690>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d04a      	beq.n	80058ec <HAL_DMA_IRQHandler+0x678>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a2b      	ldr	r2, [pc, #172]	; (8005908 <HAL_DMA_IRQHandler+0x694>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d045      	beq.n	80058ec <HAL_DMA_IRQHandler+0x678>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a29      	ldr	r2, [pc, #164]	; (800590c <HAL_DMA_IRQHandler+0x698>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d040      	beq.n	80058ec <HAL_DMA_IRQHandler+0x678>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a28      	ldr	r2, [pc, #160]	; (8005910 <HAL_DMA_IRQHandler+0x69c>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d03b      	beq.n	80058ec <HAL_DMA_IRQHandler+0x678>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a26      	ldr	r2, [pc, #152]	; (8005914 <HAL_DMA_IRQHandler+0x6a0>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d036      	beq.n	80058ec <HAL_DMA_IRQHandler+0x678>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a25      	ldr	r2, [pc, #148]	; (8005918 <HAL_DMA_IRQHandler+0x6a4>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d031      	beq.n	80058ec <HAL_DMA_IRQHandler+0x678>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a23      	ldr	r2, [pc, #140]	; (800591c <HAL_DMA_IRQHandler+0x6a8>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d02c      	beq.n	80058ec <HAL_DMA_IRQHandler+0x678>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a22      	ldr	r2, [pc, #136]	; (8005920 <HAL_DMA_IRQHandler+0x6ac>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d027      	beq.n	80058ec <HAL_DMA_IRQHandler+0x678>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a20      	ldr	r2, [pc, #128]	; (8005924 <HAL_DMA_IRQHandler+0x6b0>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d022      	beq.n	80058ec <HAL_DMA_IRQHandler+0x678>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a1f      	ldr	r2, [pc, #124]	; (8005928 <HAL_DMA_IRQHandler+0x6b4>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d01d      	beq.n	80058ec <HAL_DMA_IRQHandler+0x678>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a1d      	ldr	r2, [pc, #116]	; (800592c <HAL_DMA_IRQHandler+0x6b8>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d018      	beq.n	80058ec <HAL_DMA_IRQHandler+0x678>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a1c      	ldr	r2, [pc, #112]	; (8005930 <HAL_DMA_IRQHandler+0x6bc>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d013      	beq.n	80058ec <HAL_DMA_IRQHandler+0x678>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a1a      	ldr	r2, [pc, #104]	; (8005934 <HAL_DMA_IRQHandler+0x6c0>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d00e      	beq.n	80058ec <HAL_DMA_IRQHandler+0x678>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a19      	ldr	r2, [pc, #100]	; (8005938 <HAL_DMA_IRQHandler+0x6c4>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d009      	beq.n	80058ec <HAL_DMA_IRQHandler+0x678>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a17      	ldr	r2, [pc, #92]	; (800593c <HAL_DMA_IRQHandler+0x6c8>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d004      	beq.n	80058ec <HAL_DMA_IRQHandler+0x678>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a16      	ldr	r2, [pc, #88]	; (8005940 <HAL_DMA_IRQHandler+0x6cc>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d12b      	bne.n	8005944 <HAL_DMA_IRQHandler+0x6d0>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 0310 	and.w	r3, r3, #16
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	bf14      	ite	ne
 80058fa:	2301      	movne	r3, #1
 80058fc:	2300      	moveq	r3, #0
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	e02a      	b.n	8005958 <HAL_DMA_IRQHandler+0x6e4>
 8005902:	bf00      	nop
 8005904:	40020010 	.word	0x40020010
 8005908:	40020028 	.word	0x40020028
 800590c:	40020040 	.word	0x40020040
 8005910:	40020058 	.word	0x40020058
 8005914:	40020070 	.word	0x40020070
 8005918:	40020088 	.word	0x40020088
 800591c:	400200a0 	.word	0x400200a0
 8005920:	400200b8 	.word	0x400200b8
 8005924:	40020410 	.word	0x40020410
 8005928:	40020428 	.word	0x40020428
 800592c:	40020440 	.word	0x40020440
 8005930:	40020458 	.word	0x40020458
 8005934:	40020470 	.word	0x40020470
 8005938:	40020488 	.word	0x40020488
 800593c:	400204a0 	.word	0x400204a0
 8005940:	400204b8 	.word	0x400204b8
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0302 	and.w	r3, r3, #2
 800594e:	2b00      	cmp	r3, #0
 8005950:	bf14      	ite	ne
 8005952:	2301      	movne	r3, #1
 8005954:	2300      	moveq	r3, #0
 8005956:	b2db      	uxtb	r3, r3
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 8087 	beq.w	8005a6c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005962:	f003 031f 	and.w	r3, r3, #31
 8005966:	2220      	movs	r2, #32
 8005968:	409a      	lsls	r2, r3
 800596a:	6a3b      	ldr	r3, [r7, #32]
 800596c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b04      	cmp	r3, #4
 8005978:	d139      	bne.n	80059ee <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f022 0216 	bic.w	r2, r2, #22
 8005988:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	695a      	ldr	r2, [r3, #20]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005998:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d103      	bne.n	80059aa <HAL_DMA_IRQHandler+0x736>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d007      	beq.n	80059ba <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f022 0208 	bic.w	r2, r2, #8
 80059b8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059be:	f003 031f 	and.w	r3, r3, #31
 80059c2:	223f      	movs	r2, #63	; 0x3f
 80059c4:	409a      	lsls	r2, r3
 80059c6:	6a3b      	ldr	r3, [r7, #32]
 80059c8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059de:	2b00      	cmp	r3, #0
 80059e0:	f000 834a 	beq.w	8006078 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	4798      	blx	r3
          }
          return;
 80059ec:	e344      	b.n	8006078 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d018      	beq.n	8005a2e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d108      	bne.n	8005a1c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d02c      	beq.n	8005a6c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	4798      	blx	r3
 8005a1a:	e027      	b.n	8005a6c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d023      	beq.n	8005a6c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	4798      	blx	r3
 8005a2c:	e01e      	b.n	8005a6c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d10f      	bne.n	8005a5c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f022 0210 	bic.w	r2, r2, #16
 8005a4a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d003      	beq.n	8005a6c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f000 8306 	beq.w	8006082 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	f000 8088 	beq.w	8005b94 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2204      	movs	r2, #4
 8005a88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a7a      	ldr	r2, [pc, #488]	; (8005c7c <HAL_DMA_IRQHandler+0xa08>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d04a      	beq.n	8005b2c <HAL_DMA_IRQHandler+0x8b8>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a79      	ldr	r2, [pc, #484]	; (8005c80 <HAL_DMA_IRQHandler+0xa0c>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d045      	beq.n	8005b2c <HAL_DMA_IRQHandler+0x8b8>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a77      	ldr	r2, [pc, #476]	; (8005c84 <HAL_DMA_IRQHandler+0xa10>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d040      	beq.n	8005b2c <HAL_DMA_IRQHandler+0x8b8>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a76      	ldr	r2, [pc, #472]	; (8005c88 <HAL_DMA_IRQHandler+0xa14>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d03b      	beq.n	8005b2c <HAL_DMA_IRQHandler+0x8b8>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a74      	ldr	r2, [pc, #464]	; (8005c8c <HAL_DMA_IRQHandler+0xa18>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d036      	beq.n	8005b2c <HAL_DMA_IRQHandler+0x8b8>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a73      	ldr	r2, [pc, #460]	; (8005c90 <HAL_DMA_IRQHandler+0xa1c>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d031      	beq.n	8005b2c <HAL_DMA_IRQHandler+0x8b8>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a71      	ldr	r2, [pc, #452]	; (8005c94 <HAL_DMA_IRQHandler+0xa20>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d02c      	beq.n	8005b2c <HAL_DMA_IRQHandler+0x8b8>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a70      	ldr	r2, [pc, #448]	; (8005c98 <HAL_DMA_IRQHandler+0xa24>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d027      	beq.n	8005b2c <HAL_DMA_IRQHandler+0x8b8>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a6e      	ldr	r2, [pc, #440]	; (8005c9c <HAL_DMA_IRQHandler+0xa28>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d022      	beq.n	8005b2c <HAL_DMA_IRQHandler+0x8b8>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a6d      	ldr	r2, [pc, #436]	; (8005ca0 <HAL_DMA_IRQHandler+0xa2c>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d01d      	beq.n	8005b2c <HAL_DMA_IRQHandler+0x8b8>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a6b      	ldr	r2, [pc, #428]	; (8005ca4 <HAL_DMA_IRQHandler+0xa30>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d018      	beq.n	8005b2c <HAL_DMA_IRQHandler+0x8b8>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a6a      	ldr	r2, [pc, #424]	; (8005ca8 <HAL_DMA_IRQHandler+0xa34>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d013      	beq.n	8005b2c <HAL_DMA_IRQHandler+0x8b8>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a68      	ldr	r2, [pc, #416]	; (8005cac <HAL_DMA_IRQHandler+0xa38>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d00e      	beq.n	8005b2c <HAL_DMA_IRQHandler+0x8b8>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a67      	ldr	r2, [pc, #412]	; (8005cb0 <HAL_DMA_IRQHandler+0xa3c>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d009      	beq.n	8005b2c <HAL_DMA_IRQHandler+0x8b8>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a65      	ldr	r2, [pc, #404]	; (8005cb4 <HAL_DMA_IRQHandler+0xa40>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d004      	beq.n	8005b2c <HAL_DMA_IRQHandler+0x8b8>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a64      	ldr	r2, [pc, #400]	; (8005cb8 <HAL_DMA_IRQHandler+0xa44>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d108      	bne.n	8005b3e <HAL_DMA_IRQHandler+0x8ca>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f022 0201 	bic.w	r2, r2, #1
 8005b3a:	601a      	str	r2, [r3, #0]
 8005b3c:	e007      	b.n	8005b4e <HAL_DMA_IRQHandler+0x8da>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f022 0201 	bic.w	r2, r2, #1
 8005b4c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	3301      	adds	r3, #1
 8005b52:	60fb      	str	r3, [r7, #12]
 8005b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d307      	bcc.n	8005b6a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d1f2      	bne.n	8005b4e <HAL_DMA_IRQHandler+0x8da>
 8005b68:	e000      	b.n	8005b6c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005b6a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0301 	and.w	r3, r3, #1
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d004      	beq.n	8005b84 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2203      	movs	r2, #3
 8005b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005b82:	e003      	b.n	8005b8c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f000 8272 	beq.w	8006082 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	4798      	blx	r3
 8005ba6:	e26c      	b.n	8006082 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a43      	ldr	r2, [pc, #268]	; (8005cbc <HAL_DMA_IRQHandler+0xa48>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d022      	beq.n	8005bf8 <HAL_DMA_IRQHandler+0x984>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a42      	ldr	r2, [pc, #264]	; (8005cc0 <HAL_DMA_IRQHandler+0xa4c>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d01d      	beq.n	8005bf8 <HAL_DMA_IRQHandler+0x984>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a40      	ldr	r2, [pc, #256]	; (8005cc4 <HAL_DMA_IRQHandler+0xa50>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d018      	beq.n	8005bf8 <HAL_DMA_IRQHandler+0x984>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a3f      	ldr	r2, [pc, #252]	; (8005cc8 <HAL_DMA_IRQHandler+0xa54>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d013      	beq.n	8005bf8 <HAL_DMA_IRQHandler+0x984>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a3d      	ldr	r2, [pc, #244]	; (8005ccc <HAL_DMA_IRQHandler+0xa58>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d00e      	beq.n	8005bf8 <HAL_DMA_IRQHandler+0x984>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a3c      	ldr	r2, [pc, #240]	; (8005cd0 <HAL_DMA_IRQHandler+0xa5c>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d009      	beq.n	8005bf8 <HAL_DMA_IRQHandler+0x984>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a3a      	ldr	r2, [pc, #232]	; (8005cd4 <HAL_DMA_IRQHandler+0xa60>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d004      	beq.n	8005bf8 <HAL_DMA_IRQHandler+0x984>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a39      	ldr	r2, [pc, #228]	; (8005cd8 <HAL_DMA_IRQHandler+0xa64>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d101      	bne.n	8005bfc <HAL_DMA_IRQHandler+0x988>
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e000      	b.n	8005bfe <HAL_DMA_IRQHandler+0x98a>
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f000 823f 	beq.w	8006082 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c10:	f003 031f 	and.w	r3, r3, #31
 8005c14:	2204      	movs	r2, #4
 8005c16:	409a      	lsls	r2, r3
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	f000 80cd 	beq.w	8005dbc <HAL_DMA_IRQHandler+0xb48>
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	f003 0304 	and.w	r3, r3, #4
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f000 80c7 	beq.w	8005dbc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c32:	f003 031f 	and.w	r3, r3, #31
 8005c36:	2204      	movs	r2, #4
 8005c38:	409a      	lsls	r2, r3
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d049      	beq.n	8005cdc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d109      	bne.n	8005c66 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	f000 8210 	beq.w	800607c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c64:	e20a      	b.n	800607c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	f000 8206 	beq.w	800607c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c78:	e200      	b.n	800607c <HAL_DMA_IRQHandler+0xe08>
 8005c7a:	bf00      	nop
 8005c7c:	40020010 	.word	0x40020010
 8005c80:	40020028 	.word	0x40020028
 8005c84:	40020040 	.word	0x40020040
 8005c88:	40020058 	.word	0x40020058
 8005c8c:	40020070 	.word	0x40020070
 8005c90:	40020088 	.word	0x40020088
 8005c94:	400200a0 	.word	0x400200a0
 8005c98:	400200b8 	.word	0x400200b8
 8005c9c:	40020410 	.word	0x40020410
 8005ca0:	40020428 	.word	0x40020428
 8005ca4:	40020440 	.word	0x40020440
 8005ca8:	40020458 	.word	0x40020458
 8005cac:	40020470 	.word	0x40020470
 8005cb0:	40020488 	.word	0x40020488
 8005cb4:	400204a0 	.word	0x400204a0
 8005cb8:	400204b8 	.word	0x400204b8
 8005cbc:	58025408 	.word	0x58025408
 8005cc0:	5802541c 	.word	0x5802541c
 8005cc4:	58025430 	.word	0x58025430
 8005cc8:	58025444 	.word	0x58025444
 8005ccc:	58025458 	.word	0x58025458
 8005cd0:	5802546c 	.word	0x5802546c
 8005cd4:	58025480 	.word	0x58025480
 8005cd8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	f003 0320 	and.w	r3, r3, #32
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d160      	bne.n	8005da8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a7f      	ldr	r2, [pc, #508]	; (8005ee8 <HAL_DMA_IRQHandler+0xc74>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d04a      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xb12>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a7d      	ldr	r2, [pc, #500]	; (8005eec <HAL_DMA_IRQHandler+0xc78>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d045      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xb12>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a7c      	ldr	r2, [pc, #496]	; (8005ef0 <HAL_DMA_IRQHandler+0xc7c>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d040      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xb12>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a7a      	ldr	r2, [pc, #488]	; (8005ef4 <HAL_DMA_IRQHandler+0xc80>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d03b      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xb12>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a79      	ldr	r2, [pc, #484]	; (8005ef8 <HAL_DMA_IRQHandler+0xc84>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d036      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xb12>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a77      	ldr	r2, [pc, #476]	; (8005efc <HAL_DMA_IRQHandler+0xc88>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d031      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xb12>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a76      	ldr	r2, [pc, #472]	; (8005f00 <HAL_DMA_IRQHandler+0xc8c>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d02c      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xb12>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a74      	ldr	r2, [pc, #464]	; (8005f04 <HAL_DMA_IRQHandler+0xc90>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d027      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xb12>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a73      	ldr	r2, [pc, #460]	; (8005f08 <HAL_DMA_IRQHandler+0xc94>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d022      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xb12>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a71      	ldr	r2, [pc, #452]	; (8005f0c <HAL_DMA_IRQHandler+0xc98>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d01d      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xb12>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a70      	ldr	r2, [pc, #448]	; (8005f10 <HAL_DMA_IRQHandler+0xc9c>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d018      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xb12>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a6e      	ldr	r2, [pc, #440]	; (8005f14 <HAL_DMA_IRQHandler+0xca0>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d013      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xb12>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a6d      	ldr	r2, [pc, #436]	; (8005f18 <HAL_DMA_IRQHandler+0xca4>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d00e      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xb12>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a6b      	ldr	r2, [pc, #428]	; (8005f1c <HAL_DMA_IRQHandler+0xca8>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d009      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xb12>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a6a      	ldr	r2, [pc, #424]	; (8005f20 <HAL_DMA_IRQHandler+0xcac>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d004      	beq.n	8005d86 <HAL_DMA_IRQHandler+0xb12>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a68      	ldr	r2, [pc, #416]	; (8005f24 <HAL_DMA_IRQHandler+0xcb0>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d108      	bne.n	8005d98 <HAL_DMA_IRQHandler+0xb24>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f022 0208 	bic.w	r2, r2, #8
 8005d94:	601a      	str	r2, [r3, #0]
 8005d96:	e007      	b.n	8005da8 <HAL_DMA_IRQHandler+0xb34>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f022 0204 	bic.w	r2, r2, #4
 8005da6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 8165 	beq.w	800607c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005dba:	e15f      	b.n	800607c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dc0:	f003 031f 	and.w	r3, r3, #31
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	409a      	lsls	r2, r3
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	4013      	ands	r3, r2
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f000 80c5 	beq.w	8005f5c <HAL_DMA_IRQHandler+0xce8>
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	f003 0302 	and.w	r3, r3, #2
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f000 80bf 	beq.w	8005f5c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005de2:	f003 031f 	and.w	r3, r3, #31
 8005de6:	2202      	movs	r2, #2
 8005de8:	409a      	lsls	r2, r3
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d018      	beq.n	8005e2a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d109      	bne.n	8005e16 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	f000 813a 	beq.w	8006080 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e14:	e134      	b.n	8006080 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f000 8130 	beq.w	8006080 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e28:	e12a      	b.n	8006080 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	f003 0320 	and.w	r3, r3, #32
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f040 8089 	bne.w	8005f48 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a2b      	ldr	r2, [pc, #172]	; (8005ee8 <HAL_DMA_IRQHandler+0xc74>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d04a      	beq.n	8005ed6 <HAL_DMA_IRQHandler+0xc62>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a29      	ldr	r2, [pc, #164]	; (8005eec <HAL_DMA_IRQHandler+0xc78>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d045      	beq.n	8005ed6 <HAL_DMA_IRQHandler+0xc62>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a28      	ldr	r2, [pc, #160]	; (8005ef0 <HAL_DMA_IRQHandler+0xc7c>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d040      	beq.n	8005ed6 <HAL_DMA_IRQHandler+0xc62>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a26      	ldr	r2, [pc, #152]	; (8005ef4 <HAL_DMA_IRQHandler+0xc80>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d03b      	beq.n	8005ed6 <HAL_DMA_IRQHandler+0xc62>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a25      	ldr	r2, [pc, #148]	; (8005ef8 <HAL_DMA_IRQHandler+0xc84>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d036      	beq.n	8005ed6 <HAL_DMA_IRQHandler+0xc62>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a23      	ldr	r2, [pc, #140]	; (8005efc <HAL_DMA_IRQHandler+0xc88>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d031      	beq.n	8005ed6 <HAL_DMA_IRQHandler+0xc62>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a22      	ldr	r2, [pc, #136]	; (8005f00 <HAL_DMA_IRQHandler+0xc8c>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d02c      	beq.n	8005ed6 <HAL_DMA_IRQHandler+0xc62>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a20      	ldr	r2, [pc, #128]	; (8005f04 <HAL_DMA_IRQHandler+0xc90>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d027      	beq.n	8005ed6 <HAL_DMA_IRQHandler+0xc62>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a1f      	ldr	r2, [pc, #124]	; (8005f08 <HAL_DMA_IRQHandler+0xc94>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d022      	beq.n	8005ed6 <HAL_DMA_IRQHandler+0xc62>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a1d      	ldr	r2, [pc, #116]	; (8005f0c <HAL_DMA_IRQHandler+0xc98>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d01d      	beq.n	8005ed6 <HAL_DMA_IRQHandler+0xc62>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a1c      	ldr	r2, [pc, #112]	; (8005f10 <HAL_DMA_IRQHandler+0xc9c>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d018      	beq.n	8005ed6 <HAL_DMA_IRQHandler+0xc62>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a1a      	ldr	r2, [pc, #104]	; (8005f14 <HAL_DMA_IRQHandler+0xca0>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d013      	beq.n	8005ed6 <HAL_DMA_IRQHandler+0xc62>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a19      	ldr	r2, [pc, #100]	; (8005f18 <HAL_DMA_IRQHandler+0xca4>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d00e      	beq.n	8005ed6 <HAL_DMA_IRQHandler+0xc62>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a17      	ldr	r2, [pc, #92]	; (8005f1c <HAL_DMA_IRQHandler+0xca8>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d009      	beq.n	8005ed6 <HAL_DMA_IRQHandler+0xc62>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a16      	ldr	r2, [pc, #88]	; (8005f20 <HAL_DMA_IRQHandler+0xcac>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d004      	beq.n	8005ed6 <HAL_DMA_IRQHandler+0xc62>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a14      	ldr	r2, [pc, #80]	; (8005f24 <HAL_DMA_IRQHandler+0xcb0>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d128      	bne.n	8005f28 <HAL_DMA_IRQHandler+0xcb4>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f022 0214 	bic.w	r2, r2, #20
 8005ee4:	601a      	str	r2, [r3, #0]
 8005ee6:	e027      	b.n	8005f38 <HAL_DMA_IRQHandler+0xcc4>
 8005ee8:	40020010 	.word	0x40020010
 8005eec:	40020028 	.word	0x40020028
 8005ef0:	40020040 	.word	0x40020040
 8005ef4:	40020058 	.word	0x40020058
 8005ef8:	40020070 	.word	0x40020070
 8005efc:	40020088 	.word	0x40020088
 8005f00:	400200a0 	.word	0x400200a0
 8005f04:	400200b8 	.word	0x400200b8
 8005f08:	40020410 	.word	0x40020410
 8005f0c:	40020428 	.word	0x40020428
 8005f10:	40020440 	.word	0x40020440
 8005f14:	40020458 	.word	0x40020458
 8005f18:	40020470 	.word	0x40020470
 8005f1c:	40020488 	.word	0x40020488
 8005f20:	400204a0 	.word	0x400204a0
 8005f24:	400204b8 	.word	0x400204b8
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681a      	ldr	r2, [r3, #0]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f022 020a 	bic.w	r2, r2, #10
 8005f36:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f000 8097 	beq.w	8006080 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f5a:	e091      	b.n	8006080 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f60:	f003 031f 	and.w	r3, r3, #31
 8005f64:	2208      	movs	r2, #8
 8005f66:	409a      	lsls	r2, r3
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f000 8088 	beq.w	8006082 <HAL_DMA_IRQHandler+0xe0e>
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	f003 0308 	and.w	r3, r3, #8
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f000 8082 	beq.w	8006082 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a41      	ldr	r2, [pc, #260]	; (8006088 <HAL_DMA_IRQHandler+0xe14>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d04a      	beq.n	800601e <HAL_DMA_IRQHandler+0xdaa>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a3f      	ldr	r2, [pc, #252]	; (800608c <HAL_DMA_IRQHandler+0xe18>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d045      	beq.n	800601e <HAL_DMA_IRQHandler+0xdaa>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a3e      	ldr	r2, [pc, #248]	; (8006090 <HAL_DMA_IRQHandler+0xe1c>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d040      	beq.n	800601e <HAL_DMA_IRQHandler+0xdaa>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a3c      	ldr	r2, [pc, #240]	; (8006094 <HAL_DMA_IRQHandler+0xe20>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d03b      	beq.n	800601e <HAL_DMA_IRQHandler+0xdaa>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a3b      	ldr	r2, [pc, #236]	; (8006098 <HAL_DMA_IRQHandler+0xe24>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d036      	beq.n	800601e <HAL_DMA_IRQHandler+0xdaa>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a39      	ldr	r2, [pc, #228]	; (800609c <HAL_DMA_IRQHandler+0xe28>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d031      	beq.n	800601e <HAL_DMA_IRQHandler+0xdaa>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a38      	ldr	r2, [pc, #224]	; (80060a0 <HAL_DMA_IRQHandler+0xe2c>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d02c      	beq.n	800601e <HAL_DMA_IRQHandler+0xdaa>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a36      	ldr	r2, [pc, #216]	; (80060a4 <HAL_DMA_IRQHandler+0xe30>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d027      	beq.n	800601e <HAL_DMA_IRQHandler+0xdaa>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a35      	ldr	r2, [pc, #212]	; (80060a8 <HAL_DMA_IRQHandler+0xe34>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d022      	beq.n	800601e <HAL_DMA_IRQHandler+0xdaa>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a33      	ldr	r2, [pc, #204]	; (80060ac <HAL_DMA_IRQHandler+0xe38>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d01d      	beq.n	800601e <HAL_DMA_IRQHandler+0xdaa>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a32      	ldr	r2, [pc, #200]	; (80060b0 <HAL_DMA_IRQHandler+0xe3c>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d018      	beq.n	800601e <HAL_DMA_IRQHandler+0xdaa>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a30      	ldr	r2, [pc, #192]	; (80060b4 <HAL_DMA_IRQHandler+0xe40>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d013      	beq.n	800601e <HAL_DMA_IRQHandler+0xdaa>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a2f      	ldr	r2, [pc, #188]	; (80060b8 <HAL_DMA_IRQHandler+0xe44>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d00e      	beq.n	800601e <HAL_DMA_IRQHandler+0xdaa>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a2d      	ldr	r2, [pc, #180]	; (80060bc <HAL_DMA_IRQHandler+0xe48>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d009      	beq.n	800601e <HAL_DMA_IRQHandler+0xdaa>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a2c      	ldr	r2, [pc, #176]	; (80060c0 <HAL_DMA_IRQHandler+0xe4c>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d004      	beq.n	800601e <HAL_DMA_IRQHandler+0xdaa>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a2a      	ldr	r2, [pc, #168]	; (80060c4 <HAL_DMA_IRQHandler+0xe50>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d108      	bne.n	8006030 <HAL_DMA_IRQHandler+0xdbc>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f022 021c 	bic.w	r2, r2, #28
 800602c:	601a      	str	r2, [r3, #0]
 800602e:	e007      	b.n	8006040 <HAL_DMA_IRQHandler+0xdcc>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f022 020e 	bic.w	r2, r2, #14
 800603e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006044:	f003 031f 	and.w	r3, r3, #31
 8006048:	2201      	movs	r2, #1
 800604a:	409a      	lsls	r2, r3
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800606a:	2b00      	cmp	r3, #0
 800606c:	d009      	beq.n	8006082 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	4798      	blx	r3
 8006076:	e004      	b.n	8006082 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006078:	bf00      	nop
 800607a:	e002      	b.n	8006082 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800607c:	bf00      	nop
 800607e:	e000      	b.n	8006082 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006080:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006082:	3728      	adds	r7, #40	; 0x28
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	40020010 	.word	0x40020010
 800608c:	40020028 	.word	0x40020028
 8006090:	40020040 	.word	0x40020040
 8006094:	40020058 	.word	0x40020058
 8006098:	40020070 	.word	0x40020070
 800609c:	40020088 	.word	0x40020088
 80060a0:	400200a0 	.word	0x400200a0
 80060a4:	400200b8 	.word	0x400200b8
 80060a8:	40020410 	.word	0x40020410
 80060ac:	40020428 	.word	0x40020428
 80060b0:	40020440 	.word	0x40020440
 80060b4:	40020458 	.word	0x40020458
 80060b8:	40020470 	.word	0x40020470
 80060bc:	40020488 	.word	0x40020488
 80060c0:	400204a0 	.word	0x400204a0
 80060c4:	400204b8 	.word	0x400204b8

080060c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a42      	ldr	r2, [pc, #264]	; (80061e0 <DMA_CalcBaseAndBitshift+0x118>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d04a      	beq.n	8006170 <DMA_CalcBaseAndBitshift+0xa8>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a41      	ldr	r2, [pc, #260]	; (80061e4 <DMA_CalcBaseAndBitshift+0x11c>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d045      	beq.n	8006170 <DMA_CalcBaseAndBitshift+0xa8>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a3f      	ldr	r2, [pc, #252]	; (80061e8 <DMA_CalcBaseAndBitshift+0x120>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d040      	beq.n	8006170 <DMA_CalcBaseAndBitshift+0xa8>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a3e      	ldr	r2, [pc, #248]	; (80061ec <DMA_CalcBaseAndBitshift+0x124>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d03b      	beq.n	8006170 <DMA_CalcBaseAndBitshift+0xa8>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a3c      	ldr	r2, [pc, #240]	; (80061f0 <DMA_CalcBaseAndBitshift+0x128>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d036      	beq.n	8006170 <DMA_CalcBaseAndBitshift+0xa8>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a3b      	ldr	r2, [pc, #236]	; (80061f4 <DMA_CalcBaseAndBitshift+0x12c>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d031      	beq.n	8006170 <DMA_CalcBaseAndBitshift+0xa8>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a39      	ldr	r2, [pc, #228]	; (80061f8 <DMA_CalcBaseAndBitshift+0x130>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d02c      	beq.n	8006170 <DMA_CalcBaseAndBitshift+0xa8>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a38      	ldr	r2, [pc, #224]	; (80061fc <DMA_CalcBaseAndBitshift+0x134>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d027      	beq.n	8006170 <DMA_CalcBaseAndBitshift+0xa8>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a36      	ldr	r2, [pc, #216]	; (8006200 <DMA_CalcBaseAndBitshift+0x138>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d022      	beq.n	8006170 <DMA_CalcBaseAndBitshift+0xa8>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a35      	ldr	r2, [pc, #212]	; (8006204 <DMA_CalcBaseAndBitshift+0x13c>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d01d      	beq.n	8006170 <DMA_CalcBaseAndBitshift+0xa8>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a33      	ldr	r2, [pc, #204]	; (8006208 <DMA_CalcBaseAndBitshift+0x140>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d018      	beq.n	8006170 <DMA_CalcBaseAndBitshift+0xa8>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a32      	ldr	r2, [pc, #200]	; (800620c <DMA_CalcBaseAndBitshift+0x144>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d013      	beq.n	8006170 <DMA_CalcBaseAndBitshift+0xa8>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a30      	ldr	r2, [pc, #192]	; (8006210 <DMA_CalcBaseAndBitshift+0x148>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d00e      	beq.n	8006170 <DMA_CalcBaseAndBitshift+0xa8>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a2f      	ldr	r2, [pc, #188]	; (8006214 <DMA_CalcBaseAndBitshift+0x14c>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d009      	beq.n	8006170 <DMA_CalcBaseAndBitshift+0xa8>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a2d      	ldr	r2, [pc, #180]	; (8006218 <DMA_CalcBaseAndBitshift+0x150>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d004      	beq.n	8006170 <DMA_CalcBaseAndBitshift+0xa8>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a2c      	ldr	r2, [pc, #176]	; (800621c <DMA_CalcBaseAndBitshift+0x154>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d101      	bne.n	8006174 <DMA_CalcBaseAndBitshift+0xac>
 8006170:	2301      	movs	r3, #1
 8006172:	e000      	b.n	8006176 <DMA_CalcBaseAndBitshift+0xae>
 8006174:	2300      	movs	r3, #0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d024      	beq.n	80061c4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	b2db      	uxtb	r3, r3
 8006180:	3b10      	subs	r3, #16
 8006182:	4a27      	ldr	r2, [pc, #156]	; (8006220 <DMA_CalcBaseAndBitshift+0x158>)
 8006184:	fba2 2303 	umull	r2, r3, r2, r3
 8006188:	091b      	lsrs	r3, r3, #4
 800618a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f003 0307 	and.w	r3, r3, #7
 8006192:	4a24      	ldr	r2, [pc, #144]	; (8006224 <DMA_CalcBaseAndBitshift+0x15c>)
 8006194:	5cd3      	ldrb	r3, [r2, r3]
 8006196:	461a      	mov	r2, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2b03      	cmp	r3, #3
 80061a0:	d908      	bls.n	80061b4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	461a      	mov	r2, r3
 80061a8:	4b1f      	ldr	r3, [pc, #124]	; (8006228 <DMA_CalcBaseAndBitshift+0x160>)
 80061aa:	4013      	ands	r3, r2
 80061ac:	1d1a      	adds	r2, r3, #4
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	659a      	str	r2, [r3, #88]	; 0x58
 80061b2:	e00d      	b.n	80061d0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	461a      	mov	r2, r3
 80061ba:	4b1b      	ldr	r3, [pc, #108]	; (8006228 <DMA_CalcBaseAndBitshift+0x160>)
 80061bc:	4013      	ands	r3, r2
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	6593      	str	r3, [r2, #88]	; 0x58
 80061c2:	e005      	b.n	80061d0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3714      	adds	r7, #20
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr
 80061e0:	40020010 	.word	0x40020010
 80061e4:	40020028 	.word	0x40020028
 80061e8:	40020040 	.word	0x40020040
 80061ec:	40020058 	.word	0x40020058
 80061f0:	40020070 	.word	0x40020070
 80061f4:	40020088 	.word	0x40020088
 80061f8:	400200a0 	.word	0x400200a0
 80061fc:	400200b8 	.word	0x400200b8
 8006200:	40020410 	.word	0x40020410
 8006204:	40020428 	.word	0x40020428
 8006208:	40020440 	.word	0x40020440
 800620c:	40020458 	.word	0x40020458
 8006210:	40020470 	.word	0x40020470
 8006214:	40020488 	.word	0x40020488
 8006218:	400204a0 	.word	0x400204a0
 800621c:	400204b8 	.word	0x400204b8
 8006220:	aaaaaaab 	.word	0xaaaaaaab
 8006224:	080163c4 	.word	0x080163c4
 8006228:	fffffc00 	.word	0xfffffc00

0800622c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006234:	2300      	movs	r3, #0
 8006236:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	699b      	ldr	r3, [r3, #24]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d120      	bne.n	8006282 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006244:	2b03      	cmp	r3, #3
 8006246:	d858      	bhi.n	80062fa <DMA_CheckFifoParam+0xce>
 8006248:	a201      	add	r2, pc, #4	; (adr r2, 8006250 <DMA_CheckFifoParam+0x24>)
 800624a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800624e:	bf00      	nop
 8006250:	08006261 	.word	0x08006261
 8006254:	08006273 	.word	0x08006273
 8006258:	08006261 	.word	0x08006261
 800625c:	080062fb 	.word	0x080062fb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006264:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d048      	beq.n	80062fe <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006270:	e045      	b.n	80062fe <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006276:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800627a:	d142      	bne.n	8006302 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006280:	e03f      	b.n	8006302 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	699b      	ldr	r3, [r3, #24]
 8006286:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800628a:	d123      	bne.n	80062d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006290:	2b03      	cmp	r3, #3
 8006292:	d838      	bhi.n	8006306 <DMA_CheckFifoParam+0xda>
 8006294:	a201      	add	r2, pc, #4	; (adr r2, 800629c <DMA_CheckFifoParam+0x70>)
 8006296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800629a:	bf00      	nop
 800629c:	080062ad 	.word	0x080062ad
 80062a0:	080062b3 	.word	0x080062b3
 80062a4:	080062ad 	.word	0x080062ad
 80062a8:	080062c5 	.word	0x080062c5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	73fb      	strb	r3, [r7, #15]
        break;
 80062b0:	e030      	b.n	8006314 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d025      	beq.n	800630a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80062c2:	e022      	b.n	800630a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80062cc:	d11f      	bne.n	800630e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80062d2:	e01c      	b.n	800630e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d902      	bls.n	80062e2 <DMA_CheckFifoParam+0xb6>
 80062dc:	2b03      	cmp	r3, #3
 80062de:	d003      	beq.n	80062e8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80062e0:	e018      	b.n	8006314 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	73fb      	strb	r3, [r7, #15]
        break;
 80062e6:	e015      	b.n	8006314 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d00e      	beq.n	8006312 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	73fb      	strb	r3, [r7, #15]
    break;
 80062f8:	e00b      	b.n	8006312 <DMA_CheckFifoParam+0xe6>
        break;
 80062fa:	bf00      	nop
 80062fc:	e00a      	b.n	8006314 <DMA_CheckFifoParam+0xe8>
        break;
 80062fe:	bf00      	nop
 8006300:	e008      	b.n	8006314 <DMA_CheckFifoParam+0xe8>
        break;
 8006302:	bf00      	nop
 8006304:	e006      	b.n	8006314 <DMA_CheckFifoParam+0xe8>
        break;
 8006306:	bf00      	nop
 8006308:	e004      	b.n	8006314 <DMA_CheckFifoParam+0xe8>
        break;
 800630a:	bf00      	nop
 800630c:	e002      	b.n	8006314 <DMA_CheckFifoParam+0xe8>
        break;
 800630e:	bf00      	nop
 8006310:	e000      	b.n	8006314 <DMA_CheckFifoParam+0xe8>
    break;
 8006312:	bf00      	nop
    }
  }

  return status;
 8006314:	7bfb      	ldrb	r3, [r7, #15]
}
 8006316:	4618      	mov	r0, r3
 8006318:	3714      	adds	r7, #20
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop

08006324 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006324:	b480      	push	{r7}
 8006326:	b085      	sub	sp, #20
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a38      	ldr	r2, [pc, #224]	; (8006418 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d022      	beq.n	8006382 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a36      	ldr	r2, [pc, #216]	; (800641c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d01d      	beq.n	8006382 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a35      	ldr	r2, [pc, #212]	; (8006420 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d018      	beq.n	8006382 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a33      	ldr	r2, [pc, #204]	; (8006424 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d013      	beq.n	8006382 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a32      	ldr	r2, [pc, #200]	; (8006428 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d00e      	beq.n	8006382 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a30      	ldr	r2, [pc, #192]	; (800642c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d009      	beq.n	8006382 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a2f      	ldr	r2, [pc, #188]	; (8006430 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d004      	beq.n	8006382 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a2d      	ldr	r2, [pc, #180]	; (8006434 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d101      	bne.n	8006386 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006382:	2301      	movs	r3, #1
 8006384:	e000      	b.n	8006388 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006386:	2300      	movs	r3, #0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d01a      	beq.n	80063c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	b2db      	uxtb	r3, r3
 8006392:	3b08      	subs	r3, #8
 8006394:	4a28      	ldr	r2, [pc, #160]	; (8006438 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006396:	fba2 2303 	umull	r2, r3, r2, r3
 800639a:	091b      	lsrs	r3, r3, #4
 800639c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	4b26      	ldr	r3, [pc, #152]	; (800643c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80063a2:	4413      	add	r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	461a      	mov	r2, r3
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a24      	ldr	r2, [pc, #144]	; (8006440 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80063b0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f003 031f 	and.w	r3, r3, #31
 80063b8:	2201      	movs	r2, #1
 80063ba:	409a      	lsls	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80063c0:	e024      	b.n	800640c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	3b10      	subs	r3, #16
 80063ca:	4a1e      	ldr	r2, [pc, #120]	; (8006444 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80063cc:	fba2 2303 	umull	r2, r3, r2, r3
 80063d0:	091b      	lsrs	r3, r3, #4
 80063d2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	4a1c      	ldr	r2, [pc, #112]	; (8006448 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d806      	bhi.n	80063ea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	4a1b      	ldr	r2, [pc, #108]	; (800644c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d902      	bls.n	80063ea <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	3308      	adds	r3, #8
 80063e8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	4b18      	ldr	r3, [pc, #96]	; (8006450 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80063ee:	4413      	add	r3, r2
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	461a      	mov	r2, r3
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a16      	ldr	r2, [pc, #88]	; (8006454 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80063fc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f003 031f 	and.w	r3, r3, #31
 8006404:	2201      	movs	r2, #1
 8006406:	409a      	lsls	r2, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800640c:	bf00      	nop
 800640e:	3714      	adds	r7, #20
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr
 8006418:	58025408 	.word	0x58025408
 800641c:	5802541c 	.word	0x5802541c
 8006420:	58025430 	.word	0x58025430
 8006424:	58025444 	.word	0x58025444
 8006428:	58025458 	.word	0x58025458
 800642c:	5802546c 	.word	0x5802546c
 8006430:	58025480 	.word	0x58025480
 8006434:	58025494 	.word	0x58025494
 8006438:	cccccccd 	.word	0xcccccccd
 800643c:	16009600 	.word	0x16009600
 8006440:	58025880 	.word	0x58025880
 8006444:	aaaaaaab 	.word	0xaaaaaaab
 8006448:	400204b8 	.word	0x400204b8
 800644c:	4002040f 	.word	0x4002040f
 8006450:	10008200 	.word	0x10008200
 8006454:	40020880 	.word	0x40020880

08006458 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	b2db      	uxtb	r3, r3
 8006466:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d04a      	beq.n	8006504 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2b08      	cmp	r3, #8
 8006472:	d847      	bhi.n	8006504 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a25      	ldr	r2, [pc, #148]	; (8006510 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d022      	beq.n	80064c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a24      	ldr	r2, [pc, #144]	; (8006514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d01d      	beq.n	80064c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a22      	ldr	r2, [pc, #136]	; (8006518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d018      	beq.n	80064c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a21      	ldr	r2, [pc, #132]	; (800651c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d013      	beq.n	80064c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a1f      	ldr	r2, [pc, #124]	; (8006520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d00e      	beq.n	80064c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a1e      	ldr	r2, [pc, #120]	; (8006524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d009      	beq.n	80064c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a1c      	ldr	r2, [pc, #112]	; (8006528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d004      	beq.n	80064c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a1b      	ldr	r2, [pc, #108]	; (800652c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d101      	bne.n	80064c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80064c4:	2301      	movs	r3, #1
 80064c6:	e000      	b.n	80064ca <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80064c8:	2300      	movs	r3, #0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00a      	beq.n	80064e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	4b17      	ldr	r3, [pc, #92]	; (8006530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80064d2:	4413      	add	r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	461a      	mov	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4a15      	ldr	r2, [pc, #84]	; (8006534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80064e0:	671a      	str	r2, [r3, #112]	; 0x70
 80064e2:	e009      	b.n	80064f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	4b14      	ldr	r3, [pc, #80]	; (8006538 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80064e8:	4413      	add	r3, r2
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	461a      	mov	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a11      	ldr	r2, [pc, #68]	; (800653c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80064f6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	3b01      	subs	r3, #1
 80064fc:	2201      	movs	r2, #1
 80064fe:	409a      	lsls	r2, r3
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006504:	bf00      	nop
 8006506:	3714      	adds	r7, #20
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr
 8006510:	58025408 	.word	0x58025408
 8006514:	5802541c 	.word	0x5802541c
 8006518:	58025430 	.word	0x58025430
 800651c:	58025444 	.word	0x58025444
 8006520:	58025458 	.word	0x58025458
 8006524:	5802546c 	.word	0x5802546c
 8006528:	58025480 	.word	0x58025480
 800652c:	58025494 	.word	0x58025494
 8006530:	1600963f 	.word	0x1600963f
 8006534:	58025940 	.word	0x58025940
 8006538:	1000823f 	.word	0x1000823f
 800653c:	40020940 	.word	0x40020940

08006540 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b098      	sub	sp, #96	; 0x60
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8006548:	4a84      	ldr	r2, [pc, #528]	; (800675c <HAL_FDCAN_Init+0x21c>)
 800654a:	f107 030c 	add.w	r3, r7, #12
 800654e:	4611      	mov	r1, r2
 8006550:	224c      	movs	r2, #76	; 0x4c
 8006552:	4618      	mov	r0, r3
 8006554:	f00f f9e8 	bl	8015928 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d101      	bne.n	8006562 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e1c6      	b.n	80068f0 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a7e      	ldr	r2, [pc, #504]	; (8006760 <HAL_FDCAN_Init+0x220>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d106      	bne.n	800657a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006574:	461a      	mov	r2, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006580:	b2db      	uxtb	r3, r3
 8006582:	2b00      	cmp	r3, #0
 8006584:	d106      	bne.n	8006594 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f7fb feec 	bl	800236c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	699a      	ldr	r2, [r3, #24]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f022 0210 	bic.w	r2, r2, #16
 80065a2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80065a4:	f7fc fe46 	bl	8003234 <HAL_GetTick>
 80065a8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80065aa:	e014      	b.n	80065d6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80065ac:	f7fc fe42 	bl	8003234 <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	2b0a      	cmp	r3, #10
 80065b8:	d90d      	bls.n	80065d6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065c0:	f043 0201 	orr.w	r2, r3, #1
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2203      	movs	r2, #3
 80065ce:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e18c      	b.n	80068f0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	f003 0308 	and.w	r3, r3, #8
 80065e0:	2b08      	cmp	r3, #8
 80065e2:	d0e3      	beq.n	80065ac <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	699a      	ldr	r2, [r3, #24]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f042 0201 	orr.w	r2, r2, #1
 80065f2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80065f4:	f7fc fe1e 	bl	8003234 <HAL_GetTick>
 80065f8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80065fa:	e014      	b.n	8006626 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80065fc:	f7fc fe1a 	bl	8003234 <HAL_GetTick>
 8006600:	4602      	mov	r2, r0
 8006602:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	2b0a      	cmp	r3, #10
 8006608:	d90d      	bls.n	8006626 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006610:	f043 0201 	orr.w	r2, r3, #1
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2203      	movs	r2, #3
 800661e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e164      	b.n	80068f0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	f003 0301 	and.w	r3, r3, #1
 8006630:	2b00      	cmp	r3, #0
 8006632:	d0e3      	beq.n	80065fc <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	699a      	ldr	r2, [r3, #24]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f042 0202 	orr.w	r2, r2, #2
 8006642:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	7c1b      	ldrb	r3, [r3, #16]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d108      	bne.n	800665e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	699a      	ldr	r2, [r3, #24]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800665a:	619a      	str	r2, [r3, #24]
 800665c:	e007      	b.n	800666e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	699a      	ldr	r2, [r3, #24]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800666c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	7c5b      	ldrb	r3, [r3, #17]
 8006672:	2b01      	cmp	r3, #1
 8006674:	d108      	bne.n	8006688 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	699a      	ldr	r2, [r3, #24]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006684:	619a      	str	r2, [r3, #24]
 8006686:	e007      	b.n	8006698 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	699a      	ldr	r2, [r3, #24]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006696:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	7c9b      	ldrb	r3, [r3, #18]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d108      	bne.n	80066b2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	699a      	ldr	r2, [r3, #24]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80066ae:	619a      	str	r2, [r3, #24]
 80066b0:	e007      	b.n	80066c2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	699a      	ldr	r2, [r3, #24]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80066c0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	699b      	ldr	r3, [r3, #24]
 80066c8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	689a      	ldr	r2, [r3, #8]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	430a      	orrs	r2, r1
 80066d6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	699a      	ldr	r2, [r3, #24]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80066e6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	691a      	ldr	r2, [r3, #16]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f022 0210 	bic.w	r2, r2, #16
 80066f6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d108      	bne.n	8006712 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	699a      	ldr	r2, [r3, #24]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f042 0204 	orr.w	r2, r2, #4
 800670e:	619a      	str	r2, [r3, #24]
 8006710:	e030      	b.n	8006774 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d02c      	beq.n	8006774 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	2b02      	cmp	r3, #2
 8006720:	d020      	beq.n	8006764 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	699a      	ldr	r2, [r3, #24]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006730:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	691a      	ldr	r2, [r3, #16]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f042 0210 	orr.w	r2, r2, #16
 8006740:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	2b03      	cmp	r3, #3
 8006748:	d114      	bne.n	8006774 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	699a      	ldr	r2, [r3, #24]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f042 0220 	orr.w	r2, r2, #32
 8006758:	619a      	str	r2, [r3, #24]
 800675a:	e00b      	b.n	8006774 <HAL_FDCAN_Init+0x234>
 800675c:	0801632c 	.word	0x0801632c
 8006760:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	699a      	ldr	r2, [r3, #24]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f042 0220 	orr.w	r2, r2, #32
 8006772:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	3b01      	subs	r3, #1
 800677a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	69db      	ldr	r3, [r3, #28]
 8006780:	3b01      	subs	r3, #1
 8006782:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006784:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800678c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	695b      	ldr	r3, [r3, #20]
 8006794:	3b01      	subs	r3, #1
 8006796:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800679c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800679e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067a8:	d115      	bne.n	80067d6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ae:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b4:	3b01      	subs	r3, #1
 80067b6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80067b8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067be:	3b01      	subs	r3, #1
 80067c0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80067c2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ca:	3b01      	subs	r3, #1
 80067cc:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80067d2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80067d4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00a      	beq.n	80067f4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	430a      	orrs	r2, r1
 80067f0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067fc:	4413      	add	r3, r2
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d011      	beq.n	8006826 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800680a:	f023 0107 	bic.w	r1, r3, #7
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	3360      	adds	r3, #96	; 0x60
 8006816:	443b      	add	r3, r7
 8006818:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	430a      	orrs	r2, r1
 8006822:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800682a:	2b00      	cmp	r3, #0
 800682c:	d011      	beq.n	8006852 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006836:	f023 0107 	bic.w	r1, r3, #7
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	3360      	adds	r3, #96	; 0x60
 8006842:	443b      	add	r3, r7
 8006844:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	430a      	orrs	r2, r1
 800684e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006856:	2b00      	cmp	r3, #0
 8006858:	d012      	beq.n	8006880 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006862:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	3360      	adds	r3, #96	; 0x60
 800686e:	443b      	add	r3, r7
 8006870:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006874:	011a      	lsls	r2, r3, #4
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	430a      	orrs	r2, r1
 800687c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006884:	2b00      	cmp	r3, #0
 8006886:	d012      	beq.n	80068ae <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006890:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	3360      	adds	r3, #96	; 0x60
 800689c:	443b      	add	r3, r7
 800689e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80068a2:	021a      	lsls	r2, r3, #8
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	430a      	orrs	r2, r1
 80068aa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a11      	ldr	r2, [pc, #68]	; (80068f8 <HAL_FDCAN_Init+0x3b8>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d107      	bne.n	80068c8 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	689a      	ldr	r2, [r3, #8]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f022 0203 	bic.w	r2, r2, #3
 80068c6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 f80b 	bl	80068fc <FDCAN_CalcultateRamBlockAddresses>
 80068e6:	4603      	mov	r3, r0
 80068e8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80068ec:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3760      	adds	r7, #96	; 0x60
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	4000a000 	.word	0x4000a000

080068fc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b085      	sub	sp, #20
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006908:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006912:	4ba7      	ldr	r3, [pc, #668]	; (8006bb0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006914:	4013      	ands	r3, r2
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	0091      	lsls	r1, r2, #2
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	6812      	ldr	r2, [r2, #0]
 800691e:	430b      	orrs	r3, r1
 8006920:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800692c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006934:	041a      	lsls	r2, r3, #16
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	430a      	orrs	r2, r1
 800693c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006944:	68ba      	ldr	r2, [r7, #8]
 8006946:	4413      	add	r3, r2
 8006948:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006952:	4b97      	ldr	r3, [pc, #604]	; (8006bb0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006954:	4013      	ands	r3, r2
 8006956:	68ba      	ldr	r2, [r7, #8]
 8006958:	0091      	lsls	r1, r2, #2
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	6812      	ldr	r2, [r2, #0]
 800695e:	430b      	orrs	r3, r1
 8006960:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800696c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006974:	041a      	lsls	r2, r3, #16
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	430a      	orrs	r2, r1
 800697c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006984:	005b      	lsls	r3, r3, #1
 8006986:	68ba      	ldr	r2, [r7, #8]
 8006988:	4413      	add	r3, r2
 800698a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8006994:	4b86      	ldr	r3, [pc, #536]	; (8006bb0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006996:	4013      	ands	r3, r2
 8006998:	68ba      	ldr	r2, [r7, #8]
 800699a:	0091      	lsls	r1, r2, #2
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	6812      	ldr	r2, [r2, #0]
 80069a0:	430b      	orrs	r3, r1
 80069a2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80069ae:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b6:	041a      	lsls	r2, r3, #16
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	430a      	orrs	r2, r1
 80069be:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80069ca:	fb02 f303 	mul.w	r3, r2, r3
 80069ce:	68ba      	ldr	r2, [r7, #8]
 80069d0:	4413      	add	r3, r2
 80069d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80069dc:	4b74      	ldr	r3, [pc, #464]	; (8006bb0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80069de:	4013      	ands	r3, r2
 80069e0:	68ba      	ldr	r2, [r7, #8]
 80069e2:	0091      	lsls	r1, r2, #2
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	6812      	ldr	r2, [r2, #0]
 80069e8:	430b      	orrs	r3, r1
 80069ea:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069f6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069fe:	041a      	lsls	r2, r3, #16
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	430a      	orrs	r2, r1
 8006a06:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006a12:	fb02 f303 	mul.w	r3, r2, r3
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	4413      	add	r3, r2
 8006a1a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006a24:	4b62      	ldr	r3, [pc, #392]	; (8006bb0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006a26:	4013      	ands	r3, r2
 8006a28:	68ba      	ldr	r2, [r7, #8]
 8006a2a:	0091      	lsls	r1, r2, #2
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	6812      	ldr	r2, [r2, #0]
 8006a30:	430b      	orrs	r3, r1
 8006a32:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006a3e:	fb02 f303 	mul.w	r3, r2, r3
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	4413      	add	r3, r2
 8006a46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8006a50:	4b57      	ldr	r3, [pc, #348]	; (8006bb0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006a52:	4013      	ands	r3, r2
 8006a54:	68ba      	ldr	r2, [r7, #8]
 8006a56:	0091      	lsls	r1, r2, #2
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	6812      	ldr	r2, [r2, #0]
 8006a5c:	430b      	orrs	r3, r1
 8006a5e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a6a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a72:	041a      	lsls	r2, r3, #16
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	430a      	orrs	r2, r1
 8006a7a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a82:	005b      	lsls	r3, r3, #1
 8006a84:	68ba      	ldr	r2, [r7, #8]
 8006a86:	4413      	add	r3, r2
 8006a88:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006a92:	4b47      	ldr	r3, [pc, #284]	; (8006bb0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006a94:	4013      	ands	r3, r2
 8006a96:	68ba      	ldr	r2, [r7, #8]
 8006a98:	0091      	lsls	r1, r2, #2
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	6812      	ldr	r2, [r2, #0]
 8006a9e:	430b      	orrs	r3, r1
 8006aa0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006aac:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ab4:	041a      	lsls	r2, r3, #16
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	430a      	orrs	r2, r1
 8006abc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006ac8:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ad0:	061a      	lsls	r2, r3, #24
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	430a      	orrs	r2, r1
 8006ad8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ae0:	4b34      	ldr	r3, [pc, #208]	; (8006bb4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8006ae2:	4413      	add	r3, r2
 8006ae4:	009a      	lsls	r2, r3, #2
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	441a      	add	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b02:	00db      	lsls	r3, r3, #3
 8006b04:	441a      	add	r2, r3
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b12:	6879      	ldr	r1, [r7, #4]
 8006b14:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8006b16:	fb01 f303 	mul.w	r3, r1, r3
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	441a      	add	r2, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b2a:	6879      	ldr	r1, [r7, #4]
 8006b2c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8006b2e:	fb01 f303 	mul.w	r3, r1, r3
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	441a      	add	r2, r3
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b42:	6879      	ldr	r1, [r7, #4]
 8006b44:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8006b46:	fb01 f303 	mul.w	r3, r1, r3
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	441a      	add	r2, r3
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b5e:	00db      	lsls	r3, r3, #3
 8006b60:	441a      	add	r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b72:	6879      	ldr	r1, [r7, #4]
 8006b74:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8006b76:	fb01 f303 	mul.w	r3, r1, r3
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	441a      	add	r2, r3
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b8e:	6879      	ldr	r1, [r7, #4]
 8006b90:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8006b92:	fb01 f303 	mul.w	r3, r1, r3
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	441a      	add	r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ba6:	4a04      	ldr	r2, [pc, #16]	; (8006bb8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d915      	bls.n	8006bd8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8006bac:	e006      	b.n	8006bbc <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8006bae:	bf00      	nop
 8006bb0:	ffff0003 	.word	0xffff0003
 8006bb4:	10002b00 	.word	0x10002b00
 8006bb8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006bc2:	f043 0220 	orr.w	r2, r3, #32
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2203      	movs	r2, #3
 8006bd0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e010      	b.n	8006bfa <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bdc:	60fb      	str	r3, [r7, #12]
 8006bde:	e005      	b.n	8006bec <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2200      	movs	r2, #0
 8006be4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	3304      	adds	r3, #4
 8006bea:	60fb      	str	r3, [r7, #12]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d3f3      	bcc.n	8006be0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3714      	adds	r7, #20
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop

08006c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b089      	sub	sp, #36	; 0x24
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006c12:	2300      	movs	r3, #0
 8006c14:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006c16:	4b86      	ldr	r3, [pc, #536]	; (8006e30 <HAL_GPIO_Init+0x228>)
 8006c18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006c1a:	e18c      	b.n	8006f36 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	2101      	movs	r1, #1
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	fa01 f303 	lsl.w	r3, r1, r3
 8006c28:	4013      	ands	r3, r2
 8006c2a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f000 817e 	beq.w	8006f30 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	f003 0303 	and.w	r3, r3, #3
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d005      	beq.n	8006c4c <HAL_GPIO_Init+0x44>
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	f003 0303 	and.w	r3, r3, #3
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	d130      	bne.n	8006cae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	005b      	lsls	r3, r3, #1
 8006c56:	2203      	movs	r2, #3
 8006c58:	fa02 f303 	lsl.w	r3, r2, r3
 8006c5c:	43db      	mvns	r3, r3
 8006c5e:	69ba      	ldr	r2, [r7, #24]
 8006c60:	4013      	ands	r3, r2
 8006c62:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	68da      	ldr	r2, [r3, #12]
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	005b      	lsls	r3, r3, #1
 8006c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c70:	69ba      	ldr	r2, [r7, #24]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	69ba      	ldr	r2, [r7, #24]
 8006c7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006c82:	2201      	movs	r2, #1
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	fa02 f303 	lsl.w	r3, r2, r3
 8006c8a:	43db      	mvns	r3, r3
 8006c8c:	69ba      	ldr	r2, [r7, #24]
 8006c8e:	4013      	ands	r3, r2
 8006c90:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	091b      	lsrs	r3, r3, #4
 8006c98:	f003 0201 	and.w	r2, r3, #1
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca2:	69ba      	ldr	r2, [r7, #24]
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	69ba      	ldr	r2, [r7, #24]
 8006cac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	f003 0303 	and.w	r3, r3, #3
 8006cb6:	2b03      	cmp	r3, #3
 8006cb8:	d017      	beq.n	8006cea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	005b      	lsls	r3, r3, #1
 8006cc4:	2203      	movs	r2, #3
 8006cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cca:	43db      	mvns	r3, r3
 8006ccc:	69ba      	ldr	r2, [r7, #24]
 8006cce:	4013      	ands	r3, r2
 8006cd0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	689a      	ldr	r2, [r3, #8]
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	005b      	lsls	r3, r3, #1
 8006cda:	fa02 f303 	lsl.w	r3, r2, r3
 8006cde:	69ba      	ldr	r2, [r7, #24]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	69ba      	ldr	r2, [r7, #24]
 8006ce8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	f003 0303 	and.w	r3, r3, #3
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	d123      	bne.n	8006d3e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	08da      	lsrs	r2, r3, #3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	3208      	adds	r2, #8
 8006cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	f003 0307 	and.w	r3, r3, #7
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	220f      	movs	r2, #15
 8006d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d12:	43db      	mvns	r3, r3
 8006d14:	69ba      	ldr	r2, [r7, #24]
 8006d16:	4013      	ands	r3, r2
 8006d18:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	691a      	ldr	r2, [r3, #16]
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	f003 0307 	and.w	r3, r3, #7
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	fa02 f303 	lsl.w	r3, r2, r3
 8006d2a:	69ba      	ldr	r2, [r7, #24]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	08da      	lsrs	r2, r3, #3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	3208      	adds	r2, #8
 8006d38:	69b9      	ldr	r1, [r7, #24]
 8006d3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	005b      	lsls	r3, r3, #1
 8006d48:	2203      	movs	r2, #3
 8006d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d4e:	43db      	mvns	r3, r3
 8006d50:	69ba      	ldr	r2, [r7, #24]
 8006d52:	4013      	ands	r3, r2
 8006d54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	f003 0203 	and.w	r2, r3, #3
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	005b      	lsls	r3, r3, #1
 8006d62:	fa02 f303 	lsl.w	r3, r2, r3
 8006d66:	69ba      	ldr	r2, [r7, #24]
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	69ba      	ldr	r2, [r7, #24]
 8006d70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	f000 80d8 	beq.w	8006f30 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d80:	4b2c      	ldr	r3, [pc, #176]	; (8006e34 <HAL_GPIO_Init+0x22c>)
 8006d82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006d86:	4a2b      	ldr	r2, [pc, #172]	; (8006e34 <HAL_GPIO_Init+0x22c>)
 8006d88:	f043 0302 	orr.w	r3, r3, #2
 8006d8c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006d90:	4b28      	ldr	r3, [pc, #160]	; (8006e34 <HAL_GPIO_Init+0x22c>)
 8006d92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006d96:	f003 0302 	and.w	r3, r3, #2
 8006d9a:	60fb      	str	r3, [r7, #12]
 8006d9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006d9e:	4a26      	ldr	r2, [pc, #152]	; (8006e38 <HAL_GPIO_Init+0x230>)
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	089b      	lsrs	r3, r3, #2
 8006da4:	3302      	adds	r3, #2
 8006da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	f003 0303 	and.w	r3, r3, #3
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	220f      	movs	r2, #15
 8006db6:	fa02 f303 	lsl.w	r3, r2, r3
 8006dba:	43db      	mvns	r3, r3
 8006dbc:	69ba      	ldr	r2, [r7, #24]
 8006dbe:	4013      	ands	r3, r2
 8006dc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a1d      	ldr	r2, [pc, #116]	; (8006e3c <HAL_GPIO_Init+0x234>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d04a      	beq.n	8006e60 <HAL_GPIO_Init+0x258>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a1c      	ldr	r2, [pc, #112]	; (8006e40 <HAL_GPIO_Init+0x238>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d02b      	beq.n	8006e2a <HAL_GPIO_Init+0x222>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a1b      	ldr	r2, [pc, #108]	; (8006e44 <HAL_GPIO_Init+0x23c>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d025      	beq.n	8006e26 <HAL_GPIO_Init+0x21e>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a1a      	ldr	r2, [pc, #104]	; (8006e48 <HAL_GPIO_Init+0x240>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d01f      	beq.n	8006e22 <HAL_GPIO_Init+0x21a>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a19      	ldr	r2, [pc, #100]	; (8006e4c <HAL_GPIO_Init+0x244>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d019      	beq.n	8006e1e <HAL_GPIO_Init+0x216>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a18      	ldr	r2, [pc, #96]	; (8006e50 <HAL_GPIO_Init+0x248>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d013      	beq.n	8006e1a <HAL_GPIO_Init+0x212>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a17      	ldr	r2, [pc, #92]	; (8006e54 <HAL_GPIO_Init+0x24c>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d00d      	beq.n	8006e16 <HAL_GPIO_Init+0x20e>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a16      	ldr	r2, [pc, #88]	; (8006e58 <HAL_GPIO_Init+0x250>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d007      	beq.n	8006e12 <HAL_GPIO_Init+0x20a>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a15      	ldr	r2, [pc, #84]	; (8006e5c <HAL_GPIO_Init+0x254>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d101      	bne.n	8006e0e <HAL_GPIO_Init+0x206>
 8006e0a:	2309      	movs	r3, #9
 8006e0c:	e029      	b.n	8006e62 <HAL_GPIO_Init+0x25a>
 8006e0e:	230a      	movs	r3, #10
 8006e10:	e027      	b.n	8006e62 <HAL_GPIO_Init+0x25a>
 8006e12:	2307      	movs	r3, #7
 8006e14:	e025      	b.n	8006e62 <HAL_GPIO_Init+0x25a>
 8006e16:	2306      	movs	r3, #6
 8006e18:	e023      	b.n	8006e62 <HAL_GPIO_Init+0x25a>
 8006e1a:	2305      	movs	r3, #5
 8006e1c:	e021      	b.n	8006e62 <HAL_GPIO_Init+0x25a>
 8006e1e:	2304      	movs	r3, #4
 8006e20:	e01f      	b.n	8006e62 <HAL_GPIO_Init+0x25a>
 8006e22:	2303      	movs	r3, #3
 8006e24:	e01d      	b.n	8006e62 <HAL_GPIO_Init+0x25a>
 8006e26:	2302      	movs	r3, #2
 8006e28:	e01b      	b.n	8006e62 <HAL_GPIO_Init+0x25a>
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e019      	b.n	8006e62 <HAL_GPIO_Init+0x25a>
 8006e2e:	bf00      	nop
 8006e30:	58000080 	.word	0x58000080
 8006e34:	58024400 	.word	0x58024400
 8006e38:	58000400 	.word	0x58000400
 8006e3c:	58020000 	.word	0x58020000
 8006e40:	58020400 	.word	0x58020400
 8006e44:	58020800 	.word	0x58020800
 8006e48:	58020c00 	.word	0x58020c00
 8006e4c:	58021000 	.word	0x58021000
 8006e50:	58021400 	.word	0x58021400
 8006e54:	58021800 	.word	0x58021800
 8006e58:	58021c00 	.word	0x58021c00
 8006e5c:	58022400 	.word	0x58022400
 8006e60:	2300      	movs	r3, #0
 8006e62:	69fa      	ldr	r2, [r7, #28]
 8006e64:	f002 0203 	and.w	r2, r2, #3
 8006e68:	0092      	lsls	r2, r2, #2
 8006e6a:	4093      	lsls	r3, r2
 8006e6c:	69ba      	ldr	r2, [r7, #24]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006e72:	4938      	ldr	r1, [pc, #224]	; (8006f54 <HAL_GPIO_Init+0x34c>)
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	089b      	lsrs	r3, r3, #2
 8006e78:	3302      	adds	r3, #2
 8006e7a:	69ba      	ldr	r2, [r7, #24]
 8006e7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	43db      	mvns	r3, r3
 8006e8c:	69ba      	ldr	r2, [r7, #24]
 8006e8e:	4013      	ands	r3, r2
 8006e90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d003      	beq.n	8006ea6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8006e9e:	69ba      	ldr	r2, [r7, #24]
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006ea6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006eae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	43db      	mvns	r3, r3
 8006eba:	69ba      	ldr	r2, [r7, #24]
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d003      	beq.n	8006ed4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8006ecc:	69ba      	ldr	r2, [r7, #24]
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006ed4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	43db      	mvns	r3, r3
 8006ee6:	69ba      	ldr	r2, [r7, #24]
 8006ee8:	4013      	ands	r3, r2
 8006eea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d003      	beq.n	8006f00 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006ef8:	69ba      	ldr	r2, [r7, #24]
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	69ba      	ldr	r2, [r7, #24]
 8006f04:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	43db      	mvns	r3, r3
 8006f10:	69ba      	ldr	r2, [r7, #24]
 8006f12:	4013      	ands	r3, r2
 8006f14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d003      	beq.n	8006f2a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8006f22:	69ba      	ldr	r2, [r7, #24]
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	69ba      	ldr	r2, [r7, #24]
 8006f2e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	3301      	adds	r3, #1
 8006f34:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f47f ae6b 	bne.w	8006c1c <HAL_GPIO_Init+0x14>
  }
}
 8006f46:	bf00      	nop
 8006f48:	bf00      	nop
 8006f4a:	3724      	adds	r7, #36	; 0x24
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr
 8006f54:	58000400 	.word	0x58000400

08006f58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b085      	sub	sp, #20
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	460b      	mov	r3, r1
 8006f62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	691a      	ldr	r2, [r3, #16]
 8006f68:	887b      	ldrh	r3, [r7, #2]
 8006f6a:	4013      	ands	r3, r2
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d002      	beq.n	8006f76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006f70:	2301      	movs	r3, #1
 8006f72:	73fb      	strb	r3, [r7, #15]
 8006f74:	e001      	b.n	8006f7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006f76:	2300      	movs	r3, #0
 8006f78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3714      	adds	r7, #20
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	460b      	mov	r3, r1
 8006f92:	807b      	strh	r3, [r7, #2]
 8006f94:	4613      	mov	r3, r2
 8006f96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006f98:	787b      	ldrb	r3, [r7, #1]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d003      	beq.n	8006fa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006f9e:	887a      	ldrh	r2, [r7, #2]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006fa4:	e003      	b.n	8006fae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006fa6:	887b      	ldrh	r3, [r7, #2]
 8006fa8:	041a      	lsls	r2, r3, #16
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	619a      	str	r2, [r3, #24]
}
 8006fae:	bf00      	nop
 8006fb0:	370c      	adds	r7, #12
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
	...

08006fbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d101      	bne.n	8006fce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e07f      	b.n	80070ce <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d106      	bne.n	8006fe8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f7fb fa2a 	bl	800243c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2224      	movs	r2, #36	; 0x24
 8006fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f022 0201 	bic.w	r2, r2, #1
 8006ffe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685a      	ldr	r2, [r3, #4]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800700c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	689a      	ldr	r2, [r3, #8]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800701c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	2b01      	cmp	r3, #1
 8007024:	d107      	bne.n	8007036 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	689a      	ldr	r2, [r3, #8]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007032:	609a      	str	r2, [r3, #8]
 8007034:	e006      	b.n	8007044 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	689a      	ldr	r2, [r3, #8]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007042:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	2b02      	cmp	r3, #2
 800704a:	d104      	bne.n	8007056 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007054:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	6859      	ldr	r1, [r3, #4]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	4b1d      	ldr	r3, [pc, #116]	; (80070d8 <HAL_I2C_Init+0x11c>)
 8007062:	430b      	orrs	r3, r1
 8007064:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68da      	ldr	r2, [r3, #12]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007074:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	691a      	ldr	r2, [r3, #16]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	695b      	ldr	r3, [r3, #20]
 800707e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	699b      	ldr	r3, [r3, #24]
 8007086:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	430a      	orrs	r2, r1
 800708e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	69d9      	ldr	r1, [r3, #28]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a1a      	ldr	r2, [r3, #32]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	430a      	orrs	r2, r1
 800709e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f042 0201 	orr.w	r2, r2, #1
 80070ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2220      	movs	r2, #32
 80070ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3708      	adds	r7, #8
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	02008000 	.word	0x02008000

080070dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	2b20      	cmp	r3, #32
 80070f0:	d138      	bne.n	8007164 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d101      	bne.n	8007100 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80070fc:	2302      	movs	r3, #2
 80070fe:	e032      	b.n	8007166 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2224      	movs	r2, #36	; 0x24
 800710c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f022 0201 	bic.w	r2, r2, #1
 800711e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800712e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	6819      	ldr	r1, [r3, #0]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	683a      	ldr	r2, [r7, #0]
 800713c:	430a      	orrs	r2, r1
 800713e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f042 0201 	orr.w	r2, r2, #1
 800714e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2220      	movs	r2, #32
 8007154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007160:	2300      	movs	r3, #0
 8007162:	e000      	b.n	8007166 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007164:	2302      	movs	r3, #2
  }
}
 8007166:	4618      	mov	r0, r3
 8007168:	370c      	adds	r7, #12
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr

08007172 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007172:	b480      	push	{r7}
 8007174:	b085      	sub	sp, #20
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
 800717a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007182:	b2db      	uxtb	r3, r3
 8007184:	2b20      	cmp	r3, #32
 8007186:	d139      	bne.n	80071fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800718e:	2b01      	cmp	r3, #1
 8007190:	d101      	bne.n	8007196 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007192:	2302      	movs	r3, #2
 8007194:	e033      	b.n	80071fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2201      	movs	r2, #1
 800719a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2224      	movs	r2, #36	; 0x24
 80071a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f022 0201 	bic.w	r2, r2, #1
 80071b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80071c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	021b      	lsls	r3, r3, #8
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f042 0201 	orr.w	r2, r2, #1
 80071e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2220      	movs	r2, #32
 80071ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80071f8:	2300      	movs	r3, #0
 80071fa:	e000      	b.n	80071fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80071fc:	2302      	movs	r3, #2
  }
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3714      	adds	r7, #20
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr

0800720a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800720a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800720c:	b08f      	sub	sp, #60	; 0x3c
 800720e:	af0a      	add	r7, sp, #40	; 0x28
 8007210:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d101      	bne.n	800721c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	e116      	b.n	800744a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b00      	cmp	r3, #0
 800722c:	d106      	bne.n	800723c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f00e f840 	bl	80152bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2203      	movs	r2, #3
 8007240:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800724c:	2b00      	cmp	r3, #0
 800724e:	d102      	bne.n	8007256 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4618      	mov	r0, r3
 800725c:	f00a f985 	bl	801156a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	603b      	str	r3, [r7, #0]
 8007266:	687e      	ldr	r6, [r7, #4]
 8007268:	466d      	mov	r5, sp
 800726a:	f106 0410 	add.w	r4, r6, #16
 800726e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007272:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007274:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007276:	e894 0003 	ldmia.w	r4, {r0, r1}
 800727a:	e885 0003 	stmia.w	r5, {r0, r1}
 800727e:	1d33      	adds	r3, r6, #4
 8007280:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007282:	6838      	ldr	r0, [r7, #0]
 8007284:	f00a f850 	bl	8011328 <USB_CoreInit>
 8007288:	4603      	mov	r3, r0
 800728a:	2b00      	cmp	r3, #0
 800728c:	d005      	beq.n	800729a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2202      	movs	r2, #2
 8007292:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e0d7      	b.n	800744a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	2100      	movs	r1, #0
 80072a0:	4618      	mov	r0, r3
 80072a2:	f00a f973 	bl	801158c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80072a6:	2300      	movs	r3, #0
 80072a8:	73fb      	strb	r3, [r7, #15]
 80072aa:	e04a      	b.n	8007342 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80072ac:	7bfa      	ldrb	r2, [r7, #15]
 80072ae:	6879      	ldr	r1, [r7, #4]
 80072b0:	4613      	mov	r3, r2
 80072b2:	00db      	lsls	r3, r3, #3
 80072b4:	4413      	add	r3, r2
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	440b      	add	r3, r1
 80072ba:	333d      	adds	r3, #61	; 0x3d
 80072bc:	2201      	movs	r2, #1
 80072be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80072c0:	7bfa      	ldrb	r2, [r7, #15]
 80072c2:	6879      	ldr	r1, [r7, #4]
 80072c4:	4613      	mov	r3, r2
 80072c6:	00db      	lsls	r3, r3, #3
 80072c8:	4413      	add	r3, r2
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	440b      	add	r3, r1
 80072ce:	333c      	adds	r3, #60	; 0x3c
 80072d0:	7bfa      	ldrb	r2, [r7, #15]
 80072d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80072d4:	7bfa      	ldrb	r2, [r7, #15]
 80072d6:	7bfb      	ldrb	r3, [r7, #15]
 80072d8:	b298      	uxth	r0, r3
 80072da:	6879      	ldr	r1, [r7, #4]
 80072dc:	4613      	mov	r3, r2
 80072de:	00db      	lsls	r3, r3, #3
 80072e0:	4413      	add	r3, r2
 80072e2:	009b      	lsls	r3, r3, #2
 80072e4:	440b      	add	r3, r1
 80072e6:	3356      	adds	r3, #86	; 0x56
 80072e8:	4602      	mov	r2, r0
 80072ea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80072ec:	7bfa      	ldrb	r2, [r7, #15]
 80072ee:	6879      	ldr	r1, [r7, #4]
 80072f0:	4613      	mov	r3, r2
 80072f2:	00db      	lsls	r3, r3, #3
 80072f4:	4413      	add	r3, r2
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	440b      	add	r3, r1
 80072fa:	3340      	adds	r3, #64	; 0x40
 80072fc:	2200      	movs	r2, #0
 80072fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007300:	7bfa      	ldrb	r2, [r7, #15]
 8007302:	6879      	ldr	r1, [r7, #4]
 8007304:	4613      	mov	r3, r2
 8007306:	00db      	lsls	r3, r3, #3
 8007308:	4413      	add	r3, r2
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	440b      	add	r3, r1
 800730e:	3344      	adds	r3, #68	; 0x44
 8007310:	2200      	movs	r2, #0
 8007312:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007314:	7bfa      	ldrb	r2, [r7, #15]
 8007316:	6879      	ldr	r1, [r7, #4]
 8007318:	4613      	mov	r3, r2
 800731a:	00db      	lsls	r3, r3, #3
 800731c:	4413      	add	r3, r2
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	440b      	add	r3, r1
 8007322:	3348      	adds	r3, #72	; 0x48
 8007324:	2200      	movs	r2, #0
 8007326:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007328:	7bfa      	ldrb	r2, [r7, #15]
 800732a:	6879      	ldr	r1, [r7, #4]
 800732c:	4613      	mov	r3, r2
 800732e:	00db      	lsls	r3, r3, #3
 8007330:	4413      	add	r3, r2
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	440b      	add	r3, r1
 8007336:	334c      	adds	r3, #76	; 0x4c
 8007338:	2200      	movs	r2, #0
 800733a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800733c:	7bfb      	ldrb	r3, [r7, #15]
 800733e:	3301      	adds	r3, #1
 8007340:	73fb      	strb	r3, [r7, #15]
 8007342:	7bfa      	ldrb	r2, [r7, #15]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	429a      	cmp	r2, r3
 800734a:	d3af      	bcc.n	80072ac <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800734c:	2300      	movs	r3, #0
 800734e:	73fb      	strb	r3, [r7, #15]
 8007350:	e044      	b.n	80073dc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007352:	7bfa      	ldrb	r2, [r7, #15]
 8007354:	6879      	ldr	r1, [r7, #4]
 8007356:	4613      	mov	r3, r2
 8007358:	00db      	lsls	r3, r3, #3
 800735a:	4413      	add	r3, r2
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	440b      	add	r3, r1
 8007360:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8007364:	2200      	movs	r2, #0
 8007366:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007368:	7bfa      	ldrb	r2, [r7, #15]
 800736a:	6879      	ldr	r1, [r7, #4]
 800736c:	4613      	mov	r3, r2
 800736e:	00db      	lsls	r3, r3, #3
 8007370:	4413      	add	r3, r2
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	440b      	add	r3, r1
 8007376:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800737a:	7bfa      	ldrb	r2, [r7, #15]
 800737c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800737e:	7bfa      	ldrb	r2, [r7, #15]
 8007380:	6879      	ldr	r1, [r7, #4]
 8007382:	4613      	mov	r3, r2
 8007384:	00db      	lsls	r3, r3, #3
 8007386:	4413      	add	r3, r2
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	440b      	add	r3, r1
 800738c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007390:	2200      	movs	r2, #0
 8007392:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007394:	7bfa      	ldrb	r2, [r7, #15]
 8007396:	6879      	ldr	r1, [r7, #4]
 8007398:	4613      	mov	r3, r2
 800739a:	00db      	lsls	r3, r3, #3
 800739c:	4413      	add	r3, r2
 800739e:	009b      	lsls	r3, r3, #2
 80073a0:	440b      	add	r3, r1
 80073a2:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80073a6:	2200      	movs	r2, #0
 80073a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80073aa:	7bfa      	ldrb	r2, [r7, #15]
 80073ac:	6879      	ldr	r1, [r7, #4]
 80073ae:	4613      	mov	r3, r2
 80073b0:	00db      	lsls	r3, r3, #3
 80073b2:	4413      	add	r3, r2
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	440b      	add	r3, r1
 80073b8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80073bc:	2200      	movs	r2, #0
 80073be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80073c0:	7bfa      	ldrb	r2, [r7, #15]
 80073c2:	6879      	ldr	r1, [r7, #4]
 80073c4:	4613      	mov	r3, r2
 80073c6:	00db      	lsls	r3, r3, #3
 80073c8:	4413      	add	r3, r2
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	440b      	add	r3, r1
 80073ce:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80073d2:	2200      	movs	r2, #0
 80073d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073d6:	7bfb      	ldrb	r3, [r7, #15]
 80073d8:	3301      	adds	r3, #1
 80073da:	73fb      	strb	r3, [r7, #15]
 80073dc:	7bfa      	ldrb	r2, [r7, #15]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d3b5      	bcc.n	8007352 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	603b      	str	r3, [r7, #0]
 80073ec:	687e      	ldr	r6, [r7, #4]
 80073ee:	466d      	mov	r5, sp
 80073f0:	f106 0410 	add.w	r4, r6, #16
 80073f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80073f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80073f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80073fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80073fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007400:	e885 0003 	stmia.w	r5, {r0, r1}
 8007404:	1d33      	adds	r3, r6, #4
 8007406:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007408:	6838      	ldr	r0, [r7, #0]
 800740a:	f00a f90b 	bl	8011624 <USB_DevInit>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d005      	beq.n	8007420 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2202      	movs	r2, #2
 8007418:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	e014      	b.n	800744a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007434:	2b01      	cmp	r3, #1
 8007436:	d102      	bne.n	800743e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f001 f96f 	bl	800871c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4618      	mov	r0, r3
 8007444:	f00b f94d 	bl	80126e2 <USB_DevDisconnect>

  return HAL_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3714      	adds	r7, #20
 800744e:	46bd      	mov	sp, r7
 8007450:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007452 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007452:	b580      	push	{r7, lr}
 8007454:	b084      	sub	sp, #16
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007466:	2b01      	cmp	r3, #1
 8007468:	d101      	bne.n	800746e <HAL_PCD_Start+0x1c>
 800746a:	2302      	movs	r3, #2
 800746c:	e022      	b.n	80074b4 <HAL_PCD_Start+0x62>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2201      	movs	r2, #1
 8007472:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800747a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800747e:	2b00      	cmp	r3, #0
 8007480:	d109      	bne.n	8007496 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8007486:	2b01      	cmp	r3, #1
 8007488:	d105      	bne.n	8007496 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800748e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4618      	mov	r0, r3
 800749c:	f00a f854 	bl	8011548 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4618      	mov	r0, r3
 80074a6:	f00b f8fb 	bl	80126a0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80074b2:	2300      	movs	r3, #0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3710      	adds	r7, #16
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80074bc:	b590      	push	{r4, r7, lr}
 80074be:	b08d      	sub	sp, #52	; 0x34
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ca:	6a3b      	ldr	r3, [r7, #32]
 80074cc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4618      	mov	r0, r3
 80074d4:	f00b f9b9 	bl	801284a <USB_GetMode>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	f040 84b7 	bne.w	8007e4e <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4618      	mov	r0, r3
 80074e6:	f00b f91d 	bl	8012724 <USB_ReadInterrupts>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f000 84ad 	beq.w	8007e4c <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	0a1b      	lsrs	r3, r3, #8
 80074fc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4618      	mov	r0, r3
 800750c:	f00b f90a 	bl	8012724 <USB_ReadInterrupts>
 8007510:	4603      	mov	r3, r0
 8007512:	f003 0302 	and.w	r3, r3, #2
 8007516:	2b02      	cmp	r3, #2
 8007518:	d107      	bne.n	800752a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	695a      	ldr	r2, [r3, #20]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f002 0202 	and.w	r2, r2, #2
 8007528:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4618      	mov	r0, r3
 8007530:	f00b f8f8 	bl	8012724 <USB_ReadInterrupts>
 8007534:	4603      	mov	r3, r0
 8007536:	f003 0310 	and.w	r3, r3, #16
 800753a:	2b10      	cmp	r3, #16
 800753c:	d161      	bne.n	8007602 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	699a      	ldr	r2, [r3, #24]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f022 0210 	bic.w	r2, r2, #16
 800754c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800754e:	6a3b      	ldr	r3, [r7, #32]
 8007550:	6a1b      	ldr	r3, [r3, #32]
 8007552:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007554:	69bb      	ldr	r3, [r7, #24]
 8007556:	f003 020f 	and.w	r2, r3, #15
 800755a:	4613      	mov	r3, r2
 800755c:	00db      	lsls	r3, r3, #3
 800755e:	4413      	add	r3, r2
 8007560:	009b      	lsls	r3, r3, #2
 8007562:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	4413      	add	r3, r2
 800756a:	3304      	adds	r3, #4
 800756c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	0c5b      	lsrs	r3, r3, #17
 8007572:	f003 030f 	and.w	r3, r3, #15
 8007576:	2b02      	cmp	r3, #2
 8007578:	d124      	bne.n	80075c4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800757a:	69ba      	ldr	r2, [r7, #24]
 800757c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007580:	4013      	ands	r3, r2
 8007582:	2b00      	cmp	r3, #0
 8007584:	d035      	beq.n	80075f2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	091b      	lsrs	r3, r3, #4
 800758e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007590:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007594:	b29b      	uxth	r3, r3
 8007596:	461a      	mov	r2, r3
 8007598:	6a38      	ldr	r0, [r7, #32]
 800759a:	f00a ff2f 	bl	80123fc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	68da      	ldr	r2, [r3, #12]
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	091b      	lsrs	r3, r3, #4
 80075a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075aa:	441a      	add	r2, r3
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	695a      	ldr	r2, [r3, #20]
 80075b4:	69bb      	ldr	r3, [r7, #24]
 80075b6:	091b      	lsrs	r3, r3, #4
 80075b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075bc:	441a      	add	r2, r3
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	615a      	str	r2, [r3, #20]
 80075c2:	e016      	b.n	80075f2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	0c5b      	lsrs	r3, r3, #17
 80075c8:	f003 030f 	and.w	r3, r3, #15
 80075cc:	2b06      	cmp	r3, #6
 80075ce:	d110      	bne.n	80075f2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80075d6:	2208      	movs	r2, #8
 80075d8:	4619      	mov	r1, r3
 80075da:	6a38      	ldr	r0, [r7, #32]
 80075dc:	f00a ff0e 	bl	80123fc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	695a      	ldr	r2, [r3, #20]
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	091b      	lsrs	r3, r3, #4
 80075e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075ec:	441a      	add	r2, r3
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	699a      	ldr	r2, [r3, #24]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f042 0210 	orr.w	r2, r2, #16
 8007600:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4618      	mov	r0, r3
 8007608:	f00b f88c 	bl	8012724 <USB_ReadInterrupts>
 800760c:	4603      	mov	r3, r0
 800760e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007612:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007616:	f040 80a7 	bne.w	8007768 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800761a:	2300      	movs	r3, #0
 800761c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4618      	mov	r0, r3
 8007624:	f00b f891 	bl	801274a <USB_ReadDevAllOutEpInterrupt>
 8007628:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800762a:	e099      	b.n	8007760 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800762c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800762e:	f003 0301 	and.w	r3, r3, #1
 8007632:	2b00      	cmp	r3, #0
 8007634:	f000 808e 	beq.w	8007754 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800763e:	b2d2      	uxtb	r2, r2
 8007640:	4611      	mov	r1, r2
 8007642:	4618      	mov	r0, r3
 8007644:	f00b f8b5 	bl	80127b2 <USB_ReadDevOutEPInterrupt>
 8007648:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	f003 0301 	and.w	r3, r3, #1
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00c      	beq.n	800766e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007656:	015a      	lsls	r2, r3, #5
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	4413      	add	r3, r2
 800765c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007660:	461a      	mov	r2, r3
 8007662:	2301      	movs	r3, #1
 8007664:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007666:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f000 fed1 	bl	8008410 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	f003 0308 	and.w	r3, r3, #8
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00c      	beq.n	8007692 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800767a:	015a      	lsls	r2, r3, #5
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	4413      	add	r3, r2
 8007680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007684:	461a      	mov	r2, r3
 8007686:	2308      	movs	r3, #8
 8007688:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800768a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 ffa7 	bl	80085e0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	f003 0310 	and.w	r3, r3, #16
 8007698:	2b00      	cmp	r3, #0
 800769a:	d008      	beq.n	80076ae <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800769c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769e:	015a      	lsls	r2, r3, #5
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	4413      	add	r3, r2
 80076a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076a8:	461a      	mov	r2, r3
 80076aa:	2310      	movs	r3, #16
 80076ac:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	f003 0302 	and.w	r3, r3, #2
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d030      	beq.n	800771a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80076b8:	6a3b      	ldr	r3, [r7, #32]
 80076ba:	695b      	ldr	r3, [r3, #20]
 80076bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076c0:	2b80      	cmp	r3, #128	; 0x80
 80076c2:	d109      	bne.n	80076d8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	69fa      	ldr	r2, [r7, #28]
 80076ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80076d6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80076d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076da:	4613      	mov	r3, r2
 80076dc:	00db      	lsls	r3, r3, #3
 80076de:	4413      	add	r3, r2
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	4413      	add	r3, r2
 80076ea:	3304      	adds	r3, #4
 80076ec:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	78db      	ldrb	r3, [r3, #3]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d108      	bne.n	8007708 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	2200      	movs	r2, #0
 80076fa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80076fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	4619      	mov	r1, r3
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f00d fed2 	bl	80154ac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770a:	015a      	lsls	r2, r3, #5
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	4413      	add	r3, r2
 8007710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007714:	461a      	mov	r2, r3
 8007716:	2302      	movs	r3, #2
 8007718:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	f003 0320 	and.w	r3, r3, #32
 8007720:	2b00      	cmp	r3, #0
 8007722:	d008      	beq.n	8007736 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007726:	015a      	lsls	r2, r3, #5
 8007728:	69fb      	ldr	r3, [r7, #28]
 800772a:	4413      	add	r3, r2
 800772c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007730:	461a      	mov	r2, r3
 8007732:	2320      	movs	r3, #32
 8007734:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800773c:	2b00      	cmp	r3, #0
 800773e:	d009      	beq.n	8007754 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007742:	015a      	lsls	r2, r3, #5
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	4413      	add	r3, r2
 8007748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800774c:	461a      	mov	r2, r3
 800774e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007752:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007756:	3301      	adds	r3, #1
 8007758:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800775a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775c:	085b      	lsrs	r3, r3, #1
 800775e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007762:	2b00      	cmp	r3, #0
 8007764:	f47f af62 	bne.w	800762c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4618      	mov	r0, r3
 800776e:	f00a ffd9 	bl	8012724 <USB_ReadInterrupts>
 8007772:	4603      	mov	r3, r0
 8007774:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007778:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800777c:	f040 80db 	bne.w	8007936 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4618      	mov	r0, r3
 8007786:	f00a fffa 	bl	801277e <USB_ReadDevAllInEpInterrupt>
 800778a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800778c:	2300      	movs	r3, #0
 800778e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007790:	e0cd      	b.n	800792e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007794:	f003 0301 	and.w	r3, r3, #1
 8007798:	2b00      	cmp	r3, #0
 800779a:	f000 80c2 	beq.w	8007922 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077a4:	b2d2      	uxtb	r2, r2
 80077a6:	4611      	mov	r1, r2
 80077a8:	4618      	mov	r0, r3
 80077aa:	f00b f820 	bl	80127ee <USB_ReadDevInEPInterrupt>
 80077ae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	f003 0301 	and.w	r3, r3, #1
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d057      	beq.n	800786a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80077ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077bc:	f003 030f 	and.w	r3, r3, #15
 80077c0:	2201      	movs	r2, #1
 80077c2:	fa02 f303 	lsl.w	r3, r2, r3
 80077c6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	43db      	mvns	r3, r3
 80077d4:	69f9      	ldr	r1, [r7, #28]
 80077d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077da:	4013      	ands	r3, r2
 80077dc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80077de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e0:	015a      	lsls	r2, r3, #5
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	4413      	add	r3, r2
 80077e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ea:	461a      	mov	r2, r3
 80077ec:	2301      	movs	r3, #1
 80077ee:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d132      	bne.n	800785e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80077f8:	6879      	ldr	r1, [r7, #4]
 80077fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077fc:	4613      	mov	r3, r2
 80077fe:	00db      	lsls	r3, r3, #3
 8007800:	4413      	add	r3, r2
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	440b      	add	r3, r1
 8007806:	3348      	adds	r3, #72	; 0x48
 8007808:	6819      	ldr	r1, [r3, #0]
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800780e:	4613      	mov	r3, r2
 8007810:	00db      	lsls	r3, r3, #3
 8007812:	4413      	add	r3, r2
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	4403      	add	r3, r0
 8007818:	3344      	adds	r3, #68	; 0x44
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4419      	add	r1, r3
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007822:	4613      	mov	r3, r2
 8007824:	00db      	lsls	r3, r3, #3
 8007826:	4413      	add	r3, r2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	4403      	add	r3, r0
 800782c:	3348      	adds	r3, #72	; 0x48
 800782e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007832:	2b00      	cmp	r3, #0
 8007834:	d113      	bne.n	800785e <HAL_PCD_IRQHandler+0x3a2>
 8007836:	6879      	ldr	r1, [r7, #4]
 8007838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800783a:	4613      	mov	r3, r2
 800783c:	00db      	lsls	r3, r3, #3
 800783e:	4413      	add	r3, r2
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	440b      	add	r3, r1
 8007844:	334c      	adds	r3, #76	; 0x4c
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d108      	bne.n	800785e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6818      	ldr	r0, [r3, #0]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007856:	461a      	mov	r2, r3
 8007858:	2101      	movs	r1, #1
 800785a:	f00b f829 	bl	80128b0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800785e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007860:	b2db      	uxtb	r3, r3
 8007862:	4619      	mov	r1, r3
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f00d fd9c 	bl	80153a2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	f003 0308 	and.w	r3, r3, #8
 8007870:	2b00      	cmp	r3, #0
 8007872:	d008      	beq.n	8007886 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007876:	015a      	lsls	r2, r3, #5
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	4413      	add	r3, r2
 800787c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007880:	461a      	mov	r2, r3
 8007882:	2308      	movs	r3, #8
 8007884:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	f003 0310 	and.w	r3, r3, #16
 800788c:	2b00      	cmp	r3, #0
 800788e:	d008      	beq.n	80078a2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007892:	015a      	lsls	r2, r3, #5
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	4413      	add	r3, r2
 8007898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800789c:	461a      	mov	r2, r3
 800789e:	2310      	movs	r3, #16
 80078a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d008      	beq.n	80078be <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80078ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ae:	015a      	lsls	r2, r3, #5
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	4413      	add	r3, r2
 80078b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078b8:	461a      	mov	r2, r3
 80078ba:	2340      	movs	r3, #64	; 0x40
 80078bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	f003 0302 	and.w	r3, r3, #2
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d023      	beq.n	8007910 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80078c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80078ca:	6a38      	ldr	r0, [r7, #32]
 80078cc:	f00a f808 	bl	80118e0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80078d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078d2:	4613      	mov	r3, r2
 80078d4:	00db      	lsls	r3, r3, #3
 80078d6:	4413      	add	r3, r2
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	3338      	adds	r3, #56	; 0x38
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	4413      	add	r3, r2
 80078e0:	3304      	adds	r3, #4
 80078e2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	78db      	ldrb	r3, [r3, #3]
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d108      	bne.n	80078fe <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	2200      	movs	r2, #0
 80078f0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80078f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	4619      	mov	r1, r3
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f00d fde9 	bl	80154d0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80078fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007900:	015a      	lsls	r2, r3, #5
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	4413      	add	r3, r2
 8007906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800790a:	461a      	mov	r2, r3
 800790c:	2302      	movs	r3, #2
 800790e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007916:	2b00      	cmp	r3, #0
 8007918:	d003      	beq.n	8007922 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800791a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 fcea 	bl	80082f6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007924:	3301      	adds	r3, #1
 8007926:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800792a:	085b      	lsrs	r3, r3, #1
 800792c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800792e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007930:	2b00      	cmp	r3, #0
 8007932:	f47f af2e 	bne.w	8007792 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4618      	mov	r0, r3
 800793c:	f00a fef2 	bl	8012724 <USB_ReadInterrupts>
 8007940:	4603      	mov	r3, r0
 8007942:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007946:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800794a:	d122      	bne.n	8007992 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	69fa      	ldr	r2, [r7, #28]
 8007956:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800795a:	f023 0301 	bic.w	r3, r3, #1
 800795e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8007966:	2b01      	cmp	r3, #1
 8007968:	d108      	bne.n	800797c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007972:	2100      	movs	r1, #0
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 fef5 	bl	8008764 <HAL_PCDEx_LPM_Callback>
 800797a:	e002      	b.n	8007982 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f00d fd87 	bl	8015490 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	695a      	ldr	r2, [r3, #20]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007990:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4618      	mov	r0, r3
 8007998:	f00a fec4 	bl	8012724 <USB_ReadInterrupts>
 800799c:	4603      	mov	r3, r0
 800799e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079a6:	d112      	bne.n	80079ce <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80079a8:	69fb      	ldr	r3, [r7, #28]
 80079aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	f003 0301 	and.w	r3, r3, #1
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d102      	bne.n	80079be <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f00d fd43 	bl	8015444 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	695a      	ldr	r2, [r3, #20]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80079cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4618      	mov	r0, r3
 80079d4:	f00a fea6 	bl	8012724 <USB_ReadInterrupts>
 80079d8:	4603      	mov	r3, r0
 80079da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80079de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079e2:	d121      	bne.n	8007a28 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	695a      	ldr	r2, [r3, #20]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80079f2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d111      	bne.n	8007a22 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2201      	movs	r2, #1
 8007a02:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a0c:	089b      	lsrs	r3, r3, #2
 8007a0e:	f003 020f 	and.w	r2, r3, #15
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007a18:	2101      	movs	r1, #1
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 fea2 	bl	8008764 <HAL_PCDEx_LPM_Callback>
 8007a20:	e002      	b.n	8007a28 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f00d fd0e 	bl	8015444 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f00a fe79 	bl	8012724 <USB_ReadInterrupts>
 8007a32:	4603      	mov	r3, r0
 8007a34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a3c:	f040 80b7 	bne.w	8007bae <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	69fa      	ldr	r2, [r7, #28]
 8007a4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a4e:	f023 0301 	bic.w	r3, r3, #1
 8007a52:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	2110      	movs	r1, #16
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f009 ff40 	bl	80118e0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007a60:	2300      	movs	r3, #0
 8007a62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a64:	e046      	b.n	8007af4 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a68:	015a      	lsls	r2, r3, #5
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a72:	461a      	mov	r2, r3
 8007a74:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a78:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a7c:	015a      	lsls	r2, r3, #5
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	4413      	add	r3, r2
 8007a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a8a:	0151      	lsls	r1, r2, #5
 8007a8c:	69fa      	ldr	r2, [r7, #28]
 8007a8e:	440a      	add	r2, r1
 8007a90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a94:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a98:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9c:	015a      	lsls	r2, r3, #5
 8007a9e:	69fb      	ldr	r3, [r7, #28]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007aac:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab0:	015a      	lsls	r2, r3, #5
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	4413      	add	r3, r2
 8007ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007abe:	0151      	lsls	r1, r2, #5
 8007ac0:	69fa      	ldr	r2, [r7, #28]
 8007ac2:	440a      	add	r2, r1
 8007ac4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ac8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007acc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad0:	015a      	lsls	r2, r3, #5
 8007ad2:	69fb      	ldr	r3, [r7, #28]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ade:	0151      	lsls	r1, r2, #5
 8007ae0:	69fa      	ldr	r2, [r7, #28]
 8007ae2:	440a      	add	r2, r1
 8007ae4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ae8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007aec:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af0:	3301      	adds	r3, #1
 8007af2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d3b3      	bcc.n	8007a66 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b04:	69db      	ldr	r3, [r3, #28]
 8007b06:	69fa      	ldr	r2, [r7, #28]
 8007b08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b0c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007b10:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d016      	beq.n	8007b48 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b24:	69fa      	ldr	r2, [r7, #28]
 8007b26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b2a:	f043 030b 	orr.w	r3, r3, #11
 8007b2e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007b32:	69fb      	ldr	r3, [r7, #28]
 8007b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b3a:	69fa      	ldr	r2, [r7, #28]
 8007b3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b40:	f043 030b 	orr.w	r3, r3, #11
 8007b44:	6453      	str	r3, [r2, #68]	; 0x44
 8007b46:	e015      	b.n	8007b74 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b4e:	695a      	ldr	r2, [r3, #20]
 8007b50:	69fb      	ldr	r3, [r7, #28]
 8007b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b56:	4619      	mov	r1, r3
 8007b58:	f242 032b 	movw	r3, #8235	; 0x202b
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	69fa      	ldr	r2, [r7, #28]
 8007b6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b6e:	f043 030b 	orr.w	r3, r3, #11
 8007b72:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	69fa      	ldr	r2, [r7, #28]
 8007b7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b82:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007b86:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6818      	ldr	r0, [r3, #0]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007b98:	461a      	mov	r2, r3
 8007b9a:	f00a fe89 	bl	80128b0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	695a      	ldr	r2, [r3, #20]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007bac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f00a fdb6 	bl	8012724 <USB_ReadInterrupts>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007bbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bc2:	d124      	bne.n	8007c0e <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f00a fe4d 	bl	8012868 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f009 ff01 	bl	80119da <USB_GetDevSpeed>
 8007bd8:	4603      	mov	r3, r0
 8007bda:	461a      	mov	r2, r3
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681c      	ldr	r4, [r3, #0]
 8007be4:	f001 fd88 	bl	80096f8 <HAL_RCC_GetHCLKFreq>
 8007be8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	461a      	mov	r2, r3
 8007bf2:	4620      	mov	r0, r4
 8007bf4:	f009 fc06 	bl	8011404 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f00d fbfa 	bl	80153f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	695a      	ldr	r2, [r3, #20]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007c0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4618      	mov	r0, r3
 8007c14:	f00a fd86 	bl	8012724 <USB_ReadInterrupts>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	f003 0308 	and.w	r3, r3, #8
 8007c1e:	2b08      	cmp	r3, #8
 8007c20:	d10a      	bne.n	8007c38 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f00d fbd7 	bl	80153d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	695a      	ldr	r2, [r3, #20]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f002 0208 	and.w	r2, r2, #8
 8007c36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f00a fd71 	bl	8012724 <USB_ReadInterrupts>
 8007c42:	4603      	mov	r3, r0
 8007c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c48:	2b80      	cmp	r3, #128	; 0x80
 8007c4a:	d122      	bne.n	8007c92 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007c4c:	6a3b      	ldr	r3, [r7, #32]
 8007c4e:	699b      	ldr	r3, [r3, #24]
 8007c50:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c54:	6a3b      	ldr	r3, [r7, #32]
 8007c56:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007c58:	2301      	movs	r3, #1
 8007c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8007c5c:	e014      	b.n	8007c88 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007c5e:	6879      	ldr	r1, [r7, #4]
 8007c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c62:	4613      	mov	r3, r2
 8007c64:	00db      	lsls	r3, r3, #3
 8007c66:	4413      	add	r3, r2
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	440b      	add	r3, r1
 8007c6c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d105      	bne.n	8007c82 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 fb09 	bl	8008294 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c84:	3301      	adds	r3, #1
 8007c86:	627b      	str	r3, [r7, #36]	; 0x24
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d3e5      	bcc.n	8007c5e <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4618      	mov	r0, r3
 8007c98:	f00a fd44 	bl	8012724 <USB_ReadInterrupts>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ca2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ca6:	d13b      	bne.n	8007d20 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007ca8:	2301      	movs	r3, #1
 8007caa:	627b      	str	r3, [r7, #36]	; 0x24
 8007cac:	e02b      	b.n	8007d06 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb0:	015a      	lsls	r2, r3, #5
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007cbe:	6879      	ldr	r1, [r7, #4]
 8007cc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	00db      	lsls	r3, r3, #3
 8007cc6:	4413      	add	r3, r2
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	440b      	add	r3, r1
 8007ccc:	3340      	adds	r3, #64	; 0x40
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d115      	bne.n	8007d00 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007cd4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	da12      	bge.n	8007d00 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007cda:	6879      	ldr	r1, [r7, #4]
 8007cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cde:	4613      	mov	r3, r2
 8007ce0:	00db      	lsls	r3, r3, #3
 8007ce2:	4413      	add	r3, r2
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	440b      	add	r3, r1
 8007ce8:	333f      	adds	r3, #63	; 0x3f
 8007cea:	2201      	movs	r2, #1
 8007cec:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 faca 	bl	8008294 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d02:	3301      	adds	r3, #1
 8007d04:	627b      	str	r3, [r7, #36]	; 0x24
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d0c:	429a      	cmp	r2, r3
 8007d0e:	d3ce      	bcc.n	8007cae <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	695a      	ldr	r2, [r3, #20]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007d1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4618      	mov	r0, r3
 8007d26:	f00a fcfd 	bl	8012724 <USB_ReadInterrupts>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d34:	d155      	bne.n	8007de2 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007d36:	2301      	movs	r3, #1
 8007d38:	627b      	str	r3, [r7, #36]	; 0x24
 8007d3a:	e045      	b.n	8007dc8 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3e:	015a      	lsls	r2, r3, #5
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	4413      	add	r3, r2
 8007d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007d4c:	6879      	ldr	r1, [r7, #4]
 8007d4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d50:	4613      	mov	r3, r2
 8007d52:	00db      	lsls	r3, r3, #3
 8007d54:	4413      	add	r3, r2
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	440b      	add	r3, r1
 8007d5a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d12e      	bne.n	8007dc2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007d64:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	da2b      	bge.n	8007dc2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8007d6a:	69bb      	ldr	r3, [r7, #24]
 8007d6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8007d76:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d121      	bne.n	8007dc2 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007d7e:	6879      	ldr	r1, [r7, #4]
 8007d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d82:	4613      	mov	r3, r2
 8007d84:	00db      	lsls	r3, r3, #3
 8007d86:	4413      	add	r3, r2
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	440b      	add	r3, r1
 8007d8c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8007d90:	2201      	movs	r2, #1
 8007d92:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007d94:	6a3b      	ldr	r3, [r7, #32]
 8007d96:	699b      	ldr	r3, [r3, #24]
 8007d98:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007d9c:	6a3b      	ldr	r3, [r7, #32]
 8007d9e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007da0:	6a3b      	ldr	r3, [r7, #32]
 8007da2:	695b      	ldr	r3, [r3, #20]
 8007da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d10a      	bne.n	8007dc2 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007db2:	685b      	ldr	r3, [r3, #4]
 8007db4:	69fa      	ldr	r2, [r7, #28]
 8007db6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007dba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007dbe:	6053      	str	r3, [r2, #4]
            break;
 8007dc0:	e007      	b.n	8007dd2 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	627b      	str	r3, [r7, #36]	; 0x24
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d3b4      	bcc.n	8007d3c <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	695a      	ldr	r2, [r3, #20]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007de0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4618      	mov	r0, r3
 8007de8:	f00a fc9c 	bl	8012724 <USB_ReadInterrupts>
 8007dec:	4603      	mov	r3, r0
 8007dee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007df6:	d10a      	bne.n	8007e0e <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f00d fb7b 	bl	80154f4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	695a      	ldr	r2, [r3, #20]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007e0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4618      	mov	r0, r3
 8007e14:	f00a fc86 	bl	8012724 <USB_ReadInterrupts>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	f003 0304 	and.w	r3, r3, #4
 8007e1e:	2b04      	cmp	r3, #4
 8007e20:	d115      	bne.n	8007e4e <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	f003 0304 	and.w	r3, r3, #4
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d002      	beq.n	8007e3a <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f00d fb6b 	bl	8015510 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	6859      	ldr	r1, [r3, #4]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	69ba      	ldr	r2, [r7, #24]
 8007e46:	430a      	orrs	r2, r1
 8007e48:	605a      	str	r2, [r3, #4]
 8007e4a:	e000      	b.n	8007e4e <HAL_PCD_IRQHandler+0x992>
      return;
 8007e4c:	bf00      	nop
    }
  }
}
 8007e4e:	3734      	adds	r7, #52	; 0x34
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd90      	pop	{r4, r7, pc}

08007e54 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d101      	bne.n	8007e6e <HAL_PCD_SetAddress+0x1a>
 8007e6a:	2302      	movs	r3, #2
 8007e6c:	e013      	b.n	8007e96 <HAL_PCD_SetAddress+0x42>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2201      	movs	r2, #1
 8007e72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	78fa      	ldrb	r2, [r7, #3]
 8007e7a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	78fa      	ldrb	r2, [r7, #3]
 8007e84:	4611      	mov	r1, r2
 8007e86:	4618      	mov	r0, r3
 8007e88:	f00a fbe4 	bl	8012654 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3708      	adds	r7, #8
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b084      	sub	sp, #16
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
 8007ea6:	4608      	mov	r0, r1
 8007ea8:	4611      	mov	r1, r2
 8007eaa:	461a      	mov	r2, r3
 8007eac:	4603      	mov	r3, r0
 8007eae:	70fb      	strb	r3, [r7, #3]
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	803b      	strh	r3, [r7, #0]
 8007eb4:	4613      	mov	r3, r2
 8007eb6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007ebc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	da0f      	bge.n	8007ee4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ec4:	78fb      	ldrb	r3, [r7, #3]
 8007ec6:	f003 020f 	and.w	r2, r3, #15
 8007eca:	4613      	mov	r3, r2
 8007ecc:	00db      	lsls	r3, r3, #3
 8007ece:	4413      	add	r3, r2
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	3338      	adds	r3, #56	; 0x38
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	4413      	add	r3, r2
 8007ed8:	3304      	adds	r3, #4
 8007eda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	705a      	strb	r2, [r3, #1]
 8007ee2:	e00f      	b.n	8007f04 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007ee4:	78fb      	ldrb	r3, [r7, #3]
 8007ee6:	f003 020f 	and.w	r2, r3, #15
 8007eea:	4613      	mov	r3, r2
 8007eec:	00db      	lsls	r3, r3, #3
 8007eee:	4413      	add	r3, r2
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	4413      	add	r3, r2
 8007efa:	3304      	adds	r3, #4
 8007efc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2200      	movs	r2, #0
 8007f02:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007f04:	78fb      	ldrb	r3, [r7, #3]
 8007f06:	f003 030f 	and.w	r3, r3, #15
 8007f0a:	b2da      	uxtb	r2, r3
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007f10:	883a      	ldrh	r2, [r7, #0]
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	78ba      	ldrb	r2, [r7, #2]
 8007f1a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	785b      	ldrb	r3, [r3, #1]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d004      	beq.n	8007f2e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	b29a      	uxth	r2, r3
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007f2e:	78bb      	ldrb	r3, [r7, #2]
 8007f30:	2b02      	cmp	r3, #2
 8007f32:	d102      	bne.n	8007f3a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2200      	movs	r2, #0
 8007f38:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d101      	bne.n	8007f48 <HAL_PCD_EP_Open+0xaa>
 8007f44:	2302      	movs	r3, #2
 8007f46:	e00e      	b.n	8007f66 <HAL_PCD_EP_Open+0xc8>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	68f9      	ldr	r1, [r7, #12]
 8007f56:	4618      	mov	r0, r3
 8007f58:	f009 fd64 	bl	8011a24 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8007f64:	7afb      	ldrb	r3, [r7, #11]
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b084      	sub	sp, #16
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
 8007f76:	460b      	mov	r3, r1
 8007f78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007f7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	da0f      	bge.n	8007fa2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007f82:	78fb      	ldrb	r3, [r7, #3]
 8007f84:	f003 020f 	and.w	r2, r3, #15
 8007f88:	4613      	mov	r3, r2
 8007f8a:	00db      	lsls	r3, r3, #3
 8007f8c:	4413      	add	r3, r2
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	3338      	adds	r3, #56	; 0x38
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	4413      	add	r3, r2
 8007f96:	3304      	adds	r3, #4
 8007f98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	705a      	strb	r2, [r3, #1]
 8007fa0:	e00f      	b.n	8007fc2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007fa2:	78fb      	ldrb	r3, [r7, #3]
 8007fa4:	f003 020f 	and.w	r2, r3, #15
 8007fa8:	4613      	mov	r3, r2
 8007faa:	00db      	lsls	r3, r3, #3
 8007fac:	4413      	add	r3, r2
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	3304      	adds	r3, #4
 8007fba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007fc2:	78fb      	ldrb	r3, [r7, #3]
 8007fc4:	f003 030f 	and.w	r3, r3, #15
 8007fc8:	b2da      	uxtb	r2, r3
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d101      	bne.n	8007fdc <HAL_PCD_EP_Close+0x6e>
 8007fd8:	2302      	movs	r3, #2
 8007fda:	e00e      	b.n	8007ffa <HAL_PCD_EP_Close+0x8c>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	68f9      	ldr	r1, [r7, #12]
 8007fea:	4618      	mov	r0, r3
 8007fec:	f009 fda2 	bl	8011b34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3710      	adds	r7, #16
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}

08008002 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008002:	b580      	push	{r7, lr}
 8008004:	b086      	sub	sp, #24
 8008006:	af00      	add	r7, sp, #0
 8008008:	60f8      	str	r0, [r7, #12]
 800800a:	607a      	str	r2, [r7, #4]
 800800c:	603b      	str	r3, [r7, #0]
 800800e:	460b      	mov	r3, r1
 8008010:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008012:	7afb      	ldrb	r3, [r7, #11]
 8008014:	f003 020f 	and.w	r2, r3, #15
 8008018:	4613      	mov	r3, r2
 800801a:	00db      	lsls	r3, r3, #3
 800801c:	4413      	add	r3, r2
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	4413      	add	r3, r2
 8008028:	3304      	adds	r3, #4
 800802a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	683a      	ldr	r2, [r7, #0]
 8008036:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	2200      	movs	r2, #0
 800803c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	2200      	movs	r2, #0
 8008042:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008044:	7afb      	ldrb	r3, [r7, #11]
 8008046:	f003 030f 	and.w	r3, r3, #15
 800804a:	b2da      	uxtb	r2, r3
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	2b01      	cmp	r3, #1
 8008056:	d102      	bne.n	800805e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	6818      	ldr	r0, [r3, #0]
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	b2db      	uxtb	r3, r3
 8008068:	461a      	mov	r2, r3
 800806a:	6979      	ldr	r1, [r7, #20]
 800806c:	f009 fe3e 	bl	8011cec <USB_EPStartXfer>

  return HAL_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3718      	adds	r7, #24
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800807a:	b480      	push	{r7}
 800807c:	b083      	sub	sp, #12
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
 8008082:	460b      	mov	r3, r1
 8008084:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008086:	78fb      	ldrb	r3, [r7, #3]
 8008088:	f003 020f 	and.w	r2, r3, #15
 800808c:	6879      	ldr	r1, [r7, #4]
 800808e:	4613      	mov	r3, r2
 8008090:	00db      	lsls	r3, r3, #3
 8008092:	4413      	add	r3, r2
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	440b      	add	r3, r1
 8008098:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800809c:	681b      	ldr	r3, [r3, #0]
}
 800809e:	4618      	mov	r0, r3
 80080a0:	370c      	adds	r7, #12
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr

080080aa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80080aa:	b580      	push	{r7, lr}
 80080ac:	b086      	sub	sp, #24
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	60f8      	str	r0, [r7, #12]
 80080b2:	607a      	str	r2, [r7, #4]
 80080b4:	603b      	str	r3, [r7, #0]
 80080b6:	460b      	mov	r3, r1
 80080b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80080ba:	7afb      	ldrb	r3, [r7, #11]
 80080bc:	f003 020f 	and.w	r2, r3, #15
 80080c0:	4613      	mov	r3, r2
 80080c2:	00db      	lsls	r3, r3, #3
 80080c4:	4413      	add	r3, r2
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	3338      	adds	r3, #56	; 0x38
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	4413      	add	r3, r2
 80080ce:	3304      	adds	r3, #4
 80080d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	683a      	ldr	r2, [r7, #0]
 80080dc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	2200      	movs	r2, #0
 80080e2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	2201      	movs	r2, #1
 80080e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80080ea:	7afb      	ldrb	r3, [r7, #11]
 80080ec:	f003 030f 	and.w	r3, r3, #15
 80080f0:	b2da      	uxtb	r2, r3
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d102      	bne.n	8008104 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6818      	ldr	r0, [r3, #0]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	b2db      	uxtb	r3, r3
 800810e:	461a      	mov	r2, r3
 8008110:	6979      	ldr	r1, [r7, #20]
 8008112:	f009 fdeb 	bl	8011cec <USB_EPStartXfer>

  return HAL_OK;
 8008116:	2300      	movs	r3, #0
}
 8008118:	4618      	mov	r0, r3
 800811a:	3718      	adds	r7, #24
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	460b      	mov	r3, r1
 800812a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800812c:	78fb      	ldrb	r3, [r7, #3]
 800812e:	f003 020f 	and.w	r2, r3, #15
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	429a      	cmp	r2, r3
 8008138:	d901      	bls.n	800813e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800813a:	2301      	movs	r3, #1
 800813c:	e050      	b.n	80081e0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800813e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008142:	2b00      	cmp	r3, #0
 8008144:	da0f      	bge.n	8008166 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008146:	78fb      	ldrb	r3, [r7, #3]
 8008148:	f003 020f 	and.w	r2, r3, #15
 800814c:	4613      	mov	r3, r2
 800814e:	00db      	lsls	r3, r3, #3
 8008150:	4413      	add	r3, r2
 8008152:	009b      	lsls	r3, r3, #2
 8008154:	3338      	adds	r3, #56	; 0x38
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	4413      	add	r3, r2
 800815a:	3304      	adds	r3, #4
 800815c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2201      	movs	r2, #1
 8008162:	705a      	strb	r2, [r3, #1]
 8008164:	e00d      	b.n	8008182 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008166:	78fa      	ldrb	r2, [r7, #3]
 8008168:	4613      	mov	r3, r2
 800816a:	00db      	lsls	r3, r3, #3
 800816c:	4413      	add	r3, r2
 800816e:	009b      	lsls	r3, r3, #2
 8008170:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008174:	687a      	ldr	r2, [r7, #4]
 8008176:	4413      	add	r3, r2
 8008178:	3304      	adds	r3, #4
 800817a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2200      	movs	r2, #0
 8008180:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2201      	movs	r2, #1
 8008186:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008188:	78fb      	ldrb	r3, [r7, #3]
 800818a:	f003 030f 	and.w	r3, r3, #15
 800818e:	b2da      	uxtb	r2, r3
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800819a:	2b01      	cmp	r3, #1
 800819c:	d101      	bne.n	80081a2 <HAL_PCD_EP_SetStall+0x82>
 800819e:	2302      	movs	r3, #2
 80081a0:	e01e      	b.n	80081e0 <HAL_PCD_EP_SetStall+0xc0>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2201      	movs	r2, #1
 80081a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	68f9      	ldr	r1, [r7, #12]
 80081b0:	4618      	mov	r0, r3
 80081b2:	f00a f97b 	bl	80124ac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80081b6:	78fb      	ldrb	r3, [r7, #3]
 80081b8:	f003 030f 	and.w	r3, r3, #15
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d10a      	bne.n	80081d6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6818      	ldr	r0, [r3, #0]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	b2d9      	uxtb	r1, r3
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80081d0:	461a      	mov	r2, r3
 80081d2:	f00a fb6d 	bl	80128b0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3710      	adds	r7, #16
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
 80081f0:	460b      	mov	r3, r1
 80081f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80081f4:	78fb      	ldrb	r3, [r7, #3]
 80081f6:	f003 020f 	and.w	r2, r3, #15
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	429a      	cmp	r2, r3
 8008200:	d901      	bls.n	8008206 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008202:	2301      	movs	r3, #1
 8008204:	e042      	b.n	800828c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008206:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800820a:	2b00      	cmp	r3, #0
 800820c:	da0f      	bge.n	800822e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800820e:	78fb      	ldrb	r3, [r7, #3]
 8008210:	f003 020f 	and.w	r2, r3, #15
 8008214:	4613      	mov	r3, r2
 8008216:	00db      	lsls	r3, r3, #3
 8008218:	4413      	add	r3, r2
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	3338      	adds	r3, #56	; 0x38
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	4413      	add	r3, r2
 8008222:	3304      	adds	r3, #4
 8008224:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2201      	movs	r2, #1
 800822a:	705a      	strb	r2, [r3, #1]
 800822c:	e00f      	b.n	800824e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800822e:	78fb      	ldrb	r3, [r7, #3]
 8008230:	f003 020f 	and.w	r2, r3, #15
 8008234:	4613      	mov	r3, r2
 8008236:	00db      	lsls	r3, r3, #3
 8008238:	4413      	add	r3, r2
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008240:	687a      	ldr	r2, [r7, #4]
 8008242:	4413      	add	r3, r2
 8008244:	3304      	adds	r3, #4
 8008246:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2200      	movs	r2, #0
 800824c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2200      	movs	r2, #0
 8008252:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008254:	78fb      	ldrb	r3, [r7, #3]
 8008256:	f003 030f 	and.w	r3, r3, #15
 800825a:	b2da      	uxtb	r2, r3
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008266:	2b01      	cmp	r3, #1
 8008268:	d101      	bne.n	800826e <HAL_PCD_EP_ClrStall+0x86>
 800826a:	2302      	movs	r3, #2
 800826c:	e00e      	b.n	800828c <HAL_PCD_EP_ClrStall+0xa4>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	68f9      	ldr	r1, [r7, #12]
 800827c:	4618      	mov	r0, r3
 800827e:	f00a f983 	bl	8012588 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800828a:	2300      	movs	r3, #0
}
 800828c:	4618      	mov	r0, r3
 800828e:	3710      	adds	r7, #16
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	460b      	mov	r3, r1
 800829e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80082a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	da0c      	bge.n	80082c2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80082a8:	78fb      	ldrb	r3, [r7, #3]
 80082aa:	f003 020f 	and.w	r2, r3, #15
 80082ae:	4613      	mov	r3, r2
 80082b0:	00db      	lsls	r3, r3, #3
 80082b2:	4413      	add	r3, r2
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	3338      	adds	r3, #56	; 0x38
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	4413      	add	r3, r2
 80082bc:	3304      	adds	r3, #4
 80082be:	60fb      	str	r3, [r7, #12]
 80082c0:	e00c      	b.n	80082dc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80082c2:	78fb      	ldrb	r3, [r7, #3]
 80082c4:	f003 020f 	and.w	r2, r3, #15
 80082c8:	4613      	mov	r3, r2
 80082ca:	00db      	lsls	r3, r3, #3
 80082cc:	4413      	add	r3, r2
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	4413      	add	r3, r2
 80082d8:	3304      	adds	r3, #4
 80082da:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	68f9      	ldr	r1, [r7, #12]
 80082e2:	4618      	mov	r0, r3
 80082e4:	f009 ffa2 	bl	801222c <USB_EPStopXfer>
 80082e8:	4603      	mov	r3, r0
 80082ea:	72fb      	strb	r3, [r7, #11]

  return ret;
 80082ec:	7afb      	ldrb	r3, [r7, #11]
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3710      	adds	r7, #16
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}

080082f6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80082f6:	b580      	push	{r7, lr}
 80082f8:	b08a      	sub	sp, #40	; 0x28
 80082fa:	af02      	add	r7, sp, #8
 80082fc:	6078      	str	r0, [r7, #4]
 80082fe:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800830a:	683a      	ldr	r2, [r7, #0]
 800830c:	4613      	mov	r3, r2
 800830e:	00db      	lsls	r3, r3, #3
 8008310:	4413      	add	r3, r2
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	3338      	adds	r3, #56	; 0x38
 8008316:	687a      	ldr	r2, [r7, #4]
 8008318:	4413      	add	r3, r2
 800831a:	3304      	adds	r3, #4
 800831c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	695a      	ldr	r2, [r3, #20]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	429a      	cmp	r2, r3
 8008328:	d901      	bls.n	800832e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800832a:	2301      	movs	r3, #1
 800832c:	e06c      	b.n	8008408 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	691a      	ldr	r2, [r3, #16]
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	695b      	ldr	r3, [r3, #20]
 8008336:	1ad3      	subs	r3, r2, r3
 8008338:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	69fa      	ldr	r2, [r7, #28]
 8008340:	429a      	cmp	r2, r3
 8008342:	d902      	bls.n	800834a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800834a:	69fb      	ldr	r3, [r7, #28]
 800834c:	3303      	adds	r3, #3
 800834e:	089b      	lsrs	r3, r3, #2
 8008350:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008352:	e02b      	b.n	80083ac <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	691a      	ldr	r2, [r3, #16]
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	695b      	ldr	r3, [r3, #20]
 800835c:	1ad3      	subs	r3, r2, r3
 800835e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	69fa      	ldr	r2, [r7, #28]
 8008366:	429a      	cmp	r2, r3
 8008368:	d902      	bls.n	8008370 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008370:	69fb      	ldr	r3, [r7, #28]
 8008372:	3303      	adds	r3, #3
 8008374:	089b      	lsrs	r3, r3, #2
 8008376:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	68d9      	ldr	r1, [r3, #12]
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	b2da      	uxtb	r2, r3
 8008380:	69fb      	ldr	r3, [r7, #28]
 8008382:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008388:	b2db      	uxtb	r3, r3
 800838a:	9300      	str	r3, [sp, #0]
 800838c:	4603      	mov	r3, r0
 800838e:	6978      	ldr	r0, [r7, #20]
 8008390:	f009 fff6 	bl	8012380 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	68da      	ldr	r2, [r3, #12]
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	441a      	add	r2, r3
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	695a      	ldr	r2, [r3, #20]
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	441a      	add	r2, r3
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	015a      	lsls	r2, r3, #5
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	4413      	add	r3, r2
 80083b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083b8:	699b      	ldr	r3, [r3, #24]
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	69ba      	ldr	r2, [r7, #24]
 80083be:	429a      	cmp	r2, r3
 80083c0:	d809      	bhi.n	80083d6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	695a      	ldr	r2, [r3, #20]
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d203      	bcs.n	80083d6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	691b      	ldr	r3, [r3, #16]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d1be      	bne.n	8008354 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	691a      	ldr	r2, [r3, #16]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	695b      	ldr	r3, [r3, #20]
 80083de:	429a      	cmp	r2, r3
 80083e0:	d811      	bhi.n	8008406 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	f003 030f 	and.w	r3, r3, #15
 80083e8:	2201      	movs	r2, #1
 80083ea:	fa02 f303 	lsl.w	r3, r2, r3
 80083ee:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	43db      	mvns	r3, r3
 80083fc:	6939      	ldr	r1, [r7, #16]
 80083fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008402:	4013      	ands	r3, r2
 8008404:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008406:	2300      	movs	r3, #0
}
 8008408:	4618      	mov	r0, r3
 800840a:	3720      	adds	r7, #32
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b088      	sub	sp, #32
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008420:	69fb      	ldr	r3, [r7, #28]
 8008422:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008424:	69fb      	ldr	r3, [r7, #28]
 8008426:	333c      	adds	r3, #60	; 0x3c
 8008428:	3304      	adds	r3, #4
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	015a      	lsls	r2, r3, #5
 8008432:	69bb      	ldr	r3, [r7, #24]
 8008434:	4413      	add	r3, r2
 8008436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	68db      	ldr	r3, [r3, #12]
 8008442:	2b01      	cmp	r3, #1
 8008444:	d17b      	bne.n	800853e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	f003 0308 	and.w	r3, r3, #8
 800844c:	2b00      	cmp	r3, #0
 800844e:	d015      	beq.n	800847c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	4a61      	ldr	r2, [pc, #388]	; (80085d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008454:	4293      	cmp	r3, r2
 8008456:	f240 80b9 	bls.w	80085cc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008460:	2b00      	cmp	r3, #0
 8008462:	f000 80b3 	beq.w	80085cc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	015a      	lsls	r2, r3, #5
 800846a:	69bb      	ldr	r3, [r7, #24]
 800846c:	4413      	add	r3, r2
 800846e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008472:	461a      	mov	r2, r3
 8008474:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008478:	6093      	str	r3, [r2, #8]
 800847a:	e0a7      	b.n	80085cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	f003 0320 	and.w	r3, r3, #32
 8008482:	2b00      	cmp	r3, #0
 8008484:	d009      	beq.n	800849a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	015a      	lsls	r2, r3, #5
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	4413      	add	r3, r2
 800848e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008492:	461a      	mov	r2, r3
 8008494:	2320      	movs	r3, #32
 8008496:	6093      	str	r3, [r2, #8]
 8008498:	e098      	b.n	80085cc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	f040 8093 	bne.w	80085cc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	4a4b      	ldr	r2, [pc, #300]	; (80085d8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d90f      	bls.n	80084ce <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00a      	beq.n	80084ce <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	015a      	lsls	r2, r3, #5
 80084bc:	69bb      	ldr	r3, [r7, #24]
 80084be:	4413      	add	r3, r2
 80084c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084c4:	461a      	mov	r2, r3
 80084c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084ca:	6093      	str	r3, [r2, #8]
 80084cc:	e07e      	b.n	80085cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80084ce:	683a      	ldr	r2, [r7, #0]
 80084d0:	4613      	mov	r3, r2
 80084d2:	00db      	lsls	r3, r3, #3
 80084d4:	4413      	add	r3, r2
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	4413      	add	r3, r2
 80084e0:	3304      	adds	r3, #4
 80084e2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6a1a      	ldr	r2, [r3, #32]
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	0159      	lsls	r1, r3, #5
 80084ec:	69bb      	ldr	r3, [r7, #24]
 80084ee:	440b      	add	r3, r1
 80084f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084f4:	691b      	ldr	r3, [r3, #16]
 80084f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084fa:	1ad2      	subs	r2, r2, r3
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d114      	bne.n	8008530 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	691b      	ldr	r3, [r3, #16]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d109      	bne.n	8008522 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6818      	ldr	r0, [r3, #0]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008518:	461a      	mov	r2, r3
 800851a:	2101      	movs	r1, #1
 800851c:	f00a f9c8 	bl	80128b0 <USB_EP0_OutStart>
 8008520:	e006      	b.n	8008530 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	68da      	ldr	r2, [r3, #12]
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	695b      	ldr	r3, [r3, #20]
 800852a:	441a      	add	r2, r3
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	b2db      	uxtb	r3, r3
 8008534:	4619      	mov	r1, r3
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f00c ff18 	bl	801536c <HAL_PCD_DataOutStageCallback>
 800853c:	e046      	b.n	80085cc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	4a26      	ldr	r2, [pc, #152]	; (80085dc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d124      	bne.n	8008590 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800854c:	2b00      	cmp	r3, #0
 800854e:	d00a      	beq.n	8008566 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	015a      	lsls	r2, r3, #5
 8008554:	69bb      	ldr	r3, [r7, #24]
 8008556:	4413      	add	r3, r2
 8008558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800855c:	461a      	mov	r2, r3
 800855e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008562:	6093      	str	r3, [r2, #8]
 8008564:	e032      	b.n	80085cc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	f003 0320 	and.w	r3, r3, #32
 800856c:	2b00      	cmp	r3, #0
 800856e:	d008      	beq.n	8008582 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	015a      	lsls	r2, r3, #5
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	4413      	add	r3, r2
 8008578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800857c:	461a      	mov	r2, r3
 800857e:	2320      	movs	r3, #32
 8008580:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	b2db      	uxtb	r3, r3
 8008586:	4619      	mov	r1, r3
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f00c feef 	bl	801536c <HAL_PCD_DataOutStageCallback>
 800858e:	e01d      	b.n	80085cc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d114      	bne.n	80085c0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8008596:	6879      	ldr	r1, [r7, #4]
 8008598:	683a      	ldr	r2, [r7, #0]
 800859a:	4613      	mov	r3, r2
 800859c:	00db      	lsls	r3, r3, #3
 800859e:	4413      	add	r3, r2
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	440b      	add	r3, r1
 80085a4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d108      	bne.n	80085c0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6818      	ldr	r0, [r3, #0]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80085b8:	461a      	mov	r2, r3
 80085ba:	2100      	movs	r1, #0
 80085bc:	f00a f978 	bl	80128b0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	4619      	mov	r1, r3
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f00c fed0 	bl	801536c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80085cc:	2300      	movs	r3, #0
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3720      	adds	r7, #32
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
 80085d6:	bf00      	nop
 80085d8:	4f54300a 	.word	0x4f54300a
 80085dc:	4f54310a 	.word	0x4f54310a

080085e0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b086      	sub	sp, #24
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	333c      	adds	r3, #60	; 0x3c
 80085f8:	3304      	adds	r3, #4
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	015a      	lsls	r2, r3, #5
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	4413      	add	r3, r2
 8008606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	4a15      	ldr	r2, [pc, #84]	; (8008668 <PCD_EP_OutSetupPacket_int+0x88>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d90e      	bls.n	8008634 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800861c:	2b00      	cmp	r3, #0
 800861e:	d009      	beq.n	8008634 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	015a      	lsls	r2, r3, #5
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	4413      	add	r3, r2
 8008628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800862c:	461a      	mov	r2, r3
 800862e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008632:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f00c fe87 	bl	8015348 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	4a0a      	ldr	r2, [pc, #40]	; (8008668 <PCD_EP_OutSetupPacket_int+0x88>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d90c      	bls.n	800865c <PCD_EP_OutSetupPacket_int+0x7c>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	68db      	ldr	r3, [r3, #12]
 8008646:	2b01      	cmp	r3, #1
 8008648:	d108      	bne.n	800865c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6818      	ldr	r0, [r3, #0]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008654:	461a      	mov	r2, r3
 8008656:	2101      	movs	r1, #1
 8008658:	f00a f92a 	bl	80128b0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3718      	adds	r7, #24
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	4f54300a 	.word	0x4f54300a

0800866c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800866c:	b480      	push	{r7}
 800866e:	b085      	sub	sp, #20
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	460b      	mov	r3, r1
 8008676:	70fb      	strb	r3, [r7, #3]
 8008678:	4613      	mov	r3, r2
 800867a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008682:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008684:	78fb      	ldrb	r3, [r7, #3]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d107      	bne.n	800869a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800868a:	883b      	ldrh	r3, [r7, #0]
 800868c:	0419      	lsls	r1, r3, #16
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	68ba      	ldr	r2, [r7, #8]
 8008694:	430a      	orrs	r2, r1
 8008696:	629a      	str	r2, [r3, #40]	; 0x28
 8008698:	e028      	b.n	80086ec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a0:	0c1b      	lsrs	r3, r3, #16
 80086a2:	68ba      	ldr	r2, [r7, #8]
 80086a4:	4413      	add	r3, r2
 80086a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80086a8:	2300      	movs	r3, #0
 80086aa:	73fb      	strb	r3, [r7, #15]
 80086ac:	e00d      	b.n	80086ca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	7bfb      	ldrb	r3, [r7, #15]
 80086b4:	3340      	adds	r3, #64	; 0x40
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	4413      	add	r3, r2
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	0c1b      	lsrs	r3, r3, #16
 80086be:	68ba      	ldr	r2, [r7, #8]
 80086c0:	4413      	add	r3, r2
 80086c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80086c4:	7bfb      	ldrb	r3, [r7, #15]
 80086c6:	3301      	adds	r3, #1
 80086c8:	73fb      	strb	r3, [r7, #15]
 80086ca:	7bfa      	ldrb	r2, [r7, #15]
 80086cc:	78fb      	ldrb	r3, [r7, #3]
 80086ce:	3b01      	subs	r3, #1
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d3ec      	bcc.n	80086ae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80086d4:	883b      	ldrh	r3, [r7, #0]
 80086d6:	0418      	lsls	r0, r3, #16
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6819      	ldr	r1, [r3, #0]
 80086dc:	78fb      	ldrb	r3, [r7, #3]
 80086de:	3b01      	subs	r3, #1
 80086e0:	68ba      	ldr	r2, [r7, #8]
 80086e2:	4302      	orrs	r2, r0
 80086e4:	3340      	adds	r3, #64	; 0x40
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	440b      	add	r3, r1
 80086ea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3714      	adds	r7, #20
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr

080086fa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80086fa:	b480      	push	{r7}
 80086fc:	b083      	sub	sp, #12
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
 8008702:	460b      	mov	r3, r1
 8008704:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	887a      	ldrh	r2, [r7, #2]
 800870c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800871c:	b480      	push	{r7}
 800871e:	b085      	sub	sp, #20
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2201      	movs	r2, #1
 800872e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	699b      	ldr	r3, [r3, #24]
 800873e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800874a:	4b05      	ldr	r3, [pc, #20]	; (8008760 <HAL_PCDEx_ActivateLPM+0x44>)
 800874c:	4313      	orrs	r3, r2
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8008752:	2300      	movs	r3, #0
}
 8008754:	4618      	mov	r0, r3
 8008756:	3714      	adds	r7, #20
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr
 8008760:	10000003 	.word	0x10000003

08008764 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	460b      	mov	r3, r1
 800876e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008770:	bf00      	nop
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008784:	4b19      	ldr	r3, [pc, #100]	; (80087ec <HAL_PWREx_ConfigSupply+0x70>)
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	f003 0304 	and.w	r3, r3, #4
 800878c:	2b04      	cmp	r3, #4
 800878e:	d00a      	beq.n	80087a6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008790:	4b16      	ldr	r3, [pc, #88]	; (80087ec <HAL_PWREx_ConfigSupply+0x70>)
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	f003 0307 	and.w	r3, r3, #7
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	429a      	cmp	r2, r3
 800879c:	d001      	beq.n	80087a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800879e:	2301      	movs	r3, #1
 80087a0:	e01f      	b.n	80087e2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80087a2:	2300      	movs	r3, #0
 80087a4:	e01d      	b.n	80087e2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80087a6:	4b11      	ldr	r3, [pc, #68]	; (80087ec <HAL_PWREx_ConfigSupply+0x70>)
 80087a8:	68db      	ldr	r3, [r3, #12]
 80087aa:	f023 0207 	bic.w	r2, r3, #7
 80087ae:	490f      	ldr	r1, [pc, #60]	; (80087ec <HAL_PWREx_ConfigSupply+0x70>)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80087b6:	f7fa fd3d 	bl	8003234 <HAL_GetTick>
 80087ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80087bc:	e009      	b.n	80087d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80087be:	f7fa fd39 	bl	8003234 <HAL_GetTick>
 80087c2:	4602      	mov	r2, r0
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	1ad3      	subs	r3, r2, r3
 80087c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087cc:	d901      	bls.n	80087d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80087ce:	2301      	movs	r3, #1
 80087d0:	e007      	b.n	80087e2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80087d2:	4b06      	ldr	r3, [pc, #24]	; (80087ec <HAL_PWREx_ConfigSupply+0x70>)
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087de:	d1ee      	bne.n	80087be <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3710      	adds	r7, #16
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
 80087ea:	bf00      	nop
 80087ec:	58024800 	.word	0x58024800

080087f0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80087f0:	b480      	push	{r7}
 80087f2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80087f4:	4b05      	ldr	r3, [pc, #20]	; (800880c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	4a04      	ldr	r2, [pc, #16]	; (800880c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80087fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80087fe:	60d3      	str	r3, [r2, #12]
}
 8008800:	bf00      	nop
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr
 800880a:	bf00      	nop
 800880c:	58024800 	.word	0x58024800

08008810 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b08c      	sub	sp, #48	; 0x30
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d101      	bne.n	8008822 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800881e:	2301      	movs	r3, #1
 8008820:	e3c8      	b.n	8008fb4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 0301 	and.w	r3, r3, #1
 800882a:	2b00      	cmp	r3, #0
 800882c:	f000 8087 	beq.w	800893e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008830:	4b88      	ldr	r3, [pc, #544]	; (8008a54 <HAL_RCC_OscConfig+0x244>)
 8008832:	691b      	ldr	r3, [r3, #16]
 8008834:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008838:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800883a:	4b86      	ldr	r3, [pc, #536]	; (8008a54 <HAL_RCC_OscConfig+0x244>)
 800883c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800883e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008842:	2b10      	cmp	r3, #16
 8008844:	d007      	beq.n	8008856 <HAL_RCC_OscConfig+0x46>
 8008846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008848:	2b18      	cmp	r3, #24
 800884a:	d110      	bne.n	800886e <HAL_RCC_OscConfig+0x5e>
 800884c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800884e:	f003 0303 	and.w	r3, r3, #3
 8008852:	2b02      	cmp	r3, #2
 8008854:	d10b      	bne.n	800886e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008856:	4b7f      	ldr	r3, [pc, #508]	; (8008a54 <HAL_RCC_OscConfig+0x244>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800885e:	2b00      	cmp	r3, #0
 8008860:	d06c      	beq.n	800893c <HAL_RCC_OscConfig+0x12c>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d168      	bne.n	800893c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	e3a2      	b.n	8008fb4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008876:	d106      	bne.n	8008886 <HAL_RCC_OscConfig+0x76>
 8008878:	4b76      	ldr	r3, [pc, #472]	; (8008a54 <HAL_RCC_OscConfig+0x244>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a75      	ldr	r2, [pc, #468]	; (8008a54 <HAL_RCC_OscConfig+0x244>)
 800887e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008882:	6013      	str	r3, [r2, #0]
 8008884:	e02e      	b.n	80088e4 <HAL_RCC_OscConfig+0xd4>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d10c      	bne.n	80088a8 <HAL_RCC_OscConfig+0x98>
 800888e:	4b71      	ldr	r3, [pc, #452]	; (8008a54 <HAL_RCC_OscConfig+0x244>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a70      	ldr	r2, [pc, #448]	; (8008a54 <HAL_RCC_OscConfig+0x244>)
 8008894:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008898:	6013      	str	r3, [r2, #0]
 800889a:	4b6e      	ldr	r3, [pc, #440]	; (8008a54 <HAL_RCC_OscConfig+0x244>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a6d      	ldr	r2, [pc, #436]	; (8008a54 <HAL_RCC_OscConfig+0x244>)
 80088a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80088a4:	6013      	str	r3, [r2, #0]
 80088a6:	e01d      	b.n	80088e4 <HAL_RCC_OscConfig+0xd4>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	685b      	ldr	r3, [r3, #4]
 80088ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80088b0:	d10c      	bne.n	80088cc <HAL_RCC_OscConfig+0xbc>
 80088b2:	4b68      	ldr	r3, [pc, #416]	; (8008a54 <HAL_RCC_OscConfig+0x244>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a67      	ldr	r2, [pc, #412]	; (8008a54 <HAL_RCC_OscConfig+0x244>)
 80088b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80088bc:	6013      	str	r3, [r2, #0]
 80088be:	4b65      	ldr	r3, [pc, #404]	; (8008a54 <HAL_RCC_OscConfig+0x244>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a64      	ldr	r2, [pc, #400]	; (8008a54 <HAL_RCC_OscConfig+0x244>)
 80088c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088c8:	6013      	str	r3, [r2, #0]
 80088ca:	e00b      	b.n	80088e4 <HAL_RCC_OscConfig+0xd4>
 80088cc:	4b61      	ldr	r3, [pc, #388]	; (8008a54 <HAL_RCC_OscConfig+0x244>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a60      	ldr	r2, [pc, #384]	; (8008a54 <HAL_RCC_OscConfig+0x244>)
 80088d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088d6:	6013      	str	r3, [r2, #0]
 80088d8:	4b5e      	ldr	r3, [pc, #376]	; (8008a54 <HAL_RCC_OscConfig+0x244>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a5d      	ldr	r2, [pc, #372]	; (8008a54 <HAL_RCC_OscConfig+0x244>)
 80088de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80088e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d013      	beq.n	8008914 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088ec:	f7fa fca2 	bl	8003234 <HAL_GetTick>
 80088f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80088f2:	e008      	b.n	8008906 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80088f4:	f7fa fc9e 	bl	8003234 <HAL_GetTick>
 80088f8:	4602      	mov	r2, r0
 80088fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fc:	1ad3      	subs	r3, r2, r3
 80088fe:	2b64      	cmp	r3, #100	; 0x64
 8008900:	d901      	bls.n	8008906 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008902:	2303      	movs	r3, #3
 8008904:	e356      	b.n	8008fb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008906:	4b53      	ldr	r3, [pc, #332]	; (8008a54 <HAL_RCC_OscConfig+0x244>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800890e:	2b00      	cmp	r3, #0
 8008910:	d0f0      	beq.n	80088f4 <HAL_RCC_OscConfig+0xe4>
 8008912:	e014      	b.n	800893e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008914:	f7fa fc8e 	bl	8003234 <HAL_GetTick>
 8008918:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800891a:	e008      	b.n	800892e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800891c:	f7fa fc8a 	bl	8003234 <HAL_GetTick>
 8008920:	4602      	mov	r2, r0
 8008922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008924:	1ad3      	subs	r3, r2, r3
 8008926:	2b64      	cmp	r3, #100	; 0x64
 8008928:	d901      	bls.n	800892e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800892a:	2303      	movs	r3, #3
 800892c:	e342      	b.n	8008fb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800892e:	4b49      	ldr	r3, [pc, #292]	; (8008a54 <HAL_RCC_OscConfig+0x244>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008936:	2b00      	cmp	r3, #0
 8008938:	d1f0      	bne.n	800891c <HAL_RCC_OscConfig+0x10c>
 800893a:	e000      	b.n	800893e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800893c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f003 0302 	and.w	r3, r3, #2
 8008946:	2b00      	cmp	r3, #0
 8008948:	f000 808c 	beq.w	8008a64 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800894c:	4b41      	ldr	r3, [pc, #260]	; (8008a54 <HAL_RCC_OscConfig+0x244>)
 800894e:	691b      	ldr	r3, [r3, #16]
 8008950:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008954:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008956:	4b3f      	ldr	r3, [pc, #252]	; (8008a54 <HAL_RCC_OscConfig+0x244>)
 8008958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800895a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800895c:	6a3b      	ldr	r3, [r7, #32]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d007      	beq.n	8008972 <HAL_RCC_OscConfig+0x162>
 8008962:	6a3b      	ldr	r3, [r7, #32]
 8008964:	2b18      	cmp	r3, #24
 8008966:	d137      	bne.n	80089d8 <HAL_RCC_OscConfig+0x1c8>
 8008968:	69fb      	ldr	r3, [r7, #28]
 800896a:	f003 0303 	and.w	r3, r3, #3
 800896e:	2b00      	cmp	r3, #0
 8008970:	d132      	bne.n	80089d8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008972:	4b38      	ldr	r3, [pc, #224]	; (8008a54 <HAL_RCC_OscConfig+0x244>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f003 0304 	and.w	r3, r3, #4
 800897a:	2b00      	cmp	r3, #0
 800897c:	d005      	beq.n	800898a <HAL_RCC_OscConfig+0x17a>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	68db      	ldr	r3, [r3, #12]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d101      	bne.n	800898a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008986:	2301      	movs	r3, #1
 8008988:	e314      	b.n	8008fb4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800898a:	4b32      	ldr	r3, [pc, #200]	; (8008a54 <HAL_RCC_OscConfig+0x244>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f023 0219 	bic.w	r2, r3, #25
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	68db      	ldr	r3, [r3, #12]
 8008996:	492f      	ldr	r1, [pc, #188]	; (8008a54 <HAL_RCC_OscConfig+0x244>)
 8008998:	4313      	orrs	r3, r2
 800899a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800899c:	f7fa fc4a 	bl	8003234 <HAL_GetTick>
 80089a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80089a2:	e008      	b.n	80089b6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80089a4:	f7fa fc46 	bl	8003234 <HAL_GetTick>
 80089a8:	4602      	mov	r2, r0
 80089aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ac:	1ad3      	subs	r3, r2, r3
 80089ae:	2b02      	cmp	r3, #2
 80089b0:	d901      	bls.n	80089b6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80089b2:	2303      	movs	r3, #3
 80089b4:	e2fe      	b.n	8008fb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80089b6:	4b27      	ldr	r3, [pc, #156]	; (8008a54 <HAL_RCC_OscConfig+0x244>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f003 0304 	and.w	r3, r3, #4
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d0f0      	beq.n	80089a4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089c2:	4b24      	ldr	r3, [pc, #144]	; (8008a54 <HAL_RCC_OscConfig+0x244>)
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	691b      	ldr	r3, [r3, #16]
 80089ce:	061b      	lsls	r3, r3, #24
 80089d0:	4920      	ldr	r1, [pc, #128]	; (8008a54 <HAL_RCC_OscConfig+0x244>)
 80089d2:	4313      	orrs	r3, r2
 80089d4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80089d6:	e045      	b.n	8008a64 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d026      	beq.n	8008a2e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80089e0:	4b1c      	ldr	r3, [pc, #112]	; (8008a54 <HAL_RCC_OscConfig+0x244>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f023 0219 	bic.w	r2, r3, #25
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	4919      	ldr	r1, [pc, #100]	; (8008a54 <HAL_RCC_OscConfig+0x244>)
 80089ee:	4313      	orrs	r3, r2
 80089f0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089f2:	f7fa fc1f 	bl	8003234 <HAL_GetTick>
 80089f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80089f8:	e008      	b.n	8008a0c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80089fa:	f7fa fc1b 	bl	8003234 <HAL_GetTick>
 80089fe:	4602      	mov	r2, r0
 8008a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a02:	1ad3      	subs	r3, r2, r3
 8008a04:	2b02      	cmp	r3, #2
 8008a06:	d901      	bls.n	8008a0c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008a08:	2303      	movs	r3, #3
 8008a0a:	e2d3      	b.n	8008fb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a0c:	4b11      	ldr	r3, [pc, #68]	; (8008a54 <HAL_RCC_OscConfig+0x244>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f003 0304 	and.w	r3, r3, #4
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d0f0      	beq.n	80089fa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a18:	4b0e      	ldr	r3, [pc, #56]	; (8008a54 <HAL_RCC_OscConfig+0x244>)
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	691b      	ldr	r3, [r3, #16]
 8008a24:	061b      	lsls	r3, r3, #24
 8008a26:	490b      	ldr	r1, [pc, #44]	; (8008a54 <HAL_RCC_OscConfig+0x244>)
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	604b      	str	r3, [r1, #4]
 8008a2c:	e01a      	b.n	8008a64 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008a2e:	4b09      	ldr	r3, [pc, #36]	; (8008a54 <HAL_RCC_OscConfig+0x244>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a08      	ldr	r2, [pc, #32]	; (8008a54 <HAL_RCC_OscConfig+0x244>)
 8008a34:	f023 0301 	bic.w	r3, r3, #1
 8008a38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a3a:	f7fa fbfb 	bl	8003234 <HAL_GetTick>
 8008a3e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008a40:	e00a      	b.n	8008a58 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a42:	f7fa fbf7 	bl	8003234 <HAL_GetTick>
 8008a46:	4602      	mov	r2, r0
 8008a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4a:	1ad3      	subs	r3, r2, r3
 8008a4c:	2b02      	cmp	r3, #2
 8008a4e:	d903      	bls.n	8008a58 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008a50:	2303      	movs	r3, #3
 8008a52:	e2af      	b.n	8008fb4 <HAL_RCC_OscConfig+0x7a4>
 8008a54:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008a58:	4b96      	ldr	r3, [pc, #600]	; (8008cb4 <HAL_RCC_OscConfig+0x4a4>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f003 0304 	and.w	r3, r3, #4
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d1ee      	bne.n	8008a42 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f003 0310 	and.w	r3, r3, #16
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d06a      	beq.n	8008b46 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a70:	4b90      	ldr	r3, [pc, #576]	; (8008cb4 <HAL_RCC_OscConfig+0x4a4>)
 8008a72:	691b      	ldr	r3, [r3, #16]
 8008a74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a78:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008a7a:	4b8e      	ldr	r3, [pc, #568]	; (8008cb4 <HAL_RCC_OscConfig+0x4a4>)
 8008a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a7e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008a80:	69bb      	ldr	r3, [r7, #24]
 8008a82:	2b08      	cmp	r3, #8
 8008a84:	d007      	beq.n	8008a96 <HAL_RCC_OscConfig+0x286>
 8008a86:	69bb      	ldr	r3, [r7, #24]
 8008a88:	2b18      	cmp	r3, #24
 8008a8a:	d11b      	bne.n	8008ac4 <HAL_RCC_OscConfig+0x2b4>
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	f003 0303 	and.w	r3, r3, #3
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d116      	bne.n	8008ac4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008a96:	4b87      	ldr	r3, [pc, #540]	; (8008cb4 <HAL_RCC_OscConfig+0x4a4>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d005      	beq.n	8008aae <HAL_RCC_OscConfig+0x29e>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	69db      	ldr	r3, [r3, #28]
 8008aa6:	2b80      	cmp	r3, #128	; 0x80
 8008aa8:	d001      	beq.n	8008aae <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	e282      	b.n	8008fb4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008aae:	4b81      	ldr	r3, [pc, #516]	; (8008cb4 <HAL_RCC_OscConfig+0x4a4>)
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6a1b      	ldr	r3, [r3, #32]
 8008aba:	061b      	lsls	r3, r3, #24
 8008abc:	497d      	ldr	r1, [pc, #500]	; (8008cb4 <HAL_RCC_OscConfig+0x4a4>)
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008ac2:	e040      	b.n	8008b46 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	69db      	ldr	r3, [r3, #28]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d023      	beq.n	8008b14 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008acc:	4b79      	ldr	r3, [pc, #484]	; (8008cb4 <HAL_RCC_OscConfig+0x4a4>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a78      	ldr	r2, [pc, #480]	; (8008cb4 <HAL_RCC_OscConfig+0x4a4>)
 8008ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ad6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ad8:	f7fa fbac 	bl	8003234 <HAL_GetTick>
 8008adc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008ade:	e008      	b.n	8008af2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008ae0:	f7fa fba8 	bl	8003234 <HAL_GetTick>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae8:	1ad3      	subs	r3, r2, r3
 8008aea:	2b02      	cmp	r3, #2
 8008aec:	d901      	bls.n	8008af2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008aee:	2303      	movs	r3, #3
 8008af0:	e260      	b.n	8008fb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008af2:	4b70      	ldr	r3, [pc, #448]	; (8008cb4 <HAL_RCC_OscConfig+0x4a4>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d0f0      	beq.n	8008ae0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008afe:	4b6d      	ldr	r3, [pc, #436]	; (8008cb4 <HAL_RCC_OscConfig+0x4a4>)
 8008b00:	68db      	ldr	r3, [r3, #12]
 8008b02:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6a1b      	ldr	r3, [r3, #32]
 8008b0a:	061b      	lsls	r3, r3, #24
 8008b0c:	4969      	ldr	r1, [pc, #420]	; (8008cb4 <HAL_RCC_OscConfig+0x4a4>)
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	60cb      	str	r3, [r1, #12]
 8008b12:	e018      	b.n	8008b46 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008b14:	4b67      	ldr	r3, [pc, #412]	; (8008cb4 <HAL_RCC_OscConfig+0x4a4>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a66      	ldr	r2, [pc, #408]	; (8008cb4 <HAL_RCC_OscConfig+0x4a4>)
 8008b1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b20:	f7fa fb88 	bl	8003234 <HAL_GetTick>
 8008b24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008b26:	e008      	b.n	8008b3a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008b28:	f7fa fb84 	bl	8003234 <HAL_GetTick>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b30:	1ad3      	subs	r3, r2, r3
 8008b32:	2b02      	cmp	r3, #2
 8008b34:	d901      	bls.n	8008b3a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008b36:	2303      	movs	r3, #3
 8008b38:	e23c      	b.n	8008fb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008b3a:	4b5e      	ldr	r3, [pc, #376]	; (8008cb4 <HAL_RCC_OscConfig+0x4a4>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d1f0      	bne.n	8008b28 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f003 0308 	and.w	r3, r3, #8
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d036      	beq.n	8008bc0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	695b      	ldr	r3, [r3, #20]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d019      	beq.n	8008b8e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008b5a:	4b56      	ldr	r3, [pc, #344]	; (8008cb4 <HAL_RCC_OscConfig+0x4a4>)
 8008b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b5e:	4a55      	ldr	r2, [pc, #340]	; (8008cb4 <HAL_RCC_OscConfig+0x4a4>)
 8008b60:	f043 0301 	orr.w	r3, r3, #1
 8008b64:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b66:	f7fa fb65 	bl	8003234 <HAL_GetTick>
 8008b6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008b6c:	e008      	b.n	8008b80 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b6e:	f7fa fb61 	bl	8003234 <HAL_GetTick>
 8008b72:	4602      	mov	r2, r0
 8008b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b76:	1ad3      	subs	r3, r2, r3
 8008b78:	2b02      	cmp	r3, #2
 8008b7a:	d901      	bls.n	8008b80 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008b7c:	2303      	movs	r3, #3
 8008b7e:	e219      	b.n	8008fb4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008b80:	4b4c      	ldr	r3, [pc, #304]	; (8008cb4 <HAL_RCC_OscConfig+0x4a4>)
 8008b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b84:	f003 0302 	and.w	r3, r3, #2
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d0f0      	beq.n	8008b6e <HAL_RCC_OscConfig+0x35e>
 8008b8c:	e018      	b.n	8008bc0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b8e:	4b49      	ldr	r3, [pc, #292]	; (8008cb4 <HAL_RCC_OscConfig+0x4a4>)
 8008b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b92:	4a48      	ldr	r2, [pc, #288]	; (8008cb4 <HAL_RCC_OscConfig+0x4a4>)
 8008b94:	f023 0301 	bic.w	r3, r3, #1
 8008b98:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b9a:	f7fa fb4b 	bl	8003234 <HAL_GetTick>
 8008b9e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008ba0:	e008      	b.n	8008bb4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ba2:	f7fa fb47 	bl	8003234 <HAL_GetTick>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008baa:	1ad3      	subs	r3, r2, r3
 8008bac:	2b02      	cmp	r3, #2
 8008bae:	d901      	bls.n	8008bb4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008bb0:	2303      	movs	r3, #3
 8008bb2:	e1ff      	b.n	8008fb4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008bb4:	4b3f      	ldr	r3, [pc, #252]	; (8008cb4 <HAL_RCC_OscConfig+0x4a4>)
 8008bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bb8:	f003 0302 	and.w	r3, r3, #2
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d1f0      	bne.n	8008ba2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f003 0320 	and.w	r3, r3, #32
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d036      	beq.n	8008c3a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	699b      	ldr	r3, [r3, #24]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d019      	beq.n	8008c08 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008bd4:	4b37      	ldr	r3, [pc, #220]	; (8008cb4 <HAL_RCC_OscConfig+0x4a4>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a36      	ldr	r2, [pc, #216]	; (8008cb4 <HAL_RCC_OscConfig+0x4a4>)
 8008bda:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008bde:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008be0:	f7fa fb28 	bl	8003234 <HAL_GetTick>
 8008be4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008be6:	e008      	b.n	8008bfa <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008be8:	f7fa fb24 	bl	8003234 <HAL_GetTick>
 8008bec:	4602      	mov	r2, r0
 8008bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf0:	1ad3      	subs	r3, r2, r3
 8008bf2:	2b02      	cmp	r3, #2
 8008bf4:	d901      	bls.n	8008bfa <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8008bf6:	2303      	movs	r3, #3
 8008bf8:	e1dc      	b.n	8008fb4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008bfa:	4b2e      	ldr	r3, [pc, #184]	; (8008cb4 <HAL_RCC_OscConfig+0x4a4>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d0f0      	beq.n	8008be8 <HAL_RCC_OscConfig+0x3d8>
 8008c06:	e018      	b.n	8008c3a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008c08:	4b2a      	ldr	r3, [pc, #168]	; (8008cb4 <HAL_RCC_OscConfig+0x4a4>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a29      	ldr	r2, [pc, #164]	; (8008cb4 <HAL_RCC_OscConfig+0x4a4>)
 8008c0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c12:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008c14:	f7fa fb0e 	bl	8003234 <HAL_GetTick>
 8008c18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008c1a:	e008      	b.n	8008c2e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008c1c:	f7fa fb0a 	bl	8003234 <HAL_GetTick>
 8008c20:	4602      	mov	r2, r0
 8008c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c24:	1ad3      	subs	r3, r2, r3
 8008c26:	2b02      	cmp	r3, #2
 8008c28:	d901      	bls.n	8008c2e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8008c2a:	2303      	movs	r3, #3
 8008c2c:	e1c2      	b.n	8008fb4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008c2e:	4b21      	ldr	r3, [pc, #132]	; (8008cb4 <HAL_RCC_OscConfig+0x4a4>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d1f0      	bne.n	8008c1c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f003 0304 	and.w	r3, r3, #4
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	f000 8086 	beq.w	8008d54 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008c48:	4b1b      	ldr	r3, [pc, #108]	; (8008cb8 <HAL_RCC_OscConfig+0x4a8>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a1a      	ldr	r2, [pc, #104]	; (8008cb8 <HAL_RCC_OscConfig+0x4a8>)
 8008c4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008c54:	f7fa faee 	bl	8003234 <HAL_GetTick>
 8008c58:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c5a:	e008      	b.n	8008c6e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c5c:	f7fa faea 	bl	8003234 <HAL_GetTick>
 8008c60:	4602      	mov	r2, r0
 8008c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c64:	1ad3      	subs	r3, r2, r3
 8008c66:	2b64      	cmp	r3, #100	; 0x64
 8008c68:	d901      	bls.n	8008c6e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008c6a:	2303      	movs	r3, #3
 8008c6c:	e1a2      	b.n	8008fb4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c6e:	4b12      	ldr	r3, [pc, #72]	; (8008cb8 <HAL_RCC_OscConfig+0x4a8>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d0f0      	beq.n	8008c5c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	689b      	ldr	r3, [r3, #8]
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d106      	bne.n	8008c90 <HAL_RCC_OscConfig+0x480>
 8008c82:	4b0c      	ldr	r3, [pc, #48]	; (8008cb4 <HAL_RCC_OscConfig+0x4a4>)
 8008c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c86:	4a0b      	ldr	r2, [pc, #44]	; (8008cb4 <HAL_RCC_OscConfig+0x4a4>)
 8008c88:	f043 0301 	orr.w	r3, r3, #1
 8008c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8008c8e:	e032      	b.n	8008cf6 <HAL_RCC_OscConfig+0x4e6>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d111      	bne.n	8008cbc <HAL_RCC_OscConfig+0x4ac>
 8008c98:	4b06      	ldr	r3, [pc, #24]	; (8008cb4 <HAL_RCC_OscConfig+0x4a4>)
 8008c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c9c:	4a05      	ldr	r2, [pc, #20]	; (8008cb4 <HAL_RCC_OscConfig+0x4a4>)
 8008c9e:	f023 0301 	bic.w	r3, r3, #1
 8008ca2:	6713      	str	r3, [r2, #112]	; 0x70
 8008ca4:	4b03      	ldr	r3, [pc, #12]	; (8008cb4 <HAL_RCC_OscConfig+0x4a4>)
 8008ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ca8:	4a02      	ldr	r2, [pc, #8]	; (8008cb4 <HAL_RCC_OscConfig+0x4a4>)
 8008caa:	f023 0304 	bic.w	r3, r3, #4
 8008cae:	6713      	str	r3, [r2, #112]	; 0x70
 8008cb0:	e021      	b.n	8008cf6 <HAL_RCC_OscConfig+0x4e6>
 8008cb2:	bf00      	nop
 8008cb4:	58024400 	.word	0x58024400
 8008cb8:	58024800 	.word	0x58024800
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	2b05      	cmp	r3, #5
 8008cc2:	d10c      	bne.n	8008cde <HAL_RCC_OscConfig+0x4ce>
 8008cc4:	4b83      	ldr	r3, [pc, #524]	; (8008ed4 <HAL_RCC_OscConfig+0x6c4>)
 8008cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cc8:	4a82      	ldr	r2, [pc, #520]	; (8008ed4 <HAL_RCC_OscConfig+0x6c4>)
 8008cca:	f043 0304 	orr.w	r3, r3, #4
 8008cce:	6713      	str	r3, [r2, #112]	; 0x70
 8008cd0:	4b80      	ldr	r3, [pc, #512]	; (8008ed4 <HAL_RCC_OscConfig+0x6c4>)
 8008cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cd4:	4a7f      	ldr	r2, [pc, #508]	; (8008ed4 <HAL_RCC_OscConfig+0x6c4>)
 8008cd6:	f043 0301 	orr.w	r3, r3, #1
 8008cda:	6713      	str	r3, [r2, #112]	; 0x70
 8008cdc:	e00b      	b.n	8008cf6 <HAL_RCC_OscConfig+0x4e6>
 8008cde:	4b7d      	ldr	r3, [pc, #500]	; (8008ed4 <HAL_RCC_OscConfig+0x6c4>)
 8008ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ce2:	4a7c      	ldr	r2, [pc, #496]	; (8008ed4 <HAL_RCC_OscConfig+0x6c4>)
 8008ce4:	f023 0301 	bic.w	r3, r3, #1
 8008ce8:	6713      	str	r3, [r2, #112]	; 0x70
 8008cea:	4b7a      	ldr	r3, [pc, #488]	; (8008ed4 <HAL_RCC_OscConfig+0x6c4>)
 8008cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cee:	4a79      	ldr	r2, [pc, #484]	; (8008ed4 <HAL_RCC_OscConfig+0x6c4>)
 8008cf0:	f023 0304 	bic.w	r3, r3, #4
 8008cf4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	689b      	ldr	r3, [r3, #8]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d015      	beq.n	8008d2a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cfe:	f7fa fa99 	bl	8003234 <HAL_GetTick>
 8008d02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d04:	e00a      	b.n	8008d1c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d06:	f7fa fa95 	bl	8003234 <HAL_GetTick>
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0e:	1ad3      	subs	r3, r2, r3
 8008d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d901      	bls.n	8008d1c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008d18:	2303      	movs	r3, #3
 8008d1a:	e14b      	b.n	8008fb4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008d1c:	4b6d      	ldr	r3, [pc, #436]	; (8008ed4 <HAL_RCC_OscConfig+0x6c4>)
 8008d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d20:	f003 0302 	and.w	r3, r3, #2
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d0ee      	beq.n	8008d06 <HAL_RCC_OscConfig+0x4f6>
 8008d28:	e014      	b.n	8008d54 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d2a:	f7fa fa83 	bl	8003234 <HAL_GetTick>
 8008d2e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008d30:	e00a      	b.n	8008d48 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d32:	f7fa fa7f 	bl	8003234 <HAL_GetTick>
 8008d36:	4602      	mov	r2, r0
 8008d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3a:	1ad3      	subs	r3, r2, r3
 8008d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d901      	bls.n	8008d48 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008d44:	2303      	movs	r3, #3
 8008d46:	e135      	b.n	8008fb4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008d48:	4b62      	ldr	r3, [pc, #392]	; (8008ed4 <HAL_RCC_OscConfig+0x6c4>)
 8008d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d4c:	f003 0302 	and.w	r3, r3, #2
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d1ee      	bne.n	8008d32 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	f000 812a 	beq.w	8008fb2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008d5e:	4b5d      	ldr	r3, [pc, #372]	; (8008ed4 <HAL_RCC_OscConfig+0x6c4>)
 8008d60:	691b      	ldr	r3, [r3, #16]
 8008d62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008d66:	2b18      	cmp	r3, #24
 8008d68:	f000 80ba 	beq.w	8008ee0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d70:	2b02      	cmp	r3, #2
 8008d72:	f040 8095 	bne.w	8008ea0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d76:	4b57      	ldr	r3, [pc, #348]	; (8008ed4 <HAL_RCC_OscConfig+0x6c4>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a56      	ldr	r2, [pc, #344]	; (8008ed4 <HAL_RCC_OscConfig+0x6c4>)
 8008d7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d82:	f7fa fa57 	bl	8003234 <HAL_GetTick>
 8008d86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d88:	e008      	b.n	8008d9c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d8a:	f7fa fa53 	bl	8003234 <HAL_GetTick>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d92:	1ad3      	subs	r3, r2, r3
 8008d94:	2b02      	cmp	r3, #2
 8008d96:	d901      	bls.n	8008d9c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008d98:	2303      	movs	r3, #3
 8008d9a:	e10b      	b.n	8008fb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008d9c:	4b4d      	ldr	r3, [pc, #308]	; (8008ed4 <HAL_RCC_OscConfig+0x6c4>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d1f0      	bne.n	8008d8a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008da8:	4b4a      	ldr	r3, [pc, #296]	; (8008ed4 <HAL_RCC_OscConfig+0x6c4>)
 8008daa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008dac:	4b4a      	ldr	r3, [pc, #296]	; (8008ed8 <HAL_RCC_OscConfig+0x6c8>)
 8008dae:	4013      	ands	r3, r2
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008db4:	687a      	ldr	r2, [r7, #4]
 8008db6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008db8:	0112      	lsls	r2, r2, #4
 8008dba:	430a      	orrs	r2, r1
 8008dbc:	4945      	ldr	r1, [pc, #276]	; (8008ed4 <HAL_RCC_OscConfig+0x6c4>)
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	628b      	str	r3, [r1, #40]	; 0x28
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dc6:	3b01      	subs	r3, #1
 8008dc8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008dd0:	3b01      	subs	r3, #1
 8008dd2:	025b      	lsls	r3, r3, #9
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	431a      	orrs	r2, r3
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ddc:	3b01      	subs	r3, #1
 8008dde:	041b      	lsls	r3, r3, #16
 8008de0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008de4:	431a      	orrs	r2, r3
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dea:	3b01      	subs	r3, #1
 8008dec:	061b      	lsls	r3, r3, #24
 8008dee:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008df2:	4938      	ldr	r1, [pc, #224]	; (8008ed4 <HAL_RCC_OscConfig+0x6c4>)
 8008df4:	4313      	orrs	r3, r2
 8008df6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008df8:	4b36      	ldr	r3, [pc, #216]	; (8008ed4 <HAL_RCC_OscConfig+0x6c4>)
 8008dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dfc:	4a35      	ldr	r2, [pc, #212]	; (8008ed4 <HAL_RCC_OscConfig+0x6c4>)
 8008dfe:	f023 0301 	bic.w	r3, r3, #1
 8008e02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008e04:	4b33      	ldr	r3, [pc, #204]	; (8008ed4 <HAL_RCC_OscConfig+0x6c4>)
 8008e06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e08:	4b34      	ldr	r3, [pc, #208]	; (8008edc <HAL_RCC_OscConfig+0x6cc>)
 8008e0a:	4013      	ands	r3, r2
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008e10:	00d2      	lsls	r2, r2, #3
 8008e12:	4930      	ldr	r1, [pc, #192]	; (8008ed4 <HAL_RCC_OscConfig+0x6c4>)
 8008e14:	4313      	orrs	r3, r2
 8008e16:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008e18:	4b2e      	ldr	r3, [pc, #184]	; (8008ed4 <HAL_RCC_OscConfig+0x6c4>)
 8008e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e1c:	f023 020c 	bic.w	r2, r3, #12
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e24:	492b      	ldr	r1, [pc, #172]	; (8008ed4 <HAL_RCC_OscConfig+0x6c4>)
 8008e26:	4313      	orrs	r3, r2
 8008e28:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008e2a:	4b2a      	ldr	r3, [pc, #168]	; (8008ed4 <HAL_RCC_OscConfig+0x6c4>)
 8008e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e2e:	f023 0202 	bic.w	r2, r3, #2
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e36:	4927      	ldr	r1, [pc, #156]	; (8008ed4 <HAL_RCC_OscConfig+0x6c4>)
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008e3c:	4b25      	ldr	r3, [pc, #148]	; (8008ed4 <HAL_RCC_OscConfig+0x6c4>)
 8008e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e40:	4a24      	ldr	r2, [pc, #144]	; (8008ed4 <HAL_RCC_OscConfig+0x6c4>)
 8008e42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e48:	4b22      	ldr	r3, [pc, #136]	; (8008ed4 <HAL_RCC_OscConfig+0x6c4>)
 8008e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e4c:	4a21      	ldr	r2, [pc, #132]	; (8008ed4 <HAL_RCC_OscConfig+0x6c4>)
 8008e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008e54:	4b1f      	ldr	r3, [pc, #124]	; (8008ed4 <HAL_RCC_OscConfig+0x6c4>)
 8008e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e58:	4a1e      	ldr	r2, [pc, #120]	; (8008ed4 <HAL_RCC_OscConfig+0x6c4>)
 8008e5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008e60:	4b1c      	ldr	r3, [pc, #112]	; (8008ed4 <HAL_RCC_OscConfig+0x6c4>)
 8008e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e64:	4a1b      	ldr	r2, [pc, #108]	; (8008ed4 <HAL_RCC_OscConfig+0x6c4>)
 8008e66:	f043 0301 	orr.w	r3, r3, #1
 8008e6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e6c:	4b19      	ldr	r3, [pc, #100]	; (8008ed4 <HAL_RCC_OscConfig+0x6c4>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a18      	ldr	r2, [pc, #96]	; (8008ed4 <HAL_RCC_OscConfig+0x6c4>)
 8008e72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008e76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e78:	f7fa f9dc 	bl	8003234 <HAL_GetTick>
 8008e7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008e7e:	e008      	b.n	8008e92 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e80:	f7fa f9d8 	bl	8003234 <HAL_GetTick>
 8008e84:	4602      	mov	r2, r0
 8008e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e88:	1ad3      	subs	r3, r2, r3
 8008e8a:	2b02      	cmp	r3, #2
 8008e8c:	d901      	bls.n	8008e92 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8008e8e:	2303      	movs	r3, #3
 8008e90:	e090      	b.n	8008fb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008e92:	4b10      	ldr	r3, [pc, #64]	; (8008ed4 <HAL_RCC_OscConfig+0x6c4>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d0f0      	beq.n	8008e80 <HAL_RCC_OscConfig+0x670>
 8008e9e:	e088      	b.n	8008fb2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ea0:	4b0c      	ldr	r3, [pc, #48]	; (8008ed4 <HAL_RCC_OscConfig+0x6c4>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a0b      	ldr	r2, [pc, #44]	; (8008ed4 <HAL_RCC_OscConfig+0x6c4>)
 8008ea6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008eaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008eac:	f7fa f9c2 	bl	8003234 <HAL_GetTick>
 8008eb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008eb2:	e008      	b.n	8008ec6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008eb4:	f7fa f9be 	bl	8003234 <HAL_GetTick>
 8008eb8:	4602      	mov	r2, r0
 8008eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ebc:	1ad3      	subs	r3, r2, r3
 8008ebe:	2b02      	cmp	r3, #2
 8008ec0:	d901      	bls.n	8008ec6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8008ec2:	2303      	movs	r3, #3
 8008ec4:	e076      	b.n	8008fb4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008ec6:	4b03      	ldr	r3, [pc, #12]	; (8008ed4 <HAL_RCC_OscConfig+0x6c4>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d1f0      	bne.n	8008eb4 <HAL_RCC_OscConfig+0x6a4>
 8008ed2:	e06e      	b.n	8008fb2 <HAL_RCC_OscConfig+0x7a2>
 8008ed4:	58024400 	.word	0x58024400
 8008ed8:	fffffc0c 	.word	0xfffffc0c
 8008edc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008ee0:	4b36      	ldr	r3, [pc, #216]	; (8008fbc <HAL_RCC_OscConfig+0x7ac>)
 8008ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ee4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008ee6:	4b35      	ldr	r3, [pc, #212]	; (8008fbc <HAL_RCC_OscConfig+0x7ac>)
 8008ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eea:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	d031      	beq.n	8008f58 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	f003 0203 	and.w	r2, r3, #3
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d12a      	bne.n	8008f58 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	091b      	lsrs	r3, r3, #4
 8008f06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d122      	bne.n	8008f58 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f1c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d11a      	bne.n	8008f58 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	0a5b      	lsrs	r3, r3, #9
 8008f26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f2e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d111      	bne.n	8008f58 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	0c1b      	lsrs	r3, r3, #16
 8008f38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f40:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d108      	bne.n	8008f58 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	0e1b      	lsrs	r3, r3, #24
 8008f4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f52:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d001      	beq.n	8008f5c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	e02b      	b.n	8008fb4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008f5c:	4b17      	ldr	r3, [pc, #92]	; (8008fbc <HAL_RCC_OscConfig+0x7ac>)
 8008f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f60:	08db      	lsrs	r3, r3, #3
 8008f62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008f66:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f6c:	693a      	ldr	r2, [r7, #16]
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d01f      	beq.n	8008fb2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008f72:	4b12      	ldr	r3, [pc, #72]	; (8008fbc <HAL_RCC_OscConfig+0x7ac>)
 8008f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f76:	4a11      	ldr	r2, [pc, #68]	; (8008fbc <HAL_RCC_OscConfig+0x7ac>)
 8008f78:	f023 0301 	bic.w	r3, r3, #1
 8008f7c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008f7e:	f7fa f959 	bl	8003234 <HAL_GetTick>
 8008f82:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008f84:	bf00      	nop
 8008f86:	f7fa f955 	bl	8003234 <HAL_GetTick>
 8008f8a:	4602      	mov	r2, r0
 8008f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d0f9      	beq.n	8008f86 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008f92:	4b0a      	ldr	r3, [pc, #40]	; (8008fbc <HAL_RCC_OscConfig+0x7ac>)
 8008f94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f96:	4b0a      	ldr	r3, [pc, #40]	; (8008fc0 <HAL_RCC_OscConfig+0x7b0>)
 8008f98:	4013      	ands	r3, r2
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008f9e:	00d2      	lsls	r2, r2, #3
 8008fa0:	4906      	ldr	r1, [pc, #24]	; (8008fbc <HAL_RCC_OscConfig+0x7ac>)
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008fa6:	4b05      	ldr	r3, [pc, #20]	; (8008fbc <HAL_RCC_OscConfig+0x7ac>)
 8008fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008faa:	4a04      	ldr	r2, [pc, #16]	; (8008fbc <HAL_RCC_OscConfig+0x7ac>)
 8008fac:	f043 0301 	orr.w	r3, r3, #1
 8008fb0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008fb2:	2300      	movs	r3, #0
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3730      	adds	r7, #48	; 0x30
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	58024400 	.word	0x58024400
 8008fc0:	ffff0007 	.word	0xffff0007

08008fc4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b086      	sub	sp, #24
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d101      	bne.n	8008fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	e19c      	b.n	8009312 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008fd8:	4b8a      	ldr	r3, [pc, #552]	; (8009204 <HAL_RCC_ClockConfig+0x240>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f003 030f 	and.w	r3, r3, #15
 8008fe0:	683a      	ldr	r2, [r7, #0]
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d910      	bls.n	8009008 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008fe6:	4b87      	ldr	r3, [pc, #540]	; (8009204 <HAL_RCC_ClockConfig+0x240>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f023 020f 	bic.w	r2, r3, #15
 8008fee:	4985      	ldr	r1, [pc, #532]	; (8009204 <HAL_RCC_ClockConfig+0x240>)
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ff6:	4b83      	ldr	r3, [pc, #524]	; (8009204 <HAL_RCC_ClockConfig+0x240>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f003 030f 	and.w	r3, r3, #15
 8008ffe:	683a      	ldr	r2, [r7, #0]
 8009000:	429a      	cmp	r2, r3
 8009002:	d001      	beq.n	8009008 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	e184      	b.n	8009312 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f003 0304 	and.w	r3, r3, #4
 8009010:	2b00      	cmp	r3, #0
 8009012:	d010      	beq.n	8009036 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	691a      	ldr	r2, [r3, #16]
 8009018:	4b7b      	ldr	r3, [pc, #492]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 800901a:	699b      	ldr	r3, [r3, #24]
 800901c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009020:	429a      	cmp	r2, r3
 8009022:	d908      	bls.n	8009036 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009024:	4b78      	ldr	r3, [pc, #480]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 8009026:	699b      	ldr	r3, [r3, #24]
 8009028:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	691b      	ldr	r3, [r3, #16]
 8009030:	4975      	ldr	r1, [pc, #468]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 8009032:	4313      	orrs	r3, r2
 8009034:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f003 0308 	and.w	r3, r3, #8
 800903e:	2b00      	cmp	r3, #0
 8009040:	d010      	beq.n	8009064 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	695a      	ldr	r2, [r3, #20]
 8009046:	4b70      	ldr	r3, [pc, #448]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 8009048:	69db      	ldr	r3, [r3, #28]
 800904a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800904e:	429a      	cmp	r2, r3
 8009050:	d908      	bls.n	8009064 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009052:	4b6d      	ldr	r3, [pc, #436]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 8009054:	69db      	ldr	r3, [r3, #28]
 8009056:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	695b      	ldr	r3, [r3, #20]
 800905e:	496a      	ldr	r1, [pc, #424]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 8009060:	4313      	orrs	r3, r2
 8009062:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f003 0310 	and.w	r3, r3, #16
 800906c:	2b00      	cmp	r3, #0
 800906e:	d010      	beq.n	8009092 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	699a      	ldr	r2, [r3, #24]
 8009074:	4b64      	ldr	r3, [pc, #400]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 8009076:	69db      	ldr	r3, [r3, #28]
 8009078:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800907c:	429a      	cmp	r2, r3
 800907e:	d908      	bls.n	8009092 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009080:	4b61      	ldr	r3, [pc, #388]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 8009082:	69db      	ldr	r3, [r3, #28]
 8009084:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	699b      	ldr	r3, [r3, #24]
 800908c:	495e      	ldr	r1, [pc, #376]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 800908e:	4313      	orrs	r3, r2
 8009090:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f003 0320 	and.w	r3, r3, #32
 800909a:	2b00      	cmp	r3, #0
 800909c:	d010      	beq.n	80090c0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	69da      	ldr	r2, [r3, #28]
 80090a2:	4b59      	ldr	r3, [pc, #356]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 80090a4:	6a1b      	ldr	r3, [r3, #32]
 80090a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d908      	bls.n	80090c0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80090ae:	4b56      	ldr	r3, [pc, #344]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 80090b0:	6a1b      	ldr	r3, [r3, #32]
 80090b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	69db      	ldr	r3, [r3, #28]
 80090ba:	4953      	ldr	r1, [pc, #332]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 80090bc:	4313      	orrs	r3, r2
 80090be:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f003 0302 	and.w	r3, r3, #2
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d010      	beq.n	80090ee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	68da      	ldr	r2, [r3, #12]
 80090d0:	4b4d      	ldr	r3, [pc, #308]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 80090d2:	699b      	ldr	r3, [r3, #24]
 80090d4:	f003 030f 	and.w	r3, r3, #15
 80090d8:	429a      	cmp	r2, r3
 80090da:	d908      	bls.n	80090ee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090dc:	4b4a      	ldr	r3, [pc, #296]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 80090de:	699b      	ldr	r3, [r3, #24]
 80090e0:	f023 020f 	bic.w	r2, r3, #15
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	68db      	ldr	r3, [r3, #12]
 80090e8:	4947      	ldr	r1, [pc, #284]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 80090ea:	4313      	orrs	r3, r2
 80090ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f003 0301 	and.w	r3, r3, #1
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d055      	beq.n	80091a6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80090fa:	4b43      	ldr	r3, [pc, #268]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 80090fc:	699b      	ldr	r3, [r3, #24]
 80090fe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	689b      	ldr	r3, [r3, #8]
 8009106:	4940      	ldr	r1, [pc, #256]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 8009108:	4313      	orrs	r3, r2
 800910a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	2b02      	cmp	r3, #2
 8009112:	d107      	bne.n	8009124 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009114:	4b3c      	ldr	r3, [pc, #240]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800911c:	2b00      	cmp	r3, #0
 800911e:	d121      	bne.n	8009164 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009120:	2301      	movs	r3, #1
 8009122:	e0f6      	b.n	8009312 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	2b03      	cmp	r3, #3
 800912a:	d107      	bne.n	800913c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800912c:	4b36      	ldr	r3, [pc, #216]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009134:	2b00      	cmp	r3, #0
 8009136:	d115      	bne.n	8009164 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009138:	2301      	movs	r3, #1
 800913a:	e0ea      	b.n	8009312 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	2b01      	cmp	r3, #1
 8009142:	d107      	bne.n	8009154 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009144:	4b30      	ldr	r3, [pc, #192]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800914c:	2b00      	cmp	r3, #0
 800914e:	d109      	bne.n	8009164 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009150:	2301      	movs	r3, #1
 8009152:	e0de      	b.n	8009312 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009154:	4b2c      	ldr	r3, [pc, #176]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f003 0304 	and.w	r3, r3, #4
 800915c:	2b00      	cmp	r3, #0
 800915e:	d101      	bne.n	8009164 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009160:	2301      	movs	r3, #1
 8009162:	e0d6      	b.n	8009312 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009164:	4b28      	ldr	r3, [pc, #160]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 8009166:	691b      	ldr	r3, [r3, #16]
 8009168:	f023 0207 	bic.w	r2, r3, #7
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	4925      	ldr	r1, [pc, #148]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 8009172:	4313      	orrs	r3, r2
 8009174:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009176:	f7fa f85d 	bl	8003234 <HAL_GetTick>
 800917a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800917c:	e00a      	b.n	8009194 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800917e:	f7fa f859 	bl	8003234 <HAL_GetTick>
 8009182:	4602      	mov	r2, r0
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	1ad3      	subs	r3, r2, r3
 8009188:	f241 3288 	movw	r2, #5000	; 0x1388
 800918c:	4293      	cmp	r3, r2
 800918e:	d901      	bls.n	8009194 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009190:	2303      	movs	r3, #3
 8009192:	e0be      	b.n	8009312 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009194:	4b1c      	ldr	r3, [pc, #112]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 8009196:	691b      	ldr	r3, [r3, #16]
 8009198:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	00db      	lsls	r3, r3, #3
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d1eb      	bne.n	800917e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f003 0302 	and.w	r3, r3, #2
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d010      	beq.n	80091d4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	68da      	ldr	r2, [r3, #12]
 80091b6:	4b14      	ldr	r3, [pc, #80]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 80091b8:	699b      	ldr	r3, [r3, #24]
 80091ba:	f003 030f 	and.w	r3, r3, #15
 80091be:	429a      	cmp	r2, r3
 80091c0:	d208      	bcs.n	80091d4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80091c2:	4b11      	ldr	r3, [pc, #68]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 80091c4:	699b      	ldr	r3, [r3, #24]
 80091c6:	f023 020f 	bic.w	r2, r3, #15
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	68db      	ldr	r3, [r3, #12]
 80091ce:	490e      	ldr	r1, [pc, #56]	; (8009208 <HAL_RCC_ClockConfig+0x244>)
 80091d0:	4313      	orrs	r3, r2
 80091d2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80091d4:	4b0b      	ldr	r3, [pc, #44]	; (8009204 <HAL_RCC_ClockConfig+0x240>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f003 030f 	and.w	r3, r3, #15
 80091dc:	683a      	ldr	r2, [r7, #0]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d214      	bcs.n	800920c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091e2:	4b08      	ldr	r3, [pc, #32]	; (8009204 <HAL_RCC_ClockConfig+0x240>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f023 020f 	bic.w	r2, r3, #15
 80091ea:	4906      	ldr	r1, [pc, #24]	; (8009204 <HAL_RCC_ClockConfig+0x240>)
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	4313      	orrs	r3, r2
 80091f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80091f2:	4b04      	ldr	r3, [pc, #16]	; (8009204 <HAL_RCC_ClockConfig+0x240>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f003 030f 	and.w	r3, r3, #15
 80091fa:	683a      	ldr	r2, [r7, #0]
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d005      	beq.n	800920c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009200:	2301      	movs	r3, #1
 8009202:	e086      	b.n	8009312 <HAL_RCC_ClockConfig+0x34e>
 8009204:	52002000 	.word	0x52002000
 8009208:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f003 0304 	and.w	r3, r3, #4
 8009214:	2b00      	cmp	r3, #0
 8009216:	d010      	beq.n	800923a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	691a      	ldr	r2, [r3, #16]
 800921c:	4b3f      	ldr	r3, [pc, #252]	; (800931c <HAL_RCC_ClockConfig+0x358>)
 800921e:	699b      	ldr	r3, [r3, #24]
 8009220:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009224:	429a      	cmp	r2, r3
 8009226:	d208      	bcs.n	800923a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009228:	4b3c      	ldr	r3, [pc, #240]	; (800931c <HAL_RCC_ClockConfig+0x358>)
 800922a:	699b      	ldr	r3, [r3, #24]
 800922c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	691b      	ldr	r3, [r3, #16]
 8009234:	4939      	ldr	r1, [pc, #228]	; (800931c <HAL_RCC_ClockConfig+0x358>)
 8009236:	4313      	orrs	r3, r2
 8009238:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f003 0308 	and.w	r3, r3, #8
 8009242:	2b00      	cmp	r3, #0
 8009244:	d010      	beq.n	8009268 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	695a      	ldr	r2, [r3, #20]
 800924a:	4b34      	ldr	r3, [pc, #208]	; (800931c <HAL_RCC_ClockConfig+0x358>)
 800924c:	69db      	ldr	r3, [r3, #28]
 800924e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009252:	429a      	cmp	r2, r3
 8009254:	d208      	bcs.n	8009268 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009256:	4b31      	ldr	r3, [pc, #196]	; (800931c <HAL_RCC_ClockConfig+0x358>)
 8009258:	69db      	ldr	r3, [r3, #28]
 800925a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	695b      	ldr	r3, [r3, #20]
 8009262:	492e      	ldr	r1, [pc, #184]	; (800931c <HAL_RCC_ClockConfig+0x358>)
 8009264:	4313      	orrs	r3, r2
 8009266:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f003 0310 	and.w	r3, r3, #16
 8009270:	2b00      	cmp	r3, #0
 8009272:	d010      	beq.n	8009296 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	699a      	ldr	r2, [r3, #24]
 8009278:	4b28      	ldr	r3, [pc, #160]	; (800931c <HAL_RCC_ClockConfig+0x358>)
 800927a:	69db      	ldr	r3, [r3, #28]
 800927c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009280:	429a      	cmp	r2, r3
 8009282:	d208      	bcs.n	8009296 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009284:	4b25      	ldr	r3, [pc, #148]	; (800931c <HAL_RCC_ClockConfig+0x358>)
 8009286:	69db      	ldr	r3, [r3, #28]
 8009288:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	699b      	ldr	r3, [r3, #24]
 8009290:	4922      	ldr	r1, [pc, #136]	; (800931c <HAL_RCC_ClockConfig+0x358>)
 8009292:	4313      	orrs	r3, r2
 8009294:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f003 0320 	and.w	r3, r3, #32
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d010      	beq.n	80092c4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	69da      	ldr	r2, [r3, #28]
 80092a6:	4b1d      	ldr	r3, [pc, #116]	; (800931c <HAL_RCC_ClockConfig+0x358>)
 80092a8:	6a1b      	ldr	r3, [r3, #32]
 80092aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d208      	bcs.n	80092c4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80092b2:	4b1a      	ldr	r3, [pc, #104]	; (800931c <HAL_RCC_ClockConfig+0x358>)
 80092b4:	6a1b      	ldr	r3, [r3, #32]
 80092b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	69db      	ldr	r3, [r3, #28]
 80092be:	4917      	ldr	r1, [pc, #92]	; (800931c <HAL_RCC_ClockConfig+0x358>)
 80092c0:	4313      	orrs	r3, r2
 80092c2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80092c4:	f000 f89e 	bl	8009404 <HAL_RCC_GetSysClockFreq>
 80092c8:	4602      	mov	r2, r0
 80092ca:	4b14      	ldr	r3, [pc, #80]	; (800931c <HAL_RCC_ClockConfig+0x358>)
 80092cc:	699b      	ldr	r3, [r3, #24]
 80092ce:	0a1b      	lsrs	r3, r3, #8
 80092d0:	f003 030f 	and.w	r3, r3, #15
 80092d4:	4912      	ldr	r1, [pc, #72]	; (8009320 <HAL_RCC_ClockConfig+0x35c>)
 80092d6:	5ccb      	ldrb	r3, [r1, r3]
 80092d8:	f003 031f 	and.w	r3, r3, #31
 80092dc:	fa22 f303 	lsr.w	r3, r2, r3
 80092e0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80092e2:	4b0e      	ldr	r3, [pc, #56]	; (800931c <HAL_RCC_ClockConfig+0x358>)
 80092e4:	699b      	ldr	r3, [r3, #24]
 80092e6:	f003 030f 	and.w	r3, r3, #15
 80092ea:	4a0d      	ldr	r2, [pc, #52]	; (8009320 <HAL_RCC_ClockConfig+0x35c>)
 80092ec:	5cd3      	ldrb	r3, [r2, r3]
 80092ee:	f003 031f 	and.w	r3, r3, #31
 80092f2:	693a      	ldr	r2, [r7, #16]
 80092f4:	fa22 f303 	lsr.w	r3, r2, r3
 80092f8:	4a0a      	ldr	r2, [pc, #40]	; (8009324 <HAL_RCC_ClockConfig+0x360>)
 80092fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80092fc:	4a0a      	ldr	r2, [pc, #40]	; (8009328 <HAL_RCC_ClockConfig+0x364>)
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009302:	4b0a      	ldr	r3, [pc, #40]	; (800932c <HAL_RCC_ClockConfig+0x368>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4618      	mov	r0, r3
 8009308:	f7f9 ff4a 	bl	80031a0 <HAL_InitTick>
 800930c:	4603      	mov	r3, r0
 800930e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009310:	7bfb      	ldrb	r3, [r7, #15]
}
 8009312:	4618      	mov	r0, r3
 8009314:	3718      	adds	r7, #24
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}
 800931a:	bf00      	nop
 800931c:	58024400 	.word	0x58024400
 8009320:	080163b4 	.word	0x080163b4
 8009324:	24000004 	.word	0x24000004
 8009328:	24000000 	.word	0x24000000
 800932c:	24000008 	.word	0x24000008

08009330 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b08c      	sub	sp, #48	; 0x30
 8009334:	af00      	add	r7, sp, #0
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	60b9      	str	r1, [r7, #8]
 800933a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d12a      	bne.n	8009398 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8009342:	4b2d      	ldr	r3, [pc, #180]	; (80093f8 <HAL_RCC_MCOConfig+0xc8>)
 8009344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009348:	4a2b      	ldr	r2, [pc, #172]	; (80093f8 <HAL_RCC_MCOConfig+0xc8>)
 800934a:	f043 0301 	orr.w	r3, r3, #1
 800934e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009352:	4b29      	ldr	r3, [pc, #164]	; (80093f8 <HAL_RCC_MCOConfig+0xc8>)
 8009354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009358:	f003 0301 	and.w	r3, r3, #1
 800935c:	61bb      	str	r3, [r7, #24]
 800935e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8009360:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009366:	2302      	movs	r3, #2
 8009368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800936a:	2303      	movs	r3, #3
 800936c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800936e:	2300      	movs	r3, #0
 8009370:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8009372:	2300      	movs	r3, #0
 8009374:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8009376:	f107 031c 	add.w	r3, r7, #28
 800937a:	4619      	mov	r1, r3
 800937c:	481f      	ldr	r0, [pc, #124]	; (80093fc <HAL_RCC_MCOConfig+0xcc>)
 800937e:	f7fd fc43 	bl	8006c08 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8009382:	4b1d      	ldr	r3, [pc, #116]	; (80093f8 <HAL_RCC_MCOConfig+0xc8>)
 8009384:	691b      	ldr	r3, [r3, #16]
 8009386:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800938a:	68b9      	ldr	r1, [r7, #8]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	430b      	orrs	r3, r1
 8009390:	4919      	ldr	r1, [pc, #100]	; (80093f8 <HAL_RCC_MCOConfig+0xc8>)
 8009392:	4313      	orrs	r3, r2
 8009394:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8009396:	e02a      	b.n	80093ee <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8009398:	4b17      	ldr	r3, [pc, #92]	; (80093f8 <HAL_RCC_MCOConfig+0xc8>)
 800939a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800939e:	4a16      	ldr	r2, [pc, #88]	; (80093f8 <HAL_RCC_MCOConfig+0xc8>)
 80093a0:	f043 0304 	orr.w	r3, r3, #4
 80093a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80093a8:	4b13      	ldr	r3, [pc, #76]	; (80093f8 <HAL_RCC_MCOConfig+0xc8>)
 80093aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80093ae:	f003 0304 	and.w	r3, r3, #4
 80093b2:	617b      	str	r3, [r7, #20]
 80093b4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80093b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093bc:	2302      	movs	r3, #2
 80093be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093c0:	2303      	movs	r3, #3
 80093c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093c4:	2300      	movs	r3, #0
 80093c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80093c8:	2300      	movs	r3, #0
 80093ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80093cc:	f107 031c 	add.w	r3, r7, #28
 80093d0:	4619      	mov	r1, r3
 80093d2:	480b      	ldr	r0, [pc, #44]	; (8009400 <HAL_RCC_MCOConfig+0xd0>)
 80093d4:	f7fd fc18 	bl	8006c08 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80093d8:	4b07      	ldr	r3, [pc, #28]	; (80093f8 <HAL_RCC_MCOConfig+0xc8>)
 80093da:	691b      	ldr	r3, [r3, #16]
 80093dc:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	01d9      	lsls	r1, r3, #7
 80093e4:	68bb      	ldr	r3, [r7, #8]
 80093e6:	430b      	orrs	r3, r1
 80093e8:	4903      	ldr	r1, [pc, #12]	; (80093f8 <HAL_RCC_MCOConfig+0xc8>)
 80093ea:	4313      	orrs	r3, r2
 80093ec:	610b      	str	r3, [r1, #16]
}
 80093ee:	bf00      	nop
 80093f0:	3730      	adds	r7, #48	; 0x30
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}
 80093f6:	bf00      	nop
 80093f8:	58024400 	.word	0x58024400
 80093fc:	58020000 	.word	0x58020000
 8009400:	58020800 	.word	0x58020800

08009404 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009404:	b480      	push	{r7}
 8009406:	b089      	sub	sp, #36	; 0x24
 8009408:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800940a:	4bb3      	ldr	r3, [pc, #716]	; (80096d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800940c:	691b      	ldr	r3, [r3, #16]
 800940e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009412:	2b18      	cmp	r3, #24
 8009414:	f200 8155 	bhi.w	80096c2 <HAL_RCC_GetSysClockFreq+0x2be>
 8009418:	a201      	add	r2, pc, #4	; (adr r2, 8009420 <HAL_RCC_GetSysClockFreq+0x1c>)
 800941a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800941e:	bf00      	nop
 8009420:	08009485 	.word	0x08009485
 8009424:	080096c3 	.word	0x080096c3
 8009428:	080096c3 	.word	0x080096c3
 800942c:	080096c3 	.word	0x080096c3
 8009430:	080096c3 	.word	0x080096c3
 8009434:	080096c3 	.word	0x080096c3
 8009438:	080096c3 	.word	0x080096c3
 800943c:	080096c3 	.word	0x080096c3
 8009440:	080094ab 	.word	0x080094ab
 8009444:	080096c3 	.word	0x080096c3
 8009448:	080096c3 	.word	0x080096c3
 800944c:	080096c3 	.word	0x080096c3
 8009450:	080096c3 	.word	0x080096c3
 8009454:	080096c3 	.word	0x080096c3
 8009458:	080096c3 	.word	0x080096c3
 800945c:	080096c3 	.word	0x080096c3
 8009460:	080094b1 	.word	0x080094b1
 8009464:	080096c3 	.word	0x080096c3
 8009468:	080096c3 	.word	0x080096c3
 800946c:	080096c3 	.word	0x080096c3
 8009470:	080096c3 	.word	0x080096c3
 8009474:	080096c3 	.word	0x080096c3
 8009478:	080096c3 	.word	0x080096c3
 800947c:	080096c3 	.word	0x080096c3
 8009480:	080094b7 	.word	0x080094b7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009484:	4b94      	ldr	r3, [pc, #592]	; (80096d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f003 0320 	and.w	r3, r3, #32
 800948c:	2b00      	cmp	r3, #0
 800948e:	d009      	beq.n	80094a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009490:	4b91      	ldr	r3, [pc, #580]	; (80096d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	08db      	lsrs	r3, r3, #3
 8009496:	f003 0303 	and.w	r3, r3, #3
 800949a:	4a90      	ldr	r2, [pc, #576]	; (80096dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800949c:	fa22 f303 	lsr.w	r3, r2, r3
 80094a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80094a2:	e111      	b.n	80096c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80094a4:	4b8d      	ldr	r3, [pc, #564]	; (80096dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80094a6:	61bb      	str	r3, [r7, #24]
      break;
 80094a8:	e10e      	b.n	80096c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80094aa:	4b8d      	ldr	r3, [pc, #564]	; (80096e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80094ac:	61bb      	str	r3, [r7, #24]
      break;
 80094ae:	e10b      	b.n	80096c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80094b0:	4b8c      	ldr	r3, [pc, #560]	; (80096e4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80094b2:	61bb      	str	r3, [r7, #24]
      break;
 80094b4:	e108      	b.n	80096c8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80094b6:	4b88      	ldr	r3, [pc, #544]	; (80096d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ba:	f003 0303 	and.w	r3, r3, #3
 80094be:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80094c0:	4b85      	ldr	r3, [pc, #532]	; (80096d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094c4:	091b      	lsrs	r3, r3, #4
 80094c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094ca:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80094cc:	4b82      	ldr	r3, [pc, #520]	; (80096d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094d0:	f003 0301 	and.w	r3, r3, #1
 80094d4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80094d6:	4b80      	ldr	r3, [pc, #512]	; (80096d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094da:	08db      	lsrs	r3, r3, #3
 80094dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80094e0:	68fa      	ldr	r2, [r7, #12]
 80094e2:	fb02 f303 	mul.w	r3, r2, r3
 80094e6:	ee07 3a90 	vmov	s15, r3
 80094ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094ee:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	f000 80e1 	beq.w	80096bc <HAL_RCC_GetSysClockFreq+0x2b8>
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	2b02      	cmp	r3, #2
 80094fe:	f000 8083 	beq.w	8009608 <HAL_RCC_GetSysClockFreq+0x204>
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	2b02      	cmp	r3, #2
 8009506:	f200 80a1 	bhi.w	800964c <HAL_RCC_GetSysClockFreq+0x248>
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d003      	beq.n	8009518 <HAL_RCC_GetSysClockFreq+0x114>
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	2b01      	cmp	r3, #1
 8009514:	d056      	beq.n	80095c4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009516:	e099      	b.n	800964c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009518:	4b6f      	ldr	r3, [pc, #444]	; (80096d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f003 0320 	and.w	r3, r3, #32
 8009520:	2b00      	cmp	r3, #0
 8009522:	d02d      	beq.n	8009580 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009524:	4b6c      	ldr	r3, [pc, #432]	; (80096d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	08db      	lsrs	r3, r3, #3
 800952a:	f003 0303 	and.w	r3, r3, #3
 800952e:	4a6b      	ldr	r2, [pc, #428]	; (80096dc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009530:	fa22 f303 	lsr.w	r3, r2, r3
 8009534:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	ee07 3a90 	vmov	s15, r3
 800953c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	ee07 3a90 	vmov	s15, r3
 8009546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800954a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800954e:	4b62      	ldr	r3, [pc, #392]	; (80096d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009556:	ee07 3a90 	vmov	s15, r3
 800955a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800955e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009562:	eddf 5a61 	vldr	s11, [pc, #388]	; 80096e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800956a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800956e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800957a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800957e:	e087      	b.n	8009690 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009580:	693b      	ldr	r3, [r7, #16]
 8009582:	ee07 3a90 	vmov	s15, r3
 8009586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800958a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80096ec <HAL_RCC_GetSysClockFreq+0x2e8>
 800958e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009592:	4b51      	ldr	r3, [pc, #324]	; (80096d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800959a:	ee07 3a90 	vmov	s15, r3
 800959e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80095a6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80096e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80095aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80095c2:	e065      	b.n	8009690 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	ee07 3a90 	vmov	s15, r3
 80095ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ce:	eddf 6a48 	vldr	s13, [pc, #288]	; 80096f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80095d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095d6:	4b40      	ldr	r3, [pc, #256]	; (80096d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095de:	ee07 3a90 	vmov	s15, r3
 80095e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80095ea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80096e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80095ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009602:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009606:	e043      	b.n	8009690 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	ee07 3a90 	vmov	s15, r3
 800960e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009612:	eddf 6a38 	vldr	s13, [pc, #224]	; 80096f4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800961a:	4b2f      	ldr	r3, [pc, #188]	; (80096d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800961c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800961e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009622:	ee07 3a90 	vmov	s15, r3
 8009626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800962a:	ed97 6a02 	vldr	s12, [r7, #8]
 800962e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80096e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800963a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800963e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009646:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800964a:	e021      	b.n	8009690 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	ee07 3a90 	vmov	s15, r3
 8009652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009656:	eddf 6a26 	vldr	s13, [pc, #152]	; 80096f0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800965a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800965e:	4b1e      	ldr	r3, [pc, #120]	; (80096d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009666:	ee07 3a90 	vmov	s15, r3
 800966a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800966e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009672:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80096e8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800967a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800967e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800968a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800968e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009690:	4b11      	ldr	r3, [pc, #68]	; (80096d8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009694:	0a5b      	lsrs	r3, r3, #9
 8009696:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800969a:	3301      	adds	r3, #1
 800969c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	ee07 3a90 	vmov	s15, r3
 80096a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80096a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80096ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096b4:	ee17 3a90 	vmov	r3, s15
 80096b8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80096ba:	e005      	b.n	80096c8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80096bc:	2300      	movs	r3, #0
 80096be:	61bb      	str	r3, [r7, #24]
      break;
 80096c0:	e002      	b.n	80096c8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80096c2:	4b07      	ldr	r3, [pc, #28]	; (80096e0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80096c4:	61bb      	str	r3, [r7, #24]
      break;
 80096c6:	bf00      	nop
  }

  return sysclockfreq;
 80096c8:	69bb      	ldr	r3, [r7, #24]
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3724      	adds	r7, #36	; 0x24
 80096ce:	46bd      	mov	sp, r7
 80096d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d4:	4770      	bx	lr
 80096d6:	bf00      	nop
 80096d8:	58024400 	.word	0x58024400
 80096dc:	03d09000 	.word	0x03d09000
 80096e0:	003d0900 	.word	0x003d0900
 80096e4:	02faf080 	.word	0x02faf080
 80096e8:	46000000 	.word	0x46000000
 80096ec:	4c742400 	.word	0x4c742400
 80096f0:	4a742400 	.word	0x4a742400
 80096f4:	4c3ebc20 	.word	0x4c3ebc20

080096f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b082      	sub	sp, #8
 80096fc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80096fe:	f7ff fe81 	bl	8009404 <HAL_RCC_GetSysClockFreq>
 8009702:	4602      	mov	r2, r0
 8009704:	4b10      	ldr	r3, [pc, #64]	; (8009748 <HAL_RCC_GetHCLKFreq+0x50>)
 8009706:	699b      	ldr	r3, [r3, #24]
 8009708:	0a1b      	lsrs	r3, r3, #8
 800970a:	f003 030f 	and.w	r3, r3, #15
 800970e:	490f      	ldr	r1, [pc, #60]	; (800974c <HAL_RCC_GetHCLKFreq+0x54>)
 8009710:	5ccb      	ldrb	r3, [r1, r3]
 8009712:	f003 031f 	and.w	r3, r3, #31
 8009716:	fa22 f303 	lsr.w	r3, r2, r3
 800971a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800971c:	4b0a      	ldr	r3, [pc, #40]	; (8009748 <HAL_RCC_GetHCLKFreq+0x50>)
 800971e:	699b      	ldr	r3, [r3, #24]
 8009720:	f003 030f 	and.w	r3, r3, #15
 8009724:	4a09      	ldr	r2, [pc, #36]	; (800974c <HAL_RCC_GetHCLKFreq+0x54>)
 8009726:	5cd3      	ldrb	r3, [r2, r3]
 8009728:	f003 031f 	and.w	r3, r3, #31
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	fa22 f303 	lsr.w	r3, r2, r3
 8009732:	4a07      	ldr	r2, [pc, #28]	; (8009750 <HAL_RCC_GetHCLKFreq+0x58>)
 8009734:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009736:	4a07      	ldr	r2, [pc, #28]	; (8009754 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800973c:	4b04      	ldr	r3, [pc, #16]	; (8009750 <HAL_RCC_GetHCLKFreq+0x58>)
 800973e:	681b      	ldr	r3, [r3, #0]
}
 8009740:	4618      	mov	r0, r3
 8009742:	3708      	adds	r7, #8
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}
 8009748:	58024400 	.word	0x58024400
 800974c:	080163b4 	.word	0x080163b4
 8009750:	24000004 	.word	0x24000004
 8009754:	24000000 	.word	0x24000000

08009758 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800975c:	f7ff ffcc 	bl	80096f8 <HAL_RCC_GetHCLKFreq>
 8009760:	4602      	mov	r2, r0
 8009762:	4b06      	ldr	r3, [pc, #24]	; (800977c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009764:	69db      	ldr	r3, [r3, #28]
 8009766:	091b      	lsrs	r3, r3, #4
 8009768:	f003 0307 	and.w	r3, r3, #7
 800976c:	4904      	ldr	r1, [pc, #16]	; (8009780 <HAL_RCC_GetPCLK1Freq+0x28>)
 800976e:	5ccb      	ldrb	r3, [r1, r3]
 8009770:	f003 031f 	and.w	r3, r3, #31
 8009774:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009778:	4618      	mov	r0, r3
 800977a:	bd80      	pop	{r7, pc}
 800977c:	58024400 	.word	0x58024400
 8009780:	080163b4 	.word	0x080163b4

08009784 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009788:	f7ff ffb6 	bl	80096f8 <HAL_RCC_GetHCLKFreq>
 800978c:	4602      	mov	r2, r0
 800978e:	4b06      	ldr	r3, [pc, #24]	; (80097a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009790:	69db      	ldr	r3, [r3, #28]
 8009792:	0a1b      	lsrs	r3, r3, #8
 8009794:	f003 0307 	and.w	r3, r3, #7
 8009798:	4904      	ldr	r1, [pc, #16]	; (80097ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800979a:	5ccb      	ldrb	r3, [r1, r3]
 800979c:	f003 031f 	and.w	r3, r3, #31
 80097a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	bd80      	pop	{r7, pc}
 80097a8:	58024400 	.word	0x58024400
 80097ac:	080163b4 	.word	0x080163b4

080097b0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80097b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80097b4:	b0c6      	sub	sp, #280	; 0x118
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80097bc:	2300      	movs	r3, #0
 80097be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80097c2:	2300      	movs	r3, #0
 80097c4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80097c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80097d4:	2500      	movs	r5, #0
 80097d6:	ea54 0305 	orrs.w	r3, r4, r5
 80097da:	d049      	beq.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80097dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80097e6:	d02f      	beq.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80097e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80097ec:	d828      	bhi.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80097ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80097f2:	d01a      	beq.n	800982a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80097f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80097f8:	d822      	bhi.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d003      	beq.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80097fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009802:	d007      	beq.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009804:	e01c      	b.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009806:	4bab      	ldr	r3, [pc, #684]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800980a:	4aaa      	ldr	r2, [pc, #680]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800980c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009810:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009812:	e01a      	b.n	800984a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009814:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009818:	3308      	adds	r3, #8
 800981a:	2102      	movs	r1, #2
 800981c:	4618      	mov	r0, r3
 800981e:	f002 fa49 	bl	800bcb4 <RCCEx_PLL2_Config>
 8009822:	4603      	mov	r3, r0
 8009824:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009828:	e00f      	b.n	800984a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800982a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800982e:	3328      	adds	r3, #40	; 0x28
 8009830:	2102      	movs	r1, #2
 8009832:	4618      	mov	r0, r3
 8009834:	f002 faf0 	bl	800be18 <RCCEx_PLL3_Config>
 8009838:	4603      	mov	r3, r0
 800983a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800983e:	e004      	b.n	800984a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009840:	2301      	movs	r3, #1
 8009842:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009846:	e000      	b.n	800984a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009848:	bf00      	nop
    }

    if (ret == HAL_OK)
 800984a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800984e:	2b00      	cmp	r3, #0
 8009850:	d10a      	bne.n	8009868 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009852:	4b98      	ldr	r3, [pc, #608]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009854:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009856:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800985a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800985e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009860:	4a94      	ldr	r2, [pc, #592]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009862:	430b      	orrs	r3, r1
 8009864:	6513      	str	r3, [r2, #80]	; 0x50
 8009866:	e003      	b.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009868:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800986c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009870:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009878:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800987c:	f04f 0900 	mov.w	r9, #0
 8009880:	ea58 0309 	orrs.w	r3, r8, r9
 8009884:	d047      	beq.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009886:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800988a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800988c:	2b04      	cmp	r3, #4
 800988e:	d82a      	bhi.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009890:	a201      	add	r2, pc, #4	; (adr r2, 8009898 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009896:	bf00      	nop
 8009898:	080098ad 	.word	0x080098ad
 800989c:	080098bb 	.word	0x080098bb
 80098a0:	080098d1 	.word	0x080098d1
 80098a4:	080098ef 	.word	0x080098ef
 80098a8:	080098ef 	.word	0x080098ef
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098ac:	4b81      	ldr	r3, [pc, #516]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80098ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b0:	4a80      	ldr	r2, [pc, #512]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80098b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80098b8:	e01a      	b.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80098ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098be:	3308      	adds	r3, #8
 80098c0:	2100      	movs	r1, #0
 80098c2:	4618      	mov	r0, r3
 80098c4:	f002 f9f6 	bl	800bcb4 <RCCEx_PLL2_Config>
 80098c8:	4603      	mov	r3, r0
 80098ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80098ce:	e00f      	b.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80098d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098d4:	3328      	adds	r3, #40	; 0x28
 80098d6:	2100      	movs	r1, #0
 80098d8:	4618      	mov	r0, r3
 80098da:	f002 fa9d 	bl	800be18 <RCCEx_PLL3_Config>
 80098de:	4603      	mov	r3, r0
 80098e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80098e4:	e004      	b.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098e6:	2301      	movs	r3, #1
 80098e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80098ec:	e000      	b.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80098ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d10a      	bne.n	800990e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80098f8:	4b6e      	ldr	r3, [pc, #440]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80098fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098fc:	f023 0107 	bic.w	r1, r3, #7
 8009900:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009906:	4a6b      	ldr	r2, [pc, #428]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009908:	430b      	orrs	r3, r1
 800990a:	6513      	str	r3, [r2, #80]	; 0x50
 800990c:	e003      	b.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800990e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009912:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009916:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800991a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991e:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8009922:	f04f 0b00 	mov.w	fp, #0
 8009926:	ea5a 030b 	orrs.w	r3, sl, fp
 800992a:	d05b      	beq.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800992c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009930:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009934:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009938:	d03b      	beq.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800993a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800993e:	d834      	bhi.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009940:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009944:	d037      	beq.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009946:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800994a:	d82e      	bhi.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800994c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009950:	d033      	beq.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8009952:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009956:	d828      	bhi.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009958:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800995c:	d01a      	beq.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800995e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009962:	d822      	bhi.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009964:	2b00      	cmp	r3, #0
 8009966:	d003      	beq.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8009968:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800996c:	d007      	beq.n	800997e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800996e:	e01c      	b.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009970:	4b50      	ldr	r3, [pc, #320]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009974:	4a4f      	ldr	r2, [pc, #316]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800997a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800997c:	e01e      	b.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800997e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009982:	3308      	adds	r3, #8
 8009984:	2100      	movs	r1, #0
 8009986:	4618      	mov	r0, r3
 8009988:	f002 f994 	bl	800bcb4 <RCCEx_PLL2_Config>
 800998c:	4603      	mov	r3, r0
 800998e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009992:	e013      	b.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009994:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009998:	3328      	adds	r3, #40	; 0x28
 800999a:	2100      	movs	r1, #0
 800999c:	4618      	mov	r0, r3
 800999e:	f002 fa3b 	bl	800be18 <RCCEx_PLL3_Config>
 80099a2:	4603      	mov	r3, r0
 80099a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80099a8:	e008      	b.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80099aa:	2301      	movs	r3, #1
 80099ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80099b0:	e004      	b.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80099b2:	bf00      	nop
 80099b4:	e002      	b.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80099b6:	bf00      	nop
 80099b8:	e000      	b.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80099ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d10b      	bne.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80099c4:	4b3b      	ldr	r3, [pc, #236]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80099c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099c8:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80099cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80099d4:	4a37      	ldr	r2, [pc, #220]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80099d6:	430b      	orrs	r3, r1
 80099d8:	6593      	str	r3, [r2, #88]	; 0x58
 80099da:	e003      	b.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80099e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80099e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ec:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80099f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80099f4:	2300      	movs	r3, #0
 80099f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80099fa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80099fe:	460b      	mov	r3, r1
 8009a00:	4313      	orrs	r3, r2
 8009a02:	d05d      	beq.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a08:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009a0c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009a10:	d03b      	beq.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009a12:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009a16:	d834      	bhi.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009a18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009a1c:	d037      	beq.n	8009a8e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009a1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009a22:	d82e      	bhi.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009a24:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009a28:	d033      	beq.n	8009a92 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8009a2a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009a2e:	d828      	bhi.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009a30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a34:	d01a      	beq.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8009a36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a3a:	d822      	bhi.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d003      	beq.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009a40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009a44:	d007      	beq.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009a46:	e01c      	b.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a48:	4b1a      	ldr	r3, [pc, #104]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a4c:	4a19      	ldr	r2, [pc, #100]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009a4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009a54:	e01e      	b.n	8009a94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a5a:	3308      	adds	r3, #8
 8009a5c:	2100      	movs	r1, #0
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f002 f928 	bl	800bcb4 <RCCEx_PLL2_Config>
 8009a64:	4603      	mov	r3, r0
 8009a66:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009a6a:	e013      	b.n	8009a94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a70:	3328      	adds	r3, #40	; 0x28
 8009a72:	2100      	movs	r1, #0
 8009a74:	4618      	mov	r0, r3
 8009a76:	f002 f9cf 	bl	800be18 <RCCEx_PLL3_Config>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009a80:	e008      	b.n	8009a94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009a82:	2301      	movs	r3, #1
 8009a84:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009a88:	e004      	b.n	8009a94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009a8a:	bf00      	nop
 8009a8c:	e002      	b.n	8009a94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009a8e:	bf00      	nop
 8009a90:	e000      	b.n	8009a94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8009a92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d10d      	bne.n	8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009a9c:	4b05      	ldr	r3, [pc, #20]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009aa0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009aa8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009aac:	4a01      	ldr	r2, [pc, #4]	; (8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009aae:	430b      	orrs	r3, r1
 8009ab0:	6593      	str	r3, [r2, #88]	; 0x58
 8009ab2:	e005      	b.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8009ab4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ab8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009abc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009acc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009ad6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009ada:	460b      	mov	r3, r1
 8009adc:	4313      	orrs	r3, r2
 8009ade:	d03a      	beq.n	8009b56 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8009ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ae6:	2b30      	cmp	r3, #48	; 0x30
 8009ae8:	d01f      	beq.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8009aea:	2b30      	cmp	r3, #48	; 0x30
 8009aec:	d819      	bhi.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009aee:	2b20      	cmp	r3, #32
 8009af0:	d00c      	beq.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009af2:	2b20      	cmp	r3, #32
 8009af4:	d815      	bhi.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d019      	beq.n	8009b2e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009afa:	2b10      	cmp	r3, #16
 8009afc:	d111      	bne.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009afe:	4baa      	ldr	r3, [pc, #680]	; (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b02:	4aa9      	ldr	r2, [pc, #676]	; (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009b0a:	e011      	b.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b10:	3308      	adds	r3, #8
 8009b12:	2102      	movs	r1, #2
 8009b14:	4618      	mov	r0, r3
 8009b16:	f002 f8cd 	bl	800bcb4 <RCCEx_PLL2_Config>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8009b20:	e006      	b.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009b22:	2301      	movs	r3, #1
 8009b24:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009b28:	e002      	b.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009b2a:	bf00      	nop
 8009b2c:	e000      	b.n	8009b30 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8009b2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b30:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d10a      	bne.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009b38:	4b9b      	ldr	r3, [pc, #620]	; (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b3c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b46:	4a98      	ldr	r2, [pc, #608]	; (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009b48:	430b      	orrs	r3, r1
 8009b4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009b4c:	e003      	b.n	8009b56 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b4e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009b52:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b5e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009b62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009b66:	2300      	movs	r3, #0
 8009b68:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009b6c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8009b70:	460b      	mov	r3, r1
 8009b72:	4313      	orrs	r3, r2
 8009b74:	d051      	beq.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b80:	d035      	beq.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8009b82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b86:	d82e      	bhi.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009b88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009b8c:	d031      	beq.n	8009bf2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8009b8e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009b92:	d828      	bhi.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009b94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b98:	d01a      	beq.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8009b9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b9e:	d822      	bhi.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d003      	beq.n	8009bac <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8009ba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ba8:	d007      	beq.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8009baa:	e01c      	b.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bac:	4b7e      	ldr	r3, [pc, #504]	; (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bb0:	4a7d      	ldr	r2, [pc, #500]	; (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009bb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009bb8:	e01c      	b.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009bba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bbe:	3308      	adds	r3, #8
 8009bc0:	2100      	movs	r1, #0
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f002 f876 	bl	800bcb4 <RCCEx_PLL2_Config>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009bce:	e011      	b.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009bd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bd4:	3328      	adds	r3, #40	; 0x28
 8009bd6:	2100      	movs	r1, #0
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f002 f91d 	bl	800be18 <RCCEx_PLL3_Config>
 8009bde:	4603      	mov	r3, r0
 8009be0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009be4:	e006      	b.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009be6:	2301      	movs	r3, #1
 8009be8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009bec:	e002      	b.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009bee:	bf00      	nop
 8009bf0:	e000      	b.n	8009bf4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8009bf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bf4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d10a      	bne.n	8009c12 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009bfc:	4b6a      	ldr	r3, [pc, #424]	; (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c00:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c0a:	4a67      	ldr	r2, [pc, #412]	; (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009c0c:	430b      	orrs	r3, r1
 8009c0e:	6513      	str	r3, [r2, #80]	; 0x50
 8009c10:	e003      	b.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c12:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009c16:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c22:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009c26:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009c30:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009c34:	460b      	mov	r3, r1
 8009c36:	4313      	orrs	r3, r2
 8009c38:	d053      	beq.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009c44:	d033      	beq.n	8009cae <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8009c46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009c4a:	d82c      	bhi.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009c4c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009c50:	d02f      	beq.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8009c52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009c56:	d826      	bhi.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009c58:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009c5c:	d02b      	beq.n	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009c5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009c62:	d820      	bhi.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009c64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c68:	d012      	beq.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8009c6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c6e:	d81a      	bhi.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d022      	beq.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8009c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c78:	d115      	bne.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009c7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c7e:	3308      	adds	r3, #8
 8009c80:	2101      	movs	r1, #1
 8009c82:	4618      	mov	r0, r3
 8009c84:	f002 f816 	bl	800bcb4 <RCCEx_PLL2_Config>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009c8e:	e015      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c94:	3328      	adds	r3, #40	; 0x28
 8009c96:	2101      	movs	r1, #1
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f002 f8bd 	bl	800be18 <RCCEx_PLL3_Config>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009ca4:	e00a      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009cac:	e006      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009cae:	bf00      	nop
 8009cb0:	e004      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009cb2:	bf00      	nop
 8009cb4:	e002      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009cb6:	bf00      	nop
 8009cb8:	e000      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8009cba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cbc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d10a      	bne.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009cc4:	4b38      	ldr	r3, [pc, #224]	; (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cc8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cd2:	4a35      	ldr	r2, [pc, #212]	; (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009cd4:	430b      	orrs	r3, r1
 8009cd6:	6513      	str	r3, [r2, #80]	; 0x50
 8009cd8:	e003      	b.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cda:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009cde:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cea:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009cee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009cf8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	d058      	beq.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d06:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009d0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d0e:	d033      	beq.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8009d10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d14:	d82c      	bhi.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d1a:	d02f      	beq.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8009d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d20:	d826      	bhi.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009d22:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009d26:	d02b      	beq.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8009d28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009d2c:	d820      	bhi.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009d2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d32:	d012      	beq.n	8009d5a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8009d34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d38:	d81a      	bhi.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d022      	beq.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009d3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d42:	d115      	bne.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d48:	3308      	adds	r3, #8
 8009d4a:	2101      	movs	r1, #1
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f001 ffb1 	bl	800bcb4 <RCCEx_PLL2_Config>
 8009d52:	4603      	mov	r3, r0
 8009d54:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009d58:	e015      	b.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d5e:	3328      	adds	r3, #40	; 0x28
 8009d60:	2101      	movs	r1, #1
 8009d62:	4618      	mov	r0, r3
 8009d64:	f002 f858 	bl	800be18 <RCCEx_PLL3_Config>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009d6e:	e00a      	b.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009d70:	2301      	movs	r3, #1
 8009d72:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009d76:	e006      	b.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009d78:	bf00      	nop
 8009d7a:	e004      	b.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009d7c:	bf00      	nop
 8009d7e:	e002      	b.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009d80:	bf00      	nop
 8009d82:	e000      	b.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8009d84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d86:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d10e      	bne.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009d8e:	4b06      	ldr	r3, [pc, #24]	; (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d92:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009d96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d9a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009d9e:	4a02      	ldr	r2, [pc, #8]	; (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8009da0:	430b      	orrs	r3, r1
 8009da2:	6593      	str	r3, [r2, #88]	; 0x58
 8009da4:	e006      	b.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8009da6:	bf00      	nop
 8009da8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009db0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dbc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009dc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009dca:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009dce:	460b      	mov	r3, r1
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	d037      	beq.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009dde:	d00e      	beq.n	8009dfe <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8009de0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009de4:	d816      	bhi.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d018      	beq.n	8009e1c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8009dea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009dee:	d111      	bne.n	8009e14 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009df0:	4bc4      	ldr	r3, [pc, #784]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df4:	4ac3      	ldr	r2, [pc, #780]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009df6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009dfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009dfc:	e00f      	b.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009dfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e02:	3308      	adds	r3, #8
 8009e04:	2101      	movs	r1, #1
 8009e06:	4618      	mov	r0, r3
 8009e08:	f001 ff54 	bl	800bcb4 <RCCEx_PLL2_Config>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009e12:	e004      	b.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e14:	2301      	movs	r3, #1
 8009e16:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009e1a:	e000      	b.n	8009e1e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8009e1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e1e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d10a      	bne.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009e26:	4bb7      	ldr	r3, [pc, #732]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e2a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e34:	4ab3      	ldr	r2, [pc, #716]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e36:	430b      	orrs	r3, r1
 8009e38:	6513      	str	r3, [r2, #80]	; 0x50
 8009e3a:	e003      	b.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e3c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009e40:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009e44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e4c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009e50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009e54:	2300      	movs	r3, #0
 8009e56:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009e5a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009e5e:	460b      	mov	r3, r1
 8009e60:	4313      	orrs	r3, r2
 8009e62:	d039      	beq.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e6a:	2b03      	cmp	r3, #3
 8009e6c:	d81c      	bhi.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8009e6e:	a201      	add	r2, pc, #4	; (adr r2, 8009e74 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8009e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e74:	08009eb1 	.word	0x08009eb1
 8009e78:	08009e85 	.word	0x08009e85
 8009e7c:	08009e93 	.word	0x08009e93
 8009e80:	08009eb1 	.word	0x08009eb1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e84:	4b9f      	ldr	r3, [pc, #636]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e88:	4a9e      	ldr	r2, [pc, #632]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009e8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009e90:	e00f      	b.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e96:	3308      	adds	r3, #8
 8009e98:	2102      	movs	r1, #2
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f001 ff0a 	bl	800bcb4 <RCCEx_PLL2_Config>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009ea6:	e004      	b.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009eae:	e000      	b.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8009eb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009eb2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d10a      	bne.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009eba:	4b92      	ldr	r3, [pc, #584]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ebe:	f023 0103 	bic.w	r1, r3, #3
 8009ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ec8:	4a8e      	ldr	r2, [pc, #568]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009eca:	430b      	orrs	r3, r1
 8009ecc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009ece:	e003      	b.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ed0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009ed4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009ee4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009ee8:	2300      	movs	r3, #0
 8009eea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009eee:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009ef2:	460b      	mov	r3, r1
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	f000 8099 	beq.w	800a02c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009efa:	4b83      	ldr	r3, [pc, #524]	; (800a108 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4a82      	ldr	r2, [pc, #520]	; (800a108 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009f06:	f7f9 f995 	bl	8003234 <HAL_GetTick>
 8009f0a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009f0e:	e00b      	b.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009f10:	f7f9 f990 	bl	8003234 <HAL_GetTick>
 8009f14:	4602      	mov	r2, r0
 8009f16:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009f1a:	1ad3      	subs	r3, r2, r3
 8009f1c:	2b64      	cmp	r3, #100	; 0x64
 8009f1e:	d903      	bls.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8009f20:	2303      	movs	r3, #3
 8009f22:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009f26:	e005      	b.n	8009f34 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009f28:	4b77      	ldr	r3, [pc, #476]	; (800a108 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d0ed      	beq.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8009f34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d173      	bne.n	800a024 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009f3c:	4b71      	ldr	r3, [pc, #452]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009f3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009f48:	4053      	eors	r3, r2
 8009f4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d015      	beq.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009f52:	4b6c      	ldr	r3, [pc, #432]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f5a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009f5e:	4b69      	ldr	r3, [pc, #420]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f62:	4a68      	ldr	r2, [pc, #416]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f68:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009f6a:	4b66      	ldr	r3, [pc, #408]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f6e:	4a65      	ldr	r2, [pc, #404]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009f70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f74:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009f76:	4a63      	ldr	r2, [pc, #396]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009f78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8009f7c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009f86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f8a:	d118      	bne.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f8c:	f7f9 f952 	bl	8003234 <HAL_GetTick>
 8009f90:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009f94:	e00d      	b.n	8009fb2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f96:	f7f9 f94d 	bl	8003234 <HAL_GetTick>
 8009f9a:	4602      	mov	r2, r0
 8009f9c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8009fa0:	1ad2      	subs	r2, r2, r3
 8009fa2:	f241 3388 	movw	r3, #5000	; 0x1388
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d903      	bls.n	8009fb2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8009faa:	2303      	movs	r3, #3
 8009fac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8009fb0:	e005      	b.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009fb2:	4b54      	ldr	r3, [pc, #336]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fb6:	f003 0302 	and.w	r3, r3, #2
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d0eb      	beq.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8009fbe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d129      	bne.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009fc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009fce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009fd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009fd6:	d10e      	bne.n	8009ff6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8009fd8:	4b4a      	ldr	r3, [pc, #296]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009fda:	691b      	ldr	r3, [r3, #16]
 8009fdc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fe4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009fe8:	091a      	lsrs	r2, r3, #4
 8009fea:	4b48      	ldr	r3, [pc, #288]	; (800a10c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8009fec:	4013      	ands	r3, r2
 8009fee:	4a45      	ldr	r2, [pc, #276]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ff0:	430b      	orrs	r3, r1
 8009ff2:	6113      	str	r3, [r2, #16]
 8009ff4:	e005      	b.n	800a002 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8009ff6:	4b43      	ldr	r3, [pc, #268]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ff8:	691b      	ldr	r3, [r3, #16]
 8009ffa:	4a42      	ldr	r2, [pc, #264]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8009ffc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a000:	6113      	str	r3, [r2, #16]
 800a002:	4b40      	ldr	r3, [pc, #256]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a004:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a006:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a00a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a00e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a012:	4a3c      	ldr	r2, [pc, #240]	; (800a104 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a014:	430b      	orrs	r3, r1
 800a016:	6713      	str	r3, [r2, #112]	; 0x70
 800a018:	e008      	b.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a01a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a01e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800a022:	e003      	b.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a024:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a028:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a02c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a034:	f002 0301 	and.w	r3, r2, #1
 800a038:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a03c:	2300      	movs	r3, #0
 800a03e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a042:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a046:	460b      	mov	r3, r1
 800a048:	4313      	orrs	r3, r2
 800a04a:	f000 808f 	beq.w	800a16c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a04e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a052:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a054:	2b28      	cmp	r3, #40	; 0x28
 800a056:	d871      	bhi.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800a058:	a201      	add	r2, pc, #4	; (adr r2, 800a060 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800a05a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a05e:	bf00      	nop
 800a060:	0800a145 	.word	0x0800a145
 800a064:	0800a13d 	.word	0x0800a13d
 800a068:	0800a13d 	.word	0x0800a13d
 800a06c:	0800a13d 	.word	0x0800a13d
 800a070:	0800a13d 	.word	0x0800a13d
 800a074:	0800a13d 	.word	0x0800a13d
 800a078:	0800a13d 	.word	0x0800a13d
 800a07c:	0800a13d 	.word	0x0800a13d
 800a080:	0800a111 	.word	0x0800a111
 800a084:	0800a13d 	.word	0x0800a13d
 800a088:	0800a13d 	.word	0x0800a13d
 800a08c:	0800a13d 	.word	0x0800a13d
 800a090:	0800a13d 	.word	0x0800a13d
 800a094:	0800a13d 	.word	0x0800a13d
 800a098:	0800a13d 	.word	0x0800a13d
 800a09c:	0800a13d 	.word	0x0800a13d
 800a0a0:	0800a127 	.word	0x0800a127
 800a0a4:	0800a13d 	.word	0x0800a13d
 800a0a8:	0800a13d 	.word	0x0800a13d
 800a0ac:	0800a13d 	.word	0x0800a13d
 800a0b0:	0800a13d 	.word	0x0800a13d
 800a0b4:	0800a13d 	.word	0x0800a13d
 800a0b8:	0800a13d 	.word	0x0800a13d
 800a0bc:	0800a13d 	.word	0x0800a13d
 800a0c0:	0800a145 	.word	0x0800a145
 800a0c4:	0800a13d 	.word	0x0800a13d
 800a0c8:	0800a13d 	.word	0x0800a13d
 800a0cc:	0800a13d 	.word	0x0800a13d
 800a0d0:	0800a13d 	.word	0x0800a13d
 800a0d4:	0800a13d 	.word	0x0800a13d
 800a0d8:	0800a13d 	.word	0x0800a13d
 800a0dc:	0800a13d 	.word	0x0800a13d
 800a0e0:	0800a145 	.word	0x0800a145
 800a0e4:	0800a13d 	.word	0x0800a13d
 800a0e8:	0800a13d 	.word	0x0800a13d
 800a0ec:	0800a13d 	.word	0x0800a13d
 800a0f0:	0800a13d 	.word	0x0800a13d
 800a0f4:	0800a13d 	.word	0x0800a13d
 800a0f8:	0800a13d 	.word	0x0800a13d
 800a0fc:	0800a13d 	.word	0x0800a13d
 800a100:	0800a145 	.word	0x0800a145
 800a104:	58024400 	.word	0x58024400
 800a108:	58024800 	.word	0x58024800
 800a10c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a110:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a114:	3308      	adds	r3, #8
 800a116:	2101      	movs	r1, #1
 800a118:	4618      	mov	r0, r3
 800a11a:	f001 fdcb 	bl	800bcb4 <RCCEx_PLL2_Config>
 800a11e:	4603      	mov	r3, r0
 800a120:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a124:	e00f      	b.n	800a146 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a126:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a12a:	3328      	adds	r3, #40	; 0x28
 800a12c:	2101      	movs	r1, #1
 800a12e:	4618      	mov	r0, r3
 800a130:	f001 fe72 	bl	800be18 <RCCEx_PLL3_Config>
 800a134:	4603      	mov	r3, r0
 800a136:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a13a:	e004      	b.n	800a146 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a13c:	2301      	movs	r3, #1
 800a13e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a142:	e000      	b.n	800a146 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800a144:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a146:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d10a      	bne.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a14e:	4bbf      	ldr	r3, [pc, #764]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a152:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a156:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a15a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a15c:	4abb      	ldr	r2, [pc, #748]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a15e:	430b      	orrs	r3, r1
 800a160:	6553      	str	r3, [r2, #84]	; 0x54
 800a162:	e003      	b.n	800a16c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a164:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a168:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a16c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a174:	f002 0302 	and.w	r3, r2, #2
 800a178:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a17c:	2300      	movs	r3, #0
 800a17e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a182:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a186:	460b      	mov	r3, r1
 800a188:	4313      	orrs	r3, r2
 800a18a:	d041      	beq.n	800a210 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a18c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a192:	2b05      	cmp	r3, #5
 800a194:	d824      	bhi.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800a196:	a201      	add	r2, pc, #4	; (adr r2, 800a19c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800a198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a19c:	0800a1e9 	.word	0x0800a1e9
 800a1a0:	0800a1b5 	.word	0x0800a1b5
 800a1a4:	0800a1cb 	.word	0x0800a1cb
 800a1a8:	0800a1e9 	.word	0x0800a1e9
 800a1ac:	0800a1e9 	.word	0x0800a1e9
 800a1b0:	0800a1e9 	.word	0x0800a1e9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a1b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1b8:	3308      	adds	r3, #8
 800a1ba:	2101      	movs	r1, #1
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f001 fd79 	bl	800bcb4 <RCCEx_PLL2_Config>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a1c8:	e00f      	b.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a1ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1ce:	3328      	adds	r3, #40	; 0x28
 800a1d0:	2101      	movs	r1, #1
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f001 fe20 	bl	800be18 <RCCEx_PLL3_Config>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a1de:	e004      	b.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a1e6:	e000      	b.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800a1e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1ea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d10a      	bne.n	800a208 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a1f2:	4b96      	ldr	r3, [pc, #600]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a1f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1f6:	f023 0107 	bic.w	r1, r3, #7
 800a1fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a200:	4a92      	ldr	r2, [pc, #584]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a202:	430b      	orrs	r3, r1
 800a204:	6553      	str	r3, [r2, #84]	; 0x54
 800a206:	e003      	b.n	800a210 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a208:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a20c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a218:	f002 0304 	and.w	r3, r2, #4
 800a21c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a220:	2300      	movs	r3, #0
 800a222:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a226:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a22a:	460b      	mov	r3, r1
 800a22c:	4313      	orrs	r3, r2
 800a22e:	d044      	beq.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a230:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a238:	2b05      	cmp	r3, #5
 800a23a:	d825      	bhi.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800a23c:	a201      	add	r2, pc, #4	; (adr r2, 800a244 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800a23e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a242:	bf00      	nop
 800a244:	0800a291 	.word	0x0800a291
 800a248:	0800a25d 	.word	0x0800a25d
 800a24c:	0800a273 	.word	0x0800a273
 800a250:	0800a291 	.word	0x0800a291
 800a254:	0800a291 	.word	0x0800a291
 800a258:	0800a291 	.word	0x0800a291
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a25c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a260:	3308      	adds	r3, #8
 800a262:	2101      	movs	r1, #1
 800a264:	4618      	mov	r0, r3
 800a266:	f001 fd25 	bl	800bcb4 <RCCEx_PLL2_Config>
 800a26a:	4603      	mov	r3, r0
 800a26c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a270:	e00f      	b.n	800a292 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a272:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a276:	3328      	adds	r3, #40	; 0x28
 800a278:	2101      	movs	r1, #1
 800a27a:	4618      	mov	r0, r3
 800a27c:	f001 fdcc 	bl	800be18 <RCCEx_PLL3_Config>
 800a280:	4603      	mov	r3, r0
 800a282:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a286:	e004      	b.n	800a292 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a288:	2301      	movs	r3, #1
 800a28a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a28e:	e000      	b.n	800a292 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800a290:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a292:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a296:	2b00      	cmp	r3, #0
 800a298:	d10b      	bne.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a29a:	4b6c      	ldr	r3, [pc, #432]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a29c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a29e:	f023 0107 	bic.w	r1, r3, #7
 800a2a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2aa:	4a68      	ldr	r2, [pc, #416]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a2ac:	430b      	orrs	r3, r1
 800a2ae:	6593      	str	r3, [r2, #88]	; 0x58
 800a2b0:	e003      	b.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2b2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a2b6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a2ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c2:	f002 0320 	and.w	r3, r2, #32
 800a2c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a2d0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a2d4:	460b      	mov	r3, r1
 800a2d6:	4313      	orrs	r3, r2
 800a2d8:	d055      	beq.n	800a386 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a2da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a2e6:	d033      	beq.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800a2e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a2ec:	d82c      	bhi.n	800a348 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a2ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2f2:	d02f      	beq.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800a2f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2f8:	d826      	bhi.n	800a348 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a2fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a2fe:	d02b      	beq.n	800a358 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800a300:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a304:	d820      	bhi.n	800a348 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a306:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a30a:	d012      	beq.n	800a332 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800a30c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a310:	d81a      	bhi.n	800a348 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a312:	2b00      	cmp	r3, #0
 800a314:	d022      	beq.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800a316:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a31a:	d115      	bne.n	800a348 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a31c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a320:	3308      	adds	r3, #8
 800a322:	2100      	movs	r1, #0
 800a324:	4618      	mov	r0, r3
 800a326:	f001 fcc5 	bl	800bcb4 <RCCEx_PLL2_Config>
 800a32a:	4603      	mov	r3, r0
 800a32c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a330:	e015      	b.n	800a35e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a332:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a336:	3328      	adds	r3, #40	; 0x28
 800a338:	2102      	movs	r1, #2
 800a33a:	4618      	mov	r0, r3
 800a33c:	f001 fd6c 	bl	800be18 <RCCEx_PLL3_Config>
 800a340:	4603      	mov	r3, r0
 800a342:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a346:	e00a      	b.n	800a35e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a348:	2301      	movs	r3, #1
 800a34a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a34e:	e006      	b.n	800a35e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a350:	bf00      	nop
 800a352:	e004      	b.n	800a35e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a354:	bf00      	nop
 800a356:	e002      	b.n	800a35e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a358:	bf00      	nop
 800a35a:	e000      	b.n	800a35e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800a35c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a35e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a362:	2b00      	cmp	r3, #0
 800a364:	d10b      	bne.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a366:	4b39      	ldr	r3, [pc, #228]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a36a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a36e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a372:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a376:	4a35      	ldr	r2, [pc, #212]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a378:	430b      	orrs	r3, r1
 800a37a:	6553      	str	r3, [r2, #84]	; 0x54
 800a37c:	e003      	b.n	800a386 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a37e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a382:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a386:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a38e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a392:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a396:	2300      	movs	r3, #0
 800a398:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a39c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a3a0:	460b      	mov	r3, r1
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	d058      	beq.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a3a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a3ae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a3b2:	d033      	beq.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800a3b4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a3b8:	d82c      	bhi.n	800a414 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a3ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3be:	d02f      	beq.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a3c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3c4:	d826      	bhi.n	800a414 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a3c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a3ca:	d02b      	beq.n	800a424 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800a3cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a3d0:	d820      	bhi.n	800a414 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a3d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a3d6:	d012      	beq.n	800a3fe <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800a3d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a3dc:	d81a      	bhi.n	800a414 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d022      	beq.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a3e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3e6:	d115      	bne.n	800a414 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a3e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3ec:	3308      	adds	r3, #8
 800a3ee:	2100      	movs	r1, #0
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f001 fc5f 	bl	800bcb4 <RCCEx_PLL2_Config>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a3fc:	e015      	b.n	800a42a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a3fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a402:	3328      	adds	r3, #40	; 0x28
 800a404:	2102      	movs	r1, #2
 800a406:	4618      	mov	r0, r3
 800a408:	f001 fd06 	bl	800be18 <RCCEx_PLL3_Config>
 800a40c:	4603      	mov	r3, r0
 800a40e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a412:	e00a      	b.n	800a42a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a414:	2301      	movs	r3, #1
 800a416:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a41a:	e006      	b.n	800a42a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a41c:	bf00      	nop
 800a41e:	e004      	b.n	800a42a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a420:	bf00      	nop
 800a422:	e002      	b.n	800a42a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a424:	bf00      	nop
 800a426:	e000      	b.n	800a42a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800a428:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a42a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d10e      	bne.n	800a450 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a432:	4b06      	ldr	r3, [pc, #24]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a436:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a43a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a43e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a442:	4a02      	ldr	r2, [pc, #8]	; (800a44c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a444:	430b      	orrs	r3, r1
 800a446:	6593      	str	r3, [r2, #88]	; 0x58
 800a448:	e006      	b.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800a44a:	bf00      	nop
 800a44c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a450:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a454:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a458:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a460:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a464:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a468:	2300      	movs	r3, #0
 800a46a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a46e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a472:	460b      	mov	r3, r1
 800a474:	4313      	orrs	r3, r2
 800a476:	d055      	beq.n	800a524 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a478:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a47c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a480:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a484:	d033      	beq.n	800a4ee <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800a486:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a48a:	d82c      	bhi.n	800a4e6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a48c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a490:	d02f      	beq.n	800a4f2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800a492:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a496:	d826      	bhi.n	800a4e6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a498:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a49c:	d02b      	beq.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800a49e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a4a2:	d820      	bhi.n	800a4e6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a4a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a4a8:	d012      	beq.n	800a4d0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800a4aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a4ae:	d81a      	bhi.n	800a4e6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d022      	beq.n	800a4fa <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800a4b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4b8:	d115      	bne.n	800a4e6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a4ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4be:	3308      	adds	r3, #8
 800a4c0:	2100      	movs	r1, #0
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f001 fbf6 	bl	800bcb4 <RCCEx_PLL2_Config>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a4ce:	e015      	b.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a4d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4d4:	3328      	adds	r3, #40	; 0x28
 800a4d6:	2102      	movs	r1, #2
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f001 fc9d 	bl	800be18 <RCCEx_PLL3_Config>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a4e4:	e00a      	b.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a4ec:	e006      	b.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a4ee:	bf00      	nop
 800a4f0:	e004      	b.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a4f2:	bf00      	nop
 800a4f4:	e002      	b.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a4f6:	bf00      	nop
 800a4f8:	e000      	b.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800a4fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a500:	2b00      	cmp	r3, #0
 800a502:	d10b      	bne.n	800a51c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a504:	4ba0      	ldr	r3, [pc, #640]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a508:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a50c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a510:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a514:	4a9c      	ldr	r2, [pc, #624]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a516:	430b      	orrs	r3, r1
 800a518:	6593      	str	r3, [r2, #88]	; 0x58
 800a51a:	e003      	b.n	800a524 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a51c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a520:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a524:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a52c:	f002 0308 	and.w	r3, r2, #8
 800a530:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a534:	2300      	movs	r3, #0
 800a536:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a53a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a53e:	460b      	mov	r3, r1
 800a540:	4313      	orrs	r3, r2
 800a542:	d01e      	beq.n	800a582 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800a544:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a548:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a54c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a550:	d10c      	bne.n	800a56c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a552:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a556:	3328      	adds	r3, #40	; 0x28
 800a558:	2102      	movs	r1, #2
 800a55a:	4618      	mov	r0, r3
 800a55c:	f001 fc5c 	bl	800be18 <RCCEx_PLL3_Config>
 800a560:	4603      	mov	r3, r0
 800a562:	2b00      	cmp	r3, #0
 800a564:	d002      	beq.n	800a56c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800a566:	2301      	movs	r3, #1
 800a568:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a56c:	4b86      	ldr	r3, [pc, #536]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a56e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a570:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a574:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a578:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a57c:	4a82      	ldr	r2, [pc, #520]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a57e:	430b      	orrs	r3, r1
 800a580:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a582:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a58a:	f002 0310 	and.w	r3, r2, #16
 800a58e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a592:	2300      	movs	r3, #0
 800a594:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a598:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a59c:	460b      	mov	r3, r1
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	d01e      	beq.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a5a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a5aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5ae:	d10c      	bne.n	800a5ca <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a5b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5b4:	3328      	adds	r3, #40	; 0x28
 800a5b6:	2102      	movs	r1, #2
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f001 fc2d 	bl	800be18 <RCCEx_PLL3_Config>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d002      	beq.n	800a5ca <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a5ca:	4b6f      	ldr	r3, [pc, #444]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a5cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a5d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a5da:	4a6b      	ldr	r2, [pc, #428]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a5dc:	430b      	orrs	r3, r1
 800a5de:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a5e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5e8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a5ec:	67bb      	str	r3, [r7, #120]	; 0x78
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a5f2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a5f6:	460b      	mov	r3, r1
 800a5f8:	4313      	orrs	r3, r2
 800a5fa:	d03e      	beq.n	800a67a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a5fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a600:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a604:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a608:	d022      	beq.n	800a650 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800a60a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a60e:	d81b      	bhi.n	800a648 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800a610:	2b00      	cmp	r3, #0
 800a612:	d003      	beq.n	800a61c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800a614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a618:	d00b      	beq.n	800a632 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800a61a:	e015      	b.n	800a648 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a61c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a620:	3308      	adds	r3, #8
 800a622:	2100      	movs	r1, #0
 800a624:	4618      	mov	r0, r3
 800a626:	f001 fb45 	bl	800bcb4 <RCCEx_PLL2_Config>
 800a62a:	4603      	mov	r3, r0
 800a62c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a630:	e00f      	b.n	800a652 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a632:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a636:	3328      	adds	r3, #40	; 0x28
 800a638:	2102      	movs	r1, #2
 800a63a:	4618      	mov	r0, r3
 800a63c:	f001 fbec 	bl	800be18 <RCCEx_PLL3_Config>
 800a640:	4603      	mov	r3, r0
 800a642:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a646:	e004      	b.n	800a652 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a648:	2301      	movs	r3, #1
 800a64a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a64e:	e000      	b.n	800a652 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800a650:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a652:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a656:	2b00      	cmp	r3, #0
 800a658:	d10b      	bne.n	800a672 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a65a:	4b4b      	ldr	r3, [pc, #300]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a65c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a65e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a662:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a666:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a66a:	4a47      	ldr	r2, [pc, #284]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a66c:	430b      	orrs	r3, r1
 800a66e:	6593      	str	r3, [r2, #88]	; 0x58
 800a670:	e003      	b.n	800a67a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a672:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a676:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a67a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a682:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a686:	673b      	str	r3, [r7, #112]	; 0x70
 800a688:	2300      	movs	r3, #0
 800a68a:	677b      	str	r3, [r7, #116]	; 0x74
 800a68c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a690:	460b      	mov	r3, r1
 800a692:	4313      	orrs	r3, r2
 800a694:	d03b      	beq.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a696:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a69a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a69e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a6a2:	d01f      	beq.n	800a6e4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800a6a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a6a8:	d818      	bhi.n	800a6dc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800a6aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a6ae:	d003      	beq.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800a6b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a6b4:	d007      	beq.n	800a6c6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800a6b6:	e011      	b.n	800a6dc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6b8:	4b33      	ldr	r3, [pc, #204]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6bc:	4a32      	ldr	r2, [pc, #200]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a6be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a6c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a6c4:	e00f      	b.n	800a6e6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a6c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6ca:	3328      	adds	r3, #40	; 0x28
 800a6cc:	2101      	movs	r1, #1
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f001 fba2 	bl	800be18 <RCCEx_PLL3_Config>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800a6da:	e004      	b.n	800a6e6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a6dc:	2301      	movs	r3, #1
 800a6de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a6e2:	e000      	b.n	800a6e6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800a6e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a6e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d10b      	bne.n	800a706 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a6ee:	4b26      	ldr	r3, [pc, #152]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a6f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6f2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a6f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a6fe:	4a22      	ldr	r2, [pc, #136]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a700:	430b      	orrs	r3, r1
 800a702:	6553      	str	r3, [r2, #84]	; 0x54
 800a704:	e003      	b.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a706:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a70a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a70e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a716:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a71a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a71c:	2300      	movs	r3, #0
 800a71e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a720:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a724:	460b      	mov	r3, r1
 800a726:	4313      	orrs	r3, r2
 800a728:	d034      	beq.n	800a794 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a72a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a72e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a730:	2b00      	cmp	r3, #0
 800a732:	d003      	beq.n	800a73c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800a734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a738:	d007      	beq.n	800a74a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800a73a:	e011      	b.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a73c:	4b12      	ldr	r3, [pc, #72]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a73e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a740:	4a11      	ldr	r2, [pc, #68]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a742:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a746:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a748:	e00e      	b.n	800a768 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a74a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a74e:	3308      	adds	r3, #8
 800a750:	2102      	movs	r1, #2
 800a752:	4618      	mov	r0, r3
 800a754:	f001 faae 	bl	800bcb4 <RCCEx_PLL2_Config>
 800a758:	4603      	mov	r3, r0
 800a75a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a75e:	e003      	b.n	800a768 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800a760:	2301      	movs	r3, #1
 800a762:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a766:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a768:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d10d      	bne.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a770:	4b05      	ldr	r3, [pc, #20]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a774:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a778:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a77c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a77e:	4a02      	ldr	r2, [pc, #8]	; (800a788 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800a780:	430b      	orrs	r3, r1
 800a782:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a784:	e006      	b.n	800a794 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800a786:	bf00      	nop
 800a788:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a78c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a790:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a794:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a79c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a7a0:	663b      	str	r3, [r7, #96]	; 0x60
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	667b      	str	r3, [r7, #100]	; 0x64
 800a7a6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a7aa:	460b      	mov	r3, r1
 800a7ac:	4313      	orrs	r3, r2
 800a7ae:	d00c      	beq.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a7b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7b4:	3328      	adds	r3, #40	; 0x28
 800a7b6:	2102      	movs	r1, #2
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f001 fb2d 	bl	800be18 <RCCEx_PLL3_Config>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d002      	beq.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a7ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a7d6:	65bb      	str	r3, [r7, #88]	; 0x58
 800a7d8:	2300      	movs	r3, #0
 800a7da:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a7dc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a7e0:	460b      	mov	r3, r1
 800a7e2:	4313      	orrs	r3, r2
 800a7e4:	d036      	beq.n	800a854 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a7e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a7f0:	d018      	beq.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800a7f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a7f6:	d811      	bhi.n	800a81c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a7f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7fc:	d014      	beq.n	800a828 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800a7fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a802:	d80b      	bhi.n	800a81c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800a804:	2b00      	cmp	r3, #0
 800a806:	d011      	beq.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800a808:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a80c:	d106      	bne.n	800a81c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a80e:	4bb7      	ldr	r3, [pc, #732]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a812:	4ab6      	ldr	r2, [pc, #728]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a818:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a81a:	e008      	b.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a81c:	2301      	movs	r3, #1
 800a81e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a822:	e004      	b.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a824:	bf00      	nop
 800a826:	e002      	b.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a828:	bf00      	nop
 800a82a:	e000      	b.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800a82c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a82e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a832:	2b00      	cmp	r3, #0
 800a834:	d10a      	bne.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a836:	4bad      	ldr	r3, [pc, #692]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a83a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a83e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a842:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a844:	4aa9      	ldr	r2, [pc, #676]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a846:	430b      	orrs	r3, r1
 800a848:	6553      	str	r3, [r2, #84]	; 0x54
 800a84a:	e003      	b.n	800a854 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a84c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a850:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a854:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a85c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a860:	653b      	str	r3, [r7, #80]	; 0x50
 800a862:	2300      	movs	r3, #0
 800a864:	657b      	str	r3, [r7, #84]	; 0x54
 800a866:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a86a:	460b      	mov	r3, r1
 800a86c:	4313      	orrs	r3, r2
 800a86e:	d009      	beq.n	800a884 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a870:	4b9e      	ldr	r3, [pc, #632]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a874:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a878:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a87c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a87e:	4a9b      	ldr	r2, [pc, #620]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a880:	430b      	orrs	r3, r1
 800a882:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a884:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a890:	64bb      	str	r3, [r7, #72]	; 0x48
 800a892:	2300      	movs	r3, #0
 800a894:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a896:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a89a:	460b      	mov	r3, r1
 800a89c:	4313      	orrs	r3, r2
 800a89e:	d009      	beq.n	800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a8a0:	4b92      	ldr	r3, [pc, #584]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a8a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8a4:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800a8a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a8ae:	4a8f      	ldr	r2, [pc, #572]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a8b0:	430b      	orrs	r3, r1
 800a8b2:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a8b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8bc:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800a8c0:	643b      	str	r3, [r7, #64]	; 0x40
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	647b      	str	r3, [r7, #68]	; 0x44
 800a8c6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	d00e      	beq.n	800a8ee <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a8d0:	4b86      	ldr	r3, [pc, #536]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a8d2:	691b      	ldr	r3, [r3, #16]
 800a8d4:	4a85      	ldr	r2, [pc, #532]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a8d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a8da:	6113      	str	r3, [r2, #16]
 800a8dc:	4b83      	ldr	r3, [pc, #524]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a8de:	6919      	ldr	r1, [r3, #16]
 800a8e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a8e8:	4a80      	ldr	r2, [pc, #512]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a8ea:	430b      	orrs	r3, r1
 800a8ec:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a8ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f6:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800a8fa:	63bb      	str	r3, [r7, #56]	; 0x38
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a900:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a904:	460b      	mov	r3, r1
 800a906:	4313      	orrs	r3, r2
 800a908:	d009      	beq.n	800a91e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a90a:	4b78      	ldr	r3, [pc, #480]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a90c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a90e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a912:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a918:	4a74      	ldr	r2, [pc, #464]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a91a:	430b      	orrs	r3, r1
 800a91c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a91e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a926:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a92a:	633b      	str	r3, [r7, #48]	; 0x30
 800a92c:	2300      	movs	r3, #0
 800a92e:	637b      	str	r3, [r7, #52]	; 0x34
 800a930:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a934:	460b      	mov	r3, r1
 800a936:	4313      	orrs	r3, r2
 800a938:	d00a      	beq.n	800a950 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a93a:	4b6c      	ldr	r3, [pc, #432]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a93c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a93e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800a942:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a94a:	4a68      	ldr	r2, [pc, #416]	; (800aaec <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800a94c:	430b      	orrs	r3, r1
 800a94e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a950:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a958:	2100      	movs	r1, #0
 800a95a:	62b9      	str	r1, [r7, #40]	; 0x28
 800a95c:	f003 0301 	and.w	r3, r3, #1
 800a960:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a962:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a966:	460b      	mov	r3, r1
 800a968:	4313      	orrs	r3, r2
 800a96a:	d011      	beq.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a96c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a970:	3308      	adds	r3, #8
 800a972:	2100      	movs	r1, #0
 800a974:	4618      	mov	r0, r3
 800a976:	f001 f99d 	bl	800bcb4 <RCCEx_PLL2_Config>
 800a97a:	4603      	mov	r3, r0
 800a97c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800a980:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a984:	2b00      	cmp	r3, #0
 800a986:	d003      	beq.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a988:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a98c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a990:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a998:	2100      	movs	r1, #0
 800a99a:	6239      	str	r1, [r7, #32]
 800a99c:	f003 0302 	and.w	r3, r3, #2
 800a9a0:	627b      	str	r3, [r7, #36]	; 0x24
 800a9a2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	4313      	orrs	r3, r2
 800a9aa:	d011      	beq.n	800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a9ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9b0:	3308      	adds	r3, #8
 800a9b2:	2101      	movs	r1, #1
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f001 f97d 	bl	800bcb4 <RCCEx_PLL2_Config>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800a9c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d003      	beq.n	800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a9cc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a9d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d8:	2100      	movs	r1, #0
 800a9da:	61b9      	str	r1, [r7, #24]
 800a9dc:	f003 0304 	and.w	r3, r3, #4
 800a9e0:	61fb      	str	r3, [r7, #28]
 800a9e2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a9e6:	460b      	mov	r3, r1
 800a9e8:	4313      	orrs	r3, r2
 800a9ea:	d011      	beq.n	800aa10 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a9ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9f0:	3308      	adds	r3, #8
 800a9f2:	2102      	movs	r1, #2
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f001 f95d 	bl	800bcb4 <RCCEx_PLL2_Config>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800aa00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d003      	beq.n	800aa10 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa0c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800aa10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa18:	2100      	movs	r1, #0
 800aa1a:	6139      	str	r1, [r7, #16]
 800aa1c:	f003 0308 	and.w	r3, r3, #8
 800aa20:	617b      	str	r3, [r7, #20]
 800aa22:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800aa26:	460b      	mov	r3, r1
 800aa28:	4313      	orrs	r3, r2
 800aa2a:	d011      	beq.n	800aa50 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aa2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa30:	3328      	adds	r3, #40	; 0x28
 800aa32:	2100      	movs	r1, #0
 800aa34:	4618      	mov	r0, r3
 800aa36:	f001 f9ef 	bl	800be18 <RCCEx_PLL3_Config>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800aa40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d003      	beq.n	800aa50 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa48:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa4c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800aa50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa58:	2100      	movs	r1, #0
 800aa5a:	60b9      	str	r1, [r7, #8]
 800aa5c:	f003 0310 	and.w	r3, r3, #16
 800aa60:	60fb      	str	r3, [r7, #12]
 800aa62:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800aa66:	460b      	mov	r3, r1
 800aa68:	4313      	orrs	r3, r2
 800aa6a:	d011      	beq.n	800aa90 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aa6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa70:	3328      	adds	r3, #40	; 0x28
 800aa72:	2101      	movs	r1, #1
 800aa74:	4618      	mov	r0, r3
 800aa76:	f001 f9cf 	bl	800be18 <RCCEx_PLL3_Config>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800aa80:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d003      	beq.n	800aa90 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa8c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800aa90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa98:	2100      	movs	r1, #0
 800aa9a:	6039      	str	r1, [r7, #0]
 800aa9c:	f003 0320 	and.w	r3, r3, #32
 800aaa0:	607b      	str	r3, [r7, #4]
 800aaa2:	e9d7 1200 	ldrd	r1, r2, [r7]
 800aaa6:	460b      	mov	r3, r1
 800aaa8:	4313      	orrs	r3, r2
 800aaaa:	d011      	beq.n	800aad0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aaac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aab0:	3328      	adds	r3, #40	; 0x28
 800aab2:	2102      	movs	r1, #2
 800aab4:	4618      	mov	r0, r3
 800aab6:	f001 f9af 	bl	800be18 <RCCEx_PLL3_Config>
 800aaba:	4603      	mov	r3, r0
 800aabc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800aac0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d003      	beq.n	800aad0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aac8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aacc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800aad0:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d101      	bne.n	800aadc <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800aad8:	2300      	movs	r3, #0
 800aada:	e000      	b.n	800aade <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800aadc:	2301      	movs	r3, #1
}
 800aade:	4618      	mov	r0, r3
 800aae0:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800aae4:	46bd      	mov	sp, r7
 800aae6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aaea:	bf00      	nop
 800aaec:	58024400 	.word	0x58024400

0800aaf0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b090      	sub	sp, #64	; 0x40
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800aafa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aafe:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800ab02:	430b      	orrs	r3, r1
 800ab04:	f040 8094 	bne.w	800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ab08:	4b9b      	ldr	r3, [pc, #620]	; (800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ab0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab0c:	f003 0307 	and.w	r3, r3, #7
 800ab10:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ab12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab14:	2b04      	cmp	r3, #4
 800ab16:	f200 8087 	bhi.w	800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800ab1a:	a201      	add	r2, pc, #4	; (adr r2, 800ab20 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800ab1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab20:	0800ab35 	.word	0x0800ab35
 800ab24:	0800ab5d 	.word	0x0800ab5d
 800ab28:	0800ab85 	.word	0x0800ab85
 800ab2c:	0800ac21 	.word	0x0800ac21
 800ab30:	0800abad 	.word	0x0800abad
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ab34:	4b90      	ldr	r3, [pc, #576]	; (800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ab3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab40:	d108      	bne.n	800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ab42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab46:	4618      	mov	r0, r3
 800ab48:	f000 ff62 	bl	800ba10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ab4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab50:	f000 bc93 	b.w	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab54:	2300      	movs	r3, #0
 800ab56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab58:	f000 bc8f 	b.w	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab5c:	4b86      	ldr	r3, [pc, #536]	; (800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab68:	d108      	bne.n	800ab7c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab6a:	f107 0318 	add.w	r3, r7, #24
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f000 fca6 	bl	800b4c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ab74:	69bb      	ldr	r3, [r7, #24]
 800ab76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab78:	f000 bc7f 	b.w	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab80:	f000 bc7b 	b.w	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab84:	4b7c      	ldr	r3, [pc, #496]	; (800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab90:	d108      	bne.n	800aba4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab92:	f107 030c 	add.w	r3, r7, #12
 800ab96:	4618      	mov	r0, r3
 800ab98:	f000 fde6 	bl	800b768 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aba0:	f000 bc6b 	b.w	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800aba4:	2300      	movs	r3, #0
 800aba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aba8:	f000 bc67 	b.w	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800abac:	4b72      	ldr	r3, [pc, #456]	; (800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800abae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800abb4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800abb6:	4b70      	ldr	r3, [pc, #448]	; (800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f003 0304 	and.w	r3, r3, #4
 800abbe:	2b04      	cmp	r3, #4
 800abc0:	d10c      	bne.n	800abdc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800abc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d109      	bne.n	800abdc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abc8:	4b6b      	ldr	r3, [pc, #428]	; (800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	08db      	lsrs	r3, r3, #3
 800abce:	f003 0303 	and.w	r3, r3, #3
 800abd2:	4a6a      	ldr	r2, [pc, #424]	; (800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800abd4:	fa22 f303 	lsr.w	r3, r2, r3
 800abd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abda:	e01f      	b.n	800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800abdc:	4b66      	ldr	r3, [pc, #408]	; (800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abe4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abe8:	d106      	bne.n	800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800abea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800abf0:	d102      	bne.n	800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800abf2:	4b63      	ldr	r3, [pc, #396]	; (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800abf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abf6:	e011      	b.n	800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800abf8:	4b5f      	ldr	r3, [pc, #380]	; (800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac04:	d106      	bne.n	800ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800ac06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac0c:	d102      	bne.n	800ac14 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ac0e:	4b5d      	ldr	r3, [pc, #372]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac10:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac12:	e003      	b.n	800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ac14:	2300      	movs	r3, #0
 800ac16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ac18:	f000 bc2f 	b.w	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ac1c:	f000 bc2d 	b.w	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ac20:	4b59      	ldr	r3, [pc, #356]	; (800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ac22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac24:	f000 bc29 	b.w	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac2c:	f000 bc25 	b.w	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800ac30:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac34:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800ac38:	430b      	orrs	r3, r1
 800ac3a:	f040 80a7 	bne.w	800ad8c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800ac3e:	4b4e      	ldr	r3, [pc, #312]	; (800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ac40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac42:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800ac46:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ac48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac4a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ac4e:	d054      	beq.n	800acfa <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800ac50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ac56:	f200 808b 	bhi.w	800ad70 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ac5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac5c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ac60:	f000 8083 	beq.w	800ad6a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800ac64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac66:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ac6a:	f200 8081 	bhi.w	800ad70 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ac6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac74:	d02f      	beq.n	800acd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800ac76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac7c:	d878      	bhi.n	800ad70 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800ac7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d004      	beq.n	800ac8e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800ac84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac8a:	d012      	beq.n	800acb2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800ac8c:	e070      	b.n	800ad70 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac8e:	4b3a      	ldr	r3, [pc, #232]	; (800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac9a:	d107      	bne.n	800acac <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aca0:	4618      	mov	r0, r3
 800aca2:	f000 feb5 	bl	800ba10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acaa:	e3e6      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800acac:	2300      	movs	r3, #0
 800acae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acb0:	e3e3      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800acb2:	4b31      	ldr	r3, [pc, #196]	; (800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800acba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800acbe:	d107      	bne.n	800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acc0:	f107 0318 	add.w	r3, r7, #24
 800acc4:	4618      	mov	r0, r3
 800acc6:	f000 fbfb 	bl	800b4c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800acca:	69bb      	ldr	r3, [r7, #24]
 800accc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acce:	e3d4      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800acd0:	2300      	movs	r3, #0
 800acd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acd4:	e3d1      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800acd6:	4b28      	ldr	r3, [pc, #160]	; (800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800acde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ace2:	d107      	bne.n	800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ace4:	f107 030c 	add.w	r3, r7, #12
 800ace8:	4618      	mov	r0, r3
 800acea:	f000 fd3d 	bl	800b768 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acf2:	e3c2      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800acf4:	2300      	movs	r3, #0
 800acf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acf8:	e3bf      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800acfa:	4b1f      	ldr	r3, [pc, #124]	; (800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800acfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acfe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ad02:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ad04:	4b1c      	ldr	r3, [pc, #112]	; (800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f003 0304 	and.w	r3, r3, #4
 800ad0c:	2b04      	cmp	r3, #4
 800ad0e:	d10c      	bne.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800ad10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d109      	bne.n	800ad2a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad16:	4b18      	ldr	r3, [pc, #96]	; (800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	08db      	lsrs	r3, r3, #3
 800ad1c:	f003 0303 	and.w	r3, r3, #3
 800ad20:	4a16      	ldr	r2, [pc, #88]	; (800ad7c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800ad22:	fa22 f303 	lsr.w	r3, r2, r3
 800ad26:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad28:	e01e      	b.n	800ad68 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ad2a:	4b13      	ldr	r3, [pc, #76]	; (800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad36:	d106      	bne.n	800ad46 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800ad38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad3e:	d102      	bne.n	800ad46 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ad40:	4b0f      	ldr	r3, [pc, #60]	; (800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800ad42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad44:	e010      	b.n	800ad68 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ad46:	4b0c      	ldr	r3, [pc, #48]	; (800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad52:	d106      	bne.n	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800ad54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad5a:	d102      	bne.n	800ad62 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ad5c:	4b09      	ldr	r3, [pc, #36]	; (800ad84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad60:	e002      	b.n	800ad68 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ad62:	2300      	movs	r3, #0
 800ad64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ad66:	e388      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ad68:	e387      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ad6a:	4b07      	ldr	r3, [pc, #28]	; (800ad88 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ad6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad6e:	e384      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800ad70:	2300      	movs	r3, #0
 800ad72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad74:	e381      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ad76:	bf00      	nop
 800ad78:	58024400 	.word	0x58024400
 800ad7c:	03d09000 	.word	0x03d09000
 800ad80:	003d0900 	.word	0x003d0900
 800ad84:	02faf080 	.word	0x02faf080
 800ad88:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ad8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad90:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800ad94:	430b      	orrs	r3, r1
 800ad96:	f040 809c 	bne.w	800aed2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800ad9a:	4b9e      	ldr	r3, [pc, #632]	; (800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ad9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad9e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800ada2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ada4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800adaa:	d054      	beq.n	800ae56 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800adac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800adb2:	f200 808b 	bhi.w	800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800adb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800adbc:	f000 8083 	beq.w	800aec6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800adc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800adc6:	f200 8081 	bhi.w	800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800adca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adcc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800add0:	d02f      	beq.n	800ae32 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800add2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800add8:	d878      	bhi.n	800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800adda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800addc:	2b00      	cmp	r3, #0
 800adde:	d004      	beq.n	800adea <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800ade0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ade6:	d012      	beq.n	800ae0e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800ade8:	e070      	b.n	800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800adea:	4b8a      	ldr	r3, [pc, #552]	; (800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adf2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800adf6:	d107      	bne.n	800ae08 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800adf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800adfc:	4618      	mov	r0, r3
 800adfe:	f000 fe07 	bl	800ba10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ae02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae04:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae06:	e338      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae0c:	e335      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae0e:	4b81      	ldr	r3, [pc, #516]	; (800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae1a:	d107      	bne.n	800ae2c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae1c:	f107 0318 	add.w	r3, r7, #24
 800ae20:	4618      	mov	r0, r3
 800ae22:	f000 fb4d 	bl	800b4c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ae26:	69bb      	ldr	r3, [r7, #24]
 800ae28:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae2a:	e326      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae30:	e323      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ae32:	4b78      	ldr	r3, [pc, #480]	; (800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae3e:	d107      	bne.n	800ae50 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae40:	f107 030c 	add.w	r3, r7, #12
 800ae44:	4618      	mov	r0, r3
 800ae46:	f000 fc8f 	bl	800b768 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae4e:	e314      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ae50:	2300      	movs	r3, #0
 800ae52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae54:	e311      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ae56:	4b6f      	ldr	r3, [pc, #444]	; (800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ae5e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ae60:	4b6c      	ldr	r3, [pc, #432]	; (800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f003 0304 	and.w	r3, r3, #4
 800ae68:	2b04      	cmp	r3, #4
 800ae6a:	d10c      	bne.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800ae6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d109      	bne.n	800ae86 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae72:	4b68      	ldr	r3, [pc, #416]	; (800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	08db      	lsrs	r3, r3, #3
 800ae78:	f003 0303 	and.w	r3, r3, #3
 800ae7c:	4a66      	ldr	r2, [pc, #408]	; (800b018 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800ae7e:	fa22 f303 	lsr.w	r3, r2, r3
 800ae82:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae84:	e01e      	b.n	800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ae86:	4b63      	ldr	r3, [pc, #396]	; (800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae92:	d106      	bne.n	800aea2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800ae94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae9a:	d102      	bne.n	800aea2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ae9c:	4b5f      	ldr	r3, [pc, #380]	; (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800ae9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aea0:	e010      	b.n	800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aea2:	4b5c      	ldr	r3, [pc, #368]	; (800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aeaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aeae:	d106      	bne.n	800aebe <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800aeb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aeb6:	d102      	bne.n	800aebe <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aeb8:	4b59      	ldr	r3, [pc, #356]	; (800b020 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aeba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aebc:	e002      	b.n	800aec4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aebe:	2300      	movs	r3, #0
 800aec0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800aec2:	e2da      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800aec4:	e2d9      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aec6:	4b57      	ldr	r3, [pc, #348]	; (800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800aec8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aeca:	e2d6      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800aecc:	2300      	movs	r3, #0
 800aece:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aed0:	e2d3      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800aed2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aed6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800aeda:	430b      	orrs	r3, r1
 800aedc:	f040 80a7 	bne.w	800b02e <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800aee0:	4b4c      	ldr	r3, [pc, #304]	; (800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800aee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aee4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800aee8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800aeea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aef0:	d055      	beq.n	800af9e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800aef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aef4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aef8:	f200 8096 	bhi.w	800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800aefc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aefe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800af02:	f000 8084 	beq.w	800b00e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800af06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af08:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800af0c:	f200 808c 	bhi.w	800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800af10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af16:	d030      	beq.n	800af7a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800af18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af1e:	f200 8083 	bhi.w	800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800af22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af24:	2b00      	cmp	r3, #0
 800af26:	d004      	beq.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800af28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af2e:	d012      	beq.n	800af56 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800af30:	e07a      	b.n	800b028 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800af32:	4b38      	ldr	r3, [pc, #224]	; (800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af3e:	d107      	bne.n	800af50 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af44:	4618      	mov	r0, r3
 800af46:	f000 fd63 	bl	800ba10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800af4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af4e:	e294      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af50:	2300      	movs	r3, #0
 800af52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af54:	e291      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af56:	4b2f      	ldr	r3, [pc, #188]	; (800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af62:	d107      	bne.n	800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af64:	f107 0318 	add.w	r3, r7, #24
 800af68:	4618      	mov	r0, r3
 800af6a:	f000 faa9 	bl	800b4c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800af6e:	69bb      	ldr	r3, [r7, #24]
 800af70:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af72:	e282      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af74:	2300      	movs	r3, #0
 800af76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af78:	e27f      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af7a:	4b26      	ldr	r3, [pc, #152]	; (800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af86:	d107      	bne.n	800af98 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af88:	f107 030c 	add.w	r3, r7, #12
 800af8c:	4618      	mov	r0, r3
 800af8e:	f000 fbeb 	bl	800b768 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af96:	e270      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800af98:	2300      	movs	r3, #0
 800af9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af9c:	e26d      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800af9e:	4b1d      	ldr	r3, [pc, #116]	; (800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800afa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afa2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800afa6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800afa8:	4b1a      	ldr	r3, [pc, #104]	; (800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f003 0304 	and.w	r3, r3, #4
 800afb0:	2b04      	cmp	r3, #4
 800afb2:	d10c      	bne.n	800afce <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800afb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d109      	bne.n	800afce <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800afba:	4b16      	ldr	r3, [pc, #88]	; (800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	08db      	lsrs	r3, r3, #3
 800afc0:	f003 0303 	and.w	r3, r3, #3
 800afc4:	4a14      	ldr	r2, [pc, #80]	; (800b018 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800afc6:	fa22 f303 	lsr.w	r3, r2, r3
 800afca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afcc:	e01e      	b.n	800b00c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800afce:	4b11      	ldr	r3, [pc, #68]	; (800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afda:	d106      	bne.n	800afea <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800afdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800afe2:	d102      	bne.n	800afea <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800afe4:	4b0d      	ldr	r3, [pc, #52]	; (800b01c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800afe6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afe8:	e010      	b.n	800b00c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800afea:	4b0a      	ldr	r3, [pc, #40]	; (800b014 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aff2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aff6:	d106      	bne.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800aff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800affa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800affe:	d102      	bne.n	800b006 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b000:	4b07      	ldr	r3, [pc, #28]	; (800b020 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b002:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b004:	e002      	b.n	800b00c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b006:	2300      	movs	r3, #0
 800b008:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b00a:	e236      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b00c:	e235      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b00e:	4b05      	ldr	r3, [pc, #20]	; (800b024 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b010:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b012:	e232      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b014:	58024400 	.word	0x58024400
 800b018:	03d09000 	.word	0x03d09000
 800b01c:	003d0900 	.word	0x003d0900
 800b020:	02faf080 	.word	0x02faf080
 800b024:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800b028:	2300      	movs	r3, #0
 800b02a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b02c:	e225      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b02e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b032:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800b036:	430b      	orrs	r3, r1
 800b038:	f040 8085 	bne.w	800b146 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b03c:	4b9c      	ldr	r3, [pc, #624]	; (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b03e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b040:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b044:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800b046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b048:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b04c:	d06b      	beq.n	800b126 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800b04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b050:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b054:	d874      	bhi.n	800b140 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b058:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b05c:	d056      	beq.n	800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800b05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b060:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b064:	d86c      	bhi.n	800b140 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b068:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b06c:	d03b      	beq.n	800b0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800b06e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b070:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b074:	d864      	bhi.n	800b140 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b078:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b07c:	d021      	beq.n	800b0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800b07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b080:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b084:	d85c      	bhi.n	800b140 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d004      	beq.n	800b096 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800b08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b08e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b092:	d004      	beq.n	800b09e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800b094:	e054      	b.n	800b140 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b096:	f7fe fb5f 	bl	8009758 <HAL_RCC_GetPCLK1Freq>
 800b09a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b09c:	e1ed      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b09e:	4b84      	ldr	r3, [pc, #528]	; (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b0aa:	d107      	bne.n	800b0bc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0ac:	f107 0318 	add.w	r3, r7, #24
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f000 fa05 	bl	800b4c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b0b6:	69fb      	ldr	r3, [r7, #28]
 800b0b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0ba:	e1de      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0c0:	e1db      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b0c2:	4b7b      	ldr	r3, [pc, #492]	; (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b0ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0ce:	d107      	bne.n	800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0d0:	f107 030c 	add.w	r3, r7, #12
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	f000 fb47 	bl	800b768 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0de:	e1cc      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0e4:	e1c9      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b0e6:	4b72      	ldr	r3, [pc, #456]	; (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f003 0304 	and.w	r3, r3, #4
 800b0ee:	2b04      	cmp	r3, #4
 800b0f0:	d109      	bne.n	800b106 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b0f2:	4b6f      	ldr	r3, [pc, #444]	; (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	08db      	lsrs	r3, r3, #3
 800b0f8:	f003 0303 	and.w	r3, r3, #3
 800b0fc:	4a6d      	ldr	r2, [pc, #436]	; (800b2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b0fe:	fa22 f303 	lsr.w	r3, r2, r3
 800b102:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b104:	e1b9      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b106:	2300      	movs	r3, #0
 800b108:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b10a:	e1b6      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b10c:	4b68      	ldr	r3, [pc, #416]	; (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b114:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b118:	d102      	bne.n	800b120 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800b11a:	4b67      	ldr	r3, [pc, #412]	; (800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b11c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b11e:	e1ac      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b120:	2300      	movs	r3, #0
 800b122:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b124:	e1a9      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b126:	4b62      	ldr	r3, [pc, #392]	; (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b12e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b132:	d102      	bne.n	800b13a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800b134:	4b61      	ldr	r3, [pc, #388]	; (800b2bc <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b136:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b138:	e19f      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b13a:	2300      	movs	r3, #0
 800b13c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b13e:	e19c      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b140:	2300      	movs	r3, #0
 800b142:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b144:	e199      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b146:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b14a:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800b14e:	430b      	orrs	r3, r1
 800b150:	d173      	bne.n	800b23a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b152:	4b57      	ldr	r3, [pc, #348]	; (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b156:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b15a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b15c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b15e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b162:	d02f      	beq.n	800b1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800b164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b166:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b16a:	d863      	bhi.n	800b234 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800b16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d004      	beq.n	800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800b172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b178:	d012      	beq.n	800b1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800b17a:	e05b      	b.n	800b234 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b17c:	4b4c      	ldr	r3, [pc, #304]	; (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b184:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b188:	d107      	bne.n	800b19a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b18a:	f107 0318 	add.w	r3, r7, #24
 800b18e:	4618      	mov	r0, r3
 800b190:	f000 f996 	bl	800b4c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b194:	69bb      	ldr	r3, [r7, #24]
 800b196:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b198:	e16f      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b19a:	2300      	movs	r3, #0
 800b19c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b19e:	e16c      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b1a0:	4b43      	ldr	r3, [pc, #268]	; (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b1a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1ac:	d107      	bne.n	800b1be <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b1ae:	f107 030c 	add.w	r3, r7, #12
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f000 fad8 	bl	800b768 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b1b8:	697b      	ldr	r3, [r7, #20]
 800b1ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1bc:	e15d      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b1c2:	e15a      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b1c4:	4b3a      	ldr	r3, [pc, #232]	; (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b1c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b1cc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b1ce:	4b38      	ldr	r3, [pc, #224]	; (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f003 0304 	and.w	r3, r3, #4
 800b1d6:	2b04      	cmp	r3, #4
 800b1d8:	d10c      	bne.n	800b1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800b1da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d109      	bne.n	800b1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b1e0:	4b33      	ldr	r3, [pc, #204]	; (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	08db      	lsrs	r3, r3, #3
 800b1e6:	f003 0303 	and.w	r3, r3, #3
 800b1ea:	4a32      	ldr	r2, [pc, #200]	; (800b2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b1ec:	fa22 f303 	lsr.w	r3, r2, r3
 800b1f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b1f2:	e01e      	b.n	800b232 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b1f4:	4b2e      	ldr	r3, [pc, #184]	; (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b200:	d106      	bne.n	800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800b202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b204:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b208:	d102      	bne.n	800b210 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b20a:	4b2b      	ldr	r3, [pc, #172]	; (800b2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b20c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b20e:	e010      	b.n	800b232 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b210:	4b27      	ldr	r3, [pc, #156]	; (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b218:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b21c:	d106      	bne.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800b21e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b220:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b224:	d102      	bne.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b226:	4b25      	ldr	r3, [pc, #148]	; (800b2bc <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b228:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b22a:	e002      	b.n	800b232 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b22c:	2300      	movs	r3, #0
 800b22e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b230:	e123      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b232:	e122      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b234:	2300      	movs	r3, #0
 800b236:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b238:	e11f      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b23a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b23e:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800b242:	430b      	orrs	r3, r1
 800b244:	d13c      	bne.n	800b2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b246:	4b1a      	ldr	r3, [pc, #104]	; (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b24a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b24e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b252:	2b00      	cmp	r3, #0
 800b254:	d004      	beq.n	800b260 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800b256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b25c:	d012      	beq.n	800b284 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800b25e:	e023      	b.n	800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b260:	4b13      	ldr	r3, [pc, #76]	; (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b268:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b26c:	d107      	bne.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b26e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b272:	4618      	mov	r0, r3
 800b274:	f000 fbcc 	bl	800ba10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b27a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b27c:	e0fd      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b27e:	2300      	movs	r3, #0
 800b280:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b282:	e0fa      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b284:	4b0a      	ldr	r3, [pc, #40]	; (800b2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b28c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b290:	d107      	bne.n	800b2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b292:	f107 0318 	add.w	r3, r7, #24
 800b296:	4618      	mov	r0, r3
 800b298:	f000 f912 	bl	800b4c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b29c:	6a3b      	ldr	r3, [r7, #32]
 800b29e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2a0:	e0eb      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2a6:	e0e8      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2ac:	e0e5      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b2ae:	bf00      	nop
 800b2b0:	58024400 	.word	0x58024400
 800b2b4:	03d09000 	.word	0x03d09000
 800b2b8:	003d0900 	.word	0x003d0900
 800b2bc:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b2c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2c4:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b2c8:	430b      	orrs	r3, r1
 800b2ca:	f040 8085 	bne.w	800b3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b2ce:	4b6d      	ldr	r3, [pc, #436]	; (800b484 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b2d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2d2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b2d6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b2de:	d06b      	beq.n	800b3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800b2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b2e6:	d874      	bhi.n	800b3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2ee:	d056      	beq.n	800b39e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800b2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2f6:	d86c      	bhi.n	800b3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2fa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b2fe:	d03b      	beq.n	800b378 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800b300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b302:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b306:	d864      	bhi.n	800b3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b30a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b30e:	d021      	beq.n	800b354 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800b310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b312:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b316:	d85c      	bhi.n	800b3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800b318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d004      	beq.n	800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800b31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b320:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b324:	d004      	beq.n	800b330 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800b326:	e054      	b.n	800b3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b328:	f000 f8b4 	bl	800b494 <HAL_RCCEx_GetD3PCLK1Freq>
 800b32c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b32e:	e0a4      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b330:	4b54      	ldr	r3, [pc, #336]	; (800b484 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b338:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b33c:	d107      	bne.n	800b34e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b33e:	f107 0318 	add.w	r3, r7, #24
 800b342:	4618      	mov	r0, r3
 800b344:	f000 f8bc 	bl	800b4c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b348:	69fb      	ldr	r3, [r7, #28]
 800b34a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b34c:	e095      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b34e:	2300      	movs	r3, #0
 800b350:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b352:	e092      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b354:	4b4b      	ldr	r3, [pc, #300]	; (800b484 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b35c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b360:	d107      	bne.n	800b372 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b362:	f107 030c 	add.w	r3, r7, #12
 800b366:	4618      	mov	r0, r3
 800b368:	f000 f9fe 	bl	800b768 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b370:	e083      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b372:	2300      	movs	r3, #0
 800b374:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b376:	e080      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b378:	4b42      	ldr	r3, [pc, #264]	; (800b484 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f003 0304 	and.w	r3, r3, #4
 800b380:	2b04      	cmp	r3, #4
 800b382:	d109      	bne.n	800b398 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b384:	4b3f      	ldr	r3, [pc, #252]	; (800b484 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	08db      	lsrs	r3, r3, #3
 800b38a:	f003 0303 	and.w	r3, r3, #3
 800b38e:	4a3e      	ldr	r2, [pc, #248]	; (800b488 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800b390:	fa22 f303 	lsr.w	r3, r2, r3
 800b394:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b396:	e070      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b398:	2300      	movs	r3, #0
 800b39a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b39c:	e06d      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b39e:	4b39      	ldr	r3, [pc, #228]	; (800b484 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3aa:	d102      	bne.n	800b3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800b3ac:	4b37      	ldr	r3, [pc, #220]	; (800b48c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b3ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3b0:	e063      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3b6:	e060      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b3b8:	4b32      	ldr	r3, [pc, #200]	; (800b484 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b3c4:	d102      	bne.n	800b3cc <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800b3c6:	4b32      	ldr	r3, [pc, #200]	; (800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b3c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3ca:	e056      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3d0:	e053      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3d6:	e050      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b3d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3dc:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800b3e0:	430b      	orrs	r3, r1
 800b3e2:	d148      	bne.n	800b476 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b3e4:	4b27      	ldr	r3, [pc, #156]	; (800b484 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b3e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b3ec:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3f4:	d02a      	beq.n	800b44c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800b3f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3fc:	d838      	bhi.n	800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800b3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b400:	2b00      	cmp	r3, #0
 800b402:	d004      	beq.n	800b40e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800b404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b406:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b40a:	d00d      	beq.n	800b428 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800b40c:	e030      	b.n	800b470 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b40e:	4b1d      	ldr	r3, [pc, #116]	; (800b484 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b416:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b41a:	d102      	bne.n	800b422 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800b41c:	4b1c      	ldr	r3, [pc, #112]	; (800b490 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b41e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b420:	e02b      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b422:	2300      	movs	r3, #0
 800b424:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b426:	e028      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b428:	4b16      	ldr	r3, [pc, #88]	; (800b484 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b430:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b434:	d107      	bne.n	800b446 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b436:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b43a:	4618      	mov	r0, r3
 800b43c:	f000 fae8 	bl	800ba10 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b442:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b444:	e019      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b446:	2300      	movs	r3, #0
 800b448:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b44a:	e016      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b44c:	4b0d      	ldr	r3, [pc, #52]	; (800b484 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b454:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b458:	d107      	bne.n	800b46a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b45a:	f107 0318 	add.w	r3, r7, #24
 800b45e:	4618      	mov	r0, r3
 800b460:	f000 f82e 	bl	800b4c0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b464:	69fb      	ldr	r3, [r7, #28]
 800b466:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b468:	e007      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b46a:	2300      	movs	r3, #0
 800b46c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b46e:	e004      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b470:	2300      	movs	r3, #0
 800b472:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b474:	e001      	b.n	800b47a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800b476:	2300      	movs	r3, #0
 800b478:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800b47a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	3740      	adds	r7, #64	; 0x40
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}
 800b484:	58024400 	.word	0x58024400
 800b488:	03d09000 	.word	0x03d09000
 800b48c:	003d0900 	.word	0x003d0900
 800b490:	02faf080 	.word	0x02faf080

0800b494 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b498:	f7fe f92e 	bl	80096f8 <HAL_RCC_GetHCLKFreq>
 800b49c:	4602      	mov	r2, r0
 800b49e:	4b06      	ldr	r3, [pc, #24]	; (800b4b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b4a0:	6a1b      	ldr	r3, [r3, #32]
 800b4a2:	091b      	lsrs	r3, r3, #4
 800b4a4:	f003 0307 	and.w	r3, r3, #7
 800b4a8:	4904      	ldr	r1, [pc, #16]	; (800b4bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b4aa:	5ccb      	ldrb	r3, [r1, r3]
 800b4ac:	f003 031f 	and.w	r3, r3, #31
 800b4b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	bd80      	pop	{r7, pc}
 800b4b8:	58024400 	.word	0x58024400
 800b4bc:	080163b4 	.word	0x080163b4

0800b4c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	b089      	sub	sp, #36	; 0x24
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b4c8:	4ba1      	ldr	r3, [pc, #644]	; (800b750 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b4ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4cc:	f003 0303 	and.w	r3, r3, #3
 800b4d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b4d2:	4b9f      	ldr	r3, [pc, #636]	; (800b750 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b4d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4d6:	0b1b      	lsrs	r3, r3, #12
 800b4d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b4dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b4de:	4b9c      	ldr	r3, [pc, #624]	; (800b750 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b4e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4e2:	091b      	lsrs	r3, r3, #4
 800b4e4:	f003 0301 	and.w	r3, r3, #1
 800b4e8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b4ea:	4b99      	ldr	r3, [pc, #612]	; (800b750 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b4ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4ee:	08db      	lsrs	r3, r3, #3
 800b4f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b4f4:	693a      	ldr	r2, [r7, #16]
 800b4f6:	fb02 f303 	mul.w	r3, r2, r3
 800b4fa:	ee07 3a90 	vmov	s15, r3
 800b4fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b502:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	f000 8111 	beq.w	800b730 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b50e:	69bb      	ldr	r3, [r7, #24]
 800b510:	2b02      	cmp	r3, #2
 800b512:	f000 8083 	beq.w	800b61c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b516:	69bb      	ldr	r3, [r7, #24]
 800b518:	2b02      	cmp	r3, #2
 800b51a:	f200 80a1 	bhi.w	800b660 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b51e:	69bb      	ldr	r3, [r7, #24]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d003      	beq.n	800b52c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b524:	69bb      	ldr	r3, [r7, #24]
 800b526:	2b01      	cmp	r3, #1
 800b528:	d056      	beq.n	800b5d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b52a:	e099      	b.n	800b660 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b52c:	4b88      	ldr	r3, [pc, #544]	; (800b750 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f003 0320 	and.w	r3, r3, #32
 800b534:	2b00      	cmp	r3, #0
 800b536:	d02d      	beq.n	800b594 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b538:	4b85      	ldr	r3, [pc, #532]	; (800b750 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	08db      	lsrs	r3, r3, #3
 800b53e:	f003 0303 	and.w	r3, r3, #3
 800b542:	4a84      	ldr	r2, [pc, #528]	; (800b754 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b544:	fa22 f303 	lsr.w	r3, r2, r3
 800b548:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	ee07 3a90 	vmov	s15, r3
 800b550:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	ee07 3a90 	vmov	s15, r3
 800b55a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b55e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b562:	4b7b      	ldr	r3, [pc, #492]	; (800b750 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b56a:	ee07 3a90 	vmov	s15, r3
 800b56e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b572:	ed97 6a03 	vldr	s12, [r7, #12]
 800b576:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b758 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b57a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b57e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b582:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b58a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b58e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b592:	e087      	b.n	800b6a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	ee07 3a90 	vmov	s15, r3
 800b59a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b59e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b75c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b5a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5a6:	4b6a      	ldr	r3, [pc, #424]	; (800b750 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b5a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5ae:	ee07 3a90 	vmov	s15, r3
 800b5b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b758 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b5be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b5d6:	e065      	b.n	800b6a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	ee07 3a90 	vmov	s15, r3
 800b5de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b760 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b5e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5ea:	4b59      	ldr	r3, [pc, #356]	; (800b750 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b5ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5f2:	ee07 3a90 	vmov	s15, r3
 800b5f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b758 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b60a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b60e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b612:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b616:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b61a:	e043      	b.n	800b6a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b61c:	697b      	ldr	r3, [r7, #20]
 800b61e:	ee07 3a90 	vmov	s15, r3
 800b622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b626:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b764 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b62a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b62e:	4b48      	ldr	r3, [pc, #288]	; (800b750 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b636:	ee07 3a90 	vmov	s15, r3
 800b63a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b63e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b642:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b758 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b64a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b64e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b65a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b65e:	e021      	b.n	800b6a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	ee07 3a90 	vmov	s15, r3
 800b666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b66a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b760 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b66e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b672:	4b37      	ldr	r3, [pc, #220]	; (800b750 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b67a:	ee07 3a90 	vmov	s15, r3
 800b67e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b682:	ed97 6a03 	vldr	s12, [r7, #12]
 800b686:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b758 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b68a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b68e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b692:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b69a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b69e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6a2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b6a4:	4b2a      	ldr	r3, [pc, #168]	; (800b750 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6a8:	0a5b      	lsrs	r3, r3, #9
 800b6aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6ae:	ee07 3a90 	vmov	s15, r3
 800b6b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b6ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6be:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6ca:	ee17 2a90 	vmov	r2, s15
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b6d2:	4b1f      	ldr	r3, [pc, #124]	; (800b750 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6d6:	0c1b      	lsrs	r3, r3, #16
 800b6d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b6dc:	ee07 3a90 	vmov	s15, r3
 800b6e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b6e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6ec:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6f8:	ee17 2a90 	vmov	r2, s15
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b700:	4b13      	ldr	r3, [pc, #76]	; (800b750 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b704:	0e1b      	lsrs	r3, r3, #24
 800b706:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b70a:	ee07 3a90 	vmov	s15, r3
 800b70e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b712:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b716:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b71a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b71e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b722:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b726:	ee17 2a90 	vmov	r2, s15
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b72e:	e008      	b.n	800b742 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2200      	movs	r2, #0
 800b734:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	2200      	movs	r2, #0
 800b73a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2200      	movs	r2, #0
 800b740:	609a      	str	r2, [r3, #8]
}
 800b742:	bf00      	nop
 800b744:	3724      	adds	r7, #36	; 0x24
 800b746:	46bd      	mov	sp, r7
 800b748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74c:	4770      	bx	lr
 800b74e:	bf00      	nop
 800b750:	58024400 	.word	0x58024400
 800b754:	03d09000 	.word	0x03d09000
 800b758:	46000000 	.word	0x46000000
 800b75c:	4c742400 	.word	0x4c742400
 800b760:	4a742400 	.word	0x4a742400
 800b764:	4c3ebc20 	.word	0x4c3ebc20

0800b768 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b768:	b480      	push	{r7}
 800b76a:	b089      	sub	sp, #36	; 0x24
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b770:	4ba1      	ldr	r3, [pc, #644]	; (800b9f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b774:	f003 0303 	and.w	r3, r3, #3
 800b778:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b77a:	4b9f      	ldr	r3, [pc, #636]	; (800b9f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b77c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b77e:	0d1b      	lsrs	r3, r3, #20
 800b780:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b784:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b786:	4b9c      	ldr	r3, [pc, #624]	; (800b9f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b78a:	0a1b      	lsrs	r3, r3, #8
 800b78c:	f003 0301 	and.w	r3, r3, #1
 800b790:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b792:	4b99      	ldr	r3, [pc, #612]	; (800b9f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b796:	08db      	lsrs	r3, r3, #3
 800b798:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b79c:	693a      	ldr	r2, [r7, #16]
 800b79e:	fb02 f303 	mul.w	r3, r2, r3
 800b7a2:	ee07 3a90 	vmov	s15, r3
 800b7a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	f000 8111 	beq.w	800b9d8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b7b6:	69bb      	ldr	r3, [r7, #24]
 800b7b8:	2b02      	cmp	r3, #2
 800b7ba:	f000 8083 	beq.w	800b8c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b7be:	69bb      	ldr	r3, [r7, #24]
 800b7c0:	2b02      	cmp	r3, #2
 800b7c2:	f200 80a1 	bhi.w	800b908 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b7c6:	69bb      	ldr	r3, [r7, #24]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d003      	beq.n	800b7d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b7cc:	69bb      	ldr	r3, [r7, #24]
 800b7ce:	2b01      	cmp	r3, #1
 800b7d0:	d056      	beq.n	800b880 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b7d2:	e099      	b.n	800b908 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b7d4:	4b88      	ldr	r3, [pc, #544]	; (800b9f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f003 0320 	and.w	r3, r3, #32
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d02d      	beq.n	800b83c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b7e0:	4b85      	ldr	r3, [pc, #532]	; (800b9f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	08db      	lsrs	r3, r3, #3
 800b7e6:	f003 0303 	and.w	r3, r3, #3
 800b7ea:	4a84      	ldr	r2, [pc, #528]	; (800b9fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b7ec:	fa22 f303 	lsr.w	r3, r2, r3
 800b7f0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	ee07 3a90 	vmov	s15, r3
 800b7f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	ee07 3a90 	vmov	s15, r3
 800b802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b80a:	4b7b      	ldr	r3, [pc, #492]	; (800b9f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b80c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b80e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b812:	ee07 3a90 	vmov	s15, r3
 800b816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b81a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b81e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ba00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b82a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b82e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b832:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b836:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b83a:	e087      	b.n	800b94c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	ee07 3a90 	vmov	s15, r3
 800b842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b846:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ba04 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b84a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b84e:	4b6a      	ldr	r3, [pc, #424]	; (800b9f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b856:	ee07 3a90 	vmov	s15, r3
 800b85a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b85e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b862:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ba00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b86a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b86e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b87a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b87e:	e065      	b.n	800b94c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b880:	697b      	ldr	r3, [r7, #20]
 800b882:	ee07 3a90 	vmov	s15, r3
 800b886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b88a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ba08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b88e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b892:	4b59      	ldr	r3, [pc, #356]	; (800b9f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b89a:	ee07 3a90 	vmov	s15, r3
 800b89e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ba00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b8aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b8c2:	e043      	b.n	800b94c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	ee07 3a90 	vmov	s15, r3
 800b8ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ba0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b8d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8d6:	4b48      	ldr	r3, [pc, #288]	; (800b9f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8de:	ee07 3a90 	vmov	s15, r3
 800b8e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ba00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b8ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b902:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b906:	e021      	b.n	800b94c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b908:	697b      	ldr	r3, [r7, #20]
 800b90a:	ee07 3a90 	vmov	s15, r3
 800b90e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b912:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ba08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b91a:	4b37      	ldr	r3, [pc, #220]	; (800b9f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b91c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b91e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b922:	ee07 3a90 	vmov	s15, r3
 800b926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b92a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b92e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ba00 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b93a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b93e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b942:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b946:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b94a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b94c:	4b2a      	ldr	r3, [pc, #168]	; (800b9f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b94e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b950:	0a5b      	lsrs	r3, r3, #9
 800b952:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b956:	ee07 3a90 	vmov	s15, r3
 800b95a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b95e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b962:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b966:	edd7 6a07 	vldr	s13, [r7, #28]
 800b96a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b96e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b972:	ee17 2a90 	vmov	r2, s15
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b97a:	4b1f      	ldr	r3, [pc, #124]	; (800b9f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b97c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b97e:	0c1b      	lsrs	r3, r3, #16
 800b980:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b984:	ee07 3a90 	vmov	s15, r3
 800b988:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b98c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b990:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b994:	edd7 6a07 	vldr	s13, [r7, #28]
 800b998:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b99c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9a0:	ee17 2a90 	vmov	r2, s15
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b9a8:	4b13      	ldr	r3, [pc, #76]	; (800b9f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ac:	0e1b      	lsrs	r3, r3, #24
 800b9ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9b2:	ee07 3a90 	vmov	s15, r3
 800b9b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b9be:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b9c2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b9c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9ce:	ee17 2a90 	vmov	r2, s15
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b9d6:	e008      	b.n	800b9ea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	609a      	str	r2, [r3, #8]
}
 800b9ea:	bf00      	nop
 800b9ec:	3724      	adds	r7, #36	; 0x24
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f4:	4770      	bx	lr
 800b9f6:	bf00      	nop
 800b9f8:	58024400 	.word	0x58024400
 800b9fc:	03d09000 	.word	0x03d09000
 800ba00:	46000000 	.word	0x46000000
 800ba04:	4c742400 	.word	0x4c742400
 800ba08:	4a742400 	.word	0x4a742400
 800ba0c:	4c3ebc20 	.word	0x4c3ebc20

0800ba10 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ba10:	b480      	push	{r7}
 800ba12:	b089      	sub	sp, #36	; 0x24
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ba18:	4ba0      	ldr	r3, [pc, #640]	; (800bc9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba1c:	f003 0303 	and.w	r3, r3, #3
 800ba20:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800ba22:	4b9e      	ldr	r3, [pc, #632]	; (800bc9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba26:	091b      	lsrs	r3, r3, #4
 800ba28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba2c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ba2e:	4b9b      	ldr	r3, [pc, #620]	; (800bc9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba32:	f003 0301 	and.w	r3, r3, #1
 800ba36:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ba38:	4b98      	ldr	r3, [pc, #608]	; (800bc9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba3c:	08db      	lsrs	r3, r3, #3
 800ba3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ba42:	693a      	ldr	r2, [r7, #16]
 800ba44:	fb02 f303 	mul.w	r3, r2, r3
 800ba48:	ee07 3a90 	vmov	s15, r3
 800ba4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba50:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	f000 8111 	beq.w	800bc7e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ba5c:	69bb      	ldr	r3, [r7, #24]
 800ba5e:	2b02      	cmp	r3, #2
 800ba60:	f000 8083 	beq.w	800bb6a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ba64:	69bb      	ldr	r3, [r7, #24]
 800ba66:	2b02      	cmp	r3, #2
 800ba68:	f200 80a1 	bhi.w	800bbae <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ba6c:	69bb      	ldr	r3, [r7, #24]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d003      	beq.n	800ba7a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ba72:	69bb      	ldr	r3, [r7, #24]
 800ba74:	2b01      	cmp	r3, #1
 800ba76:	d056      	beq.n	800bb26 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ba78:	e099      	b.n	800bbae <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba7a:	4b88      	ldr	r3, [pc, #544]	; (800bc9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f003 0320 	and.w	r3, r3, #32
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d02d      	beq.n	800bae2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ba86:	4b85      	ldr	r3, [pc, #532]	; (800bc9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	08db      	lsrs	r3, r3, #3
 800ba8c:	f003 0303 	and.w	r3, r3, #3
 800ba90:	4a83      	ldr	r2, [pc, #524]	; (800bca0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ba92:	fa22 f303 	lsr.w	r3, r2, r3
 800ba96:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	ee07 3a90 	vmov	s15, r3
 800ba9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	ee07 3a90 	vmov	s15, r3
 800baa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bab0:	4b7a      	ldr	r3, [pc, #488]	; (800bc9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bab8:	ee07 3a90 	vmov	s15, r3
 800babc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bac0:	ed97 6a03 	vldr	s12, [r7, #12]
 800bac4:	eddf 5a77 	vldr	s11, [pc, #476]	; 800bca4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bac8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bacc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bad0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bad4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800badc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bae0:	e087      	b.n	800bbf2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	ee07 3a90 	vmov	s15, r3
 800bae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baec:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800bca8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800baf0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800baf4:	4b69      	ldr	r3, [pc, #420]	; (800bc9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800baf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bafc:	ee07 3a90 	vmov	s15, r3
 800bb00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb04:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb08:	eddf 5a66 	vldr	s11, [pc, #408]	; 800bca4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bb0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb20:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb24:	e065      	b.n	800bbf2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	ee07 3a90 	vmov	s15, r3
 800bb2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb30:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800bcac <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800bb34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb38:	4b58      	ldr	r3, [pc, #352]	; (800bc9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb40:	ee07 3a90 	vmov	s15, r3
 800bb44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb48:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb4c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800bca4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bb50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb60:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb64:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb68:	e043      	b.n	800bbf2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	ee07 3a90 	vmov	s15, r3
 800bb70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb74:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800bcb0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800bb78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb7c:	4b47      	ldr	r3, [pc, #284]	; (800bc9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bb7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb84:	ee07 3a90 	vmov	s15, r3
 800bb88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb8c:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb90:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bca4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bb94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bba0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bba4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bba8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbac:	e021      	b.n	800bbf2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	ee07 3a90 	vmov	s15, r3
 800bbb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbb8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800bca8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bbbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbc0:	4b36      	ldr	r3, [pc, #216]	; (800bc9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbc8:	ee07 3a90 	vmov	s15, r3
 800bbcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbd0:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbd4:	eddf 5a33 	vldr	s11, [pc, #204]	; 800bca4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bbd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbe0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbe4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbf0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800bbf2:	4b2a      	ldr	r3, [pc, #168]	; (800bc9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bbf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbf6:	0a5b      	lsrs	r3, r3, #9
 800bbf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbfc:	ee07 3a90 	vmov	s15, r3
 800bc00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc08:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc0c:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc18:	ee17 2a90 	vmov	r2, s15
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800bc20:	4b1e      	ldr	r3, [pc, #120]	; (800bc9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc24:	0c1b      	lsrs	r3, r3, #16
 800bc26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc2a:	ee07 3a90 	vmov	s15, r3
 800bc2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc36:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc3a:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc46:	ee17 2a90 	vmov	r2, s15
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800bc4e:	4b13      	ldr	r3, [pc, #76]	; (800bc9c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bc50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc52:	0e1b      	lsrs	r3, r3, #24
 800bc54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc58:	ee07 3a90 	vmov	s15, r3
 800bc5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc64:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc68:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc74:	ee17 2a90 	vmov	r2, s15
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bc7c:	e008      	b.n	800bc90 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2200      	movs	r2, #0
 800bc82:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2200      	movs	r2, #0
 800bc88:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	609a      	str	r2, [r3, #8]
}
 800bc90:	bf00      	nop
 800bc92:	3724      	adds	r7, #36	; 0x24
 800bc94:	46bd      	mov	sp, r7
 800bc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9a:	4770      	bx	lr
 800bc9c:	58024400 	.word	0x58024400
 800bca0:	03d09000 	.word	0x03d09000
 800bca4:	46000000 	.word	0x46000000
 800bca8:	4c742400 	.word	0x4c742400
 800bcac:	4a742400 	.word	0x4a742400
 800bcb0:	4c3ebc20 	.word	0x4c3ebc20

0800bcb4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b084      	sub	sp, #16
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
 800bcbc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bcc2:	4b53      	ldr	r3, [pc, #332]	; (800be10 <RCCEx_PLL2_Config+0x15c>)
 800bcc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcc6:	f003 0303 	and.w	r3, r3, #3
 800bcca:	2b03      	cmp	r3, #3
 800bccc:	d101      	bne.n	800bcd2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bcce:	2301      	movs	r3, #1
 800bcd0:	e099      	b.n	800be06 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bcd2:	4b4f      	ldr	r3, [pc, #316]	; (800be10 <RCCEx_PLL2_Config+0x15c>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	4a4e      	ldr	r2, [pc, #312]	; (800be10 <RCCEx_PLL2_Config+0x15c>)
 800bcd8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bcdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bcde:	f7f7 faa9 	bl	8003234 <HAL_GetTick>
 800bce2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bce4:	e008      	b.n	800bcf8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bce6:	f7f7 faa5 	bl	8003234 <HAL_GetTick>
 800bcea:	4602      	mov	r2, r0
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	1ad3      	subs	r3, r2, r3
 800bcf0:	2b02      	cmp	r3, #2
 800bcf2:	d901      	bls.n	800bcf8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bcf4:	2303      	movs	r3, #3
 800bcf6:	e086      	b.n	800be06 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bcf8:	4b45      	ldr	r3, [pc, #276]	; (800be10 <RCCEx_PLL2_Config+0x15c>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d1f0      	bne.n	800bce6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bd04:	4b42      	ldr	r3, [pc, #264]	; (800be10 <RCCEx_PLL2_Config+0x15c>)
 800bd06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd08:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	031b      	lsls	r3, r3, #12
 800bd12:	493f      	ldr	r1, [pc, #252]	; (800be10 <RCCEx_PLL2_Config+0x15c>)
 800bd14:	4313      	orrs	r3, r2
 800bd16:	628b      	str	r3, [r1, #40]	; 0x28
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	685b      	ldr	r3, [r3, #4]
 800bd1c:	3b01      	subs	r3, #1
 800bd1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	689b      	ldr	r3, [r3, #8]
 800bd26:	3b01      	subs	r3, #1
 800bd28:	025b      	lsls	r3, r3, #9
 800bd2a:	b29b      	uxth	r3, r3
 800bd2c:	431a      	orrs	r2, r3
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	68db      	ldr	r3, [r3, #12]
 800bd32:	3b01      	subs	r3, #1
 800bd34:	041b      	lsls	r3, r3, #16
 800bd36:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bd3a:	431a      	orrs	r2, r3
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	691b      	ldr	r3, [r3, #16]
 800bd40:	3b01      	subs	r3, #1
 800bd42:	061b      	lsls	r3, r3, #24
 800bd44:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bd48:	4931      	ldr	r1, [pc, #196]	; (800be10 <RCCEx_PLL2_Config+0x15c>)
 800bd4a:	4313      	orrs	r3, r2
 800bd4c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bd4e:	4b30      	ldr	r3, [pc, #192]	; (800be10 <RCCEx_PLL2_Config+0x15c>)
 800bd50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	695b      	ldr	r3, [r3, #20]
 800bd5a:	492d      	ldr	r1, [pc, #180]	; (800be10 <RCCEx_PLL2_Config+0x15c>)
 800bd5c:	4313      	orrs	r3, r2
 800bd5e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bd60:	4b2b      	ldr	r3, [pc, #172]	; (800be10 <RCCEx_PLL2_Config+0x15c>)
 800bd62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd64:	f023 0220 	bic.w	r2, r3, #32
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	699b      	ldr	r3, [r3, #24]
 800bd6c:	4928      	ldr	r1, [pc, #160]	; (800be10 <RCCEx_PLL2_Config+0x15c>)
 800bd6e:	4313      	orrs	r3, r2
 800bd70:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bd72:	4b27      	ldr	r3, [pc, #156]	; (800be10 <RCCEx_PLL2_Config+0x15c>)
 800bd74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd76:	4a26      	ldr	r2, [pc, #152]	; (800be10 <RCCEx_PLL2_Config+0x15c>)
 800bd78:	f023 0310 	bic.w	r3, r3, #16
 800bd7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bd7e:	4b24      	ldr	r3, [pc, #144]	; (800be10 <RCCEx_PLL2_Config+0x15c>)
 800bd80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bd82:	4b24      	ldr	r3, [pc, #144]	; (800be14 <RCCEx_PLL2_Config+0x160>)
 800bd84:	4013      	ands	r3, r2
 800bd86:	687a      	ldr	r2, [r7, #4]
 800bd88:	69d2      	ldr	r2, [r2, #28]
 800bd8a:	00d2      	lsls	r2, r2, #3
 800bd8c:	4920      	ldr	r1, [pc, #128]	; (800be10 <RCCEx_PLL2_Config+0x15c>)
 800bd8e:	4313      	orrs	r3, r2
 800bd90:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bd92:	4b1f      	ldr	r3, [pc, #124]	; (800be10 <RCCEx_PLL2_Config+0x15c>)
 800bd94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd96:	4a1e      	ldr	r2, [pc, #120]	; (800be10 <RCCEx_PLL2_Config+0x15c>)
 800bd98:	f043 0310 	orr.w	r3, r3, #16
 800bd9c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d106      	bne.n	800bdb2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bda4:	4b1a      	ldr	r3, [pc, #104]	; (800be10 <RCCEx_PLL2_Config+0x15c>)
 800bda6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bda8:	4a19      	ldr	r2, [pc, #100]	; (800be10 <RCCEx_PLL2_Config+0x15c>)
 800bdaa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bdae:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bdb0:	e00f      	b.n	800bdd2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	2b01      	cmp	r3, #1
 800bdb6:	d106      	bne.n	800bdc6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bdb8:	4b15      	ldr	r3, [pc, #84]	; (800be10 <RCCEx_PLL2_Config+0x15c>)
 800bdba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdbc:	4a14      	ldr	r2, [pc, #80]	; (800be10 <RCCEx_PLL2_Config+0x15c>)
 800bdbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bdc2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bdc4:	e005      	b.n	800bdd2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bdc6:	4b12      	ldr	r3, [pc, #72]	; (800be10 <RCCEx_PLL2_Config+0x15c>)
 800bdc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdca:	4a11      	ldr	r2, [pc, #68]	; (800be10 <RCCEx_PLL2_Config+0x15c>)
 800bdcc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bdd0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bdd2:	4b0f      	ldr	r3, [pc, #60]	; (800be10 <RCCEx_PLL2_Config+0x15c>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	4a0e      	ldr	r2, [pc, #56]	; (800be10 <RCCEx_PLL2_Config+0x15c>)
 800bdd8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bddc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bdde:	f7f7 fa29 	bl	8003234 <HAL_GetTick>
 800bde2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bde4:	e008      	b.n	800bdf8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bde6:	f7f7 fa25 	bl	8003234 <HAL_GetTick>
 800bdea:	4602      	mov	r2, r0
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	1ad3      	subs	r3, r2, r3
 800bdf0:	2b02      	cmp	r3, #2
 800bdf2:	d901      	bls.n	800bdf8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bdf4:	2303      	movs	r3, #3
 800bdf6:	e006      	b.n	800be06 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bdf8:	4b05      	ldr	r3, [pc, #20]	; (800be10 <RCCEx_PLL2_Config+0x15c>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be00:	2b00      	cmp	r3, #0
 800be02:	d0f0      	beq.n	800bde6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800be04:	7bfb      	ldrb	r3, [r7, #15]
}
 800be06:	4618      	mov	r0, r3
 800be08:	3710      	adds	r7, #16
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}
 800be0e:	bf00      	nop
 800be10:	58024400 	.word	0x58024400
 800be14:	ffff0007 	.word	0xffff0007

0800be18 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b084      	sub	sp, #16
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
 800be20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800be22:	2300      	movs	r3, #0
 800be24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800be26:	4b53      	ldr	r3, [pc, #332]	; (800bf74 <RCCEx_PLL3_Config+0x15c>)
 800be28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be2a:	f003 0303 	and.w	r3, r3, #3
 800be2e:	2b03      	cmp	r3, #3
 800be30:	d101      	bne.n	800be36 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800be32:	2301      	movs	r3, #1
 800be34:	e099      	b.n	800bf6a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800be36:	4b4f      	ldr	r3, [pc, #316]	; (800bf74 <RCCEx_PLL3_Config+0x15c>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	4a4e      	ldr	r2, [pc, #312]	; (800bf74 <RCCEx_PLL3_Config+0x15c>)
 800be3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800be40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800be42:	f7f7 f9f7 	bl	8003234 <HAL_GetTick>
 800be46:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800be48:	e008      	b.n	800be5c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800be4a:	f7f7 f9f3 	bl	8003234 <HAL_GetTick>
 800be4e:	4602      	mov	r2, r0
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	1ad3      	subs	r3, r2, r3
 800be54:	2b02      	cmp	r3, #2
 800be56:	d901      	bls.n	800be5c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800be58:	2303      	movs	r3, #3
 800be5a:	e086      	b.n	800bf6a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800be5c:	4b45      	ldr	r3, [pc, #276]	; (800bf74 <RCCEx_PLL3_Config+0x15c>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be64:	2b00      	cmp	r3, #0
 800be66:	d1f0      	bne.n	800be4a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800be68:	4b42      	ldr	r3, [pc, #264]	; (800bf74 <RCCEx_PLL3_Config+0x15c>)
 800be6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be6c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	051b      	lsls	r3, r3, #20
 800be76:	493f      	ldr	r1, [pc, #252]	; (800bf74 <RCCEx_PLL3_Config+0x15c>)
 800be78:	4313      	orrs	r3, r2
 800be7a:	628b      	str	r3, [r1, #40]	; 0x28
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	685b      	ldr	r3, [r3, #4]
 800be80:	3b01      	subs	r3, #1
 800be82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	689b      	ldr	r3, [r3, #8]
 800be8a:	3b01      	subs	r3, #1
 800be8c:	025b      	lsls	r3, r3, #9
 800be8e:	b29b      	uxth	r3, r3
 800be90:	431a      	orrs	r2, r3
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	68db      	ldr	r3, [r3, #12]
 800be96:	3b01      	subs	r3, #1
 800be98:	041b      	lsls	r3, r3, #16
 800be9a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800be9e:	431a      	orrs	r2, r3
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	691b      	ldr	r3, [r3, #16]
 800bea4:	3b01      	subs	r3, #1
 800bea6:	061b      	lsls	r3, r3, #24
 800bea8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800beac:	4931      	ldr	r1, [pc, #196]	; (800bf74 <RCCEx_PLL3_Config+0x15c>)
 800beae:	4313      	orrs	r3, r2
 800beb0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800beb2:	4b30      	ldr	r3, [pc, #192]	; (800bf74 <RCCEx_PLL3_Config+0x15c>)
 800beb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beb6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	695b      	ldr	r3, [r3, #20]
 800bebe:	492d      	ldr	r1, [pc, #180]	; (800bf74 <RCCEx_PLL3_Config+0x15c>)
 800bec0:	4313      	orrs	r3, r2
 800bec2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bec4:	4b2b      	ldr	r3, [pc, #172]	; (800bf74 <RCCEx_PLL3_Config+0x15c>)
 800bec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bec8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	699b      	ldr	r3, [r3, #24]
 800bed0:	4928      	ldr	r1, [pc, #160]	; (800bf74 <RCCEx_PLL3_Config+0x15c>)
 800bed2:	4313      	orrs	r3, r2
 800bed4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bed6:	4b27      	ldr	r3, [pc, #156]	; (800bf74 <RCCEx_PLL3_Config+0x15c>)
 800bed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beda:	4a26      	ldr	r2, [pc, #152]	; (800bf74 <RCCEx_PLL3_Config+0x15c>)
 800bedc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bee0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bee2:	4b24      	ldr	r3, [pc, #144]	; (800bf74 <RCCEx_PLL3_Config+0x15c>)
 800bee4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bee6:	4b24      	ldr	r3, [pc, #144]	; (800bf78 <RCCEx_PLL3_Config+0x160>)
 800bee8:	4013      	ands	r3, r2
 800beea:	687a      	ldr	r2, [r7, #4]
 800beec:	69d2      	ldr	r2, [r2, #28]
 800beee:	00d2      	lsls	r2, r2, #3
 800bef0:	4920      	ldr	r1, [pc, #128]	; (800bf74 <RCCEx_PLL3_Config+0x15c>)
 800bef2:	4313      	orrs	r3, r2
 800bef4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bef6:	4b1f      	ldr	r3, [pc, #124]	; (800bf74 <RCCEx_PLL3_Config+0x15c>)
 800bef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800befa:	4a1e      	ldr	r2, [pc, #120]	; (800bf74 <RCCEx_PLL3_Config+0x15c>)
 800befc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bf00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d106      	bne.n	800bf16 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bf08:	4b1a      	ldr	r3, [pc, #104]	; (800bf74 <RCCEx_PLL3_Config+0x15c>)
 800bf0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf0c:	4a19      	ldr	r2, [pc, #100]	; (800bf74 <RCCEx_PLL3_Config+0x15c>)
 800bf0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bf12:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bf14:	e00f      	b.n	800bf36 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	2b01      	cmp	r3, #1
 800bf1a:	d106      	bne.n	800bf2a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bf1c:	4b15      	ldr	r3, [pc, #84]	; (800bf74 <RCCEx_PLL3_Config+0x15c>)
 800bf1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf20:	4a14      	ldr	r2, [pc, #80]	; (800bf74 <RCCEx_PLL3_Config+0x15c>)
 800bf22:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bf26:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bf28:	e005      	b.n	800bf36 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bf2a:	4b12      	ldr	r3, [pc, #72]	; (800bf74 <RCCEx_PLL3_Config+0x15c>)
 800bf2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf2e:	4a11      	ldr	r2, [pc, #68]	; (800bf74 <RCCEx_PLL3_Config+0x15c>)
 800bf30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bf34:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bf36:	4b0f      	ldr	r3, [pc, #60]	; (800bf74 <RCCEx_PLL3_Config+0x15c>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	4a0e      	ldr	r2, [pc, #56]	; (800bf74 <RCCEx_PLL3_Config+0x15c>)
 800bf3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf42:	f7f7 f977 	bl	8003234 <HAL_GetTick>
 800bf46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bf48:	e008      	b.n	800bf5c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bf4a:	f7f7 f973 	bl	8003234 <HAL_GetTick>
 800bf4e:	4602      	mov	r2, r0
 800bf50:	68bb      	ldr	r3, [r7, #8]
 800bf52:	1ad3      	subs	r3, r2, r3
 800bf54:	2b02      	cmp	r3, #2
 800bf56:	d901      	bls.n	800bf5c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bf58:	2303      	movs	r3, #3
 800bf5a:	e006      	b.n	800bf6a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bf5c:	4b05      	ldr	r3, [pc, #20]	; (800bf74 <RCCEx_PLL3_Config+0x15c>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d0f0      	beq.n	800bf4a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bf68:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3710      	adds	r7, #16
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}
 800bf72:	bf00      	nop
 800bf74:	58024400 	.word	0x58024400
 800bf78:	ffff0007 	.word	0xffff0007

0800bf7c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b08a      	sub	sp, #40	; 0x28
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d101      	bne.n	800bf8e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	e075      	b.n	800c07a <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bf94:	b2db      	uxtb	r3, r3
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d105      	bne.n	800bfa6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f7f6 fab3 	bl	800250c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2204      	movs	r2, #4
 800bfaa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f000 f868 	bl	800c084 <HAL_SD_InitCard>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d001      	beq.n	800bfbe <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800bfba:	2301      	movs	r3, #1
 800bfbc:	e05d      	b.n	800c07a <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800bfbe:	f107 0308 	add.w	r3, r7, #8
 800bfc2:	4619      	mov	r1, r3
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	f000 fdaf 	bl	800cb28 <HAL_SD_GetCardStatus>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d001      	beq.n	800bfd4 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800bfd0:	2301      	movs	r3, #1
 800bfd2:	e052      	b.n	800c07a <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800bfd4:	7e3b      	ldrb	r3, [r7, #24]
 800bfd6:	b2db      	uxtb	r3, r3
 800bfd8:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800bfda:	7e7b      	ldrb	r3, [r7, #25]
 800bfdc:	b2db      	uxtb	r3, r3
 800bfde:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfe4:	2b01      	cmp	r3, #1
 800bfe6:	d10a      	bne.n	800bffe <HAL_SD_Init+0x82>
 800bfe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d102      	bne.n	800bff4 <HAL_SD_Init+0x78>
 800bfee:	6a3b      	ldr	r3, [r7, #32]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d004      	beq.n	800bffe <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bffa:	659a      	str	r2, [r3, #88]	; 0x58
 800bffc:	e00b      	b.n	800c016 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c002:	2b01      	cmp	r3, #1
 800c004:	d104      	bne.n	800c010 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c00c:	659a      	str	r2, [r3, #88]	; 0x58
 800c00e:	e002      	b.n	800c016 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2200      	movs	r2, #0
 800c014:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	68db      	ldr	r3, [r3, #12]
 800c01a:	4619      	mov	r1, r3
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f000 fe6d 	bl	800ccfc <HAL_SD_ConfigWideBusOperation>
 800c022:	4603      	mov	r3, r0
 800c024:	2b00      	cmp	r3, #0
 800c026:	d001      	beq.n	800c02c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800c028:	2301      	movs	r3, #1
 800c02a:	e026      	b.n	800c07a <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800c02c:	f7f7 f902 	bl	8003234 <HAL_GetTick>
 800c030:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c032:	e011      	b.n	800c058 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c034:	f7f7 f8fe 	bl	8003234 <HAL_GetTick>
 800c038:	4602      	mov	r2, r0
 800c03a:	69fb      	ldr	r3, [r7, #28]
 800c03c:	1ad3      	subs	r3, r2, r3
 800c03e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c042:	d109      	bne.n	800c058 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c04a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2201      	movs	r2, #1
 800c050:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800c054:	2303      	movs	r3, #3
 800c056:	e010      	b.n	800c07a <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f000 ff61 	bl	800cf20 <HAL_SD_GetCardState>
 800c05e:	4603      	mov	r3, r0
 800c060:	2b04      	cmp	r3, #4
 800c062:	d1e7      	bne.n	800c034 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	2200      	movs	r2, #0
 800c068:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2200      	movs	r2, #0
 800c06e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2201      	movs	r2, #1
 800c074:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800c078:	2300      	movs	r3, #0
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3728      	adds	r7, #40	; 0x28
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}
	...

0800c084 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c084:	b590      	push	{r4, r7, lr}
 800c086:	b08d      	sub	sp, #52	; 0x34
 800c088:	af02      	add	r7, sp, #8
 800c08a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c08c:	2300      	movs	r3, #0
 800c08e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c090:	2300      	movs	r3, #0
 800c092:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800c094:	2300      	movs	r3, #0
 800c096:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c098:	2300      	movs	r3, #0
 800c09a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800c09c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800c0a0:	f04f 0100 	mov.w	r1, #0
 800c0a4:	f7fe fd24 	bl	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq>
 800c0a8:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800c0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d109      	bne.n	800c0c4 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2201      	movs	r2, #1
 800c0b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c0be:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	e070      	b.n	800c1a6 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800c0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c6:	0a1b      	lsrs	r3, r3, #8
 800c0c8:	4a39      	ldr	r2, [pc, #228]	; (800c1b0 <HAL_SD_InitCard+0x12c>)
 800c0ca:	fba2 2303 	umull	r2, r3, r2, r3
 800c0ce:	091b      	lsrs	r3, r3, #4
 800c0d0:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681c      	ldr	r4, [r3, #0]
 800c0d6:	466a      	mov	r2, sp
 800c0d8:	f107 0318 	add.w	r3, r7, #24
 800c0dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c0e0:	e882 0003 	stmia.w	r2, {r0, r1}
 800c0e4:	f107 030c 	add.w	r3, r7, #12
 800c0e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c0ea:	4620      	mov	r0, r4
 800c0ec:	f004 fb52 	bl	8010794 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f004 fb95 	bl	8010824 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800c0fa:	69fb      	ldr	r3, [r7, #28]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d005      	beq.n	800c10c <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800c100:	69fb      	ldr	r3, [r7, #28]
 800c102:	005b      	lsls	r3, r3, #1
 800c104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c106:	fbb2 f3f3 	udiv	r3, r2, r3
 800c10a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800c10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d007      	beq.n	800c122 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800c112:	4a28      	ldr	r2, [pc, #160]	; (800c1b4 <HAL_SD_InitCard+0x130>)
 800c114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c116:	fbb2 f3f3 	udiv	r3, r2, r3
 800c11a:	3301      	adds	r3, #1
 800c11c:	4618      	mov	r0, r3
 800c11e:	f7f7 f895 	bl	800324c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f000 ffea 	bl	800d0fc <SD_PowerON>
 800c128:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c12a:	6a3b      	ldr	r3, [r7, #32]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d00b      	beq.n	800c148 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2201      	movs	r2, #1
 800c134:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c13c:	6a3b      	ldr	r3, [r7, #32]
 800c13e:	431a      	orrs	r2, r3
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c144:	2301      	movs	r3, #1
 800c146:	e02e      	b.n	800c1a6 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f000 ff09 	bl	800cf60 <SD_InitCard>
 800c14e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c150:	6a3b      	ldr	r3, [r7, #32]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d00b      	beq.n	800c16e <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2201      	movs	r2, #1
 800c15a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c162:	6a3b      	ldr	r3, [r7, #32]
 800c164:	431a      	orrs	r2, r3
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c16a:	2301      	movs	r3, #1
 800c16c:	e01b      	b.n	800c1a6 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c176:	4618      	mov	r0, r3
 800c178:	f004 fbea 	bl	8010950 <SDMMC_CmdBlockLength>
 800c17c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c17e:	6a3b      	ldr	r3, [r7, #32]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d00f      	beq.n	800c1a4 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	4a0b      	ldr	r2, [pc, #44]	; (800c1b8 <HAL_SD_InitCard+0x134>)
 800c18a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c190:	6a3b      	ldr	r3, [r7, #32]
 800c192:	431a      	orrs	r2, r3
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2201      	movs	r2, #1
 800c19c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	e000      	b.n	800c1a6 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800c1a4:	2300      	movs	r3, #0
}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	372c      	adds	r7, #44	; 0x2c
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd90      	pop	{r4, r7, pc}
 800c1ae:	bf00      	nop
 800c1b0:	014f8b59 	.word	0x014f8b59
 800c1b4:	00012110 	.word	0x00012110
 800c1b8:	1fe00fff 	.word	0x1fe00fff

0800c1bc <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b08c      	sub	sp, #48	; 0x30
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	60f8      	str	r0, [r7, #12]
 800c1c4:	60b9      	str	r1, [r7, #8]
 800c1c6:	607a      	str	r2, [r7, #4]
 800c1c8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d107      	bne.n	800c1e4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1d8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	e08d      	b.n	800c300 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c1ea:	b2db      	uxtb	r3, r3
 800c1ec:	2b01      	cmp	r3, #1
 800c1ee:	f040 8086 	bne.w	800c2fe <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c1f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	441a      	add	r2, r3
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c202:	429a      	cmp	r2, r3
 800c204:	d907      	bls.n	800c216 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c20a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800c212:	2301      	movs	r3, #1
 800c214:	e074      	b.n	800c300 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	2203      	movs	r2, #3
 800c21a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	2200      	movs	r2, #0
 800c224:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	68ba      	ldr	r2, [r7, #8]
 800c22a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	025a      	lsls	r2, r3, #9
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c238:	2b01      	cmp	r3, #1
 800c23a:	d002      	beq.n	800c242 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800c23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c23e:	025b      	lsls	r3, r3, #9
 800c240:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c242:	f04f 33ff 	mov.w	r3, #4294967295
 800c246:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	025b      	lsls	r3, r3, #9
 800c24c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c24e:	2390      	movs	r3, #144	; 0x90
 800c250:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c252:	2302      	movs	r3, #2
 800c254:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c256:	2300      	movs	r3, #0
 800c258:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c25a:	2300      	movs	r3, #0
 800c25c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	f107 0210 	add.w	r2, r7, #16
 800c266:	4611      	mov	r1, r2
 800c268:	4618      	mov	r0, r3
 800c26a:	f004 fb45 	bl	80108f8 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	68da      	ldr	r2, [r3, #12]
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c27c:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	68ba      	ldr	r2, [r7, #8]
 800c284:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	2201      	movs	r2, #1
 800c28c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	2b01      	cmp	r3, #1
 800c292:	d90a      	bls.n	800c2aa <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	2282      	movs	r2, #130	; 0x82
 800c298:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f004 fb9b 	bl	80109dc <SDMMC_CmdReadMultiBlock>
 800c2a6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c2a8:	e009      	b.n	800c2be <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	2281      	movs	r2, #129	; 0x81
 800c2ae:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f004 fb6d 	bl	8010996 <SDMMC_CmdReadSingleBlock>
 800c2bc:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d012      	beq.n	800c2ea <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	4a0f      	ldr	r2, [pc, #60]	; (800c308 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800c2ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2d2:	431a      	orrs	r2, r3
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	2201      	movs	r2, #1
 800c2dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	e00a      	b.n	800c300 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800c2f8:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	e000      	b.n	800c300 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c2fe:	2302      	movs	r3, #2
  }
}
 800c300:	4618      	mov	r0, r3
 800c302:	3730      	adds	r7, #48	; 0x30
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}
 800c308:	1fe00fff 	.word	0x1fe00fff

0800c30c <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b08c      	sub	sp, #48	; 0x30
 800c310:	af00      	add	r7, sp, #0
 800c312:	60f8      	str	r0, [r7, #12]
 800c314:	60b9      	str	r1, [r7, #8]
 800c316:	607a      	str	r2, [r7, #4]
 800c318:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d107      	bne.n	800c334 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c328:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c330:	2301      	movs	r3, #1
 800c332:	e08d      	b.n	800c450 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c33a:	b2db      	uxtb	r3, r3
 800c33c:	2b01      	cmp	r3, #1
 800c33e:	f040 8086 	bne.w	800c44e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	2200      	movs	r2, #0
 800c346:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c348:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	441a      	add	r2, r3
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c352:	429a      	cmp	r2, r3
 800c354:	d907      	bls.n	800c366 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c35a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800c362:	2301      	movs	r3, #1
 800c364:	e074      	b.n	800c450 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	2203      	movs	r2, #3
 800c36a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	2200      	movs	r2, #0
 800c374:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	68ba      	ldr	r2, [r7, #8]
 800c37a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	025a      	lsls	r2, r3, #9
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c388:	2b01      	cmp	r3, #1
 800c38a:	d002      	beq.n	800c392 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800c38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c38e:	025b      	lsls	r3, r3, #9
 800c390:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c392:	f04f 33ff 	mov.w	r3, #4294967295
 800c396:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	025b      	lsls	r3, r3, #9
 800c39c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c39e:	2390      	movs	r3, #144	; 0x90
 800c3a0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	f107 0210 	add.w	r2, r7, #16
 800c3b6:	4611      	mov	r1, r2
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f004 fa9d 	bl	80108f8 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	68da      	ldr	r2, [r3, #12]
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c3cc:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	68ba      	ldr	r2, [r7, #8]
 800c3d4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	2201      	movs	r2, #1
 800c3dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	2b01      	cmp	r3, #1
 800c3e2:	d90a      	bls.n	800c3fa <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	22a0      	movs	r2, #160	; 0xa0
 800c3e8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f004 fb39 	bl	8010a68 <SDMMC_CmdWriteMultiBlock>
 800c3f6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c3f8:	e009      	b.n	800c40e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	2290      	movs	r2, #144	; 0x90
 800c3fe:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c406:	4618      	mov	r0, r3
 800c408:	f004 fb0b 	bl	8010a22 <SDMMC_CmdWriteSingleBlock>
 800c40c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c410:	2b00      	cmp	r3, #0
 800c412:	d012      	beq.n	800c43a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	4a0f      	ldr	r2, [pc, #60]	; (800c458 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800c41a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c422:	431a      	orrs	r2, r3
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	2201      	movs	r2, #1
 800c42c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	2200      	movs	r2, #0
 800c434:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800c436:	2301      	movs	r3, #1
 800c438:	e00a      	b.n	800c450 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800c448:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800c44a:	2300      	movs	r3, #0
 800c44c:	e000      	b.n	800c450 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800c44e:	2302      	movs	r3, #2
  }
}
 800c450:	4618      	mov	r0, r3
 800c452:	3730      	adds	r7, #48	; 0x30
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}
 800c458:	1fe00fff 	.word	0x1fe00fff

0800c45c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b084      	sub	sp, #16
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c468:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c470:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c474:	2b00      	cmp	r3, #0
 800c476:	d008      	beq.n	800c48a <HAL_SD_IRQHandler+0x2e>
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	f003 0308 	and.w	r3, r3, #8
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d003      	beq.n	800c48a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f001 f926 	bl	800d6d4 <SD_Read_IT>
 800c488:	e19a      	b.n	800c7c0 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c494:	2b00      	cmp	r3, #0
 800c496:	f000 80ac 	beq.w	800c5f2 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c4a2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681a      	ldr	r2, [r3, #0]
 800c4ae:	4b59      	ldr	r3, [pc, #356]	; (800c614 <HAL_SD_IRQHandler+0x1b8>)
 800c4b0:	400b      	ands	r3, r1
 800c4b2:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c4c2:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	68da      	ldr	r2, [r3, #12]
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c4d2:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	f003 0308 	and.w	r3, r3, #8
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d038      	beq.n	800c550 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	f003 0302 	and.w	r3, r3, #2
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d104      	bne.n	800c4f2 <HAL_SD_IRQHandler+0x96>
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	f003 0320 	and.w	r3, r3, #32
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d011      	beq.n	800c516 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f004 fada 	bl	8010ab0 <SDMMC_CmdStopTransfer>
 800c4fc:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d008      	beq.n	800c516 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	431a      	orrs	r2, r3
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f000 f95b 	bl	800c7cc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	4a3f      	ldr	r2, [pc, #252]	; (800c618 <HAL_SD_IRQHandler+0x1bc>)
 800c51c:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2201      	movs	r2, #1
 800c522:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2200      	movs	r2, #0
 800c52a:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	f003 0301 	and.w	r3, r3, #1
 800c532:	2b00      	cmp	r3, #0
 800c534:	d104      	bne.n	800c540 <HAL_SD_IRQHandler+0xe4>
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	f003 0302 	and.w	r3, r3, #2
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d003      	beq.n	800c548 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	f006 fadb 	bl	8012afc <HAL_SD_RxCpltCallback>
 800c546:	e13b      	b.n	800c7c0 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f006 facd 	bl	8012ae8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c54e:	e137      	b.n	800c7c0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c556:	2b00      	cmp	r3, #0
 800c558:	f000 8132 	beq.w	800c7c0 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	2200      	movs	r2, #0
 800c562:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	2200      	movs	r2, #0
 800c56a:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	2200      	movs	r2, #0
 800c572:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	f003 0302 	and.w	r3, r3, #2
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d104      	bne.n	800c588 <HAL_SD_IRQHandler+0x12c>
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	f003 0320 	and.w	r3, r3, #32
 800c584:	2b00      	cmp	r3, #0
 800c586:	d011      	beq.n	800c5ac <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	4618      	mov	r0, r3
 800c58e:	f004 fa8f 	bl	8010ab0 <SDMMC_CmdStopTransfer>
 800c592:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d008      	beq.n	800c5ac <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	431a      	orrs	r2, r3
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f000 f910 	bl	800c7cc <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	f003 0310 	and.w	r3, r3, #16
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d104      	bne.n	800c5ce <HAL_SD_IRQHandler+0x172>
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	f003 0320 	and.w	r3, r3, #32
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d002      	beq.n	800c5d4 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f006 fa8a 	bl	8012ae8 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	f003 0301 	and.w	r3, r3, #1
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d105      	bne.n	800c5ea <HAL_SD_IRQHandler+0x18e>
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	f003 0302 	and.w	r3, r3, #2
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	f000 80eb 	beq.w	800c7c0 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f006 fa86 	bl	8012afc <HAL_SD_RxCpltCallback>
}
 800c5f0:	e0e6      	b.n	800c7c0 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d00d      	beq.n	800c61c <HAL_SD_IRQHandler+0x1c0>
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	f003 0308 	and.w	r3, r3, #8
 800c606:	2b00      	cmp	r3, #0
 800c608:	d008      	beq.n	800c61c <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f001 f8a8 	bl	800d760 <SD_Write_IT>
 800c610:	e0d6      	b.n	800c7c0 <HAL_SD_IRQHandler+0x364>
 800c612:	bf00      	nop
 800c614:	ffff3ec5 	.word	0xffff3ec5
 800c618:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c622:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800c626:	2b00      	cmp	r3, #0
 800c628:	f000 809d 	beq.w	800c766 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c632:	f003 0302 	and.w	r3, r3, #2
 800c636:	2b00      	cmp	r3, #0
 800c638:	d005      	beq.n	800c646 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c63e:	f043 0202 	orr.w	r2, r3, #2
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c64c:	f003 0308 	and.w	r3, r3, #8
 800c650:	2b00      	cmp	r3, #0
 800c652:	d005      	beq.n	800c660 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c658:	f043 0208 	orr.w	r2, r3, #8
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c666:	f003 0320 	and.w	r3, r3, #32
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d005      	beq.n	800c67a <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c672:	f043 0220 	orr.w	r2, r3, #32
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c680:	f003 0310 	and.w	r3, r3, #16
 800c684:	2b00      	cmp	r3, #0
 800c686:	d005      	beq.n	800c694 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c68c:	f043 0210 	orr.w	r2, r3, #16
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	4a4b      	ldr	r2, [pc, #300]	; (800c7c8 <HAL_SD_IRQHandler+0x36c>)
 800c69a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800c6aa:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	68da      	ldr	r2, [r3, #12]
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c6ba:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c6ca:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	68da      	ldr	r2, [r3, #12]
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c6da:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f004 f9e5 	bl	8010ab0 <SDMMC_CmdStopTransfer>
 800c6e6:	4602      	mov	r2, r0
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6ec:	431a      	orrs	r2, r3
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	68da      	ldr	r2, [r3, #12]
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c700:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c70a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	f003 0308 	and.w	r3, r3, #8
 800c712:	2b00      	cmp	r3, #0
 800c714:	d00a      	beq.n	800c72c <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	2201      	movs	r2, #1
 800c71a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2200      	movs	r2, #0
 800c722:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f000 f851 	bl	800c7cc <HAL_SD_ErrorCallback>
}
 800c72a:	e049      	b.n	800c7c0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c732:	2b00      	cmp	r3, #0
 800c734:	d044      	beq.n	800c7c0 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d040      	beq.n	800c7c0 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c74c:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	2200      	movs	r2, #0
 800c754:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2201      	movs	r2, #1
 800c75a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f000 f834 	bl	800c7cc <HAL_SD_ErrorCallback>
}
 800c764:	e02c      	b.n	800c7c0 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c76c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c770:	2b00      	cmp	r3, #0
 800c772:	d025      	beq.n	800c7c0 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c77c:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c784:	f003 0304 	and.w	r3, r3, #4
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d10c      	bne.n	800c7a6 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	f003 0320 	and.w	r3, r3, #32
 800c792:	2b00      	cmp	r3, #0
 800c794:	d003      	beq.n	800c79e <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f001 f84a 	bl	800d830 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800c79c:	e010      	b.n	800c7c0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f001 f832 	bl	800d808 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800c7a4:	e00c      	b.n	800c7c0 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	f003 0320 	and.w	r3, r3, #32
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d003      	beq.n	800c7b8 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f001 f833 	bl	800d81c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800c7b6:	e003      	b.n	800c7c0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f001 f81b 	bl	800d7f4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800c7be:	e7ff      	b.n	800c7c0 <HAL_SD_IRQHandler+0x364>
 800c7c0:	bf00      	nop
 800c7c2:	3710      	adds	r7, #16
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}
 800c7c8:	18000f3a 	.word	0x18000f3a

0800c7cc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800c7cc:	b480      	push	{r7}
 800c7ce:	b083      	sub	sp, #12
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800c7d4:	bf00      	nop
 800c7d6:	370c      	adds	r7, #12
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7de:	4770      	bx	lr

0800c7e0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	b083      	sub	sp, #12
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
 800c7e8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c7ee:	0f9b      	lsrs	r3, r3, #30
 800c7f0:	b2da      	uxtb	r2, r3
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c7fa:	0e9b      	lsrs	r3, r3, #26
 800c7fc:	b2db      	uxtb	r3, r3
 800c7fe:	f003 030f 	and.w	r3, r3, #15
 800c802:	b2da      	uxtb	r2, r3
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c80c:	0e1b      	lsrs	r3, r3, #24
 800c80e:	b2db      	uxtb	r3, r3
 800c810:	f003 0303 	and.w	r3, r3, #3
 800c814:	b2da      	uxtb	r2, r3
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c81e:	0c1b      	lsrs	r3, r3, #16
 800c820:	b2da      	uxtb	r2, r3
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c82a:	0a1b      	lsrs	r3, r3, #8
 800c82c:	b2da      	uxtb	r2, r3
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c836:	b2da      	uxtb	r2, r3
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c840:	0d1b      	lsrs	r3, r3, #20
 800c842:	b29a      	uxth	r2, r3
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c84c:	0c1b      	lsrs	r3, r3, #16
 800c84e:	b2db      	uxtb	r3, r3
 800c850:	f003 030f 	and.w	r3, r3, #15
 800c854:	b2da      	uxtb	r2, r3
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c85e:	0bdb      	lsrs	r3, r3, #15
 800c860:	b2db      	uxtb	r3, r3
 800c862:	f003 0301 	and.w	r3, r3, #1
 800c866:	b2da      	uxtb	r2, r3
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c870:	0b9b      	lsrs	r3, r3, #14
 800c872:	b2db      	uxtb	r3, r3
 800c874:	f003 0301 	and.w	r3, r3, #1
 800c878:	b2da      	uxtb	r2, r3
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c882:	0b5b      	lsrs	r3, r3, #13
 800c884:	b2db      	uxtb	r3, r3
 800c886:	f003 0301 	and.w	r3, r3, #1
 800c88a:	b2da      	uxtb	r2, r3
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c894:	0b1b      	lsrs	r3, r3, #12
 800c896:	b2db      	uxtb	r3, r3
 800c898:	f003 0301 	and.w	r3, r3, #1
 800c89c:	b2da      	uxtb	r2, r3
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d163      	bne.n	800c978 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c8b4:	009a      	lsls	r2, r3, #2
 800c8b6:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c8ba:	4013      	ands	r3, r2
 800c8bc:	687a      	ldr	r2, [r7, #4]
 800c8be:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800c8c0:	0f92      	lsrs	r2, r2, #30
 800c8c2:	431a      	orrs	r2, r3
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c8cc:	0edb      	lsrs	r3, r3, #27
 800c8ce:	b2db      	uxtb	r3, r3
 800c8d0:	f003 0307 	and.w	r3, r3, #7
 800c8d4:	b2da      	uxtb	r2, r3
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c8de:	0e1b      	lsrs	r3, r3, #24
 800c8e0:	b2db      	uxtb	r3, r3
 800c8e2:	f003 0307 	and.w	r3, r3, #7
 800c8e6:	b2da      	uxtb	r2, r3
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c8f0:	0d5b      	lsrs	r3, r3, #21
 800c8f2:	b2db      	uxtb	r3, r3
 800c8f4:	f003 0307 	and.w	r3, r3, #7
 800c8f8:	b2da      	uxtb	r2, r3
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c902:	0c9b      	lsrs	r3, r3, #18
 800c904:	b2db      	uxtb	r3, r3
 800c906:	f003 0307 	and.w	r3, r3, #7
 800c90a:	b2da      	uxtb	r2, r3
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c914:	0bdb      	lsrs	r3, r3, #15
 800c916:	b2db      	uxtb	r3, r3
 800c918:	f003 0307 	and.w	r3, r3, #7
 800c91c:	b2da      	uxtb	r2, r3
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	691b      	ldr	r3, [r3, #16]
 800c926:	1c5a      	adds	r2, r3, #1
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	7e1b      	ldrb	r3, [r3, #24]
 800c930:	b2db      	uxtb	r3, r3
 800c932:	f003 0307 	and.w	r3, r3, #7
 800c936:	3302      	adds	r3, #2
 800c938:	2201      	movs	r2, #1
 800c93a:	fa02 f303 	lsl.w	r3, r2, r3
 800c93e:	687a      	ldr	r2, [r7, #4]
 800c940:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800c942:	fb03 f202 	mul.w	r2, r3, r2
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	7a1b      	ldrb	r3, [r3, #8]
 800c94e:	b2db      	uxtb	r3, r3
 800c950:	f003 030f 	and.w	r3, r3, #15
 800c954:	2201      	movs	r2, #1
 800c956:	409a      	lsls	r2, r3
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c960:	687a      	ldr	r2, [r7, #4]
 800c962:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800c964:	0a52      	lsrs	r2, r2, #9
 800c966:	fb03 f202 	mul.w	r2, r3, r2
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c974:	655a      	str	r2, [r3, #84]	; 0x54
 800c976:	e031      	b.n	800c9dc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c97c:	2b01      	cmp	r3, #1
 800c97e:	d11d      	bne.n	800c9bc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c984:	041b      	lsls	r3, r3, #16
 800c986:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c98e:	0c1b      	lsrs	r3, r3, #16
 800c990:	431a      	orrs	r2, r3
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	691b      	ldr	r3, [r3, #16]
 800c99a:	3301      	adds	r3, #1
 800c99c:	029a      	lsls	r2, r3, #10
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c9b0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	655a      	str	r2, [r3, #84]	; 0x54
 800c9ba:	e00f      	b.n	800c9dc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4a58      	ldr	r2, [pc, #352]	; (800cb24 <HAL_SD_GetCardCSD+0x344>)
 800c9c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	2201      	movs	r2, #1
 800c9d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800c9d8:	2301      	movs	r3, #1
 800c9da:	e09d      	b.n	800cb18 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9e0:	0b9b      	lsrs	r3, r3, #14
 800c9e2:	b2db      	uxtb	r3, r3
 800c9e4:	f003 0301 	and.w	r3, r3, #1
 800c9e8:	b2da      	uxtb	r2, r3
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9f2:	09db      	lsrs	r3, r3, #7
 800c9f4:	b2db      	uxtb	r3, r3
 800c9f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9fa:	b2da      	uxtb	r2, r3
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca04:	b2db      	uxtb	r3, r3
 800ca06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca0a:	b2da      	uxtb	r2, r3
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca14:	0fdb      	lsrs	r3, r3, #31
 800ca16:	b2da      	uxtb	r2, r3
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca20:	0f5b      	lsrs	r3, r3, #29
 800ca22:	b2db      	uxtb	r3, r3
 800ca24:	f003 0303 	and.w	r3, r3, #3
 800ca28:	b2da      	uxtb	r2, r3
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca32:	0e9b      	lsrs	r3, r3, #26
 800ca34:	b2db      	uxtb	r3, r3
 800ca36:	f003 0307 	and.w	r3, r3, #7
 800ca3a:	b2da      	uxtb	r2, r3
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca44:	0d9b      	lsrs	r3, r3, #22
 800ca46:	b2db      	uxtb	r3, r3
 800ca48:	f003 030f 	and.w	r3, r3, #15
 800ca4c:	b2da      	uxtb	r2, r3
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca56:	0d5b      	lsrs	r3, r3, #21
 800ca58:	b2db      	uxtb	r3, r3
 800ca5a:	f003 0301 	and.w	r3, r3, #1
 800ca5e:	b2da      	uxtb	r2, r3
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	2200      	movs	r2, #0
 800ca6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca72:	0c1b      	lsrs	r3, r3, #16
 800ca74:	b2db      	uxtb	r3, r3
 800ca76:	f003 0301 	and.w	r3, r3, #1
 800ca7a:	b2da      	uxtb	r2, r3
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca86:	0bdb      	lsrs	r3, r3, #15
 800ca88:	b2db      	uxtb	r3, r3
 800ca8a:	f003 0301 	and.w	r3, r3, #1
 800ca8e:	b2da      	uxtb	r2, r3
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca9a:	0b9b      	lsrs	r3, r3, #14
 800ca9c:	b2db      	uxtb	r3, r3
 800ca9e:	f003 0301 	and.w	r3, r3, #1
 800caa2:	b2da      	uxtb	r2, r3
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800caae:	0b5b      	lsrs	r3, r3, #13
 800cab0:	b2db      	uxtb	r3, r3
 800cab2:	f003 0301 	and.w	r3, r3, #1
 800cab6:	b2da      	uxtb	r2, r3
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cac2:	0b1b      	lsrs	r3, r3, #12
 800cac4:	b2db      	uxtb	r3, r3
 800cac6:	f003 0301 	and.w	r3, r3, #1
 800caca:	b2da      	uxtb	r2, r3
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cad6:	0a9b      	lsrs	r3, r3, #10
 800cad8:	b2db      	uxtb	r3, r3
 800cada:	f003 0303 	and.w	r3, r3, #3
 800cade:	b2da      	uxtb	r2, r3
 800cae0:	683b      	ldr	r3, [r7, #0]
 800cae2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800caea:	0a1b      	lsrs	r3, r3, #8
 800caec:	b2db      	uxtb	r3, r3
 800caee:	f003 0303 	and.w	r3, r3, #3
 800caf2:	b2da      	uxtb	r2, r3
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cafe:	085b      	lsrs	r3, r3, #1
 800cb00:	b2db      	uxtb	r3, r3
 800cb02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb06:	b2da      	uxtb	r2, r3
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	2201      	movs	r2, #1
 800cb12:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800cb16:	2300      	movs	r3, #0
}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	370c      	adds	r7, #12
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb22:	4770      	bx	lr
 800cb24:	1fe00fff 	.word	0x1fe00fff

0800cb28 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b094      	sub	sp, #80	; 0x50
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
 800cb30:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800cb32:	2300      	movs	r3, #0
 800cb34:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cb3e:	b2db      	uxtb	r3, r3
 800cb40:	2b03      	cmp	r3, #3
 800cb42:	d101      	bne.n	800cb48 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800cb44:	2301      	movs	r3, #1
 800cb46:	e0a7      	b.n	800cc98 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800cb48:	f107 0308 	add.w	r3, r7, #8
 800cb4c:	4619      	mov	r1, r3
 800cb4e:	6878      	ldr	r0, [r7, #4]
 800cb50:	f000 fb62 	bl	800d218 <SD_SendSDStatus>
 800cb54:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800cb56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d011      	beq.n	800cb80 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	4a4f      	ldr	r2, [pc, #316]	; (800cca0 <HAL_SD_GetCardStatus+0x178>)
 800cb62:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cb68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cb6a:	431a      	orrs	r2, r3
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2201      	movs	r2, #1
 800cb74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800cb78:	2301      	movs	r3, #1
 800cb7a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800cb7e:	e070      	b.n	800cc62 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	099b      	lsrs	r3, r3, #6
 800cb84:	b2db      	uxtb	r3, r3
 800cb86:	f003 0303 	and.w	r3, r3, #3
 800cb8a:	b2da      	uxtb	r2, r3
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800cb90:	68bb      	ldr	r3, [r7, #8]
 800cb92:	095b      	lsrs	r3, r3, #5
 800cb94:	b2db      	uxtb	r3, r3
 800cb96:	f003 0301 	and.w	r3, r3, #1
 800cb9a:	b2da      	uxtb	r2, r3
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800cba0:	68bb      	ldr	r3, [r7, #8]
 800cba2:	0a1b      	lsrs	r3, r3, #8
 800cba4:	b29b      	uxth	r3, r3
 800cba6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cbaa:	b29a      	uxth	r2, r3
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	0e1b      	lsrs	r3, r3, #24
 800cbb0:	b29b      	uxth	r3, r3
 800cbb2:	4313      	orrs	r3, r2
 800cbb4:	b29a      	uxth	r2, r3
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	061a      	lsls	r2, r3, #24
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	021b      	lsls	r3, r3, #8
 800cbc2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cbc6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	0a1b      	lsrs	r3, r3, #8
 800cbcc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800cbd0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	0e1b      	lsrs	r3, r3, #24
 800cbd6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800cbdc:	693b      	ldr	r3, [r7, #16]
 800cbde:	b2da      	uxtb	r2, r3
 800cbe0:	683b      	ldr	r3, [r7, #0]
 800cbe2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800cbe4:	693b      	ldr	r3, [r7, #16]
 800cbe6:	0a1b      	lsrs	r3, r3, #8
 800cbe8:	b2da      	uxtb	r2, r3
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800cbee:	693b      	ldr	r3, [r7, #16]
 800cbf0:	0d1b      	lsrs	r3, r3, #20
 800cbf2:	b2db      	uxtb	r3, r3
 800cbf4:	f003 030f 	and.w	r3, r3, #15
 800cbf8:	b2da      	uxtb	r2, r3
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800cbfe:	693b      	ldr	r3, [r7, #16]
 800cc00:	0c1b      	lsrs	r3, r3, #16
 800cc02:	b29b      	uxth	r3, r3
 800cc04:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800cc08:	b29a      	uxth	r2, r3
 800cc0a:	697b      	ldr	r3, [r7, #20]
 800cc0c:	b29b      	uxth	r3, r3
 800cc0e:	b2db      	uxtb	r3, r3
 800cc10:	b29b      	uxth	r3, r3
 800cc12:	4313      	orrs	r3, r2
 800cc14:	b29a      	uxth	r2, r3
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	0a9b      	lsrs	r3, r3, #10
 800cc1e:	b2db      	uxtb	r3, r3
 800cc20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc24:	b2da      	uxtb	r2, r3
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	0a1b      	lsrs	r3, r3, #8
 800cc2e:	b2db      	uxtb	r3, r3
 800cc30:	f003 0303 	and.w	r3, r3, #3
 800cc34:	b2da      	uxtb	r2, r3
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800cc3a:	697b      	ldr	r3, [r7, #20]
 800cc3c:	091b      	lsrs	r3, r3, #4
 800cc3e:	b2db      	uxtb	r3, r3
 800cc40:	f003 030f 	and.w	r3, r3, #15
 800cc44:	b2da      	uxtb	r2, r3
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	b2db      	uxtb	r3, r3
 800cc4e:	f003 030f 	and.w	r3, r3, #15
 800cc52:	b2da      	uxtb	r2, r3
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800cc58:	69bb      	ldr	r3, [r7, #24]
 800cc5a:	0e1b      	lsrs	r3, r3, #24
 800cc5c:	b2da      	uxtb	r2, r3
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f003 fe70 	bl	8010950 <SDMMC_CmdBlockLength>
 800cc70:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800cc72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d00d      	beq.n	800cc94 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	4a08      	ldr	r2, [pc, #32]	; (800cca0 <HAL_SD_GetCardStatus+0x178>)
 800cc7e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc84:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2201      	movs	r2, #1
 800cc8a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800cc8e:	2301      	movs	r3, #1
 800cc90:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800cc94:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	3750      	adds	r7, #80	; 0x50
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bd80      	pop	{r7, pc}
 800cca0:	1fe00fff 	.word	0x1fe00fff

0800cca4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800cca4:	b480      	push	{r7}
 800cca6:	b083      	sub	sp, #12
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
 800ccac:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ccd2:	683b      	ldr	r3, [r7, #0]
 800ccd4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800ccee:	2300      	movs	r3, #0
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	370c      	adds	r7, #12
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfa:	4770      	bx	lr

0800ccfc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800ccfc:	b590      	push	{r4, r7, lr}
 800ccfe:	b08d      	sub	sp, #52	; 0x34
 800cd00:	af02      	add	r7, sp, #8
 800cd02:	6078      	str	r0, [r7, #4]
 800cd04:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800cd06:	2300      	movs	r3, #0
 800cd08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2203      	movs	r2, #3
 800cd10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd18:	2b03      	cmp	r3, #3
 800cd1a:	d02e      	beq.n	800cd7a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cd22:	d106      	bne.n	800cd32 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd28:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	635a      	str	r2, [r3, #52]	; 0x34
 800cd30:	e029      	b.n	800cd86 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cd38:	d10a      	bne.n	800cd50 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	f000 fb64 	bl	800d408 <SD_WideBus_Enable>
 800cd40:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cd46:	6a3b      	ldr	r3, [r7, #32]
 800cd48:	431a      	orrs	r2, r3
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	635a      	str	r2, [r3, #52]	; 0x34
 800cd4e:	e01a      	b.n	800cd86 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d10a      	bne.n	800cd6c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800cd56:	6878      	ldr	r0, [r7, #4]
 800cd58:	f000 fba1 	bl	800d49e <SD_WideBus_Disable>
 800cd5c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cd62:	6a3b      	ldr	r3, [r7, #32]
 800cd64:	431a      	orrs	r2, r3
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	635a      	str	r2, [r3, #52]	; 0x34
 800cd6a:	e00c      	b.n	800cd86 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd70:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	635a      	str	r2, [r3, #52]	; 0x34
 800cd78:	e005      	b.n	800cd86 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd7e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d007      	beq.n	800cd9e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	4a5f      	ldr	r2, [pc, #380]	; (800cf10 <HAL_SD_ConfigWideBusOperation+0x214>)
 800cd94:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800cd96:	2301      	movs	r3, #1
 800cd98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cd9c:	e096      	b.n	800cecc <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800cd9e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800cda2:	f04f 0100 	mov.w	r1, #0
 800cda6:	f7fd fea3 	bl	800aaf0 <HAL_RCCEx_GetPeriphCLKFreq>
 800cdaa:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800cdac:	69fb      	ldr	r3, [r7, #28]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	f000 8083 	beq.w	800ceba <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	685b      	ldr	r3, [r3, #4]
 800cdb8:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	689b      	ldr	r3, [r3, #8]
 800cdbe:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	691b      	ldr	r3, [r3, #16]
 800cdc8:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	695a      	ldr	r2, [r3, #20]
 800cdce:	69fb      	ldr	r3, [r7, #28]
 800cdd0:	4950      	ldr	r1, [pc, #320]	; (800cf14 <HAL_SD_ConfigWideBusOperation+0x218>)
 800cdd2:	fba1 1303 	umull	r1, r3, r1, r3
 800cdd6:	0e1b      	lsrs	r3, r3, #24
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	d303      	bcc.n	800cde4 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	695b      	ldr	r3, [r3, #20]
 800cde0:	61bb      	str	r3, [r7, #24]
 800cde2:	e05a      	b.n	800ce9a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cde8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cdec:	d103      	bne.n	800cdf6 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	695b      	ldr	r3, [r3, #20]
 800cdf2:	61bb      	str	r3, [r7, #24]
 800cdf4:	e051      	b.n	800ce9a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cdfe:	d126      	bne.n	800ce4e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	695b      	ldr	r3, [r3, #20]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d10e      	bne.n	800ce26 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800ce08:	69fb      	ldr	r3, [r7, #28]
 800ce0a:	4a43      	ldr	r2, [pc, #268]	; (800cf18 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	d906      	bls.n	800ce1e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ce10:	69fb      	ldr	r3, [r7, #28]
 800ce12:	4a40      	ldr	r2, [pc, #256]	; (800cf14 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ce14:	fba2 2303 	umull	r2, r3, r2, r3
 800ce18:	0e5b      	lsrs	r3, r3, #25
 800ce1a:	61bb      	str	r3, [r7, #24]
 800ce1c:	e03d      	b.n	800ce9a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	695b      	ldr	r3, [r3, #20]
 800ce22:	61bb      	str	r3, [r7, #24]
 800ce24:	e039      	b.n	800ce9a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	695b      	ldr	r3, [r3, #20]
 800ce2a:	005b      	lsls	r3, r3, #1
 800ce2c:	69fa      	ldr	r2, [r7, #28]
 800ce2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce32:	4a39      	ldr	r2, [pc, #228]	; (800cf18 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ce34:	4293      	cmp	r3, r2
 800ce36:	d906      	bls.n	800ce46 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ce38:	69fb      	ldr	r3, [r7, #28]
 800ce3a:	4a36      	ldr	r2, [pc, #216]	; (800cf14 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ce3c:	fba2 2303 	umull	r2, r3, r2, r3
 800ce40:	0e5b      	lsrs	r3, r3, #25
 800ce42:	61bb      	str	r3, [r7, #24]
 800ce44:	e029      	b.n	800ce9a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	695b      	ldr	r3, [r3, #20]
 800ce4a:	61bb      	str	r3, [r7, #24]
 800ce4c:	e025      	b.n	800ce9a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	695b      	ldr	r3, [r3, #20]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d10e      	bne.n	800ce74 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800ce56:	69fb      	ldr	r3, [r7, #28]
 800ce58:	4a30      	ldr	r2, [pc, #192]	; (800cf1c <HAL_SD_ConfigWideBusOperation+0x220>)
 800ce5a:	4293      	cmp	r3, r2
 800ce5c:	d906      	bls.n	800ce6c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ce5e:	69fb      	ldr	r3, [r7, #28]
 800ce60:	4a2c      	ldr	r2, [pc, #176]	; (800cf14 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ce62:	fba2 2303 	umull	r2, r3, r2, r3
 800ce66:	0e1b      	lsrs	r3, r3, #24
 800ce68:	61bb      	str	r3, [r7, #24]
 800ce6a:	e016      	b.n	800ce9a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	695b      	ldr	r3, [r3, #20]
 800ce70:	61bb      	str	r3, [r7, #24]
 800ce72:	e012      	b.n	800ce9a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	695b      	ldr	r3, [r3, #20]
 800ce78:	005b      	lsls	r3, r3, #1
 800ce7a:	69fa      	ldr	r2, [r7, #28]
 800ce7c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce80:	4a26      	ldr	r2, [pc, #152]	; (800cf1c <HAL_SD_ConfigWideBusOperation+0x220>)
 800ce82:	4293      	cmp	r3, r2
 800ce84:	d906      	bls.n	800ce94 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ce86:	69fb      	ldr	r3, [r7, #28]
 800ce88:	4a22      	ldr	r2, [pc, #136]	; (800cf14 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ce8a:	fba2 2303 	umull	r2, r3, r2, r3
 800ce8e:	0e1b      	lsrs	r3, r3, #24
 800ce90:	61bb      	str	r3, [r7, #24]
 800ce92:	e002      	b.n	800ce9a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	695b      	ldr	r3, [r3, #20]
 800ce98:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681c      	ldr	r4, [r3, #0]
 800ce9e:	466a      	mov	r2, sp
 800cea0:	f107 0314 	add.w	r3, r7, #20
 800cea4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cea8:	e882 0003 	stmia.w	r2, {r0, r1}
 800ceac:	f107 0308 	add.w	r3, r7, #8
 800ceb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ceb2:	4620      	mov	r0, r4
 800ceb4:	f003 fc6e 	bl	8010794 <SDMMC_Init>
 800ceb8:	e008      	b.n	800cecc <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cebe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800cec6:	2301      	movs	r3, #1
 800cec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ced4:	4618      	mov	r0, r3
 800ced6:	f003 fd3b 	bl	8010950 <SDMMC_CmdBlockLength>
 800ceda:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cedc:	6a3b      	ldr	r3, [r7, #32]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d00c      	beq.n	800cefc <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	4a0a      	ldr	r2, [pc, #40]	; (800cf10 <HAL_SD_ConfigWideBusOperation+0x214>)
 800cee8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ceee:	6a3b      	ldr	r3, [r7, #32]
 800cef0:	431a      	orrs	r2, r3
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800cef6:	2301      	movs	r3, #1
 800cef8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2201      	movs	r2, #1
 800cf00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800cf04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800cf08:	4618      	mov	r0, r3
 800cf0a:	372c      	adds	r7, #44	; 0x2c
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	bd90      	pop	{r4, r7, pc}
 800cf10:	1fe00fff 	.word	0x1fe00fff
 800cf14:	55e63b89 	.word	0x55e63b89
 800cf18:	02faf080 	.word	0x02faf080
 800cf1c:	017d7840 	.word	0x017d7840

0800cf20 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b086      	sub	sp, #24
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800cf28:	2300      	movs	r3, #0
 800cf2a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800cf2c:	f107 030c 	add.w	r3, r7, #12
 800cf30:	4619      	mov	r1, r3
 800cf32:	6878      	ldr	r0, [r7, #4]
 800cf34:	f000 fa40 	bl	800d3b8 <SD_SendStatus>
 800cf38:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d005      	beq.n	800cf4c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf44:	697b      	ldr	r3, [r7, #20]
 800cf46:	431a      	orrs	r2, r3
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	0a5b      	lsrs	r3, r3, #9
 800cf50:	f003 030f 	and.w	r3, r3, #15
 800cf54:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800cf56:	693b      	ldr	r3, [r7, #16]
}
 800cf58:	4618      	mov	r0, r3
 800cf5a:	3718      	adds	r7, #24
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	bd80      	pop	{r7, pc}

0800cf60 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b090      	sub	sp, #64	; 0x40
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800cf68:	2300      	movs	r3, #0
 800cf6a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800cf6c:	f7f6 f962 	bl	8003234 <HAL_GetTick>
 800cf70:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	4618      	mov	r0, r3
 800cf78:	f003 fc65 	bl	8010846 <SDMMC_GetPowerState>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d102      	bne.n	800cf88 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800cf82:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800cf86:	e0b5      	b.n	800d0f4 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf8c:	2b03      	cmp	r3, #3
 800cf8e:	d02e      	beq.n	800cfee <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	4618      	mov	r0, r3
 800cf96:	f003 feb0 	bl	8010cfa <SDMMC_CmdSendCID>
 800cf9a:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800cf9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d001      	beq.n	800cfa6 <SD_InitCard+0x46>
    {
      return errorstate;
 800cfa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfa4:	e0a6      	b.n	800d0f4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	2100      	movs	r1, #0
 800cfac:	4618      	mov	r0, r3
 800cfae:	f003 fc90 	bl	80108d2 <SDMMC_GetResponse>
 800cfb2:	4602      	mov	r2, r0
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	2104      	movs	r1, #4
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	f003 fc87 	bl	80108d2 <SDMMC_GetResponse>
 800cfc4:	4602      	mov	r2, r0
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	2108      	movs	r1, #8
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f003 fc7e 	bl	80108d2 <SDMMC_GetResponse>
 800cfd6:	4602      	mov	r2, r0
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	210c      	movs	r1, #12
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	f003 fc75 	bl	80108d2 <SDMMC_GetResponse>
 800cfe8:	4602      	mov	r2, r0
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cff2:	2b03      	cmp	r3, #3
 800cff4:	d01d      	beq.n	800d032 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800cff6:	e019      	b.n	800d02c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	f107 020a 	add.w	r2, r7, #10
 800d000:	4611      	mov	r1, r2
 800d002:	4618      	mov	r0, r3
 800d004:	f003 feb8 	bl	8010d78 <SDMMC_CmdSetRelAdd>
 800d008:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800d00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d001      	beq.n	800d014 <SD_InitCard+0xb4>
      {
        return errorstate;
 800d010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d012:	e06f      	b.n	800d0f4 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800d014:	f7f6 f90e 	bl	8003234 <HAL_GetTick>
 800d018:	4602      	mov	r2, r0
 800d01a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d01c:	1ad3      	subs	r3, r2, r3
 800d01e:	f241 3287 	movw	r2, #4999	; 0x1387
 800d022:	4293      	cmp	r3, r2
 800d024:	d902      	bls.n	800d02c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800d026:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d02a:	e063      	b.n	800d0f4 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800d02c:	897b      	ldrh	r3, [r7, #10]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d0e2      	beq.n	800cff8 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d036:	2b03      	cmp	r3, #3
 800d038:	d036      	beq.n	800d0a8 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d03a:	897b      	ldrh	r3, [r7, #10]
 800d03c:	461a      	mov	r2, r3
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681a      	ldr	r2, [r3, #0]
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d04a:	041b      	lsls	r3, r3, #16
 800d04c:	4619      	mov	r1, r3
 800d04e:	4610      	mov	r0, r2
 800d050:	f003 fe72 	bl	8010d38 <SDMMC_CmdSendCSD>
 800d054:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800d056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d001      	beq.n	800d060 <SD_InitCard+0x100>
    {
      return errorstate;
 800d05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d05e:	e049      	b.n	800d0f4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	2100      	movs	r1, #0
 800d066:	4618      	mov	r0, r3
 800d068:	f003 fc33 	bl	80108d2 <SDMMC_GetResponse>
 800d06c:	4602      	mov	r2, r0
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	2104      	movs	r1, #4
 800d078:	4618      	mov	r0, r3
 800d07a:	f003 fc2a 	bl	80108d2 <SDMMC_GetResponse>
 800d07e:	4602      	mov	r2, r0
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	2108      	movs	r1, #8
 800d08a:	4618      	mov	r0, r3
 800d08c:	f003 fc21 	bl	80108d2 <SDMMC_GetResponse>
 800d090:	4602      	mov	r2, r0
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	210c      	movs	r1, #12
 800d09c:	4618      	mov	r0, r3
 800d09e:	f003 fc18 	bl	80108d2 <SDMMC_GetResponse>
 800d0a2:	4602      	mov	r2, r0
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	2104      	movs	r1, #4
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	f003 fc0f 	bl	80108d2 <SDMMC_GetResponse>
 800d0b4:	4603      	mov	r3, r0
 800d0b6:	0d1a      	lsrs	r2, r3, #20
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d0bc:	f107 030c 	add.w	r3, r7, #12
 800d0c0:	4619      	mov	r1, r3
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	f7ff fb8c 	bl	800c7e0 <HAL_SD_GetCardCSD>
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d002      	beq.n	800d0d4 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d0ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d0d2:	e00f      	b.n	800d0f4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681a      	ldr	r2, [r3, #0]
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0dc:	041b      	lsls	r3, r3, #16
 800d0de:	4619      	mov	r1, r3
 800d0e0:	4610      	mov	r0, r2
 800d0e2:	f003 fd21 	bl	8010b28 <SDMMC_CmdSelDesel>
 800d0e6:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800d0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d001      	beq.n	800d0f2 <SD_InitCard+0x192>
  {
    return errorstate;
 800d0ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0f0:	e000      	b.n	800d0f4 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d0f2:	2300      	movs	r3, #0
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	3740      	adds	r7, #64	; 0x40
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}

0800d0fc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b086      	sub	sp, #24
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d104:	2300      	movs	r3, #0
 800d106:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800d108:	2300      	movs	r3, #0
 800d10a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800d10c:	2300      	movs	r3, #0
 800d10e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	4618      	mov	r0, r3
 800d116:	f003 fd2a 	bl	8010b6e <SDMMC_CmdGoIdleState>
 800d11a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d001      	beq.n	800d126 <SD_PowerON+0x2a>
  {
    return errorstate;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	e072      	b.n	800d20c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	4618      	mov	r0, r3
 800d12c:	f003 fd3d 	bl	8010baa <SDMMC_CmdOperCond>
 800d130:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d138:	d10d      	bne.n	800d156 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2200      	movs	r2, #0
 800d13e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	4618      	mov	r0, r3
 800d146:	f003 fd12 	bl	8010b6e <SDMMC_CmdGoIdleState>
 800d14a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d004      	beq.n	800d15c <SD_PowerON+0x60>
    {
      return errorstate;
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	e05a      	b.n	800d20c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2201      	movs	r2, #1
 800d15a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d160:	2b01      	cmp	r3, #1
 800d162:	d137      	bne.n	800d1d4 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	2100      	movs	r1, #0
 800d16a:	4618      	mov	r0, r3
 800d16c:	f003 fd3d 	bl	8010bea <SDMMC_CmdAppCommand>
 800d170:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d02d      	beq.n	800d1d4 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d178:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d17c:	e046      	b.n	800d20c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	2100      	movs	r1, #0
 800d184:	4618      	mov	r0, r3
 800d186:	f003 fd30 	bl	8010bea <SDMMC_CmdAppCommand>
 800d18a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d001      	beq.n	800d196 <SD_PowerON+0x9a>
    {
      return errorstate;
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	e03a      	b.n	800d20c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	491e      	ldr	r1, [pc, #120]	; (800d214 <SD_PowerON+0x118>)
 800d19c:	4618      	mov	r0, r3
 800d19e:	f003 fd47 	bl	8010c30 <SDMMC_CmdAppOperCommand>
 800d1a2:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d002      	beq.n	800d1b0 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d1aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d1ae:	e02d      	b.n	800d20c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	2100      	movs	r1, #0
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f003 fb8b 	bl	80108d2 <SDMMC_GetResponse>
 800d1bc:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d1be:	697b      	ldr	r3, [r7, #20]
 800d1c0:	0fdb      	lsrs	r3, r3, #31
 800d1c2:	2b01      	cmp	r3, #1
 800d1c4:	d101      	bne.n	800d1ca <SD_PowerON+0xce>
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	e000      	b.n	800d1cc <SD_PowerON+0xd0>
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	613b      	str	r3, [r7, #16]

    count++;
 800d1ce:	68bb      	ldr	r3, [r7, #8]
 800d1d0:	3301      	adds	r3, #1
 800d1d2:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d1da:	4293      	cmp	r3, r2
 800d1dc:	d802      	bhi.n	800d1e4 <SD_PowerON+0xe8>
 800d1de:	693b      	ldr	r3, [r7, #16]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d0cc      	beq.n	800d17e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800d1e4:	68bb      	ldr	r3, [r7, #8]
 800d1e6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d1ea:	4293      	cmp	r3, r2
 800d1ec:	d902      	bls.n	800d1f4 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d1ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d1f2:	e00b      	b.n	800d20c <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800d1fa:	697b      	ldr	r3, [r7, #20]
 800d1fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d200:	2b00      	cmp	r3, #0
 800d202:	d002      	beq.n	800d20a <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	2201      	movs	r2, #1
 800d208:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800d20a:	2300      	movs	r3, #0
}
 800d20c:	4618      	mov	r0, r3
 800d20e:	3718      	adds	r7, #24
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}
 800d214:	c1100000 	.word	0xc1100000

0800d218 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b08c      	sub	sp, #48	; 0x30
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
 800d220:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d222:	f7f6 f807 	bl	8003234 <HAL_GetTick>
 800d226:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	2100      	movs	r1, #0
 800d232:	4618      	mov	r0, r3
 800d234:	f003 fb4d 	bl	80108d2 <SDMMC_GetResponse>
 800d238:	4603      	mov	r3, r0
 800d23a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d23e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d242:	d102      	bne.n	800d24a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d244:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d248:	e0b0      	b.n	800d3ac <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	2140      	movs	r1, #64	; 0x40
 800d250:	4618      	mov	r0, r3
 800d252:	f003 fb7d 	bl	8010950 <SDMMC_CmdBlockLength>
 800d256:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d258:	6a3b      	ldr	r3, [r7, #32]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d005      	beq.n	800d26a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800d266:	6a3b      	ldr	r3, [r7, #32]
 800d268:	e0a0      	b.n	800d3ac <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681a      	ldr	r2, [r3, #0]
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d272:	041b      	lsls	r3, r3, #16
 800d274:	4619      	mov	r1, r3
 800d276:	4610      	mov	r0, r2
 800d278:	f003 fcb7 	bl	8010bea <SDMMC_CmdAppCommand>
 800d27c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d27e:	6a3b      	ldr	r3, [r7, #32]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d005      	beq.n	800d290 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800d28c:	6a3b      	ldr	r3, [r7, #32]
 800d28e:	e08d      	b.n	800d3ac <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d290:	f04f 33ff 	mov.w	r3, #4294967295
 800d294:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800d296:	2340      	movs	r3, #64	; 0x40
 800d298:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800d29a:	2360      	movs	r3, #96	; 0x60
 800d29c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d29e:	2302      	movs	r3, #2
 800d2a0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	f107 0208 	add.w	r2, r7, #8
 800d2b2:	4611      	mov	r1, r2
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	f003 fb1f 	bl	80108f8 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f003 fd9f 	bl	8010e02 <SDMMC_CmdStatusRegister>
 800d2c4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d2c6:	6a3b      	ldr	r3, [r7, #32]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d02b      	beq.n	800d324 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800d2d4:	6a3b      	ldr	r3, [r7, #32]
 800d2d6:	e069      	b.n	800d3ac <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d013      	beq.n	800d30e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d2ea:	e00d      	b.n	800d308 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	f003 fa79 	bl	80107e8 <SDMMC_ReadFIFO>
 800d2f6:	4602      	mov	r2, r0
 800d2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2fa:	601a      	str	r2, [r3, #0]
        pData++;
 800d2fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2fe:	3304      	adds	r3, #4
 800d300:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800d302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d304:	3301      	adds	r3, #1
 800d306:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d30a:	2b07      	cmp	r3, #7
 800d30c:	d9ee      	bls.n	800d2ec <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d30e:	f7f5 ff91 	bl	8003234 <HAL_GetTick>
 800d312:	4602      	mov	r2, r0
 800d314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d316:	1ad3      	subs	r3, r2, r3
 800d318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d31c:	d102      	bne.n	800d324 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d31e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d322:	e043      	b.n	800d3ac <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d32a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d0d2      	beq.n	800d2d8 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d338:	f003 0308 	and.w	r3, r3, #8
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d001      	beq.n	800d344 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d340:	2308      	movs	r3, #8
 800d342:	e033      	b.n	800d3ac <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d34a:	f003 0302 	and.w	r3, r3, #2
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d001      	beq.n	800d356 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d352:	2302      	movs	r3, #2
 800d354:	e02a      	b.n	800d3ac <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d35c:	f003 0320 	and.w	r3, r3, #32
 800d360:	2b00      	cmp	r3, #0
 800d362:	d017      	beq.n	800d394 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800d364:	2320      	movs	r3, #32
 800d366:	e021      	b.n	800d3ac <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	4618      	mov	r0, r3
 800d36e:	f003 fa3b 	bl	80107e8 <SDMMC_ReadFIFO>
 800d372:	4602      	mov	r2, r0
 800d374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d376:	601a      	str	r2, [r3, #0]
    pData++;
 800d378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d37a:	3304      	adds	r3, #4
 800d37c:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d37e:	f7f5 ff59 	bl	8003234 <HAL_GetTick>
 800d382:	4602      	mov	r2, r0
 800d384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d386:	1ad3      	subs	r3, r2, r3
 800d388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d38c:	d102      	bne.n	800d394 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d38e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d392:	e00b      	b.n	800d3ac <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d39a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d1e2      	bne.n	800d368 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	4a03      	ldr	r2, [pc, #12]	; (800d3b4 <SD_SendSDStatus+0x19c>)
 800d3a8:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800d3aa:	2300      	movs	r3, #0
}
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	3730      	adds	r7, #48	; 0x30
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}
 800d3b4:	18000f3a 	.word	0x18000f3a

0800d3b8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b084      	sub	sp, #16
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
 800d3c0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d102      	bne.n	800d3ce <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d3c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d3cc:	e018      	b.n	800d400 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681a      	ldr	r2, [r3, #0]
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3d6:	041b      	lsls	r3, r3, #16
 800d3d8:	4619      	mov	r1, r3
 800d3da:	4610      	mov	r0, r2
 800d3dc:	f003 fcee 	bl	8010dbc <SDMMC_CmdSendStatus>
 800d3e0:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d001      	beq.n	800d3ec <SD_SendStatus+0x34>
  {
    return errorstate;
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	e009      	b.n	800d400 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	2100      	movs	r1, #0
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	f003 fa6d 	bl	80108d2 <SDMMC_GetResponse>
 800d3f8:	4602      	mov	r2, r0
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d3fe:	2300      	movs	r3, #0
}
 800d400:	4618      	mov	r0, r3
 800d402:	3710      	adds	r7, #16
 800d404:	46bd      	mov	sp, r7
 800d406:	bd80      	pop	{r7, pc}

0800d408 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b086      	sub	sp, #24
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d410:	2300      	movs	r3, #0
 800d412:	60fb      	str	r3, [r7, #12]
 800d414:	2300      	movs	r3, #0
 800d416:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	2100      	movs	r1, #0
 800d41e:	4618      	mov	r0, r3
 800d420:	f003 fa57 	bl	80108d2 <SDMMC_GetResponse>
 800d424:	4603      	mov	r3, r0
 800d426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d42a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d42e:	d102      	bne.n	800d436 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d430:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d434:	e02f      	b.n	800d496 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d436:	f107 030c 	add.w	r3, r7, #12
 800d43a:	4619      	mov	r1, r3
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	f000 f879 	bl	800d534 <SD_FindSCR>
 800d442:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d444:	697b      	ldr	r3, [r7, #20]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d001      	beq.n	800d44e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d44a:	697b      	ldr	r3, [r7, #20]
 800d44c:	e023      	b.n	800d496 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d44e:	693b      	ldr	r3, [r7, #16]
 800d450:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d454:	2b00      	cmp	r3, #0
 800d456:	d01c      	beq.n	800d492 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681a      	ldr	r2, [r3, #0]
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d460:	041b      	lsls	r3, r3, #16
 800d462:	4619      	mov	r1, r3
 800d464:	4610      	mov	r0, r2
 800d466:	f003 fbc0 	bl	8010bea <SDMMC_CmdAppCommand>
 800d46a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d46c:	697b      	ldr	r3, [r7, #20]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d001      	beq.n	800d476 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d472:	697b      	ldr	r3, [r7, #20]
 800d474:	e00f      	b.n	800d496 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	2102      	movs	r1, #2
 800d47c:	4618      	mov	r0, r3
 800d47e:	f003 fbf7 	bl	8010c70 <SDMMC_CmdBusWidth>
 800d482:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d484:	697b      	ldr	r3, [r7, #20]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d001      	beq.n	800d48e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d48a:	697b      	ldr	r3, [r7, #20]
 800d48c:	e003      	b.n	800d496 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d48e:	2300      	movs	r3, #0
 800d490:	e001      	b.n	800d496 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d492:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d496:	4618      	mov	r0, r3
 800d498:	3718      	adds	r7, #24
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bd80      	pop	{r7, pc}

0800d49e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d49e:	b580      	push	{r7, lr}
 800d4a0:	b086      	sub	sp, #24
 800d4a2:	af00      	add	r7, sp, #0
 800d4a4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	60fb      	str	r3, [r7, #12]
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	2100      	movs	r1, #0
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f003 fa0c 	bl	80108d2 <SDMMC_GetResponse>
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d4c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d4c4:	d102      	bne.n	800d4cc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d4c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d4ca:	e02f      	b.n	800d52c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d4cc:	f107 030c 	add.w	r3, r7, #12
 800d4d0:	4619      	mov	r1, r3
 800d4d2:	6878      	ldr	r0, [r7, #4]
 800d4d4:	f000 f82e 	bl	800d534 <SD_FindSCR>
 800d4d8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d4da:	697b      	ldr	r3, [r7, #20]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d001      	beq.n	800d4e4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d4e0:	697b      	ldr	r3, [r7, #20]
 800d4e2:	e023      	b.n	800d52c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d4e4:	693b      	ldr	r3, [r7, #16]
 800d4e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d01c      	beq.n	800d528 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681a      	ldr	r2, [r3, #0]
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4f6:	041b      	lsls	r3, r3, #16
 800d4f8:	4619      	mov	r1, r3
 800d4fa:	4610      	mov	r0, r2
 800d4fc:	f003 fb75 	bl	8010bea <SDMMC_CmdAppCommand>
 800d500:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d502:	697b      	ldr	r3, [r7, #20]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d001      	beq.n	800d50c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800d508:	697b      	ldr	r3, [r7, #20]
 800d50a:	e00f      	b.n	800d52c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	2100      	movs	r1, #0
 800d512:	4618      	mov	r0, r3
 800d514:	f003 fbac 	bl	8010c70 <SDMMC_CmdBusWidth>
 800d518:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d51a:	697b      	ldr	r3, [r7, #20]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d001      	beq.n	800d524 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800d520:	697b      	ldr	r3, [r7, #20]
 800d522:	e003      	b.n	800d52c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d524:	2300      	movs	r3, #0
 800d526:	e001      	b.n	800d52c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d528:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d52c:	4618      	mov	r0, r3
 800d52e:	3718      	adds	r7, #24
 800d530:	46bd      	mov	sp, r7
 800d532:	bd80      	pop	{r7, pc}

0800d534 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b08e      	sub	sp, #56	; 0x38
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
 800d53c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d53e:	f7f5 fe79 	bl	8003234 <HAL_GetTick>
 800d542:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800d544:	2300      	movs	r3, #0
 800d546:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800d548:	2300      	movs	r3, #0
 800d54a:	60bb      	str	r3, [r7, #8]
 800d54c:	2300      	movs	r3, #0
 800d54e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	2108      	movs	r1, #8
 800d55a:	4618      	mov	r0, r3
 800d55c:	f003 f9f8 	bl	8010950 <SDMMC_CmdBlockLength>
 800d560:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d564:	2b00      	cmp	r3, #0
 800d566:	d001      	beq.n	800d56c <SD_FindSCR+0x38>
  {
    return errorstate;
 800d568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d56a:	e0ad      	b.n	800d6c8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681a      	ldr	r2, [r3, #0]
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d574:	041b      	lsls	r3, r3, #16
 800d576:	4619      	mov	r1, r3
 800d578:	4610      	mov	r0, r2
 800d57a:	f003 fb36 	bl	8010bea <SDMMC_CmdAppCommand>
 800d57e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d582:	2b00      	cmp	r3, #0
 800d584:	d001      	beq.n	800d58a <SD_FindSCR+0x56>
  {
    return errorstate;
 800d586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d588:	e09e      	b.n	800d6c8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d58a:	f04f 33ff 	mov.w	r3, #4294967295
 800d58e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800d590:	2308      	movs	r3, #8
 800d592:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800d594:	2330      	movs	r3, #48	; 0x30
 800d596:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d598:	2302      	movs	r3, #2
 800d59a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d59c:	2300      	movs	r3, #0
 800d59e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d5a0:	2301      	movs	r3, #1
 800d5a2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	f107 0210 	add.w	r2, r7, #16
 800d5ac:	4611      	mov	r1, r2
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	f003 f9a2 	bl	80108f8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	f003 fb7c 	bl	8010cb6 <SDMMC_CmdSendSCR>
 800d5be:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800d5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d027      	beq.n	800d616 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800d5c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5c8:	e07e      	b.n	800d6c8 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d113      	bne.n	800d600 <SD_FindSCR+0xcc>
 800d5d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d110      	bne.n	800d600 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f003 f900 	bl	80107e8 <SDMMC_ReadFIFO>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	f003 f8f9 	bl	80107e8 <SDMMC_ReadFIFO>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	60fb      	str	r3, [r7, #12]
      index++;
 800d5fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5fc:	3301      	adds	r3, #1
 800d5fe:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d600:	f7f5 fe18 	bl	8003234 <HAL_GetTick>
 800d604:	4602      	mov	r2, r0
 800d606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d608:	1ad3      	subs	r3, r2, r3
 800d60a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d60e:	d102      	bne.n	800d616 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d610:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d614:	e058      	b.n	800d6c8 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d61c:	f240 532a 	movw	r3, #1322	; 0x52a
 800d620:	4013      	ands	r3, r2
 800d622:	2b00      	cmp	r3, #0
 800d624:	d0d1      	beq.n	800d5ca <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d62c:	f003 0308 	and.w	r3, r3, #8
 800d630:	2b00      	cmp	r3, #0
 800d632:	d005      	beq.n	800d640 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	2208      	movs	r2, #8
 800d63a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d63c:	2308      	movs	r3, #8
 800d63e:	e043      	b.n	800d6c8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d646:	f003 0302 	and.w	r3, r3, #2
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d005      	beq.n	800d65a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	2202      	movs	r2, #2
 800d654:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d656:	2302      	movs	r3, #2
 800d658:	e036      	b.n	800d6c8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d660:	f003 0320 	and.w	r3, r3, #32
 800d664:	2b00      	cmp	r3, #0
 800d666:	d005      	beq.n	800d674 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	2220      	movs	r2, #32
 800d66e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800d670:	2320      	movs	r3, #32
 800d672:	e029      	b.n	800d6c8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	4a15      	ldr	r2, [pc, #84]	; (800d6d0 <SD_FindSCR+0x19c>)
 800d67a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	061a      	lsls	r2, r3, #24
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	021b      	lsls	r3, r3, #8
 800d684:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d688:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	0a1b      	lsrs	r3, r3, #8
 800d68e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d692:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	0e1b      	lsrs	r3, r3, #24
 800d698:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800d69a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d69c:	601a      	str	r2, [r3, #0]
    scr++;
 800d69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6a0:	3304      	adds	r3, #4
 800d6a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	061a      	lsls	r2, r3, #24
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	021b      	lsls	r3, r3, #8
 800d6ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d6b0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d6b2:	68bb      	ldr	r3, [r7, #8]
 800d6b4:	0a1b      	lsrs	r3, r3, #8
 800d6b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d6ba:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	0e1b      	lsrs	r3, r3, #24
 800d6c0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800d6c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6c4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800d6c6:	2300      	movs	r3, #0
}
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	3738      	adds	r7, #56	; 0x38
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd80      	pop	{r7, pc}
 800d6d0:	18000f3a 	.word	0x18000f3a

0800d6d4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b086      	sub	sp, #24
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6e0:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6e6:	2b1f      	cmp	r3, #31
 800d6e8:	d936      	bls.n	800d758 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	617b      	str	r3, [r7, #20]
 800d6ee:	e027      	b.n	800d740 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f003 f877 	bl	80107e8 <SDMMC_ReadFIFO>
 800d6fa:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	b2da      	uxtb	r2, r3
 800d700:	693b      	ldr	r3, [r7, #16]
 800d702:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d704:	693b      	ldr	r3, [r7, #16]
 800d706:	3301      	adds	r3, #1
 800d708:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	0a1b      	lsrs	r3, r3, #8
 800d70e:	b2da      	uxtb	r2, r3
 800d710:	693b      	ldr	r3, [r7, #16]
 800d712:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d714:	693b      	ldr	r3, [r7, #16]
 800d716:	3301      	adds	r3, #1
 800d718:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	0c1b      	lsrs	r3, r3, #16
 800d71e:	b2da      	uxtb	r2, r3
 800d720:	693b      	ldr	r3, [r7, #16]
 800d722:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d724:	693b      	ldr	r3, [r7, #16]
 800d726:	3301      	adds	r3, #1
 800d728:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	0e1b      	lsrs	r3, r3, #24
 800d72e:	b2da      	uxtb	r2, r3
 800d730:	693b      	ldr	r3, [r7, #16]
 800d732:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d734:	693b      	ldr	r3, [r7, #16]
 800d736:	3301      	adds	r3, #1
 800d738:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800d73a:	697b      	ldr	r3, [r7, #20]
 800d73c:	3301      	adds	r3, #1
 800d73e:	617b      	str	r3, [r7, #20]
 800d740:	697b      	ldr	r3, [r7, #20]
 800d742:	2b07      	cmp	r3, #7
 800d744:	d9d4      	bls.n	800d6f0 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	693a      	ldr	r2, [r7, #16]
 800d74a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d750:	f1a3 0220 	sub.w	r2, r3, #32
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800d758:	bf00      	nop
 800d75a:	3718      	adds	r7, #24
 800d75c:	46bd      	mov	sp, r7
 800d75e:	bd80      	pop	{r7, pc}

0800d760 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b086      	sub	sp, #24
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	69db      	ldr	r3, [r3, #28]
 800d76c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6a1b      	ldr	r3, [r3, #32]
 800d772:	2b1f      	cmp	r3, #31
 800d774:	d93a      	bls.n	800d7ec <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800d776:	2300      	movs	r3, #0
 800d778:	617b      	str	r3, [r7, #20]
 800d77a:	e02b      	b.n	800d7d4 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800d77c:	693b      	ldr	r3, [r7, #16]
 800d77e:	781b      	ldrb	r3, [r3, #0]
 800d780:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d782:	693b      	ldr	r3, [r7, #16]
 800d784:	3301      	adds	r3, #1
 800d786:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800d788:	693b      	ldr	r3, [r7, #16]
 800d78a:	781b      	ldrb	r3, [r3, #0]
 800d78c:	021a      	lsls	r2, r3, #8
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	4313      	orrs	r3, r2
 800d792:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d794:	693b      	ldr	r3, [r7, #16]
 800d796:	3301      	adds	r3, #1
 800d798:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800d79a:	693b      	ldr	r3, [r7, #16]
 800d79c:	781b      	ldrb	r3, [r3, #0]
 800d79e:	041a      	lsls	r2, r3, #16
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	4313      	orrs	r3, r2
 800d7a4:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d7a6:	693b      	ldr	r3, [r7, #16]
 800d7a8:	3301      	adds	r3, #1
 800d7aa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800d7ac:	693b      	ldr	r3, [r7, #16]
 800d7ae:	781b      	ldrb	r3, [r3, #0]
 800d7b0:	061a      	lsls	r2, r3, #24
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	4313      	orrs	r3, r2
 800d7b6:	60fb      	str	r3, [r7, #12]
      tmp++;
 800d7b8:	693b      	ldr	r3, [r7, #16]
 800d7ba:	3301      	adds	r3, #1
 800d7bc:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	f107 020c 	add.w	r2, r7, #12
 800d7c6:	4611      	mov	r1, r2
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	f003 f81a 	bl	8010802 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800d7ce:	697b      	ldr	r3, [r7, #20]
 800d7d0:	3301      	adds	r3, #1
 800d7d2:	617b      	str	r3, [r7, #20]
 800d7d4:	697b      	ldr	r3, [r7, #20]
 800d7d6:	2b07      	cmp	r3, #7
 800d7d8:	d9d0      	bls.n	800d77c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	693a      	ldr	r2, [r7, #16]
 800d7de:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	6a1b      	ldr	r3, [r3, #32]
 800d7e4:	f1a3 0220 	sub.w	r2, r3, #32
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	621a      	str	r2, [r3, #32]
  }
}
 800d7ec:	bf00      	nop
 800d7ee:	3718      	adds	r7, #24
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bd80      	pop	{r7, pc}

0800d7f4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800d7f4:	b480      	push	{r7}
 800d7f6:	b083      	sub	sp, #12
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800d7fc:	bf00      	nop
 800d7fe:	370c      	adds	r7, #12
 800d800:	46bd      	mov	sp, r7
 800d802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d806:	4770      	bx	lr

0800d808 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800d808:	b480      	push	{r7}
 800d80a:	b083      	sub	sp, #12
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800d810:	bf00      	nop
 800d812:	370c      	adds	r7, #12
 800d814:	46bd      	mov	sp, r7
 800d816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81a:	4770      	bx	lr

0800d81c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800d81c:	b480      	push	{r7}
 800d81e:	b083      	sub	sp, #12
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800d824:	bf00      	nop
 800d826:	370c      	adds	r7, #12
 800d828:	46bd      	mov	sp, r7
 800d82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82e:	4770      	bx	lr

0800d830 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800d830:	b480      	push	{r7}
 800d832:	b083      	sub	sp, #12
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800d838:	bf00      	nop
 800d83a:	370c      	adds	r7, #12
 800d83c:	46bd      	mov	sp, r7
 800d83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d842:	4770      	bx	lr

0800d844 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b084      	sub	sp, #16
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d101      	bne.n	800d856 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d852:	2301      	movs	r3, #1
 800d854:	e10f      	b.n	800da76 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	2200      	movs	r2, #0
 800d85a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	4a87      	ldr	r2, [pc, #540]	; (800da80 <HAL_SPI_Init+0x23c>)
 800d862:	4293      	cmp	r3, r2
 800d864:	d00f      	beq.n	800d886 <HAL_SPI_Init+0x42>
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	4a86      	ldr	r2, [pc, #536]	; (800da84 <HAL_SPI_Init+0x240>)
 800d86c:	4293      	cmp	r3, r2
 800d86e:	d00a      	beq.n	800d886 <HAL_SPI_Init+0x42>
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	4a84      	ldr	r2, [pc, #528]	; (800da88 <HAL_SPI_Init+0x244>)
 800d876:	4293      	cmp	r3, r2
 800d878:	d005      	beq.n	800d886 <HAL_SPI_Init+0x42>
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	68db      	ldr	r3, [r3, #12]
 800d87e:	2b0f      	cmp	r3, #15
 800d880:	d901      	bls.n	800d886 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800d882:	2301      	movs	r3, #1
 800d884:	e0f7      	b.n	800da76 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800d886:	6878      	ldr	r0, [r7, #4]
 800d888:	f000 fd5a 	bl	800e340 <SPI_GetPacketSize>
 800d88c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	4a7b      	ldr	r2, [pc, #492]	; (800da80 <HAL_SPI_Init+0x23c>)
 800d894:	4293      	cmp	r3, r2
 800d896:	d00c      	beq.n	800d8b2 <HAL_SPI_Init+0x6e>
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	4a79      	ldr	r2, [pc, #484]	; (800da84 <HAL_SPI_Init+0x240>)
 800d89e:	4293      	cmp	r3, r2
 800d8a0:	d007      	beq.n	800d8b2 <HAL_SPI_Init+0x6e>
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	4a78      	ldr	r2, [pc, #480]	; (800da88 <HAL_SPI_Init+0x244>)
 800d8a8:	4293      	cmp	r3, r2
 800d8aa:	d002      	beq.n	800d8b2 <HAL_SPI_Init+0x6e>
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	2b08      	cmp	r3, #8
 800d8b0:	d811      	bhi.n	800d8d6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d8b6:	4a72      	ldr	r2, [pc, #456]	; (800da80 <HAL_SPI_Init+0x23c>)
 800d8b8:	4293      	cmp	r3, r2
 800d8ba:	d009      	beq.n	800d8d0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	4a70      	ldr	r2, [pc, #448]	; (800da84 <HAL_SPI_Init+0x240>)
 800d8c2:	4293      	cmp	r3, r2
 800d8c4:	d004      	beq.n	800d8d0 <HAL_SPI_Init+0x8c>
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	4a6f      	ldr	r2, [pc, #444]	; (800da88 <HAL_SPI_Init+0x244>)
 800d8cc:	4293      	cmp	r3, r2
 800d8ce:	d104      	bne.n	800d8da <HAL_SPI_Init+0x96>
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	2b10      	cmp	r3, #16
 800d8d4:	d901      	bls.n	800d8da <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	e0cd      	b.n	800da76 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d8e0:	b2db      	uxtb	r3, r3
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d106      	bne.n	800d8f4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d8ee:	6878      	ldr	r0, [r7, #4]
 800d8f0:	f7f4 fee4 	bl	80026bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2202      	movs	r2, #2
 800d8f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	681a      	ldr	r2, [r3, #0]
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	f022 0201 	bic.w	r2, r2, #1
 800d90a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	689b      	ldr	r3, [r3, #8]
 800d912:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800d916:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	699b      	ldr	r3, [r3, #24]
 800d91c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d920:	d119      	bne.n	800d956 <HAL_SPI_Init+0x112>
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	685b      	ldr	r3, [r3, #4]
 800d926:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d92a:	d103      	bne.n	800d934 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d930:	2b00      	cmp	r3, #0
 800d932:	d008      	beq.n	800d946 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d10c      	bne.n	800d956 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d940:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d944:	d107      	bne.n	800d956 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	681a      	ldr	r2, [r3, #0]
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d954:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	685b      	ldr	r3, [r3, #4]
 800d95a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d00f      	beq.n	800d982 <HAL_SPI_Init+0x13e>
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	68db      	ldr	r3, [r3, #12]
 800d966:	2b06      	cmp	r3, #6
 800d968:	d90b      	bls.n	800d982 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	430a      	orrs	r2, r1
 800d97e:	601a      	str	r2, [r3, #0]
 800d980:	e007      	b.n	800d992 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	681a      	ldr	r2, [r3, #0]
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d990:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	69da      	ldr	r2, [r3, #28]
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d99a:	431a      	orrs	r2, r3
 800d99c:	68bb      	ldr	r3, [r7, #8]
 800d99e:	431a      	orrs	r2, r3
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9a4:	ea42 0103 	orr.w	r1, r2, r3
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	68da      	ldr	r2, [r3, #12]
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	430a      	orrs	r2, r1
 800d9b2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9bc:	431a      	orrs	r2, r3
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9c2:	431a      	orrs	r2, r3
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	699b      	ldr	r3, [r3, #24]
 800d9c8:	431a      	orrs	r2, r3
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	691b      	ldr	r3, [r3, #16]
 800d9ce:	431a      	orrs	r2, r3
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	695b      	ldr	r3, [r3, #20]
 800d9d4:	431a      	orrs	r2, r3
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	6a1b      	ldr	r3, [r3, #32]
 800d9da:	431a      	orrs	r2, r3
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	685b      	ldr	r3, [r3, #4]
 800d9e0:	431a      	orrs	r2, r3
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d9e6:	431a      	orrs	r2, r3
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	689b      	ldr	r3, [r3, #8]
 800d9ec:	431a      	orrs	r2, r3
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d9f2:	ea42 0103 	orr.w	r1, r2, r3
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	430a      	orrs	r2, r1
 800da00:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	685b      	ldr	r3, [r3, #4]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d113      	bne.n	800da32 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	689b      	ldr	r3, [r3, #8]
 800da10:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800da1c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	689b      	ldr	r3, [r3, #8]
 800da24:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800da30:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	f022 0201 	bic.w	r2, r2, #1
 800da40:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	685b      	ldr	r3, [r3, #4]
 800da46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d00a      	beq.n	800da64 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	68db      	ldr	r3, [r3, #12]
 800da54:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	430a      	orrs	r2, r1
 800da62:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2200      	movs	r2, #0
 800da68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2201      	movs	r2, #1
 800da70:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800da74:	2300      	movs	r3, #0
}
 800da76:	4618      	mov	r0, r3
 800da78:	3710      	adds	r7, #16
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd80      	pop	{r7, pc}
 800da7e:	bf00      	nop
 800da80:	40013000 	.word	0x40013000
 800da84:	40003800 	.word	0x40003800
 800da88:	40003c00 	.word	0x40003c00

0800da8c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b08a      	sub	sp, #40	; 0x28
 800da90:	af02      	add	r7, sp, #8
 800da92:	60f8      	str	r0, [r7, #12]
 800da94:	60b9      	str	r1, [r7, #8]
 800da96:	603b      	str	r3, [r7, #0]
 800da98:	4613      	mov	r3, r2
 800da9a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	3320      	adds	r3, #32
 800daa2:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800daa4:	2300      	movs	r3, #0
 800daa6:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800daae:	2b01      	cmp	r3, #1
 800dab0:	d101      	bne.n	800dab6 <HAL_SPI_Transmit+0x2a>
 800dab2:	2302      	movs	r3, #2
 800dab4:	e1e1      	b.n	800de7a <HAL_SPI_Transmit+0x3ee>
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	2201      	movs	r2, #1
 800daba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dabe:	f7f5 fbb9 	bl	8003234 <HAL_GetTick>
 800dac2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800daca:	b2db      	uxtb	r3, r3
 800dacc:	2b01      	cmp	r3, #1
 800dace:	d007      	beq.n	800dae0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800dad0:	2302      	movs	r3, #2
 800dad2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	2200      	movs	r2, #0
 800dad8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800dadc:	7efb      	ldrb	r3, [r7, #27]
 800dade:	e1cc      	b.n	800de7a <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800dae0:	68bb      	ldr	r3, [r7, #8]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d002      	beq.n	800daec <HAL_SPI_Transmit+0x60>
 800dae6:	88fb      	ldrh	r3, [r7, #6]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d107      	bne.n	800dafc <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800daec:	2301      	movs	r3, #1
 800daee:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	2200      	movs	r2, #0
 800daf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800daf8:	7efb      	ldrb	r3, [r7, #27]
 800dafa:	e1be      	b.n	800de7a <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	2203      	movs	r2, #3
 800db00:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	2200      	movs	r2, #0
 800db08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	68ba      	ldr	r2, [r7, #8]
 800db10:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	88fa      	ldrh	r2, [r7, #6]
 800db16:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	88fa      	ldrh	r2, [r7, #6]
 800db1e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	2200      	movs	r2, #0
 800db26:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	2200      	movs	r2, #0
 800db2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	2200      	movs	r2, #0
 800db34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	2200      	movs	r2, #0
 800db3c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	2200      	movs	r2, #0
 800db42:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	689b      	ldr	r3, [r3, #8]
 800db48:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800db4c:	d108      	bne.n	800db60 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	681a      	ldr	r2, [r3, #0]
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800db5c:	601a      	str	r2, [r3, #0]
 800db5e:	e009      	b.n	800db74 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	68db      	ldr	r3, [r3, #12]
 800db66:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800db72:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	685a      	ldr	r2, [r3, #4]
 800db7a:	4b96      	ldr	r3, [pc, #600]	; (800ddd4 <HAL_SPI_Transmit+0x348>)
 800db7c:	4013      	ands	r3, r2
 800db7e:	88f9      	ldrh	r1, [r7, #6]
 800db80:	68fa      	ldr	r2, [r7, #12]
 800db82:	6812      	ldr	r2, [r2, #0]
 800db84:	430b      	orrs	r3, r1
 800db86:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	681a      	ldr	r2, [r3, #0]
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	f042 0201 	orr.w	r2, r2, #1
 800db96:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	685b      	ldr	r3, [r3, #4]
 800db9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dba0:	d107      	bne.n	800dbb2 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	681a      	ldr	r2, [r3, #0]
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dbb0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	68db      	ldr	r3, [r3, #12]
 800dbb6:	2b0f      	cmp	r3, #15
 800dbb8:	d947      	bls.n	800dc4a <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800dbba:	e03f      	b.n	800dc3c <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	695b      	ldr	r3, [r3, #20]
 800dbc2:	f003 0302 	and.w	r3, r3, #2
 800dbc6:	2b02      	cmp	r3, #2
 800dbc8:	d114      	bne.n	800dbf4 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	6812      	ldr	r2, [r2, #0]
 800dbd4:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dbda:	1d1a      	adds	r2, r3, #4
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dbe6:	b29b      	uxth	r3, r3
 800dbe8:	3b01      	subs	r3, #1
 800dbea:	b29a      	uxth	r2, r3
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dbf2:	e023      	b.n	800dc3c <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dbf4:	f7f5 fb1e 	bl	8003234 <HAL_GetTick>
 800dbf8:	4602      	mov	r2, r0
 800dbfa:	697b      	ldr	r3, [r7, #20]
 800dbfc:	1ad3      	subs	r3, r2, r3
 800dbfe:	683a      	ldr	r2, [r7, #0]
 800dc00:	429a      	cmp	r2, r3
 800dc02:	d803      	bhi.n	800dc0c <HAL_SPI_Transmit+0x180>
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc0a:	d102      	bne.n	800dc12 <HAL_SPI_Transmit+0x186>
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d114      	bne.n	800dc3c <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dc12:	68f8      	ldr	r0, [r7, #12]
 800dc14:	f000 fac6 	bl	800e1a4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc26:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	2201      	movs	r2, #1
 800dc34:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800dc38:	2303      	movs	r3, #3
 800dc3a:	e11e      	b.n	800de7a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dc42:	b29b      	uxth	r3, r3
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d1b9      	bne.n	800dbbc <HAL_SPI_Transmit+0x130>
 800dc48:	e0f1      	b.n	800de2e <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	68db      	ldr	r3, [r3, #12]
 800dc4e:	2b07      	cmp	r3, #7
 800dc50:	f240 80e6 	bls.w	800de20 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800dc54:	e05d      	b.n	800dd12 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	695b      	ldr	r3, [r3, #20]
 800dc5c:	f003 0302 	and.w	r3, r3, #2
 800dc60:	2b02      	cmp	r3, #2
 800dc62:	d132      	bne.n	800dcca <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dc6a:	b29b      	uxth	r3, r3
 800dc6c:	2b01      	cmp	r3, #1
 800dc6e:	d918      	bls.n	800dca2 <HAL_SPI_Transmit+0x216>
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d014      	beq.n	800dca2 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	6812      	ldr	r2, [r2, #0]
 800dc82:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc88:	1d1a      	adds	r2, r3, #4
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dc94:	b29b      	uxth	r3, r3
 800dc96:	3b02      	subs	r3, #2
 800dc98:	b29a      	uxth	r2, r3
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dca0:	e037      	b.n	800dd12 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dca6:	881a      	ldrh	r2, [r3, #0]
 800dca8:	69fb      	ldr	r3, [r7, #28]
 800dcaa:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dcb0:	1c9a      	adds	r2, r3, #2
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dcbc:	b29b      	uxth	r3, r3
 800dcbe:	3b01      	subs	r3, #1
 800dcc0:	b29a      	uxth	r2, r3
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dcc8:	e023      	b.n	800dd12 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dcca:	f7f5 fab3 	bl	8003234 <HAL_GetTick>
 800dcce:	4602      	mov	r2, r0
 800dcd0:	697b      	ldr	r3, [r7, #20]
 800dcd2:	1ad3      	subs	r3, r2, r3
 800dcd4:	683a      	ldr	r2, [r7, #0]
 800dcd6:	429a      	cmp	r2, r3
 800dcd8:	d803      	bhi.n	800dce2 <HAL_SPI_Transmit+0x256>
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dce0:	d102      	bne.n	800dce8 <HAL_SPI_Transmit+0x25c>
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d114      	bne.n	800dd12 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dce8:	68f8      	ldr	r0, [r7, #12]
 800dcea:	f000 fa5b 	bl	800e1a4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dcfc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	2201      	movs	r2, #1
 800dd0a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800dd0e:	2303      	movs	r3, #3
 800dd10:	e0b3      	b.n	800de7a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd18:	b29b      	uxth	r3, r3
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d19b      	bne.n	800dc56 <HAL_SPI_Transmit+0x1ca>
 800dd1e:	e086      	b.n	800de2e <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	695b      	ldr	r3, [r3, #20]
 800dd26:	f003 0302 	and.w	r3, r3, #2
 800dd2a:	2b02      	cmp	r3, #2
 800dd2c:	d154      	bne.n	800ddd8 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd34:	b29b      	uxth	r3, r3
 800dd36:	2b03      	cmp	r3, #3
 800dd38:	d918      	bls.n	800dd6c <HAL_SPI_Transmit+0x2e0>
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd3e:	2b40      	cmp	r3, #64	; 0x40
 800dd40:	d914      	bls.n	800dd6c <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	6812      	ldr	r2, [r2, #0]
 800dd4c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd52:	1d1a      	adds	r2, r3, #4
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd5e:	b29b      	uxth	r3, r3
 800dd60:	3b04      	subs	r3, #4
 800dd62:	b29a      	uxth	r2, r3
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dd6a:	e059      	b.n	800de20 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd72:	b29b      	uxth	r3, r3
 800dd74:	2b01      	cmp	r3, #1
 800dd76:	d917      	bls.n	800dda8 <HAL_SPI_Transmit+0x31c>
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d013      	beq.n	800dda8 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd84:	881a      	ldrh	r2, [r3, #0]
 800dd86:	69fb      	ldr	r3, [r7, #28]
 800dd88:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd8e:	1c9a      	adds	r2, r3, #2
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd9a:	b29b      	uxth	r3, r3
 800dd9c:	3b02      	subs	r3, #2
 800dd9e:	b29a      	uxth	r2, r3
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dda6:	e03b      	b.n	800de20 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	3320      	adds	r3, #32
 800ddb2:	7812      	ldrb	r2, [r2, #0]
 800ddb4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ddba:	1c5a      	adds	r2, r3, #1
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ddc6:	b29b      	uxth	r3, r3
 800ddc8:	3b01      	subs	r3, #1
 800ddca:	b29a      	uxth	r2, r3
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ddd2:	e025      	b.n	800de20 <HAL_SPI_Transmit+0x394>
 800ddd4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ddd8:	f7f5 fa2c 	bl	8003234 <HAL_GetTick>
 800dddc:	4602      	mov	r2, r0
 800ddde:	697b      	ldr	r3, [r7, #20]
 800dde0:	1ad3      	subs	r3, r2, r3
 800dde2:	683a      	ldr	r2, [r7, #0]
 800dde4:	429a      	cmp	r2, r3
 800dde6:	d803      	bhi.n	800ddf0 <HAL_SPI_Transmit+0x364>
 800dde8:	683b      	ldr	r3, [r7, #0]
 800ddea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddee:	d102      	bne.n	800ddf6 <HAL_SPI_Transmit+0x36a>
 800ddf0:	683b      	ldr	r3, [r7, #0]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d114      	bne.n	800de20 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ddf6:	68f8      	ldr	r0, [r7, #12]
 800ddf8:	f000 f9d4 	bl	800e1a4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	2200      	movs	r2, #0
 800de00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	2201      	movs	r2, #1
 800de18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800de1c:	2303      	movs	r3, #3
 800de1e:	e02c      	b.n	800de7a <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de26:	b29b      	uxth	r3, r3
 800de28:	2b00      	cmp	r3, #0
 800de2a:	f47f af79 	bne.w	800dd20 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800de2e:	697b      	ldr	r3, [r7, #20]
 800de30:	9300      	str	r3, [sp, #0]
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	2200      	movs	r2, #0
 800de36:	2108      	movs	r1, #8
 800de38:	68f8      	ldr	r0, [r7, #12]
 800de3a:	f000 fa53 	bl	800e2e4 <SPI_WaitOnFlagUntilTimeout>
 800de3e:	4603      	mov	r3, r0
 800de40:	2b00      	cmp	r3, #0
 800de42:	d007      	beq.n	800de54 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de4a:	f043 0220 	orr.w	r2, r3, #32
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800de54:	68f8      	ldr	r0, [r7, #12]
 800de56:	f000 f9a5 	bl	800e1a4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	2200      	movs	r2, #0
 800de5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	2201      	movs	r2, #1
 800de66:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de70:	2b00      	cmp	r3, #0
 800de72:	d001      	beq.n	800de78 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800de74:	2301      	movs	r3, #1
 800de76:	e000      	b.n	800de7a <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800de78:	7efb      	ldrb	r3, [r7, #27]
}
 800de7a:	4618      	mov	r0, r3
 800de7c:	3720      	adds	r7, #32
 800de7e:	46bd      	mov	sp, r7
 800de80:	bd80      	pop	{r7, pc}
 800de82:	bf00      	nop

0800de84 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b088      	sub	sp, #32
 800de88:	af00      	add	r7, sp, #0
 800de8a:	60f8      	str	r0, [r7, #12]
 800de8c:	60b9      	str	r1, [r7, #8]
 800de8e:	603b      	str	r3, [r7, #0]
 800de90:	4613      	mov	r3, r2
 800de92:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800de94:	2300      	movs	r3, #0
 800de96:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	3330      	adds	r3, #48	; 0x30
 800de9e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dea6:	2b01      	cmp	r3, #1
 800dea8:	d101      	bne.n	800deae <HAL_SPI_Receive+0x2a>
 800deaa:	2302      	movs	r3, #2
 800deac:	e173      	b.n	800e196 <HAL_SPI_Receive+0x312>
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	2201      	movs	r2, #1
 800deb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800deb6:	f7f5 f9bd 	bl	8003234 <HAL_GetTick>
 800deba:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dec2:	b2db      	uxtb	r3, r3
 800dec4:	2b01      	cmp	r3, #1
 800dec6:	d007      	beq.n	800ded8 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800dec8:	2302      	movs	r3, #2
 800deca:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	2200      	movs	r2, #0
 800ded0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ded4:	7ffb      	ldrb	r3, [r7, #31]
 800ded6:	e15e      	b.n	800e196 <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ded8:	68bb      	ldr	r3, [r7, #8]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d002      	beq.n	800dee4 <HAL_SPI_Receive+0x60>
 800dede:	88fb      	ldrh	r3, [r7, #6]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d107      	bne.n	800def4 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800dee4:	2301      	movs	r3, #1
 800dee6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	2200      	movs	r2, #0
 800deec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800def0:	7ffb      	ldrb	r3, [r7, #31]
 800def2:	e150      	b.n	800e196 <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	2204      	movs	r2, #4
 800def8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	2200      	movs	r2, #0
 800df00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	68ba      	ldr	r2, [r7, #8]
 800df08:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	88fa      	ldrh	r2, [r7, #6]
 800df0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	88fa      	ldrh	r2, [r7, #6]
 800df16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	2200      	movs	r2, #0
 800df1e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	2200      	movs	r2, #0
 800df24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	2200      	movs	r2, #0
 800df2c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	2200      	movs	r2, #0
 800df34:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	2200      	movs	r2, #0
 800df3a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	689b      	ldr	r3, [r3, #8]
 800df40:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800df44:	d108      	bne.n	800df58 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	681a      	ldr	r2, [r3, #0]
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800df54:	601a      	str	r2, [r3, #0]
 800df56:	e009      	b.n	800df6c <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	68db      	ldr	r3, [r3, #12]
 800df5e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800df6a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	685a      	ldr	r2, [r3, #4]
 800df72:	4b8b      	ldr	r3, [pc, #556]	; (800e1a0 <HAL_SPI_Receive+0x31c>)
 800df74:	4013      	ands	r3, r2
 800df76:	88f9      	ldrh	r1, [r7, #6]
 800df78:	68fa      	ldr	r2, [r7, #12]
 800df7a:	6812      	ldr	r2, [r2, #0]
 800df7c:	430b      	orrs	r3, r1
 800df7e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	681a      	ldr	r2, [r3, #0]
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	f042 0201 	orr.w	r2, r2, #1
 800df8e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800df90:	68fb      	ldr	r3, [r7, #12]
 800df92:	685b      	ldr	r3, [r3, #4]
 800df94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800df98:	d107      	bne.n	800dfaa <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	681a      	ldr	r2, [r3, #0]
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dfa8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	68db      	ldr	r3, [r3, #12]
 800dfae:	2b0f      	cmp	r3, #15
 800dfb0:	d948      	bls.n	800e044 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800dfb2:	e040      	b.n	800e036 <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	695a      	ldr	r2, [r3, #20]
 800dfba:	f248 0308 	movw	r3, #32776	; 0x8008
 800dfbe:	4013      	ands	r3, r2
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d014      	beq.n	800dfee <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	681a      	ldr	r2, [r3, #0]
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfcc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800dfce:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfd4:	1d1a      	adds	r2, r3, #4
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dfe0:	b29b      	uxth	r3, r3
 800dfe2:	3b01      	subs	r3, #1
 800dfe4:	b29a      	uxth	r2, r3
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dfec:	e023      	b.n	800e036 <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dfee:	f7f5 f921 	bl	8003234 <HAL_GetTick>
 800dff2:	4602      	mov	r2, r0
 800dff4:	697b      	ldr	r3, [r7, #20]
 800dff6:	1ad3      	subs	r3, r2, r3
 800dff8:	683a      	ldr	r2, [r7, #0]
 800dffa:	429a      	cmp	r2, r3
 800dffc:	d803      	bhi.n	800e006 <HAL_SPI_Receive+0x182>
 800dffe:	683b      	ldr	r3, [r7, #0]
 800e000:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e004:	d102      	bne.n	800e00c <HAL_SPI_Receive+0x188>
 800e006:	683b      	ldr	r3, [r7, #0]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d114      	bne.n	800e036 <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e00c:	68f8      	ldr	r0, [r7, #12]
 800e00e:	f000 f8c9 	bl	800e1a4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	2200      	movs	r2, #0
 800e016:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e020:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	2201      	movs	r2, #1
 800e02e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800e032:	2303      	movs	r3, #3
 800e034:	e0af      	b.n	800e196 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e03c:	b29b      	uxth	r3, r3
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d1b8      	bne.n	800dfb4 <HAL_SPI_Receive+0x130>
 800e042:	e095      	b.n	800e170 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	68db      	ldr	r3, [r3, #12]
 800e048:	2b07      	cmp	r3, #7
 800e04a:	f240 808b 	bls.w	800e164 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e04e:	e03f      	b.n	800e0d0 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	695b      	ldr	r3, [r3, #20]
 800e056:	f003 0301 	and.w	r3, r3, #1
 800e05a:	2b01      	cmp	r3, #1
 800e05c:	d114      	bne.n	800e088 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e062:	69ba      	ldr	r2, [r7, #24]
 800e064:	8812      	ldrh	r2, [r2, #0]
 800e066:	b292      	uxth	r2, r2
 800e068:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e06e:	1c9a      	adds	r2, r3, #2
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e07a:	b29b      	uxth	r3, r3
 800e07c:	3b01      	subs	r3, #1
 800e07e:	b29a      	uxth	r2, r3
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e086:	e023      	b.n	800e0d0 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e088:	f7f5 f8d4 	bl	8003234 <HAL_GetTick>
 800e08c:	4602      	mov	r2, r0
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	1ad3      	subs	r3, r2, r3
 800e092:	683a      	ldr	r2, [r7, #0]
 800e094:	429a      	cmp	r2, r3
 800e096:	d803      	bhi.n	800e0a0 <HAL_SPI_Receive+0x21c>
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e09e:	d102      	bne.n	800e0a6 <HAL_SPI_Receive+0x222>
 800e0a0:	683b      	ldr	r3, [r7, #0]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d114      	bne.n	800e0d0 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e0a6:	68f8      	ldr	r0, [r7, #12]
 800e0a8:	f000 f87c 	bl	800e1a4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e0ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	2201      	movs	r2, #1
 800e0c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800e0cc:	2303      	movs	r3, #3
 800e0ce:	e062      	b.n	800e196 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e0d6:	b29b      	uxth	r3, r3
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d1b9      	bne.n	800e050 <HAL_SPI_Receive+0x1cc>
 800e0dc:	e048      	b.n	800e170 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	695b      	ldr	r3, [r3, #20]
 800e0e4:	f003 0301 	and.w	r3, r3, #1
 800e0e8:	2b01      	cmp	r3, #1
 800e0ea:	d117      	bne.n	800e11c <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0f8:	7812      	ldrb	r2, [r2, #0]
 800e0fa:	b2d2      	uxtb	r2, r2
 800e0fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e102:	1c5a      	adds	r2, r3, #1
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e10e:	b29b      	uxth	r3, r3
 800e110:	3b01      	subs	r3, #1
 800e112:	b29a      	uxth	r2, r3
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e11a:	e023      	b.n	800e164 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e11c:	f7f5 f88a 	bl	8003234 <HAL_GetTick>
 800e120:	4602      	mov	r2, r0
 800e122:	697b      	ldr	r3, [r7, #20]
 800e124:	1ad3      	subs	r3, r2, r3
 800e126:	683a      	ldr	r2, [r7, #0]
 800e128:	429a      	cmp	r2, r3
 800e12a:	d803      	bhi.n	800e134 <HAL_SPI_Receive+0x2b0>
 800e12c:	683b      	ldr	r3, [r7, #0]
 800e12e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e132:	d102      	bne.n	800e13a <HAL_SPI_Receive+0x2b6>
 800e134:	683b      	ldr	r3, [r7, #0]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d114      	bne.n	800e164 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e13a:	68f8      	ldr	r0, [r7, #12]
 800e13c:	f000 f832 	bl	800e1a4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	2200      	movs	r2, #0
 800e144:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e14e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	2201      	movs	r2, #1
 800e15c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800e160:	2303      	movs	r3, #3
 800e162:	e018      	b.n	800e196 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e16a:	b29b      	uxth	r3, r3
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d1b6      	bne.n	800e0de <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e170:	68f8      	ldr	r0, [r7, #12]
 800e172:	f000 f817 	bl	800e1a4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	2200      	movs	r2, #0
 800e17a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	2201      	movs	r2, #1
 800e182:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d001      	beq.n	800e194 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800e190:	2301      	movs	r3, #1
 800e192:	e000      	b.n	800e196 <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800e194:	7ffb      	ldrb	r3, [r7, #31]
}
 800e196:	4618      	mov	r0, r3
 800e198:	3720      	adds	r7, #32
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}
 800e19e:	bf00      	nop
 800e1a0:	ffff0000 	.word	0xffff0000

0800e1a4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e1a4:	b480      	push	{r7}
 800e1a6:	b085      	sub	sp, #20
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	695b      	ldr	r3, [r3, #20]
 800e1b2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	699a      	ldr	r2, [r3, #24]
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	f042 0208 	orr.w	r2, r2, #8
 800e1c2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	699a      	ldr	r2, [r3, #24]
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	f042 0210 	orr.w	r2, r2, #16
 800e1d2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	681a      	ldr	r2, [r3, #0]
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	f022 0201 	bic.w	r2, r2, #1
 800e1e2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	6919      	ldr	r1, [r3, #16]
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	681a      	ldr	r2, [r3, #0]
 800e1ee:	4b3c      	ldr	r3, [pc, #240]	; (800e2e0 <SPI_CloseTransfer+0x13c>)
 800e1f0:	400b      	ands	r3, r1
 800e1f2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	689a      	ldr	r2, [r3, #8]
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e202:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e20a:	b2db      	uxtb	r3, r3
 800e20c:	2b04      	cmp	r3, #4
 800e20e:	d014      	beq.n	800e23a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	f003 0320 	and.w	r3, r3, #32
 800e216:	2b00      	cmp	r3, #0
 800e218:	d00f      	beq.n	800e23a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e220:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	699a      	ldr	r2, [r3, #24]
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	f042 0220 	orr.w	r2, r2, #32
 800e238:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e240:	b2db      	uxtb	r3, r3
 800e242:	2b03      	cmp	r3, #3
 800e244:	d014      	beq.n	800e270 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d00f      	beq.n	800e270 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e256:	f043 0204 	orr.w	r2, r3, #4
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	699a      	ldr	r2, [r3, #24]
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e26e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e276:	2b00      	cmp	r3, #0
 800e278:	d00f      	beq.n	800e29a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e280:	f043 0201 	orr.w	r2, r3, #1
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	699a      	ldr	r2, [r3, #24]
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e298:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d00f      	beq.n	800e2c4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e2aa:	f043 0208 	orr.w	r2, r3, #8
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	699a      	ldr	r2, [r3, #24]
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e2c2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800e2d4:	bf00      	nop
 800e2d6:	3714      	adds	r7, #20
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2de:	4770      	bx	lr
 800e2e0:	fffffc90 	.word	0xfffffc90

0800e2e4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b084      	sub	sp, #16
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	60f8      	str	r0, [r7, #12]
 800e2ec:	60b9      	str	r1, [r7, #8]
 800e2ee:	603b      	str	r3, [r7, #0]
 800e2f0:	4613      	mov	r3, r2
 800e2f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e2f4:	e010      	b.n	800e318 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e2f6:	f7f4 ff9d 	bl	8003234 <HAL_GetTick>
 800e2fa:	4602      	mov	r2, r0
 800e2fc:	69bb      	ldr	r3, [r7, #24]
 800e2fe:	1ad3      	subs	r3, r2, r3
 800e300:	683a      	ldr	r2, [r7, #0]
 800e302:	429a      	cmp	r2, r3
 800e304:	d803      	bhi.n	800e30e <SPI_WaitOnFlagUntilTimeout+0x2a>
 800e306:	683b      	ldr	r3, [r7, #0]
 800e308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e30c:	d102      	bne.n	800e314 <SPI_WaitOnFlagUntilTimeout+0x30>
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d101      	bne.n	800e318 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800e314:	2303      	movs	r3, #3
 800e316:	e00f      	b.n	800e338 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	695a      	ldr	r2, [r3, #20]
 800e31e:	68bb      	ldr	r3, [r7, #8]
 800e320:	4013      	ands	r3, r2
 800e322:	68ba      	ldr	r2, [r7, #8]
 800e324:	429a      	cmp	r2, r3
 800e326:	bf0c      	ite	eq
 800e328:	2301      	moveq	r3, #1
 800e32a:	2300      	movne	r3, #0
 800e32c:	b2db      	uxtb	r3, r3
 800e32e:	461a      	mov	r2, r3
 800e330:	79fb      	ldrb	r3, [r7, #7]
 800e332:	429a      	cmp	r2, r3
 800e334:	d0df      	beq.n	800e2f6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800e336:	2300      	movs	r3, #0
}
 800e338:	4618      	mov	r0, r3
 800e33a:	3710      	adds	r7, #16
 800e33c:	46bd      	mov	sp, r7
 800e33e:	bd80      	pop	{r7, pc}

0800e340 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800e340:	b480      	push	{r7}
 800e342:	b085      	sub	sp, #20
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e34c:	095b      	lsrs	r3, r3, #5
 800e34e:	3301      	adds	r3, #1
 800e350:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	68db      	ldr	r3, [r3, #12]
 800e356:	3301      	adds	r3, #1
 800e358:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e35a:	68bb      	ldr	r3, [r7, #8]
 800e35c:	3307      	adds	r3, #7
 800e35e:	08db      	lsrs	r3, r3, #3
 800e360:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e362:	68bb      	ldr	r3, [r7, #8]
 800e364:	68fa      	ldr	r2, [r7, #12]
 800e366:	fb02 f303 	mul.w	r3, r2, r3
}
 800e36a:	4618      	mov	r0, r3
 800e36c:	3714      	adds	r7, #20
 800e36e:	46bd      	mov	sp, r7
 800e370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e374:	4770      	bx	lr

0800e376 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e376:	b580      	push	{r7, lr}
 800e378:	b082      	sub	sp, #8
 800e37a:	af00      	add	r7, sp, #0
 800e37c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d101      	bne.n	800e388 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e384:	2301      	movs	r3, #1
 800e386:	e049      	b.n	800e41c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e38e:	b2db      	uxtb	r3, r3
 800e390:	2b00      	cmp	r3, #0
 800e392:	d106      	bne.n	800e3a2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2200      	movs	r2, #0
 800e398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e39c:	6878      	ldr	r0, [r7, #4]
 800e39e:	f7f4 fa49 	bl	8002834 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	2202      	movs	r2, #2
 800e3a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681a      	ldr	r2, [r3, #0]
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	3304      	adds	r3, #4
 800e3b2:	4619      	mov	r1, r3
 800e3b4:	4610      	mov	r0, r2
 800e3b6:	f000 fbb7 	bl	800eb28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	2201      	movs	r2, #1
 800e3be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	2201      	movs	r2, #1
 800e3c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	2201      	movs	r2, #1
 800e3ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	2201      	movs	r2, #1
 800e3d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	2201      	movs	r2, #1
 800e3de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	2201      	movs	r2, #1
 800e3e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	2201      	movs	r2, #1
 800e3ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	2201      	movs	r2, #1
 800e3f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	2201      	movs	r2, #1
 800e3fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	2201      	movs	r2, #1
 800e406:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	2201      	movs	r2, #1
 800e40e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2201      	movs	r2, #1
 800e416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e41a:	2300      	movs	r3, #0
}
 800e41c:	4618      	mov	r0, r3
 800e41e:	3708      	adds	r7, #8
 800e420:	46bd      	mov	sp, r7
 800e422:	bd80      	pop	{r7, pc}

0800e424 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b084      	sub	sp, #16
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
 800e42c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e42e:	683b      	ldr	r3, [r7, #0]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d109      	bne.n	800e448 <HAL_TIM_PWM_Start+0x24>
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e43a:	b2db      	uxtb	r3, r3
 800e43c:	2b01      	cmp	r3, #1
 800e43e:	bf14      	ite	ne
 800e440:	2301      	movne	r3, #1
 800e442:	2300      	moveq	r3, #0
 800e444:	b2db      	uxtb	r3, r3
 800e446:	e03c      	b.n	800e4c2 <HAL_TIM_PWM_Start+0x9e>
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	2b04      	cmp	r3, #4
 800e44c:	d109      	bne.n	800e462 <HAL_TIM_PWM_Start+0x3e>
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e454:	b2db      	uxtb	r3, r3
 800e456:	2b01      	cmp	r3, #1
 800e458:	bf14      	ite	ne
 800e45a:	2301      	movne	r3, #1
 800e45c:	2300      	moveq	r3, #0
 800e45e:	b2db      	uxtb	r3, r3
 800e460:	e02f      	b.n	800e4c2 <HAL_TIM_PWM_Start+0x9e>
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	2b08      	cmp	r3, #8
 800e466:	d109      	bne.n	800e47c <HAL_TIM_PWM_Start+0x58>
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e46e:	b2db      	uxtb	r3, r3
 800e470:	2b01      	cmp	r3, #1
 800e472:	bf14      	ite	ne
 800e474:	2301      	movne	r3, #1
 800e476:	2300      	moveq	r3, #0
 800e478:	b2db      	uxtb	r3, r3
 800e47a:	e022      	b.n	800e4c2 <HAL_TIM_PWM_Start+0x9e>
 800e47c:	683b      	ldr	r3, [r7, #0]
 800e47e:	2b0c      	cmp	r3, #12
 800e480:	d109      	bne.n	800e496 <HAL_TIM_PWM_Start+0x72>
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e488:	b2db      	uxtb	r3, r3
 800e48a:	2b01      	cmp	r3, #1
 800e48c:	bf14      	ite	ne
 800e48e:	2301      	movne	r3, #1
 800e490:	2300      	moveq	r3, #0
 800e492:	b2db      	uxtb	r3, r3
 800e494:	e015      	b.n	800e4c2 <HAL_TIM_PWM_Start+0x9e>
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	2b10      	cmp	r3, #16
 800e49a:	d109      	bne.n	800e4b0 <HAL_TIM_PWM_Start+0x8c>
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e4a2:	b2db      	uxtb	r3, r3
 800e4a4:	2b01      	cmp	r3, #1
 800e4a6:	bf14      	ite	ne
 800e4a8:	2301      	movne	r3, #1
 800e4aa:	2300      	moveq	r3, #0
 800e4ac:	b2db      	uxtb	r3, r3
 800e4ae:	e008      	b.n	800e4c2 <HAL_TIM_PWM_Start+0x9e>
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e4b6:	b2db      	uxtb	r3, r3
 800e4b8:	2b01      	cmp	r3, #1
 800e4ba:	bf14      	ite	ne
 800e4bc:	2301      	movne	r3, #1
 800e4be:	2300      	moveq	r3, #0
 800e4c0:	b2db      	uxtb	r3, r3
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d001      	beq.n	800e4ca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e4c6:	2301      	movs	r3, #1
 800e4c8:	e0ab      	b.n	800e622 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e4ca:	683b      	ldr	r3, [r7, #0]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d104      	bne.n	800e4da <HAL_TIM_PWM_Start+0xb6>
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	2202      	movs	r2, #2
 800e4d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e4d8:	e023      	b.n	800e522 <HAL_TIM_PWM_Start+0xfe>
 800e4da:	683b      	ldr	r3, [r7, #0]
 800e4dc:	2b04      	cmp	r3, #4
 800e4de:	d104      	bne.n	800e4ea <HAL_TIM_PWM_Start+0xc6>
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	2202      	movs	r2, #2
 800e4e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e4e8:	e01b      	b.n	800e522 <HAL_TIM_PWM_Start+0xfe>
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	2b08      	cmp	r3, #8
 800e4ee:	d104      	bne.n	800e4fa <HAL_TIM_PWM_Start+0xd6>
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2202      	movs	r2, #2
 800e4f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e4f8:	e013      	b.n	800e522 <HAL_TIM_PWM_Start+0xfe>
 800e4fa:	683b      	ldr	r3, [r7, #0]
 800e4fc:	2b0c      	cmp	r3, #12
 800e4fe:	d104      	bne.n	800e50a <HAL_TIM_PWM_Start+0xe6>
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	2202      	movs	r2, #2
 800e504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e508:	e00b      	b.n	800e522 <HAL_TIM_PWM_Start+0xfe>
 800e50a:	683b      	ldr	r3, [r7, #0]
 800e50c:	2b10      	cmp	r3, #16
 800e50e:	d104      	bne.n	800e51a <HAL_TIM_PWM_Start+0xf6>
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	2202      	movs	r2, #2
 800e514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e518:	e003      	b.n	800e522 <HAL_TIM_PWM_Start+0xfe>
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	2202      	movs	r2, #2
 800e51e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	2201      	movs	r2, #1
 800e528:	6839      	ldr	r1, [r7, #0]
 800e52a:	4618      	mov	r0, r3
 800e52c:	f000 fe78 	bl	800f220 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	4a3d      	ldr	r2, [pc, #244]	; (800e62c <HAL_TIM_PWM_Start+0x208>)
 800e536:	4293      	cmp	r3, r2
 800e538:	d013      	beq.n	800e562 <HAL_TIM_PWM_Start+0x13e>
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	4a3c      	ldr	r2, [pc, #240]	; (800e630 <HAL_TIM_PWM_Start+0x20c>)
 800e540:	4293      	cmp	r3, r2
 800e542:	d00e      	beq.n	800e562 <HAL_TIM_PWM_Start+0x13e>
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	4a3a      	ldr	r2, [pc, #232]	; (800e634 <HAL_TIM_PWM_Start+0x210>)
 800e54a:	4293      	cmp	r3, r2
 800e54c:	d009      	beq.n	800e562 <HAL_TIM_PWM_Start+0x13e>
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	4a39      	ldr	r2, [pc, #228]	; (800e638 <HAL_TIM_PWM_Start+0x214>)
 800e554:	4293      	cmp	r3, r2
 800e556:	d004      	beq.n	800e562 <HAL_TIM_PWM_Start+0x13e>
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	4a37      	ldr	r2, [pc, #220]	; (800e63c <HAL_TIM_PWM_Start+0x218>)
 800e55e:	4293      	cmp	r3, r2
 800e560:	d101      	bne.n	800e566 <HAL_TIM_PWM_Start+0x142>
 800e562:	2301      	movs	r3, #1
 800e564:	e000      	b.n	800e568 <HAL_TIM_PWM_Start+0x144>
 800e566:	2300      	movs	r3, #0
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d007      	beq.n	800e57c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e57a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	4a2a      	ldr	r2, [pc, #168]	; (800e62c <HAL_TIM_PWM_Start+0x208>)
 800e582:	4293      	cmp	r3, r2
 800e584:	d02c      	beq.n	800e5e0 <HAL_TIM_PWM_Start+0x1bc>
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e58e:	d027      	beq.n	800e5e0 <HAL_TIM_PWM_Start+0x1bc>
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	4a2a      	ldr	r2, [pc, #168]	; (800e640 <HAL_TIM_PWM_Start+0x21c>)
 800e596:	4293      	cmp	r3, r2
 800e598:	d022      	beq.n	800e5e0 <HAL_TIM_PWM_Start+0x1bc>
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	4a29      	ldr	r2, [pc, #164]	; (800e644 <HAL_TIM_PWM_Start+0x220>)
 800e5a0:	4293      	cmp	r3, r2
 800e5a2:	d01d      	beq.n	800e5e0 <HAL_TIM_PWM_Start+0x1bc>
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	4a27      	ldr	r2, [pc, #156]	; (800e648 <HAL_TIM_PWM_Start+0x224>)
 800e5aa:	4293      	cmp	r3, r2
 800e5ac:	d018      	beq.n	800e5e0 <HAL_TIM_PWM_Start+0x1bc>
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	4a1f      	ldr	r2, [pc, #124]	; (800e630 <HAL_TIM_PWM_Start+0x20c>)
 800e5b4:	4293      	cmp	r3, r2
 800e5b6:	d013      	beq.n	800e5e0 <HAL_TIM_PWM_Start+0x1bc>
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	4a23      	ldr	r2, [pc, #140]	; (800e64c <HAL_TIM_PWM_Start+0x228>)
 800e5be:	4293      	cmp	r3, r2
 800e5c0:	d00e      	beq.n	800e5e0 <HAL_TIM_PWM_Start+0x1bc>
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	4a1b      	ldr	r2, [pc, #108]	; (800e634 <HAL_TIM_PWM_Start+0x210>)
 800e5c8:	4293      	cmp	r3, r2
 800e5ca:	d009      	beq.n	800e5e0 <HAL_TIM_PWM_Start+0x1bc>
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	4a1f      	ldr	r2, [pc, #124]	; (800e650 <HAL_TIM_PWM_Start+0x22c>)
 800e5d2:	4293      	cmp	r3, r2
 800e5d4:	d004      	beq.n	800e5e0 <HAL_TIM_PWM_Start+0x1bc>
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	4a1e      	ldr	r2, [pc, #120]	; (800e654 <HAL_TIM_PWM_Start+0x230>)
 800e5dc:	4293      	cmp	r3, r2
 800e5de:	d115      	bne.n	800e60c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	689a      	ldr	r2, [r3, #8]
 800e5e6:	4b1c      	ldr	r3, [pc, #112]	; (800e658 <HAL_TIM_PWM_Start+0x234>)
 800e5e8:	4013      	ands	r3, r2
 800e5ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	2b06      	cmp	r3, #6
 800e5f0:	d015      	beq.n	800e61e <HAL_TIM_PWM_Start+0x1fa>
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e5f8:	d011      	beq.n	800e61e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	681a      	ldr	r2, [r3, #0]
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	f042 0201 	orr.w	r2, r2, #1
 800e608:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e60a:	e008      	b.n	800e61e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	681a      	ldr	r2, [r3, #0]
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	f042 0201 	orr.w	r2, r2, #1
 800e61a:	601a      	str	r2, [r3, #0]
 800e61c:	e000      	b.n	800e620 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e61e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e620:	2300      	movs	r3, #0
}
 800e622:	4618      	mov	r0, r3
 800e624:	3710      	adds	r7, #16
 800e626:	46bd      	mov	sp, r7
 800e628:	bd80      	pop	{r7, pc}
 800e62a:	bf00      	nop
 800e62c:	40010000 	.word	0x40010000
 800e630:	40010400 	.word	0x40010400
 800e634:	40014000 	.word	0x40014000
 800e638:	40014400 	.word	0x40014400
 800e63c:	40014800 	.word	0x40014800
 800e640:	40000400 	.word	0x40000400
 800e644:	40000800 	.word	0x40000800
 800e648:	40000c00 	.word	0x40000c00
 800e64c:	40001800 	.word	0x40001800
 800e650:	4000e000 	.word	0x4000e000
 800e654:	4000e400 	.word	0x4000e400
 800e658:	00010007 	.word	0x00010007

0800e65c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b082      	sub	sp, #8
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	691b      	ldr	r3, [r3, #16]
 800e66a:	f003 0302 	and.w	r3, r3, #2
 800e66e:	2b02      	cmp	r3, #2
 800e670:	d122      	bne.n	800e6b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	68db      	ldr	r3, [r3, #12]
 800e678:	f003 0302 	and.w	r3, r3, #2
 800e67c:	2b02      	cmp	r3, #2
 800e67e:	d11b      	bne.n	800e6b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	f06f 0202 	mvn.w	r2, #2
 800e688:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	2201      	movs	r2, #1
 800e68e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	699b      	ldr	r3, [r3, #24]
 800e696:	f003 0303 	and.w	r3, r3, #3
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d003      	beq.n	800e6a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e69e:	6878      	ldr	r0, [r7, #4]
 800e6a0:	f000 fa24 	bl	800eaec <HAL_TIM_IC_CaptureCallback>
 800e6a4:	e005      	b.n	800e6b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e6a6:	6878      	ldr	r0, [r7, #4]
 800e6a8:	f000 fa16 	bl	800ead8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	f000 fa27 	bl	800eb00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	2200      	movs	r2, #0
 800e6b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	691b      	ldr	r3, [r3, #16]
 800e6be:	f003 0304 	and.w	r3, r3, #4
 800e6c2:	2b04      	cmp	r3, #4
 800e6c4:	d122      	bne.n	800e70c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	68db      	ldr	r3, [r3, #12]
 800e6cc:	f003 0304 	and.w	r3, r3, #4
 800e6d0:	2b04      	cmp	r3, #4
 800e6d2:	d11b      	bne.n	800e70c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	f06f 0204 	mvn.w	r2, #4
 800e6dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	2202      	movs	r2, #2
 800e6e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	699b      	ldr	r3, [r3, #24]
 800e6ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d003      	beq.n	800e6fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e6f2:	6878      	ldr	r0, [r7, #4]
 800e6f4:	f000 f9fa 	bl	800eaec <HAL_TIM_IC_CaptureCallback>
 800e6f8:	e005      	b.n	800e706 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e6fa:	6878      	ldr	r0, [r7, #4]
 800e6fc:	f000 f9ec 	bl	800ead8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e700:	6878      	ldr	r0, [r7, #4]
 800e702:	f000 f9fd 	bl	800eb00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	2200      	movs	r2, #0
 800e70a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	691b      	ldr	r3, [r3, #16]
 800e712:	f003 0308 	and.w	r3, r3, #8
 800e716:	2b08      	cmp	r3, #8
 800e718:	d122      	bne.n	800e760 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	68db      	ldr	r3, [r3, #12]
 800e720:	f003 0308 	and.w	r3, r3, #8
 800e724:	2b08      	cmp	r3, #8
 800e726:	d11b      	bne.n	800e760 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	f06f 0208 	mvn.w	r2, #8
 800e730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	2204      	movs	r2, #4
 800e736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	69db      	ldr	r3, [r3, #28]
 800e73e:	f003 0303 	and.w	r3, r3, #3
 800e742:	2b00      	cmp	r3, #0
 800e744:	d003      	beq.n	800e74e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e746:	6878      	ldr	r0, [r7, #4]
 800e748:	f000 f9d0 	bl	800eaec <HAL_TIM_IC_CaptureCallback>
 800e74c:	e005      	b.n	800e75a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e74e:	6878      	ldr	r0, [r7, #4]
 800e750:	f000 f9c2 	bl	800ead8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e754:	6878      	ldr	r0, [r7, #4]
 800e756:	f000 f9d3 	bl	800eb00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	2200      	movs	r2, #0
 800e75e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	691b      	ldr	r3, [r3, #16]
 800e766:	f003 0310 	and.w	r3, r3, #16
 800e76a:	2b10      	cmp	r3, #16
 800e76c:	d122      	bne.n	800e7b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	68db      	ldr	r3, [r3, #12]
 800e774:	f003 0310 	and.w	r3, r3, #16
 800e778:	2b10      	cmp	r3, #16
 800e77a:	d11b      	bne.n	800e7b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	f06f 0210 	mvn.w	r2, #16
 800e784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	2208      	movs	r2, #8
 800e78a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	69db      	ldr	r3, [r3, #28]
 800e792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e796:	2b00      	cmp	r3, #0
 800e798:	d003      	beq.n	800e7a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e79a:	6878      	ldr	r0, [r7, #4]
 800e79c:	f000 f9a6 	bl	800eaec <HAL_TIM_IC_CaptureCallback>
 800e7a0:	e005      	b.n	800e7ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e7a2:	6878      	ldr	r0, [r7, #4]
 800e7a4:	f000 f998 	bl	800ead8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	f000 f9a9 	bl	800eb00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	691b      	ldr	r3, [r3, #16]
 800e7ba:	f003 0301 	and.w	r3, r3, #1
 800e7be:	2b01      	cmp	r3, #1
 800e7c0:	d10e      	bne.n	800e7e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	68db      	ldr	r3, [r3, #12]
 800e7c8:	f003 0301 	and.w	r3, r3, #1
 800e7cc:	2b01      	cmp	r3, #1
 800e7ce:	d107      	bne.n	800e7e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	f06f 0201 	mvn.w	r2, #1
 800e7d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e7da:	6878      	ldr	r0, [r7, #4]
 800e7dc:	f000 f972 	bl	800eac4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	691b      	ldr	r3, [r3, #16]
 800e7e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7ea:	2b80      	cmp	r3, #128	; 0x80
 800e7ec:	d10e      	bne.n	800e80c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	68db      	ldr	r3, [r3, #12]
 800e7f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7f8:	2b80      	cmp	r3, #128	; 0x80
 800e7fa:	d107      	bne.n	800e80c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e806:	6878      	ldr	r0, [r7, #4]
 800e808:	f000 fdd6 	bl	800f3b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	691b      	ldr	r3, [r3, #16]
 800e812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e81a:	d10e      	bne.n	800e83a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	68db      	ldr	r3, [r3, #12]
 800e822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e826:	2b80      	cmp	r3, #128	; 0x80
 800e828:	d107      	bne.n	800e83a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e832:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e834:	6878      	ldr	r0, [r7, #4]
 800e836:	f000 fdc9 	bl	800f3cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	691b      	ldr	r3, [r3, #16]
 800e840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e844:	2b40      	cmp	r3, #64	; 0x40
 800e846:	d10e      	bne.n	800e866 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	68db      	ldr	r3, [r3, #12]
 800e84e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e852:	2b40      	cmp	r3, #64	; 0x40
 800e854:	d107      	bne.n	800e866 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e85e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e860:	6878      	ldr	r0, [r7, #4]
 800e862:	f000 f957 	bl	800eb14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	691b      	ldr	r3, [r3, #16]
 800e86c:	f003 0320 	and.w	r3, r3, #32
 800e870:	2b20      	cmp	r3, #32
 800e872:	d10e      	bne.n	800e892 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	68db      	ldr	r3, [r3, #12]
 800e87a:	f003 0320 	and.w	r3, r3, #32
 800e87e:	2b20      	cmp	r3, #32
 800e880:	d107      	bne.n	800e892 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	f06f 0220 	mvn.w	r2, #32
 800e88a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e88c:	6878      	ldr	r0, [r7, #4]
 800e88e:	f000 fd89 	bl	800f3a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e892:	bf00      	nop
 800e894:	3708      	adds	r7, #8
 800e896:	46bd      	mov	sp, r7
 800e898:	bd80      	pop	{r7, pc}
	...

0800e89c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b086      	sub	sp, #24
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	60f8      	str	r0, [r7, #12]
 800e8a4:	60b9      	str	r1, [r7, #8]
 800e8a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e8b2:	2b01      	cmp	r3, #1
 800e8b4:	d101      	bne.n	800e8ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e8b6:	2302      	movs	r3, #2
 800e8b8:	e0ff      	b.n	800eaba <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	2201      	movs	r2, #1
 800e8be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	2b14      	cmp	r3, #20
 800e8c6:	f200 80f0 	bhi.w	800eaaa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e8ca:	a201      	add	r2, pc, #4	; (adr r2, 800e8d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e8cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8d0:	0800e925 	.word	0x0800e925
 800e8d4:	0800eaab 	.word	0x0800eaab
 800e8d8:	0800eaab 	.word	0x0800eaab
 800e8dc:	0800eaab 	.word	0x0800eaab
 800e8e0:	0800e965 	.word	0x0800e965
 800e8e4:	0800eaab 	.word	0x0800eaab
 800e8e8:	0800eaab 	.word	0x0800eaab
 800e8ec:	0800eaab 	.word	0x0800eaab
 800e8f0:	0800e9a7 	.word	0x0800e9a7
 800e8f4:	0800eaab 	.word	0x0800eaab
 800e8f8:	0800eaab 	.word	0x0800eaab
 800e8fc:	0800eaab 	.word	0x0800eaab
 800e900:	0800e9e7 	.word	0x0800e9e7
 800e904:	0800eaab 	.word	0x0800eaab
 800e908:	0800eaab 	.word	0x0800eaab
 800e90c:	0800eaab 	.word	0x0800eaab
 800e910:	0800ea29 	.word	0x0800ea29
 800e914:	0800eaab 	.word	0x0800eaab
 800e918:	0800eaab 	.word	0x0800eaab
 800e91c:	0800eaab 	.word	0x0800eaab
 800e920:	0800ea69 	.word	0x0800ea69
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	68b9      	ldr	r1, [r7, #8]
 800e92a:	4618      	mov	r0, r3
 800e92c:	f000 f9a2 	bl	800ec74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	699a      	ldr	r2, [r3, #24]
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	f042 0208 	orr.w	r2, r2, #8
 800e93e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	699a      	ldr	r2, [r3, #24]
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	f022 0204 	bic.w	r2, r2, #4
 800e94e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	6999      	ldr	r1, [r3, #24]
 800e956:	68bb      	ldr	r3, [r7, #8]
 800e958:	691a      	ldr	r2, [r3, #16]
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	430a      	orrs	r2, r1
 800e960:	619a      	str	r2, [r3, #24]
      break;
 800e962:	e0a5      	b.n	800eab0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	68b9      	ldr	r1, [r7, #8]
 800e96a:	4618      	mov	r0, r3
 800e96c:	f000 fa12 	bl	800ed94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	699a      	ldr	r2, [r3, #24]
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e97e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	699a      	ldr	r2, [r3, #24]
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e98e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	6999      	ldr	r1, [r3, #24]
 800e996:	68bb      	ldr	r3, [r7, #8]
 800e998:	691b      	ldr	r3, [r3, #16]
 800e99a:	021a      	lsls	r2, r3, #8
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	430a      	orrs	r2, r1
 800e9a2:	619a      	str	r2, [r3, #24]
      break;
 800e9a4:	e084      	b.n	800eab0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	68b9      	ldr	r1, [r7, #8]
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	f000 fa7b 	bl	800eea8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	69da      	ldr	r2, [r3, #28]
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	f042 0208 	orr.w	r2, r2, #8
 800e9c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	69da      	ldr	r2, [r3, #28]
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	f022 0204 	bic.w	r2, r2, #4
 800e9d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	69d9      	ldr	r1, [r3, #28]
 800e9d8:	68bb      	ldr	r3, [r7, #8]
 800e9da:	691a      	ldr	r2, [r3, #16]
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	430a      	orrs	r2, r1
 800e9e2:	61da      	str	r2, [r3, #28]
      break;
 800e9e4:	e064      	b.n	800eab0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	68b9      	ldr	r1, [r7, #8]
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	f000 fae3 	bl	800efb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	69da      	ldr	r2, [r3, #28]
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ea00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	69da      	ldr	r2, [r3, #28]
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ea10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	69d9      	ldr	r1, [r3, #28]
 800ea18:	68bb      	ldr	r3, [r7, #8]
 800ea1a:	691b      	ldr	r3, [r3, #16]
 800ea1c:	021a      	lsls	r2, r3, #8
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	430a      	orrs	r2, r1
 800ea24:	61da      	str	r2, [r3, #28]
      break;
 800ea26:	e043      	b.n	800eab0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	68b9      	ldr	r1, [r7, #8]
 800ea2e:	4618      	mov	r0, r3
 800ea30:	f000 fb2c 	bl	800f08c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	f042 0208 	orr.w	r2, r2, #8
 800ea42:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	f022 0204 	bic.w	r2, r2, #4
 800ea52:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ea5a:	68bb      	ldr	r3, [r7, #8]
 800ea5c:	691a      	ldr	r2, [r3, #16]
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	430a      	orrs	r2, r1
 800ea64:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ea66:	e023      	b.n	800eab0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	68b9      	ldr	r1, [r7, #8]
 800ea6e:	4618      	mov	r0, r3
 800ea70:	f000 fb70 	bl	800f154 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ea82:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ea92:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ea9a:	68bb      	ldr	r3, [r7, #8]
 800ea9c:	691b      	ldr	r3, [r3, #16]
 800ea9e:	021a      	lsls	r2, r3, #8
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	430a      	orrs	r2, r1
 800eaa6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800eaa8:	e002      	b.n	800eab0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800eaaa:	2301      	movs	r3, #1
 800eaac:	75fb      	strb	r3, [r7, #23]
      break;
 800eaae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	2200      	movs	r2, #0
 800eab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800eab8:	7dfb      	ldrb	r3, [r7, #23]
}
 800eaba:	4618      	mov	r0, r3
 800eabc:	3718      	adds	r7, #24
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bd80      	pop	{r7, pc}
 800eac2:	bf00      	nop

0800eac4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800eac4:	b480      	push	{r7}
 800eac6:	b083      	sub	sp, #12
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800eacc:	bf00      	nop
 800eace:	370c      	adds	r7, #12
 800ead0:	46bd      	mov	sp, r7
 800ead2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead6:	4770      	bx	lr

0800ead8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ead8:	b480      	push	{r7}
 800eada:	b083      	sub	sp, #12
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800eae0:	bf00      	nop
 800eae2:	370c      	adds	r7, #12
 800eae4:	46bd      	mov	sp, r7
 800eae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaea:	4770      	bx	lr

0800eaec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800eaec:	b480      	push	{r7}
 800eaee:	b083      	sub	sp, #12
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800eaf4:	bf00      	nop
 800eaf6:	370c      	adds	r7, #12
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafe:	4770      	bx	lr

0800eb00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800eb00:	b480      	push	{r7}
 800eb02:	b083      	sub	sp, #12
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800eb08:	bf00      	nop
 800eb0a:	370c      	adds	r7, #12
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb12:	4770      	bx	lr

0800eb14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800eb14:	b480      	push	{r7}
 800eb16:	b083      	sub	sp, #12
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800eb1c:	bf00      	nop
 800eb1e:	370c      	adds	r7, #12
 800eb20:	46bd      	mov	sp, r7
 800eb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb26:	4770      	bx	lr

0800eb28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800eb28:	b480      	push	{r7}
 800eb2a:	b085      	sub	sp, #20
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
 800eb30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	4a44      	ldr	r2, [pc, #272]	; (800ec4c <TIM_Base_SetConfig+0x124>)
 800eb3c:	4293      	cmp	r3, r2
 800eb3e:	d013      	beq.n	800eb68 <TIM_Base_SetConfig+0x40>
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eb46:	d00f      	beq.n	800eb68 <TIM_Base_SetConfig+0x40>
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	4a41      	ldr	r2, [pc, #260]	; (800ec50 <TIM_Base_SetConfig+0x128>)
 800eb4c:	4293      	cmp	r3, r2
 800eb4e:	d00b      	beq.n	800eb68 <TIM_Base_SetConfig+0x40>
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	4a40      	ldr	r2, [pc, #256]	; (800ec54 <TIM_Base_SetConfig+0x12c>)
 800eb54:	4293      	cmp	r3, r2
 800eb56:	d007      	beq.n	800eb68 <TIM_Base_SetConfig+0x40>
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	4a3f      	ldr	r2, [pc, #252]	; (800ec58 <TIM_Base_SetConfig+0x130>)
 800eb5c:	4293      	cmp	r3, r2
 800eb5e:	d003      	beq.n	800eb68 <TIM_Base_SetConfig+0x40>
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	4a3e      	ldr	r2, [pc, #248]	; (800ec5c <TIM_Base_SetConfig+0x134>)
 800eb64:	4293      	cmp	r3, r2
 800eb66:	d108      	bne.n	800eb7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	685b      	ldr	r3, [r3, #4]
 800eb74:	68fa      	ldr	r2, [r7, #12]
 800eb76:	4313      	orrs	r3, r2
 800eb78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	4a33      	ldr	r2, [pc, #204]	; (800ec4c <TIM_Base_SetConfig+0x124>)
 800eb7e:	4293      	cmp	r3, r2
 800eb80:	d027      	beq.n	800ebd2 <TIM_Base_SetConfig+0xaa>
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eb88:	d023      	beq.n	800ebd2 <TIM_Base_SetConfig+0xaa>
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	4a30      	ldr	r2, [pc, #192]	; (800ec50 <TIM_Base_SetConfig+0x128>)
 800eb8e:	4293      	cmp	r3, r2
 800eb90:	d01f      	beq.n	800ebd2 <TIM_Base_SetConfig+0xaa>
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	4a2f      	ldr	r2, [pc, #188]	; (800ec54 <TIM_Base_SetConfig+0x12c>)
 800eb96:	4293      	cmp	r3, r2
 800eb98:	d01b      	beq.n	800ebd2 <TIM_Base_SetConfig+0xaa>
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	4a2e      	ldr	r2, [pc, #184]	; (800ec58 <TIM_Base_SetConfig+0x130>)
 800eb9e:	4293      	cmp	r3, r2
 800eba0:	d017      	beq.n	800ebd2 <TIM_Base_SetConfig+0xaa>
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	4a2d      	ldr	r2, [pc, #180]	; (800ec5c <TIM_Base_SetConfig+0x134>)
 800eba6:	4293      	cmp	r3, r2
 800eba8:	d013      	beq.n	800ebd2 <TIM_Base_SetConfig+0xaa>
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	4a2c      	ldr	r2, [pc, #176]	; (800ec60 <TIM_Base_SetConfig+0x138>)
 800ebae:	4293      	cmp	r3, r2
 800ebb0:	d00f      	beq.n	800ebd2 <TIM_Base_SetConfig+0xaa>
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	4a2b      	ldr	r2, [pc, #172]	; (800ec64 <TIM_Base_SetConfig+0x13c>)
 800ebb6:	4293      	cmp	r3, r2
 800ebb8:	d00b      	beq.n	800ebd2 <TIM_Base_SetConfig+0xaa>
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	4a2a      	ldr	r2, [pc, #168]	; (800ec68 <TIM_Base_SetConfig+0x140>)
 800ebbe:	4293      	cmp	r3, r2
 800ebc0:	d007      	beq.n	800ebd2 <TIM_Base_SetConfig+0xaa>
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	4a29      	ldr	r2, [pc, #164]	; (800ec6c <TIM_Base_SetConfig+0x144>)
 800ebc6:	4293      	cmp	r3, r2
 800ebc8:	d003      	beq.n	800ebd2 <TIM_Base_SetConfig+0xaa>
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	4a28      	ldr	r2, [pc, #160]	; (800ec70 <TIM_Base_SetConfig+0x148>)
 800ebce:	4293      	cmp	r3, r2
 800ebd0:	d108      	bne.n	800ebe4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ebd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ebda:	683b      	ldr	r3, [r7, #0]
 800ebdc:	68db      	ldr	r3, [r3, #12]
 800ebde:	68fa      	ldr	r2, [r7, #12]
 800ebe0:	4313      	orrs	r3, r2
 800ebe2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ebea:	683b      	ldr	r3, [r7, #0]
 800ebec:	695b      	ldr	r3, [r3, #20]
 800ebee:	4313      	orrs	r3, r2
 800ebf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	68fa      	ldr	r2, [r7, #12]
 800ebf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ebf8:	683b      	ldr	r3, [r7, #0]
 800ebfa:	689a      	ldr	r2, [r3, #8]
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ec00:	683b      	ldr	r3, [r7, #0]
 800ec02:	681a      	ldr	r2, [r3, #0]
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	4a10      	ldr	r2, [pc, #64]	; (800ec4c <TIM_Base_SetConfig+0x124>)
 800ec0c:	4293      	cmp	r3, r2
 800ec0e:	d00f      	beq.n	800ec30 <TIM_Base_SetConfig+0x108>
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	4a12      	ldr	r2, [pc, #72]	; (800ec5c <TIM_Base_SetConfig+0x134>)
 800ec14:	4293      	cmp	r3, r2
 800ec16:	d00b      	beq.n	800ec30 <TIM_Base_SetConfig+0x108>
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	4a11      	ldr	r2, [pc, #68]	; (800ec60 <TIM_Base_SetConfig+0x138>)
 800ec1c:	4293      	cmp	r3, r2
 800ec1e:	d007      	beq.n	800ec30 <TIM_Base_SetConfig+0x108>
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	4a10      	ldr	r2, [pc, #64]	; (800ec64 <TIM_Base_SetConfig+0x13c>)
 800ec24:	4293      	cmp	r3, r2
 800ec26:	d003      	beq.n	800ec30 <TIM_Base_SetConfig+0x108>
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	4a0f      	ldr	r2, [pc, #60]	; (800ec68 <TIM_Base_SetConfig+0x140>)
 800ec2c:	4293      	cmp	r3, r2
 800ec2e:	d103      	bne.n	800ec38 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ec30:	683b      	ldr	r3, [r7, #0]
 800ec32:	691a      	ldr	r2, [r3, #16]
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2201      	movs	r2, #1
 800ec3c:	615a      	str	r2, [r3, #20]
}
 800ec3e:	bf00      	nop
 800ec40:	3714      	adds	r7, #20
 800ec42:	46bd      	mov	sp, r7
 800ec44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec48:	4770      	bx	lr
 800ec4a:	bf00      	nop
 800ec4c:	40010000 	.word	0x40010000
 800ec50:	40000400 	.word	0x40000400
 800ec54:	40000800 	.word	0x40000800
 800ec58:	40000c00 	.word	0x40000c00
 800ec5c:	40010400 	.word	0x40010400
 800ec60:	40014000 	.word	0x40014000
 800ec64:	40014400 	.word	0x40014400
 800ec68:	40014800 	.word	0x40014800
 800ec6c:	4000e000 	.word	0x4000e000
 800ec70:	4000e400 	.word	0x4000e400

0800ec74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ec74:	b480      	push	{r7}
 800ec76:	b087      	sub	sp, #28
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
 800ec7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	6a1b      	ldr	r3, [r3, #32]
 800ec82:	f023 0201 	bic.w	r2, r3, #1
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	6a1b      	ldr	r3, [r3, #32]
 800ec8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	685b      	ldr	r3, [r3, #4]
 800ec94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	699b      	ldr	r3, [r3, #24]
 800ec9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ec9c:	68fa      	ldr	r2, [r7, #12]
 800ec9e:	4b37      	ldr	r3, [pc, #220]	; (800ed7c <TIM_OC1_SetConfig+0x108>)
 800eca0:	4013      	ands	r3, r2
 800eca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	f023 0303 	bic.w	r3, r3, #3
 800ecaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ecac:	683b      	ldr	r3, [r7, #0]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	68fa      	ldr	r2, [r7, #12]
 800ecb2:	4313      	orrs	r3, r2
 800ecb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ecb6:	697b      	ldr	r3, [r7, #20]
 800ecb8:	f023 0302 	bic.w	r3, r3, #2
 800ecbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	689b      	ldr	r3, [r3, #8]
 800ecc2:	697a      	ldr	r2, [r7, #20]
 800ecc4:	4313      	orrs	r3, r2
 800ecc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	4a2d      	ldr	r2, [pc, #180]	; (800ed80 <TIM_OC1_SetConfig+0x10c>)
 800eccc:	4293      	cmp	r3, r2
 800ecce:	d00f      	beq.n	800ecf0 <TIM_OC1_SetConfig+0x7c>
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	4a2c      	ldr	r2, [pc, #176]	; (800ed84 <TIM_OC1_SetConfig+0x110>)
 800ecd4:	4293      	cmp	r3, r2
 800ecd6:	d00b      	beq.n	800ecf0 <TIM_OC1_SetConfig+0x7c>
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	4a2b      	ldr	r2, [pc, #172]	; (800ed88 <TIM_OC1_SetConfig+0x114>)
 800ecdc:	4293      	cmp	r3, r2
 800ecde:	d007      	beq.n	800ecf0 <TIM_OC1_SetConfig+0x7c>
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	4a2a      	ldr	r2, [pc, #168]	; (800ed8c <TIM_OC1_SetConfig+0x118>)
 800ece4:	4293      	cmp	r3, r2
 800ece6:	d003      	beq.n	800ecf0 <TIM_OC1_SetConfig+0x7c>
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	4a29      	ldr	r2, [pc, #164]	; (800ed90 <TIM_OC1_SetConfig+0x11c>)
 800ecec:	4293      	cmp	r3, r2
 800ecee:	d10c      	bne.n	800ed0a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ecf0:	697b      	ldr	r3, [r7, #20]
 800ecf2:	f023 0308 	bic.w	r3, r3, #8
 800ecf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ecf8:	683b      	ldr	r3, [r7, #0]
 800ecfa:	68db      	ldr	r3, [r3, #12]
 800ecfc:	697a      	ldr	r2, [r7, #20]
 800ecfe:	4313      	orrs	r3, r2
 800ed00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ed02:	697b      	ldr	r3, [r7, #20]
 800ed04:	f023 0304 	bic.w	r3, r3, #4
 800ed08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	4a1c      	ldr	r2, [pc, #112]	; (800ed80 <TIM_OC1_SetConfig+0x10c>)
 800ed0e:	4293      	cmp	r3, r2
 800ed10:	d00f      	beq.n	800ed32 <TIM_OC1_SetConfig+0xbe>
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	4a1b      	ldr	r2, [pc, #108]	; (800ed84 <TIM_OC1_SetConfig+0x110>)
 800ed16:	4293      	cmp	r3, r2
 800ed18:	d00b      	beq.n	800ed32 <TIM_OC1_SetConfig+0xbe>
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	4a1a      	ldr	r2, [pc, #104]	; (800ed88 <TIM_OC1_SetConfig+0x114>)
 800ed1e:	4293      	cmp	r3, r2
 800ed20:	d007      	beq.n	800ed32 <TIM_OC1_SetConfig+0xbe>
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	4a19      	ldr	r2, [pc, #100]	; (800ed8c <TIM_OC1_SetConfig+0x118>)
 800ed26:	4293      	cmp	r3, r2
 800ed28:	d003      	beq.n	800ed32 <TIM_OC1_SetConfig+0xbe>
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	4a18      	ldr	r2, [pc, #96]	; (800ed90 <TIM_OC1_SetConfig+0x11c>)
 800ed2e:	4293      	cmp	r3, r2
 800ed30:	d111      	bne.n	800ed56 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ed32:	693b      	ldr	r3, [r7, #16]
 800ed34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ed38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ed3a:	693b      	ldr	r3, [r7, #16]
 800ed3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ed40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ed42:	683b      	ldr	r3, [r7, #0]
 800ed44:	695b      	ldr	r3, [r3, #20]
 800ed46:	693a      	ldr	r2, [r7, #16]
 800ed48:	4313      	orrs	r3, r2
 800ed4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	699b      	ldr	r3, [r3, #24]
 800ed50:	693a      	ldr	r2, [r7, #16]
 800ed52:	4313      	orrs	r3, r2
 800ed54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	693a      	ldr	r2, [r7, #16]
 800ed5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	68fa      	ldr	r2, [r7, #12]
 800ed60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ed62:	683b      	ldr	r3, [r7, #0]
 800ed64:	685a      	ldr	r2, [r3, #4]
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	697a      	ldr	r2, [r7, #20]
 800ed6e:	621a      	str	r2, [r3, #32]
}
 800ed70:	bf00      	nop
 800ed72:	371c      	adds	r7, #28
 800ed74:	46bd      	mov	sp, r7
 800ed76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7a:	4770      	bx	lr
 800ed7c:	fffeff8f 	.word	0xfffeff8f
 800ed80:	40010000 	.word	0x40010000
 800ed84:	40010400 	.word	0x40010400
 800ed88:	40014000 	.word	0x40014000
 800ed8c:	40014400 	.word	0x40014400
 800ed90:	40014800 	.word	0x40014800

0800ed94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ed94:	b480      	push	{r7}
 800ed96:	b087      	sub	sp, #28
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
 800ed9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	6a1b      	ldr	r3, [r3, #32]
 800eda2:	f023 0210 	bic.w	r2, r3, #16
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	6a1b      	ldr	r3, [r3, #32]
 800edae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	685b      	ldr	r3, [r3, #4]
 800edb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	699b      	ldr	r3, [r3, #24]
 800edba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800edbc:	68fa      	ldr	r2, [r7, #12]
 800edbe:	4b34      	ldr	r3, [pc, #208]	; (800ee90 <TIM_OC2_SetConfig+0xfc>)
 800edc0:	4013      	ands	r3, r2
 800edc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800edca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800edcc:	683b      	ldr	r3, [r7, #0]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	021b      	lsls	r3, r3, #8
 800edd2:	68fa      	ldr	r2, [r7, #12]
 800edd4:	4313      	orrs	r3, r2
 800edd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800edd8:	697b      	ldr	r3, [r7, #20]
 800edda:	f023 0320 	bic.w	r3, r3, #32
 800edde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ede0:	683b      	ldr	r3, [r7, #0]
 800ede2:	689b      	ldr	r3, [r3, #8]
 800ede4:	011b      	lsls	r3, r3, #4
 800ede6:	697a      	ldr	r2, [r7, #20]
 800ede8:	4313      	orrs	r3, r2
 800edea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	4a29      	ldr	r2, [pc, #164]	; (800ee94 <TIM_OC2_SetConfig+0x100>)
 800edf0:	4293      	cmp	r3, r2
 800edf2:	d003      	beq.n	800edfc <TIM_OC2_SetConfig+0x68>
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	4a28      	ldr	r2, [pc, #160]	; (800ee98 <TIM_OC2_SetConfig+0x104>)
 800edf8:	4293      	cmp	r3, r2
 800edfa:	d10d      	bne.n	800ee18 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800edfc:	697b      	ldr	r3, [r7, #20]
 800edfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ee02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ee04:	683b      	ldr	r3, [r7, #0]
 800ee06:	68db      	ldr	r3, [r3, #12]
 800ee08:	011b      	lsls	r3, r3, #4
 800ee0a:	697a      	ldr	r2, [r7, #20]
 800ee0c:	4313      	orrs	r3, r2
 800ee0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ee16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	4a1e      	ldr	r2, [pc, #120]	; (800ee94 <TIM_OC2_SetConfig+0x100>)
 800ee1c:	4293      	cmp	r3, r2
 800ee1e:	d00f      	beq.n	800ee40 <TIM_OC2_SetConfig+0xac>
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	4a1d      	ldr	r2, [pc, #116]	; (800ee98 <TIM_OC2_SetConfig+0x104>)
 800ee24:	4293      	cmp	r3, r2
 800ee26:	d00b      	beq.n	800ee40 <TIM_OC2_SetConfig+0xac>
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	4a1c      	ldr	r2, [pc, #112]	; (800ee9c <TIM_OC2_SetConfig+0x108>)
 800ee2c:	4293      	cmp	r3, r2
 800ee2e:	d007      	beq.n	800ee40 <TIM_OC2_SetConfig+0xac>
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	4a1b      	ldr	r2, [pc, #108]	; (800eea0 <TIM_OC2_SetConfig+0x10c>)
 800ee34:	4293      	cmp	r3, r2
 800ee36:	d003      	beq.n	800ee40 <TIM_OC2_SetConfig+0xac>
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	4a1a      	ldr	r2, [pc, #104]	; (800eea4 <TIM_OC2_SetConfig+0x110>)
 800ee3c:	4293      	cmp	r3, r2
 800ee3e:	d113      	bne.n	800ee68 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ee40:	693b      	ldr	r3, [r7, #16]
 800ee42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ee46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ee48:	693b      	ldr	r3, [r7, #16]
 800ee4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ee4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ee50:	683b      	ldr	r3, [r7, #0]
 800ee52:	695b      	ldr	r3, [r3, #20]
 800ee54:	009b      	lsls	r3, r3, #2
 800ee56:	693a      	ldr	r2, [r7, #16]
 800ee58:	4313      	orrs	r3, r2
 800ee5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ee5c:	683b      	ldr	r3, [r7, #0]
 800ee5e:	699b      	ldr	r3, [r3, #24]
 800ee60:	009b      	lsls	r3, r3, #2
 800ee62:	693a      	ldr	r2, [r7, #16]
 800ee64:	4313      	orrs	r3, r2
 800ee66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	693a      	ldr	r2, [r7, #16]
 800ee6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	68fa      	ldr	r2, [r7, #12]
 800ee72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ee74:	683b      	ldr	r3, [r7, #0]
 800ee76:	685a      	ldr	r2, [r3, #4]
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	697a      	ldr	r2, [r7, #20]
 800ee80:	621a      	str	r2, [r3, #32]
}
 800ee82:	bf00      	nop
 800ee84:	371c      	adds	r7, #28
 800ee86:	46bd      	mov	sp, r7
 800ee88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8c:	4770      	bx	lr
 800ee8e:	bf00      	nop
 800ee90:	feff8fff 	.word	0xfeff8fff
 800ee94:	40010000 	.word	0x40010000
 800ee98:	40010400 	.word	0x40010400
 800ee9c:	40014000 	.word	0x40014000
 800eea0:	40014400 	.word	0x40014400
 800eea4:	40014800 	.word	0x40014800

0800eea8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eea8:	b480      	push	{r7}
 800eeaa:	b087      	sub	sp, #28
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
 800eeb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	6a1b      	ldr	r3, [r3, #32]
 800eeb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	6a1b      	ldr	r3, [r3, #32]
 800eec2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	685b      	ldr	r3, [r3, #4]
 800eec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	69db      	ldr	r3, [r3, #28]
 800eece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800eed0:	68fa      	ldr	r2, [r7, #12]
 800eed2:	4b33      	ldr	r3, [pc, #204]	; (800efa0 <TIM_OC3_SetConfig+0xf8>)
 800eed4:	4013      	ands	r3, r2
 800eed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	f023 0303 	bic.w	r3, r3, #3
 800eede:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800eee0:	683b      	ldr	r3, [r7, #0]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	68fa      	ldr	r2, [r7, #12]
 800eee6:	4313      	orrs	r3, r2
 800eee8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800eeea:	697b      	ldr	r3, [r7, #20]
 800eeec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800eef0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800eef2:	683b      	ldr	r3, [r7, #0]
 800eef4:	689b      	ldr	r3, [r3, #8]
 800eef6:	021b      	lsls	r3, r3, #8
 800eef8:	697a      	ldr	r2, [r7, #20]
 800eefa:	4313      	orrs	r3, r2
 800eefc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	4a28      	ldr	r2, [pc, #160]	; (800efa4 <TIM_OC3_SetConfig+0xfc>)
 800ef02:	4293      	cmp	r3, r2
 800ef04:	d003      	beq.n	800ef0e <TIM_OC3_SetConfig+0x66>
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	4a27      	ldr	r2, [pc, #156]	; (800efa8 <TIM_OC3_SetConfig+0x100>)
 800ef0a:	4293      	cmp	r3, r2
 800ef0c:	d10d      	bne.n	800ef2a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ef0e:	697b      	ldr	r3, [r7, #20]
 800ef10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ef14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ef16:	683b      	ldr	r3, [r7, #0]
 800ef18:	68db      	ldr	r3, [r3, #12]
 800ef1a:	021b      	lsls	r3, r3, #8
 800ef1c:	697a      	ldr	r2, [r7, #20]
 800ef1e:	4313      	orrs	r3, r2
 800ef20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ef22:	697b      	ldr	r3, [r7, #20]
 800ef24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ef28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	4a1d      	ldr	r2, [pc, #116]	; (800efa4 <TIM_OC3_SetConfig+0xfc>)
 800ef2e:	4293      	cmp	r3, r2
 800ef30:	d00f      	beq.n	800ef52 <TIM_OC3_SetConfig+0xaa>
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	4a1c      	ldr	r2, [pc, #112]	; (800efa8 <TIM_OC3_SetConfig+0x100>)
 800ef36:	4293      	cmp	r3, r2
 800ef38:	d00b      	beq.n	800ef52 <TIM_OC3_SetConfig+0xaa>
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	4a1b      	ldr	r2, [pc, #108]	; (800efac <TIM_OC3_SetConfig+0x104>)
 800ef3e:	4293      	cmp	r3, r2
 800ef40:	d007      	beq.n	800ef52 <TIM_OC3_SetConfig+0xaa>
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	4a1a      	ldr	r2, [pc, #104]	; (800efb0 <TIM_OC3_SetConfig+0x108>)
 800ef46:	4293      	cmp	r3, r2
 800ef48:	d003      	beq.n	800ef52 <TIM_OC3_SetConfig+0xaa>
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	4a19      	ldr	r2, [pc, #100]	; (800efb4 <TIM_OC3_SetConfig+0x10c>)
 800ef4e:	4293      	cmp	r3, r2
 800ef50:	d113      	bne.n	800ef7a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ef52:	693b      	ldr	r3, [r7, #16]
 800ef54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ef58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ef5a:	693b      	ldr	r3, [r7, #16]
 800ef5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ef60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ef62:	683b      	ldr	r3, [r7, #0]
 800ef64:	695b      	ldr	r3, [r3, #20]
 800ef66:	011b      	lsls	r3, r3, #4
 800ef68:	693a      	ldr	r2, [r7, #16]
 800ef6a:	4313      	orrs	r3, r2
 800ef6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ef6e:	683b      	ldr	r3, [r7, #0]
 800ef70:	699b      	ldr	r3, [r3, #24]
 800ef72:	011b      	lsls	r3, r3, #4
 800ef74:	693a      	ldr	r2, [r7, #16]
 800ef76:	4313      	orrs	r3, r2
 800ef78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	693a      	ldr	r2, [r7, #16]
 800ef7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	68fa      	ldr	r2, [r7, #12]
 800ef84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ef86:	683b      	ldr	r3, [r7, #0]
 800ef88:	685a      	ldr	r2, [r3, #4]
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	697a      	ldr	r2, [r7, #20]
 800ef92:	621a      	str	r2, [r3, #32]
}
 800ef94:	bf00      	nop
 800ef96:	371c      	adds	r7, #28
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9e:	4770      	bx	lr
 800efa0:	fffeff8f 	.word	0xfffeff8f
 800efa4:	40010000 	.word	0x40010000
 800efa8:	40010400 	.word	0x40010400
 800efac:	40014000 	.word	0x40014000
 800efb0:	40014400 	.word	0x40014400
 800efb4:	40014800 	.word	0x40014800

0800efb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800efb8:	b480      	push	{r7}
 800efba:	b087      	sub	sp, #28
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
 800efc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	6a1b      	ldr	r3, [r3, #32]
 800efc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	6a1b      	ldr	r3, [r3, #32]
 800efd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	685b      	ldr	r3, [r3, #4]
 800efd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	69db      	ldr	r3, [r3, #28]
 800efde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800efe0:	68fa      	ldr	r2, [r7, #12]
 800efe2:	4b24      	ldr	r3, [pc, #144]	; (800f074 <TIM_OC4_SetConfig+0xbc>)
 800efe4:	4013      	ands	r3, r2
 800efe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800efee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	021b      	lsls	r3, r3, #8
 800eff6:	68fa      	ldr	r2, [r7, #12]
 800eff8:	4313      	orrs	r3, r2
 800effa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800effc:	693b      	ldr	r3, [r7, #16]
 800effe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f002:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f004:	683b      	ldr	r3, [r7, #0]
 800f006:	689b      	ldr	r3, [r3, #8]
 800f008:	031b      	lsls	r3, r3, #12
 800f00a:	693a      	ldr	r2, [r7, #16]
 800f00c:	4313      	orrs	r3, r2
 800f00e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	4a19      	ldr	r2, [pc, #100]	; (800f078 <TIM_OC4_SetConfig+0xc0>)
 800f014:	4293      	cmp	r3, r2
 800f016:	d00f      	beq.n	800f038 <TIM_OC4_SetConfig+0x80>
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	4a18      	ldr	r2, [pc, #96]	; (800f07c <TIM_OC4_SetConfig+0xc4>)
 800f01c:	4293      	cmp	r3, r2
 800f01e:	d00b      	beq.n	800f038 <TIM_OC4_SetConfig+0x80>
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	4a17      	ldr	r2, [pc, #92]	; (800f080 <TIM_OC4_SetConfig+0xc8>)
 800f024:	4293      	cmp	r3, r2
 800f026:	d007      	beq.n	800f038 <TIM_OC4_SetConfig+0x80>
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	4a16      	ldr	r2, [pc, #88]	; (800f084 <TIM_OC4_SetConfig+0xcc>)
 800f02c:	4293      	cmp	r3, r2
 800f02e:	d003      	beq.n	800f038 <TIM_OC4_SetConfig+0x80>
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	4a15      	ldr	r2, [pc, #84]	; (800f088 <TIM_OC4_SetConfig+0xd0>)
 800f034:	4293      	cmp	r3, r2
 800f036:	d109      	bne.n	800f04c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f038:	697b      	ldr	r3, [r7, #20]
 800f03a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f03e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f040:	683b      	ldr	r3, [r7, #0]
 800f042:	695b      	ldr	r3, [r3, #20]
 800f044:	019b      	lsls	r3, r3, #6
 800f046:	697a      	ldr	r2, [r7, #20]
 800f048:	4313      	orrs	r3, r2
 800f04a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	697a      	ldr	r2, [r7, #20]
 800f050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	68fa      	ldr	r2, [r7, #12]
 800f056:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f058:	683b      	ldr	r3, [r7, #0]
 800f05a:	685a      	ldr	r2, [r3, #4]
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	693a      	ldr	r2, [r7, #16]
 800f064:	621a      	str	r2, [r3, #32]
}
 800f066:	bf00      	nop
 800f068:	371c      	adds	r7, #28
 800f06a:	46bd      	mov	sp, r7
 800f06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f070:	4770      	bx	lr
 800f072:	bf00      	nop
 800f074:	feff8fff 	.word	0xfeff8fff
 800f078:	40010000 	.word	0x40010000
 800f07c:	40010400 	.word	0x40010400
 800f080:	40014000 	.word	0x40014000
 800f084:	40014400 	.word	0x40014400
 800f088:	40014800 	.word	0x40014800

0800f08c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f08c:	b480      	push	{r7}
 800f08e:	b087      	sub	sp, #28
 800f090:	af00      	add	r7, sp, #0
 800f092:	6078      	str	r0, [r7, #4]
 800f094:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	6a1b      	ldr	r3, [r3, #32]
 800f09a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	6a1b      	ldr	r3, [r3, #32]
 800f0a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	685b      	ldr	r3, [r3, #4]
 800f0ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f0b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f0b4:	68fa      	ldr	r2, [r7, #12]
 800f0b6:	4b21      	ldr	r3, [pc, #132]	; (800f13c <TIM_OC5_SetConfig+0xb0>)
 800f0b8:	4013      	ands	r3, r2
 800f0ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f0bc:	683b      	ldr	r3, [r7, #0]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	68fa      	ldr	r2, [r7, #12]
 800f0c2:	4313      	orrs	r3, r2
 800f0c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f0c6:	693b      	ldr	r3, [r7, #16]
 800f0c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f0cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f0ce:	683b      	ldr	r3, [r7, #0]
 800f0d0:	689b      	ldr	r3, [r3, #8]
 800f0d2:	041b      	lsls	r3, r3, #16
 800f0d4:	693a      	ldr	r2, [r7, #16]
 800f0d6:	4313      	orrs	r3, r2
 800f0d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	4a18      	ldr	r2, [pc, #96]	; (800f140 <TIM_OC5_SetConfig+0xb4>)
 800f0de:	4293      	cmp	r3, r2
 800f0e0:	d00f      	beq.n	800f102 <TIM_OC5_SetConfig+0x76>
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	4a17      	ldr	r2, [pc, #92]	; (800f144 <TIM_OC5_SetConfig+0xb8>)
 800f0e6:	4293      	cmp	r3, r2
 800f0e8:	d00b      	beq.n	800f102 <TIM_OC5_SetConfig+0x76>
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	4a16      	ldr	r2, [pc, #88]	; (800f148 <TIM_OC5_SetConfig+0xbc>)
 800f0ee:	4293      	cmp	r3, r2
 800f0f0:	d007      	beq.n	800f102 <TIM_OC5_SetConfig+0x76>
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	4a15      	ldr	r2, [pc, #84]	; (800f14c <TIM_OC5_SetConfig+0xc0>)
 800f0f6:	4293      	cmp	r3, r2
 800f0f8:	d003      	beq.n	800f102 <TIM_OC5_SetConfig+0x76>
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	4a14      	ldr	r2, [pc, #80]	; (800f150 <TIM_OC5_SetConfig+0xc4>)
 800f0fe:	4293      	cmp	r3, r2
 800f100:	d109      	bne.n	800f116 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f102:	697b      	ldr	r3, [r7, #20]
 800f104:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f108:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f10a:	683b      	ldr	r3, [r7, #0]
 800f10c:	695b      	ldr	r3, [r3, #20]
 800f10e:	021b      	lsls	r3, r3, #8
 800f110:	697a      	ldr	r2, [r7, #20]
 800f112:	4313      	orrs	r3, r2
 800f114:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	697a      	ldr	r2, [r7, #20]
 800f11a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	68fa      	ldr	r2, [r7, #12]
 800f120:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f122:	683b      	ldr	r3, [r7, #0]
 800f124:	685a      	ldr	r2, [r3, #4]
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	693a      	ldr	r2, [r7, #16]
 800f12e:	621a      	str	r2, [r3, #32]
}
 800f130:	bf00      	nop
 800f132:	371c      	adds	r7, #28
 800f134:	46bd      	mov	sp, r7
 800f136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13a:	4770      	bx	lr
 800f13c:	fffeff8f 	.word	0xfffeff8f
 800f140:	40010000 	.word	0x40010000
 800f144:	40010400 	.word	0x40010400
 800f148:	40014000 	.word	0x40014000
 800f14c:	40014400 	.word	0x40014400
 800f150:	40014800 	.word	0x40014800

0800f154 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f154:	b480      	push	{r7}
 800f156:	b087      	sub	sp, #28
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
 800f15c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	6a1b      	ldr	r3, [r3, #32]
 800f162:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	6a1b      	ldr	r3, [r3, #32]
 800f16e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	685b      	ldr	r3, [r3, #4]
 800f174:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f17a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f17c:	68fa      	ldr	r2, [r7, #12]
 800f17e:	4b22      	ldr	r3, [pc, #136]	; (800f208 <TIM_OC6_SetConfig+0xb4>)
 800f180:	4013      	ands	r3, r2
 800f182:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f184:	683b      	ldr	r3, [r7, #0]
 800f186:	681b      	ldr	r3, [r3, #0]
 800f188:	021b      	lsls	r3, r3, #8
 800f18a:	68fa      	ldr	r2, [r7, #12]
 800f18c:	4313      	orrs	r3, r2
 800f18e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f190:	693b      	ldr	r3, [r7, #16]
 800f192:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f196:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f198:	683b      	ldr	r3, [r7, #0]
 800f19a:	689b      	ldr	r3, [r3, #8]
 800f19c:	051b      	lsls	r3, r3, #20
 800f19e:	693a      	ldr	r2, [r7, #16]
 800f1a0:	4313      	orrs	r3, r2
 800f1a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	4a19      	ldr	r2, [pc, #100]	; (800f20c <TIM_OC6_SetConfig+0xb8>)
 800f1a8:	4293      	cmp	r3, r2
 800f1aa:	d00f      	beq.n	800f1cc <TIM_OC6_SetConfig+0x78>
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	4a18      	ldr	r2, [pc, #96]	; (800f210 <TIM_OC6_SetConfig+0xbc>)
 800f1b0:	4293      	cmp	r3, r2
 800f1b2:	d00b      	beq.n	800f1cc <TIM_OC6_SetConfig+0x78>
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	4a17      	ldr	r2, [pc, #92]	; (800f214 <TIM_OC6_SetConfig+0xc0>)
 800f1b8:	4293      	cmp	r3, r2
 800f1ba:	d007      	beq.n	800f1cc <TIM_OC6_SetConfig+0x78>
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	4a16      	ldr	r2, [pc, #88]	; (800f218 <TIM_OC6_SetConfig+0xc4>)
 800f1c0:	4293      	cmp	r3, r2
 800f1c2:	d003      	beq.n	800f1cc <TIM_OC6_SetConfig+0x78>
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	4a15      	ldr	r2, [pc, #84]	; (800f21c <TIM_OC6_SetConfig+0xc8>)
 800f1c8:	4293      	cmp	r3, r2
 800f1ca:	d109      	bne.n	800f1e0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f1cc:	697b      	ldr	r3, [r7, #20]
 800f1ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f1d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	695b      	ldr	r3, [r3, #20]
 800f1d8:	029b      	lsls	r3, r3, #10
 800f1da:	697a      	ldr	r2, [r7, #20]
 800f1dc:	4313      	orrs	r3, r2
 800f1de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	697a      	ldr	r2, [r7, #20]
 800f1e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	68fa      	ldr	r2, [r7, #12]
 800f1ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	685a      	ldr	r2, [r3, #4]
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	693a      	ldr	r2, [r7, #16]
 800f1f8:	621a      	str	r2, [r3, #32]
}
 800f1fa:	bf00      	nop
 800f1fc:	371c      	adds	r7, #28
 800f1fe:	46bd      	mov	sp, r7
 800f200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f204:	4770      	bx	lr
 800f206:	bf00      	nop
 800f208:	feff8fff 	.word	0xfeff8fff
 800f20c:	40010000 	.word	0x40010000
 800f210:	40010400 	.word	0x40010400
 800f214:	40014000 	.word	0x40014000
 800f218:	40014400 	.word	0x40014400
 800f21c:	40014800 	.word	0x40014800

0800f220 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f220:	b480      	push	{r7}
 800f222:	b087      	sub	sp, #28
 800f224:	af00      	add	r7, sp, #0
 800f226:	60f8      	str	r0, [r7, #12]
 800f228:	60b9      	str	r1, [r7, #8]
 800f22a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f22c:	68bb      	ldr	r3, [r7, #8]
 800f22e:	f003 031f 	and.w	r3, r3, #31
 800f232:	2201      	movs	r2, #1
 800f234:	fa02 f303 	lsl.w	r3, r2, r3
 800f238:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	6a1a      	ldr	r2, [r3, #32]
 800f23e:	697b      	ldr	r3, [r7, #20]
 800f240:	43db      	mvns	r3, r3
 800f242:	401a      	ands	r2, r3
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	6a1a      	ldr	r2, [r3, #32]
 800f24c:	68bb      	ldr	r3, [r7, #8]
 800f24e:	f003 031f 	and.w	r3, r3, #31
 800f252:	6879      	ldr	r1, [r7, #4]
 800f254:	fa01 f303 	lsl.w	r3, r1, r3
 800f258:	431a      	orrs	r2, r3
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	621a      	str	r2, [r3, #32]
}
 800f25e:	bf00      	nop
 800f260:	371c      	adds	r7, #28
 800f262:	46bd      	mov	sp, r7
 800f264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f268:	4770      	bx	lr
	...

0800f26c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f26c:	b480      	push	{r7}
 800f26e:	b085      	sub	sp, #20
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
 800f274:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f27c:	2b01      	cmp	r3, #1
 800f27e:	d101      	bne.n	800f284 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f280:	2302      	movs	r3, #2
 800f282:	e077      	b.n	800f374 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	2201      	movs	r2, #1
 800f288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	2202      	movs	r2, #2
 800f290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	685b      	ldr	r3, [r3, #4]
 800f29a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	689b      	ldr	r3, [r3, #8]
 800f2a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	4a35      	ldr	r2, [pc, #212]	; (800f380 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f2aa:	4293      	cmp	r3, r2
 800f2ac:	d004      	beq.n	800f2b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	4a34      	ldr	r2, [pc, #208]	; (800f384 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f2b4:	4293      	cmp	r3, r2
 800f2b6:	d108      	bne.n	800f2ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f2be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	685b      	ldr	r3, [r3, #4]
 800f2c4:	68fa      	ldr	r2, [r7, #12]
 800f2c6:	4313      	orrs	r3, r2
 800f2c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f2d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f2d2:	683b      	ldr	r3, [r7, #0]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	68fa      	ldr	r2, [r7, #12]
 800f2d8:	4313      	orrs	r3, r2
 800f2da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	68fa      	ldr	r2, [r7, #12]
 800f2e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	4a25      	ldr	r2, [pc, #148]	; (800f380 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f2ea:	4293      	cmp	r3, r2
 800f2ec:	d02c      	beq.n	800f348 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f2f6:	d027      	beq.n	800f348 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	4a22      	ldr	r2, [pc, #136]	; (800f388 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800f2fe:	4293      	cmp	r3, r2
 800f300:	d022      	beq.n	800f348 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	4a21      	ldr	r2, [pc, #132]	; (800f38c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800f308:	4293      	cmp	r3, r2
 800f30a:	d01d      	beq.n	800f348 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	4a1f      	ldr	r2, [pc, #124]	; (800f390 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800f312:	4293      	cmp	r3, r2
 800f314:	d018      	beq.n	800f348 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	4a1a      	ldr	r2, [pc, #104]	; (800f384 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f31c:	4293      	cmp	r3, r2
 800f31e:	d013      	beq.n	800f348 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	4a1b      	ldr	r2, [pc, #108]	; (800f394 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f326:	4293      	cmp	r3, r2
 800f328:	d00e      	beq.n	800f348 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	4a1a      	ldr	r2, [pc, #104]	; (800f398 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800f330:	4293      	cmp	r3, r2
 800f332:	d009      	beq.n	800f348 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	4a18      	ldr	r2, [pc, #96]	; (800f39c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800f33a:	4293      	cmp	r3, r2
 800f33c:	d004      	beq.n	800f348 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	4a17      	ldr	r2, [pc, #92]	; (800f3a0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800f344:	4293      	cmp	r3, r2
 800f346:	d10c      	bne.n	800f362 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f348:	68bb      	ldr	r3, [r7, #8]
 800f34a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f34e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f350:	683b      	ldr	r3, [r7, #0]
 800f352:	689b      	ldr	r3, [r3, #8]
 800f354:	68ba      	ldr	r2, [r7, #8]
 800f356:	4313      	orrs	r3, r2
 800f358:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	68ba      	ldr	r2, [r7, #8]
 800f360:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	2201      	movs	r2, #1
 800f366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	2200      	movs	r2, #0
 800f36e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f372:	2300      	movs	r3, #0
}
 800f374:	4618      	mov	r0, r3
 800f376:	3714      	adds	r7, #20
 800f378:	46bd      	mov	sp, r7
 800f37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37e:	4770      	bx	lr
 800f380:	40010000 	.word	0x40010000
 800f384:	40010400 	.word	0x40010400
 800f388:	40000400 	.word	0x40000400
 800f38c:	40000800 	.word	0x40000800
 800f390:	40000c00 	.word	0x40000c00
 800f394:	40001800 	.word	0x40001800
 800f398:	40014000 	.word	0x40014000
 800f39c:	4000e000 	.word	0x4000e000
 800f3a0:	4000e400 	.word	0x4000e400

0800f3a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f3a4:	b480      	push	{r7}
 800f3a6:	b083      	sub	sp, #12
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f3ac:	bf00      	nop
 800f3ae:	370c      	adds	r7, #12
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b6:	4770      	bx	lr

0800f3b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f3b8:	b480      	push	{r7}
 800f3ba:	b083      	sub	sp, #12
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f3c0:	bf00      	nop
 800f3c2:	370c      	adds	r7, #12
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ca:	4770      	bx	lr

0800f3cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f3cc:	b480      	push	{r7}
 800f3ce:	b083      	sub	sp, #12
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f3d4:	bf00      	nop
 800f3d6:	370c      	adds	r7, #12
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3de:	4770      	bx	lr

0800f3e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b082      	sub	sp, #8
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d101      	bne.n	800f3f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f3ee:	2301      	movs	r3, #1
 800f3f0:	e042      	b.n	800f478 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d106      	bne.n	800f40a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	2200      	movs	r2, #0
 800f400:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f404:	6878      	ldr	r0, [r7, #4]
 800f406:	f7f3 fc6f 	bl	8002ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	2224      	movs	r2, #36	; 0x24
 800f40e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	681a      	ldr	r2, [r3, #0]
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	f022 0201 	bic.w	r2, r2, #1
 800f420:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f422:	6878      	ldr	r0, [r7, #4]
 800f424:	f000 f82c 	bl	800f480 <UART_SetConfig>
 800f428:	4603      	mov	r3, r0
 800f42a:	2b01      	cmp	r3, #1
 800f42c:	d101      	bne.n	800f432 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800f42e:	2301      	movs	r3, #1
 800f430:	e022      	b.n	800f478 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f436:	2b00      	cmp	r3, #0
 800f438:	d002      	beq.n	800f440 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800f43a:	6878      	ldr	r0, [r7, #4]
 800f43c:	f000 fe8c 	bl	8010158 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	685a      	ldr	r2, [r3, #4]
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f44e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	689a      	ldr	r2, [r3, #8]
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f45e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	681a      	ldr	r2, [r3, #0]
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	f042 0201 	orr.w	r2, r2, #1
 800f46e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f470:	6878      	ldr	r0, [r7, #4]
 800f472:	f000 ff13 	bl	801029c <UART_CheckIdleState>
 800f476:	4603      	mov	r3, r0
}
 800f478:	4618      	mov	r0, r3
 800f47a:	3708      	adds	r7, #8
 800f47c:	46bd      	mov	sp, r7
 800f47e:	bd80      	pop	{r7, pc}

0800f480 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f480:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f484:	b092      	sub	sp, #72	; 0x48
 800f486:	af00      	add	r7, sp, #0
 800f488:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f48a:	2300      	movs	r3, #0
 800f48c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f490:	697b      	ldr	r3, [r7, #20]
 800f492:	689a      	ldr	r2, [r3, #8]
 800f494:	697b      	ldr	r3, [r7, #20]
 800f496:	691b      	ldr	r3, [r3, #16]
 800f498:	431a      	orrs	r2, r3
 800f49a:	697b      	ldr	r3, [r7, #20]
 800f49c:	695b      	ldr	r3, [r3, #20]
 800f49e:	431a      	orrs	r2, r3
 800f4a0:	697b      	ldr	r3, [r7, #20]
 800f4a2:	69db      	ldr	r3, [r3, #28]
 800f4a4:	4313      	orrs	r3, r2
 800f4a6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f4a8:	697b      	ldr	r3, [r7, #20]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	681a      	ldr	r2, [r3, #0]
 800f4ae:	4bbe      	ldr	r3, [pc, #760]	; (800f7a8 <UART_SetConfig+0x328>)
 800f4b0:	4013      	ands	r3, r2
 800f4b2:	697a      	ldr	r2, [r7, #20]
 800f4b4:	6812      	ldr	r2, [r2, #0]
 800f4b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f4b8:	430b      	orrs	r3, r1
 800f4ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f4bc:	697b      	ldr	r3, [r7, #20]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	685b      	ldr	r3, [r3, #4]
 800f4c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f4c6:	697b      	ldr	r3, [r7, #20]
 800f4c8:	68da      	ldr	r2, [r3, #12]
 800f4ca:	697b      	ldr	r3, [r7, #20]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	430a      	orrs	r2, r1
 800f4d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f4d2:	697b      	ldr	r3, [r7, #20]
 800f4d4:	699b      	ldr	r3, [r3, #24]
 800f4d6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f4d8:	697b      	ldr	r3, [r7, #20]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	4ab3      	ldr	r2, [pc, #716]	; (800f7ac <UART_SetConfig+0x32c>)
 800f4de:	4293      	cmp	r3, r2
 800f4e0:	d004      	beq.n	800f4ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f4e2:	697b      	ldr	r3, [r7, #20]
 800f4e4:	6a1b      	ldr	r3, [r3, #32]
 800f4e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f4e8:	4313      	orrs	r3, r2
 800f4ea:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f4ec:	697b      	ldr	r3, [r7, #20]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	689a      	ldr	r2, [r3, #8]
 800f4f2:	4baf      	ldr	r3, [pc, #700]	; (800f7b0 <UART_SetConfig+0x330>)
 800f4f4:	4013      	ands	r3, r2
 800f4f6:	697a      	ldr	r2, [r7, #20]
 800f4f8:	6812      	ldr	r2, [r2, #0]
 800f4fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f4fc:	430b      	orrs	r3, r1
 800f4fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f500:	697b      	ldr	r3, [r7, #20]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f506:	f023 010f 	bic.w	r1, r3, #15
 800f50a:	697b      	ldr	r3, [r7, #20]
 800f50c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f50e:	697b      	ldr	r3, [r7, #20]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	430a      	orrs	r2, r1
 800f514:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f516:	697b      	ldr	r3, [r7, #20]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	4aa6      	ldr	r2, [pc, #664]	; (800f7b4 <UART_SetConfig+0x334>)
 800f51c:	4293      	cmp	r3, r2
 800f51e:	d177      	bne.n	800f610 <UART_SetConfig+0x190>
 800f520:	4ba5      	ldr	r3, [pc, #660]	; (800f7b8 <UART_SetConfig+0x338>)
 800f522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f524:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f528:	2b28      	cmp	r3, #40	; 0x28
 800f52a:	d86d      	bhi.n	800f608 <UART_SetConfig+0x188>
 800f52c:	a201      	add	r2, pc, #4	; (adr r2, 800f534 <UART_SetConfig+0xb4>)
 800f52e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f532:	bf00      	nop
 800f534:	0800f5d9 	.word	0x0800f5d9
 800f538:	0800f609 	.word	0x0800f609
 800f53c:	0800f609 	.word	0x0800f609
 800f540:	0800f609 	.word	0x0800f609
 800f544:	0800f609 	.word	0x0800f609
 800f548:	0800f609 	.word	0x0800f609
 800f54c:	0800f609 	.word	0x0800f609
 800f550:	0800f609 	.word	0x0800f609
 800f554:	0800f5e1 	.word	0x0800f5e1
 800f558:	0800f609 	.word	0x0800f609
 800f55c:	0800f609 	.word	0x0800f609
 800f560:	0800f609 	.word	0x0800f609
 800f564:	0800f609 	.word	0x0800f609
 800f568:	0800f609 	.word	0x0800f609
 800f56c:	0800f609 	.word	0x0800f609
 800f570:	0800f609 	.word	0x0800f609
 800f574:	0800f5e9 	.word	0x0800f5e9
 800f578:	0800f609 	.word	0x0800f609
 800f57c:	0800f609 	.word	0x0800f609
 800f580:	0800f609 	.word	0x0800f609
 800f584:	0800f609 	.word	0x0800f609
 800f588:	0800f609 	.word	0x0800f609
 800f58c:	0800f609 	.word	0x0800f609
 800f590:	0800f609 	.word	0x0800f609
 800f594:	0800f5f1 	.word	0x0800f5f1
 800f598:	0800f609 	.word	0x0800f609
 800f59c:	0800f609 	.word	0x0800f609
 800f5a0:	0800f609 	.word	0x0800f609
 800f5a4:	0800f609 	.word	0x0800f609
 800f5a8:	0800f609 	.word	0x0800f609
 800f5ac:	0800f609 	.word	0x0800f609
 800f5b0:	0800f609 	.word	0x0800f609
 800f5b4:	0800f5f9 	.word	0x0800f5f9
 800f5b8:	0800f609 	.word	0x0800f609
 800f5bc:	0800f609 	.word	0x0800f609
 800f5c0:	0800f609 	.word	0x0800f609
 800f5c4:	0800f609 	.word	0x0800f609
 800f5c8:	0800f609 	.word	0x0800f609
 800f5cc:	0800f609 	.word	0x0800f609
 800f5d0:	0800f609 	.word	0x0800f609
 800f5d4:	0800f601 	.word	0x0800f601
 800f5d8:	2301      	movs	r3, #1
 800f5da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5de:	e326      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f5e0:	2304      	movs	r3, #4
 800f5e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5e6:	e322      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f5e8:	2308      	movs	r3, #8
 800f5ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5ee:	e31e      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f5f0:	2310      	movs	r3, #16
 800f5f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5f6:	e31a      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f5f8:	2320      	movs	r3, #32
 800f5fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f5fe:	e316      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f600:	2340      	movs	r3, #64	; 0x40
 800f602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f606:	e312      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f608:	2380      	movs	r3, #128	; 0x80
 800f60a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f60e:	e30e      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f610:	697b      	ldr	r3, [r7, #20]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	4a69      	ldr	r2, [pc, #420]	; (800f7bc <UART_SetConfig+0x33c>)
 800f616:	4293      	cmp	r3, r2
 800f618:	d130      	bne.n	800f67c <UART_SetConfig+0x1fc>
 800f61a:	4b67      	ldr	r3, [pc, #412]	; (800f7b8 <UART_SetConfig+0x338>)
 800f61c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f61e:	f003 0307 	and.w	r3, r3, #7
 800f622:	2b05      	cmp	r3, #5
 800f624:	d826      	bhi.n	800f674 <UART_SetConfig+0x1f4>
 800f626:	a201      	add	r2, pc, #4	; (adr r2, 800f62c <UART_SetConfig+0x1ac>)
 800f628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f62c:	0800f645 	.word	0x0800f645
 800f630:	0800f64d 	.word	0x0800f64d
 800f634:	0800f655 	.word	0x0800f655
 800f638:	0800f65d 	.word	0x0800f65d
 800f63c:	0800f665 	.word	0x0800f665
 800f640:	0800f66d 	.word	0x0800f66d
 800f644:	2300      	movs	r3, #0
 800f646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f64a:	e2f0      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f64c:	2304      	movs	r3, #4
 800f64e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f652:	e2ec      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f654:	2308      	movs	r3, #8
 800f656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f65a:	e2e8      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f65c:	2310      	movs	r3, #16
 800f65e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f662:	e2e4      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f664:	2320      	movs	r3, #32
 800f666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f66a:	e2e0      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f66c:	2340      	movs	r3, #64	; 0x40
 800f66e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f672:	e2dc      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f674:	2380      	movs	r3, #128	; 0x80
 800f676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f67a:	e2d8      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f67c:	697b      	ldr	r3, [r7, #20]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	4a4f      	ldr	r2, [pc, #316]	; (800f7c0 <UART_SetConfig+0x340>)
 800f682:	4293      	cmp	r3, r2
 800f684:	d130      	bne.n	800f6e8 <UART_SetConfig+0x268>
 800f686:	4b4c      	ldr	r3, [pc, #304]	; (800f7b8 <UART_SetConfig+0x338>)
 800f688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f68a:	f003 0307 	and.w	r3, r3, #7
 800f68e:	2b05      	cmp	r3, #5
 800f690:	d826      	bhi.n	800f6e0 <UART_SetConfig+0x260>
 800f692:	a201      	add	r2, pc, #4	; (adr r2, 800f698 <UART_SetConfig+0x218>)
 800f694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f698:	0800f6b1 	.word	0x0800f6b1
 800f69c:	0800f6b9 	.word	0x0800f6b9
 800f6a0:	0800f6c1 	.word	0x0800f6c1
 800f6a4:	0800f6c9 	.word	0x0800f6c9
 800f6a8:	0800f6d1 	.word	0x0800f6d1
 800f6ac:	0800f6d9 	.word	0x0800f6d9
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6b6:	e2ba      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f6b8:	2304      	movs	r3, #4
 800f6ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6be:	e2b6      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f6c0:	2308      	movs	r3, #8
 800f6c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6c6:	e2b2      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f6c8:	2310      	movs	r3, #16
 800f6ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6ce:	e2ae      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f6d0:	2320      	movs	r3, #32
 800f6d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6d6:	e2aa      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f6d8:	2340      	movs	r3, #64	; 0x40
 800f6da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6de:	e2a6      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f6e0:	2380      	movs	r3, #128	; 0x80
 800f6e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6e6:	e2a2      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f6e8:	697b      	ldr	r3, [r7, #20]
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	4a35      	ldr	r2, [pc, #212]	; (800f7c4 <UART_SetConfig+0x344>)
 800f6ee:	4293      	cmp	r3, r2
 800f6f0:	d130      	bne.n	800f754 <UART_SetConfig+0x2d4>
 800f6f2:	4b31      	ldr	r3, [pc, #196]	; (800f7b8 <UART_SetConfig+0x338>)
 800f6f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6f6:	f003 0307 	and.w	r3, r3, #7
 800f6fa:	2b05      	cmp	r3, #5
 800f6fc:	d826      	bhi.n	800f74c <UART_SetConfig+0x2cc>
 800f6fe:	a201      	add	r2, pc, #4	; (adr r2, 800f704 <UART_SetConfig+0x284>)
 800f700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f704:	0800f71d 	.word	0x0800f71d
 800f708:	0800f725 	.word	0x0800f725
 800f70c:	0800f72d 	.word	0x0800f72d
 800f710:	0800f735 	.word	0x0800f735
 800f714:	0800f73d 	.word	0x0800f73d
 800f718:	0800f745 	.word	0x0800f745
 800f71c:	2300      	movs	r3, #0
 800f71e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f722:	e284      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f724:	2304      	movs	r3, #4
 800f726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f72a:	e280      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f72c:	2308      	movs	r3, #8
 800f72e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f732:	e27c      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f734:	2310      	movs	r3, #16
 800f736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f73a:	e278      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f73c:	2320      	movs	r3, #32
 800f73e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f742:	e274      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f744:	2340      	movs	r3, #64	; 0x40
 800f746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f74a:	e270      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f74c:	2380      	movs	r3, #128	; 0x80
 800f74e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f752:	e26c      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f754:	697b      	ldr	r3, [r7, #20]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	4a1b      	ldr	r2, [pc, #108]	; (800f7c8 <UART_SetConfig+0x348>)
 800f75a:	4293      	cmp	r3, r2
 800f75c:	d142      	bne.n	800f7e4 <UART_SetConfig+0x364>
 800f75e:	4b16      	ldr	r3, [pc, #88]	; (800f7b8 <UART_SetConfig+0x338>)
 800f760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f762:	f003 0307 	and.w	r3, r3, #7
 800f766:	2b05      	cmp	r3, #5
 800f768:	d838      	bhi.n	800f7dc <UART_SetConfig+0x35c>
 800f76a:	a201      	add	r2, pc, #4	; (adr r2, 800f770 <UART_SetConfig+0x2f0>)
 800f76c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f770:	0800f789 	.word	0x0800f789
 800f774:	0800f791 	.word	0x0800f791
 800f778:	0800f799 	.word	0x0800f799
 800f77c:	0800f7a1 	.word	0x0800f7a1
 800f780:	0800f7cd 	.word	0x0800f7cd
 800f784:	0800f7d5 	.word	0x0800f7d5
 800f788:	2300      	movs	r3, #0
 800f78a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f78e:	e24e      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f790:	2304      	movs	r3, #4
 800f792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f796:	e24a      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f798:	2308      	movs	r3, #8
 800f79a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f79e:	e246      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f7a0:	2310      	movs	r3, #16
 800f7a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7a6:	e242      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f7a8:	cfff69f3 	.word	0xcfff69f3
 800f7ac:	58000c00 	.word	0x58000c00
 800f7b0:	11fff4ff 	.word	0x11fff4ff
 800f7b4:	40011000 	.word	0x40011000
 800f7b8:	58024400 	.word	0x58024400
 800f7bc:	40004400 	.word	0x40004400
 800f7c0:	40004800 	.word	0x40004800
 800f7c4:	40004c00 	.word	0x40004c00
 800f7c8:	40005000 	.word	0x40005000
 800f7cc:	2320      	movs	r3, #32
 800f7ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7d2:	e22c      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f7d4:	2340      	movs	r3, #64	; 0x40
 800f7d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7da:	e228      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f7dc:	2380      	movs	r3, #128	; 0x80
 800f7de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7e2:	e224      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f7e4:	697b      	ldr	r3, [r7, #20]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	4ab1      	ldr	r2, [pc, #708]	; (800fab0 <UART_SetConfig+0x630>)
 800f7ea:	4293      	cmp	r3, r2
 800f7ec:	d176      	bne.n	800f8dc <UART_SetConfig+0x45c>
 800f7ee:	4bb1      	ldr	r3, [pc, #708]	; (800fab4 <UART_SetConfig+0x634>)
 800f7f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f7f6:	2b28      	cmp	r3, #40	; 0x28
 800f7f8:	d86c      	bhi.n	800f8d4 <UART_SetConfig+0x454>
 800f7fa:	a201      	add	r2, pc, #4	; (adr r2, 800f800 <UART_SetConfig+0x380>)
 800f7fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f800:	0800f8a5 	.word	0x0800f8a5
 800f804:	0800f8d5 	.word	0x0800f8d5
 800f808:	0800f8d5 	.word	0x0800f8d5
 800f80c:	0800f8d5 	.word	0x0800f8d5
 800f810:	0800f8d5 	.word	0x0800f8d5
 800f814:	0800f8d5 	.word	0x0800f8d5
 800f818:	0800f8d5 	.word	0x0800f8d5
 800f81c:	0800f8d5 	.word	0x0800f8d5
 800f820:	0800f8ad 	.word	0x0800f8ad
 800f824:	0800f8d5 	.word	0x0800f8d5
 800f828:	0800f8d5 	.word	0x0800f8d5
 800f82c:	0800f8d5 	.word	0x0800f8d5
 800f830:	0800f8d5 	.word	0x0800f8d5
 800f834:	0800f8d5 	.word	0x0800f8d5
 800f838:	0800f8d5 	.word	0x0800f8d5
 800f83c:	0800f8d5 	.word	0x0800f8d5
 800f840:	0800f8b5 	.word	0x0800f8b5
 800f844:	0800f8d5 	.word	0x0800f8d5
 800f848:	0800f8d5 	.word	0x0800f8d5
 800f84c:	0800f8d5 	.word	0x0800f8d5
 800f850:	0800f8d5 	.word	0x0800f8d5
 800f854:	0800f8d5 	.word	0x0800f8d5
 800f858:	0800f8d5 	.word	0x0800f8d5
 800f85c:	0800f8d5 	.word	0x0800f8d5
 800f860:	0800f8bd 	.word	0x0800f8bd
 800f864:	0800f8d5 	.word	0x0800f8d5
 800f868:	0800f8d5 	.word	0x0800f8d5
 800f86c:	0800f8d5 	.word	0x0800f8d5
 800f870:	0800f8d5 	.word	0x0800f8d5
 800f874:	0800f8d5 	.word	0x0800f8d5
 800f878:	0800f8d5 	.word	0x0800f8d5
 800f87c:	0800f8d5 	.word	0x0800f8d5
 800f880:	0800f8c5 	.word	0x0800f8c5
 800f884:	0800f8d5 	.word	0x0800f8d5
 800f888:	0800f8d5 	.word	0x0800f8d5
 800f88c:	0800f8d5 	.word	0x0800f8d5
 800f890:	0800f8d5 	.word	0x0800f8d5
 800f894:	0800f8d5 	.word	0x0800f8d5
 800f898:	0800f8d5 	.word	0x0800f8d5
 800f89c:	0800f8d5 	.word	0x0800f8d5
 800f8a0:	0800f8cd 	.word	0x0800f8cd
 800f8a4:	2301      	movs	r3, #1
 800f8a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8aa:	e1c0      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f8ac:	2304      	movs	r3, #4
 800f8ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8b2:	e1bc      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f8b4:	2308      	movs	r3, #8
 800f8b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8ba:	e1b8      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f8bc:	2310      	movs	r3, #16
 800f8be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8c2:	e1b4      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f8c4:	2320      	movs	r3, #32
 800f8c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8ca:	e1b0      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f8cc:	2340      	movs	r3, #64	; 0x40
 800f8ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8d2:	e1ac      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f8d4:	2380      	movs	r3, #128	; 0x80
 800f8d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f8da:	e1a8      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f8dc:	697b      	ldr	r3, [r7, #20]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	4a75      	ldr	r2, [pc, #468]	; (800fab8 <UART_SetConfig+0x638>)
 800f8e2:	4293      	cmp	r3, r2
 800f8e4:	d130      	bne.n	800f948 <UART_SetConfig+0x4c8>
 800f8e6:	4b73      	ldr	r3, [pc, #460]	; (800fab4 <UART_SetConfig+0x634>)
 800f8e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f8ea:	f003 0307 	and.w	r3, r3, #7
 800f8ee:	2b05      	cmp	r3, #5
 800f8f0:	d826      	bhi.n	800f940 <UART_SetConfig+0x4c0>
 800f8f2:	a201      	add	r2, pc, #4	; (adr r2, 800f8f8 <UART_SetConfig+0x478>)
 800f8f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8f8:	0800f911 	.word	0x0800f911
 800f8fc:	0800f919 	.word	0x0800f919
 800f900:	0800f921 	.word	0x0800f921
 800f904:	0800f929 	.word	0x0800f929
 800f908:	0800f931 	.word	0x0800f931
 800f90c:	0800f939 	.word	0x0800f939
 800f910:	2300      	movs	r3, #0
 800f912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f916:	e18a      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f918:	2304      	movs	r3, #4
 800f91a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f91e:	e186      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f920:	2308      	movs	r3, #8
 800f922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f926:	e182      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f928:	2310      	movs	r3, #16
 800f92a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f92e:	e17e      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f930:	2320      	movs	r3, #32
 800f932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f936:	e17a      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f938:	2340      	movs	r3, #64	; 0x40
 800f93a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f93e:	e176      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f940:	2380      	movs	r3, #128	; 0x80
 800f942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f946:	e172      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f948:	697b      	ldr	r3, [r7, #20]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	4a5b      	ldr	r2, [pc, #364]	; (800fabc <UART_SetConfig+0x63c>)
 800f94e:	4293      	cmp	r3, r2
 800f950:	d130      	bne.n	800f9b4 <UART_SetConfig+0x534>
 800f952:	4b58      	ldr	r3, [pc, #352]	; (800fab4 <UART_SetConfig+0x634>)
 800f954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f956:	f003 0307 	and.w	r3, r3, #7
 800f95a:	2b05      	cmp	r3, #5
 800f95c:	d826      	bhi.n	800f9ac <UART_SetConfig+0x52c>
 800f95e:	a201      	add	r2, pc, #4	; (adr r2, 800f964 <UART_SetConfig+0x4e4>)
 800f960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f964:	0800f97d 	.word	0x0800f97d
 800f968:	0800f985 	.word	0x0800f985
 800f96c:	0800f98d 	.word	0x0800f98d
 800f970:	0800f995 	.word	0x0800f995
 800f974:	0800f99d 	.word	0x0800f99d
 800f978:	0800f9a5 	.word	0x0800f9a5
 800f97c:	2300      	movs	r3, #0
 800f97e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f982:	e154      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f984:	2304      	movs	r3, #4
 800f986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f98a:	e150      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f98c:	2308      	movs	r3, #8
 800f98e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f992:	e14c      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f994:	2310      	movs	r3, #16
 800f996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f99a:	e148      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f99c:	2320      	movs	r3, #32
 800f99e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9a2:	e144      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f9a4:	2340      	movs	r3, #64	; 0x40
 800f9a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9aa:	e140      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f9ac:	2380      	movs	r3, #128	; 0x80
 800f9ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9b2:	e13c      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800f9b4:	697b      	ldr	r3, [r7, #20]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	4a41      	ldr	r2, [pc, #260]	; (800fac0 <UART_SetConfig+0x640>)
 800f9ba:	4293      	cmp	r3, r2
 800f9bc:	f040 8082 	bne.w	800fac4 <UART_SetConfig+0x644>
 800f9c0:	4b3c      	ldr	r3, [pc, #240]	; (800fab4 <UART_SetConfig+0x634>)
 800f9c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f9c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f9c8:	2b28      	cmp	r3, #40	; 0x28
 800f9ca:	d86d      	bhi.n	800faa8 <UART_SetConfig+0x628>
 800f9cc:	a201      	add	r2, pc, #4	; (adr r2, 800f9d4 <UART_SetConfig+0x554>)
 800f9ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9d2:	bf00      	nop
 800f9d4:	0800fa79 	.word	0x0800fa79
 800f9d8:	0800faa9 	.word	0x0800faa9
 800f9dc:	0800faa9 	.word	0x0800faa9
 800f9e0:	0800faa9 	.word	0x0800faa9
 800f9e4:	0800faa9 	.word	0x0800faa9
 800f9e8:	0800faa9 	.word	0x0800faa9
 800f9ec:	0800faa9 	.word	0x0800faa9
 800f9f0:	0800faa9 	.word	0x0800faa9
 800f9f4:	0800fa81 	.word	0x0800fa81
 800f9f8:	0800faa9 	.word	0x0800faa9
 800f9fc:	0800faa9 	.word	0x0800faa9
 800fa00:	0800faa9 	.word	0x0800faa9
 800fa04:	0800faa9 	.word	0x0800faa9
 800fa08:	0800faa9 	.word	0x0800faa9
 800fa0c:	0800faa9 	.word	0x0800faa9
 800fa10:	0800faa9 	.word	0x0800faa9
 800fa14:	0800fa89 	.word	0x0800fa89
 800fa18:	0800faa9 	.word	0x0800faa9
 800fa1c:	0800faa9 	.word	0x0800faa9
 800fa20:	0800faa9 	.word	0x0800faa9
 800fa24:	0800faa9 	.word	0x0800faa9
 800fa28:	0800faa9 	.word	0x0800faa9
 800fa2c:	0800faa9 	.word	0x0800faa9
 800fa30:	0800faa9 	.word	0x0800faa9
 800fa34:	0800fa91 	.word	0x0800fa91
 800fa38:	0800faa9 	.word	0x0800faa9
 800fa3c:	0800faa9 	.word	0x0800faa9
 800fa40:	0800faa9 	.word	0x0800faa9
 800fa44:	0800faa9 	.word	0x0800faa9
 800fa48:	0800faa9 	.word	0x0800faa9
 800fa4c:	0800faa9 	.word	0x0800faa9
 800fa50:	0800faa9 	.word	0x0800faa9
 800fa54:	0800fa99 	.word	0x0800fa99
 800fa58:	0800faa9 	.word	0x0800faa9
 800fa5c:	0800faa9 	.word	0x0800faa9
 800fa60:	0800faa9 	.word	0x0800faa9
 800fa64:	0800faa9 	.word	0x0800faa9
 800fa68:	0800faa9 	.word	0x0800faa9
 800fa6c:	0800faa9 	.word	0x0800faa9
 800fa70:	0800faa9 	.word	0x0800faa9
 800fa74:	0800faa1 	.word	0x0800faa1
 800fa78:	2301      	movs	r3, #1
 800fa7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa7e:	e0d6      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800fa80:	2304      	movs	r3, #4
 800fa82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa86:	e0d2      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800fa88:	2308      	movs	r3, #8
 800fa8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa8e:	e0ce      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800fa90:	2310      	movs	r3, #16
 800fa92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa96:	e0ca      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800fa98:	2320      	movs	r3, #32
 800fa9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa9e:	e0c6      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800faa0:	2340      	movs	r3, #64	; 0x40
 800faa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800faa6:	e0c2      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800faa8:	2380      	movs	r3, #128	; 0x80
 800faaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800faae:	e0be      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800fab0:	40011400 	.word	0x40011400
 800fab4:	58024400 	.word	0x58024400
 800fab8:	40007800 	.word	0x40007800
 800fabc:	40007c00 	.word	0x40007c00
 800fac0:	40011800 	.word	0x40011800
 800fac4:	697b      	ldr	r3, [r7, #20]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	4aad      	ldr	r2, [pc, #692]	; (800fd80 <UART_SetConfig+0x900>)
 800faca:	4293      	cmp	r3, r2
 800facc:	d176      	bne.n	800fbbc <UART_SetConfig+0x73c>
 800face:	4bad      	ldr	r3, [pc, #692]	; (800fd84 <UART_SetConfig+0x904>)
 800fad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fad2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fad6:	2b28      	cmp	r3, #40	; 0x28
 800fad8:	d86c      	bhi.n	800fbb4 <UART_SetConfig+0x734>
 800fada:	a201      	add	r2, pc, #4	; (adr r2, 800fae0 <UART_SetConfig+0x660>)
 800fadc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fae0:	0800fb85 	.word	0x0800fb85
 800fae4:	0800fbb5 	.word	0x0800fbb5
 800fae8:	0800fbb5 	.word	0x0800fbb5
 800faec:	0800fbb5 	.word	0x0800fbb5
 800faf0:	0800fbb5 	.word	0x0800fbb5
 800faf4:	0800fbb5 	.word	0x0800fbb5
 800faf8:	0800fbb5 	.word	0x0800fbb5
 800fafc:	0800fbb5 	.word	0x0800fbb5
 800fb00:	0800fb8d 	.word	0x0800fb8d
 800fb04:	0800fbb5 	.word	0x0800fbb5
 800fb08:	0800fbb5 	.word	0x0800fbb5
 800fb0c:	0800fbb5 	.word	0x0800fbb5
 800fb10:	0800fbb5 	.word	0x0800fbb5
 800fb14:	0800fbb5 	.word	0x0800fbb5
 800fb18:	0800fbb5 	.word	0x0800fbb5
 800fb1c:	0800fbb5 	.word	0x0800fbb5
 800fb20:	0800fb95 	.word	0x0800fb95
 800fb24:	0800fbb5 	.word	0x0800fbb5
 800fb28:	0800fbb5 	.word	0x0800fbb5
 800fb2c:	0800fbb5 	.word	0x0800fbb5
 800fb30:	0800fbb5 	.word	0x0800fbb5
 800fb34:	0800fbb5 	.word	0x0800fbb5
 800fb38:	0800fbb5 	.word	0x0800fbb5
 800fb3c:	0800fbb5 	.word	0x0800fbb5
 800fb40:	0800fb9d 	.word	0x0800fb9d
 800fb44:	0800fbb5 	.word	0x0800fbb5
 800fb48:	0800fbb5 	.word	0x0800fbb5
 800fb4c:	0800fbb5 	.word	0x0800fbb5
 800fb50:	0800fbb5 	.word	0x0800fbb5
 800fb54:	0800fbb5 	.word	0x0800fbb5
 800fb58:	0800fbb5 	.word	0x0800fbb5
 800fb5c:	0800fbb5 	.word	0x0800fbb5
 800fb60:	0800fba5 	.word	0x0800fba5
 800fb64:	0800fbb5 	.word	0x0800fbb5
 800fb68:	0800fbb5 	.word	0x0800fbb5
 800fb6c:	0800fbb5 	.word	0x0800fbb5
 800fb70:	0800fbb5 	.word	0x0800fbb5
 800fb74:	0800fbb5 	.word	0x0800fbb5
 800fb78:	0800fbb5 	.word	0x0800fbb5
 800fb7c:	0800fbb5 	.word	0x0800fbb5
 800fb80:	0800fbad 	.word	0x0800fbad
 800fb84:	2301      	movs	r3, #1
 800fb86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb8a:	e050      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800fb8c:	2304      	movs	r3, #4
 800fb8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb92:	e04c      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800fb94:	2308      	movs	r3, #8
 800fb96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fb9a:	e048      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800fb9c:	2310      	movs	r3, #16
 800fb9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fba2:	e044      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800fba4:	2320      	movs	r3, #32
 800fba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbaa:	e040      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800fbac:	2340      	movs	r3, #64	; 0x40
 800fbae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbb2:	e03c      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800fbb4:	2380      	movs	r3, #128	; 0x80
 800fbb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbba:	e038      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800fbbc:	697b      	ldr	r3, [r7, #20]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	4a71      	ldr	r2, [pc, #452]	; (800fd88 <UART_SetConfig+0x908>)
 800fbc2:	4293      	cmp	r3, r2
 800fbc4:	d130      	bne.n	800fc28 <UART_SetConfig+0x7a8>
 800fbc6:	4b6f      	ldr	r3, [pc, #444]	; (800fd84 <UART_SetConfig+0x904>)
 800fbc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fbca:	f003 0307 	and.w	r3, r3, #7
 800fbce:	2b05      	cmp	r3, #5
 800fbd0:	d826      	bhi.n	800fc20 <UART_SetConfig+0x7a0>
 800fbd2:	a201      	add	r2, pc, #4	; (adr r2, 800fbd8 <UART_SetConfig+0x758>)
 800fbd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbd8:	0800fbf1 	.word	0x0800fbf1
 800fbdc:	0800fbf9 	.word	0x0800fbf9
 800fbe0:	0800fc01 	.word	0x0800fc01
 800fbe4:	0800fc09 	.word	0x0800fc09
 800fbe8:	0800fc11 	.word	0x0800fc11
 800fbec:	0800fc19 	.word	0x0800fc19
 800fbf0:	2302      	movs	r3, #2
 800fbf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbf6:	e01a      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800fbf8:	2304      	movs	r3, #4
 800fbfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fbfe:	e016      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800fc00:	2308      	movs	r3, #8
 800fc02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc06:	e012      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800fc08:	2310      	movs	r3, #16
 800fc0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc0e:	e00e      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800fc10:	2320      	movs	r3, #32
 800fc12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc16:	e00a      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800fc18:	2340      	movs	r3, #64	; 0x40
 800fc1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc1e:	e006      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800fc20:	2380      	movs	r3, #128	; 0x80
 800fc22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fc26:	e002      	b.n	800fc2e <UART_SetConfig+0x7ae>
 800fc28:	2380      	movs	r3, #128	; 0x80
 800fc2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fc2e:	697b      	ldr	r3, [r7, #20]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	4a55      	ldr	r2, [pc, #340]	; (800fd88 <UART_SetConfig+0x908>)
 800fc34:	4293      	cmp	r3, r2
 800fc36:	f040 80f8 	bne.w	800fe2a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fc3a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fc3e:	2b20      	cmp	r3, #32
 800fc40:	dc46      	bgt.n	800fcd0 <UART_SetConfig+0x850>
 800fc42:	2b02      	cmp	r3, #2
 800fc44:	db75      	blt.n	800fd32 <UART_SetConfig+0x8b2>
 800fc46:	3b02      	subs	r3, #2
 800fc48:	2b1e      	cmp	r3, #30
 800fc4a:	d872      	bhi.n	800fd32 <UART_SetConfig+0x8b2>
 800fc4c:	a201      	add	r2, pc, #4	; (adr r2, 800fc54 <UART_SetConfig+0x7d4>)
 800fc4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc52:	bf00      	nop
 800fc54:	0800fcd7 	.word	0x0800fcd7
 800fc58:	0800fd33 	.word	0x0800fd33
 800fc5c:	0800fcdf 	.word	0x0800fcdf
 800fc60:	0800fd33 	.word	0x0800fd33
 800fc64:	0800fd33 	.word	0x0800fd33
 800fc68:	0800fd33 	.word	0x0800fd33
 800fc6c:	0800fcef 	.word	0x0800fcef
 800fc70:	0800fd33 	.word	0x0800fd33
 800fc74:	0800fd33 	.word	0x0800fd33
 800fc78:	0800fd33 	.word	0x0800fd33
 800fc7c:	0800fd33 	.word	0x0800fd33
 800fc80:	0800fd33 	.word	0x0800fd33
 800fc84:	0800fd33 	.word	0x0800fd33
 800fc88:	0800fd33 	.word	0x0800fd33
 800fc8c:	0800fcff 	.word	0x0800fcff
 800fc90:	0800fd33 	.word	0x0800fd33
 800fc94:	0800fd33 	.word	0x0800fd33
 800fc98:	0800fd33 	.word	0x0800fd33
 800fc9c:	0800fd33 	.word	0x0800fd33
 800fca0:	0800fd33 	.word	0x0800fd33
 800fca4:	0800fd33 	.word	0x0800fd33
 800fca8:	0800fd33 	.word	0x0800fd33
 800fcac:	0800fd33 	.word	0x0800fd33
 800fcb0:	0800fd33 	.word	0x0800fd33
 800fcb4:	0800fd33 	.word	0x0800fd33
 800fcb8:	0800fd33 	.word	0x0800fd33
 800fcbc:	0800fd33 	.word	0x0800fd33
 800fcc0:	0800fd33 	.word	0x0800fd33
 800fcc4:	0800fd33 	.word	0x0800fd33
 800fcc8:	0800fd33 	.word	0x0800fd33
 800fccc:	0800fd25 	.word	0x0800fd25
 800fcd0:	2b40      	cmp	r3, #64	; 0x40
 800fcd2:	d02a      	beq.n	800fd2a <UART_SetConfig+0x8aa>
 800fcd4:	e02d      	b.n	800fd32 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800fcd6:	f7fb fbdd 	bl	800b494 <HAL_RCCEx_GetD3PCLK1Freq>
 800fcda:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fcdc:	e02f      	b.n	800fd3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fcde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fce2:	4618      	mov	r0, r3
 800fce4:	f7fb fbec 	bl	800b4c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fcec:	e027      	b.n	800fd3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fcee:	f107 0318 	add.w	r3, r7, #24
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	f7fb fd38 	bl	800b768 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fcf8:	69fb      	ldr	r3, [r7, #28]
 800fcfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fcfc:	e01f      	b.n	800fd3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fcfe:	4b21      	ldr	r3, [pc, #132]	; (800fd84 <UART_SetConfig+0x904>)
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	f003 0320 	and.w	r3, r3, #32
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d009      	beq.n	800fd1e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fd0a:	4b1e      	ldr	r3, [pc, #120]	; (800fd84 <UART_SetConfig+0x904>)
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	08db      	lsrs	r3, r3, #3
 800fd10:	f003 0303 	and.w	r3, r3, #3
 800fd14:	4a1d      	ldr	r2, [pc, #116]	; (800fd8c <UART_SetConfig+0x90c>)
 800fd16:	fa22 f303 	lsr.w	r3, r2, r3
 800fd1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fd1c:	e00f      	b.n	800fd3e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800fd1e:	4b1b      	ldr	r3, [pc, #108]	; (800fd8c <UART_SetConfig+0x90c>)
 800fd20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd22:	e00c      	b.n	800fd3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fd24:	4b1a      	ldr	r3, [pc, #104]	; (800fd90 <UART_SetConfig+0x910>)
 800fd26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd28:	e009      	b.n	800fd3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fd2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fd2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd30:	e005      	b.n	800fd3e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800fd32:	2300      	movs	r3, #0
 800fd34:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fd36:	2301      	movs	r3, #1
 800fd38:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fd3c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fd3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	f000 81ee 	beq.w	8010122 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fd46:	697b      	ldr	r3, [r7, #20]
 800fd48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd4a:	4a12      	ldr	r2, [pc, #72]	; (800fd94 <UART_SetConfig+0x914>)
 800fd4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fd50:	461a      	mov	r2, r3
 800fd52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd54:	fbb3 f3f2 	udiv	r3, r3, r2
 800fd58:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fd5a:	697b      	ldr	r3, [r7, #20]
 800fd5c:	685a      	ldr	r2, [r3, #4]
 800fd5e:	4613      	mov	r3, r2
 800fd60:	005b      	lsls	r3, r3, #1
 800fd62:	4413      	add	r3, r2
 800fd64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd66:	429a      	cmp	r2, r3
 800fd68:	d305      	bcc.n	800fd76 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fd6a:	697b      	ldr	r3, [r7, #20]
 800fd6c:	685b      	ldr	r3, [r3, #4]
 800fd6e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fd70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd72:	429a      	cmp	r2, r3
 800fd74:	d910      	bls.n	800fd98 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800fd76:	2301      	movs	r3, #1
 800fd78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fd7c:	e1d1      	b.n	8010122 <UART_SetConfig+0xca2>
 800fd7e:	bf00      	nop
 800fd80:	40011c00 	.word	0x40011c00
 800fd84:	58024400 	.word	0x58024400
 800fd88:	58000c00 	.word	0x58000c00
 800fd8c:	03d09000 	.word	0x03d09000
 800fd90:	003d0900 	.word	0x003d0900
 800fd94:	080163cc 	.word	0x080163cc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fd98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	60bb      	str	r3, [r7, #8]
 800fd9e:	60fa      	str	r2, [r7, #12]
 800fda0:	697b      	ldr	r3, [r7, #20]
 800fda2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fda4:	4ac0      	ldr	r2, [pc, #768]	; (80100a8 <UART_SetConfig+0xc28>)
 800fda6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fdaa:	b29b      	uxth	r3, r3
 800fdac:	2200      	movs	r2, #0
 800fdae:	603b      	str	r3, [r7, #0]
 800fdb0:	607a      	str	r2, [r7, #4]
 800fdb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fdb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fdba:	f7f0 fb11 	bl	80003e0 <__aeabi_uldivmod>
 800fdbe:	4602      	mov	r2, r0
 800fdc0:	460b      	mov	r3, r1
 800fdc2:	4610      	mov	r0, r2
 800fdc4:	4619      	mov	r1, r3
 800fdc6:	f04f 0200 	mov.w	r2, #0
 800fdca:	f04f 0300 	mov.w	r3, #0
 800fdce:	020b      	lsls	r3, r1, #8
 800fdd0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fdd4:	0202      	lsls	r2, r0, #8
 800fdd6:	6979      	ldr	r1, [r7, #20]
 800fdd8:	6849      	ldr	r1, [r1, #4]
 800fdda:	0849      	lsrs	r1, r1, #1
 800fddc:	2000      	movs	r0, #0
 800fdde:	460c      	mov	r4, r1
 800fde0:	4605      	mov	r5, r0
 800fde2:	eb12 0804 	adds.w	r8, r2, r4
 800fde6:	eb43 0905 	adc.w	r9, r3, r5
 800fdea:	697b      	ldr	r3, [r7, #20]
 800fdec:	685b      	ldr	r3, [r3, #4]
 800fdee:	2200      	movs	r2, #0
 800fdf0:	469a      	mov	sl, r3
 800fdf2:	4693      	mov	fp, r2
 800fdf4:	4652      	mov	r2, sl
 800fdf6:	465b      	mov	r3, fp
 800fdf8:	4640      	mov	r0, r8
 800fdfa:	4649      	mov	r1, r9
 800fdfc:	f7f0 faf0 	bl	80003e0 <__aeabi_uldivmod>
 800fe00:	4602      	mov	r2, r0
 800fe02:	460b      	mov	r3, r1
 800fe04:	4613      	mov	r3, r2
 800fe06:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fe08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fe0e:	d308      	bcc.n	800fe22 <UART_SetConfig+0x9a2>
 800fe10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fe16:	d204      	bcs.n	800fe22 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800fe18:	697b      	ldr	r3, [r7, #20]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe1e:	60da      	str	r2, [r3, #12]
 800fe20:	e17f      	b.n	8010122 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800fe22:	2301      	movs	r3, #1
 800fe24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fe28:	e17b      	b.n	8010122 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fe2a:	697b      	ldr	r3, [r7, #20]
 800fe2c:	69db      	ldr	r3, [r3, #28]
 800fe2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fe32:	f040 80bd 	bne.w	800ffb0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800fe36:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fe3a:	2b20      	cmp	r3, #32
 800fe3c:	dc48      	bgt.n	800fed0 <UART_SetConfig+0xa50>
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	db7b      	blt.n	800ff3a <UART_SetConfig+0xaba>
 800fe42:	2b20      	cmp	r3, #32
 800fe44:	d879      	bhi.n	800ff3a <UART_SetConfig+0xaba>
 800fe46:	a201      	add	r2, pc, #4	; (adr r2, 800fe4c <UART_SetConfig+0x9cc>)
 800fe48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe4c:	0800fed7 	.word	0x0800fed7
 800fe50:	0800fedf 	.word	0x0800fedf
 800fe54:	0800ff3b 	.word	0x0800ff3b
 800fe58:	0800ff3b 	.word	0x0800ff3b
 800fe5c:	0800fee7 	.word	0x0800fee7
 800fe60:	0800ff3b 	.word	0x0800ff3b
 800fe64:	0800ff3b 	.word	0x0800ff3b
 800fe68:	0800ff3b 	.word	0x0800ff3b
 800fe6c:	0800fef7 	.word	0x0800fef7
 800fe70:	0800ff3b 	.word	0x0800ff3b
 800fe74:	0800ff3b 	.word	0x0800ff3b
 800fe78:	0800ff3b 	.word	0x0800ff3b
 800fe7c:	0800ff3b 	.word	0x0800ff3b
 800fe80:	0800ff3b 	.word	0x0800ff3b
 800fe84:	0800ff3b 	.word	0x0800ff3b
 800fe88:	0800ff3b 	.word	0x0800ff3b
 800fe8c:	0800ff07 	.word	0x0800ff07
 800fe90:	0800ff3b 	.word	0x0800ff3b
 800fe94:	0800ff3b 	.word	0x0800ff3b
 800fe98:	0800ff3b 	.word	0x0800ff3b
 800fe9c:	0800ff3b 	.word	0x0800ff3b
 800fea0:	0800ff3b 	.word	0x0800ff3b
 800fea4:	0800ff3b 	.word	0x0800ff3b
 800fea8:	0800ff3b 	.word	0x0800ff3b
 800feac:	0800ff3b 	.word	0x0800ff3b
 800feb0:	0800ff3b 	.word	0x0800ff3b
 800feb4:	0800ff3b 	.word	0x0800ff3b
 800feb8:	0800ff3b 	.word	0x0800ff3b
 800febc:	0800ff3b 	.word	0x0800ff3b
 800fec0:	0800ff3b 	.word	0x0800ff3b
 800fec4:	0800ff3b 	.word	0x0800ff3b
 800fec8:	0800ff3b 	.word	0x0800ff3b
 800fecc:	0800ff2d 	.word	0x0800ff2d
 800fed0:	2b40      	cmp	r3, #64	; 0x40
 800fed2:	d02e      	beq.n	800ff32 <UART_SetConfig+0xab2>
 800fed4:	e031      	b.n	800ff3a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fed6:	f7f9 fc3f 	bl	8009758 <HAL_RCC_GetPCLK1Freq>
 800feda:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fedc:	e033      	b.n	800ff46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fede:	f7f9 fc51 	bl	8009784 <HAL_RCC_GetPCLK2Freq>
 800fee2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fee4:	e02f      	b.n	800ff46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800feea:	4618      	mov	r0, r3
 800feec:	f7fb fae8 	bl	800b4c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fef2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fef4:	e027      	b.n	800ff46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fef6:	f107 0318 	add.w	r3, r7, #24
 800fefa:	4618      	mov	r0, r3
 800fefc:	f7fb fc34 	bl	800b768 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ff00:	69fb      	ldr	r3, [r7, #28]
 800ff02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff04:	e01f      	b.n	800ff46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ff06:	4b69      	ldr	r3, [pc, #420]	; (80100ac <UART_SetConfig+0xc2c>)
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	f003 0320 	and.w	r3, r3, #32
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d009      	beq.n	800ff26 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ff12:	4b66      	ldr	r3, [pc, #408]	; (80100ac <UART_SetConfig+0xc2c>)
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	08db      	lsrs	r3, r3, #3
 800ff18:	f003 0303 	and.w	r3, r3, #3
 800ff1c:	4a64      	ldr	r2, [pc, #400]	; (80100b0 <UART_SetConfig+0xc30>)
 800ff1e:	fa22 f303 	lsr.w	r3, r2, r3
 800ff22:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ff24:	e00f      	b.n	800ff46 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800ff26:	4b62      	ldr	r3, [pc, #392]	; (80100b0 <UART_SetConfig+0xc30>)
 800ff28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff2a:	e00c      	b.n	800ff46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ff2c:	4b61      	ldr	r3, [pc, #388]	; (80100b4 <UART_SetConfig+0xc34>)
 800ff2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff30:	e009      	b.n	800ff46 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ff32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ff36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff38:	e005      	b.n	800ff46 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ff3e:	2301      	movs	r3, #1
 800ff40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ff44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ff46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	f000 80ea 	beq.w	8010122 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ff4e:	697b      	ldr	r3, [r7, #20]
 800ff50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff52:	4a55      	ldr	r2, [pc, #340]	; (80100a8 <UART_SetConfig+0xc28>)
 800ff54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ff58:	461a      	mov	r2, r3
 800ff5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff5c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff60:	005a      	lsls	r2, r3, #1
 800ff62:	697b      	ldr	r3, [r7, #20]
 800ff64:	685b      	ldr	r3, [r3, #4]
 800ff66:	085b      	lsrs	r3, r3, #1
 800ff68:	441a      	add	r2, r3
 800ff6a:	697b      	ldr	r3, [r7, #20]
 800ff6c:	685b      	ldr	r3, [r3, #4]
 800ff6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff72:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ff74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff76:	2b0f      	cmp	r3, #15
 800ff78:	d916      	bls.n	800ffa8 <UART_SetConfig+0xb28>
 800ff7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ff80:	d212      	bcs.n	800ffa8 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ff82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff84:	b29b      	uxth	r3, r3
 800ff86:	f023 030f 	bic.w	r3, r3, #15
 800ff8a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ff8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff8e:	085b      	lsrs	r3, r3, #1
 800ff90:	b29b      	uxth	r3, r3
 800ff92:	f003 0307 	and.w	r3, r3, #7
 800ff96:	b29a      	uxth	r2, r3
 800ff98:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ff9a:	4313      	orrs	r3, r2
 800ff9c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800ff9e:	697b      	ldr	r3, [r7, #20]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ffa4:	60da      	str	r2, [r3, #12]
 800ffa6:	e0bc      	b.n	8010122 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800ffa8:	2301      	movs	r3, #1
 800ffaa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ffae:	e0b8      	b.n	8010122 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ffb0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ffb4:	2b20      	cmp	r3, #32
 800ffb6:	dc4b      	bgt.n	8010050 <UART_SetConfig+0xbd0>
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	f2c0 8087 	blt.w	80100cc <UART_SetConfig+0xc4c>
 800ffbe:	2b20      	cmp	r3, #32
 800ffc0:	f200 8084 	bhi.w	80100cc <UART_SetConfig+0xc4c>
 800ffc4:	a201      	add	r2, pc, #4	; (adr r2, 800ffcc <UART_SetConfig+0xb4c>)
 800ffc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffca:	bf00      	nop
 800ffcc:	08010057 	.word	0x08010057
 800ffd0:	0801005f 	.word	0x0801005f
 800ffd4:	080100cd 	.word	0x080100cd
 800ffd8:	080100cd 	.word	0x080100cd
 800ffdc:	08010067 	.word	0x08010067
 800ffe0:	080100cd 	.word	0x080100cd
 800ffe4:	080100cd 	.word	0x080100cd
 800ffe8:	080100cd 	.word	0x080100cd
 800ffec:	08010077 	.word	0x08010077
 800fff0:	080100cd 	.word	0x080100cd
 800fff4:	080100cd 	.word	0x080100cd
 800fff8:	080100cd 	.word	0x080100cd
 800fffc:	080100cd 	.word	0x080100cd
 8010000:	080100cd 	.word	0x080100cd
 8010004:	080100cd 	.word	0x080100cd
 8010008:	080100cd 	.word	0x080100cd
 801000c:	08010087 	.word	0x08010087
 8010010:	080100cd 	.word	0x080100cd
 8010014:	080100cd 	.word	0x080100cd
 8010018:	080100cd 	.word	0x080100cd
 801001c:	080100cd 	.word	0x080100cd
 8010020:	080100cd 	.word	0x080100cd
 8010024:	080100cd 	.word	0x080100cd
 8010028:	080100cd 	.word	0x080100cd
 801002c:	080100cd 	.word	0x080100cd
 8010030:	080100cd 	.word	0x080100cd
 8010034:	080100cd 	.word	0x080100cd
 8010038:	080100cd 	.word	0x080100cd
 801003c:	080100cd 	.word	0x080100cd
 8010040:	080100cd 	.word	0x080100cd
 8010044:	080100cd 	.word	0x080100cd
 8010048:	080100cd 	.word	0x080100cd
 801004c:	080100bf 	.word	0x080100bf
 8010050:	2b40      	cmp	r3, #64	; 0x40
 8010052:	d037      	beq.n	80100c4 <UART_SetConfig+0xc44>
 8010054:	e03a      	b.n	80100cc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010056:	f7f9 fb7f 	bl	8009758 <HAL_RCC_GetPCLK1Freq>
 801005a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801005c:	e03c      	b.n	80100d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801005e:	f7f9 fb91 	bl	8009784 <HAL_RCC_GetPCLK2Freq>
 8010062:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010064:	e038      	b.n	80100d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801006a:	4618      	mov	r0, r3
 801006c:	f7fb fa28 	bl	800b4c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010072:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010074:	e030      	b.n	80100d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010076:	f107 0318 	add.w	r3, r7, #24
 801007a:	4618      	mov	r0, r3
 801007c:	f7fb fb74 	bl	800b768 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010080:	69fb      	ldr	r3, [r7, #28]
 8010082:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010084:	e028      	b.n	80100d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010086:	4b09      	ldr	r3, [pc, #36]	; (80100ac <UART_SetConfig+0xc2c>)
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	f003 0320 	and.w	r3, r3, #32
 801008e:	2b00      	cmp	r3, #0
 8010090:	d012      	beq.n	80100b8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010092:	4b06      	ldr	r3, [pc, #24]	; (80100ac <UART_SetConfig+0xc2c>)
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	08db      	lsrs	r3, r3, #3
 8010098:	f003 0303 	and.w	r3, r3, #3
 801009c:	4a04      	ldr	r2, [pc, #16]	; (80100b0 <UART_SetConfig+0xc30>)
 801009e:	fa22 f303 	lsr.w	r3, r2, r3
 80100a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80100a4:	e018      	b.n	80100d8 <UART_SetConfig+0xc58>
 80100a6:	bf00      	nop
 80100a8:	080163cc 	.word	0x080163cc
 80100ac:	58024400 	.word	0x58024400
 80100b0:	03d09000 	.word	0x03d09000
 80100b4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80100b8:	4b24      	ldr	r3, [pc, #144]	; (801014c <UART_SetConfig+0xccc>)
 80100ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80100bc:	e00c      	b.n	80100d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80100be:	4b24      	ldr	r3, [pc, #144]	; (8010150 <UART_SetConfig+0xcd0>)
 80100c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80100c2:	e009      	b.n	80100d8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80100c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80100c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80100ca:	e005      	b.n	80100d8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80100cc:	2300      	movs	r3, #0
 80100ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80100d0:	2301      	movs	r3, #1
 80100d2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80100d6:	bf00      	nop
    }

    if (pclk != 0U)
 80100d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d021      	beq.n	8010122 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80100de:	697b      	ldr	r3, [r7, #20]
 80100e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100e2:	4a1c      	ldr	r2, [pc, #112]	; (8010154 <UART_SetConfig+0xcd4>)
 80100e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80100e8:	461a      	mov	r2, r3
 80100ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100ec:	fbb3 f2f2 	udiv	r2, r3, r2
 80100f0:	697b      	ldr	r3, [r7, #20]
 80100f2:	685b      	ldr	r3, [r3, #4]
 80100f4:	085b      	lsrs	r3, r3, #1
 80100f6:	441a      	add	r2, r3
 80100f8:	697b      	ldr	r3, [r7, #20]
 80100fa:	685b      	ldr	r3, [r3, #4]
 80100fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8010100:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010104:	2b0f      	cmp	r3, #15
 8010106:	d909      	bls.n	801011c <UART_SetConfig+0xc9c>
 8010108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801010a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801010e:	d205      	bcs.n	801011c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010112:	b29a      	uxth	r2, r3
 8010114:	697b      	ldr	r3, [r7, #20]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	60da      	str	r2, [r3, #12]
 801011a:	e002      	b.n	8010122 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 801011c:	2301      	movs	r3, #1
 801011e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010122:	697b      	ldr	r3, [r7, #20]
 8010124:	2201      	movs	r2, #1
 8010126:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801012a:	697b      	ldr	r3, [r7, #20]
 801012c:	2201      	movs	r2, #1
 801012e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010132:	697b      	ldr	r3, [r7, #20]
 8010134:	2200      	movs	r2, #0
 8010136:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8010138:	697b      	ldr	r3, [r7, #20]
 801013a:	2200      	movs	r2, #0
 801013c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 801013e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8010142:	4618      	mov	r0, r3
 8010144:	3748      	adds	r7, #72	; 0x48
 8010146:	46bd      	mov	sp, r7
 8010148:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801014c:	03d09000 	.word	0x03d09000
 8010150:	003d0900 	.word	0x003d0900
 8010154:	080163cc 	.word	0x080163cc

08010158 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010158:	b480      	push	{r7}
 801015a:	b083      	sub	sp, #12
 801015c:	af00      	add	r7, sp, #0
 801015e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010164:	f003 0301 	and.w	r3, r3, #1
 8010168:	2b00      	cmp	r3, #0
 801016a:	d00a      	beq.n	8010182 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	685b      	ldr	r3, [r3, #4]
 8010172:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	430a      	orrs	r2, r1
 8010180:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010186:	f003 0302 	and.w	r3, r3, #2
 801018a:	2b00      	cmp	r3, #0
 801018c:	d00a      	beq.n	80101a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	685b      	ldr	r3, [r3, #4]
 8010194:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	430a      	orrs	r2, r1
 80101a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101a8:	f003 0304 	and.w	r3, r3, #4
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d00a      	beq.n	80101c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	685b      	ldr	r3, [r3, #4]
 80101b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	430a      	orrs	r2, r1
 80101c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101ca:	f003 0308 	and.w	r3, r3, #8
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d00a      	beq.n	80101e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	685b      	ldr	r3, [r3, #4]
 80101d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	430a      	orrs	r2, r1
 80101e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101ec:	f003 0310 	and.w	r3, r3, #16
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d00a      	beq.n	801020a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	689b      	ldr	r3, [r3, #8]
 80101fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	430a      	orrs	r2, r1
 8010208:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801020e:	f003 0320 	and.w	r3, r3, #32
 8010212:	2b00      	cmp	r3, #0
 8010214:	d00a      	beq.n	801022c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	689b      	ldr	r3, [r3, #8]
 801021c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	430a      	orrs	r2, r1
 801022a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010234:	2b00      	cmp	r3, #0
 8010236:	d01a      	beq.n	801026e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	685b      	ldr	r3, [r3, #4]
 801023e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	430a      	orrs	r2, r1
 801024c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010252:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010256:	d10a      	bne.n	801026e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	685b      	ldr	r3, [r3, #4]
 801025e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	430a      	orrs	r2, r1
 801026c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010276:	2b00      	cmp	r3, #0
 8010278:	d00a      	beq.n	8010290 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	685b      	ldr	r3, [r3, #4]
 8010280:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	430a      	orrs	r2, r1
 801028e:	605a      	str	r2, [r3, #4]
  }
}
 8010290:	bf00      	nop
 8010292:	370c      	adds	r7, #12
 8010294:	46bd      	mov	sp, r7
 8010296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029a:	4770      	bx	lr

0801029c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801029c:	b580      	push	{r7, lr}
 801029e:	b098      	sub	sp, #96	; 0x60
 80102a0:	af02      	add	r7, sp, #8
 80102a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	2200      	movs	r2, #0
 80102a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80102ac:	f7f2 ffc2 	bl	8003234 <HAL_GetTick>
 80102b0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	681b      	ldr	r3, [r3, #0]
 80102b8:	f003 0308 	and.w	r3, r3, #8
 80102bc:	2b08      	cmp	r3, #8
 80102be:	d12f      	bne.n	8010320 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80102c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80102c4:	9300      	str	r3, [sp, #0]
 80102c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80102c8:	2200      	movs	r2, #0
 80102ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80102ce:	6878      	ldr	r0, [r7, #4]
 80102d0:	f000 f88e 	bl	80103f0 <UART_WaitOnFlagUntilTimeout>
 80102d4:	4603      	mov	r3, r0
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d022      	beq.n	8010320 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102e2:	e853 3f00 	ldrex	r3, [r3]
 80102e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80102e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80102ee:	653b      	str	r3, [r7, #80]	; 0x50
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	461a      	mov	r2, r3
 80102f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102f8:	647b      	str	r3, [r7, #68]	; 0x44
 80102fa:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80102fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010300:	e841 2300 	strex	r3, r2, [r1]
 8010304:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010308:	2b00      	cmp	r3, #0
 801030a:	d1e6      	bne.n	80102da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	2220      	movs	r2, #32
 8010310:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	2200      	movs	r2, #0
 8010318:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801031c:	2303      	movs	r3, #3
 801031e:	e063      	b.n	80103e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	f003 0304 	and.w	r3, r3, #4
 801032a:	2b04      	cmp	r3, #4
 801032c:	d149      	bne.n	80103c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801032e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010332:	9300      	str	r3, [sp, #0]
 8010334:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010336:	2200      	movs	r2, #0
 8010338:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801033c:	6878      	ldr	r0, [r7, #4]
 801033e:	f000 f857 	bl	80103f0 <UART_WaitOnFlagUntilTimeout>
 8010342:	4603      	mov	r3, r0
 8010344:	2b00      	cmp	r3, #0
 8010346:	d03c      	beq.n	80103c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801034e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010350:	e853 3f00 	ldrex	r3, [r3]
 8010354:	623b      	str	r3, [r7, #32]
   return(result);
 8010356:	6a3b      	ldr	r3, [r7, #32]
 8010358:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801035c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	461a      	mov	r2, r3
 8010364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010366:	633b      	str	r3, [r7, #48]	; 0x30
 8010368:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801036a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801036c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801036e:	e841 2300 	strex	r3, r2, [r1]
 8010372:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010376:	2b00      	cmp	r3, #0
 8010378:	d1e6      	bne.n	8010348 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	3308      	adds	r3, #8
 8010380:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010382:	693b      	ldr	r3, [r7, #16]
 8010384:	e853 3f00 	ldrex	r3, [r3]
 8010388:	60fb      	str	r3, [r7, #12]
   return(result);
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	f023 0301 	bic.w	r3, r3, #1
 8010390:	64bb      	str	r3, [r7, #72]	; 0x48
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	3308      	adds	r3, #8
 8010398:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801039a:	61fa      	str	r2, [r7, #28]
 801039c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801039e:	69b9      	ldr	r1, [r7, #24]
 80103a0:	69fa      	ldr	r2, [r7, #28]
 80103a2:	e841 2300 	strex	r3, r2, [r1]
 80103a6:	617b      	str	r3, [r7, #20]
   return(result);
 80103a8:	697b      	ldr	r3, [r7, #20]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d1e5      	bne.n	801037a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	2220      	movs	r2, #32
 80103b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	2200      	movs	r2, #0
 80103ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80103be:	2303      	movs	r3, #3
 80103c0:	e012      	b.n	80103e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	2220      	movs	r2, #32
 80103c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	2220      	movs	r2, #32
 80103ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	2200      	movs	r2, #0
 80103d6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	2200      	movs	r2, #0
 80103dc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	2200      	movs	r2, #0
 80103e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80103e6:	2300      	movs	r3, #0
}
 80103e8:	4618      	mov	r0, r3
 80103ea:	3758      	adds	r7, #88	; 0x58
 80103ec:	46bd      	mov	sp, r7
 80103ee:	bd80      	pop	{r7, pc}

080103f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b084      	sub	sp, #16
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	60f8      	str	r0, [r7, #12]
 80103f8:	60b9      	str	r1, [r7, #8]
 80103fa:	603b      	str	r3, [r7, #0]
 80103fc:	4613      	mov	r3, r2
 80103fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010400:	e049      	b.n	8010496 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010402:	69bb      	ldr	r3, [r7, #24]
 8010404:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010408:	d045      	beq.n	8010496 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801040a:	f7f2 ff13 	bl	8003234 <HAL_GetTick>
 801040e:	4602      	mov	r2, r0
 8010410:	683b      	ldr	r3, [r7, #0]
 8010412:	1ad3      	subs	r3, r2, r3
 8010414:	69ba      	ldr	r2, [r7, #24]
 8010416:	429a      	cmp	r2, r3
 8010418:	d302      	bcc.n	8010420 <UART_WaitOnFlagUntilTimeout+0x30>
 801041a:	69bb      	ldr	r3, [r7, #24]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d101      	bne.n	8010424 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010420:	2303      	movs	r3, #3
 8010422:	e048      	b.n	80104b6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	f003 0304 	and.w	r3, r3, #4
 801042e:	2b00      	cmp	r3, #0
 8010430:	d031      	beq.n	8010496 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	69db      	ldr	r3, [r3, #28]
 8010438:	f003 0308 	and.w	r3, r3, #8
 801043c:	2b08      	cmp	r3, #8
 801043e:	d110      	bne.n	8010462 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	2208      	movs	r2, #8
 8010446:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8010448:	68f8      	ldr	r0, [r7, #12]
 801044a:	f000 f839 	bl	80104c0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	2208      	movs	r2, #8
 8010452:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	2200      	movs	r2, #0
 801045a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 801045e:	2301      	movs	r3, #1
 8010460:	e029      	b.n	80104b6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	69db      	ldr	r3, [r3, #28]
 8010468:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801046c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010470:	d111      	bne.n	8010496 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801047a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801047c:	68f8      	ldr	r0, [r7, #12]
 801047e:	f000 f81f 	bl	80104c0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	2220      	movs	r2, #32
 8010486:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	2200      	movs	r2, #0
 801048e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8010492:	2303      	movs	r3, #3
 8010494:	e00f      	b.n	80104b6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	69da      	ldr	r2, [r3, #28]
 801049c:	68bb      	ldr	r3, [r7, #8]
 801049e:	4013      	ands	r3, r2
 80104a0:	68ba      	ldr	r2, [r7, #8]
 80104a2:	429a      	cmp	r2, r3
 80104a4:	bf0c      	ite	eq
 80104a6:	2301      	moveq	r3, #1
 80104a8:	2300      	movne	r3, #0
 80104aa:	b2db      	uxtb	r3, r3
 80104ac:	461a      	mov	r2, r3
 80104ae:	79fb      	ldrb	r3, [r7, #7]
 80104b0:	429a      	cmp	r2, r3
 80104b2:	d0a6      	beq.n	8010402 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80104b4:	2300      	movs	r3, #0
}
 80104b6:	4618      	mov	r0, r3
 80104b8:	3710      	adds	r7, #16
 80104ba:	46bd      	mov	sp, r7
 80104bc:	bd80      	pop	{r7, pc}
	...

080104c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80104c0:	b480      	push	{r7}
 80104c2:	b095      	sub	sp, #84	; 0x54
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104d0:	e853 3f00 	ldrex	r3, [r3]
 80104d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80104d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80104dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	461a      	mov	r2, r3
 80104e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80104e6:	643b      	str	r3, [r7, #64]	; 0x40
 80104e8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80104ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80104ee:	e841 2300 	strex	r3, r2, [r1]
 80104f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80104f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d1e6      	bne.n	80104c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	3308      	adds	r3, #8
 8010500:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010502:	6a3b      	ldr	r3, [r7, #32]
 8010504:	e853 3f00 	ldrex	r3, [r3]
 8010508:	61fb      	str	r3, [r7, #28]
   return(result);
 801050a:	69fa      	ldr	r2, [r7, #28]
 801050c:	4b1e      	ldr	r3, [pc, #120]	; (8010588 <UART_EndRxTransfer+0xc8>)
 801050e:	4013      	ands	r3, r2
 8010510:	64bb      	str	r3, [r7, #72]	; 0x48
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	3308      	adds	r3, #8
 8010518:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801051a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801051c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801051e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010520:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010522:	e841 2300 	strex	r3, r2, [r1]
 8010526:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801052a:	2b00      	cmp	r3, #0
 801052c:	d1e5      	bne.n	80104fa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010532:	2b01      	cmp	r3, #1
 8010534:	d118      	bne.n	8010568 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	e853 3f00 	ldrex	r3, [r3]
 8010542:	60bb      	str	r3, [r7, #8]
   return(result);
 8010544:	68bb      	ldr	r3, [r7, #8]
 8010546:	f023 0310 	bic.w	r3, r3, #16
 801054a:	647b      	str	r3, [r7, #68]	; 0x44
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	461a      	mov	r2, r3
 8010552:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010554:	61bb      	str	r3, [r7, #24]
 8010556:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010558:	6979      	ldr	r1, [r7, #20]
 801055a:	69ba      	ldr	r2, [r7, #24]
 801055c:	e841 2300 	strex	r3, r2, [r1]
 8010560:	613b      	str	r3, [r7, #16]
   return(result);
 8010562:	693b      	ldr	r3, [r7, #16]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d1e6      	bne.n	8010536 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	2220      	movs	r2, #32
 801056c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	2200      	movs	r2, #0
 8010574:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	2200      	movs	r2, #0
 801057a:	675a      	str	r2, [r3, #116]	; 0x74
}
 801057c:	bf00      	nop
 801057e:	3754      	adds	r7, #84	; 0x54
 8010580:	46bd      	mov	sp, r7
 8010582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010586:	4770      	bx	lr
 8010588:	effffffe 	.word	0xeffffffe

0801058c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801058c:	b480      	push	{r7}
 801058e:	b085      	sub	sp, #20
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801059a:	2b01      	cmp	r3, #1
 801059c:	d101      	bne.n	80105a2 <HAL_UARTEx_DisableFifoMode+0x16>
 801059e:	2302      	movs	r3, #2
 80105a0:	e027      	b.n	80105f2 <HAL_UARTEx_DisableFifoMode+0x66>
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	2201      	movs	r2, #1
 80105a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	2224      	movs	r2, #36	; 0x24
 80105ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	681a      	ldr	r2, [r3, #0]
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	f022 0201 	bic.w	r2, r2, #1
 80105c8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80105d0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	2200      	movs	r2, #0
 80105d6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	68fa      	ldr	r2, [r7, #12]
 80105de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	2220      	movs	r2, #32
 80105e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	2200      	movs	r2, #0
 80105ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80105f0:	2300      	movs	r3, #0
}
 80105f2:	4618      	mov	r0, r3
 80105f4:	3714      	adds	r7, #20
 80105f6:	46bd      	mov	sp, r7
 80105f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fc:	4770      	bx	lr

080105fe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80105fe:	b580      	push	{r7, lr}
 8010600:	b084      	sub	sp, #16
 8010602:	af00      	add	r7, sp, #0
 8010604:	6078      	str	r0, [r7, #4]
 8010606:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801060e:	2b01      	cmp	r3, #1
 8010610:	d101      	bne.n	8010616 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010612:	2302      	movs	r3, #2
 8010614:	e02d      	b.n	8010672 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	2201      	movs	r2, #1
 801061a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	2224      	movs	r2, #36	; 0x24
 8010622:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	681a      	ldr	r2, [r3, #0]
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	f022 0201 	bic.w	r2, r2, #1
 801063c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	689b      	ldr	r3, [r3, #8]
 8010644:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	683a      	ldr	r2, [r7, #0]
 801064e:	430a      	orrs	r2, r1
 8010650:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010652:	6878      	ldr	r0, [r7, #4]
 8010654:	f000 f850 	bl	80106f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	68fa      	ldr	r2, [r7, #12]
 801065e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	2220      	movs	r2, #32
 8010664:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	2200      	movs	r2, #0
 801066c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010670:	2300      	movs	r3, #0
}
 8010672:	4618      	mov	r0, r3
 8010674:	3710      	adds	r7, #16
 8010676:	46bd      	mov	sp, r7
 8010678:	bd80      	pop	{r7, pc}

0801067a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801067a:	b580      	push	{r7, lr}
 801067c:	b084      	sub	sp, #16
 801067e:	af00      	add	r7, sp, #0
 8010680:	6078      	str	r0, [r7, #4]
 8010682:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801068a:	2b01      	cmp	r3, #1
 801068c:	d101      	bne.n	8010692 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801068e:	2302      	movs	r3, #2
 8010690:	e02d      	b.n	80106ee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	2201      	movs	r2, #1
 8010696:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	2224      	movs	r2, #36	; 0x24
 801069e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	681a      	ldr	r2, [r3, #0]
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	f022 0201 	bic.w	r2, r2, #1
 80106b8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	681b      	ldr	r3, [r3, #0]
 80106be:	689b      	ldr	r3, [r3, #8]
 80106c0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	683a      	ldr	r2, [r7, #0]
 80106ca:	430a      	orrs	r2, r1
 80106cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80106ce:	6878      	ldr	r0, [r7, #4]
 80106d0:	f000 f812 	bl	80106f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	68fa      	ldr	r2, [r7, #12]
 80106da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	2220      	movs	r2, #32
 80106e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	2200      	movs	r2, #0
 80106e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80106ec:	2300      	movs	r3, #0
}
 80106ee:	4618      	mov	r0, r3
 80106f0:	3710      	adds	r7, #16
 80106f2:	46bd      	mov	sp, r7
 80106f4:	bd80      	pop	{r7, pc}
	...

080106f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80106f8:	b480      	push	{r7}
 80106fa:	b085      	sub	sp, #20
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010704:	2b00      	cmp	r3, #0
 8010706:	d108      	bne.n	801071a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	2201      	movs	r2, #1
 801070c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	2201      	movs	r2, #1
 8010714:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010718:	e031      	b.n	801077e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801071a:	2310      	movs	r3, #16
 801071c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801071e:	2310      	movs	r3, #16
 8010720:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	689b      	ldr	r3, [r3, #8]
 8010728:	0e5b      	lsrs	r3, r3, #25
 801072a:	b2db      	uxtb	r3, r3
 801072c:	f003 0307 	and.w	r3, r3, #7
 8010730:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	689b      	ldr	r3, [r3, #8]
 8010738:	0f5b      	lsrs	r3, r3, #29
 801073a:	b2db      	uxtb	r3, r3
 801073c:	f003 0307 	and.w	r3, r3, #7
 8010740:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010742:	7bbb      	ldrb	r3, [r7, #14]
 8010744:	7b3a      	ldrb	r2, [r7, #12]
 8010746:	4911      	ldr	r1, [pc, #68]	; (801078c <UARTEx_SetNbDataToProcess+0x94>)
 8010748:	5c8a      	ldrb	r2, [r1, r2]
 801074a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801074e:	7b3a      	ldrb	r2, [r7, #12]
 8010750:	490f      	ldr	r1, [pc, #60]	; (8010790 <UARTEx_SetNbDataToProcess+0x98>)
 8010752:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010754:	fb93 f3f2 	sdiv	r3, r3, r2
 8010758:	b29a      	uxth	r2, r3
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010760:	7bfb      	ldrb	r3, [r7, #15]
 8010762:	7b7a      	ldrb	r2, [r7, #13]
 8010764:	4909      	ldr	r1, [pc, #36]	; (801078c <UARTEx_SetNbDataToProcess+0x94>)
 8010766:	5c8a      	ldrb	r2, [r1, r2]
 8010768:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801076c:	7b7a      	ldrb	r2, [r7, #13]
 801076e:	4908      	ldr	r1, [pc, #32]	; (8010790 <UARTEx_SetNbDataToProcess+0x98>)
 8010770:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010772:	fb93 f3f2 	sdiv	r3, r3, r2
 8010776:	b29a      	uxth	r2, r3
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801077e:	bf00      	nop
 8010780:	3714      	adds	r7, #20
 8010782:	46bd      	mov	sp, r7
 8010784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010788:	4770      	bx	lr
 801078a:	bf00      	nop
 801078c:	080163e4 	.word	0x080163e4
 8010790:	080163ec 	.word	0x080163ec

08010794 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8010794:	b084      	sub	sp, #16
 8010796:	b480      	push	{r7}
 8010798:	b085      	sub	sp, #20
 801079a:	af00      	add	r7, sp, #0
 801079c:	6078      	str	r0, [r7, #4]
 801079e:	f107 001c 	add.w	r0, r7, #28
 80107a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80107a6:	2300      	movs	r3, #0
 80107a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 80107aa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 80107ac:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 80107ae:	431a      	orrs	r2, r3
             Init.BusWide             | \
 80107b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 80107b2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 80107b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 80107b6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80107b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 80107ba:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 80107bc:	68fa      	ldr	r2, [r7, #12]
 80107be:	4313      	orrs	r3, r2
 80107c0:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	685a      	ldr	r2, [r3, #4]
 80107c6:	4b07      	ldr	r3, [pc, #28]	; (80107e4 <SDMMC_Init+0x50>)
 80107c8:	4013      	ands	r3, r2
 80107ca:	68fa      	ldr	r2, [r7, #12]
 80107cc:	431a      	orrs	r2, r3
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80107d2:	2300      	movs	r3, #0
}
 80107d4:	4618      	mov	r0, r3
 80107d6:	3714      	adds	r7, #20
 80107d8:	46bd      	mov	sp, r7
 80107da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107de:	b004      	add	sp, #16
 80107e0:	4770      	bx	lr
 80107e2:	bf00      	nop
 80107e4:	ffc02c00 	.word	0xffc02c00

080107e8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80107e8:	b480      	push	{r7}
 80107ea:	b083      	sub	sp, #12
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80107f6:	4618      	mov	r0, r3
 80107f8:	370c      	adds	r7, #12
 80107fa:	46bd      	mov	sp, r7
 80107fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010800:	4770      	bx	lr

08010802 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8010802:	b480      	push	{r7}
 8010804:	b083      	sub	sp, #12
 8010806:	af00      	add	r7, sp, #0
 8010808:	6078      	str	r0, [r7, #4]
 801080a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 801080c:	683b      	ldr	r3, [r7, #0]
 801080e:	681a      	ldr	r2, [r3, #0]
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010816:	2300      	movs	r3, #0
}
 8010818:	4618      	mov	r0, r3
 801081a:	370c      	adds	r7, #12
 801081c:	46bd      	mov	sp, r7
 801081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010822:	4770      	bx	lr

08010824 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8010824:	b480      	push	{r7}
 8010826:	b083      	sub	sp, #12
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	f043 0203 	orr.w	r2, r3, #3
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8010838:	2300      	movs	r3, #0
}
 801083a:	4618      	mov	r0, r3
 801083c:	370c      	adds	r7, #12
 801083e:	46bd      	mov	sp, r7
 8010840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010844:	4770      	bx	lr

08010846 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8010846:	b480      	push	{r7}
 8010848:	b083      	sub	sp, #12
 801084a:	af00      	add	r7, sp, #0
 801084c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	f003 0303 	and.w	r3, r3, #3
}
 8010856:	4618      	mov	r0, r3
 8010858:	370c      	adds	r7, #12
 801085a:	46bd      	mov	sp, r7
 801085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010860:	4770      	bx	lr
	...

08010864 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8010864:	b480      	push	{r7}
 8010866:	b085      	sub	sp, #20
 8010868:	af00      	add	r7, sp, #0
 801086a:	6078      	str	r0, [r7, #4]
 801086c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801086e:	2300      	movs	r3, #0
 8010870:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8010872:	683b      	ldr	r3, [r7, #0]
 8010874:	681a      	ldr	r2, [r3, #0]
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801087a:	683b      	ldr	r3, [r7, #0]
 801087c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 801087e:	683b      	ldr	r3, [r7, #0]
 8010880:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010882:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8010884:	683b      	ldr	r3, [r7, #0]
 8010886:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8010888:	431a      	orrs	r2, r3
                       Command->CPSM);
 801088a:	683b      	ldr	r3, [r7, #0]
 801088c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 801088e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8010890:	68fa      	ldr	r2, [r7, #12]
 8010892:	4313      	orrs	r3, r2
 8010894:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	68da      	ldr	r2, [r3, #12]
 801089a:	4b06      	ldr	r3, [pc, #24]	; (80108b4 <SDMMC_SendCommand+0x50>)
 801089c:	4013      	ands	r3, r2
 801089e:	68fa      	ldr	r2, [r7, #12]
 80108a0:	431a      	orrs	r2, r3
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80108a6:	2300      	movs	r3, #0
}
 80108a8:	4618      	mov	r0, r3
 80108aa:	3714      	adds	r7, #20
 80108ac:	46bd      	mov	sp, r7
 80108ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b2:	4770      	bx	lr
 80108b4:	fffee0c0 	.word	0xfffee0c0

080108b8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80108b8:	b480      	push	{r7}
 80108ba:	b083      	sub	sp, #12
 80108bc:	af00      	add	r7, sp, #0
 80108be:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	691b      	ldr	r3, [r3, #16]
 80108c4:	b2db      	uxtb	r3, r3
}
 80108c6:	4618      	mov	r0, r3
 80108c8:	370c      	adds	r7, #12
 80108ca:	46bd      	mov	sp, r7
 80108cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d0:	4770      	bx	lr

080108d2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80108d2:	b480      	push	{r7}
 80108d4:	b085      	sub	sp, #20
 80108d6:	af00      	add	r7, sp, #0
 80108d8:	6078      	str	r0, [r7, #4]
 80108da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	3314      	adds	r3, #20
 80108e0:	461a      	mov	r2, r3
 80108e2:	683b      	ldr	r3, [r7, #0]
 80108e4:	4413      	add	r3, r2
 80108e6:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	681b      	ldr	r3, [r3, #0]
}
 80108ec:	4618      	mov	r0, r3
 80108ee:	3714      	adds	r7, #20
 80108f0:	46bd      	mov	sp, r7
 80108f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f6:	4770      	bx	lr

080108f8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80108f8:	b480      	push	{r7}
 80108fa:	b085      	sub	sp, #20
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
 8010900:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010902:	2300      	movs	r3, #0
 8010904:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8010906:	683b      	ldr	r3, [r7, #0]
 8010908:	681a      	ldr	r2, [r3, #0]
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 801090e:	683b      	ldr	r3, [r7, #0]
 8010910:	685a      	ldr	r2, [r3, #4]
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8010916:	683b      	ldr	r3, [r7, #0]
 8010918:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 801091a:	683b      	ldr	r3, [r7, #0]
 801091c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801091e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8010920:	683b      	ldr	r3, [r7, #0]
 8010922:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8010924:	431a      	orrs	r2, r3
                       Data->DPSM);
 8010926:	683b      	ldr	r3, [r7, #0]
 8010928:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 801092a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801092c:	68fa      	ldr	r2, [r7, #12]
 801092e:	4313      	orrs	r3, r2
 8010930:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010936:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	431a      	orrs	r2, r3
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8010942:	2300      	movs	r3, #0

}
 8010944:	4618      	mov	r0, r3
 8010946:	3714      	adds	r7, #20
 8010948:	46bd      	mov	sp, r7
 801094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801094e:	4770      	bx	lr

08010950 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8010950:	b580      	push	{r7, lr}
 8010952:	b088      	sub	sp, #32
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
 8010958:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 801095a:	683b      	ldr	r3, [r7, #0]
 801095c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801095e:	2310      	movs	r3, #16
 8010960:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010962:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010966:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010968:	2300      	movs	r3, #0
 801096a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801096c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010970:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010972:	f107 0308 	add.w	r3, r7, #8
 8010976:	4619      	mov	r1, r3
 8010978:	6878      	ldr	r0, [r7, #4]
 801097a:	f7ff ff73 	bl	8010864 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801097e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010982:	2110      	movs	r1, #16
 8010984:	6878      	ldr	r0, [r7, #4]
 8010986:	f000 fa5f 	bl	8010e48 <SDMMC_GetCmdResp1>
 801098a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801098c:	69fb      	ldr	r3, [r7, #28]
}
 801098e:	4618      	mov	r0, r3
 8010990:	3720      	adds	r7, #32
 8010992:	46bd      	mov	sp, r7
 8010994:	bd80      	pop	{r7, pc}

08010996 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8010996:	b580      	push	{r7, lr}
 8010998:	b088      	sub	sp, #32
 801099a:	af00      	add	r7, sp, #0
 801099c:	6078      	str	r0, [r7, #4]
 801099e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80109a0:	683b      	ldr	r3, [r7, #0]
 80109a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80109a4:	2311      	movs	r3, #17
 80109a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80109a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80109ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80109ae:	2300      	movs	r3, #0
 80109b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80109b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80109b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80109b8:	f107 0308 	add.w	r3, r7, #8
 80109bc:	4619      	mov	r1, r3
 80109be:	6878      	ldr	r0, [r7, #4]
 80109c0:	f7ff ff50 	bl	8010864 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80109c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80109c8:	2111      	movs	r1, #17
 80109ca:	6878      	ldr	r0, [r7, #4]
 80109cc:	f000 fa3c 	bl	8010e48 <SDMMC_GetCmdResp1>
 80109d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80109d2:	69fb      	ldr	r3, [r7, #28]
}
 80109d4:	4618      	mov	r0, r3
 80109d6:	3720      	adds	r7, #32
 80109d8:	46bd      	mov	sp, r7
 80109da:	bd80      	pop	{r7, pc}

080109dc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80109dc:	b580      	push	{r7, lr}
 80109de:	b088      	sub	sp, #32
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	6078      	str	r0, [r7, #4]
 80109e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80109e6:	683b      	ldr	r3, [r7, #0]
 80109e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80109ea:	2312      	movs	r3, #18
 80109ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80109ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80109f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80109f4:	2300      	movs	r3, #0
 80109f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80109f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80109fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80109fe:	f107 0308 	add.w	r3, r7, #8
 8010a02:	4619      	mov	r1, r3
 8010a04:	6878      	ldr	r0, [r7, #4]
 8010a06:	f7ff ff2d 	bl	8010864 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a0e:	2112      	movs	r1, #18
 8010a10:	6878      	ldr	r0, [r7, #4]
 8010a12:	f000 fa19 	bl	8010e48 <SDMMC_GetCmdResp1>
 8010a16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a18:	69fb      	ldr	r3, [r7, #28]
}
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	3720      	adds	r7, #32
 8010a1e:	46bd      	mov	sp, r7
 8010a20:	bd80      	pop	{r7, pc}

08010a22 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010a22:	b580      	push	{r7, lr}
 8010a24:	b088      	sub	sp, #32
 8010a26:	af00      	add	r7, sp, #0
 8010a28:	6078      	str	r0, [r7, #4]
 8010a2a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010a2c:	683b      	ldr	r3, [r7, #0]
 8010a2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8010a30:	2318      	movs	r3, #24
 8010a32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010a34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010a38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010a42:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a44:	f107 0308 	add.w	r3, r7, #8
 8010a48:	4619      	mov	r1, r3
 8010a4a:	6878      	ldr	r0, [r7, #4]
 8010a4c:	f7ff ff0a 	bl	8010864 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8010a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a54:	2118      	movs	r1, #24
 8010a56:	6878      	ldr	r0, [r7, #4]
 8010a58:	f000 f9f6 	bl	8010e48 <SDMMC_GetCmdResp1>
 8010a5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010a5e:	69fb      	ldr	r3, [r7, #28]
}
 8010a60:	4618      	mov	r0, r3
 8010a62:	3720      	adds	r7, #32
 8010a64:	46bd      	mov	sp, r7
 8010a66:	bd80      	pop	{r7, pc}

08010a68 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	b088      	sub	sp, #32
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
 8010a70:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8010a72:	683b      	ldr	r3, [r7, #0]
 8010a74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8010a76:	2319      	movs	r3, #25
 8010a78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010a7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010a7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010a80:	2300      	movs	r3, #0
 8010a82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010a84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010a88:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010a8a:	f107 0308 	add.w	r3, r7, #8
 8010a8e:	4619      	mov	r1, r3
 8010a90:	6878      	ldr	r0, [r7, #4]
 8010a92:	f7ff fee7 	bl	8010864 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8010a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8010a9a:	2119      	movs	r1, #25
 8010a9c:	6878      	ldr	r0, [r7, #4]
 8010a9e:	f000 f9d3 	bl	8010e48 <SDMMC_GetCmdResp1>
 8010aa2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010aa4:	69fb      	ldr	r3, [r7, #28]
}
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	3720      	adds	r7, #32
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	bd80      	pop	{r7, pc}
	...

08010ab0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b088      	sub	sp, #32
 8010ab4:	af00      	add	r7, sp, #0
 8010ab6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8010ab8:	2300      	movs	r3, #0
 8010aba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010abc:	230c      	movs	r3, #12
 8010abe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010ac0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010ac4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010aca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010ace:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	68db      	ldr	r3, [r3, #12]
 8010ad4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	68db      	ldr	r3, [r3, #12]
 8010ae0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010ae8:	f107 0308 	add.w	r3, r7, #8
 8010aec:	4619      	mov	r1, r3
 8010aee:	6878      	ldr	r0, [r7, #4]
 8010af0:	f7ff feb8 	bl	8010864 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8010af4:	4a0b      	ldr	r2, [pc, #44]	; (8010b24 <SDMMC_CmdStopTransfer+0x74>)
 8010af6:	210c      	movs	r1, #12
 8010af8:	6878      	ldr	r0, [r7, #4]
 8010afa:	f000 f9a5 	bl	8010e48 <SDMMC_GetCmdResp1>
 8010afe:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	68db      	ldr	r3, [r3, #12]
 8010b04:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8010b0c:	69fb      	ldr	r3, [r7, #28]
 8010b0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010b12:	d101      	bne.n	8010b18 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8010b14:	2300      	movs	r3, #0
 8010b16:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8010b18:	69fb      	ldr	r3, [r7, #28]
}
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	3720      	adds	r7, #32
 8010b1e:	46bd      	mov	sp, r7
 8010b20:	bd80      	pop	{r7, pc}
 8010b22:	bf00      	nop
 8010b24:	05f5e100 	.word	0x05f5e100

08010b28 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8010b28:	b580      	push	{r7, lr}
 8010b2a:	b088      	sub	sp, #32
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	6078      	str	r0, [r7, #4]
 8010b30:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010b32:	683b      	ldr	r3, [r7, #0]
 8010b34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010b36:	2307      	movs	r3, #7
 8010b38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010b3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010b3e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010b40:	2300      	movs	r3, #0
 8010b42:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010b44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010b48:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010b4a:	f107 0308 	add.w	r3, r7, #8
 8010b4e:	4619      	mov	r1, r3
 8010b50:	6878      	ldr	r0, [r7, #4]
 8010b52:	f7ff fe87 	bl	8010864 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8010b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8010b5a:	2107      	movs	r1, #7
 8010b5c:	6878      	ldr	r0, [r7, #4]
 8010b5e:	f000 f973 	bl	8010e48 <SDMMC_GetCmdResp1>
 8010b62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010b64:	69fb      	ldr	r3, [r7, #28]
}
 8010b66:	4618      	mov	r0, r3
 8010b68:	3720      	adds	r7, #32
 8010b6a:	46bd      	mov	sp, r7
 8010b6c:	bd80      	pop	{r7, pc}

08010b6e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8010b6e:	b580      	push	{r7, lr}
 8010b70:	b088      	sub	sp, #32
 8010b72:	af00      	add	r7, sp, #0
 8010b74:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010b76:	2300      	movs	r3, #0
 8010b78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8010b7e:	2300      	movs	r3, #0
 8010b80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010b82:	2300      	movs	r3, #0
 8010b84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010b86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010b8a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010b8c:	f107 0308 	add.w	r3, r7, #8
 8010b90:	4619      	mov	r1, r3
 8010b92:	6878      	ldr	r0, [r7, #4]
 8010b94:	f7ff fe66 	bl	8010864 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8010b98:	6878      	ldr	r0, [r7, #4]
 8010b9a:	f000 fb97 	bl	80112cc <SDMMC_GetCmdError>
 8010b9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010ba0:	69fb      	ldr	r3, [r7, #28]
}
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	3720      	adds	r7, #32
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	bd80      	pop	{r7, pc}

08010baa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8010baa:	b580      	push	{r7, lr}
 8010bac:	b088      	sub	sp, #32
 8010bae:	af00      	add	r7, sp, #0
 8010bb0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010bb2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8010bb6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8010bb8:	2308      	movs	r3, #8
 8010bba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010bbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010bc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010bc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010bca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010bcc:	f107 0308 	add.w	r3, r7, #8
 8010bd0:	4619      	mov	r1, r3
 8010bd2:	6878      	ldr	r0, [r7, #4]
 8010bd4:	f7ff fe46 	bl	8010864 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8010bd8:	6878      	ldr	r0, [r7, #4]
 8010bda:	f000 fb29 	bl	8011230 <SDMMC_GetCmdResp7>
 8010bde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010be0:	69fb      	ldr	r3, [r7, #28]
}
 8010be2:	4618      	mov	r0, r3
 8010be4:	3720      	adds	r7, #32
 8010be6:	46bd      	mov	sp, r7
 8010be8:	bd80      	pop	{r7, pc}

08010bea <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010bea:	b580      	push	{r7, lr}
 8010bec:	b088      	sub	sp, #32
 8010bee:	af00      	add	r7, sp, #0
 8010bf0:	6078      	str	r0, [r7, #4]
 8010bf2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010bf4:	683b      	ldr	r3, [r7, #0]
 8010bf6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010bf8:	2337      	movs	r3, #55	; 0x37
 8010bfa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010bfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010c00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c02:	2300      	movs	r3, #0
 8010c04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010c0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c0c:	f107 0308 	add.w	r3, r7, #8
 8010c10:	4619      	mov	r1, r3
 8010c12:	6878      	ldr	r0, [r7, #4]
 8010c14:	f7ff fe26 	bl	8010864 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8010c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c1c:	2137      	movs	r1, #55	; 0x37
 8010c1e:	6878      	ldr	r0, [r7, #4]
 8010c20:	f000 f912 	bl	8010e48 <SDMMC_GetCmdResp1>
 8010c24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c26:	69fb      	ldr	r3, [r7, #28]
}
 8010c28:	4618      	mov	r0, r3
 8010c2a:	3720      	adds	r7, #32
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	bd80      	pop	{r7, pc}

08010c30 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010c30:	b580      	push	{r7, lr}
 8010c32:	b088      	sub	sp, #32
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]
 8010c38:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010c3a:	683b      	ldr	r3, [r7, #0]
 8010c3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010c3e:	2329      	movs	r3, #41	; 0x29
 8010c40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010c42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010c46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c48:	2300      	movs	r3, #0
 8010c4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010c50:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c52:	f107 0308 	add.w	r3, r7, #8
 8010c56:	4619      	mov	r1, r3
 8010c58:	6878      	ldr	r0, [r7, #4]
 8010c5a:	f7ff fe03 	bl	8010864 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8010c5e:	6878      	ldr	r0, [r7, #4]
 8010c60:	f000 fa2e 	bl	80110c0 <SDMMC_GetCmdResp3>
 8010c64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010c66:	69fb      	ldr	r3, [r7, #28]
}
 8010c68:	4618      	mov	r0, r3
 8010c6a:	3720      	adds	r7, #32
 8010c6c:	46bd      	mov	sp, r7
 8010c6e:	bd80      	pop	{r7, pc}

08010c70 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b088      	sub	sp, #32
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
 8010c78:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010c7a:	683b      	ldr	r3, [r7, #0]
 8010c7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010c7e:	2306      	movs	r3, #6
 8010c80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010c82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010c86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010c88:	2300      	movs	r3, #0
 8010c8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010c8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010c90:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010c92:	f107 0308 	add.w	r3, r7, #8
 8010c96:	4619      	mov	r1, r3
 8010c98:	6878      	ldr	r0, [r7, #4]
 8010c9a:	f7ff fde3 	bl	8010864 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8010c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010ca2:	2106      	movs	r1, #6
 8010ca4:	6878      	ldr	r0, [r7, #4]
 8010ca6:	f000 f8cf 	bl	8010e48 <SDMMC_GetCmdResp1>
 8010caa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010cac:	69fb      	ldr	r3, [r7, #28]
}
 8010cae:	4618      	mov	r0, r3
 8010cb0:	3720      	adds	r7, #32
 8010cb2:	46bd      	mov	sp, r7
 8010cb4:	bd80      	pop	{r7, pc}

08010cb6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8010cb6:	b580      	push	{r7, lr}
 8010cb8:	b088      	sub	sp, #32
 8010cba:	af00      	add	r7, sp, #0
 8010cbc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010cbe:	2300      	movs	r3, #0
 8010cc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010cc2:	2333      	movs	r3, #51	; 0x33
 8010cc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010cc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010cca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010ccc:	2300      	movs	r3, #0
 8010cce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010cd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010cd4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010cd6:	f107 0308 	add.w	r3, r7, #8
 8010cda:	4619      	mov	r1, r3
 8010cdc:	6878      	ldr	r0, [r7, #4]
 8010cde:	f7ff fdc1 	bl	8010864 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8010ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8010ce6:	2133      	movs	r1, #51	; 0x33
 8010ce8:	6878      	ldr	r0, [r7, #4]
 8010cea:	f000 f8ad 	bl	8010e48 <SDMMC_GetCmdResp1>
 8010cee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010cf0:	69fb      	ldr	r3, [r7, #28]
}
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	3720      	adds	r7, #32
 8010cf6:	46bd      	mov	sp, r7
 8010cf8:	bd80      	pop	{r7, pc}

08010cfa <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8010cfa:	b580      	push	{r7, lr}
 8010cfc:	b088      	sub	sp, #32
 8010cfe:	af00      	add	r7, sp, #0
 8010d00:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010d02:	2300      	movs	r3, #0
 8010d04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010d06:	2302      	movs	r3, #2
 8010d08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010d0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010d0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010d10:	2300      	movs	r3, #0
 8010d12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010d14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010d18:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010d1a:	f107 0308 	add.w	r3, r7, #8
 8010d1e:	4619      	mov	r1, r3
 8010d20:	6878      	ldr	r0, [r7, #4]
 8010d22:	f7ff fd9f 	bl	8010864 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010d26:	6878      	ldr	r0, [r7, #4]
 8010d28:	f000 f980 	bl	801102c <SDMMC_GetCmdResp2>
 8010d2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d2e:	69fb      	ldr	r3, [r7, #28]
}
 8010d30:	4618      	mov	r0, r3
 8010d32:	3720      	adds	r7, #32
 8010d34:	46bd      	mov	sp, r7
 8010d36:	bd80      	pop	{r7, pc}

08010d38 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010d38:	b580      	push	{r7, lr}
 8010d3a:	b088      	sub	sp, #32
 8010d3c:	af00      	add	r7, sp, #0
 8010d3e:	6078      	str	r0, [r7, #4]
 8010d40:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8010d42:	683b      	ldr	r3, [r7, #0]
 8010d44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010d46:	2309      	movs	r3, #9
 8010d48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8010d4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8010d4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010d50:	2300      	movs	r3, #0
 8010d52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010d54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010d58:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010d5a:	f107 0308 	add.w	r3, r7, #8
 8010d5e:	4619      	mov	r1, r3
 8010d60:	6878      	ldr	r0, [r7, #4]
 8010d62:	f7ff fd7f 	bl	8010864 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8010d66:	6878      	ldr	r0, [r7, #4]
 8010d68:	f000 f960 	bl	801102c <SDMMC_GetCmdResp2>
 8010d6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010d6e:	69fb      	ldr	r3, [r7, #28]
}
 8010d70:	4618      	mov	r0, r3
 8010d72:	3720      	adds	r7, #32
 8010d74:	46bd      	mov	sp, r7
 8010d76:	bd80      	pop	{r7, pc}

08010d78 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8010d78:	b580      	push	{r7, lr}
 8010d7a:	b088      	sub	sp, #32
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	6078      	str	r0, [r7, #4]
 8010d80:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010d82:	2300      	movs	r3, #0
 8010d84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010d86:	2303      	movs	r3, #3
 8010d88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010d8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010d8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010d90:	2300      	movs	r3, #0
 8010d92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010d94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010d98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010d9a:	f107 0308 	add.w	r3, r7, #8
 8010d9e:	4619      	mov	r1, r3
 8010da0:	6878      	ldr	r0, [r7, #4]
 8010da2:	f7ff fd5f 	bl	8010864 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010da6:	683a      	ldr	r2, [r7, #0]
 8010da8:	2103      	movs	r1, #3
 8010daa:	6878      	ldr	r0, [r7, #4]
 8010dac:	f000 f9c8 	bl	8011140 <SDMMC_GetCmdResp6>
 8010db0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010db2:	69fb      	ldr	r3, [r7, #28]
}
 8010db4:	4618      	mov	r0, r3
 8010db6:	3720      	adds	r7, #32
 8010db8:	46bd      	mov	sp, r7
 8010dba:	bd80      	pop	{r7, pc}

08010dbc <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8010dbc:	b580      	push	{r7, lr}
 8010dbe:	b088      	sub	sp, #32
 8010dc0:	af00      	add	r7, sp, #0
 8010dc2:	6078      	str	r0, [r7, #4]
 8010dc4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8010dc6:	683b      	ldr	r3, [r7, #0]
 8010dc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010dca:	230d      	movs	r3, #13
 8010dcc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010dce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010dd2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010dd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010ddc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010dde:	f107 0308 	add.w	r3, r7, #8
 8010de2:	4619      	mov	r1, r3
 8010de4:	6878      	ldr	r0, [r7, #4]
 8010de6:	f7ff fd3d 	bl	8010864 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8010dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8010dee:	210d      	movs	r1, #13
 8010df0:	6878      	ldr	r0, [r7, #4]
 8010df2:	f000 f829 	bl	8010e48 <SDMMC_GetCmdResp1>
 8010df6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010df8:	69fb      	ldr	r3, [r7, #28]
}
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	3720      	adds	r7, #32
 8010dfe:	46bd      	mov	sp, r7
 8010e00:	bd80      	pop	{r7, pc}

08010e02 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8010e02:	b580      	push	{r7, lr}
 8010e04:	b088      	sub	sp, #32
 8010e06:	af00      	add	r7, sp, #0
 8010e08:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8010e0e:	230d      	movs	r3, #13
 8010e10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8010e12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010e16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8010e18:	2300      	movs	r3, #0
 8010e1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8010e1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010e20:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8010e22:	f107 0308 	add.w	r3, r7, #8
 8010e26:	4619      	mov	r1, r3
 8010e28:	6878      	ldr	r0, [r7, #4]
 8010e2a:	f7ff fd1b 	bl	8010864 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8010e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010e32:	210d      	movs	r1, #13
 8010e34:	6878      	ldr	r0, [r7, #4]
 8010e36:	f000 f807 	bl	8010e48 <SDMMC_GetCmdResp1>
 8010e3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010e3c:	69fb      	ldr	r3, [r7, #28]
}
 8010e3e:	4618      	mov	r0, r3
 8010e40:	3720      	adds	r7, #32
 8010e42:	46bd      	mov	sp, r7
 8010e44:	bd80      	pop	{r7, pc}
	...

08010e48 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010e48:	b580      	push	{r7, lr}
 8010e4a:	b088      	sub	sp, #32
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	60f8      	str	r0, [r7, #12]
 8010e50:	460b      	mov	r3, r1
 8010e52:	607a      	str	r2, [r7, #4]
 8010e54:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010e56:	4b70      	ldr	r3, [pc, #448]	; (8011018 <SDMMC_GetCmdResp1+0x1d0>)
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	4a70      	ldr	r2, [pc, #448]	; (801101c <SDMMC_GetCmdResp1+0x1d4>)
 8010e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8010e60:	0a5a      	lsrs	r2, r3, #9
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	fb02 f303 	mul.w	r3, r2, r3
 8010e68:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8010e6a:	69fb      	ldr	r3, [r7, #28]
 8010e6c:	1e5a      	subs	r2, r3, #1
 8010e6e:	61fa      	str	r2, [r7, #28]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d102      	bne.n	8010e7a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010e74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010e78:	e0c9      	b.n	801100e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e7e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010e80:	69ba      	ldr	r2, [r7, #24]
 8010e82:	4b67      	ldr	r3, [pc, #412]	; (8011020 <SDMMC_GetCmdResp1+0x1d8>)
 8010e84:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d0ef      	beq.n	8010e6a <SDMMC_GetCmdResp1+0x22>
 8010e8a:	69bb      	ldr	r3, [r7, #24]
 8010e8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d1ea      	bne.n	8010e6a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e98:	f003 0304 	and.w	r3, r3, #4
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d004      	beq.n	8010eaa <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	2204      	movs	r2, #4
 8010ea4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010ea6:	2304      	movs	r3, #4
 8010ea8:	e0b1      	b.n	801100e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010eae:	f003 0301 	and.w	r3, r3, #1
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d004      	beq.n	8010ec0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	2201      	movs	r2, #1
 8010eba:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010ebc:	2301      	movs	r3, #1
 8010ebe:	e0a6      	b.n	801100e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	4a58      	ldr	r2, [pc, #352]	; (8011024 <SDMMC_GetCmdResp1+0x1dc>)
 8010ec4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010ec6:	68f8      	ldr	r0, [r7, #12]
 8010ec8:	f7ff fcf6 	bl	80108b8 <SDMMC_GetCommandResponse>
 8010ecc:	4603      	mov	r3, r0
 8010ece:	461a      	mov	r2, r3
 8010ed0:	7afb      	ldrb	r3, [r7, #11]
 8010ed2:	4293      	cmp	r3, r2
 8010ed4:	d001      	beq.n	8010eda <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010ed6:	2301      	movs	r3, #1
 8010ed8:	e099      	b.n	801100e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8010eda:	2100      	movs	r1, #0
 8010edc:	68f8      	ldr	r0, [r7, #12]
 8010ede:	f7ff fcf8 	bl	80108d2 <SDMMC_GetResponse>
 8010ee2:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010ee4:	697a      	ldr	r2, [r7, #20]
 8010ee6:	4b50      	ldr	r3, [pc, #320]	; (8011028 <SDMMC_GetCmdResp1+0x1e0>)
 8010ee8:	4013      	ands	r3, r2
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d101      	bne.n	8010ef2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8010eee:	2300      	movs	r3, #0
 8010ef0:	e08d      	b.n	801100e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010ef2:	697b      	ldr	r3, [r7, #20]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	da02      	bge.n	8010efe <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010ef8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010efc:	e087      	b.n	801100e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010efe:	697b      	ldr	r3, [r7, #20]
 8010f00:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d001      	beq.n	8010f0c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010f08:	2340      	movs	r3, #64	; 0x40
 8010f0a:	e080      	b.n	801100e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010f0c:	697b      	ldr	r3, [r7, #20]
 8010f0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d001      	beq.n	8010f1a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010f16:	2380      	movs	r3, #128	; 0x80
 8010f18:	e079      	b.n	801100e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010f1a:	697b      	ldr	r3, [r7, #20]
 8010f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d002      	beq.n	8010f2a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010f24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010f28:	e071      	b.n	801100e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010f2a:	697b      	ldr	r3, [r7, #20]
 8010f2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d002      	beq.n	8010f3a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010f34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010f38:	e069      	b.n	801100e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010f3a:	697b      	ldr	r3, [r7, #20]
 8010f3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d002      	beq.n	8010f4a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010f44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010f48:	e061      	b.n	801100e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010f4a:	697b      	ldr	r3, [r7, #20]
 8010f4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d002      	beq.n	8010f5a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010f54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010f58:	e059      	b.n	801100e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010f5a:	697b      	ldr	r3, [r7, #20]
 8010f5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d002      	beq.n	8010f6a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010f64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010f68:	e051      	b.n	801100e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010f6a:	697b      	ldr	r3, [r7, #20]
 8010f6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d002      	beq.n	8010f7a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010f74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010f78:	e049      	b.n	801100e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010f7a:	697b      	ldr	r3, [r7, #20]
 8010f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d002      	beq.n	8010f8a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010f84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010f88:	e041      	b.n	801100e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010f8a:	697b      	ldr	r3, [r7, #20]
 8010f8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d002      	beq.n	8010f9a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8010f94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010f98:	e039      	b.n	801100e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010f9a:	697b      	ldr	r3, [r7, #20]
 8010f9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d002      	beq.n	8010faa <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010fa4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010fa8:	e031      	b.n	801100e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010faa:	697b      	ldr	r3, [r7, #20]
 8010fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d002      	beq.n	8010fba <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010fb4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010fb8:	e029      	b.n	801100e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010fba:	697b      	ldr	r3, [r7, #20]
 8010fbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d002      	beq.n	8010fca <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010fc4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010fc8:	e021      	b.n	801100e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010fca:	697b      	ldr	r3, [r7, #20]
 8010fcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d002      	beq.n	8010fda <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010fd4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010fd8:	e019      	b.n	801100e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010fda:	697b      	ldr	r3, [r7, #20]
 8010fdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d002      	beq.n	8010fea <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010fe4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010fe8:	e011      	b.n	801100e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010fea:	697b      	ldr	r3, [r7, #20]
 8010fec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d002      	beq.n	8010ffa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010ff4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010ff8:	e009      	b.n	801100e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010ffa:	697b      	ldr	r3, [r7, #20]
 8010ffc:	f003 0308 	and.w	r3, r3, #8
 8011000:	2b00      	cmp	r3, #0
 8011002:	d002      	beq.n	801100a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8011004:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8011008:	e001      	b.n	801100e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801100a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801100e:	4618      	mov	r0, r3
 8011010:	3720      	adds	r7, #32
 8011012:	46bd      	mov	sp, r7
 8011014:	bd80      	pop	{r7, pc}
 8011016:	bf00      	nop
 8011018:	24000000 	.word	0x24000000
 801101c:	10624dd3 	.word	0x10624dd3
 8011020:	00200045 	.word	0x00200045
 8011024:	002000c5 	.word	0x002000c5
 8011028:	fdffe008 	.word	0xfdffe008

0801102c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 801102c:	b480      	push	{r7}
 801102e:	b085      	sub	sp, #20
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011034:	4b1f      	ldr	r3, [pc, #124]	; (80110b4 <SDMMC_GetCmdResp2+0x88>)
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	4a1f      	ldr	r2, [pc, #124]	; (80110b8 <SDMMC_GetCmdResp2+0x8c>)
 801103a:	fba2 2303 	umull	r2, r3, r2, r3
 801103e:	0a5b      	lsrs	r3, r3, #9
 8011040:	f241 3288 	movw	r2, #5000	; 0x1388
 8011044:	fb02 f303 	mul.w	r3, r2, r3
 8011048:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	1e5a      	subs	r2, r3, #1
 801104e:	60fa      	str	r2, [r7, #12]
 8011050:	2b00      	cmp	r3, #0
 8011052:	d102      	bne.n	801105a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011054:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011058:	e026      	b.n	80110a8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801105e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011060:	68bb      	ldr	r3, [r7, #8]
 8011062:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8011066:	2b00      	cmp	r3, #0
 8011068:	d0ef      	beq.n	801104a <SDMMC_GetCmdResp2+0x1e>
 801106a:	68bb      	ldr	r3, [r7, #8]
 801106c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011070:	2b00      	cmp	r3, #0
 8011072:	d1ea      	bne.n	801104a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011078:	f003 0304 	and.w	r3, r3, #4
 801107c:	2b00      	cmp	r3, #0
 801107e:	d004      	beq.n	801108a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	2204      	movs	r2, #4
 8011084:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011086:	2304      	movs	r3, #4
 8011088:	e00e      	b.n	80110a8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801108e:	f003 0301 	and.w	r3, r3, #1
 8011092:	2b00      	cmp	r3, #0
 8011094:	d004      	beq.n	80110a0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	2201      	movs	r2, #1
 801109a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801109c:	2301      	movs	r3, #1
 801109e:	e003      	b.n	80110a8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	4a06      	ldr	r2, [pc, #24]	; (80110bc <SDMMC_GetCmdResp2+0x90>)
 80110a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80110a6:	2300      	movs	r3, #0
}
 80110a8:	4618      	mov	r0, r3
 80110aa:	3714      	adds	r7, #20
 80110ac:	46bd      	mov	sp, r7
 80110ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b2:	4770      	bx	lr
 80110b4:	24000000 	.word	0x24000000
 80110b8:	10624dd3 	.word	0x10624dd3
 80110bc:	002000c5 	.word	0x002000c5

080110c0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80110c0:	b480      	push	{r7}
 80110c2:	b085      	sub	sp, #20
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80110c8:	4b1a      	ldr	r3, [pc, #104]	; (8011134 <SDMMC_GetCmdResp3+0x74>)
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	4a1a      	ldr	r2, [pc, #104]	; (8011138 <SDMMC_GetCmdResp3+0x78>)
 80110ce:	fba2 2303 	umull	r2, r3, r2, r3
 80110d2:	0a5b      	lsrs	r3, r3, #9
 80110d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80110d8:	fb02 f303 	mul.w	r3, r2, r3
 80110dc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	1e5a      	subs	r2, r3, #1
 80110e2:	60fa      	str	r2, [r7, #12]
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d102      	bne.n	80110ee <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80110e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80110ec:	e01b      	b.n	8011126 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110f2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80110f4:	68bb      	ldr	r3, [r7, #8]
 80110f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d0ef      	beq.n	80110de <SDMMC_GetCmdResp3+0x1e>
 80110fe:	68bb      	ldr	r3, [r7, #8]
 8011100:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011104:	2b00      	cmp	r3, #0
 8011106:	d1ea      	bne.n	80110de <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801110c:	f003 0304 	and.w	r3, r3, #4
 8011110:	2b00      	cmp	r3, #0
 8011112:	d004      	beq.n	801111e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	2204      	movs	r2, #4
 8011118:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801111a:	2304      	movs	r3, #4
 801111c:	e003      	b.n	8011126 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	4a06      	ldr	r2, [pc, #24]	; (801113c <SDMMC_GetCmdResp3+0x7c>)
 8011122:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011124:	2300      	movs	r3, #0
}
 8011126:	4618      	mov	r0, r3
 8011128:	3714      	adds	r7, #20
 801112a:	46bd      	mov	sp, r7
 801112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011130:	4770      	bx	lr
 8011132:	bf00      	nop
 8011134:	24000000 	.word	0x24000000
 8011138:	10624dd3 	.word	0x10624dd3
 801113c:	002000c5 	.word	0x002000c5

08011140 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8011140:	b580      	push	{r7, lr}
 8011142:	b088      	sub	sp, #32
 8011144:	af00      	add	r7, sp, #0
 8011146:	60f8      	str	r0, [r7, #12]
 8011148:	460b      	mov	r3, r1
 801114a:	607a      	str	r2, [r7, #4]
 801114c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801114e:	4b35      	ldr	r3, [pc, #212]	; (8011224 <SDMMC_GetCmdResp6+0xe4>)
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	4a35      	ldr	r2, [pc, #212]	; (8011228 <SDMMC_GetCmdResp6+0xe8>)
 8011154:	fba2 2303 	umull	r2, r3, r2, r3
 8011158:	0a5b      	lsrs	r3, r3, #9
 801115a:	f241 3288 	movw	r2, #5000	; 0x1388
 801115e:	fb02 f303 	mul.w	r3, r2, r3
 8011162:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8011164:	69fb      	ldr	r3, [r7, #28]
 8011166:	1e5a      	subs	r2, r3, #1
 8011168:	61fa      	str	r2, [r7, #28]
 801116a:	2b00      	cmp	r3, #0
 801116c:	d102      	bne.n	8011174 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801116e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011172:	e052      	b.n	801121a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011178:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801117a:	69bb      	ldr	r3, [r7, #24]
 801117c:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8011180:	2b00      	cmp	r3, #0
 8011182:	d0ef      	beq.n	8011164 <SDMMC_GetCmdResp6+0x24>
 8011184:	69bb      	ldr	r3, [r7, #24]
 8011186:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801118a:	2b00      	cmp	r3, #0
 801118c:	d1ea      	bne.n	8011164 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011192:	f003 0304 	and.w	r3, r3, #4
 8011196:	2b00      	cmp	r3, #0
 8011198:	d004      	beq.n	80111a4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	2204      	movs	r2, #4
 801119e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80111a0:	2304      	movs	r3, #4
 80111a2:	e03a      	b.n	801121a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111a8:	f003 0301 	and.w	r3, r3, #1
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d004      	beq.n	80111ba <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	2201      	movs	r2, #1
 80111b4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80111b6:	2301      	movs	r3, #1
 80111b8:	e02f      	b.n	801121a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80111ba:	68f8      	ldr	r0, [r7, #12]
 80111bc:	f7ff fb7c 	bl	80108b8 <SDMMC_GetCommandResponse>
 80111c0:	4603      	mov	r3, r0
 80111c2:	461a      	mov	r2, r3
 80111c4:	7afb      	ldrb	r3, [r7, #11]
 80111c6:	4293      	cmp	r3, r2
 80111c8:	d001      	beq.n	80111ce <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80111ca:	2301      	movs	r3, #1
 80111cc:	e025      	b.n	801121a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	4a16      	ldr	r2, [pc, #88]	; (801122c <SDMMC_GetCmdResp6+0xec>)
 80111d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80111d4:	2100      	movs	r1, #0
 80111d6:	68f8      	ldr	r0, [r7, #12]
 80111d8:	f7ff fb7b 	bl	80108d2 <SDMMC_GetResponse>
 80111dc:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 80111de:	697b      	ldr	r3, [r7, #20]
 80111e0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d106      	bne.n	80111f6 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80111e8:	697b      	ldr	r3, [r7, #20]
 80111ea:	0c1b      	lsrs	r3, r3, #16
 80111ec:	b29a      	uxth	r2, r3
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80111f2:	2300      	movs	r3, #0
 80111f4:	e011      	b.n	801121a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80111f6:	697b      	ldr	r3, [r7, #20]
 80111f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d002      	beq.n	8011206 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011200:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011204:	e009      	b.n	801121a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8011206:	697b      	ldr	r3, [r7, #20]
 8011208:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801120c:	2b00      	cmp	r3, #0
 801120e:	d002      	beq.n	8011216 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011210:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011214:	e001      	b.n	801121a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011216:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801121a:	4618      	mov	r0, r3
 801121c:	3720      	adds	r7, #32
 801121e:	46bd      	mov	sp, r7
 8011220:	bd80      	pop	{r7, pc}
 8011222:	bf00      	nop
 8011224:	24000000 	.word	0x24000000
 8011228:	10624dd3 	.word	0x10624dd3
 801122c:	002000c5 	.word	0x002000c5

08011230 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8011230:	b480      	push	{r7}
 8011232:	b085      	sub	sp, #20
 8011234:	af00      	add	r7, sp, #0
 8011236:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011238:	4b22      	ldr	r3, [pc, #136]	; (80112c4 <SDMMC_GetCmdResp7+0x94>)
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	4a22      	ldr	r2, [pc, #136]	; (80112c8 <SDMMC_GetCmdResp7+0x98>)
 801123e:	fba2 2303 	umull	r2, r3, r2, r3
 8011242:	0a5b      	lsrs	r3, r3, #9
 8011244:	f241 3288 	movw	r2, #5000	; 0x1388
 8011248:	fb02 f303 	mul.w	r3, r2, r3
 801124c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	1e5a      	subs	r2, r3, #1
 8011252:	60fa      	str	r2, [r7, #12]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d102      	bne.n	801125e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011258:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801125c:	e02c      	b.n	80112b8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011262:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011264:	68bb      	ldr	r3, [r7, #8]
 8011266:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801126a:	2b00      	cmp	r3, #0
 801126c:	d0ef      	beq.n	801124e <SDMMC_GetCmdResp7+0x1e>
 801126e:	68bb      	ldr	r3, [r7, #8]
 8011270:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011274:	2b00      	cmp	r3, #0
 8011276:	d1ea      	bne.n	801124e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801127c:	f003 0304 	and.w	r3, r3, #4
 8011280:	2b00      	cmp	r3, #0
 8011282:	d004      	beq.n	801128e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	2204      	movs	r2, #4
 8011288:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801128a:	2304      	movs	r3, #4
 801128c:	e014      	b.n	80112b8 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011292:	f003 0301 	and.w	r3, r3, #1
 8011296:	2b00      	cmp	r3, #0
 8011298:	d004      	beq.n	80112a4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	2201      	movs	r2, #1
 801129e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80112a0:	2301      	movs	r3, #1
 80112a2:	e009      	b.n	80112b8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80112a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d002      	beq.n	80112b6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	2240      	movs	r2, #64	; 0x40
 80112b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80112b6:	2300      	movs	r3, #0

}
 80112b8:	4618      	mov	r0, r3
 80112ba:	3714      	adds	r7, #20
 80112bc:	46bd      	mov	sp, r7
 80112be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c2:	4770      	bx	lr
 80112c4:	24000000 	.word	0x24000000
 80112c8:	10624dd3 	.word	0x10624dd3

080112cc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80112cc:	b480      	push	{r7}
 80112ce:	b085      	sub	sp, #20
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80112d4:	4b11      	ldr	r3, [pc, #68]	; (801131c <SDMMC_GetCmdError+0x50>)
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	4a11      	ldr	r2, [pc, #68]	; (8011320 <SDMMC_GetCmdError+0x54>)
 80112da:	fba2 2303 	umull	r2, r3, r2, r3
 80112de:	0a5b      	lsrs	r3, r3, #9
 80112e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80112e4:	fb02 f303 	mul.w	r3, r2, r3
 80112e8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80112ea:	68fb      	ldr	r3, [r7, #12]
 80112ec:	1e5a      	subs	r2, r3, #1
 80112ee:	60fa      	str	r2, [r7, #12]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d102      	bne.n	80112fa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80112f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80112f8:	e009      	b.n	801130e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80112fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011302:	2b00      	cmp	r3, #0
 8011304:	d0f1      	beq.n	80112ea <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	4a06      	ldr	r2, [pc, #24]	; (8011324 <SDMMC_GetCmdError+0x58>)
 801130a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 801130c:	2300      	movs	r3, #0
}
 801130e:	4618      	mov	r0, r3
 8011310:	3714      	adds	r7, #20
 8011312:	46bd      	mov	sp, r7
 8011314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011318:	4770      	bx	lr
 801131a:	bf00      	nop
 801131c:	24000000 	.word	0x24000000
 8011320:	10624dd3 	.word	0x10624dd3
 8011324:	002000c5 	.word	0x002000c5

08011328 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011328:	b084      	sub	sp, #16
 801132a:	b580      	push	{r7, lr}
 801132c:	b084      	sub	sp, #16
 801132e:	af00      	add	r7, sp, #0
 8011330:	6078      	str	r0, [r7, #4]
 8011332:	f107 001c 	add.w	r0, r7, #28
 8011336:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801133a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801133c:	2b01      	cmp	r3, #1
 801133e:	d120      	bne.n	8011382 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011344:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	68da      	ldr	r2, [r3, #12]
 8011350:	4b2a      	ldr	r3, [pc, #168]	; (80113fc <USB_CoreInit+0xd4>)
 8011352:	4013      	ands	r3, r2
 8011354:	687a      	ldr	r2, [r7, #4]
 8011356:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	68db      	ldr	r3, [r3, #12]
 801135c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8011364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011366:	2b01      	cmp	r3, #1
 8011368:	d105      	bne.n	8011376 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	68db      	ldr	r3, [r3, #12]
 801136e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011376:	6878      	ldr	r0, [r7, #4]
 8011378:	f001 faf8 	bl	801296c <USB_CoreReset>
 801137c:	4603      	mov	r3, r0
 801137e:	73fb      	strb	r3, [r7, #15]
 8011380:	e01a      	b.n	80113b8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	68db      	ldr	r3, [r3, #12]
 8011386:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801138e:	6878      	ldr	r0, [r7, #4]
 8011390:	f001 faec 	bl	801296c <USB_CoreReset>
 8011394:	4603      	mov	r3, r0
 8011396:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8011398:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801139a:	2b00      	cmp	r3, #0
 801139c:	d106      	bne.n	80113ac <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	639a      	str	r2, [r3, #56]	; 0x38
 80113aa:	e005      	b.n	80113b8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80113b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113ba:	2b01      	cmp	r3, #1
 80113bc:	d116      	bne.n	80113ec <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80113c2:	b29a      	uxth	r2, r3
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80113cc:	4b0c      	ldr	r3, [pc, #48]	; (8011400 <USB_CoreInit+0xd8>)
 80113ce:	4313      	orrs	r3, r2
 80113d0:	687a      	ldr	r2, [r7, #4]
 80113d2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	689b      	ldr	r3, [r3, #8]
 80113d8:	f043 0206 	orr.w	r2, r3, #6
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	689b      	ldr	r3, [r3, #8]
 80113e4:	f043 0220 	orr.w	r2, r3, #32
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80113ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80113ee:	4618      	mov	r0, r3
 80113f0:	3710      	adds	r7, #16
 80113f2:	46bd      	mov	sp, r7
 80113f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80113f8:	b004      	add	sp, #16
 80113fa:	4770      	bx	lr
 80113fc:	ffbdffbf 	.word	0xffbdffbf
 8011400:	03ee0000 	.word	0x03ee0000

08011404 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8011404:	b480      	push	{r7}
 8011406:	b087      	sub	sp, #28
 8011408:	af00      	add	r7, sp, #0
 801140a:	60f8      	str	r0, [r7, #12]
 801140c:	60b9      	str	r1, [r7, #8]
 801140e:	4613      	mov	r3, r2
 8011410:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8011412:	79fb      	ldrb	r3, [r7, #7]
 8011414:	2b02      	cmp	r3, #2
 8011416:	d165      	bne.n	80114e4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8011418:	68bb      	ldr	r3, [r7, #8]
 801141a:	4a41      	ldr	r2, [pc, #260]	; (8011520 <USB_SetTurnaroundTime+0x11c>)
 801141c:	4293      	cmp	r3, r2
 801141e:	d906      	bls.n	801142e <USB_SetTurnaroundTime+0x2a>
 8011420:	68bb      	ldr	r3, [r7, #8]
 8011422:	4a40      	ldr	r2, [pc, #256]	; (8011524 <USB_SetTurnaroundTime+0x120>)
 8011424:	4293      	cmp	r3, r2
 8011426:	d202      	bcs.n	801142e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8011428:	230f      	movs	r3, #15
 801142a:	617b      	str	r3, [r7, #20]
 801142c:	e062      	b.n	80114f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801142e:	68bb      	ldr	r3, [r7, #8]
 8011430:	4a3c      	ldr	r2, [pc, #240]	; (8011524 <USB_SetTurnaroundTime+0x120>)
 8011432:	4293      	cmp	r3, r2
 8011434:	d306      	bcc.n	8011444 <USB_SetTurnaroundTime+0x40>
 8011436:	68bb      	ldr	r3, [r7, #8]
 8011438:	4a3b      	ldr	r2, [pc, #236]	; (8011528 <USB_SetTurnaroundTime+0x124>)
 801143a:	4293      	cmp	r3, r2
 801143c:	d202      	bcs.n	8011444 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801143e:	230e      	movs	r3, #14
 8011440:	617b      	str	r3, [r7, #20]
 8011442:	e057      	b.n	80114f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8011444:	68bb      	ldr	r3, [r7, #8]
 8011446:	4a38      	ldr	r2, [pc, #224]	; (8011528 <USB_SetTurnaroundTime+0x124>)
 8011448:	4293      	cmp	r3, r2
 801144a:	d306      	bcc.n	801145a <USB_SetTurnaroundTime+0x56>
 801144c:	68bb      	ldr	r3, [r7, #8]
 801144e:	4a37      	ldr	r2, [pc, #220]	; (801152c <USB_SetTurnaroundTime+0x128>)
 8011450:	4293      	cmp	r3, r2
 8011452:	d202      	bcs.n	801145a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8011454:	230d      	movs	r3, #13
 8011456:	617b      	str	r3, [r7, #20]
 8011458:	e04c      	b.n	80114f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801145a:	68bb      	ldr	r3, [r7, #8]
 801145c:	4a33      	ldr	r2, [pc, #204]	; (801152c <USB_SetTurnaroundTime+0x128>)
 801145e:	4293      	cmp	r3, r2
 8011460:	d306      	bcc.n	8011470 <USB_SetTurnaroundTime+0x6c>
 8011462:	68bb      	ldr	r3, [r7, #8]
 8011464:	4a32      	ldr	r2, [pc, #200]	; (8011530 <USB_SetTurnaroundTime+0x12c>)
 8011466:	4293      	cmp	r3, r2
 8011468:	d802      	bhi.n	8011470 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801146a:	230c      	movs	r3, #12
 801146c:	617b      	str	r3, [r7, #20]
 801146e:	e041      	b.n	80114f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8011470:	68bb      	ldr	r3, [r7, #8]
 8011472:	4a2f      	ldr	r2, [pc, #188]	; (8011530 <USB_SetTurnaroundTime+0x12c>)
 8011474:	4293      	cmp	r3, r2
 8011476:	d906      	bls.n	8011486 <USB_SetTurnaroundTime+0x82>
 8011478:	68bb      	ldr	r3, [r7, #8]
 801147a:	4a2e      	ldr	r2, [pc, #184]	; (8011534 <USB_SetTurnaroundTime+0x130>)
 801147c:	4293      	cmp	r3, r2
 801147e:	d802      	bhi.n	8011486 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8011480:	230b      	movs	r3, #11
 8011482:	617b      	str	r3, [r7, #20]
 8011484:	e036      	b.n	80114f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8011486:	68bb      	ldr	r3, [r7, #8]
 8011488:	4a2a      	ldr	r2, [pc, #168]	; (8011534 <USB_SetTurnaroundTime+0x130>)
 801148a:	4293      	cmp	r3, r2
 801148c:	d906      	bls.n	801149c <USB_SetTurnaroundTime+0x98>
 801148e:	68bb      	ldr	r3, [r7, #8]
 8011490:	4a29      	ldr	r2, [pc, #164]	; (8011538 <USB_SetTurnaroundTime+0x134>)
 8011492:	4293      	cmp	r3, r2
 8011494:	d802      	bhi.n	801149c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8011496:	230a      	movs	r3, #10
 8011498:	617b      	str	r3, [r7, #20]
 801149a:	e02b      	b.n	80114f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801149c:	68bb      	ldr	r3, [r7, #8]
 801149e:	4a26      	ldr	r2, [pc, #152]	; (8011538 <USB_SetTurnaroundTime+0x134>)
 80114a0:	4293      	cmp	r3, r2
 80114a2:	d906      	bls.n	80114b2 <USB_SetTurnaroundTime+0xae>
 80114a4:	68bb      	ldr	r3, [r7, #8]
 80114a6:	4a25      	ldr	r2, [pc, #148]	; (801153c <USB_SetTurnaroundTime+0x138>)
 80114a8:	4293      	cmp	r3, r2
 80114aa:	d202      	bcs.n	80114b2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80114ac:	2309      	movs	r3, #9
 80114ae:	617b      	str	r3, [r7, #20]
 80114b0:	e020      	b.n	80114f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80114b2:	68bb      	ldr	r3, [r7, #8]
 80114b4:	4a21      	ldr	r2, [pc, #132]	; (801153c <USB_SetTurnaroundTime+0x138>)
 80114b6:	4293      	cmp	r3, r2
 80114b8:	d306      	bcc.n	80114c8 <USB_SetTurnaroundTime+0xc4>
 80114ba:	68bb      	ldr	r3, [r7, #8]
 80114bc:	4a20      	ldr	r2, [pc, #128]	; (8011540 <USB_SetTurnaroundTime+0x13c>)
 80114be:	4293      	cmp	r3, r2
 80114c0:	d802      	bhi.n	80114c8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80114c2:	2308      	movs	r3, #8
 80114c4:	617b      	str	r3, [r7, #20]
 80114c6:	e015      	b.n	80114f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80114c8:	68bb      	ldr	r3, [r7, #8]
 80114ca:	4a1d      	ldr	r2, [pc, #116]	; (8011540 <USB_SetTurnaroundTime+0x13c>)
 80114cc:	4293      	cmp	r3, r2
 80114ce:	d906      	bls.n	80114de <USB_SetTurnaroundTime+0xda>
 80114d0:	68bb      	ldr	r3, [r7, #8]
 80114d2:	4a1c      	ldr	r2, [pc, #112]	; (8011544 <USB_SetTurnaroundTime+0x140>)
 80114d4:	4293      	cmp	r3, r2
 80114d6:	d202      	bcs.n	80114de <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80114d8:	2307      	movs	r3, #7
 80114da:	617b      	str	r3, [r7, #20]
 80114dc:	e00a      	b.n	80114f4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80114de:	2306      	movs	r3, #6
 80114e0:	617b      	str	r3, [r7, #20]
 80114e2:	e007      	b.n	80114f4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80114e4:	79fb      	ldrb	r3, [r7, #7]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d102      	bne.n	80114f0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80114ea:	2309      	movs	r3, #9
 80114ec:	617b      	str	r3, [r7, #20]
 80114ee:	e001      	b.n	80114f4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80114f0:	2309      	movs	r3, #9
 80114f2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	68db      	ldr	r3, [r3, #12]
 80114f8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	68da      	ldr	r2, [r3, #12]
 8011504:	697b      	ldr	r3, [r7, #20]
 8011506:	029b      	lsls	r3, r3, #10
 8011508:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 801150c:	431a      	orrs	r2, r3
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011512:	2300      	movs	r3, #0
}
 8011514:	4618      	mov	r0, r3
 8011516:	371c      	adds	r7, #28
 8011518:	46bd      	mov	sp, r7
 801151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151e:	4770      	bx	lr
 8011520:	00d8acbf 	.word	0x00d8acbf
 8011524:	00e4e1c0 	.word	0x00e4e1c0
 8011528:	00f42400 	.word	0x00f42400
 801152c:	01067380 	.word	0x01067380
 8011530:	011a499f 	.word	0x011a499f
 8011534:	01312cff 	.word	0x01312cff
 8011538:	014ca43f 	.word	0x014ca43f
 801153c:	016e3600 	.word	0x016e3600
 8011540:	01a6ab1f 	.word	0x01a6ab1f
 8011544:	01e84800 	.word	0x01e84800

08011548 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011548:	b480      	push	{r7}
 801154a:	b083      	sub	sp, #12
 801154c:	af00      	add	r7, sp, #0
 801154e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	689b      	ldr	r3, [r3, #8]
 8011554:	f043 0201 	orr.w	r2, r3, #1
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801155c:	2300      	movs	r3, #0
}
 801155e:	4618      	mov	r0, r3
 8011560:	370c      	adds	r7, #12
 8011562:	46bd      	mov	sp, r7
 8011564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011568:	4770      	bx	lr

0801156a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801156a:	b480      	push	{r7}
 801156c:	b083      	sub	sp, #12
 801156e:	af00      	add	r7, sp, #0
 8011570:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	689b      	ldr	r3, [r3, #8]
 8011576:	f023 0201 	bic.w	r2, r3, #1
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801157e:	2300      	movs	r3, #0
}
 8011580:	4618      	mov	r0, r3
 8011582:	370c      	adds	r7, #12
 8011584:	46bd      	mov	sp, r7
 8011586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801158a:	4770      	bx	lr

0801158c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801158c:	b580      	push	{r7, lr}
 801158e:	b084      	sub	sp, #16
 8011590:	af00      	add	r7, sp, #0
 8011592:	6078      	str	r0, [r7, #4]
 8011594:	460b      	mov	r3, r1
 8011596:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8011598:	2300      	movs	r3, #0
 801159a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	68db      	ldr	r3, [r3, #12]
 80115a0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80115a8:	78fb      	ldrb	r3, [r7, #3]
 80115aa:	2b01      	cmp	r3, #1
 80115ac:	d115      	bne.n	80115da <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	68db      	ldr	r3, [r3, #12]
 80115b2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80115ba:	2001      	movs	r0, #1
 80115bc:	f7f1 fe46 	bl	800324c <HAL_Delay>
      ms++;
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	3301      	adds	r3, #1
 80115c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80115c6:	6878      	ldr	r0, [r7, #4]
 80115c8:	f001 f93f 	bl	801284a <USB_GetMode>
 80115cc:	4603      	mov	r3, r0
 80115ce:	2b01      	cmp	r3, #1
 80115d0:	d01e      	beq.n	8011610 <USB_SetCurrentMode+0x84>
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	2b31      	cmp	r3, #49	; 0x31
 80115d6:	d9f0      	bls.n	80115ba <USB_SetCurrentMode+0x2e>
 80115d8:	e01a      	b.n	8011610 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80115da:	78fb      	ldrb	r3, [r7, #3]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d115      	bne.n	801160c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	68db      	ldr	r3, [r3, #12]
 80115e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80115ec:	2001      	movs	r0, #1
 80115ee:	f7f1 fe2d 	bl	800324c <HAL_Delay>
      ms++;
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	3301      	adds	r3, #1
 80115f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80115f8:	6878      	ldr	r0, [r7, #4]
 80115fa:	f001 f926 	bl	801284a <USB_GetMode>
 80115fe:	4603      	mov	r3, r0
 8011600:	2b00      	cmp	r3, #0
 8011602:	d005      	beq.n	8011610 <USB_SetCurrentMode+0x84>
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	2b31      	cmp	r3, #49	; 0x31
 8011608:	d9f0      	bls.n	80115ec <USB_SetCurrentMode+0x60>
 801160a:	e001      	b.n	8011610 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 801160c:	2301      	movs	r3, #1
 801160e:	e005      	b.n	801161c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	2b32      	cmp	r3, #50	; 0x32
 8011614:	d101      	bne.n	801161a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8011616:	2301      	movs	r3, #1
 8011618:	e000      	b.n	801161c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801161a:	2300      	movs	r3, #0
}
 801161c:	4618      	mov	r0, r3
 801161e:	3710      	adds	r7, #16
 8011620:	46bd      	mov	sp, r7
 8011622:	bd80      	pop	{r7, pc}

08011624 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011624:	b084      	sub	sp, #16
 8011626:	b580      	push	{r7, lr}
 8011628:	b086      	sub	sp, #24
 801162a:	af00      	add	r7, sp, #0
 801162c:	6078      	str	r0, [r7, #4]
 801162e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8011632:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8011636:	2300      	movs	r3, #0
 8011638:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801163e:	2300      	movs	r3, #0
 8011640:	613b      	str	r3, [r7, #16]
 8011642:	e009      	b.n	8011658 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8011644:	687a      	ldr	r2, [r7, #4]
 8011646:	693b      	ldr	r3, [r7, #16]
 8011648:	3340      	adds	r3, #64	; 0x40
 801164a:	009b      	lsls	r3, r3, #2
 801164c:	4413      	add	r3, r2
 801164e:	2200      	movs	r2, #0
 8011650:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8011652:	693b      	ldr	r3, [r7, #16]
 8011654:	3301      	adds	r3, #1
 8011656:	613b      	str	r3, [r7, #16]
 8011658:	693b      	ldr	r3, [r7, #16]
 801165a:	2b0e      	cmp	r3, #14
 801165c:	d9f2      	bls.n	8011644 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801165e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011660:	2b00      	cmp	r3, #0
 8011662:	d11c      	bne.n	801169e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801166a:	685b      	ldr	r3, [r3, #4]
 801166c:	68fa      	ldr	r2, [r7, #12]
 801166e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011672:	f043 0302 	orr.w	r3, r3, #2
 8011676:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801167c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	601a      	str	r2, [r3, #0]
 801169c:	e005      	b.n	80116aa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80116a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80116b0:	461a      	mov	r2, r3
 80116b2:	2300      	movs	r3, #0
 80116b4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80116bc:	4619      	mov	r1, r3
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80116c4:	461a      	mov	r2, r3
 80116c6:	680b      	ldr	r3, [r1, #0]
 80116c8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80116ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116cc:	2b01      	cmp	r3, #1
 80116ce:	d10c      	bne.n	80116ea <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80116d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d104      	bne.n	80116e0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80116d6:	2100      	movs	r1, #0
 80116d8:	6878      	ldr	r0, [r7, #4]
 80116da:	f000 f965 	bl	80119a8 <USB_SetDevSpeed>
 80116de:	e008      	b.n	80116f2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80116e0:	2101      	movs	r1, #1
 80116e2:	6878      	ldr	r0, [r7, #4]
 80116e4:	f000 f960 	bl	80119a8 <USB_SetDevSpeed>
 80116e8:	e003      	b.n	80116f2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80116ea:	2103      	movs	r1, #3
 80116ec:	6878      	ldr	r0, [r7, #4]
 80116ee:	f000 f95b 	bl	80119a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80116f2:	2110      	movs	r1, #16
 80116f4:	6878      	ldr	r0, [r7, #4]
 80116f6:	f000 f8f3 	bl	80118e0 <USB_FlushTxFifo>
 80116fa:	4603      	mov	r3, r0
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d001      	beq.n	8011704 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8011700:	2301      	movs	r3, #1
 8011702:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011704:	6878      	ldr	r0, [r7, #4]
 8011706:	f000 f91f 	bl	8011948 <USB_FlushRxFifo>
 801170a:	4603      	mov	r3, r0
 801170c:	2b00      	cmp	r3, #0
 801170e:	d001      	beq.n	8011714 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8011710:	2301      	movs	r3, #1
 8011712:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801171a:	461a      	mov	r2, r3
 801171c:	2300      	movs	r3, #0
 801171e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011726:	461a      	mov	r2, r3
 8011728:	2300      	movs	r3, #0
 801172a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011732:	461a      	mov	r2, r3
 8011734:	2300      	movs	r3, #0
 8011736:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011738:	2300      	movs	r3, #0
 801173a:	613b      	str	r3, [r7, #16]
 801173c:	e043      	b.n	80117c6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801173e:	693b      	ldr	r3, [r7, #16]
 8011740:	015a      	lsls	r2, r3, #5
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	4413      	add	r3, r2
 8011746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011750:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011754:	d118      	bne.n	8011788 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8011756:	693b      	ldr	r3, [r7, #16]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d10a      	bne.n	8011772 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801175c:	693b      	ldr	r3, [r7, #16]
 801175e:	015a      	lsls	r2, r3, #5
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	4413      	add	r3, r2
 8011764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011768:	461a      	mov	r2, r3
 801176a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801176e:	6013      	str	r3, [r2, #0]
 8011770:	e013      	b.n	801179a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8011772:	693b      	ldr	r3, [r7, #16]
 8011774:	015a      	lsls	r2, r3, #5
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	4413      	add	r3, r2
 801177a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801177e:	461a      	mov	r2, r3
 8011780:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8011784:	6013      	str	r3, [r2, #0]
 8011786:	e008      	b.n	801179a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8011788:	693b      	ldr	r3, [r7, #16]
 801178a:	015a      	lsls	r2, r3, #5
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	4413      	add	r3, r2
 8011790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011794:	461a      	mov	r2, r3
 8011796:	2300      	movs	r3, #0
 8011798:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801179a:	693b      	ldr	r3, [r7, #16]
 801179c:	015a      	lsls	r2, r3, #5
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	4413      	add	r3, r2
 80117a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80117a6:	461a      	mov	r2, r3
 80117a8:	2300      	movs	r3, #0
 80117aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80117ac:	693b      	ldr	r3, [r7, #16]
 80117ae:	015a      	lsls	r2, r3, #5
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	4413      	add	r3, r2
 80117b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80117b8:	461a      	mov	r2, r3
 80117ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80117be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80117c0:	693b      	ldr	r3, [r7, #16]
 80117c2:	3301      	adds	r3, #1
 80117c4:	613b      	str	r3, [r7, #16]
 80117c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117c8:	693a      	ldr	r2, [r7, #16]
 80117ca:	429a      	cmp	r2, r3
 80117cc:	d3b7      	bcc.n	801173e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80117ce:	2300      	movs	r3, #0
 80117d0:	613b      	str	r3, [r7, #16]
 80117d2:	e043      	b.n	801185c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80117d4:	693b      	ldr	r3, [r7, #16]
 80117d6:	015a      	lsls	r2, r3, #5
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	4413      	add	r3, r2
 80117dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80117e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80117ea:	d118      	bne.n	801181e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80117ec:	693b      	ldr	r3, [r7, #16]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d10a      	bne.n	8011808 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80117f2:	693b      	ldr	r3, [r7, #16]
 80117f4:	015a      	lsls	r2, r3, #5
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	4413      	add	r3, r2
 80117fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80117fe:	461a      	mov	r2, r3
 8011800:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011804:	6013      	str	r3, [r2, #0]
 8011806:	e013      	b.n	8011830 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8011808:	693b      	ldr	r3, [r7, #16]
 801180a:	015a      	lsls	r2, r3, #5
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	4413      	add	r3, r2
 8011810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011814:	461a      	mov	r2, r3
 8011816:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801181a:	6013      	str	r3, [r2, #0]
 801181c:	e008      	b.n	8011830 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801181e:	693b      	ldr	r3, [r7, #16]
 8011820:	015a      	lsls	r2, r3, #5
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	4413      	add	r3, r2
 8011826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801182a:	461a      	mov	r2, r3
 801182c:	2300      	movs	r3, #0
 801182e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8011830:	693b      	ldr	r3, [r7, #16]
 8011832:	015a      	lsls	r2, r3, #5
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	4413      	add	r3, r2
 8011838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801183c:	461a      	mov	r2, r3
 801183e:	2300      	movs	r3, #0
 8011840:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8011842:	693b      	ldr	r3, [r7, #16]
 8011844:	015a      	lsls	r2, r3, #5
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	4413      	add	r3, r2
 801184a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801184e:	461a      	mov	r2, r3
 8011850:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011854:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011856:	693b      	ldr	r3, [r7, #16]
 8011858:	3301      	adds	r3, #1
 801185a:	613b      	str	r3, [r7, #16]
 801185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801185e:	693a      	ldr	r2, [r7, #16]
 8011860:	429a      	cmp	r2, r3
 8011862:	d3b7      	bcc.n	80117d4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801186a:	691b      	ldr	r3, [r3, #16]
 801186c:	68fa      	ldr	r2, [r7, #12]
 801186e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011872:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011876:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	2200      	movs	r2, #0
 801187c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8011884:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8011886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011888:	2b00      	cmp	r3, #0
 801188a:	d105      	bne.n	8011898 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	699b      	ldr	r3, [r3, #24]
 8011890:	f043 0210 	orr.w	r2, r3, #16
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	699a      	ldr	r2, [r3, #24]
 801189c:	4b0e      	ldr	r3, [pc, #56]	; (80118d8 <USB_DevInit+0x2b4>)
 801189e:	4313      	orrs	r3, r2
 80118a0:	687a      	ldr	r2, [r7, #4]
 80118a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80118a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d005      	beq.n	80118b6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	699b      	ldr	r3, [r3, #24]
 80118ae:	f043 0208 	orr.w	r2, r3, #8
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80118b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118b8:	2b01      	cmp	r3, #1
 80118ba:	d105      	bne.n	80118c8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	699a      	ldr	r2, [r3, #24]
 80118c0:	4b06      	ldr	r3, [pc, #24]	; (80118dc <USB_DevInit+0x2b8>)
 80118c2:	4313      	orrs	r3, r2
 80118c4:	687a      	ldr	r2, [r7, #4]
 80118c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80118c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80118ca:	4618      	mov	r0, r3
 80118cc:	3718      	adds	r7, #24
 80118ce:	46bd      	mov	sp, r7
 80118d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80118d4:	b004      	add	sp, #16
 80118d6:	4770      	bx	lr
 80118d8:	803c3800 	.word	0x803c3800
 80118dc:	40000004 	.word	0x40000004

080118e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80118e0:	b480      	push	{r7}
 80118e2:	b085      	sub	sp, #20
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	6078      	str	r0, [r7, #4]
 80118e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80118ea:	2300      	movs	r3, #0
 80118ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	3301      	adds	r3, #1
 80118f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	4a13      	ldr	r2, [pc, #76]	; (8011944 <USB_FlushTxFifo+0x64>)
 80118f8:	4293      	cmp	r3, r2
 80118fa:	d901      	bls.n	8011900 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80118fc:	2303      	movs	r3, #3
 80118fe:	e01b      	b.n	8011938 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	691b      	ldr	r3, [r3, #16]
 8011904:	2b00      	cmp	r3, #0
 8011906:	daf2      	bge.n	80118ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8011908:	2300      	movs	r3, #0
 801190a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801190c:	683b      	ldr	r3, [r7, #0]
 801190e:	019b      	lsls	r3, r3, #6
 8011910:	f043 0220 	orr.w	r2, r3, #32
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	3301      	adds	r3, #1
 801191c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	4a08      	ldr	r2, [pc, #32]	; (8011944 <USB_FlushTxFifo+0x64>)
 8011922:	4293      	cmp	r3, r2
 8011924:	d901      	bls.n	801192a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8011926:	2303      	movs	r3, #3
 8011928:	e006      	b.n	8011938 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	691b      	ldr	r3, [r3, #16]
 801192e:	f003 0320 	and.w	r3, r3, #32
 8011932:	2b20      	cmp	r3, #32
 8011934:	d0f0      	beq.n	8011918 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8011936:	2300      	movs	r3, #0
}
 8011938:	4618      	mov	r0, r3
 801193a:	3714      	adds	r7, #20
 801193c:	46bd      	mov	sp, r7
 801193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011942:	4770      	bx	lr
 8011944:	00030d40 	.word	0x00030d40

08011948 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011948:	b480      	push	{r7}
 801194a:	b085      	sub	sp, #20
 801194c:	af00      	add	r7, sp, #0
 801194e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011950:	2300      	movs	r3, #0
 8011952:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	3301      	adds	r3, #1
 8011958:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	4a11      	ldr	r2, [pc, #68]	; (80119a4 <USB_FlushRxFifo+0x5c>)
 801195e:	4293      	cmp	r3, r2
 8011960:	d901      	bls.n	8011966 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8011962:	2303      	movs	r3, #3
 8011964:	e018      	b.n	8011998 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	691b      	ldr	r3, [r3, #16]
 801196a:	2b00      	cmp	r3, #0
 801196c:	daf2      	bge.n	8011954 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801196e:	2300      	movs	r3, #0
 8011970:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	2210      	movs	r2, #16
 8011976:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	3301      	adds	r3, #1
 801197c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	4a08      	ldr	r2, [pc, #32]	; (80119a4 <USB_FlushRxFifo+0x5c>)
 8011982:	4293      	cmp	r3, r2
 8011984:	d901      	bls.n	801198a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8011986:	2303      	movs	r3, #3
 8011988:	e006      	b.n	8011998 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	691b      	ldr	r3, [r3, #16]
 801198e:	f003 0310 	and.w	r3, r3, #16
 8011992:	2b10      	cmp	r3, #16
 8011994:	d0f0      	beq.n	8011978 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8011996:	2300      	movs	r3, #0
}
 8011998:	4618      	mov	r0, r3
 801199a:	3714      	adds	r7, #20
 801199c:	46bd      	mov	sp, r7
 801199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a2:	4770      	bx	lr
 80119a4:	00030d40 	.word	0x00030d40

080119a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80119a8:	b480      	push	{r7}
 80119aa:	b085      	sub	sp, #20
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	6078      	str	r0, [r7, #4]
 80119b0:	460b      	mov	r3, r1
 80119b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80119be:	681a      	ldr	r2, [r3, #0]
 80119c0:	78fb      	ldrb	r3, [r7, #3]
 80119c2:	68f9      	ldr	r1, [r7, #12]
 80119c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80119c8:	4313      	orrs	r3, r2
 80119ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80119cc:	2300      	movs	r3, #0
}
 80119ce:	4618      	mov	r0, r3
 80119d0:	3714      	adds	r7, #20
 80119d2:	46bd      	mov	sp, r7
 80119d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d8:	4770      	bx	lr

080119da <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80119da:	b480      	push	{r7}
 80119dc:	b087      	sub	sp, #28
 80119de:	af00      	add	r7, sp, #0
 80119e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80119e6:	693b      	ldr	r3, [r7, #16]
 80119e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80119ec:	689b      	ldr	r3, [r3, #8]
 80119ee:	f003 0306 	and.w	r3, r3, #6
 80119f2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d102      	bne.n	8011a00 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80119fa:	2300      	movs	r3, #0
 80119fc:	75fb      	strb	r3, [r7, #23]
 80119fe:	e00a      	b.n	8011a16 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	2b02      	cmp	r3, #2
 8011a04:	d002      	beq.n	8011a0c <USB_GetDevSpeed+0x32>
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	2b06      	cmp	r3, #6
 8011a0a:	d102      	bne.n	8011a12 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8011a0c:	2302      	movs	r3, #2
 8011a0e:	75fb      	strb	r3, [r7, #23]
 8011a10:	e001      	b.n	8011a16 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8011a12:	230f      	movs	r3, #15
 8011a14:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8011a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a18:	4618      	mov	r0, r3
 8011a1a:	371c      	adds	r7, #28
 8011a1c:	46bd      	mov	sp, r7
 8011a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a22:	4770      	bx	lr

08011a24 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011a24:	b480      	push	{r7}
 8011a26:	b085      	sub	sp, #20
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	6078      	str	r0, [r7, #4]
 8011a2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011a32:	683b      	ldr	r3, [r7, #0]
 8011a34:	781b      	ldrb	r3, [r3, #0]
 8011a36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011a38:	683b      	ldr	r3, [r7, #0]
 8011a3a:	785b      	ldrb	r3, [r3, #1]
 8011a3c:	2b01      	cmp	r3, #1
 8011a3e:	d139      	bne.n	8011ab4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011a46:	69da      	ldr	r2, [r3, #28]
 8011a48:	683b      	ldr	r3, [r7, #0]
 8011a4a:	781b      	ldrb	r3, [r3, #0]
 8011a4c:	f003 030f 	and.w	r3, r3, #15
 8011a50:	2101      	movs	r1, #1
 8011a52:	fa01 f303 	lsl.w	r3, r1, r3
 8011a56:	b29b      	uxth	r3, r3
 8011a58:	68f9      	ldr	r1, [r7, #12]
 8011a5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011a5e:	4313      	orrs	r3, r2
 8011a60:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8011a62:	68bb      	ldr	r3, [r7, #8]
 8011a64:	015a      	lsls	r2, r3, #5
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	4413      	add	r3, r2
 8011a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d153      	bne.n	8011b20 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011a78:	68bb      	ldr	r3, [r7, #8]
 8011a7a:	015a      	lsls	r2, r3, #5
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	4413      	add	r3, r2
 8011a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011a84:	681a      	ldr	r2, [r3, #0]
 8011a86:	683b      	ldr	r3, [r7, #0]
 8011a88:	689b      	ldr	r3, [r3, #8]
 8011a8a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011a8e:	683b      	ldr	r3, [r7, #0]
 8011a90:	791b      	ldrb	r3, [r3, #4]
 8011a92:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011a94:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011a96:	68bb      	ldr	r3, [r7, #8]
 8011a98:	059b      	lsls	r3, r3, #22
 8011a9a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011a9c:	431a      	orrs	r2, r3
 8011a9e:	68bb      	ldr	r3, [r7, #8]
 8011aa0:	0159      	lsls	r1, r3, #5
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	440b      	add	r3, r1
 8011aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011aaa:	4619      	mov	r1, r3
 8011aac:	4b20      	ldr	r3, [pc, #128]	; (8011b30 <USB_ActivateEndpoint+0x10c>)
 8011aae:	4313      	orrs	r3, r2
 8011ab0:	600b      	str	r3, [r1, #0]
 8011ab2:	e035      	b.n	8011b20 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011aba:	69da      	ldr	r2, [r3, #28]
 8011abc:	683b      	ldr	r3, [r7, #0]
 8011abe:	781b      	ldrb	r3, [r3, #0]
 8011ac0:	f003 030f 	and.w	r3, r3, #15
 8011ac4:	2101      	movs	r1, #1
 8011ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8011aca:	041b      	lsls	r3, r3, #16
 8011acc:	68f9      	ldr	r1, [r7, #12]
 8011ace:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011ad2:	4313      	orrs	r3, r2
 8011ad4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8011ad6:	68bb      	ldr	r3, [r7, #8]
 8011ad8:	015a      	lsls	r2, r3, #5
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	4413      	add	r3, r2
 8011ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d119      	bne.n	8011b20 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011aec:	68bb      	ldr	r3, [r7, #8]
 8011aee:	015a      	lsls	r2, r3, #5
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	4413      	add	r3, r2
 8011af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011af8:	681a      	ldr	r2, [r3, #0]
 8011afa:	683b      	ldr	r3, [r7, #0]
 8011afc:	689b      	ldr	r3, [r3, #8]
 8011afe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8011b02:	683b      	ldr	r3, [r7, #0]
 8011b04:	791b      	ldrb	r3, [r3, #4]
 8011b06:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011b08:	430b      	orrs	r3, r1
 8011b0a:	431a      	orrs	r2, r3
 8011b0c:	68bb      	ldr	r3, [r7, #8]
 8011b0e:	0159      	lsls	r1, r3, #5
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	440b      	add	r3, r1
 8011b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011b18:	4619      	mov	r1, r3
 8011b1a:	4b05      	ldr	r3, [pc, #20]	; (8011b30 <USB_ActivateEndpoint+0x10c>)
 8011b1c:	4313      	orrs	r3, r2
 8011b1e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8011b20:	2300      	movs	r3, #0
}
 8011b22:	4618      	mov	r0, r3
 8011b24:	3714      	adds	r7, #20
 8011b26:	46bd      	mov	sp, r7
 8011b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b2c:	4770      	bx	lr
 8011b2e:	bf00      	nop
 8011b30:	10008000 	.word	0x10008000

08011b34 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011b34:	b480      	push	{r7}
 8011b36:	b085      	sub	sp, #20
 8011b38:	af00      	add	r7, sp, #0
 8011b3a:	6078      	str	r0, [r7, #4]
 8011b3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011b42:	683b      	ldr	r3, [r7, #0]
 8011b44:	781b      	ldrb	r3, [r3, #0]
 8011b46:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8011b48:	683b      	ldr	r3, [r7, #0]
 8011b4a:	785b      	ldrb	r3, [r3, #1]
 8011b4c:	2b01      	cmp	r3, #1
 8011b4e:	d161      	bne.n	8011c14 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011b50:	68bb      	ldr	r3, [r7, #8]
 8011b52:	015a      	lsls	r2, r3, #5
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	4413      	add	r3, r2
 8011b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011b62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011b66:	d11f      	bne.n	8011ba8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8011b68:	68bb      	ldr	r3, [r7, #8]
 8011b6a:	015a      	lsls	r2, r3, #5
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	4413      	add	r3, r2
 8011b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	68ba      	ldr	r2, [r7, #8]
 8011b78:	0151      	lsls	r1, r2, #5
 8011b7a:	68fa      	ldr	r2, [r7, #12]
 8011b7c:	440a      	add	r2, r1
 8011b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011b82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011b86:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8011b88:	68bb      	ldr	r3, [r7, #8]
 8011b8a:	015a      	lsls	r2, r3, #5
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	4413      	add	r3, r2
 8011b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	68ba      	ldr	r2, [r7, #8]
 8011b98:	0151      	lsls	r1, r2, #5
 8011b9a:	68fa      	ldr	r2, [r7, #12]
 8011b9c:	440a      	add	r2, r1
 8011b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011ba2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011ba6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011bae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011bb0:	683b      	ldr	r3, [r7, #0]
 8011bb2:	781b      	ldrb	r3, [r3, #0]
 8011bb4:	f003 030f 	and.w	r3, r3, #15
 8011bb8:	2101      	movs	r1, #1
 8011bba:	fa01 f303 	lsl.w	r3, r1, r3
 8011bbe:	b29b      	uxth	r3, r3
 8011bc0:	43db      	mvns	r3, r3
 8011bc2:	68f9      	ldr	r1, [r7, #12]
 8011bc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011bc8:	4013      	ands	r3, r2
 8011bca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011bd2:	69da      	ldr	r2, [r3, #28]
 8011bd4:	683b      	ldr	r3, [r7, #0]
 8011bd6:	781b      	ldrb	r3, [r3, #0]
 8011bd8:	f003 030f 	and.w	r3, r3, #15
 8011bdc:	2101      	movs	r1, #1
 8011bde:	fa01 f303 	lsl.w	r3, r1, r3
 8011be2:	b29b      	uxth	r3, r3
 8011be4:	43db      	mvns	r3, r3
 8011be6:	68f9      	ldr	r1, [r7, #12]
 8011be8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011bec:	4013      	ands	r3, r2
 8011bee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8011bf0:	68bb      	ldr	r3, [r7, #8]
 8011bf2:	015a      	lsls	r2, r3, #5
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	4413      	add	r3, r2
 8011bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011bfc:	681a      	ldr	r2, [r3, #0]
 8011bfe:	68bb      	ldr	r3, [r7, #8]
 8011c00:	0159      	lsls	r1, r3, #5
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	440b      	add	r3, r1
 8011c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011c0a:	4619      	mov	r1, r3
 8011c0c:	4b35      	ldr	r3, [pc, #212]	; (8011ce4 <USB_DeactivateEndpoint+0x1b0>)
 8011c0e:	4013      	ands	r3, r2
 8011c10:	600b      	str	r3, [r1, #0]
 8011c12:	e060      	b.n	8011cd6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011c14:	68bb      	ldr	r3, [r7, #8]
 8011c16:	015a      	lsls	r2, r3, #5
 8011c18:	68fb      	ldr	r3, [r7, #12]
 8011c1a:	4413      	add	r3, r2
 8011c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011c26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011c2a:	d11f      	bne.n	8011c6c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8011c2c:	68bb      	ldr	r3, [r7, #8]
 8011c2e:	015a      	lsls	r2, r3, #5
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	4413      	add	r3, r2
 8011c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	68ba      	ldr	r2, [r7, #8]
 8011c3c:	0151      	lsls	r1, r2, #5
 8011c3e:	68fa      	ldr	r2, [r7, #12]
 8011c40:	440a      	add	r2, r1
 8011c42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011c46:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011c4a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8011c4c:	68bb      	ldr	r3, [r7, #8]
 8011c4e:	015a      	lsls	r2, r3, #5
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	4413      	add	r3, r2
 8011c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	68ba      	ldr	r2, [r7, #8]
 8011c5c:	0151      	lsls	r1, r2, #5
 8011c5e:	68fa      	ldr	r2, [r7, #12]
 8011c60:	440a      	add	r2, r1
 8011c62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011c66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011c6a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011c72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011c74:	683b      	ldr	r3, [r7, #0]
 8011c76:	781b      	ldrb	r3, [r3, #0]
 8011c78:	f003 030f 	and.w	r3, r3, #15
 8011c7c:	2101      	movs	r1, #1
 8011c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8011c82:	041b      	lsls	r3, r3, #16
 8011c84:	43db      	mvns	r3, r3
 8011c86:	68f9      	ldr	r1, [r7, #12]
 8011c88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011c8c:	4013      	ands	r3, r2
 8011c8e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011c96:	69da      	ldr	r2, [r3, #28]
 8011c98:	683b      	ldr	r3, [r7, #0]
 8011c9a:	781b      	ldrb	r3, [r3, #0]
 8011c9c:	f003 030f 	and.w	r3, r3, #15
 8011ca0:	2101      	movs	r1, #1
 8011ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8011ca6:	041b      	lsls	r3, r3, #16
 8011ca8:	43db      	mvns	r3, r3
 8011caa:	68f9      	ldr	r1, [r7, #12]
 8011cac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011cb0:	4013      	ands	r3, r2
 8011cb2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8011cb4:	68bb      	ldr	r3, [r7, #8]
 8011cb6:	015a      	lsls	r2, r3, #5
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	4413      	add	r3, r2
 8011cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011cc0:	681a      	ldr	r2, [r3, #0]
 8011cc2:	68bb      	ldr	r3, [r7, #8]
 8011cc4:	0159      	lsls	r1, r3, #5
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	440b      	add	r3, r1
 8011cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011cce:	4619      	mov	r1, r3
 8011cd0:	4b05      	ldr	r3, [pc, #20]	; (8011ce8 <USB_DeactivateEndpoint+0x1b4>)
 8011cd2:	4013      	ands	r3, r2
 8011cd4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8011cd6:	2300      	movs	r3, #0
}
 8011cd8:	4618      	mov	r0, r3
 8011cda:	3714      	adds	r7, #20
 8011cdc:	46bd      	mov	sp, r7
 8011cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce2:	4770      	bx	lr
 8011ce4:	ec337800 	.word	0xec337800
 8011ce8:	eff37800 	.word	0xeff37800

08011cec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b08a      	sub	sp, #40	; 0x28
 8011cf0:	af02      	add	r7, sp, #8
 8011cf2:	60f8      	str	r0, [r7, #12]
 8011cf4:	60b9      	str	r1, [r7, #8]
 8011cf6:	4613      	mov	r3, r2
 8011cf8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8011cfe:	68bb      	ldr	r3, [r7, #8]
 8011d00:	781b      	ldrb	r3, [r3, #0]
 8011d02:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011d04:	68bb      	ldr	r3, [r7, #8]
 8011d06:	785b      	ldrb	r3, [r3, #1]
 8011d08:	2b01      	cmp	r3, #1
 8011d0a:	f040 8181 	bne.w	8012010 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8011d0e:	68bb      	ldr	r3, [r7, #8]
 8011d10:	691b      	ldr	r3, [r3, #16]
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d132      	bne.n	8011d7c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011d16:	69bb      	ldr	r3, [r7, #24]
 8011d18:	015a      	lsls	r2, r3, #5
 8011d1a:	69fb      	ldr	r3, [r7, #28]
 8011d1c:	4413      	add	r3, r2
 8011d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d22:	691a      	ldr	r2, [r3, #16]
 8011d24:	69bb      	ldr	r3, [r7, #24]
 8011d26:	0159      	lsls	r1, r3, #5
 8011d28:	69fb      	ldr	r3, [r7, #28]
 8011d2a:	440b      	add	r3, r1
 8011d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d30:	4619      	mov	r1, r3
 8011d32:	4ba5      	ldr	r3, [pc, #660]	; (8011fc8 <USB_EPStartXfer+0x2dc>)
 8011d34:	4013      	ands	r3, r2
 8011d36:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011d38:	69bb      	ldr	r3, [r7, #24]
 8011d3a:	015a      	lsls	r2, r3, #5
 8011d3c:	69fb      	ldr	r3, [r7, #28]
 8011d3e:	4413      	add	r3, r2
 8011d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d44:	691b      	ldr	r3, [r3, #16]
 8011d46:	69ba      	ldr	r2, [r7, #24]
 8011d48:	0151      	lsls	r1, r2, #5
 8011d4a:	69fa      	ldr	r2, [r7, #28]
 8011d4c:	440a      	add	r2, r1
 8011d4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011d52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011d56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011d58:	69bb      	ldr	r3, [r7, #24]
 8011d5a:	015a      	lsls	r2, r3, #5
 8011d5c:	69fb      	ldr	r3, [r7, #28]
 8011d5e:	4413      	add	r3, r2
 8011d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d64:	691a      	ldr	r2, [r3, #16]
 8011d66:	69bb      	ldr	r3, [r7, #24]
 8011d68:	0159      	lsls	r1, r3, #5
 8011d6a:	69fb      	ldr	r3, [r7, #28]
 8011d6c:	440b      	add	r3, r1
 8011d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d72:	4619      	mov	r1, r3
 8011d74:	4b95      	ldr	r3, [pc, #596]	; (8011fcc <USB_EPStartXfer+0x2e0>)
 8011d76:	4013      	ands	r3, r2
 8011d78:	610b      	str	r3, [r1, #16]
 8011d7a:	e092      	b.n	8011ea2 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011d7c:	69bb      	ldr	r3, [r7, #24]
 8011d7e:	015a      	lsls	r2, r3, #5
 8011d80:	69fb      	ldr	r3, [r7, #28]
 8011d82:	4413      	add	r3, r2
 8011d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d88:	691a      	ldr	r2, [r3, #16]
 8011d8a:	69bb      	ldr	r3, [r7, #24]
 8011d8c:	0159      	lsls	r1, r3, #5
 8011d8e:	69fb      	ldr	r3, [r7, #28]
 8011d90:	440b      	add	r3, r1
 8011d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011d96:	4619      	mov	r1, r3
 8011d98:	4b8c      	ldr	r3, [pc, #560]	; (8011fcc <USB_EPStartXfer+0x2e0>)
 8011d9a:	4013      	ands	r3, r2
 8011d9c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011d9e:	69bb      	ldr	r3, [r7, #24]
 8011da0:	015a      	lsls	r2, r3, #5
 8011da2:	69fb      	ldr	r3, [r7, #28]
 8011da4:	4413      	add	r3, r2
 8011da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011daa:	691a      	ldr	r2, [r3, #16]
 8011dac:	69bb      	ldr	r3, [r7, #24]
 8011dae:	0159      	lsls	r1, r3, #5
 8011db0:	69fb      	ldr	r3, [r7, #28]
 8011db2:	440b      	add	r3, r1
 8011db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011db8:	4619      	mov	r1, r3
 8011dba:	4b83      	ldr	r3, [pc, #524]	; (8011fc8 <USB_EPStartXfer+0x2dc>)
 8011dbc:	4013      	ands	r3, r2
 8011dbe:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8011dc0:	69bb      	ldr	r3, [r7, #24]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d11a      	bne.n	8011dfc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8011dc6:	68bb      	ldr	r3, [r7, #8]
 8011dc8:	691a      	ldr	r2, [r3, #16]
 8011dca:	68bb      	ldr	r3, [r7, #8]
 8011dcc:	689b      	ldr	r3, [r3, #8]
 8011dce:	429a      	cmp	r2, r3
 8011dd0:	d903      	bls.n	8011dda <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8011dd2:	68bb      	ldr	r3, [r7, #8]
 8011dd4:	689a      	ldr	r2, [r3, #8]
 8011dd6:	68bb      	ldr	r3, [r7, #8]
 8011dd8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011dda:	69bb      	ldr	r3, [r7, #24]
 8011ddc:	015a      	lsls	r2, r3, #5
 8011dde:	69fb      	ldr	r3, [r7, #28]
 8011de0:	4413      	add	r3, r2
 8011de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011de6:	691b      	ldr	r3, [r3, #16]
 8011de8:	69ba      	ldr	r2, [r7, #24]
 8011dea:	0151      	lsls	r1, r2, #5
 8011dec:	69fa      	ldr	r2, [r7, #28]
 8011dee:	440a      	add	r2, r1
 8011df0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011df4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011df8:	6113      	str	r3, [r2, #16]
 8011dfa:	e01b      	b.n	8011e34 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8011dfc:	69bb      	ldr	r3, [r7, #24]
 8011dfe:	015a      	lsls	r2, r3, #5
 8011e00:	69fb      	ldr	r3, [r7, #28]
 8011e02:	4413      	add	r3, r2
 8011e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e08:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8011e0a:	68bb      	ldr	r3, [r7, #8]
 8011e0c:	6919      	ldr	r1, [r3, #16]
 8011e0e:	68bb      	ldr	r3, [r7, #8]
 8011e10:	689b      	ldr	r3, [r3, #8]
 8011e12:	440b      	add	r3, r1
 8011e14:	1e59      	subs	r1, r3, #1
 8011e16:	68bb      	ldr	r3, [r7, #8]
 8011e18:	689b      	ldr	r3, [r3, #8]
 8011e1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8011e1e:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8011e20:	4b6b      	ldr	r3, [pc, #428]	; (8011fd0 <USB_EPStartXfer+0x2e4>)
 8011e22:	400b      	ands	r3, r1
 8011e24:	69b9      	ldr	r1, [r7, #24]
 8011e26:	0148      	lsls	r0, r1, #5
 8011e28:	69f9      	ldr	r1, [r7, #28]
 8011e2a:	4401      	add	r1, r0
 8011e2c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011e30:	4313      	orrs	r3, r2
 8011e32:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011e34:	69bb      	ldr	r3, [r7, #24]
 8011e36:	015a      	lsls	r2, r3, #5
 8011e38:	69fb      	ldr	r3, [r7, #28]
 8011e3a:	4413      	add	r3, r2
 8011e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e40:	691a      	ldr	r2, [r3, #16]
 8011e42:	68bb      	ldr	r3, [r7, #8]
 8011e44:	691b      	ldr	r3, [r3, #16]
 8011e46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011e4a:	69b9      	ldr	r1, [r7, #24]
 8011e4c:	0148      	lsls	r0, r1, #5
 8011e4e:	69f9      	ldr	r1, [r7, #28]
 8011e50:	4401      	add	r1, r0
 8011e52:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8011e56:	4313      	orrs	r3, r2
 8011e58:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8011e5a:	68bb      	ldr	r3, [r7, #8]
 8011e5c:	791b      	ldrb	r3, [r3, #4]
 8011e5e:	2b01      	cmp	r3, #1
 8011e60:	d11f      	bne.n	8011ea2 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8011e62:	69bb      	ldr	r3, [r7, #24]
 8011e64:	015a      	lsls	r2, r3, #5
 8011e66:	69fb      	ldr	r3, [r7, #28]
 8011e68:	4413      	add	r3, r2
 8011e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e6e:	691b      	ldr	r3, [r3, #16]
 8011e70:	69ba      	ldr	r2, [r7, #24]
 8011e72:	0151      	lsls	r1, r2, #5
 8011e74:	69fa      	ldr	r2, [r7, #28]
 8011e76:	440a      	add	r2, r1
 8011e78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011e7c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8011e80:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8011e82:	69bb      	ldr	r3, [r7, #24]
 8011e84:	015a      	lsls	r2, r3, #5
 8011e86:	69fb      	ldr	r3, [r7, #28]
 8011e88:	4413      	add	r3, r2
 8011e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011e8e:	691b      	ldr	r3, [r3, #16]
 8011e90:	69ba      	ldr	r2, [r7, #24]
 8011e92:	0151      	lsls	r1, r2, #5
 8011e94:	69fa      	ldr	r2, [r7, #28]
 8011e96:	440a      	add	r2, r1
 8011e98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011e9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011ea0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8011ea2:	79fb      	ldrb	r3, [r7, #7]
 8011ea4:	2b01      	cmp	r3, #1
 8011ea6:	d14b      	bne.n	8011f40 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8011ea8:	68bb      	ldr	r3, [r7, #8]
 8011eaa:	69db      	ldr	r3, [r3, #28]
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d009      	beq.n	8011ec4 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8011eb0:	69bb      	ldr	r3, [r7, #24]
 8011eb2:	015a      	lsls	r2, r3, #5
 8011eb4:	69fb      	ldr	r3, [r7, #28]
 8011eb6:	4413      	add	r3, r2
 8011eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ebc:	461a      	mov	r2, r3
 8011ebe:	68bb      	ldr	r3, [r7, #8]
 8011ec0:	69db      	ldr	r3, [r3, #28]
 8011ec2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8011ec4:	68bb      	ldr	r3, [r7, #8]
 8011ec6:	791b      	ldrb	r3, [r3, #4]
 8011ec8:	2b01      	cmp	r3, #1
 8011eca:	d128      	bne.n	8011f1e <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011ecc:	69fb      	ldr	r3, [r7, #28]
 8011ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ed2:	689b      	ldr	r3, [r3, #8]
 8011ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d110      	bne.n	8011efe <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011edc:	69bb      	ldr	r3, [r7, #24]
 8011ede:	015a      	lsls	r2, r3, #5
 8011ee0:	69fb      	ldr	r3, [r7, #28]
 8011ee2:	4413      	add	r3, r2
 8011ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	69ba      	ldr	r2, [r7, #24]
 8011eec:	0151      	lsls	r1, r2, #5
 8011eee:	69fa      	ldr	r2, [r7, #28]
 8011ef0:	440a      	add	r2, r1
 8011ef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011ef6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011efa:	6013      	str	r3, [r2, #0]
 8011efc:	e00f      	b.n	8011f1e <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011efe:	69bb      	ldr	r3, [r7, #24]
 8011f00:	015a      	lsls	r2, r3, #5
 8011f02:	69fb      	ldr	r3, [r7, #28]
 8011f04:	4413      	add	r3, r2
 8011f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	69ba      	ldr	r2, [r7, #24]
 8011f0e:	0151      	lsls	r1, r2, #5
 8011f10:	69fa      	ldr	r2, [r7, #28]
 8011f12:	440a      	add	r2, r1
 8011f14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011f1c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011f1e:	69bb      	ldr	r3, [r7, #24]
 8011f20:	015a      	lsls	r2, r3, #5
 8011f22:	69fb      	ldr	r3, [r7, #28]
 8011f24:	4413      	add	r3, r2
 8011f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	69ba      	ldr	r2, [r7, #24]
 8011f2e:	0151      	lsls	r1, r2, #5
 8011f30:	69fa      	ldr	r2, [r7, #28]
 8011f32:	440a      	add	r2, r1
 8011f34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011f38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011f3c:	6013      	str	r3, [r2, #0]
 8011f3e:	e16a      	b.n	8012216 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011f40:	69bb      	ldr	r3, [r7, #24]
 8011f42:	015a      	lsls	r2, r3, #5
 8011f44:	69fb      	ldr	r3, [r7, #28]
 8011f46:	4413      	add	r3, r2
 8011f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	69ba      	ldr	r2, [r7, #24]
 8011f50:	0151      	lsls	r1, r2, #5
 8011f52:	69fa      	ldr	r2, [r7, #28]
 8011f54:	440a      	add	r2, r1
 8011f56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011f5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011f5e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011f60:	68bb      	ldr	r3, [r7, #8]
 8011f62:	791b      	ldrb	r3, [r3, #4]
 8011f64:	2b01      	cmp	r3, #1
 8011f66:	d015      	beq.n	8011f94 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8011f68:	68bb      	ldr	r3, [r7, #8]
 8011f6a:	691b      	ldr	r3, [r3, #16]
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	f000 8152 	beq.w	8012216 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8011f72:	69fb      	ldr	r3, [r7, #28]
 8011f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011f7a:	68bb      	ldr	r3, [r7, #8]
 8011f7c:	781b      	ldrb	r3, [r3, #0]
 8011f7e:	f003 030f 	and.w	r3, r3, #15
 8011f82:	2101      	movs	r1, #1
 8011f84:	fa01 f303 	lsl.w	r3, r1, r3
 8011f88:	69f9      	ldr	r1, [r7, #28]
 8011f8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011f8e:	4313      	orrs	r3, r2
 8011f90:	634b      	str	r3, [r1, #52]	; 0x34
 8011f92:	e140      	b.n	8012216 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011f94:	69fb      	ldr	r3, [r7, #28]
 8011f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f9a:	689b      	ldr	r3, [r3, #8]
 8011f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d117      	bne.n	8011fd4 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011fa4:	69bb      	ldr	r3, [r7, #24]
 8011fa6:	015a      	lsls	r2, r3, #5
 8011fa8:	69fb      	ldr	r3, [r7, #28]
 8011faa:	4413      	add	r3, r2
 8011fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	69ba      	ldr	r2, [r7, #24]
 8011fb4:	0151      	lsls	r1, r2, #5
 8011fb6:	69fa      	ldr	r2, [r7, #28]
 8011fb8:	440a      	add	r2, r1
 8011fba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011fbe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011fc2:	6013      	str	r3, [r2, #0]
 8011fc4:	e016      	b.n	8011ff4 <USB_EPStartXfer+0x308>
 8011fc6:	bf00      	nop
 8011fc8:	e007ffff 	.word	0xe007ffff
 8011fcc:	fff80000 	.word	0xfff80000
 8011fd0:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011fd4:	69bb      	ldr	r3, [r7, #24]
 8011fd6:	015a      	lsls	r2, r3, #5
 8011fd8:	69fb      	ldr	r3, [r7, #28]
 8011fda:	4413      	add	r3, r2
 8011fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	69ba      	ldr	r2, [r7, #24]
 8011fe4:	0151      	lsls	r1, r2, #5
 8011fe6:	69fa      	ldr	r2, [r7, #28]
 8011fe8:	440a      	add	r2, r1
 8011fea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011ff2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8011ff4:	68bb      	ldr	r3, [r7, #8]
 8011ff6:	68d9      	ldr	r1, [r3, #12]
 8011ff8:	68bb      	ldr	r3, [r7, #8]
 8011ffa:	781a      	ldrb	r2, [r3, #0]
 8011ffc:	68bb      	ldr	r3, [r7, #8]
 8011ffe:	691b      	ldr	r3, [r3, #16]
 8012000:	b298      	uxth	r0, r3
 8012002:	79fb      	ldrb	r3, [r7, #7]
 8012004:	9300      	str	r3, [sp, #0]
 8012006:	4603      	mov	r3, r0
 8012008:	68f8      	ldr	r0, [r7, #12]
 801200a:	f000 f9b9 	bl	8012380 <USB_WritePacket>
 801200e:	e102      	b.n	8012216 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8012010:	69bb      	ldr	r3, [r7, #24]
 8012012:	015a      	lsls	r2, r3, #5
 8012014:	69fb      	ldr	r3, [r7, #28]
 8012016:	4413      	add	r3, r2
 8012018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801201c:	691a      	ldr	r2, [r3, #16]
 801201e:	69bb      	ldr	r3, [r7, #24]
 8012020:	0159      	lsls	r1, r3, #5
 8012022:	69fb      	ldr	r3, [r7, #28]
 8012024:	440b      	add	r3, r1
 8012026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801202a:	4619      	mov	r1, r3
 801202c:	4b7c      	ldr	r3, [pc, #496]	; (8012220 <USB_EPStartXfer+0x534>)
 801202e:	4013      	ands	r3, r2
 8012030:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8012032:	69bb      	ldr	r3, [r7, #24]
 8012034:	015a      	lsls	r2, r3, #5
 8012036:	69fb      	ldr	r3, [r7, #28]
 8012038:	4413      	add	r3, r2
 801203a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801203e:	691a      	ldr	r2, [r3, #16]
 8012040:	69bb      	ldr	r3, [r7, #24]
 8012042:	0159      	lsls	r1, r3, #5
 8012044:	69fb      	ldr	r3, [r7, #28]
 8012046:	440b      	add	r3, r1
 8012048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801204c:	4619      	mov	r1, r3
 801204e:	4b75      	ldr	r3, [pc, #468]	; (8012224 <USB_EPStartXfer+0x538>)
 8012050:	4013      	ands	r3, r2
 8012052:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8012054:	69bb      	ldr	r3, [r7, #24]
 8012056:	2b00      	cmp	r3, #0
 8012058:	d12f      	bne.n	80120ba <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 801205a:	68bb      	ldr	r3, [r7, #8]
 801205c:	691b      	ldr	r3, [r3, #16]
 801205e:	2b00      	cmp	r3, #0
 8012060:	d003      	beq.n	801206a <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8012062:	68bb      	ldr	r3, [r7, #8]
 8012064:	689a      	ldr	r2, [r3, #8]
 8012066:	68bb      	ldr	r3, [r7, #8]
 8012068:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 801206a:	68bb      	ldr	r3, [r7, #8]
 801206c:	689a      	ldr	r2, [r3, #8]
 801206e:	68bb      	ldr	r3, [r7, #8]
 8012070:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8012072:	69bb      	ldr	r3, [r7, #24]
 8012074:	015a      	lsls	r2, r3, #5
 8012076:	69fb      	ldr	r3, [r7, #28]
 8012078:	4413      	add	r3, r2
 801207a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801207e:	691a      	ldr	r2, [r3, #16]
 8012080:	68bb      	ldr	r3, [r7, #8]
 8012082:	6a1b      	ldr	r3, [r3, #32]
 8012084:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012088:	69b9      	ldr	r1, [r7, #24]
 801208a:	0148      	lsls	r0, r1, #5
 801208c:	69f9      	ldr	r1, [r7, #28]
 801208e:	4401      	add	r1, r0
 8012090:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012094:	4313      	orrs	r3, r2
 8012096:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012098:	69bb      	ldr	r3, [r7, #24]
 801209a:	015a      	lsls	r2, r3, #5
 801209c:	69fb      	ldr	r3, [r7, #28]
 801209e:	4413      	add	r3, r2
 80120a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80120a4:	691b      	ldr	r3, [r3, #16]
 80120a6:	69ba      	ldr	r2, [r7, #24]
 80120a8:	0151      	lsls	r1, r2, #5
 80120aa:	69fa      	ldr	r2, [r7, #28]
 80120ac:	440a      	add	r2, r1
 80120ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80120b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80120b6:	6113      	str	r3, [r2, #16]
 80120b8:	e05f      	b.n	801217a <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80120ba:	68bb      	ldr	r3, [r7, #8]
 80120bc:	691b      	ldr	r3, [r3, #16]
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d123      	bne.n	801210a <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80120c2:	69bb      	ldr	r3, [r7, #24]
 80120c4:	015a      	lsls	r2, r3, #5
 80120c6:	69fb      	ldr	r3, [r7, #28]
 80120c8:	4413      	add	r3, r2
 80120ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80120ce:	691a      	ldr	r2, [r3, #16]
 80120d0:	68bb      	ldr	r3, [r7, #8]
 80120d2:	689b      	ldr	r3, [r3, #8]
 80120d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80120d8:	69b9      	ldr	r1, [r7, #24]
 80120da:	0148      	lsls	r0, r1, #5
 80120dc:	69f9      	ldr	r1, [r7, #28]
 80120de:	4401      	add	r1, r0
 80120e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80120e4:	4313      	orrs	r3, r2
 80120e6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80120e8:	69bb      	ldr	r3, [r7, #24]
 80120ea:	015a      	lsls	r2, r3, #5
 80120ec:	69fb      	ldr	r3, [r7, #28]
 80120ee:	4413      	add	r3, r2
 80120f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80120f4:	691b      	ldr	r3, [r3, #16]
 80120f6:	69ba      	ldr	r2, [r7, #24]
 80120f8:	0151      	lsls	r1, r2, #5
 80120fa:	69fa      	ldr	r2, [r7, #28]
 80120fc:	440a      	add	r2, r1
 80120fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012102:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012106:	6113      	str	r3, [r2, #16]
 8012108:	e037      	b.n	801217a <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801210a:	68bb      	ldr	r3, [r7, #8]
 801210c:	691a      	ldr	r2, [r3, #16]
 801210e:	68bb      	ldr	r3, [r7, #8]
 8012110:	689b      	ldr	r3, [r3, #8]
 8012112:	4413      	add	r3, r2
 8012114:	1e5a      	subs	r2, r3, #1
 8012116:	68bb      	ldr	r3, [r7, #8]
 8012118:	689b      	ldr	r3, [r3, #8]
 801211a:	fbb2 f3f3 	udiv	r3, r2, r3
 801211e:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8012120:	68bb      	ldr	r3, [r7, #8]
 8012122:	689b      	ldr	r3, [r3, #8]
 8012124:	8afa      	ldrh	r2, [r7, #22]
 8012126:	fb03 f202 	mul.w	r2, r3, r2
 801212a:	68bb      	ldr	r3, [r7, #8]
 801212c:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801212e:	69bb      	ldr	r3, [r7, #24]
 8012130:	015a      	lsls	r2, r3, #5
 8012132:	69fb      	ldr	r3, [r7, #28]
 8012134:	4413      	add	r3, r2
 8012136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801213a:	691a      	ldr	r2, [r3, #16]
 801213c:	8afb      	ldrh	r3, [r7, #22]
 801213e:	04d9      	lsls	r1, r3, #19
 8012140:	4b39      	ldr	r3, [pc, #228]	; (8012228 <USB_EPStartXfer+0x53c>)
 8012142:	400b      	ands	r3, r1
 8012144:	69b9      	ldr	r1, [r7, #24]
 8012146:	0148      	lsls	r0, r1, #5
 8012148:	69f9      	ldr	r1, [r7, #28]
 801214a:	4401      	add	r1, r0
 801214c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012150:	4313      	orrs	r3, r2
 8012152:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8012154:	69bb      	ldr	r3, [r7, #24]
 8012156:	015a      	lsls	r2, r3, #5
 8012158:	69fb      	ldr	r3, [r7, #28]
 801215a:	4413      	add	r3, r2
 801215c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012160:	691a      	ldr	r2, [r3, #16]
 8012162:	68bb      	ldr	r3, [r7, #8]
 8012164:	6a1b      	ldr	r3, [r3, #32]
 8012166:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801216a:	69b9      	ldr	r1, [r7, #24]
 801216c:	0148      	lsls	r0, r1, #5
 801216e:	69f9      	ldr	r1, [r7, #28]
 8012170:	4401      	add	r1, r0
 8012172:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012176:	4313      	orrs	r3, r2
 8012178:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 801217a:	79fb      	ldrb	r3, [r7, #7]
 801217c:	2b01      	cmp	r3, #1
 801217e:	d10d      	bne.n	801219c <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8012180:	68bb      	ldr	r3, [r7, #8]
 8012182:	68db      	ldr	r3, [r3, #12]
 8012184:	2b00      	cmp	r3, #0
 8012186:	d009      	beq.n	801219c <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8012188:	68bb      	ldr	r3, [r7, #8]
 801218a:	68d9      	ldr	r1, [r3, #12]
 801218c:	69bb      	ldr	r3, [r7, #24]
 801218e:	015a      	lsls	r2, r3, #5
 8012190:	69fb      	ldr	r3, [r7, #28]
 8012192:	4413      	add	r3, r2
 8012194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012198:	460a      	mov	r2, r1
 801219a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801219c:	68bb      	ldr	r3, [r7, #8]
 801219e:	791b      	ldrb	r3, [r3, #4]
 80121a0:	2b01      	cmp	r3, #1
 80121a2:	d128      	bne.n	80121f6 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80121a4:	69fb      	ldr	r3, [r7, #28]
 80121a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80121aa:	689b      	ldr	r3, [r3, #8]
 80121ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d110      	bne.n	80121d6 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80121b4:	69bb      	ldr	r3, [r7, #24]
 80121b6:	015a      	lsls	r2, r3, #5
 80121b8:	69fb      	ldr	r3, [r7, #28]
 80121ba:	4413      	add	r3, r2
 80121bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	69ba      	ldr	r2, [r7, #24]
 80121c4:	0151      	lsls	r1, r2, #5
 80121c6:	69fa      	ldr	r2, [r7, #28]
 80121c8:	440a      	add	r2, r1
 80121ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80121ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80121d2:	6013      	str	r3, [r2, #0]
 80121d4:	e00f      	b.n	80121f6 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80121d6:	69bb      	ldr	r3, [r7, #24]
 80121d8:	015a      	lsls	r2, r3, #5
 80121da:	69fb      	ldr	r3, [r7, #28]
 80121dc:	4413      	add	r3, r2
 80121de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	69ba      	ldr	r2, [r7, #24]
 80121e6:	0151      	lsls	r1, r2, #5
 80121e8:	69fa      	ldr	r2, [r7, #28]
 80121ea:	440a      	add	r2, r1
 80121ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80121f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80121f4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80121f6:	69bb      	ldr	r3, [r7, #24]
 80121f8:	015a      	lsls	r2, r3, #5
 80121fa:	69fb      	ldr	r3, [r7, #28]
 80121fc:	4413      	add	r3, r2
 80121fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	69ba      	ldr	r2, [r7, #24]
 8012206:	0151      	lsls	r1, r2, #5
 8012208:	69fa      	ldr	r2, [r7, #28]
 801220a:	440a      	add	r2, r1
 801220c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012210:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012214:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012216:	2300      	movs	r3, #0
}
 8012218:	4618      	mov	r0, r3
 801221a:	3720      	adds	r7, #32
 801221c:	46bd      	mov	sp, r7
 801221e:	bd80      	pop	{r7, pc}
 8012220:	fff80000 	.word	0xfff80000
 8012224:	e007ffff 	.word	0xe007ffff
 8012228:	1ff80000 	.word	0x1ff80000

0801222c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801222c:	b480      	push	{r7}
 801222e:	b087      	sub	sp, #28
 8012230:	af00      	add	r7, sp, #0
 8012232:	6078      	str	r0, [r7, #4]
 8012234:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012236:	2300      	movs	r3, #0
 8012238:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801223a:	2300      	movs	r3, #0
 801223c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012242:	683b      	ldr	r3, [r7, #0]
 8012244:	785b      	ldrb	r3, [r3, #1]
 8012246:	2b01      	cmp	r3, #1
 8012248:	d14a      	bne.n	80122e0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801224a:	683b      	ldr	r3, [r7, #0]
 801224c:	781b      	ldrb	r3, [r3, #0]
 801224e:	015a      	lsls	r2, r3, #5
 8012250:	693b      	ldr	r3, [r7, #16]
 8012252:	4413      	add	r3, r2
 8012254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801225e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012262:	f040 8086 	bne.w	8012372 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8012266:	683b      	ldr	r3, [r7, #0]
 8012268:	781b      	ldrb	r3, [r3, #0]
 801226a:	015a      	lsls	r2, r3, #5
 801226c:	693b      	ldr	r3, [r7, #16]
 801226e:	4413      	add	r3, r2
 8012270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	683a      	ldr	r2, [r7, #0]
 8012278:	7812      	ldrb	r2, [r2, #0]
 801227a:	0151      	lsls	r1, r2, #5
 801227c:	693a      	ldr	r2, [r7, #16]
 801227e:	440a      	add	r2, r1
 8012280:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012284:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012288:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 801228a:	683b      	ldr	r3, [r7, #0]
 801228c:	781b      	ldrb	r3, [r3, #0]
 801228e:	015a      	lsls	r2, r3, #5
 8012290:	693b      	ldr	r3, [r7, #16]
 8012292:	4413      	add	r3, r2
 8012294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	683a      	ldr	r2, [r7, #0]
 801229c:	7812      	ldrb	r2, [r2, #0]
 801229e:	0151      	lsls	r1, r2, #5
 80122a0:	693a      	ldr	r2, [r7, #16]
 80122a2:	440a      	add	r2, r1
 80122a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80122a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80122ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	3301      	adds	r3, #1
 80122b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80122ba:	4293      	cmp	r3, r2
 80122bc:	d902      	bls.n	80122c4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80122be:	2301      	movs	r3, #1
 80122c0:	75fb      	strb	r3, [r7, #23]
          break;
 80122c2:	e056      	b.n	8012372 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80122c4:	683b      	ldr	r3, [r7, #0]
 80122c6:	781b      	ldrb	r3, [r3, #0]
 80122c8:	015a      	lsls	r2, r3, #5
 80122ca:	693b      	ldr	r3, [r7, #16]
 80122cc:	4413      	add	r3, r2
 80122ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80122d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80122dc:	d0e7      	beq.n	80122ae <USB_EPStopXfer+0x82>
 80122de:	e048      	b.n	8012372 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80122e0:	683b      	ldr	r3, [r7, #0]
 80122e2:	781b      	ldrb	r3, [r3, #0]
 80122e4:	015a      	lsls	r2, r3, #5
 80122e6:	693b      	ldr	r3, [r7, #16]
 80122e8:	4413      	add	r3, r2
 80122ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80122f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80122f8:	d13b      	bne.n	8012372 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80122fa:	683b      	ldr	r3, [r7, #0]
 80122fc:	781b      	ldrb	r3, [r3, #0]
 80122fe:	015a      	lsls	r2, r3, #5
 8012300:	693b      	ldr	r3, [r7, #16]
 8012302:	4413      	add	r3, r2
 8012304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	683a      	ldr	r2, [r7, #0]
 801230c:	7812      	ldrb	r2, [r2, #0]
 801230e:	0151      	lsls	r1, r2, #5
 8012310:	693a      	ldr	r2, [r7, #16]
 8012312:	440a      	add	r2, r1
 8012314:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012318:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801231c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801231e:	683b      	ldr	r3, [r7, #0]
 8012320:	781b      	ldrb	r3, [r3, #0]
 8012322:	015a      	lsls	r2, r3, #5
 8012324:	693b      	ldr	r3, [r7, #16]
 8012326:	4413      	add	r3, r2
 8012328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	683a      	ldr	r2, [r7, #0]
 8012330:	7812      	ldrb	r2, [r2, #0]
 8012332:	0151      	lsls	r1, r2, #5
 8012334:	693a      	ldr	r2, [r7, #16]
 8012336:	440a      	add	r2, r1
 8012338:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801233c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012340:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	3301      	adds	r3, #1
 8012346:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	f242 7210 	movw	r2, #10000	; 0x2710
 801234e:	4293      	cmp	r3, r2
 8012350:	d902      	bls.n	8012358 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8012352:	2301      	movs	r3, #1
 8012354:	75fb      	strb	r3, [r7, #23]
          break;
 8012356:	e00c      	b.n	8012372 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8012358:	683b      	ldr	r3, [r7, #0]
 801235a:	781b      	ldrb	r3, [r3, #0]
 801235c:	015a      	lsls	r2, r3, #5
 801235e:	693b      	ldr	r3, [r7, #16]
 8012360:	4413      	add	r3, r2
 8012362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801236c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012370:	d0e7      	beq.n	8012342 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8012372:	7dfb      	ldrb	r3, [r7, #23]
}
 8012374:	4618      	mov	r0, r3
 8012376:	371c      	adds	r7, #28
 8012378:	46bd      	mov	sp, r7
 801237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801237e:	4770      	bx	lr

08012380 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8012380:	b480      	push	{r7}
 8012382:	b089      	sub	sp, #36	; 0x24
 8012384:	af00      	add	r7, sp, #0
 8012386:	60f8      	str	r0, [r7, #12]
 8012388:	60b9      	str	r1, [r7, #8]
 801238a:	4611      	mov	r1, r2
 801238c:	461a      	mov	r2, r3
 801238e:	460b      	mov	r3, r1
 8012390:	71fb      	strb	r3, [r7, #7]
 8012392:	4613      	mov	r3, r2
 8012394:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801239a:	68bb      	ldr	r3, [r7, #8]
 801239c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801239e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d123      	bne.n	80123ee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80123a6:	88bb      	ldrh	r3, [r7, #4]
 80123a8:	3303      	adds	r3, #3
 80123aa:	089b      	lsrs	r3, r3, #2
 80123ac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80123ae:	2300      	movs	r3, #0
 80123b0:	61bb      	str	r3, [r7, #24]
 80123b2:	e018      	b.n	80123e6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80123b4:	79fb      	ldrb	r3, [r7, #7]
 80123b6:	031a      	lsls	r2, r3, #12
 80123b8:	697b      	ldr	r3, [r7, #20]
 80123ba:	4413      	add	r3, r2
 80123bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80123c0:	461a      	mov	r2, r3
 80123c2:	69fb      	ldr	r3, [r7, #28]
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80123c8:	69fb      	ldr	r3, [r7, #28]
 80123ca:	3301      	adds	r3, #1
 80123cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80123ce:	69fb      	ldr	r3, [r7, #28]
 80123d0:	3301      	adds	r3, #1
 80123d2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80123d4:	69fb      	ldr	r3, [r7, #28]
 80123d6:	3301      	adds	r3, #1
 80123d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80123da:	69fb      	ldr	r3, [r7, #28]
 80123dc:	3301      	adds	r3, #1
 80123de:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80123e0:	69bb      	ldr	r3, [r7, #24]
 80123e2:	3301      	adds	r3, #1
 80123e4:	61bb      	str	r3, [r7, #24]
 80123e6:	69ba      	ldr	r2, [r7, #24]
 80123e8:	693b      	ldr	r3, [r7, #16]
 80123ea:	429a      	cmp	r2, r3
 80123ec:	d3e2      	bcc.n	80123b4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80123ee:	2300      	movs	r3, #0
}
 80123f0:	4618      	mov	r0, r3
 80123f2:	3724      	adds	r7, #36	; 0x24
 80123f4:	46bd      	mov	sp, r7
 80123f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123fa:	4770      	bx	lr

080123fc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80123fc:	b480      	push	{r7}
 80123fe:	b08b      	sub	sp, #44	; 0x2c
 8012400:	af00      	add	r7, sp, #0
 8012402:	60f8      	str	r0, [r7, #12]
 8012404:	60b9      	str	r1, [r7, #8]
 8012406:	4613      	mov	r3, r2
 8012408:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801240e:	68bb      	ldr	r3, [r7, #8]
 8012410:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8012412:	88fb      	ldrh	r3, [r7, #6]
 8012414:	089b      	lsrs	r3, r3, #2
 8012416:	b29b      	uxth	r3, r3
 8012418:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801241a:	88fb      	ldrh	r3, [r7, #6]
 801241c:	f003 0303 	and.w	r3, r3, #3
 8012420:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8012422:	2300      	movs	r3, #0
 8012424:	623b      	str	r3, [r7, #32]
 8012426:	e014      	b.n	8012452 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012428:	69bb      	ldr	r3, [r7, #24]
 801242a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801242e:	681a      	ldr	r2, [r3, #0]
 8012430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012432:	601a      	str	r2, [r3, #0]
    pDest++;
 8012434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012436:	3301      	adds	r3, #1
 8012438:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801243c:	3301      	adds	r3, #1
 801243e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8012440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012442:	3301      	adds	r3, #1
 8012444:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8012446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012448:	3301      	adds	r3, #1
 801244a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 801244c:	6a3b      	ldr	r3, [r7, #32]
 801244e:	3301      	adds	r3, #1
 8012450:	623b      	str	r3, [r7, #32]
 8012452:	6a3a      	ldr	r2, [r7, #32]
 8012454:	697b      	ldr	r3, [r7, #20]
 8012456:	429a      	cmp	r2, r3
 8012458:	d3e6      	bcc.n	8012428 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801245a:	8bfb      	ldrh	r3, [r7, #30]
 801245c:	2b00      	cmp	r3, #0
 801245e:	d01e      	beq.n	801249e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8012460:	2300      	movs	r3, #0
 8012462:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8012464:	69bb      	ldr	r3, [r7, #24]
 8012466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801246a:	461a      	mov	r2, r3
 801246c:	f107 0310 	add.w	r3, r7, #16
 8012470:	6812      	ldr	r2, [r2, #0]
 8012472:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8012474:	693a      	ldr	r2, [r7, #16]
 8012476:	6a3b      	ldr	r3, [r7, #32]
 8012478:	b2db      	uxtb	r3, r3
 801247a:	00db      	lsls	r3, r3, #3
 801247c:	fa22 f303 	lsr.w	r3, r2, r3
 8012480:	b2da      	uxtb	r2, r3
 8012482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012484:	701a      	strb	r2, [r3, #0]
      i++;
 8012486:	6a3b      	ldr	r3, [r7, #32]
 8012488:	3301      	adds	r3, #1
 801248a:	623b      	str	r3, [r7, #32]
      pDest++;
 801248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801248e:	3301      	adds	r3, #1
 8012490:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8012492:	8bfb      	ldrh	r3, [r7, #30]
 8012494:	3b01      	subs	r3, #1
 8012496:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8012498:	8bfb      	ldrh	r3, [r7, #30]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d1ea      	bne.n	8012474 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80124a0:	4618      	mov	r0, r3
 80124a2:	372c      	adds	r7, #44	; 0x2c
 80124a4:	46bd      	mov	sp, r7
 80124a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124aa:	4770      	bx	lr

080124ac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80124ac:	b480      	push	{r7}
 80124ae:	b085      	sub	sp, #20
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	6078      	str	r0, [r7, #4]
 80124b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80124ba:	683b      	ldr	r3, [r7, #0]
 80124bc:	781b      	ldrb	r3, [r3, #0]
 80124be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80124c0:	683b      	ldr	r3, [r7, #0]
 80124c2:	785b      	ldrb	r3, [r3, #1]
 80124c4:	2b01      	cmp	r3, #1
 80124c6:	d12c      	bne.n	8012522 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80124c8:	68bb      	ldr	r3, [r7, #8]
 80124ca:	015a      	lsls	r2, r3, #5
 80124cc:	68fb      	ldr	r3, [r7, #12]
 80124ce:	4413      	add	r3, r2
 80124d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	db12      	blt.n	8012500 <USB_EPSetStall+0x54>
 80124da:	68bb      	ldr	r3, [r7, #8]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d00f      	beq.n	8012500 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80124e0:	68bb      	ldr	r3, [r7, #8]
 80124e2:	015a      	lsls	r2, r3, #5
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	4413      	add	r3, r2
 80124e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	68ba      	ldr	r2, [r7, #8]
 80124f0:	0151      	lsls	r1, r2, #5
 80124f2:	68fa      	ldr	r2, [r7, #12]
 80124f4:	440a      	add	r2, r1
 80124f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80124fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80124fe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8012500:	68bb      	ldr	r3, [r7, #8]
 8012502:	015a      	lsls	r2, r3, #5
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	4413      	add	r3, r2
 8012508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	68ba      	ldr	r2, [r7, #8]
 8012510:	0151      	lsls	r1, r2, #5
 8012512:	68fa      	ldr	r2, [r7, #12]
 8012514:	440a      	add	r2, r1
 8012516:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801251a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801251e:	6013      	str	r3, [r2, #0]
 8012520:	e02b      	b.n	801257a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012522:	68bb      	ldr	r3, [r7, #8]
 8012524:	015a      	lsls	r2, r3, #5
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	4413      	add	r3, r2
 801252a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	2b00      	cmp	r3, #0
 8012532:	db12      	blt.n	801255a <USB_EPSetStall+0xae>
 8012534:	68bb      	ldr	r3, [r7, #8]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d00f      	beq.n	801255a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801253a:	68bb      	ldr	r3, [r7, #8]
 801253c:	015a      	lsls	r2, r3, #5
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	4413      	add	r3, r2
 8012542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	68ba      	ldr	r2, [r7, #8]
 801254a:	0151      	lsls	r1, r2, #5
 801254c:	68fa      	ldr	r2, [r7, #12]
 801254e:	440a      	add	r2, r1
 8012550:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012554:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012558:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801255a:	68bb      	ldr	r3, [r7, #8]
 801255c:	015a      	lsls	r2, r3, #5
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	4413      	add	r3, r2
 8012562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	68ba      	ldr	r2, [r7, #8]
 801256a:	0151      	lsls	r1, r2, #5
 801256c:	68fa      	ldr	r2, [r7, #12]
 801256e:	440a      	add	r2, r1
 8012570:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012574:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012578:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801257a:	2300      	movs	r3, #0
}
 801257c:	4618      	mov	r0, r3
 801257e:	3714      	adds	r7, #20
 8012580:	46bd      	mov	sp, r7
 8012582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012586:	4770      	bx	lr

08012588 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012588:	b480      	push	{r7}
 801258a:	b085      	sub	sp, #20
 801258c:	af00      	add	r7, sp, #0
 801258e:	6078      	str	r0, [r7, #4]
 8012590:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012596:	683b      	ldr	r3, [r7, #0]
 8012598:	781b      	ldrb	r3, [r3, #0]
 801259a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801259c:	683b      	ldr	r3, [r7, #0]
 801259e:	785b      	ldrb	r3, [r3, #1]
 80125a0:	2b01      	cmp	r3, #1
 80125a2:	d128      	bne.n	80125f6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80125a4:	68bb      	ldr	r3, [r7, #8]
 80125a6:	015a      	lsls	r2, r3, #5
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	4413      	add	r3, r2
 80125ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	68ba      	ldr	r2, [r7, #8]
 80125b4:	0151      	lsls	r1, r2, #5
 80125b6:	68fa      	ldr	r2, [r7, #12]
 80125b8:	440a      	add	r2, r1
 80125ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80125be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80125c2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80125c4:	683b      	ldr	r3, [r7, #0]
 80125c6:	791b      	ldrb	r3, [r3, #4]
 80125c8:	2b03      	cmp	r3, #3
 80125ca:	d003      	beq.n	80125d4 <USB_EPClearStall+0x4c>
 80125cc:	683b      	ldr	r3, [r7, #0]
 80125ce:	791b      	ldrb	r3, [r3, #4]
 80125d0:	2b02      	cmp	r3, #2
 80125d2:	d138      	bne.n	8012646 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80125d4:	68bb      	ldr	r3, [r7, #8]
 80125d6:	015a      	lsls	r2, r3, #5
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	4413      	add	r3, r2
 80125dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	68ba      	ldr	r2, [r7, #8]
 80125e4:	0151      	lsls	r1, r2, #5
 80125e6:	68fa      	ldr	r2, [r7, #12]
 80125e8:	440a      	add	r2, r1
 80125ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80125ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80125f2:	6013      	str	r3, [r2, #0]
 80125f4:	e027      	b.n	8012646 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80125f6:	68bb      	ldr	r3, [r7, #8]
 80125f8:	015a      	lsls	r2, r3, #5
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	4413      	add	r3, r2
 80125fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	68ba      	ldr	r2, [r7, #8]
 8012606:	0151      	lsls	r1, r2, #5
 8012608:	68fa      	ldr	r2, [r7, #12]
 801260a:	440a      	add	r2, r1
 801260c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012610:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012614:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012616:	683b      	ldr	r3, [r7, #0]
 8012618:	791b      	ldrb	r3, [r3, #4]
 801261a:	2b03      	cmp	r3, #3
 801261c:	d003      	beq.n	8012626 <USB_EPClearStall+0x9e>
 801261e:	683b      	ldr	r3, [r7, #0]
 8012620:	791b      	ldrb	r3, [r3, #4]
 8012622:	2b02      	cmp	r3, #2
 8012624:	d10f      	bne.n	8012646 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012626:	68bb      	ldr	r3, [r7, #8]
 8012628:	015a      	lsls	r2, r3, #5
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	4413      	add	r3, r2
 801262e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	68ba      	ldr	r2, [r7, #8]
 8012636:	0151      	lsls	r1, r2, #5
 8012638:	68fa      	ldr	r2, [r7, #12]
 801263a:	440a      	add	r2, r1
 801263c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012644:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8012646:	2300      	movs	r3, #0
}
 8012648:	4618      	mov	r0, r3
 801264a:	3714      	adds	r7, #20
 801264c:	46bd      	mov	sp, r7
 801264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012652:	4770      	bx	lr

08012654 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8012654:	b480      	push	{r7}
 8012656:	b085      	sub	sp, #20
 8012658:	af00      	add	r7, sp, #0
 801265a:	6078      	str	r0, [r7, #4]
 801265c:	460b      	mov	r3, r1
 801265e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	68fa      	ldr	r2, [r7, #12]
 801266e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012672:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8012676:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801267e:	681a      	ldr	r2, [r3, #0]
 8012680:	78fb      	ldrb	r3, [r7, #3]
 8012682:	011b      	lsls	r3, r3, #4
 8012684:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8012688:	68f9      	ldr	r1, [r7, #12]
 801268a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801268e:	4313      	orrs	r3, r2
 8012690:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8012692:	2300      	movs	r3, #0
}
 8012694:	4618      	mov	r0, r3
 8012696:	3714      	adds	r7, #20
 8012698:	46bd      	mov	sp, r7
 801269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801269e:	4770      	bx	lr

080126a0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80126a0:	b480      	push	{r7}
 80126a2:	b085      	sub	sp, #20
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	68fa      	ldr	r2, [r7, #12]
 80126b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80126ba:	f023 0303 	bic.w	r3, r3, #3
 80126be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80126c6:	685b      	ldr	r3, [r3, #4]
 80126c8:	68fa      	ldr	r2, [r7, #12]
 80126ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80126ce:	f023 0302 	bic.w	r3, r3, #2
 80126d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80126d4:	2300      	movs	r3, #0
}
 80126d6:	4618      	mov	r0, r3
 80126d8:	3714      	adds	r7, #20
 80126da:	46bd      	mov	sp, r7
 80126dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e0:	4770      	bx	lr

080126e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80126e2:	b480      	push	{r7}
 80126e4:	b085      	sub	sp, #20
 80126e6:	af00      	add	r7, sp, #0
 80126e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	68fa      	ldr	r2, [r7, #12]
 80126f8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80126fc:	f023 0303 	bic.w	r3, r3, #3
 8012700:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012708:	685b      	ldr	r3, [r3, #4]
 801270a:	68fa      	ldr	r2, [r7, #12]
 801270c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012710:	f043 0302 	orr.w	r3, r3, #2
 8012714:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012716:	2300      	movs	r3, #0
}
 8012718:	4618      	mov	r0, r3
 801271a:	3714      	adds	r7, #20
 801271c:	46bd      	mov	sp, r7
 801271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012722:	4770      	bx	lr

08012724 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8012724:	b480      	push	{r7}
 8012726:	b085      	sub	sp, #20
 8012728:	af00      	add	r7, sp, #0
 801272a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	695b      	ldr	r3, [r3, #20]
 8012730:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	699b      	ldr	r3, [r3, #24]
 8012736:	68fa      	ldr	r2, [r7, #12]
 8012738:	4013      	ands	r3, r2
 801273a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801273c:	68fb      	ldr	r3, [r7, #12]
}
 801273e:	4618      	mov	r0, r3
 8012740:	3714      	adds	r7, #20
 8012742:	46bd      	mov	sp, r7
 8012744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012748:	4770      	bx	lr

0801274a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801274a:	b480      	push	{r7}
 801274c:	b085      	sub	sp, #20
 801274e:	af00      	add	r7, sp, #0
 8012750:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012756:	68fb      	ldr	r3, [r7, #12]
 8012758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801275c:	699b      	ldr	r3, [r3, #24]
 801275e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012766:	69db      	ldr	r3, [r3, #28]
 8012768:	68ba      	ldr	r2, [r7, #8]
 801276a:	4013      	ands	r3, r2
 801276c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801276e:	68bb      	ldr	r3, [r7, #8]
 8012770:	0c1b      	lsrs	r3, r3, #16
}
 8012772:	4618      	mov	r0, r3
 8012774:	3714      	adds	r7, #20
 8012776:	46bd      	mov	sp, r7
 8012778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801277c:	4770      	bx	lr

0801277e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801277e:	b480      	push	{r7}
 8012780:	b085      	sub	sp, #20
 8012782:	af00      	add	r7, sp, #0
 8012784:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801278a:	68fb      	ldr	r3, [r7, #12]
 801278c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012790:	699b      	ldr	r3, [r3, #24]
 8012792:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801279a:	69db      	ldr	r3, [r3, #28]
 801279c:	68ba      	ldr	r2, [r7, #8]
 801279e:	4013      	ands	r3, r2
 80127a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80127a2:	68bb      	ldr	r3, [r7, #8]
 80127a4:	b29b      	uxth	r3, r3
}
 80127a6:	4618      	mov	r0, r3
 80127a8:	3714      	adds	r7, #20
 80127aa:	46bd      	mov	sp, r7
 80127ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b0:	4770      	bx	lr

080127b2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80127b2:	b480      	push	{r7}
 80127b4:	b085      	sub	sp, #20
 80127b6:	af00      	add	r7, sp, #0
 80127b8:	6078      	str	r0, [r7, #4]
 80127ba:	460b      	mov	r3, r1
 80127bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80127c2:	78fb      	ldrb	r3, [r7, #3]
 80127c4:	015a      	lsls	r2, r3, #5
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	4413      	add	r3, r2
 80127ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80127ce:	689b      	ldr	r3, [r3, #8]
 80127d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80127d2:	68fb      	ldr	r3, [r7, #12]
 80127d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80127d8:	695b      	ldr	r3, [r3, #20]
 80127da:	68ba      	ldr	r2, [r7, #8]
 80127dc:	4013      	ands	r3, r2
 80127de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80127e0:	68bb      	ldr	r3, [r7, #8]
}
 80127e2:	4618      	mov	r0, r3
 80127e4:	3714      	adds	r7, #20
 80127e6:	46bd      	mov	sp, r7
 80127e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ec:	4770      	bx	lr

080127ee <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80127ee:	b480      	push	{r7}
 80127f0:	b087      	sub	sp, #28
 80127f2:	af00      	add	r7, sp, #0
 80127f4:	6078      	str	r0, [r7, #4]
 80127f6:	460b      	mov	r3, r1
 80127f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80127fe:	697b      	ldr	r3, [r7, #20]
 8012800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012804:	691b      	ldr	r3, [r3, #16]
 8012806:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8012808:	697b      	ldr	r3, [r7, #20]
 801280a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801280e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012810:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8012812:	78fb      	ldrb	r3, [r7, #3]
 8012814:	f003 030f 	and.w	r3, r3, #15
 8012818:	68fa      	ldr	r2, [r7, #12]
 801281a:	fa22 f303 	lsr.w	r3, r2, r3
 801281e:	01db      	lsls	r3, r3, #7
 8012820:	b2db      	uxtb	r3, r3
 8012822:	693a      	ldr	r2, [r7, #16]
 8012824:	4313      	orrs	r3, r2
 8012826:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8012828:	78fb      	ldrb	r3, [r7, #3]
 801282a:	015a      	lsls	r2, r3, #5
 801282c:	697b      	ldr	r3, [r7, #20]
 801282e:	4413      	add	r3, r2
 8012830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012834:	689b      	ldr	r3, [r3, #8]
 8012836:	693a      	ldr	r2, [r7, #16]
 8012838:	4013      	ands	r3, r2
 801283a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801283c:	68bb      	ldr	r3, [r7, #8]
}
 801283e:	4618      	mov	r0, r3
 8012840:	371c      	adds	r7, #28
 8012842:	46bd      	mov	sp, r7
 8012844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012848:	4770      	bx	lr

0801284a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801284a:	b480      	push	{r7}
 801284c:	b083      	sub	sp, #12
 801284e:	af00      	add	r7, sp, #0
 8012850:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	695b      	ldr	r3, [r3, #20]
 8012856:	f003 0301 	and.w	r3, r3, #1
}
 801285a:	4618      	mov	r0, r3
 801285c:	370c      	adds	r7, #12
 801285e:	46bd      	mov	sp, r7
 8012860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012864:	4770      	bx	lr
	...

08012868 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8012868:	b480      	push	{r7}
 801286a:	b085      	sub	sp, #20
 801286c:	af00      	add	r7, sp, #0
 801286e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801287a:	681a      	ldr	r2, [r3, #0]
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012882:	4619      	mov	r1, r3
 8012884:	4b09      	ldr	r3, [pc, #36]	; (80128ac <USB_ActivateSetup+0x44>)
 8012886:	4013      	ands	r3, r2
 8012888:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012890:	685b      	ldr	r3, [r3, #4]
 8012892:	68fa      	ldr	r2, [r7, #12]
 8012894:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801289c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801289e:	2300      	movs	r3, #0
}
 80128a0:	4618      	mov	r0, r3
 80128a2:	3714      	adds	r7, #20
 80128a4:	46bd      	mov	sp, r7
 80128a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128aa:	4770      	bx	lr
 80128ac:	fffff800 	.word	0xfffff800

080128b0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80128b0:	b480      	push	{r7}
 80128b2:	b087      	sub	sp, #28
 80128b4:	af00      	add	r7, sp, #0
 80128b6:	60f8      	str	r0, [r7, #12]
 80128b8:	460b      	mov	r3, r1
 80128ba:	607a      	str	r2, [r7, #4]
 80128bc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80128c2:	68fb      	ldr	r3, [r7, #12]
 80128c4:	333c      	adds	r3, #60	; 0x3c
 80128c6:	3304      	adds	r3, #4
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80128cc:	693b      	ldr	r3, [r7, #16]
 80128ce:	4a26      	ldr	r2, [pc, #152]	; (8012968 <USB_EP0_OutStart+0xb8>)
 80128d0:	4293      	cmp	r3, r2
 80128d2:	d90a      	bls.n	80128ea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80128d4:	697b      	ldr	r3, [r7, #20]
 80128d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80128e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80128e4:	d101      	bne.n	80128ea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80128e6:	2300      	movs	r3, #0
 80128e8:	e037      	b.n	801295a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80128ea:	697b      	ldr	r3, [r7, #20]
 80128ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80128f0:	461a      	mov	r2, r3
 80128f2:	2300      	movs	r3, #0
 80128f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80128f6:	697b      	ldr	r3, [r7, #20]
 80128f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80128fc:	691b      	ldr	r3, [r3, #16]
 80128fe:	697a      	ldr	r2, [r7, #20]
 8012900:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012904:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012908:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801290a:	697b      	ldr	r3, [r7, #20]
 801290c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012910:	691b      	ldr	r3, [r3, #16]
 8012912:	697a      	ldr	r2, [r7, #20]
 8012914:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012918:	f043 0318 	orr.w	r3, r3, #24
 801291c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801291e:	697b      	ldr	r3, [r7, #20]
 8012920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012924:	691b      	ldr	r3, [r3, #16]
 8012926:	697a      	ldr	r2, [r7, #20]
 8012928:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801292c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8012930:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8012932:	7afb      	ldrb	r3, [r7, #11]
 8012934:	2b01      	cmp	r3, #1
 8012936:	d10f      	bne.n	8012958 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8012938:	697b      	ldr	r3, [r7, #20]
 801293a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801293e:	461a      	mov	r2, r3
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8012944:	697b      	ldr	r3, [r7, #20]
 8012946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	697a      	ldr	r2, [r7, #20]
 801294e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012952:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8012956:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012958:	2300      	movs	r3, #0
}
 801295a:	4618      	mov	r0, r3
 801295c:	371c      	adds	r7, #28
 801295e:	46bd      	mov	sp, r7
 8012960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012964:	4770      	bx	lr
 8012966:	bf00      	nop
 8012968:	4f54300a 	.word	0x4f54300a

0801296c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801296c:	b480      	push	{r7}
 801296e:	b085      	sub	sp, #20
 8012970:	af00      	add	r7, sp, #0
 8012972:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012974:	2300      	movs	r3, #0
 8012976:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	3301      	adds	r3, #1
 801297c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	4a13      	ldr	r2, [pc, #76]	; (80129d0 <USB_CoreReset+0x64>)
 8012982:	4293      	cmp	r3, r2
 8012984:	d901      	bls.n	801298a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8012986:	2303      	movs	r3, #3
 8012988:	e01b      	b.n	80129c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	691b      	ldr	r3, [r3, #16]
 801298e:	2b00      	cmp	r3, #0
 8012990:	daf2      	bge.n	8012978 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8012992:	2300      	movs	r3, #0
 8012994:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	691b      	ldr	r3, [r3, #16]
 801299a:	f043 0201 	orr.w	r2, r3, #1
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	3301      	adds	r3, #1
 80129a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	4a09      	ldr	r2, [pc, #36]	; (80129d0 <USB_CoreReset+0x64>)
 80129ac:	4293      	cmp	r3, r2
 80129ae:	d901      	bls.n	80129b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80129b0:	2303      	movs	r3, #3
 80129b2:	e006      	b.n	80129c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	691b      	ldr	r3, [r3, #16]
 80129b8:	f003 0301 	and.w	r3, r3, #1
 80129bc:	2b01      	cmp	r3, #1
 80129be:	d0f0      	beq.n	80129a2 <USB_CoreReset+0x36>

  return HAL_OK;
 80129c0:	2300      	movs	r3, #0
}
 80129c2:	4618      	mov	r0, r3
 80129c4:	3714      	adds	r7, #20
 80129c6:	46bd      	mov	sp, r7
 80129c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129cc:	4770      	bx	lr
 80129ce:	bf00      	nop
 80129d0:	00030d40 	.word	0x00030d40

080129d4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80129d4:	b580      	push	{r7, lr}
 80129d6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80129d8:	4904      	ldr	r1, [pc, #16]	; (80129ec <MX_FATFS_Init+0x18>)
 80129da:	4805      	ldr	r0, [pc, #20]	; (80129f0 <MX_FATFS_Init+0x1c>)
 80129dc:	f002 fa56 	bl	8014e8c <FATFS_LinkDriver>
 80129e0:	4603      	mov	r3, r0
 80129e2:	461a      	mov	r2, r3
 80129e4:	4b03      	ldr	r3, [pc, #12]	; (80129f4 <MX_FATFS_Init+0x20>)
 80129e6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80129e8:	bf00      	nop
 80129ea:	bd80      	pop	{r7, pc}
 80129ec:	24000b14 	.word	0x24000b14
 80129f0:	080163f4 	.word	0x080163f4
 80129f4:	24000b10 	.word	0x24000b10

080129f8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80129f8:	b580      	push	{r7, lr}
 80129fa:	b082      	sub	sp, #8
 80129fc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80129fe:	2300      	movs	r3, #0
 8012a00:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8012a02:	f000 f885 	bl	8012b10 <BSP_SD_IsDetected>
 8012a06:	4603      	mov	r3, r0
 8012a08:	2b01      	cmp	r3, #1
 8012a0a:	d001      	beq.n	8012a10 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8012a0c:	2302      	movs	r3, #2
 8012a0e:	e012      	b.n	8012a36 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 8012a10:	480b      	ldr	r0, [pc, #44]	; (8012a40 <BSP_SD_Init+0x48>)
 8012a12:	f7f9 fab3 	bl	800bf7c <HAL_SD_Init>
 8012a16:	4603      	mov	r3, r0
 8012a18:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8012a1a:	79fb      	ldrb	r3, [r7, #7]
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d109      	bne.n	8012a34 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8012a20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8012a24:	4806      	ldr	r0, [pc, #24]	; (8012a40 <BSP_SD_Init+0x48>)
 8012a26:	f7fa f969 	bl	800ccfc <HAL_SD_ConfigWideBusOperation>
 8012a2a:	4603      	mov	r3, r0
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d001      	beq.n	8012a34 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8012a30:	2301      	movs	r3, #1
 8012a32:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8012a34:	79fb      	ldrb	r3, [r7, #7]
}
 8012a36:	4618      	mov	r0, r3
 8012a38:	3708      	adds	r7, #8
 8012a3a:	46bd      	mov	sp, r7
 8012a3c:	bd80      	pop	{r7, pc}
 8012a3e:	bf00      	nop
 8012a40:	24000444 	.word	0x24000444

08012a44 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8012a44:	b580      	push	{r7, lr}
 8012a46:	b086      	sub	sp, #24
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	60f8      	str	r0, [r7, #12]
 8012a4c:	60b9      	str	r1, [r7, #8]
 8012a4e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8012a50:	2300      	movs	r3, #0
 8012a52:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	68ba      	ldr	r2, [r7, #8]
 8012a58:	68f9      	ldr	r1, [r7, #12]
 8012a5a:	4806      	ldr	r0, [pc, #24]	; (8012a74 <BSP_SD_ReadBlocks_DMA+0x30>)
 8012a5c:	f7f9 fbae 	bl	800c1bc <HAL_SD_ReadBlocks_DMA>
 8012a60:	4603      	mov	r3, r0
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d001      	beq.n	8012a6a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8012a66:	2301      	movs	r3, #1
 8012a68:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8012a6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a6c:	4618      	mov	r0, r3
 8012a6e:	3718      	adds	r7, #24
 8012a70:	46bd      	mov	sp, r7
 8012a72:	bd80      	pop	{r7, pc}
 8012a74:	24000444 	.word	0x24000444

08012a78 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8012a78:	b580      	push	{r7, lr}
 8012a7a:	b086      	sub	sp, #24
 8012a7c:	af00      	add	r7, sp, #0
 8012a7e:	60f8      	str	r0, [r7, #12]
 8012a80:	60b9      	str	r1, [r7, #8]
 8012a82:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8012a84:	2300      	movs	r3, #0
 8012a86:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	68ba      	ldr	r2, [r7, #8]
 8012a8c:	68f9      	ldr	r1, [r7, #12]
 8012a8e:	4806      	ldr	r0, [pc, #24]	; (8012aa8 <BSP_SD_WriteBlocks_DMA+0x30>)
 8012a90:	f7f9 fc3c 	bl	800c30c <HAL_SD_WriteBlocks_DMA>
 8012a94:	4603      	mov	r3, r0
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d001      	beq.n	8012a9e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8012a9a:	2301      	movs	r3, #1
 8012a9c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8012a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	3718      	adds	r7, #24
 8012aa4:	46bd      	mov	sp, r7
 8012aa6:	bd80      	pop	{r7, pc}
 8012aa8:	24000444 	.word	0x24000444

08012aac <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8012aac:	b580      	push	{r7, lr}
 8012aae:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8012ab0:	4805      	ldr	r0, [pc, #20]	; (8012ac8 <BSP_SD_GetCardState+0x1c>)
 8012ab2:	f7fa fa35 	bl	800cf20 <HAL_SD_GetCardState>
 8012ab6:	4603      	mov	r3, r0
 8012ab8:	2b04      	cmp	r3, #4
 8012aba:	bf14      	ite	ne
 8012abc:	2301      	movne	r3, #1
 8012abe:	2300      	moveq	r3, #0
 8012ac0:	b2db      	uxtb	r3, r3
}
 8012ac2:	4618      	mov	r0, r3
 8012ac4:	bd80      	pop	{r7, pc}
 8012ac6:	bf00      	nop
 8012ac8:	24000444 	.word	0x24000444

08012acc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8012acc:	b580      	push	{r7, lr}
 8012ace:	b082      	sub	sp, #8
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 8012ad4:	6879      	ldr	r1, [r7, #4]
 8012ad6:	4803      	ldr	r0, [pc, #12]	; (8012ae4 <BSP_SD_GetCardInfo+0x18>)
 8012ad8:	f7fa f8e4 	bl	800cca4 <HAL_SD_GetCardInfo>
}
 8012adc:	bf00      	nop
 8012ade:	3708      	adds	r7, #8
 8012ae0:	46bd      	mov	sp, r7
 8012ae2:	bd80      	pop	{r7, pc}
 8012ae4:	24000444 	.word	0x24000444

08012ae8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8012ae8:	b580      	push	{r7, lr}
 8012aea:	b082      	sub	sp, #8
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8012af0:	f000 f9a0 	bl	8012e34 <BSP_SD_WriteCpltCallback>
}
 8012af4:	bf00      	nop
 8012af6:	3708      	adds	r7, #8
 8012af8:	46bd      	mov	sp, r7
 8012afa:	bd80      	pop	{r7, pc}

08012afc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8012afc:	b580      	push	{r7, lr}
 8012afe:	b082      	sub	sp, #8
 8012b00:	af00      	add	r7, sp, #0
 8012b02:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8012b04:	f000 f9a2 	bl	8012e4c <BSP_SD_ReadCpltCallback>
}
 8012b08:	bf00      	nop
 8012b0a:	3708      	adds	r7, #8
 8012b0c:	46bd      	mov	sp, r7
 8012b0e:	bd80      	pop	{r7, pc}

08012b10 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8012b10:	b580      	push	{r7, lr}
 8012b12:	b082      	sub	sp, #8
 8012b14:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8012b16:	2301      	movs	r3, #1
 8012b18:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8012b1a:	f000 f80b 	bl	8012b34 <BSP_PlatformIsDetected>
 8012b1e:	4603      	mov	r3, r0
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d101      	bne.n	8012b28 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8012b24:	2300      	movs	r3, #0
 8012b26:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8012b28:	79fb      	ldrb	r3, [r7, #7]
 8012b2a:	b2db      	uxtb	r3, r3
}
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	3708      	adds	r7, #8
 8012b30:	46bd      	mov	sp, r7
 8012b32:	bd80      	pop	{r7, pc}

08012b34 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8012b34:	b580      	push	{r7, lr}
 8012b36:	b082      	sub	sp, #8
 8012b38:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8012b3a:	2301      	movs	r3, #1
 8012b3c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8012b3e:	2104      	movs	r1, #4
 8012b40:	4806      	ldr	r0, [pc, #24]	; (8012b5c <BSP_PlatformIsDetected+0x28>)
 8012b42:	f7f4 fa09 	bl	8006f58 <HAL_GPIO_ReadPin>
 8012b46:	4603      	mov	r3, r0
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d001      	beq.n	8012b50 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8012b4c:	2300      	movs	r3, #0
 8012b4e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8012b50:	79fb      	ldrb	r3, [r7, #7]
}
 8012b52:	4618      	mov	r0, r3
 8012b54:	3708      	adds	r7, #8
 8012b56:	46bd      	mov	sp, r7
 8012b58:	bd80      	pop	{r7, pc}
 8012b5a:	bf00      	nop
 8012b5c:	58020400 	.word	0x58020400

08012b60 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8012b60:	b580      	push	{r7, lr}
 8012b62:	b084      	sub	sp, #16
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8012b68:	f7f0 fb64 	bl	8003234 <HAL_GetTick>
 8012b6c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8012b6e:	e006      	b.n	8012b7e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012b70:	f7ff ff9c 	bl	8012aac <BSP_SD_GetCardState>
 8012b74:	4603      	mov	r3, r0
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d101      	bne.n	8012b7e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8012b7a:	2300      	movs	r3, #0
 8012b7c:	e009      	b.n	8012b92 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8012b7e:	f7f0 fb59 	bl	8003234 <HAL_GetTick>
 8012b82:	4602      	mov	r2, r0
 8012b84:	68fb      	ldr	r3, [r7, #12]
 8012b86:	1ad3      	subs	r3, r2, r3
 8012b88:	687a      	ldr	r2, [r7, #4]
 8012b8a:	429a      	cmp	r2, r3
 8012b8c:	d8f0      	bhi.n	8012b70 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8012b8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012b92:	4618      	mov	r0, r3
 8012b94:	3710      	adds	r7, #16
 8012b96:	46bd      	mov	sp, r7
 8012b98:	bd80      	pop	{r7, pc}
	...

08012b9c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8012b9c:	b580      	push	{r7, lr}
 8012b9e:	b082      	sub	sp, #8
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	4603      	mov	r3, r0
 8012ba4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8012ba6:	4b0b      	ldr	r3, [pc, #44]	; (8012bd4 <SD_CheckStatus+0x38>)
 8012ba8:	2201      	movs	r2, #1
 8012baa:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8012bac:	f7ff ff7e 	bl	8012aac <BSP_SD_GetCardState>
 8012bb0:	4603      	mov	r3, r0
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	d107      	bne.n	8012bc6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8012bb6:	4b07      	ldr	r3, [pc, #28]	; (8012bd4 <SD_CheckStatus+0x38>)
 8012bb8:	781b      	ldrb	r3, [r3, #0]
 8012bba:	b2db      	uxtb	r3, r3
 8012bbc:	f023 0301 	bic.w	r3, r3, #1
 8012bc0:	b2da      	uxtb	r2, r3
 8012bc2:	4b04      	ldr	r3, [pc, #16]	; (8012bd4 <SD_CheckStatus+0x38>)
 8012bc4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8012bc6:	4b03      	ldr	r3, [pc, #12]	; (8012bd4 <SD_CheckStatus+0x38>)
 8012bc8:	781b      	ldrb	r3, [r3, #0]
 8012bca:	b2db      	uxtb	r3, r3
}
 8012bcc:	4618      	mov	r0, r3
 8012bce:	3708      	adds	r7, #8
 8012bd0:	46bd      	mov	sp, r7
 8012bd2:	bd80      	pop	{r7, pc}
 8012bd4:	2400000d 	.word	0x2400000d

08012bd8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8012bd8:	b580      	push	{r7, lr}
 8012bda:	b082      	sub	sp, #8
 8012bdc:	af00      	add	r7, sp, #0
 8012bde:	4603      	mov	r3, r0
 8012be0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8012be2:	f7ff ff09 	bl	80129f8 <BSP_SD_Init>
 8012be6:	4603      	mov	r3, r0
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d107      	bne.n	8012bfc <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8012bec:	79fb      	ldrb	r3, [r7, #7]
 8012bee:	4618      	mov	r0, r3
 8012bf0:	f7ff ffd4 	bl	8012b9c <SD_CheckStatus>
 8012bf4:	4603      	mov	r3, r0
 8012bf6:	461a      	mov	r2, r3
 8012bf8:	4b04      	ldr	r3, [pc, #16]	; (8012c0c <SD_initialize+0x34>)
 8012bfa:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8012bfc:	4b03      	ldr	r3, [pc, #12]	; (8012c0c <SD_initialize+0x34>)
 8012bfe:	781b      	ldrb	r3, [r3, #0]
 8012c00:	b2db      	uxtb	r3, r3
}
 8012c02:	4618      	mov	r0, r3
 8012c04:	3708      	adds	r7, #8
 8012c06:	46bd      	mov	sp, r7
 8012c08:	bd80      	pop	{r7, pc}
 8012c0a:	bf00      	nop
 8012c0c:	2400000d 	.word	0x2400000d

08012c10 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8012c10:	b580      	push	{r7, lr}
 8012c12:	b082      	sub	sp, #8
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	4603      	mov	r3, r0
 8012c18:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8012c1a:	79fb      	ldrb	r3, [r7, #7]
 8012c1c:	4618      	mov	r0, r3
 8012c1e:	f7ff ffbd 	bl	8012b9c <SD_CheckStatus>
 8012c22:	4603      	mov	r3, r0
}
 8012c24:	4618      	mov	r0, r3
 8012c26:	3708      	adds	r7, #8
 8012c28:	46bd      	mov	sp, r7
 8012c2a:	bd80      	pop	{r7, pc}

08012c2c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8012c2c:	b580      	push	{r7, lr}
 8012c2e:	b086      	sub	sp, #24
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	60b9      	str	r1, [r7, #8]
 8012c34:	607a      	str	r2, [r7, #4]
 8012c36:	603b      	str	r3, [r7, #0]
 8012c38:	4603      	mov	r3, r0
 8012c3a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012c3c:	2301      	movs	r3, #1
 8012c3e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8012c40:	f247 5030 	movw	r0, #30000	; 0x7530
 8012c44:	f7ff ff8c 	bl	8012b60 <SD_CheckStatusWithTimeout>
 8012c48:	4603      	mov	r3, r0
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	da01      	bge.n	8012c52 <SD_read+0x26>
  {
    return res;
 8012c4e:	7dfb      	ldrb	r3, [r7, #23]
 8012c50:	e03b      	b.n	8012cca <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8012c52:	683a      	ldr	r2, [r7, #0]
 8012c54:	6879      	ldr	r1, [r7, #4]
 8012c56:	68b8      	ldr	r0, [r7, #8]
 8012c58:	f7ff fef4 	bl	8012a44 <BSP_SD_ReadBlocks_DMA>
 8012c5c:	4603      	mov	r3, r0
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d132      	bne.n	8012cc8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8012c62:	4b1c      	ldr	r3, [pc, #112]	; (8012cd4 <SD_read+0xa8>)
 8012c64:	2200      	movs	r2, #0
 8012c66:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8012c68:	f7f0 fae4 	bl	8003234 <HAL_GetTick>
 8012c6c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8012c6e:	bf00      	nop
 8012c70:	4b18      	ldr	r3, [pc, #96]	; (8012cd4 <SD_read+0xa8>)
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d108      	bne.n	8012c8a <SD_read+0x5e>
 8012c78:	f7f0 fadc 	bl	8003234 <HAL_GetTick>
 8012c7c:	4602      	mov	r2, r0
 8012c7e:	693b      	ldr	r3, [r7, #16]
 8012c80:	1ad3      	subs	r3, r2, r3
 8012c82:	f247 522f 	movw	r2, #29999	; 0x752f
 8012c86:	4293      	cmp	r3, r2
 8012c88:	d9f2      	bls.n	8012c70 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8012c8a:	4b12      	ldr	r3, [pc, #72]	; (8012cd4 <SD_read+0xa8>)
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d102      	bne.n	8012c98 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8012c92:	2301      	movs	r3, #1
 8012c94:	75fb      	strb	r3, [r7, #23]
 8012c96:	e017      	b.n	8012cc8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8012c98:	4b0e      	ldr	r3, [pc, #56]	; (8012cd4 <SD_read+0xa8>)
 8012c9a:	2200      	movs	r2, #0
 8012c9c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8012c9e:	f7f0 fac9 	bl	8003234 <HAL_GetTick>
 8012ca2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012ca4:	e007      	b.n	8012cb6 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012ca6:	f7ff ff01 	bl	8012aac <BSP_SD_GetCardState>
 8012caa:	4603      	mov	r3, r0
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d102      	bne.n	8012cb6 <SD_read+0x8a>
          {
            res = RES_OK;
 8012cb0:	2300      	movs	r3, #0
 8012cb2:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8012cb4:	e008      	b.n	8012cc8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012cb6:	f7f0 fabd 	bl	8003234 <HAL_GetTick>
 8012cba:	4602      	mov	r2, r0
 8012cbc:	693b      	ldr	r3, [r7, #16]
 8012cbe:	1ad3      	subs	r3, r2, r3
 8012cc0:	f247 522f 	movw	r2, #29999	; 0x752f
 8012cc4:	4293      	cmp	r3, r2
 8012cc6:	d9ee      	bls.n	8012ca6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8012cc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8012cca:	4618      	mov	r0, r3
 8012ccc:	3718      	adds	r7, #24
 8012cce:	46bd      	mov	sp, r7
 8012cd0:	bd80      	pop	{r7, pc}
 8012cd2:	bf00      	nop
 8012cd4:	24000b1c 	.word	0x24000b1c

08012cd8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8012cd8:	b580      	push	{r7, lr}
 8012cda:	b086      	sub	sp, #24
 8012cdc:	af00      	add	r7, sp, #0
 8012cde:	60b9      	str	r1, [r7, #8]
 8012ce0:	607a      	str	r2, [r7, #4]
 8012ce2:	603b      	str	r3, [r7, #0]
 8012ce4:	4603      	mov	r3, r0
 8012ce6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8012ce8:	2301      	movs	r3, #1
 8012cea:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8012cec:	4b24      	ldr	r3, [pc, #144]	; (8012d80 <SD_write+0xa8>)
 8012cee:	2200      	movs	r2, #0
 8012cf0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8012cf2:	f247 5030 	movw	r0, #30000	; 0x7530
 8012cf6:	f7ff ff33 	bl	8012b60 <SD_CheckStatusWithTimeout>
 8012cfa:	4603      	mov	r3, r0
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	da01      	bge.n	8012d04 <SD_write+0x2c>
  {
    return res;
 8012d00:	7dfb      	ldrb	r3, [r7, #23]
 8012d02:	e038      	b.n	8012d76 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8012d04:	683a      	ldr	r2, [r7, #0]
 8012d06:	6879      	ldr	r1, [r7, #4]
 8012d08:	68b8      	ldr	r0, [r7, #8]
 8012d0a:	f7ff feb5 	bl	8012a78 <BSP_SD_WriteBlocks_DMA>
 8012d0e:	4603      	mov	r3, r0
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d12f      	bne.n	8012d74 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8012d14:	f7f0 fa8e 	bl	8003234 <HAL_GetTick>
 8012d18:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8012d1a:	bf00      	nop
 8012d1c:	4b18      	ldr	r3, [pc, #96]	; (8012d80 <SD_write+0xa8>)
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d108      	bne.n	8012d36 <SD_write+0x5e>
 8012d24:	f7f0 fa86 	bl	8003234 <HAL_GetTick>
 8012d28:	4602      	mov	r2, r0
 8012d2a:	693b      	ldr	r3, [r7, #16]
 8012d2c:	1ad3      	subs	r3, r2, r3
 8012d2e:	f247 522f 	movw	r2, #29999	; 0x752f
 8012d32:	4293      	cmp	r3, r2
 8012d34:	d9f2      	bls.n	8012d1c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8012d36:	4b12      	ldr	r3, [pc, #72]	; (8012d80 <SD_write+0xa8>)
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d102      	bne.n	8012d44 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8012d3e:	2301      	movs	r3, #1
 8012d40:	75fb      	strb	r3, [r7, #23]
 8012d42:	e017      	b.n	8012d74 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8012d44:	4b0e      	ldr	r3, [pc, #56]	; (8012d80 <SD_write+0xa8>)
 8012d46:	2200      	movs	r2, #0
 8012d48:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8012d4a:	f7f0 fa73 	bl	8003234 <HAL_GetTick>
 8012d4e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012d50:	e007      	b.n	8012d62 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8012d52:	f7ff feab 	bl	8012aac <BSP_SD_GetCardState>
 8012d56:	4603      	mov	r3, r0
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d102      	bne.n	8012d62 <SD_write+0x8a>
          {
            res = RES_OK;
 8012d5c:	2300      	movs	r3, #0
 8012d5e:	75fb      	strb	r3, [r7, #23]
            break;
 8012d60:	e008      	b.n	8012d74 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8012d62:	f7f0 fa67 	bl	8003234 <HAL_GetTick>
 8012d66:	4602      	mov	r2, r0
 8012d68:	693b      	ldr	r3, [r7, #16]
 8012d6a:	1ad3      	subs	r3, r2, r3
 8012d6c:	f247 522f 	movw	r2, #29999	; 0x752f
 8012d70:	4293      	cmp	r3, r2
 8012d72:	d9ee      	bls.n	8012d52 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8012d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d76:	4618      	mov	r0, r3
 8012d78:	3718      	adds	r7, #24
 8012d7a:	46bd      	mov	sp, r7
 8012d7c:	bd80      	pop	{r7, pc}
 8012d7e:	bf00      	nop
 8012d80:	24000b18 	.word	0x24000b18

08012d84 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8012d84:	b580      	push	{r7, lr}
 8012d86:	b08c      	sub	sp, #48	; 0x30
 8012d88:	af00      	add	r7, sp, #0
 8012d8a:	4603      	mov	r3, r0
 8012d8c:	603a      	str	r2, [r7, #0]
 8012d8e:	71fb      	strb	r3, [r7, #7]
 8012d90:	460b      	mov	r3, r1
 8012d92:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8012d94:	2301      	movs	r3, #1
 8012d96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8012d9a:	4b25      	ldr	r3, [pc, #148]	; (8012e30 <SD_ioctl+0xac>)
 8012d9c:	781b      	ldrb	r3, [r3, #0]
 8012d9e:	b2db      	uxtb	r3, r3
 8012da0:	f003 0301 	and.w	r3, r3, #1
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d001      	beq.n	8012dac <SD_ioctl+0x28>
 8012da8:	2303      	movs	r3, #3
 8012daa:	e03c      	b.n	8012e26 <SD_ioctl+0xa2>

  switch (cmd)
 8012dac:	79bb      	ldrb	r3, [r7, #6]
 8012dae:	2b03      	cmp	r3, #3
 8012db0:	d834      	bhi.n	8012e1c <SD_ioctl+0x98>
 8012db2:	a201      	add	r2, pc, #4	; (adr r2, 8012db8 <SD_ioctl+0x34>)
 8012db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012db8:	08012dc9 	.word	0x08012dc9
 8012dbc:	08012dd1 	.word	0x08012dd1
 8012dc0:	08012de9 	.word	0x08012de9
 8012dc4:	08012e03 	.word	0x08012e03
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8012dc8:	2300      	movs	r3, #0
 8012dca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012dce:	e028      	b.n	8012e22 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8012dd0:	f107 0308 	add.w	r3, r7, #8
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	f7ff fe79 	bl	8012acc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8012dda:	6a3a      	ldr	r2, [r7, #32]
 8012ddc:	683b      	ldr	r3, [r7, #0]
 8012dde:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012de0:	2300      	movs	r3, #0
 8012de2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012de6:	e01c      	b.n	8012e22 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012de8:	f107 0308 	add.w	r3, r7, #8
 8012dec:	4618      	mov	r0, r3
 8012dee:	f7ff fe6d 	bl	8012acc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8012df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012df4:	b29a      	uxth	r2, r3
 8012df6:	683b      	ldr	r3, [r7, #0]
 8012df8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8012dfa:	2300      	movs	r3, #0
 8012dfc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012e00:	e00f      	b.n	8012e22 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8012e02:	f107 0308 	add.w	r3, r7, #8
 8012e06:	4618      	mov	r0, r3
 8012e08:	f7ff fe60 	bl	8012acc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8012e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e0e:	0a5a      	lsrs	r2, r3, #9
 8012e10:	683b      	ldr	r3, [r7, #0]
 8012e12:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8012e14:	2300      	movs	r3, #0
 8012e16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8012e1a:	e002      	b.n	8012e22 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8012e1c:	2304      	movs	r3, #4
 8012e1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8012e22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012e26:	4618      	mov	r0, r3
 8012e28:	3730      	adds	r7, #48	; 0x30
 8012e2a:	46bd      	mov	sp, r7
 8012e2c:	bd80      	pop	{r7, pc}
 8012e2e:	bf00      	nop
 8012e30:	2400000d 	.word	0x2400000d

08012e34 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8012e34:	b480      	push	{r7}
 8012e36:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8012e38:	4b03      	ldr	r3, [pc, #12]	; (8012e48 <BSP_SD_WriteCpltCallback+0x14>)
 8012e3a:	2201      	movs	r2, #1
 8012e3c:	601a      	str	r2, [r3, #0]
}
 8012e3e:	bf00      	nop
 8012e40:	46bd      	mov	sp, r7
 8012e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e46:	4770      	bx	lr
 8012e48:	24000b18 	.word	0x24000b18

08012e4c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8012e4c:	b480      	push	{r7}
 8012e4e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8012e50:	4b03      	ldr	r3, [pc, #12]	; (8012e60 <BSP_SD_ReadCpltCallback+0x14>)
 8012e52:	2201      	movs	r2, #1
 8012e54:	601a      	str	r2, [r3, #0]
}
 8012e56:	bf00      	nop
 8012e58:	46bd      	mov	sp, r7
 8012e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e5e:	4770      	bx	lr
 8012e60:	24000b1c 	.word	0x24000b1c

08012e64 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012e64:	b580      	push	{r7, lr}
 8012e66:	b084      	sub	sp, #16
 8012e68:	af00      	add	r7, sp, #0
 8012e6a:	6078      	str	r0, [r7, #4]
 8012e6c:	460b      	mov	r3, r1
 8012e6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8012e70:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8012e74:	f002 fcea 	bl	801584c <USBD_static_malloc>
 8012e78:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d109      	bne.n	8012e94 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	32b0      	adds	r2, #176	; 0xb0
 8012e8a:	2100      	movs	r1, #0
 8012e8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8012e90:	2302      	movs	r3, #2
 8012e92:	e0d4      	b.n	801303e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8012e94:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8012e98:	2100      	movs	r1, #0
 8012e9a:	68f8      	ldr	r0, [r7, #12]
 8012e9c:	f002 fd52 	bl	8015944 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	32b0      	adds	r2, #176	; 0xb0
 8012eaa:	68f9      	ldr	r1, [r7, #12]
 8012eac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	32b0      	adds	r2, #176	; 0xb0
 8012eba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	7c1b      	ldrb	r3, [r3, #16]
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d138      	bne.n	8012f3e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012ecc:	4b5e      	ldr	r3, [pc, #376]	; (8013048 <USBD_CDC_Init+0x1e4>)
 8012ece:	7819      	ldrb	r1, [r3, #0]
 8012ed0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012ed4:	2202      	movs	r2, #2
 8012ed6:	6878      	ldr	r0, [r7, #4]
 8012ed8:	f002 fb95 	bl	8015606 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012edc:	4b5a      	ldr	r3, [pc, #360]	; (8013048 <USBD_CDC_Init+0x1e4>)
 8012ede:	781b      	ldrb	r3, [r3, #0]
 8012ee0:	f003 020f 	and.w	r2, r3, #15
 8012ee4:	6879      	ldr	r1, [r7, #4]
 8012ee6:	4613      	mov	r3, r2
 8012ee8:	009b      	lsls	r3, r3, #2
 8012eea:	4413      	add	r3, r2
 8012eec:	009b      	lsls	r3, r3, #2
 8012eee:	440b      	add	r3, r1
 8012ef0:	3324      	adds	r3, #36	; 0x24
 8012ef2:	2201      	movs	r2, #1
 8012ef4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8012ef6:	4b55      	ldr	r3, [pc, #340]	; (801304c <USBD_CDC_Init+0x1e8>)
 8012ef8:	7819      	ldrb	r1, [r3, #0]
 8012efa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012efe:	2202      	movs	r2, #2
 8012f00:	6878      	ldr	r0, [r7, #4]
 8012f02:	f002 fb80 	bl	8015606 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8012f06:	4b51      	ldr	r3, [pc, #324]	; (801304c <USBD_CDC_Init+0x1e8>)
 8012f08:	781b      	ldrb	r3, [r3, #0]
 8012f0a:	f003 020f 	and.w	r2, r3, #15
 8012f0e:	6879      	ldr	r1, [r7, #4]
 8012f10:	4613      	mov	r3, r2
 8012f12:	009b      	lsls	r3, r3, #2
 8012f14:	4413      	add	r3, r2
 8012f16:	009b      	lsls	r3, r3, #2
 8012f18:	440b      	add	r3, r1
 8012f1a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8012f1e:	2201      	movs	r2, #1
 8012f20:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8012f22:	4b4b      	ldr	r3, [pc, #300]	; (8013050 <USBD_CDC_Init+0x1ec>)
 8012f24:	781b      	ldrb	r3, [r3, #0]
 8012f26:	f003 020f 	and.w	r2, r3, #15
 8012f2a:	6879      	ldr	r1, [r7, #4]
 8012f2c:	4613      	mov	r3, r2
 8012f2e:	009b      	lsls	r3, r3, #2
 8012f30:	4413      	add	r3, r2
 8012f32:	009b      	lsls	r3, r3, #2
 8012f34:	440b      	add	r3, r1
 8012f36:	3326      	adds	r3, #38	; 0x26
 8012f38:	2210      	movs	r2, #16
 8012f3a:	801a      	strh	r2, [r3, #0]
 8012f3c:	e035      	b.n	8012faa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012f3e:	4b42      	ldr	r3, [pc, #264]	; (8013048 <USBD_CDC_Init+0x1e4>)
 8012f40:	7819      	ldrb	r1, [r3, #0]
 8012f42:	2340      	movs	r3, #64	; 0x40
 8012f44:	2202      	movs	r2, #2
 8012f46:	6878      	ldr	r0, [r7, #4]
 8012f48:	f002 fb5d 	bl	8015606 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012f4c:	4b3e      	ldr	r3, [pc, #248]	; (8013048 <USBD_CDC_Init+0x1e4>)
 8012f4e:	781b      	ldrb	r3, [r3, #0]
 8012f50:	f003 020f 	and.w	r2, r3, #15
 8012f54:	6879      	ldr	r1, [r7, #4]
 8012f56:	4613      	mov	r3, r2
 8012f58:	009b      	lsls	r3, r3, #2
 8012f5a:	4413      	add	r3, r2
 8012f5c:	009b      	lsls	r3, r3, #2
 8012f5e:	440b      	add	r3, r1
 8012f60:	3324      	adds	r3, #36	; 0x24
 8012f62:	2201      	movs	r2, #1
 8012f64:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8012f66:	4b39      	ldr	r3, [pc, #228]	; (801304c <USBD_CDC_Init+0x1e8>)
 8012f68:	7819      	ldrb	r1, [r3, #0]
 8012f6a:	2340      	movs	r3, #64	; 0x40
 8012f6c:	2202      	movs	r2, #2
 8012f6e:	6878      	ldr	r0, [r7, #4]
 8012f70:	f002 fb49 	bl	8015606 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8012f74:	4b35      	ldr	r3, [pc, #212]	; (801304c <USBD_CDC_Init+0x1e8>)
 8012f76:	781b      	ldrb	r3, [r3, #0]
 8012f78:	f003 020f 	and.w	r2, r3, #15
 8012f7c:	6879      	ldr	r1, [r7, #4]
 8012f7e:	4613      	mov	r3, r2
 8012f80:	009b      	lsls	r3, r3, #2
 8012f82:	4413      	add	r3, r2
 8012f84:	009b      	lsls	r3, r3, #2
 8012f86:	440b      	add	r3, r1
 8012f88:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8012f8c:	2201      	movs	r2, #1
 8012f8e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8012f90:	4b2f      	ldr	r3, [pc, #188]	; (8013050 <USBD_CDC_Init+0x1ec>)
 8012f92:	781b      	ldrb	r3, [r3, #0]
 8012f94:	f003 020f 	and.w	r2, r3, #15
 8012f98:	6879      	ldr	r1, [r7, #4]
 8012f9a:	4613      	mov	r3, r2
 8012f9c:	009b      	lsls	r3, r3, #2
 8012f9e:	4413      	add	r3, r2
 8012fa0:	009b      	lsls	r3, r3, #2
 8012fa2:	440b      	add	r3, r1
 8012fa4:	3326      	adds	r3, #38	; 0x26
 8012fa6:	2210      	movs	r2, #16
 8012fa8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8012faa:	4b29      	ldr	r3, [pc, #164]	; (8013050 <USBD_CDC_Init+0x1ec>)
 8012fac:	7819      	ldrb	r1, [r3, #0]
 8012fae:	2308      	movs	r3, #8
 8012fb0:	2203      	movs	r2, #3
 8012fb2:	6878      	ldr	r0, [r7, #4]
 8012fb4:	f002 fb27 	bl	8015606 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8012fb8:	4b25      	ldr	r3, [pc, #148]	; (8013050 <USBD_CDC_Init+0x1ec>)
 8012fba:	781b      	ldrb	r3, [r3, #0]
 8012fbc:	f003 020f 	and.w	r2, r3, #15
 8012fc0:	6879      	ldr	r1, [r7, #4]
 8012fc2:	4613      	mov	r3, r2
 8012fc4:	009b      	lsls	r3, r3, #2
 8012fc6:	4413      	add	r3, r2
 8012fc8:	009b      	lsls	r3, r3, #2
 8012fca:	440b      	add	r3, r1
 8012fcc:	3324      	adds	r3, #36	; 0x24
 8012fce:	2201      	movs	r2, #1
 8012fd0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8012fd2:	68fb      	ldr	r3, [r7, #12]
 8012fd4:	2200      	movs	r2, #0
 8012fd6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012fe0:	687a      	ldr	r2, [r7, #4]
 8012fe2:	33b0      	adds	r3, #176	; 0xb0
 8012fe4:	009b      	lsls	r3, r3, #2
 8012fe6:	4413      	add	r3, r2
 8012fe8:	685b      	ldr	r3, [r3, #4]
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	2200      	movs	r2, #0
 8012ff2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	2200      	movs	r2, #0
 8012ffa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8013004:	2b00      	cmp	r3, #0
 8013006:	d101      	bne.n	801300c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8013008:	2302      	movs	r3, #2
 801300a:	e018      	b.n	801303e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	7c1b      	ldrb	r3, [r3, #16]
 8013010:	2b00      	cmp	r3, #0
 8013012:	d10a      	bne.n	801302a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013014:	4b0d      	ldr	r3, [pc, #52]	; (801304c <USBD_CDC_Init+0x1e8>)
 8013016:	7819      	ldrb	r1, [r3, #0]
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801301e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013022:	6878      	ldr	r0, [r7, #4]
 8013024:	f002 fbde 	bl	80157e4 <USBD_LL_PrepareReceive>
 8013028:	e008      	b.n	801303c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801302a:	4b08      	ldr	r3, [pc, #32]	; (801304c <USBD_CDC_Init+0x1e8>)
 801302c:	7819      	ldrb	r1, [r3, #0]
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013034:	2340      	movs	r3, #64	; 0x40
 8013036:	6878      	ldr	r0, [r7, #4]
 8013038:	f002 fbd4 	bl	80157e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801303c:	2300      	movs	r3, #0
}
 801303e:	4618      	mov	r0, r3
 8013040:	3710      	adds	r7, #16
 8013042:	46bd      	mov	sp, r7
 8013044:	bd80      	pop	{r7, pc}
 8013046:	bf00      	nop
 8013048:	24000097 	.word	0x24000097
 801304c:	24000098 	.word	0x24000098
 8013050:	24000099 	.word	0x24000099

08013054 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013054:	b580      	push	{r7, lr}
 8013056:	b082      	sub	sp, #8
 8013058:	af00      	add	r7, sp, #0
 801305a:	6078      	str	r0, [r7, #4]
 801305c:	460b      	mov	r3, r1
 801305e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8013060:	4b3a      	ldr	r3, [pc, #232]	; (801314c <USBD_CDC_DeInit+0xf8>)
 8013062:	781b      	ldrb	r3, [r3, #0]
 8013064:	4619      	mov	r1, r3
 8013066:	6878      	ldr	r0, [r7, #4]
 8013068:	f002 faf3 	bl	8015652 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 801306c:	4b37      	ldr	r3, [pc, #220]	; (801314c <USBD_CDC_DeInit+0xf8>)
 801306e:	781b      	ldrb	r3, [r3, #0]
 8013070:	f003 020f 	and.w	r2, r3, #15
 8013074:	6879      	ldr	r1, [r7, #4]
 8013076:	4613      	mov	r3, r2
 8013078:	009b      	lsls	r3, r3, #2
 801307a:	4413      	add	r3, r2
 801307c:	009b      	lsls	r3, r3, #2
 801307e:	440b      	add	r3, r1
 8013080:	3324      	adds	r3, #36	; 0x24
 8013082:	2200      	movs	r2, #0
 8013084:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8013086:	4b32      	ldr	r3, [pc, #200]	; (8013150 <USBD_CDC_DeInit+0xfc>)
 8013088:	781b      	ldrb	r3, [r3, #0]
 801308a:	4619      	mov	r1, r3
 801308c:	6878      	ldr	r0, [r7, #4]
 801308e:	f002 fae0 	bl	8015652 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8013092:	4b2f      	ldr	r3, [pc, #188]	; (8013150 <USBD_CDC_DeInit+0xfc>)
 8013094:	781b      	ldrb	r3, [r3, #0]
 8013096:	f003 020f 	and.w	r2, r3, #15
 801309a:	6879      	ldr	r1, [r7, #4]
 801309c:	4613      	mov	r3, r2
 801309e:	009b      	lsls	r3, r3, #2
 80130a0:	4413      	add	r3, r2
 80130a2:	009b      	lsls	r3, r3, #2
 80130a4:	440b      	add	r3, r1
 80130a6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80130aa:	2200      	movs	r2, #0
 80130ac:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80130ae:	4b29      	ldr	r3, [pc, #164]	; (8013154 <USBD_CDC_DeInit+0x100>)
 80130b0:	781b      	ldrb	r3, [r3, #0]
 80130b2:	4619      	mov	r1, r3
 80130b4:	6878      	ldr	r0, [r7, #4]
 80130b6:	f002 facc 	bl	8015652 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80130ba:	4b26      	ldr	r3, [pc, #152]	; (8013154 <USBD_CDC_DeInit+0x100>)
 80130bc:	781b      	ldrb	r3, [r3, #0]
 80130be:	f003 020f 	and.w	r2, r3, #15
 80130c2:	6879      	ldr	r1, [r7, #4]
 80130c4:	4613      	mov	r3, r2
 80130c6:	009b      	lsls	r3, r3, #2
 80130c8:	4413      	add	r3, r2
 80130ca:	009b      	lsls	r3, r3, #2
 80130cc:	440b      	add	r3, r1
 80130ce:	3324      	adds	r3, #36	; 0x24
 80130d0:	2200      	movs	r2, #0
 80130d2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80130d4:	4b1f      	ldr	r3, [pc, #124]	; (8013154 <USBD_CDC_DeInit+0x100>)
 80130d6:	781b      	ldrb	r3, [r3, #0]
 80130d8:	f003 020f 	and.w	r2, r3, #15
 80130dc:	6879      	ldr	r1, [r7, #4]
 80130de:	4613      	mov	r3, r2
 80130e0:	009b      	lsls	r3, r3, #2
 80130e2:	4413      	add	r3, r2
 80130e4:	009b      	lsls	r3, r3, #2
 80130e6:	440b      	add	r3, r1
 80130e8:	3326      	adds	r3, #38	; 0x26
 80130ea:	2200      	movs	r2, #0
 80130ec:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	32b0      	adds	r2, #176	; 0xb0
 80130f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d01f      	beq.n	8013140 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013106:	687a      	ldr	r2, [r7, #4]
 8013108:	33b0      	adds	r3, #176	; 0xb0
 801310a:	009b      	lsls	r3, r3, #2
 801310c:	4413      	add	r3, r2
 801310e:	685b      	ldr	r3, [r3, #4]
 8013110:	685b      	ldr	r3, [r3, #4]
 8013112:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	32b0      	adds	r2, #176	; 0xb0
 801311e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013122:	4618      	mov	r0, r3
 8013124:	f002 fba0 	bl	8015868 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	32b0      	adds	r2, #176	; 0xb0
 8013132:	2100      	movs	r1, #0
 8013134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	2200      	movs	r2, #0
 801313c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8013140:	2300      	movs	r3, #0
}
 8013142:	4618      	mov	r0, r3
 8013144:	3708      	adds	r7, #8
 8013146:	46bd      	mov	sp, r7
 8013148:	bd80      	pop	{r7, pc}
 801314a:	bf00      	nop
 801314c:	24000097 	.word	0x24000097
 8013150:	24000098 	.word	0x24000098
 8013154:	24000099 	.word	0x24000099

08013158 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8013158:	b580      	push	{r7, lr}
 801315a:	b086      	sub	sp, #24
 801315c:	af00      	add	r7, sp, #0
 801315e:	6078      	str	r0, [r7, #4]
 8013160:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	32b0      	adds	r2, #176	; 0xb0
 801316c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013170:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8013172:	2300      	movs	r3, #0
 8013174:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8013176:	2300      	movs	r3, #0
 8013178:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801317a:	2300      	movs	r3, #0
 801317c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801317e:	693b      	ldr	r3, [r7, #16]
 8013180:	2b00      	cmp	r3, #0
 8013182:	d101      	bne.n	8013188 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8013184:	2303      	movs	r3, #3
 8013186:	e0bf      	b.n	8013308 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013188:	683b      	ldr	r3, [r7, #0]
 801318a:	781b      	ldrb	r3, [r3, #0]
 801318c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013190:	2b00      	cmp	r3, #0
 8013192:	d050      	beq.n	8013236 <USBD_CDC_Setup+0xde>
 8013194:	2b20      	cmp	r3, #32
 8013196:	f040 80af 	bne.w	80132f8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801319a:	683b      	ldr	r3, [r7, #0]
 801319c:	88db      	ldrh	r3, [r3, #6]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d03a      	beq.n	8013218 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80131a2:	683b      	ldr	r3, [r7, #0]
 80131a4:	781b      	ldrb	r3, [r3, #0]
 80131a6:	b25b      	sxtb	r3, r3
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	da1b      	bge.n	80131e4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80131b2:	687a      	ldr	r2, [r7, #4]
 80131b4:	33b0      	adds	r3, #176	; 0xb0
 80131b6:	009b      	lsls	r3, r3, #2
 80131b8:	4413      	add	r3, r2
 80131ba:	685b      	ldr	r3, [r3, #4]
 80131bc:	689b      	ldr	r3, [r3, #8]
 80131be:	683a      	ldr	r2, [r7, #0]
 80131c0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80131c2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80131c4:	683a      	ldr	r2, [r7, #0]
 80131c6:	88d2      	ldrh	r2, [r2, #6]
 80131c8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80131ca:	683b      	ldr	r3, [r7, #0]
 80131cc:	88db      	ldrh	r3, [r3, #6]
 80131ce:	2b07      	cmp	r3, #7
 80131d0:	bf28      	it	cs
 80131d2:	2307      	movcs	r3, #7
 80131d4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80131d6:	693b      	ldr	r3, [r7, #16]
 80131d8:	89fa      	ldrh	r2, [r7, #14]
 80131da:	4619      	mov	r1, r3
 80131dc:	6878      	ldr	r0, [r7, #4]
 80131de:	f001 fd89 	bl	8014cf4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80131e2:	e090      	b.n	8013306 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80131e4:	683b      	ldr	r3, [r7, #0]
 80131e6:	785a      	ldrb	r2, [r3, #1]
 80131e8:	693b      	ldr	r3, [r7, #16]
 80131ea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80131ee:	683b      	ldr	r3, [r7, #0]
 80131f0:	88db      	ldrh	r3, [r3, #6]
 80131f2:	2b3f      	cmp	r3, #63	; 0x3f
 80131f4:	d803      	bhi.n	80131fe <USBD_CDC_Setup+0xa6>
 80131f6:	683b      	ldr	r3, [r7, #0]
 80131f8:	88db      	ldrh	r3, [r3, #6]
 80131fa:	b2da      	uxtb	r2, r3
 80131fc:	e000      	b.n	8013200 <USBD_CDC_Setup+0xa8>
 80131fe:	2240      	movs	r2, #64	; 0x40
 8013200:	693b      	ldr	r3, [r7, #16]
 8013202:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8013206:	6939      	ldr	r1, [r7, #16]
 8013208:	693b      	ldr	r3, [r7, #16]
 801320a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801320e:	461a      	mov	r2, r3
 8013210:	6878      	ldr	r0, [r7, #4]
 8013212:	f001 fd9b 	bl	8014d4c <USBD_CtlPrepareRx>
      break;
 8013216:	e076      	b.n	8013306 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801321e:	687a      	ldr	r2, [r7, #4]
 8013220:	33b0      	adds	r3, #176	; 0xb0
 8013222:	009b      	lsls	r3, r3, #2
 8013224:	4413      	add	r3, r2
 8013226:	685b      	ldr	r3, [r3, #4]
 8013228:	689b      	ldr	r3, [r3, #8]
 801322a:	683a      	ldr	r2, [r7, #0]
 801322c:	7850      	ldrb	r0, [r2, #1]
 801322e:	2200      	movs	r2, #0
 8013230:	6839      	ldr	r1, [r7, #0]
 8013232:	4798      	blx	r3
      break;
 8013234:	e067      	b.n	8013306 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013236:	683b      	ldr	r3, [r7, #0]
 8013238:	785b      	ldrb	r3, [r3, #1]
 801323a:	2b0b      	cmp	r3, #11
 801323c:	d851      	bhi.n	80132e2 <USBD_CDC_Setup+0x18a>
 801323e:	a201      	add	r2, pc, #4	; (adr r2, 8013244 <USBD_CDC_Setup+0xec>)
 8013240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013244:	08013275 	.word	0x08013275
 8013248:	080132f1 	.word	0x080132f1
 801324c:	080132e3 	.word	0x080132e3
 8013250:	080132e3 	.word	0x080132e3
 8013254:	080132e3 	.word	0x080132e3
 8013258:	080132e3 	.word	0x080132e3
 801325c:	080132e3 	.word	0x080132e3
 8013260:	080132e3 	.word	0x080132e3
 8013264:	080132e3 	.word	0x080132e3
 8013268:	080132e3 	.word	0x080132e3
 801326c:	0801329f 	.word	0x0801329f
 8013270:	080132c9 	.word	0x080132c9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801327a:	b2db      	uxtb	r3, r3
 801327c:	2b03      	cmp	r3, #3
 801327e:	d107      	bne.n	8013290 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8013280:	f107 030a 	add.w	r3, r7, #10
 8013284:	2202      	movs	r2, #2
 8013286:	4619      	mov	r1, r3
 8013288:	6878      	ldr	r0, [r7, #4]
 801328a:	f001 fd33 	bl	8014cf4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801328e:	e032      	b.n	80132f6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8013290:	6839      	ldr	r1, [r7, #0]
 8013292:	6878      	ldr	r0, [r7, #4]
 8013294:	f001 fcbd 	bl	8014c12 <USBD_CtlError>
            ret = USBD_FAIL;
 8013298:	2303      	movs	r3, #3
 801329a:	75fb      	strb	r3, [r7, #23]
          break;
 801329c:	e02b      	b.n	80132f6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80132a4:	b2db      	uxtb	r3, r3
 80132a6:	2b03      	cmp	r3, #3
 80132a8:	d107      	bne.n	80132ba <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80132aa:	f107 030d 	add.w	r3, r7, #13
 80132ae:	2201      	movs	r2, #1
 80132b0:	4619      	mov	r1, r3
 80132b2:	6878      	ldr	r0, [r7, #4]
 80132b4:	f001 fd1e 	bl	8014cf4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80132b8:	e01d      	b.n	80132f6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80132ba:	6839      	ldr	r1, [r7, #0]
 80132bc:	6878      	ldr	r0, [r7, #4]
 80132be:	f001 fca8 	bl	8014c12 <USBD_CtlError>
            ret = USBD_FAIL;
 80132c2:	2303      	movs	r3, #3
 80132c4:	75fb      	strb	r3, [r7, #23]
          break;
 80132c6:	e016      	b.n	80132f6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80132ce:	b2db      	uxtb	r3, r3
 80132d0:	2b03      	cmp	r3, #3
 80132d2:	d00f      	beq.n	80132f4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80132d4:	6839      	ldr	r1, [r7, #0]
 80132d6:	6878      	ldr	r0, [r7, #4]
 80132d8:	f001 fc9b 	bl	8014c12 <USBD_CtlError>
            ret = USBD_FAIL;
 80132dc:	2303      	movs	r3, #3
 80132de:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80132e0:	e008      	b.n	80132f4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80132e2:	6839      	ldr	r1, [r7, #0]
 80132e4:	6878      	ldr	r0, [r7, #4]
 80132e6:	f001 fc94 	bl	8014c12 <USBD_CtlError>
          ret = USBD_FAIL;
 80132ea:	2303      	movs	r3, #3
 80132ec:	75fb      	strb	r3, [r7, #23]
          break;
 80132ee:	e002      	b.n	80132f6 <USBD_CDC_Setup+0x19e>
          break;
 80132f0:	bf00      	nop
 80132f2:	e008      	b.n	8013306 <USBD_CDC_Setup+0x1ae>
          break;
 80132f4:	bf00      	nop
      }
      break;
 80132f6:	e006      	b.n	8013306 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80132f8:	6839      	ldr	r1, [r7, #0]
 80132fa:	6878      	ldr	r0, [r7, #4]
 80132fc:	f001 fc89 	bl	8014c12 <USBD_CtlError>
      ret = USBD_FAIL;
 8013300:	2303      	movs	r3, #3
 8013302:	75fb      	strb	r3, [r7, #23]
      break;
 8013304:	bf00      	nop
  }

  return (uint8_t)ret;
 8013306:	7dfb      	ldrb	r3, [r7, #23]
}
 8013308:	4618      	mov	r0, r3
 801330a:	3718      	adds	r7, #24
 801330c:	46bd      	mov	sp, r7
 801330e:	bd80      	pop	{r7, pc}

08013310 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013310:	b580      	push	{r7, lr}
 8013312:	b084      	sub	sp, #16
 8013314:	af00      	add	r7, sp, #0
 8013316:	6078      	str	r0, [r7, #4]
 8013318:	460b      	mov	r3, r1
 801331a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013322:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	32b0      	adds	r2, #176	; 0xb0
 801332e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d101      	bne.n	801333a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8013336:	2303      	movs	r3, #3
 8013338:	e065      	b.n	8013406 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	32b0      	adds	r2, #176	; 0xb0
 8013344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013348:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801334a:	78fb      	ldrb	r3, [r7, #3]
 801334c:	f003 020f 	and.w	r2, r3, #15
 8013350:	6879      	ldr	r1, [r7, #4]
 8013352:	4613      	mov	r3, r2
 8013354:	009b      	lsls	r3, r3, #2
 8013356:	4413      	add	r3, r2
 8013358:	009b      	lsls	r3, r3, #2
 801335a:	440b      	add	r3, r1
 801335c:	3318      	adds	r3, #24
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	2b00      	cmp	r3, #0
 8013362:	d02f      	beq.n	80133c4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8013364:	78fb      	ldrb	r3, [r7, #3]
 8013366:	f003 020f 	and.w	r2, r3, #15
 801336a:	6879      	ldr	r1, [r7, #4]
 801336c:	4613      	mov	r3, r2
 801336e:	009b      	lsls	r3, r3, #2
 8013370:	4413      	add	r3, r2
 8013372:	009b      	lsls	r3, r3, #2
 8013374:	440b      	add	r3, r1
 8013376:	3318      	adds	r3, #24
 8013378:	681a      	ldr	r2, [r3, #0]
 801337a:	78fb      	ldrb	r3, [r7, #3]
 801337c:	f003 010f 	and.w	r1, r3, #15
 8013380:	68f8      	ldr	r0, [r7, #12]
 8013382:	460b      	mov	r3, r1
 8013384:	00db      	lsls	r3, r3, #3
 8013386:	440b      	add	r3, r1
 8013388:	009b      	lsls	r3, r3, #2
 801338a:	4403      	add	r3, r0
 801338c:	3344      	adds	r3, #68	; 0x44
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	fbb2 f1f3 	udiv	r1, r2, r3
 8013394:	fb01 f303 	mul.w	r3, r1, r3
 8013398:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801339a:	2b00      	cmp	r3, #0
 801339c:	d112      	bne.n	80133c4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801339e:	78fb      	ldrb	r3, [r7, #3]
 80133a0:	f003 020f 	and.w	r2, r3, #15
 80133a4:	6879      	ldr	r1, [r7, #4]
 80133a6:	4613      	mov	r3, r2
 80133a8:	009b      	lsls	r3, r3, #2
 80133aa:	4413      	add	r3, r2
 80133ac:	009b      	lsls	r3, r3, #2
 80133ae:	440b      	add	r3, r1
 80133b0:	3318      	adds	r3, #24
 80133b2:	2200      	movs	r2, #0
 80133b4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80133b6:	78f9      	ldrb	r1, [r7, #3]
 80133b8:	2300      	movs	r3, #0
 80133ba:	2200      	movs	r2, #0
 80133bc:	6878      	ldr	r0, [r7, #4]
 80133be:	f002 f9f0 	bl	80157a2 <USBD_LL_Transmit>
 80133c2:	e01f      	b.n	8013404 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80133c4:	68bb      	ldr	r3, [r7, #8]
 80133c6:	2200      	movs	r2, #0
 80133c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80133d2:	687a      	ldr	r2, [r7, #4]
 80133d4:	33b0      	adds	r3, #176	; 0xb0
 80133d6:	009b      	lsls	r3, r3, #2
 80133d8:	4413      	add	r3, r2
 80133da:	685b      	ldr	r3, [r3, #4]
 80133dc:	691b      	ldr	r3, [r3, #16]
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d010      	beq.n	8013404 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80133e8:	687a      	ldr	r2, [r7, #4]
 80133ea:	33b0      	adds	r3, #176	; 0xb0
 80133ec:	009b      	lsls	r3, r3, #2
 80133ee:	4413      	add	r3, r2
 80133f0:	685b      	ldr	r3, [r3, #4]
 80133f2:	691b      	ldr	r3, [r3, #16]
 80133f4:	68ba      	ldr	r2, [r7, #8]
 80133f6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80133fa:	68ba      	ldr	r2, [r7, #8]
 80133fc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8013400:	78fa      	ldrb	r2, [r7, #3]
 8013402:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8013404:	2300      	movs	r3, #0
}
 8013406:	4618      	mov	r0, r3
 8013408:	3710      	adds	r7, #16
 801340a:	46bd      	mov	sp, r7
 801340c:	bd80      	pop	{r7, pc}

0801340e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801340e:	b580      	push	{r7, lr}
 8013410:	b084      	sub	sp, #16
 8013412:	af00      	add	r7, sp, #0
 8013414:	6078      	str	r0, [r7, #4]
 8013416:	460b      	mov	r3, r1
 8013418:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	32b0      	adds	r2, #176	; 0xb0
 8013424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013428:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	32b0      	adds	r2, #176	; 0xb0
 8013434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013438:	2b00      	cmp	r3, #0
 801343a:	d101      	bne.n	8013440 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 801343c:	2303      	movs	r3, #3
 801343e:	e01a      	b.n	8013476 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013440:	78fb      	ldrb	r3, [r7, #3]
 8013442:	4619      	mov	r1, r3
 8013444:	6878      	ldr	r0, [r7, #4]
 8013446:	f002 f9ee 	bl	8015826 <USBD_LL_GetRxDataSize>
 801344a:	4602      	mov	r2, r0
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013458:	687a      	ldr	r2, [r7, #4]
 801345a:	33b0      	adds	r3, #176	; 0xb0
 801345c:	009b      	lsls	r3, r3, #2
 801345e:	4413      	add	r3, r2
 8013460:	685b      	ldr	r3, [r3, #4]
 8013462:	68db      	ldr	r3, [r3, #12]
 8013464:	68fa      	ldr	r2, [r7, #12]
 8013466:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801346a:	68fa      	ldr	r2, [r7, #12]
 801346c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8013470:	4611      	mov	r1, r2
 8013472:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8013474:	2300      	movs	r3, #0
}
 8013476:	4618      	mov	r0, r3
 8013478:	3710      	adds	r7, #16
 801347a:	46bd      	mov	sp, r7
 801347c:	bd80      	pop	{r7, pc}

0801347e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801347e:	b580      	push	{r7, lr}
 8013480:	b084      	sub	sp, #16
 8013482:	af00      	add	r7, sp, #0
 8013484:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	32b0      	adds	r2, #176	; 0xb0
 8013490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013494:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	2b00      	cmp	r3, #0
 801349a:	d101      	bne.n	80134a0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801349c:	2303      	movs	r3, #3
 801349e:	e025      	b.n	80134ec <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80134a6:	687a      	ldr	r2, [r7, #4]
 80134a8:	33b0      	adds	r3, #176	; 0xb0
 80134aa:	009b      	lsls	r3, r3, #2
 80134ac:	4413      	add	r3, r2
 80134ae:	685b      	ldr	r3, [r3, #4]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d01a      	beq.n	80134ea <USBD_CDC_EP0_RxReady+0x6c>
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80134ba:	2bff      	cmp	r3, #255	; 0xff
 80134bc:	d015      	beq.n	80134ea <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80134c4:	687a      	ldr	r2, [r7, #4]
 80134c6:	33b0      	adds	r3, #176	; 0xb0
 80134c8:	009b      	lsls	r3, r3, #2
 80134ca:	4413      	add	r3, r2
 80134cc:	685b      	ldr	r3, [r3, #4]
 80134ce:	689b      	ldr	r3, [r3, #8]
 80134d0:	68fa      	ldr	r2, [r7, #12]
 80134d2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80134d6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80134d8:	68fa      	ldr	r2, [r7, #12]
 80134da:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80134de:	b292      	uxth	r2, r2
 80134e0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	22ff      	movs	r2, #255	; 0xff
 80134e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80134ea:	2300      	movs	r3, #0
}
 80134ec:	4618      	mov	r0, r3
 80134ee:	3710      	adds	r7, #16
 80134f0:	46bd      	mov	sp, r7
 80134f2:	bd80      	pop	{r7, pc}

080134f4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80134f4:	b580      	push	{r7, lr}
 80134f6:	b086      	sub	sp, #24
 80134f8:	af00      	add	r7, sp, #0
 80134fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80134fc:	2182      	movs	r1, #130	; 0x82
 80134fe:	4818      	ldr	r0, [pc, #96]	; (8013560 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013500:	f000 fd4f 	bl	8013fa2 <USBD_GetEpDesc>
 8013504:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8013506:	2101      	movs	r1, #1
 8013508:	4815      	ldr	r0, [pc, #84]	; (8013560 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801350a:	f000 fd4a 	bl	8013fa2 <USBD_GetEpDesc>
 801350e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013510:	2181      	movs	r1, #129	; 0x81
 8013512:	4813      	ldr	r0, [pc, #76]	; (8013560 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013514:	f000 fd45 	bl	8013fa2 <USBD_GetEpDesc>
 8013518:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801351a:	697b      	ldr	r3, [r7, #20]
 801351c:	2b00      	cmp	r3, #0
 801351e:	d002      	beq.n	8013526 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013520:	697b      	ldr	r3, [r7, #20]
 8013522:	2210      	movs	r2, #16
 8013524:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8013526:	693b      	ldr	r3, [r7, #16]
 8013528:	2b00      	cmp	r3, #0
 801352a:	d006      	beq.n	801353a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801352c:	693b      	ldr	r3, [r7, #16]
 801352e:	2200      	movs	r2, #0
 8013530:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013534:	711a      	strb	r2, [r3, #4]
 8013536:	2200      	movs	r2, #0
 8013538:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	2b00      	cmp	r3, #0
 801353e:	d006      	beq.n	801354e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	2200      	movs	r2, #0
 8013544:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013548:	711a      	strb	r2, [r3, #4]
 801354a:	2200      	movs	r2, #0
 801354c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	2243      	movs	r2, #67	; 0x43
 8013552:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013554:	4b02      	ldr	r3, [pc, #8]	; (8013560 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8013556:	4618      	mov	r0, r3
 8013558:	3718      	adds	r7, #24
 801355a:	46bd      	mov	sp, r7
 801355c:	bd80      	pop	{r7, pc}
 801355e:	bf00      	nop
 8013560:	24000054 	.word	0x24000054

08013564 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8013564:	b580      	push	{r7, lr}
 8013566:	b086      	sub	sp, #24
 8013568:	af00      	add	r7, sp, #0
 801356a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801356c:	2182      	movs	r1, #130	; 0x82
 801356e:	4818      	ldr	r0, [pc, #96]	; (80135d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013570:	f000 fd17 	bl	8013fa2 <USBD_GetEpDesc>
 8013574:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8013576:	2101      	movs	r1, #1
 8013578:	4815      	ldr	r0, [pc, #84]	; (80135d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801357a:	f000 fd12 	bl	8013fa2 <USBD_GetEpDesc>
 801357e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013580:	2181      	movs	r1, #129	; 0x81
 8013582:	4813      	ldr	r0, [pc, #76]	; (80135d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013584:	f000 fd0d 	bl	8013fa2 <USBD_GetEpDesc>
 8013588:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801358a:	697b      	ldr	r3, [r7, #20]
 801358c:	2b00      	cmp	r3, #0
 801358e:	d002      	beq.n	8013596 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8013590:	697b      	ldr	r3, [r7, #20]
 8013592:	2210      	movs	r2, #16
 8013594:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8013596:	693b      	ldr	r3, [r7, #16]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d006      	beq.n	80135aa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801359c:	693b      	ldr	r3, [r7, #16]
 801359e:	2200      	movs	r2, #0
 80135a0:	711a      	strb	r2, [r3, #4]
 80135a2:	2200      	movs	r2, #0
 80135a4:	f042 0202 	orr.w	r2, r2, #2
 80135a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d006      	beq.n	80135be <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	2200      	movs	r2, #0
 80135b4:	711a      	strb	r2, [r3, #4]
 80135b6:	2200      	movs	r2, #0
 80135b8:	f042 0202 	orr.w	r2, r2, #2
 80135bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	2243      	movs	r2, #67	; 0x43
 80135c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80135c4:	4b02      	ldr	r3, [pc, #8]	; (80135d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80135c6:	4618      	mov	r0, r3
 80135c8:	3718      	adds	r7, #24
 80135ca:	46bd      	mov	sp, r7
 80135cc:	bd80      	pop	{r7, pc}
 80135ce:	bf00      	nop
 80135d0:	24000054 	.word	0x24000054

080135d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80135d4:	b580      	push	{r7, lr}
 80135d6:	b086      	sub	sp, #24
 80135d8:	af00      	add	r7, sp, #0
 80135da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80135dc:	2182      	movs	r1, #130	; 0x82
 80135de:	4818      	ldr	r0, [pc, #96]	; (8013640 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80135e0:	f000 fcdf 	bl	8013fa2 <USBD_GetEpDesc>
 80135e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80135e6:	2101      	movs	r1, #1
 80135e8:	4815      	ldr	r0, [pc, #84]	; (8013640 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80135ea:	f000 fcda 	bl	8013fa2 <USBD_GetEpDesc>
 80135ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80135f0:	2181      	movs	r1, #129	; 0x81
 80135f2:	4813      	ldr	r0, [pc, #76]	; (8013640 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80135f4:	f000 fcd5 	bl	8013fa2 <USBD_GetEpDesc>
 80135f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80135fa:	697b      	ldr	r3, [r7, #20]
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d002      	beq.n	8013606 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013600:	697b      	ldr	r3, [r7, #20]
 8013602:	2210      	movs	r2, #16
 8013604:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8013606:	693b      	ldr	r3, [r7, #16]
 8013608:	2b00      	cmp	r3, #0
 801360a:	d006      	beq.n	801361a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801360c:	693b      	ldr	r3, [r7, #16]
 801360e:	2200      	movs	r2, #0
 8013610:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013614:	711a      	strb	r2, [r3, #4]
 8013616:	2200      	movs	r2, #0
 8013618:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	2b00      	cmp	r3, #0
 801361e:	d006      	beq.n	801362e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	2200      	movs	r2, #0
 8013624:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013628:	711a      	strb	r2, [r3, #4]
 801362a:	2200      	movs	r2, #0
 801362c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	2243      	movs	r2, #67	; 0x43
 8013632:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013634:	4b02      	ldr	r3, [pc, #8]	; (8013640 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8013636:	4618      	mov	r0, r3
 8013638:	3718      	adds	r7, #24
 801363a:	46bd      	mov	sp, r7
 801363c:	bd80      	pop	{r7, pc}
 801363e:	bf00      	nop
 8013640:	24000054 	.word	0x24000054

08013644 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013644:	b480      	push	{r7}
 8013646:	b083      	sub	sp, #12
 8013648:	af00      	add	r7, sp, #0
 801364a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	220a      	movs	r2, #10
 8013650:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8013652:	4b03      	ldr	r3, [pc, #12]	; (8013660 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8013654:	4618      	mov	r0, r3
 8013656:	370c      	adds	r7, #12
 8013658:	46bd      	mov	sp, r7
 801365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801365e:	4770      	bx	lr
 8013660:	24000010 	.word	0x24000010

08013664 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8013664:	b480      	push	{r7}
 8013666:	b083      	sub	sp, #12
 8013668:	af00      	add	r7, sp, #0
 801366a:	6078      	str	r0, [r7, #4]
 801366c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801366e:	683b      	ldr	r3, [r7, #0]
 8013670:	2b00      	cmp	r3, #0
 8013672:	d101      	bne.n	8013678 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8013674:	2303      	movs	r3, #3
 8013676:	e009      	b.n	801368c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801367e:	687a      	ldr	r2, [r7, #4]
 8013680:	33b0      	adds	r3, #176	; 0xb0
 8013682:	009b      	lsls	r3, r3, #2
 8013684:	4413      	add	r3, r2
 8013686:	683a      	ldr	r2, [r7, #0]
 8013688:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801368a:	2300      	movs	r3, #0
}
 801368c:	4618      	mov	r0, r3
 801368e:	370c      	adds	r7, #12
 8013690:	46bd      	mov	sp, r7
 8013692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013696:	4770      	bx	lr

08013698 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8013698:	b480      	push	{r7}
 801369a:	b087      	sub	sp, #28
 801369c:	af00      	add	r7, sp, #0
 801369e:	60f8      	str	r0, [r7, #12]
 80136a0:	60b9      	str	r1, [r7, #8]
 80136a2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	32b0      	adds	r2, #176	; 0xb0
 80136ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136b2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80136b4:	697b      	ldr	r3, [r7, #20]
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d101      	bne.n	80136be <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80136ba:	2303      	movs	r3, #3
 80136bc:	e008      	b.n	80136d0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80136be:	697b      	ldr	r3, [r7, #20]
 80136c0:	68ba      	ldr	r2, [r7, #8]
 80136c2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80136c6:	697b      	ldr	r3, [r7, #20]
 80136c8:	687a      	ldr	r2, [r7, #4]
 80136ca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80136ce:	2300      	movs	r3, #0
}
 80136d0:	4618      	mov	r0, r3
 80136d2:	371c      	adds	r7, #28
 80136d4:	46bd      	mov	sp, r7
 80136d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136da:	4770      	bx	lr

080136dc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80136dc:	b480      	push	{r7}
 80136de:	b085      	sub	sp, #20
 80136e0:	af00      	add	r7, sp, #0
 80136e2:	6078      	str	r0, [r7, #4]
 80136e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	32b0      	adds	r2, #176	; 0xb0
 80136f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136f4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d101      	bne.n	8013700 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80136fc:	2303      	movs	r3, #3
 80136fe:	e004      	b.n	801370a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	683a      	ldr	r2, [r7, #0]
 8013704:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8013708:	2300      	movs	r3, #0
}
 801370a:	4618      	mov	r0, r3
 801370c:	3714      	adds	r7, #20
 801370e:	46bd      	mov	sp, r7
 8013710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013714:	4770      	bx	lr
	...

08013718 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8013718:	b580      	push	{r7, lr}
 801371a:	b084      	sub	sp, #16
 801371c:	af00      	add	r7, sp, #0
 801371e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	32b0      	adds	r2, #176	; 0xb0
 801372a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801372e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8013730:	2301      	movs	r3, #1
 8013732:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8013734:	68bb      	ldr	r3, [r7, #8]
 8013736:	2b00      	cmp	r3, #0
 8013738:	d101      	bne.n	801373e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801373a:	2303      	movs	r3, #3
 801373c:	e025      	b.n	801378a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 801373e:	68bb      	ldr	r3, [r7, #8]
 8013740:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013744:	2b00      	cmp	r3, #0
 8013746:	d11f      	bne.n	8013788 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8013748:	68bb      	ldr	r3, [r7, #8]
 801374a:	2201      	movs	r2, #1
 801374c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8013750:	4b10      	ldr	r3, [pc, #64]	; (8013794 <USBD_CDC_TransmitPacket+0x7c>)
 8013752:	781b      	ldrb	r3, [r3, #0]
 8013754:	f003 020f 	and.w	r2, r3, #15
 8013758:	68bb      	ldr	r3, [r7, #8]
 801375a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 801375e:	6878      	ldr	r0, [r7, #4]
 8013760:	4613      	mov	r3, r2
 8013762:	009b      	lsls	r3, r3, #2
 8013764:	4413      	add	r3, r2
 8013766:	009b      	lsls	r3, r3, #2
 8013768:	4403      	add	r3, r0
 801376a:	3318      	adds	r3, #24
 801376c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 801376e:	4b09      	ldr	r3, [pc, #36]	; (8013794 <USBD_CDC_TransmitPacket+0x7c>)
 8013770:	7819      	ldrb	r1, [r3, #0]
 8013772:	68bb      	ldr	r3, [r7, #8]
 8013774:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8013778:	68bb      	ldr	r3, [r7, #8]
 801377a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801377e:	6878      	ldr	r0, [r7, #4]
 8013780:	f002 f80f 	bl	80157a2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8013784:	2300      	movs	r3, #0
 8013786:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8013788:	7bfb      	ldrb	r3, [r7, #15]
}
 801378a:	4618      	mov	r0, r3
 801378c:	3710      	adds	r7, #16
 801378e:	46bd      	mov	sp, r7
 8013790:	bd80      	pop	{r7, pc}
 8013792:	bf00      	nop
 8013794:	24000097 	.word	0x24000097

08013798 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8013798:	b580      	push	{r7, lr}
 801379a:	b084      	sub	sp, #16
 801379c:	af00      	add	r7, sp, #0
 801379e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	32b0      	adds	r2, #176	; 0xb0
 80137aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137ae:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	32b0      	adds	r2, #176	; 0xb0
 80137ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d101      	bne.n	80137c6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80137c2:	2303      	movs	r3, #3
 80137c4:	e018      	b.n	80137f8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	7c1b      	ldrb	r3, [r3, #16]
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d10a      	bne.n	80137e4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80137ce:	4b0c      	ldr	r3, [pc, #48]	; (8013800 <USBD_CDC_ReceivePacket+0x68>)
 80137d0:	7819      	ldrb	r1, [r3, #0]
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80137d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80137dc:	6878      	ldr	r0, [r7, #4]
 80137de:	f002 f801 	bl	80157e4 <USBD_LL_PrepareReceive>
 80137e2:	e008      	b.n	80137f6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80137e4:	4b06      	ldr	r3, [pc, #24]	; (8013800 <USBD_CDC_ReceivePacket+0x68>)
 80137e6:	7819      	ldrb	r1, [r3, #0]
 80137e8:	68fb      	ldr	r3, [r7, #12]
 80137ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80137ee:	2340      	movs	r3, #64	; 0x40
 80137f0:	6878      	ldr	r0, [r7, #4]
 80137f2:	f001 fff7 	bl	80157e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80137f6:	2300      	movs	r3, #0
}
 80137f8:	4618      	mov	r0, r3
 80137fa:	3710      	adds	r7, #16
 80137fc:	46bd      	mov	sp, r7
 80137fe:	bd80      	pop	{r7, pc}
 8013800:	24000098 	.word	0x24000098

08013804 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013804:	b580      	push	{r7, lr}
 8013806:	b086      	sub	sp, #24
 8013808:	af00      	add	r7, sp, #0
 801380a:	60f8      	str	r0, [r7, #12]
 801380c:	60b9      	str	r1, [r7, #8]
 801380e:	4613      	mov	r3, r2
 8013810:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013812:	68fb      	ldr	r3, [r7, #12]
 8013814:	2b00      	cmp	r3, #0
 8013816:	d101      	bne.n	801381c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013818:	2303      	movs	r3, #3
 801381a:	e01f      	b.n	801385c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	2200      	movs	r2, #0
 8013820:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	2200      	movs	r2, #0
 8013828:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 801382c:	68fb      	ldr	r3, [r7, #12]
 801382e:	2200      	movs	r2, #0
 8013830:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013834:	68bb      	ldr	r3, [r7, #8]
 8013836:	2b00      	cmp	r3, #0
 8013838:	d003      	beq.n	8013842 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	68ba      	ldr	r2, [r7, #8]
 801383e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	2201      	movs	r2, #1
 8013846:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	79fa      	ldrb	r2, [r7, #7]
 801384e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8013850:	68f8      	ldr	r0, [r7, #12]
 8013852:	f001 fe6b 	bl	801552c <USBD_LL_Init>
 8013856:	4603      	mov	r3, r0
 8013858:	75fb      	strb	r3, [r7, #23]

  return ret;
 801385a:	7dfb      	ldrb	r3, [r7, #23]
}
 801385c:	4618      	mov	r0, r3
 801385e:	3718      	adds	r7, #24
 8013860:	46bd      	mov	sp, r7
 8013862:	bd80      	pop	{r7, pc}

08013864 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013864:	b580      	push	{r7, lr}
 8013866:	b084      	sub	sp, #16
 8013868:	af00      	add	r7, sp, #0
 801386a:	6078      	str	r0, [r7, #4]
 801386c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801386e:	2300      	movs	r3, #0
 8013870:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8013872:	683b      	ldr	r3, [r7, #0]
 8013874:	2b00      	cmp	r3, #0
 8013876:	d101      	bne.n	801387c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013878:	2303      	movs	r3, #3
 801387a:	e025      	b.n	80138c8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	683a      	ldr	r2, [r7, #0]
 8013880:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	32ae      	adds	r2, #174	; 0xae
 801388e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013894:	2b00      	cmp	r3, #0
 8013896:	d00f      	beq.n	80138b8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	32ae      	adds	r2, #174	; 0xae
 80138a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80138a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138a8:	f107 020e 	add.w	r2, r7, #14
 80138ac:	4610      	mov	r0, r2
 80138ae:	4798      	blx	r3
 80138b0:	4602      	mov	r2, r0
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80138be:	1c5a      	adds	r2, r3, #1
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80138c6:	2300      	movs	r3, #0
}
 80138c8:	4618      	mov	r0, r3
 80138ca:	3710      	adds	r7, #16
 80138cc:	46bd      	mov	sp, r7
 80138ce:	bd80      	pop	{r7, pc}

080138d0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80138d0:	b580      	push	{r7, lr}
 80138d2:	b082      	sub	sp, #8
 80138d4:	af00      	add	r7, sp, #0
 80138d6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80138d8:	6878      	ldr	r0, [r7, #4]
 80138da:	f001 fe79 	bl	80155d0 <USBD_LL_Start>
 80138de:	4603      	mov	r3, r0
}
 80138e0:	4618      	mov	r0, r3
 80138e2:	3708      	adds	r7, #8
 80138e4:	46bd      	mov	sp, r7
 80138e6:	bd80      	pop	{r7, pc}

080138e8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80138e8:	b480      	push	{r7}
 80138ea:	b083      	sub	sp, #12
 80138ec:	af00      	add	r7, sp, #0
 80138ee:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80138f0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80138f2:	4618      	mov	r0, r3
 80138f4:	370c      	adds	r7, #12
 80138f6:	46bd      	mov	sp, r7
 80138f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138fc:	4770      	bx	lr

080138fe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80138fe:	b580      	push	{r7, lr}
 8013900:	b084      	sub	sp, #16
 8013902:	af00      	add	r7, sp, #0
 8013904:	6078      	str	r0, [r7, #4]
 8013906:	460b      	mov	r3, r1
 8013908:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801390a:	2300      	movs	r3, #0
 801390c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013914:	2b00      	cmp	r3, #0
 8013916:	d009      	beq.n	801392c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	78fa      	ldrb	r2, [r7, #3]
 8013922:	4611      	mov	r1, r2
 8013924:	6878      	ldr	r0, [r7, #4]
 8013926:	4798      	blx	r3
 8013928:	4603      	mov	r3, r0
 801392a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801392c:	7bfb      	ldrb	r3, [r7, #15]
}
 801392e:	4618      	mov	r0, r3
 8013930:	3710      	adds	r7, #16
 8013932:	46bd      	mov	sp, r7
 8013934:	bd80      	pop	{r7, pc}

08013936 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013936:	b580      	push	{r7, lr}
 8013938:	b084      	sub	sp, #16
 801393a:	af00      	add	r7, sp, #0
 801393c:	6078      	str	r0, [r7, #4]
 801393e:	460b      	mov	r3, r1
 8013940:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013942:	2300      	movs	r3, #0
 8013944:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801394c:	685b      	ldr	r3, [r3, #4]
 801394e:	78fa      	ldrb	r2, [r7, #3]
 8013950:	4611      	mov	r1, r2
 8013952:	6878      	ldr	r0, [r7, #4]
 8013954:	4798      	blx	r3
 8013956:	4603      	mov	r3, r0
 8013958:	2b00      	cmp	r3, #0
 801395a:	d001      	beq.n	8013960 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 801395c:	2303      	movs	r3, #3
 801395e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013960:	7bfb      	ldrb	r3, [r7, #15]
}
 8013962:	4618      	mov	r0, r3
 8013964:	3710      	adds	r7, #16
 8013966:	46bd      	mov	sp, r7
 8013968:	bd80      	pop	{r7, pc}

0801396a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801396a:	b580      	push	{r7, lr}
 801396c:	b084      	sub	sp, #16
 801396e:	af00      	add	r7, sp, #0
 8013970:	6078      	str	r0, [r7, #4]
 8013972:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801397a:	6839      	ldr	r1, [r7, #0]
 801397c:	4618      	mov	r0, r3
 801397e:	f001 f90e 	bl	8014b9e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	2201      	movs	r2, #1
 8013986:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8013990:	461a      	mov	r2, r3
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801399e:	f003 031f 	and.w	r3, r3, #31
 80139a2:	2b02      	cmp	r3, #2
 80139a4:	d01a      	beq.n	80139dc <USBD_LL_SetupStage+0x72>
 80139a6:	2b02      	cmp	r3, #2
 80139a8:	d822      	bhi.n	80139f0 <USBD_LL_SetupStage+0x86>
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d002      	beq.n	80139b4 <USBD_LL_SetupStage+0x4a>
 80139ae:	2b01      	cmp	r3, #1
 80139b0:	d00a      	beq.n	80139c8 <USBD_LL_SetupStage+0x5e>
 80139b2:	e01d      	b.n	80139f0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80139ba:	4619      	mov	r1, r3
 80139bc:	6878      	ldr	r0, [r7, #4]
 80139be:	f000 fb65 	bl	801408c <USBD_StdDevReq>
 80139c2:	4603      	mov	r3, r0
 80139c4:	73fb      	strb	r3, [r7, #15]
      break;
 80139c6:	e020      	b.n	8013a0a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80139ce:	4619      	mov	r1, r3
 80139d0:	6878      	ldr	r0, [r7, #4]
 80139d2:	f000 fbcd 	bl	8014170 <USBD_StdItfReq>
 80139d6:	4603      	mov	r3, r0
 80139d8:	73fb      	strb	r3, [r7, #15]
      break;
 80139da:	e016      	b.n	8013a0a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80139e2:	4619      	mov	r1, r3
 80139e4:	6878      	ldr	r0, [r7, #4]
 80139e6:	f000 fc2f 	bl	8014248 <USBD_StdEPReq>
 80139ea:	4603      	mov	r3, r0
 80139ec:	73fb      	strb	r3, [r7, #15]
      break;
 80139ee:	e00c      	b.n	8013a0a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80139f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80139fa:	b2db      	uxtb	r3, r3
 80139fc:	4619      	mov	r1, r3
 80139fe:	6878      	ldr	r0, [r7, #4]
 8013a00:	f001 fe46 	bl	8015690 <USBD_LL_StallEP>
 8013a04:	4603      	mov	r3, r0
 8013a06:	73fb      	strb	r3, [r7, #15]
      break;
 8013a08:	bf00      	nop
  }

  return ret;
 8013a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a0c:	4618      	mov	r0, r3
 8013a0e:	3710      	adds	r7, #16
 8013a10:	46bd      	mov	sp, r7
 8013a12:	bd80      	pop	{r7, pc}

08013a14 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013a14:	b580      	push	{r7, lr}
 8013a16:	b086      	sub	sp, #24
 8013a18:	af00      	add	r7, sp, #0
 8013a1a:	60f8      	str	r0, [r7, #12]
 8013a1c:	460b      	mov	r3, r1
 8013a1e:	607a      	str	r2, [r7, #4]
 8013a20:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8013a22:	2300      	movs	r3, #0
 8013a24:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8013a26:	7afb      	ldrb	r3, [r7, #11]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d16e      	bne.n	8013b0a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8013a32:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013a3a:	2b03      	cmp	r3, #3
 8013a3c:	f040 8098 	bne.w	8013b70 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8013a40:	693b      	ldr	r3, [r7, #16]
 8013a42:	689a      	ldr	r2, [r3, #8]
 8013a44:	693b      	ldr	r3, [r7, #16]
 8013a46:	68db      	ldr	r3, [r3, #12]
 8013a48:	429a      	cmp	r2, r3
 8013a4a:	d913      	bls.n	8013a74 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8013a4c:	693b      	ldr	r3, [r7, #16]
 8013a4e:	689a      	ldr	r2, [r3, #8]
 8013a50:	693b      	ldr	r3, [r7, #16]
 8013a52:	68db      	ldr	r3, [r3, #12]
 8013a54:	1ad2      	subs	r2, r2, r3
 8013a56:	693b      	ldr	r3, [r7, #16]
 8013a58:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013a5a:	693b      	ldr	r3, [r7, #16]
 8013a5c:	68da      	ldr	r2, [r3, #12]
 8013a5e:	693b      	ldr	r3, [r7, #16]
 8013a60:	689b      	ldr	r3, [r3, #8]
 8013a62:	4293      	cmp	r3, r2
 8013a64:	bf28      	it	cs
 8013a66:	4613      	movcs	r3, r2
 8013a68:	461a      	mov	r2, r3
 8013a6a:	6879      	ldr	r1, [r7, #4]
 8013a6c:	68f8      	ldr	r0, [r7, #12]
 8013a6e:	f001 f98a 	bl	8014d86 <USBD_CtlContinueRx>
 8013a72:	e07d      	b.n	8013b70 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8013a74:	68fb      	ldr	r3, [r7, #12]
 8013a76:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013a7a:	f003 031f 	and.w	r3, r3, #31
 8013a7e:	2b02      	cmp	r3, #2
 8013a80:	d014      	beq.n	8013aac <USBD_LL_DataOutStage+0x98>
 8013a82:	2b02      	cmp	r3, #2
 8013a84:	d81d      	bhi.n	8013ac2 <USBD_LL_DataOutStage+0xae>
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d002      	beq.n	8013a90 <USBD_LL_DataOutStage+0x7c>
 8013a8a:	2b01      	cmp	r3, #1
 8013a8c:	d003      	beq.n	8013a96 <USBD_LL_DataOutStage+0x82>
 8013a8e:	e018      	b.n	8013ac2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8013a90:	2300      	movs	r3, #0
 8013a92:	75bb      	strb	r3, [r7, #22]
            break;
 8013a94:	e018      	b.n	8013ac8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8013a9c:	b2db      	uxtb	r3, r3
 8013a9e:	4619      	mov	r1, r3
 8013aa0:	68f8      	ldr	r0, [r7, #12]
 8013aa2:	f000 fa64 	bl	8013f6e <USBD_CoreFindIF>
 8013aa6:	4603      	mov	r3, r0
 8013aa8:	75bb      	strb	r3, [r7, #22]
            break;
 8013aaa:	e00d      	b.n	8013ac8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8013ab2:	b2db      	uxtb	r3, r3
 8013ab4:	4619      	mov	r1, r3
 8013ab6:	68f8      	ldr	r0, [r7, #12]
 8013ab8:	f000 fa66 	bl	8013f88 <USBD_CoreFindEP>
 8013abc:	4603      	mov	r3, r0
 8013abe:	75bb      	strb	r3, [r7, #22]
            break;
 8013ac0:	e002      	b.n	8013ac8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8013ac2:	2300      	movs	r3, #0
 8013ac4:	75bb      	strb	r3, [r7, #22]
            break;
 8013ac6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8013ac8:	7dbb      	ldrb	r3, [r7, #22]
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d119      	bne.n	8013b02 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013ad4:	b2db      	uxtb	r3, r3
 8013ad6:	2b03      	cmp	r3, #3
 8013ad8:	d113      	bne.n	8013b02 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8013ada:	7dba      	ldrb	r2, [r7, #22]
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	32ae      	adds	r2, #174	; 0xae
 8013ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ae4:	691b      	ldr	r3, [r3, #16]
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d00b      	beq.n	8013b02 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8013aea:	7dba      	ldrb	r2, [r7, #22]
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8013af2:	7dba      	ldrb	r2, [r7, #22]
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	32ae      	adds	r2, #174	; 0xae
 8013af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013afc:	691b      	ldr	r3, [r3, #16]
 8013afe:	68f8      	ldr	r0, [r7, #12]
 8013b00:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8013b02:	68f8      	ldr	r0, [r7, #12]
 8013b04:	f001 f950 	bl	8014da8 <USBD_CtlSendStatus>
 8013b08:	e032      	b.n	8013b70 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8013b0a:	7afb      	ldrb	r3, [r7, #11]
 8013b0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013b10:	b2db      	uxtb	r3, r3
 8013b12:	4619      	mov	r1, r3
 8013b14:	68f8      	ldr	r0, [r7, #12]
 8013b16:	f000 fa37 	bl	8013f88 <USBD_CoreFindEP>
 8013b1a:	4603      	mov	r3, r0
 8013b1c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013b1e:	7dbb      	ldrb	r3, [r7, #22]
 8013b20:	2bff      	cmp	r3, #255	; 0xff
 8013b22:	d025      	beq.n	8013b70 <USBD_LL_DataOutStage+0x15c>
 8013b24:	7dbb      	ldrb	r3, [r7, #22]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d122      	bne.n	8013b70 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013b30:	b2db      	uxtb	r3, r3
 8013b32:	2b03      	cmp	r3, #3
 8013b34:	d117      	bne.n	8013b66 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8013b36:	7dba      	ldrb	r2, [r7, #22]
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	32ae      	adds	r2, #174	; 0xae
 8013b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b40:	699b      	ldr	r3, [r3, #24]
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d00f      	beq.n	8013b66 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8013b46:	7dba      	ldrb	r2, [r7, #22]
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8013b4e:	7dba      	ldrb	r2, [r7, #22]
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	32ae      	adds	r2, #174	; 0xae
 8013b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b58:	699b      	ldr	r3, [r3, #24]
 8013b5a:	7afa      	ldrb	r2, [r7, #11]
 8013b5c:	4611      	mov	r1, r2
 8013b5e:	68f8      	ldr	r0, [r7, #12]
 8013b60:	4798      	blx	r3
 8013b62:	4603      	mov	r3, r0
 8013b64:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8013b66:	7dfb      	ldrb	r3, [r7, #23]
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d001      	beq.n	8013b70 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8013b6c:	7dfb      	ldrb	r3, [r7, #23]
 8013b6e:	e000      	b.n	8013b72 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8013b70:	2300      	movs	r3, #0
}
 8013b72:	4618      	mov	r0, r3
 8013b74:	3718      	adds	r7, #24
 8013b76:	46bd      	mov	sp, r7
 8013b78:	bd80      	pop	{r7, pc}

08013b7a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013b7a:	b580      	push	{r7, lr}
 8013b7c:	b086      	sub	sp, #24
 8013b7e:	af00      	add	r7, sp, #0
 8013b80:	60f8      	str	r0, [r7, #12]
 8013b82:	460b      	mov	r3, r1
 8013b84:	607a      	str	r2, [r7, #4]
 8013b86:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8013b88:	7afb      	ldrb	r3, [r7, #11]
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d16f      	bne.n	8013c6e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	3314      	adds	r3, #20
 8013b92:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013b9a:	2b02      	cmp	r3, #2
 8013b9c:	d15a      	bne.n	8013c54 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8013b9e:	693b      	ldr	r3, [r7, #16]
 8013ba0:	689a      	ldr	r2, [r3, #8]
 8013ba2:	693b      	ldr	r3, [r7, #16]
 8013ba4:	68db      	ldr	r3, [r3, #12]
 8013ba6:	429a      	cmp	r2, r3
 8013ba8:	d914      	bls.n	8013bd4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013baa:	693b      	ldr	r3, [r7, #16]
 8013bac:	689a      	ldr	r2, [r3, #8]
 8013bae:	693b      	ldr	r3, [r7, #16]
 8013bb0:	68db      	ldr	r3, [r3, #12]
 8013bb2:	1ad2      	subs	r2, r2, r3
 8013bb4:	693b      	ldr	r3, [r7, #16]
 8013bb6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013bb8:	693b      	ldr	r3, [r7, #16]
 8013bba:	689b      	ldr	r3, [r3, #8]
 8013bbc:	461a      	mov	r2, r3
 8013bbe:	6879      	ldr	r1, [r7, #4]
 8013bc0:	68f8      	ldr	r0, [r7, #12]
 8013bc2:	f001 f8b2 	bl	8014d2a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013bc6:	2300      	movs	r3, #0
 8013bc8:	2200      	movs	r2, #0
 8013bca:	2100      	movs	r1, #0
 8013bcc:	68f8      	ldr	r0, [r7, #12]
 8013bce:	f001 fe09 	bl	80157e4 <USBD_LL_PrepareReceive>
 8013bd2:	e03f      	b.n	8013c54 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013bd4:	693b      	ldr	r3, [r7, #16]
 8013bd6:	68da      	ldr	r2, [r3, #12]
 8013bd8:	693b      	ldr	r3, [r7, #16]
 8013bda:	689b      	ldr	r3, [r3, #8]
 8013bdc:	429a      	cmp	r2, r3
 8013bde:	d11c      	bne.n	8013c1a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013be0:	693b      	ldr	r3, [r7, #16]
 8013be2:	685a      	ldr	r2, [r3, #4]
 8013be4:	693b      	ldr	r3, [r7, #16]
 8013be6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013be8:	429a      	cmp	r2, r3
 8013bea:	d316      	bcc.n	8013c1a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8013bec:	693b      	ldr	r3, [r7, #16]
 8013bee:	685a      	ldr	r2, [r3, #4]
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013bf6:	429a      	cmp	r2, r3
 8013bf8:	d20f      	bcs.n	8013c1a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013bfa:	2200      	movs	r2, #0
 8013bfc:	2100      	movs	r1, #0
 8013bfe:	68f8      	ldr	r0, [r7, #12]
 8013c00:	f001 f893 	bl	8014d2a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013c04:	68fb      	ldr	r3, [r7, #12]
 8013c06:	2200      	movs	r2, #0
 8013c08:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013c0c:	2300      	movs	r3, #0
 8013c0e:	2200      	movs	r2, #0
 8013c10:	2100      	movs	r1, #0
 8013c12:	68f8      	ldr	r0, [r7, #12]
 8013c14:	f001 fde6 	bl	80157e4 <USBD_LL_PrepareReceive>
 8013c18:	e01c      	b.n	8013c54 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013c1a:	68fb      	ldr	r3, [r7, #12]
 8013c1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013c20:	b2db      	uxtb	r3, r3
 8013c22:	2b03      	cmp	r3, #3
 8013c24:	d10f      	bne.n	8013c46 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8013c26:	68fb      	ldr	r3, [r7, #12]
 8013c28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013c2c:	68db      	ldr	r3, [r3, #12]
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d009      	beq.n	8013c46 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	2200      	movs	r2, #0
 8013c36:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013c40:	68db      	ldr	r3, [r3, #12]
 8013c42:	68f8      	ldr	r0, [r7, #12]
 8013c44:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8013c46:	2180      	movs	r1, #128	; 0x80
 8013c48:	68f8      	ldr	r0, [r7, #12]
 8013c4a:	f001 fd21 	bl	8015690 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013c4e:	68f8      	ldr	r0, [r7, #12]
 8013c50:	f001 f8bd 	bl	8014dce <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8013c54:	68fb      	ldr	r3, [r7, #12]
 8013c56:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d03a      	beq.n	8013cd4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8013c5e:	68f8      	ldr	r0, [r7, #12]
 8013c60:	f7ff fe42 	bl	80138e8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013c64:	68fb      	ldr	r3, [r7, #12]
 8013c66:	2200      	movs	r2, #0
 8013c68:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8013c6c:	e032      	b.n	8013cd4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8013c6e:	7afb      	ldrb	r3, [r7, #11]
 8013c70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013c74:	b2db      	uxtb	r3, r3
 8013c76:	4619      	mov	r1, r3
 8013c78:	68f8      	ldr	r0, [r7, #12]
 8013c7a:	f000 f985 	bl	8013f88 <USBD_CoreFindEP>
 8013c7e:	4603      	mov	r3, r0
 8013c80:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013c82:	7dfb      	ldrb	r3, [r7, #23]
 8013c84:	2bff      	cmp	r3, #255	; 0xff
 8013c86:	d025      	beq.n	8013cd4 <USBD_LL_DataInStage+0x15a>
 8013c88:	7dfb      	ldrb	r3, [r7, #23]
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d122      	bne.n	8013cd4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013c94:	b2db      	uxtb	r3, r3
 8013c96:	2b03      	cmp	r3, #3
 8013c98:	d11c      	bne.n	8013cd4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8013c9a:	7dfa      	ldrb	r2, [r7, #23]
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	32ae      	adds	r2, #174	; 0xae
 8013ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ca4:	695b      	ldr	r3, [r3, #20]
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d014      	beq.n	8013cd4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8013caa:	7dfa      	ldrb	r2, [r7, #23]
 8013cac:	68fb      	ldr	r3, [r7, #12]
 8013cae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8013cb2:	7dfa      	ldrb	r2, [r7, #23]
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	32ae      	adds	r2, #174	; 0xae
 8013cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013cbc:	695b      	ldr	r3, [r3, #20]
 8013cbe:	7afa      	ldrb	r2, [r7, #11]
 8013cc0:	4611      	mov	r1, r2
 8013cc2:	68f8      	ldr	r0, [r7, #12]
 8013cc4:	4798      	blx	r3
 8013cc6:	4603      	mov	r3, r0
 8013cc8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8013cca:	7dbb      	ldrb	r3, [r7, #22]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d001      	beq.n	8013cd4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8013cd0:	7dbb      	ldrb	r3, [r7, #22]
 8013cd2:	e000      	b.n	8013cd6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8013cd4:	2300      	movs	r3, #0
}
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	3718      	adds	r7, #24
 8013cda:	46bd      	mov	sp, r7
 8013cdc:	bd80      	pop	{r7, pc}

08013cde <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013cde:	b580      	push	{r7, lr}
 8013ce0:	b084      	sub	sp, #16
 8013ce2:	af00      	add	r7, sp, #0
 8013ce4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8013ce6:	2300      	movs	r3, #0
 8013ce8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	2201      	movs	r2, #1
 8013cee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	2200      	movs	r2, #0
 8013cf6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	2200      	movs	r2, #0
 8013cfe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	2200      	movs	r2, #0
 8013d04:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	2200      	movs	r2, #0
 8013d0c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d014      	beq.n	8013d44 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d20:	685b      	ldr	r3, [r3, #4]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d00e      	beq.n	8013d44 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013d2c:	685b      	ldr	r3, [r3, #4]
 8013d2e:	687a      	ldr	r2, [r7, #4]
 8013d30:	6852      	ldr	r2, [r2, #4]
 8013d32:	b2d2      	uxtb	r2, r2
 8013d34:	4611      	mov	r1, r2
 8013d36:	6878      	ldr	r0, [r7, #4]
 8013d38:	4798      	blx	r3
 8013d3a:	4603      	mov	r3, r0
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d001      	beq.n	8013d44 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8013d40:	2303      	movs	r3, #3
 8013d42:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013d44:	2340      	movs	r3, #64	; 0x40
 8013d46:	2200      	movs	r2, #0
 8013d48:	2100      	movs	r1, #0
 8013d4a:	6878      	ldr	r0, [r7, #4]
 8013d4c:	f001 fc5b 	bl	8015606 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	2201      	movs	r2, #1
 8013d54:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	2240      	movs	r2, #64	; 0x40
 8013d5c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013d60:	2340      	movs	r3, #64	; 0x40
 8013d62:	2200      	movs	r2, #0
 8013d64:	2180      	movs	r1, #128	; 0x80
 8013d66:	6878      	ldr	r0, [r7, #4]
 8013d68:	f001 fc4d 	bl	8015606 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	2201      	movs	r2, #1
 8013d70:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	2240      	movs	r2, #64	; 0x40
 8013d76:	621a      	str	r2, [r3, #32]

  return ret;
 8013d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d7a:	4618      	mov	r0, r3
 8013d7c:	3710      	adds	r7, #16
 8013d7e:	46bd      	mov	sp, r7
 8013d80:	bd80      	pop	{r7, pc}

08013d82 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013d82:	b480      	push	{r7}
 8013d84:	b083      	sub	sp, #12
 8013d86:	af00      	add	r7, sp, #0
 8013d88:	6078      	str	r0, [r7, #4]
 8013d8a:	460b      	mov	r3, r1
 8013d8c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	78fa      	ldrb	r2, [r7, #3]
 8013d92:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013d94:	2300      	movs	r3, #0
}
 8013d96:	4618      	mov	r0, r3
 8013d98:	370c      	adds	r7, #12
 8013d9a:	46bd      	mov	sp, r7
 8013d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013da0:	4770      	bx	lr

08013da2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013da2:	b480      	push	{r7}
 8013da4:	b083      	sub	sp, #12
 8013da6:	af00      	add	r7, sp, #0
 8013da8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013db0:	b2db      	uxtb	r3, r3
 8013db2:	2b04      	cmp	r3, #4
 8013db4:	d006      	beq.n	8013dc4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013dbc:	b2da      	uxtb	r2, r3
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	2204      	movs	r2, #4
 8013dc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8013dcc:	2300      	movs	r3, #0
}
 8013dce:	4618      	mov	r0, r3
 8013dd0:	370c      	adds	r7, #12
 8013dd2:	46bd      	mov	sp, r7
 8013dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dd8:	4770      	bx	lr

08013dda <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013dda:	b480      	push	{r7}
 8013ddc:	b083      	sub	sp, #12
 8013dde:	af00      	add	r7, sp, #0
 8013de0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013de8:	b2db      	uxtb	r3, r3
 8013dea:	2b04      	cmp	r3, #4
 8013dec:	d106      	bne.n	8013dfc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8013df4:	b2da      	uxtb	r2, r3
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8013dfc:	2300      	movs	r3, #0
}
 8013dfe:	4618      	mov	r0, r3
 8013e00:	370c      	adds	r7, #12
 8013e02:	46bd      	mov	sp, r7
 8013e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e08:	4770      	bx	lr

08013e0a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8013e0a:	b580      	push	{r7, lr}
 8013e0c:	b082      	sub	sp, #8
 8013e0e:	af00      	add	r7, sp, #0
 8013e10:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013e18:	b2db      	uxtb	r3, r3
 8013e1a:	2b03      	cmp	r3, #3
 8013e1c:	d110      	bne.n	8013e40 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d00b      	beq.n	8013e40 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013e2e:	69db      	ldr	r3, [r3, #28]
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d005      	beq.n	8013e40 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013e3a:	69db      	ldr	r3, [r3, #28]
 8013e3c:	6878      	ldr	r0, [r7, #4]
 8013e3e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8013e40:	2300      	movs	r3, #0
}
 8013e42:	4618      	mov	r0, r3
 8013e44:	3708      	adds	r7, #8
 8013e46:	46bd      	mov	sp, r7
 8013e48:	bd80      	pop	{r7, pc}

08013e4a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8013e4a:	b580      	push	{r7, lr}
 8013e4c:	b082      	sub	sp, #8
 8013e4e:	af00      	add	r7, sp, #0
 8013e50:	6078      	str	r0, [r7, #4]
 8013e52:	460b      	mov	r3, r1
 8013e54:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	32ae      	adds	r2, #174	; 0xae
 8013e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d101      	bne.n	8013e6c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8013e68:	2303      	movs	r3, #3
 8013e6a:	e01c      	b.n	8013ea6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013e72:	b2db      	uxtb	r3, r3
 8013e74:	2b03      	cmp	r3, #3
 8013e76:	d115      	bne.n	8013ea4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	32ae      	adds	r2, #174	; 0xae
 8013e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e86:	6a1b      	ldr	r3, [r3, #32]
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d00b      	beq.n	8013ea4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	32ae      	adds	r2, #174	; 0xae
 8013e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e9a:	6a1b      	ldr	r3, [r3, #32]
 8013e9c:	78fa      	ldrb	r2, [r7, #3]
 8013e9e:	4611      	mov	r1, r2
 8013ea0:	6878      	ldr	r0, [r7, #4]
 8013ea2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013ea4:	2300      	movs	r3, #0
}
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	3708      	adds	r7, #8
 8013eaa:	46bd      	mov	sp, r7
 8013eac:	bd80      	pop	{r7, pc}

08013eae <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8013eae:	b580      	push	{r7, lr}
 8013eb0:	b082      	sub	sp, #8
 8013eb2:	af00      	add	r7, sp, #0
 8013eb4:	6078      	str	r0, [r7, #4]
 8013eb6:	460b      	mov	r3, r1
 8013eb8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	32ae      	adds	r2, #174	; 0xae
 8013ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d101      	bne.n	8013ed0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8013ecc:	2303      	movs	r3, #3
 8013ece:	e01c      	b.n	8013f0a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013ed6:	b2db      	uxtb	r3, r3
 8013ed8:	2b03      	cmp	r3, #3
 8013eda:	d115      	bne.n	8013f08 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	32ae      	adds	r2, #174	; 0xae
 8013ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d00b      	beq.n	8013f08 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	32ae      	adds	r2, #174	; 0xae
 8013efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f00:	78fa      	ldrb	r2, [r7, #3]
 8013f02:	4611      	mov	r1, r2
 8013f04:	6878      	ldr	r0, [r7, #4]
 8013f06:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013f08:	2300      	movs	r3, #0
}
 8013f0a:	4618      	mov	r0, r3
 8013f0c:	3708      	adds	r7, #8
 8013f0e:	46bd      	mov	sp, r7
 8013f10:	bd80      	pop	{r7, pc}

08013f12 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8013f12:	b480      	push	{r7}
 8013f14:	b083      	sub	sp, #12
 8013f16:	af00      	add	r7, sp, #0
 8013f18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013f1a:	2300      	movs	r3, #0
}
 8013f1c:	4618      	mov	r0, r3
 8013f1e:	370c      	adds	r7, #12
 8013f20:	46bd      	mov	sp, r7
 8013f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f26:	4770      	bx	lr

08013f28 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8013f28:	b580      	push	{r7, lr}
 8013f2a:	b084      	sub	sp, #16
 8013f2c:	af00      	add	r7, sp, #0
 8013f2e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8013f30:	2300      	movs	r3, #0
 8013f32:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	2201      	movs	r2, #1
 8013f38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d00e      	beq.n	8013f64 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f4c:	685b      	ldr	r3, [r3, #4]
 8013f4e:	687a      	ldr	r2, [r7, #4]
 8013f50:	6852      	ldr	r2, [r2, #4]
 8013f52:	b2d2      	uxtb	r2, r2
 8013f54:	4611      	mov	r1, r2
 8013f56:	6878      	ldr	r0, [r7, #4]
 8013f58:	4798      	blx	r3
 8013f5a:	4603      	mov	r3, r0
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d001      	beq.n	8013f64 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8013f60:	2303      	movs	r3, #3
 8013f62:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f66:	4618      	mov	r0, r3
 8013f68:	3710      	adds	r7, #16
 8013f6a:	46bd      	mov	sp, r7
 8013f6c:	bd80      	pop	{r7, pc}

08013f6e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013f6e:	b480      	push	{r7}
 8013f70:	b083      	sub	sp, #12
 8013f72:	af00      	add	r7, sp, #0
 8013f74:	6078      	str	r0, [r7, #4]
 8013f76:	460b      	mov	r3, r1
 8013f78:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013f7a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013f7c:	4618      	mov	r0, r3
 8013f7e:	370c      	adds	r7, #12
 8013f80:	46bd      	mov	sp, r7
 8013f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f86:	4770      	bx	lr

08013f88 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8013f88:	b480      	push	{r7}
 8013f8a:	b083      	sub	sp, #12
 8013f8c:	af00      	add	r7, sp, #0
 8013f8e:	6078      	str	r0, [r7, #4]
 8013f90:	460b      	mov	r3, r1
 8013f92:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8013f94:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8013f96:	4618      	mov	r0, r3
 8013f98:	370c      	adds	r7, #12
 8013f9a:	46bd      	mov	sp, r7
 8013f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fa0:	4770      	bx	lr

08013fa2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8013fa2:	b580      	push	{r7, lr}
 8013fa4:	b086      	sub	sp, #24
 8013fa6:	af00      	add	r7, sp, #0
 8013fa8:	6078      	str	r0, [r7, #4]
 8013faa:	460b      	mov	r3, r1
 8013fac:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8013fb6:	2300      	movs	r3, #0
 8013fb8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	885b      	ldrh	r3, [r3, #2]
 8013fbe:	b29a      	uxth	r2, r3
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	781b      	ldrb	r3, [r3, #0]
 8013fc4:	b29b      	uxth	r3, r3
 8013fc6:	429a      	cmp	r2, r3
 8013fc8:	d920      	bls.n	801400c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	781b      	ldrb	r3, [r3, #0]
 8013fce:	b29b      	uxth	r3, r3
 8013fd0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8013fd2:	e013      	b.n	8013ffc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8013fd4:	f107 030a 	add.w	r3, r7, #10
 8013fd8:	4619      	mov	r1, r3
 8013fda:	6978      	ldr	r0, [r7, #20]
 8013fdc:	f000 f81b 	bl	8014016 <USBD_GetNextDesc>
 8013fe0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8013fe2:	697b      	ldr	r3, [r7, #20]
 8013fe4:	785b      	ldrb	r3, [r3, #1]
 8013fe6:	2b05      	cmp	r3, #5
 8013fe8:	d108      	bne.n	8013ffc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8013fea:	697b      	ldr	r3, [r7, #20]
 8013fec:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8013fee:	693b      	ldr	r3, [r7, #16]
 8013ff0:	789b      	ldrb	r3, [r3, #2]
 8013ff2:	78fa      	ldrb	r2, [r7, #3]
 8013ff4:	429a      	cmp	r2, r3
 8013ff6:	d008      	beq.n	801400a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8013ff8:	2300      	movs	r3, #0
 8013ffa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	885b      	ldrh	r3, [r3, #2]
 8014000:	b29a      	uxth	r2, r3
 8014002:	897b      	ldrh	r3, [r7, #10]
 8014004:	429a      	cmp	r2, r3
 8014006:	d8e5      	bhi.n	8013fd4 <USBD_GetEpDesc+0x32>
 8014008:	e000      	b.n	801400c <USBD_GetEpDesc+0x6a>
          break;
 801400a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 801400c:	693b      	ldr	r3, [r7, #16]
}
 801400e:	4618      	mov	r0, r3
 8014010:	3718      	adds	r7, #24
 8014012:	46bd      	mov	sp, r7
 8014014:	bd80      	pop	{r7, pc}

08014016 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8014016:	b480      	push	{r7}
 8014018:	b085      	sub	sp, #20
 801401a:	af00      	add	r7, sp, #0
 801401c:	6078      	str	r0, [r7, #4]
 801401e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8014024:	683b      	ldr	r3, [r7, #0]
 8014026:	881a      	ldrh	r2, [r3, #0]
 8014028:	68fb      	ldr	r3, [r7, #12]
 801402a:	781b      	ldrb	r3, [r3, #0]
 801402c:	b29b      	uxth	r3, r3
 801402e:	4413      	add	r3, r2
 8014030:	b29a      	uxth	r2, r3
 8014032:	683b      	ldr	r3, [r7, #0]
 8014034:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8014036:	68fb      	ldr	r3, [r7, #12]
 8014038:	781b      	ldrb	r3, [r3, #0]
 801403a:	461a      	mov	r2, r3
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	4413      	add	r3, r2
 8014040:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8014042:	68fb      	ldr	r3, [r7, #12]
}
 8014044:	4618      	mov	r0, r3
 8014046:	3714      	adds	r7, #20
 8014048:	46bd      	mov	sp, r7
 801404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801404e:	4770      	bx	lr

08014050 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8014050:	b480      	push	{r7}
 8014052:	b087      	sub	sp, #28
 8014054:	af00      	add	r7, sp, #0
 8014056:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801405c:	697b      	ldr	r3, [r7, #20]
 801405e:	781b      	ldrb	r3, [r3, #0]
 8014060:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8014062:	697b      	ldr	r3, [r7, #20]
 8014064:	3301      	adds	r3, #1
 8014066:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8014068:	697b      	ldr	r3, [r7, #20]
 801406a:	781b      	ldrb	r3, [r3, #0]
 801406c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801406e:	8a3b      	ldrh	r3, [r7, #16]
 8014070:	021b      	lsls	r3, r3, #8
 8014072:	b21a      	sxth	r2, r3
 8014074:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014078:	4313      	orrs	r3, r2
 801407a:	b21b      	sxth	r3, r3
 801407c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801407e:	89fb      	ldrh	r3, [r7, #14]
}
 8014080:	4618      	mov	r0, r3
 8014082:	371c      	adds	r7, #28
 8014084:	46bd      	mov	sp, r7
 8014086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801408a:	4770      	bx	lr

0801408c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801408c:	b580      	push	{r7, lr}
 801408e:	b084      	sub	sp, #16
 8014090:	af00      	add	r7, sp, #0
 8014092:	6078      	str	r0, [r7, #4]
 8014094:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014096:	2300      	movs	r3, #0
 8014098:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801409a:	683b      	ldr	r3, [r7, #0]
 801409c:	781b      	ldrb	r3, [r3, #0]
 801409e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80140a2:	2b40      	cmp	r3, #64	; 0x40
 80140a4:	d005      	beq.n	80140b2 <USBD_StdDevReq+0x26>
 80140a6:	2b40      	cmp	r3, #64	; 0x40
 80140a8:	d857      	bhi.n	801415a <USBD_StdDevReq+0xce>
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d00f      	beq.n	80140ce <USBD_StdDevReq+0x42>
 80140ae:	2b20      	cmp	r3, #32
 80140b0:	d153      	bne.n	801415a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	32ae      	adds	r2, #174	; 0xae
 80140bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80140c0:	689b      	ldr	r3, [r3, #8]
 80140c2:	6839      	ldr	r1, [r7, #0]
 80140c4:	6878      	ldr	r0, [r7, #4]
 80140c6:	4798      	blx	r3
 80140c8:	4603      	mov	r3, r0
 80140ca:	73fb      	strb	r3, [r7, #15]
      break;
 80140cc:	e04a      	b.n	8014164 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80140ce:	683b      	ldr	r3, [r7, #0]
 80140d0:	785b      	ldrb	r3, [r3, #1]
 80140d2:	2b09      	cmp	r3, #9
 80140d4:	d83b      	bhi.n	801414e <USBD_StdDevReq+0xc2>
 80140d6:	a201      	add	r2, pc, #4	; (adr r2, 80140dc <USBD_StdDevReq+0x50>)
 80140d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80140dc:	08014131 	.word	0x08014131
 80140e0:	08014145 	.word	0x08014145
 80140e4:	0801414f 	.word	0x0801414f
 80140e8:	0801413b 	.word	0x0801413b
 80140ec:	0801414f 	.word	0x0801414f
 80140f0:	0801410f 	.word	0x0801410f
 80140f4:	08014105 	.word	0x08014105
 80140f8:	0801414f 	.word	0x0801414f
 80140fc:	08014127 	.word	0x08014127
 8014100:	08014119 	.word	0x08014119
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8014104:	6839      	ldr	r1, [r7, #0]
 8014106:	6878      	ldr	r0, [r7, #4]
 8014108:	f000 fa3c 	bl	8014584 <USBD_GetDescriptor>
          break;
 801410c:	e024      	b.n	8014158 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801410e:	6839      	ldr	r1, [r7, #0]
 8014110:	6878      	ldr	r0, [r7, #4]
 8014112:	f000 fba1 	bl	8014858 <USBD_SetAddress>
          break;
 8014116:	e01f      	b.n	8014158 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8014118:	6839      	ldr	r1, [r7, #0]
 801411a:	6878      	ldr	r0, [r7, #4]
 801411c:	f000 fbe0 	bl	80148e0 <USBD_SetConfig>
 8014120:	4603      	mov	r3, r0
 8014122:	73fb      	strb	r3, [r7, #15]
          break;
 8014124:	e018      	b.n	8014158 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8014126:	6839      	ldr	r1, [r7, #0]
 8014128:	6878      	ldr	r0, [r7, #4]
 801412a:	f000 fc83 	bl	8014a34 <USBD_GetConfig>
          break;
 801412e:	e013      	b.n	8014158 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8014130:	6839      	ldr	r1, [r7, #0]
 8014132:	6878      	ldr	r0, [r7, #4]
 8014134:	f000 fcb4 	bl	8014aa0 <USBD_GetStatus>
          break;
 8014138:	e00e      	b.n	8014158 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801413a:	6839      	ldr	r1, [r7, #0]
 801413c:	6878      	ldr	r0, [r7, #4]
 801413e:	f000 fce3 	bl	8014b08 <USBD_SetFeature>
          break;
 8014142:	e009      	b.n	8014158 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014144:	6839      	ldr	r1, [r7, #0]
 8014146:	6878      	ldr	r0, [r7, #4]
 8014148:	f000 fd07 	bl	8014b5a <USBD_ClrFeature>
          break;
 801414c:	e004      	b.n	8014158 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801414e:	6839      	ldr	r1, [r7, #0]
 8014150:	6878      	ldr	r0, [r7, #4]
 8014152:	f000 fd5e 	bl	8014c12 <USBD_CtlError>
          break;
 8014156:	bf00      	nop
      }
      break;
 8014158:	e004      	b.n	8014164 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801415a:	6839      	ldr	r1, [r7, #0]
 801415c:	6878      	ldr	r0, [r7, #4]
 801415e:	f000 fd58 	bl	8014c12 <USBD_CtlError>
      break;
 8014162:	bf00      	nop
  }

  return ret;
 8014164:	7bfb      	ldrb	r3, [r7, #15]
}
 8014166:	4618      	mov	r0, r3
 8014168:	3710      	adds	r7, #16
 801416a:	46bd      	mov	sp, r7
 801416c:	bd80      	pop	{r7, pc}
 801416e:	bf00      	nop

08014170 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014170:	b580      	push	{r7, lr}
 8014172:	b084      	sub	sp, #16
 8014174:	af00      	add	r7, sp, #0
 8014176:	6078      	str	r0, [r7, #4]
 8014178:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801417a:	2300      	movs	r3, #0
 801417c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801417e:	683b      	ldr	r3, [r7, #0]
 8014180:	781b      	ldrb	r3, [r3, #0]
 8014182:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014186:	2b40      	cmp	r3, #64	; 0x40
 8014188:	d005      	beq.n	8014196 <USBD_StdItfReq+0x26>
 801418a:	2b40      	cmp	r3, #64	; 0x40
 801418c:	d852      	bhi.n	8014234 <USBD_StdItfReq+0xc4>
 801418e:	2b00      	cmp	r3, #0
 8014190:	d001      	beq.n	8014196 <USBD_StdItfReq+0x26>
 8014192:	2b20      	cmp	r3, #32
 8014194:	d14e      	bne.n	8014234 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801419c:	b2db      	uxtb	r3, r3
 801419e:	3b01      	subs	r3, #1
 80141a0:	2b02      	cmp	r3, #2
 80141a2:	d840      	bhi.n	8014226 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80141a4:	683b      	ldr	r3, [r7, #0]
 80141a6:	889b      	ldrh	r3, [r3, #4]
 80141a8:	b2db      	uxtb	r3, r3
 80141aa:	2b01      	cmp	r3, #1
 80141ac:	d836      	bhi.n	801421c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80141ae:	683b      	ldr	r3, [r7, #0]
 80141b0:	889b      	ldrh	r3, [r3, #4]
 80141b2:	b2db      	uxtb	r3, r3
 80141b4:	4619      	mov	r1, r3
 80141b6:	6878      	ldr	r0, [r7, #4]
 80141b8:	f7ff fed9 	bl	8013f6e <USBD_CoreFindIF>
 80141bc:	4603      	mov	r3, r0
 80141be:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80141c0:	7bbb      	ldrb	r3, [r7, #14]
 80141c2:	2bff      	cmp	r3, #255	; 0xff
 80141c4:	d01d      	beq.n	8014202 <USBD_StdItfReq+0x92>
 80141c6:	7bbb      	ldrb	r3, [r7, #14]
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d11a      	bne.n	8014202 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80141cc:	7bba      	ldrb	r2, [r7, #14]
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	32ae      	adds	r2, #174	; 0xae
 80141d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141d6:	689b      	ldr	r3, [r3, #8]
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d00f      	beq.n	80141fc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80141dc:	7bba      	ldrb	r2, [r7, #14]
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80141e4:	7bba      	ldrb	r2, [r7, #14]
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	32ae      	adds	r2, #174	; 0xae
 80141ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141ee:	689b      	ldr	r3, [r3, #8]
 80141f0:	6839      	ldr	r1, [r7, #0]
 80141f2:	6878      	ldr	r0, [r7, #4]
 80141f4:	4798      	blx	r3
 80141f6:	4603      	mov	r3, r0
 80141f8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80141fa:	e004      	b.n	8014206 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80141fc:	2303      	movs	r3, #3
 80141fe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8014200:	e001      	b.n	8014206 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8014202:	2303      	movs	r3, #3
 8014204:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8014206:	683b      	ldr	r3, [r7, #0]
 8014208:	88db      	ldrh	r3, [r3, #6]
 801420a:	2b00      	cmp	r3, #0
 801420c:	d110      	bne.n	8014230 <USBD_StdItfReq+0xc0>
 801420e:	7bfb      	ldrb	r3, [r7, #15]
 8014210:	2b00      	cmp	r3, #0
 8014212:	d10d      	bne.n	8014230 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8014214:	6878      	ldr	r0, [r7, #4]
 8014216:	f000 fdc7 	bl	8014da8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801421a:	e009      	b.n	8014230 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 801421c:	6839      	ldr	r1, [r7, #0]
 801421e:	6878      	ldr	r0, [r7, #4]
 8014220:	f000 fcf7 	bl	8014c12 <USBD_CtlError>
          break;
 8014224:	e004      	b.n	8014230 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8014226:	6839      	ldr	r1, [r7, #0]
 8014228:	6878      	ldr	r0, [r7, #4]
 801422a:	f000 fcf2 	bl	8014c12 <USBD_CtlError>
          break;
 801422e:	e000      	b.n	8014232 <USBD_StdItfReq+0xc2>
          break;
 8014230:	bf00      	nop
      }
      break;
 8014232:	e004      	b.n	801423e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8014234:	6839      	ldr	r1, [r7, #0]
 8014236:	6878      	ldr	r0, [r7, #4]
 8014238:	f000 fceb 	bl	8014c12 <USBD_CtlError>
      break;
 801423c:	bf00      	nop
  }

  return ret;
 801423e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014240:	4618      	mov	r0, r3
 8014242:	3710      	adds	r7, #16
 8014244:	46bd      	mov	sp, r7
 8014246:	bd80      	pop	{r7, pc}

08014248 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014248:	b580      	push	{r7, lr}
 801424a:	b084      	sub	sp, #16
 801424c:	af00      	add	r7, sp, #0
 801424e:	6078      	str	r0, [r7, #4]
 8014250:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8014252:	2300      	movs	r3, #0
 8014254:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8014256:	683b      	ldr	r3, [r7, #0]
 8014258:	889b      	ldrh	r3, [r3, #4]
 801425a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801425c:	683b      	ldr	r3, [r7, #0]
 801425e:	781b      	ldrb	r3, [r3, #0]
 8014260:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014264:	2b40      	cmp	r3, #64	; 0x40
 8014266:	d007      	beq.n	8014278 <USBD_StdEPReq+0x30>
 8014268:	2b40      	cmp	r3, #64	; 0x40
 801426a:	f200 817f 	bhi.w	801456c <USBD_StdEPReq+0x324>
 801426e:	2b00      	cmp	r3, #0
 8014270:	d02a      	beq.n	80142c8 <USBD_StdEPReq+0x80>
 8014272:	2b20      	cmp	r3, #32
 8014274:	f040 817a 	bne.w	801456c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8014278:	7bbb      	ldrb	r3, [r7, #14]
 801427a:	4619      	mov	r1, r3
 801427c:	6878      	ldr	r0, [r7, #4]
 801427e:	f7ff fe83 	bl	8013f88 <USBD_CoreFindEP>
 8014282:	4603      	mov	r3, r0
 8014284:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014286:	7b7b      	ldrb	r3, [r7, #13]
 8014288:	2bff      	cmp	r3, #255	; 0xff
 801428a:	f000 8174 	beq.w	8014576 <USBD_StdEPReq+0x32e>
 801428e:	7b7b      	ldrb	r3, [r7, #13]
 8014290:	2b00      	cmp	r3, #0
 8014292:	f040 8170 	bne.w	8014576 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8014296:	7b7a      	ldrb	r2, [r7, #13]
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801429e:	7b7a      	ldrb	r2, [r7, #13]
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	32ae      	adds	r2, #174	; 0xae
 80142a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142a8:	689b      	ldr	r3, [r3, #8]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	f000 8163 	beq.w	8014576 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80142b0:	7b7a      	ldrb	r2, [r7, #13]
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	32ae      	adds	r2, #174	; 0xae
 80142b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142ba:	689b      	ldr	r3, [r3, #8]
 80142bc:	6839      	ldr	r1, [r7, #0]
 80142be:	6878      	ldr	r0, [r7, #4]
 80142c0:	4798      	blx	r3
 80142c2:	4603      	mov	r3, r0
 80142c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80142c6:	e156      	b.n	8014576 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80142c8:	683b      	ldr	r3, [r7, #0]
 80142ca:	785b      	ldrb	r3, [r3, #1]
 80142cc:	2b03      	cmp	r3, #3
 80142ce:	d008      	beq.n	80142e2 <USBD_StdEPReq+0x9a>
 80142d0:	2b03      	cmp	r3, #3
 80142d2:	f300 8145 	bgt.w	8014560 <USBD_StdEPReq+0x318>
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	f000 809b 	beq.w	8014412 <USBD_StdEPReq+0x1ca>
 80142dc:	2b01      	cmp	r3, #1
 80142de:	d03c      	beq.n	801435a <USBD_StdEPReq+0x112>
 80142e0:	e13e      	b.n	8014560 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80142e8:	b2db      	uxtb	r3, r3
 80142ea:	2b02      	cmp	r3, #2
 80142ec:	d002      	beq.n	80142f4 <USBD_StdEPReq+0xac>
 80142ee:	2b03      	cmp	r3, #3
 80142f0:	d016      	beq.n	8014320 <USBD_StdEPReq+0xd8>
 80142f2:	e02c      	b.n	801434e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80142f4:	7bbb      	ldrb	r3, [r7, #14]
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d00d      	beq.n	8014316 <USBD_StdEPReq+0xce>
 80142fa:	7bbb      	ldrb	r3, [r7, #14]
 80142fc:	2b80      	cmp	r3, #128	; 0x80
 80142fe:	d00a      	beq.n	8014316 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014300:	7bbb      	ldrb	r3, [r7, #14]
 8014302:	4619      	mov	r1, r3
 8014304:	6878      	ldr	r0, [r7, #4]
 8014306:	f001 f9c3 	bl	8015690 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801430a:	2180      	movs	r1, #128	; 0x80
 801430c:	6878      	ldr	r0, [r7, #4]
 801430e:	f001 f9bf 	bl	8015690 <USBD_LL_StallEP>
 8014312:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014314:	e020      	b.n	8014358 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8014316:	6839      	ldr	r1, [r7, #0]
 8014318:	6878      	ldr	r0, [r7, #4]
 801431a:	f000 fc7a 	bl	8014c12 <USBD_CtlError>
              break;
 801431e:	e01b      	b.n	8014358 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014320:	683b      	ldr	r3, [r7, #0]
 8014322:	885b      	ldrh	r3, [r3, #2]
 8014324:	2b00      	cmp	r3, #0
 8014326:	d10e      	bne.n	8014346 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014328:	7bbb      	ldrb	r3, [r7, #14]
 801432a:	2b00      	cmp	r3, #0
 801432c:	d00b      	beq.n	8014346 <USBD_StdEPReq+0xfe>
 801432e:	7bbb      	ldrb	r3, [r7, #14]
 8014330:	2b80      	cmp	r3, #128	; 0x80
 8014332:	d008      	beq.n	8014346 <USBD_StdEPReq+0xfe>
 8014334:	683b      	ldr	r3, [r7, #0]
 8014336:	88db      	ldrh	r3, [r3, #6]
 8014338:	2b00      	cmp	r3, #0
 801433a:	d104      	bne.n	8014346 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801433c:	7bbb      	ldrb	r3, [r7, #14]
 801433e:	4619      	mov	r1, r3
 8014340:	6878      	ldr	r0, [r7, #4]
 8014342:	f001 f9a5 	bl	8015690 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8014346:	6878      	ldr	r0, [r7, #4]
 8014348:	f000 fd2e 	bl	8014da8 <USBD_CtlSendStatus>

              break;
 801434c:	e004      	b.n	8014358 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801434e:	6839      	ldr	r1, [r7, #0]
 8014350:	6878      	ldr	r0, [r7, #4]
 8014352:	f000 fc5e 	bl	8014c12 <USBD_CtlError>
              break;
 8014356:	bf00      	nop
          }
          break;
 8014358:	e107      	b.n	801456a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014360:	b2db      	uxtb	r3, r3
 8014362:	2b02      	cmp	r3, #2
 8014364:	d002      	beq.n	801436c <USBD_StdEPReq+0x124>
 8014366:	2b03      	cmp	r3, #3
 8014368:	d016      	beq.n	8014398 <USBD_StdEPReq+0x150>
 801436a:	e04b      	b.n	8014404 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801436c:	7bbb      	ldrb	r3, [r7, #14]
 801436e:	2b00      	cmp	r3, #0
 8014370:	d00d      	beq.n	801438e <USBD_StdEPReq+0x146>
 8014372:	7bbb      	ldrb	r3, [r7, #14]
 8014374:	2b80      	cmp	r3, #128	; 0x80
 8014376:	d00a      	beq.n	801438e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014378:	7bbb      	ldrb	r3, [r7, #14]
 801437a:	4619      	mov	r1, r3
 801437c:	6878      	ldr	r0, [r7, #4]
 801437e:	f001 f987 	bl	8015690 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014382:	2180      	movs	r1, #128	; 0x80
 8014384:	6878      	ldr	r0, [r7, #4]
 8014386:	f001 f983 	bl	8015690 <USBD_LL_StallEP>
 801438a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801438c:	e040      	b.n	8014410 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801438e:	6839      	ldr	r1, [r7, #0]
 8014390:	6878      	ldr	r0, [r7, #4]
 8014392:	f000 fc3e 	bl	8014c12 <USBD_CtlError>
              break;
 8014396:	e03b      	b.n	8014410 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014398:	683b      	ldr	r3, [r7, #0]
 801439a:	885b      	ldrh	r3, [r3, #2]
 801439c:	2b00      	cmp	r3, #0
 801439e:	d136      	bne.n	801440e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80143a0:	7bbb      	ldrb	r3, [r7, #14]
 80143a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d004      	beq.n	80143b4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80143aa:	7bbb      	ldrb	r3, [r7, #14]
 80143ac:	4619      	mov	r1, r3
 80143ae:	6878      	ldr	r0, [r7, #4]
 80143b0:	f001 f98d 	bl	80156ce <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80143b4:	6878      	ldr	r0, [r7, #4]
 80143b6:	f000 fcf7 	bl	8014da8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80143ba:	7bbb      	ldrb	r3, [r7, #14]
 80143bc:	4619      	mov	r1, r3
 80143be:	6878      	ldr	r0, [r7, #4]
 80143c0:	f7ff fde2 	bl	8013f88 <USBD_CoreFindEP>
 80143c4:	4603      	mov	r3, r0
 80143c6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80143c8:	7b7b      	ldrb	r3, [r7, #13]
 80143ca:	2bff      	cmp	r3, #255	; 0xff
 80143cc:	d01f      	beq.n	801440e <USBD_StdEPReq+0x1c6>
 80143ce:	7b7b      	ldrb	r3, [r7, #13]
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d11c      	bne.n	801440e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80143d4:	7b7a      	ldrb	r2, [r7, #13]
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80143dc:	7b7a      	ldrb	r2, [r7, #13]
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	32ae      	adds	r2, #174	; 0xae
 80143e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80143e6:	689b      	ldr	r3, [r3, #8]
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d010      	beq.n	801440e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80143ec:	7b7a      	ldrb	r2, [r7, #13]
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	32ae      	adds	r2, #174	; 0xae
 80143f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80143f6:	689b      	ldr	r3, [r3, #8]
 80143f8:	6839      	ldr	r1, [r7, #0]
 80143fa:	6878      	ldr	r0, [r7, #4]
 80143fc:	4798      	blx	r3
 80143fe:	4603      	mov	r3, r0
 8014400:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8014402:	e004      	b.n	801440e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8014404:	6839      	ldr	r1, [r7, #0]
 8014406:	6878      	ldr	r0, [r7, #4]
 8014408:	f000 fc03 	bl	8014c12 <USBD_CtlError>
              break;
 801440c:	e000      	b.n	8014410 <USBD_StdEPReq+0x1c8>
              break;
 801440e:	bf00      	nop
          }
          break;
 8014410:	e0ab      	b.n	801456a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014418:	b2db      	uxtb	r3, r3
 801441a:	2b02      	cmp	r3, #2
 801441c:	d002      	beq.n	8014424 <USBD_StdEPReq+0x1dc>
 801441e:	2b03      	cmp	r3, #3
 8014420:	d032      	beq.n	8014488 <USBD_StdEPReq+0x240>
 8014422:	e097      	b.n	8014554 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014424:	7bbb      	ldrb	r3, [r7, #14]
 8014426:	2b00      	cmp	r3, #0
 8014428:	d007      	beq.n	801443a <USBD_StdEPReq+0x1f2>
 801442a:	7bbb      	ldrb	r3, [r7, #14]
 801442c:	2b80      	cmp	r3, #128	; 0x80
 801442e:	d004      	beq.n	801443a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8014430:	6839      	ldr	r1, [r7, #0]
 8014432:	6878      	ldr	r0, [r7, #4]
 8014434:	f000 fbed 	bl	8014c12 <USBD_CtlError>
                break;
 8014438:	e091      	b.n	801455e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801443a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801443e:	2b00      	cmp	r3, #0
 8014440:	da0b      	bge.n	801445a <USBD_StdEPReq+0x212>
 8014442:	7bbb      	ldrb	r3, [r7, #14]
 8014444:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014448:	4613      	mov	r3, r2
 801444a:	009b      	lsls	r3, r3, #2
 801444c:	4413      	add	r3, r2
 801444e:	009b      	lsls	r3, r3, #2
 8014450:	3310      	adds	r3, #16
 8014452:	687a      	ldr	r2, [r7, #4]
 8014454:	4413      	add	r3, r2
 8014456:	3304      	adds	r3, #4
 8014458:	e00b      	b.n	8014472 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801445a:	7bbb      	ldrb	r3, [r7, #14]
 801445c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014460:	4613      	mov	r3, r2
 8014462:	009b      	lsls	r3, r3, #2
 8014464:	4413      	add	r3, r2
 8014466:	009b      	lsls	r3, r3, #2
 8014468:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801446c:	687a      	ldr	r2, [r7, #4]
 801446e:	4413      	add	r3, r2
 8014470:	3304      	adds	r3, #4
 8014472:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014474:	68bb      	ldr	r3, [r7, #8]
 8014476:	2200      	movs	r2, #0
 8014478:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801447a:	68bb      	ldr	r3, [r7, #8]
 801447c:	2202      	movs	r2, #2
 801447e:	4619      	mov	r1, r3
 8014480:	6878      	ldr	r0, [r7, #4]
 8014482:	f000 fc37 	bl	8014cf4 <USBD_CtlSendData>
              break;
 8014486:	e06a      	b.n	801455e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8014488:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801448c:	2b00      	cmp	r3, #0
 801448e:	da11      	bge.n	80144b4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014490:	7bbb      	ldrb	r3, [r7, #14]
 8014492:	f003 020f 	and.w	r2, r3, #15
 8014496:	6879      	ldr	r1, [r7, #4]
 8014498:	4613      	mov	r3, r2
 801449a:	009b      	lsls	r3, r3, #2
 801449c:	4413      	add	r3, r2
 801449e:	009b      	lsls	r3, r3, #2
 80144a0:	440b      	add	r3, r1
 80144a2:	3324      	adds	r3, #36	; 0x24
 80144a4:	881b      	ldrh	r3, [r3, #0]
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d117      	bne.n	80144da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80144aa:	6839      	ldr	r1, [r7, #0]
 80144ac:	6878      	ldr	r0, [r7, #4]
 80144ae:	f000 fbb0 	bl	8014c12 <USBD_CtlError>
                  break;
 80144b2:	e054      	b.n	801455e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80144b4:	7bbb      	ldrb	r3, [r7, #14]
 80144b6:	f003 020f 	and.w	r2, r3, #15
 80144ba:	6879      	ldr	r1, [r7, #4]
 80144bc:	4613      	mov	r3, r2
 80144be:	009b      	lsls	r3, r3, #2
 80144c0:	4413      	add	r3, r2
 80144c2:	009b      	lsls	r3, r3, #2
 80144c4:	440b      	add	r3, r1
 80144c6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80144ca:	881b      	ldrh	r3, [r3, #0]
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d104      	bne.n	80144da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80144d0:	6839      	ldr	r1, [r7, #0]
 80144d2:	6878      	ldr	r0, [r7, #4]
 80144d4:	f000 fb9d 	bl	8014c12 <USBD_CtlError>
                  break;
 80144d8:	e041      	b.n	801455e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80144da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80144de:	2b00      	cmp	r3, #0
 80144e0:	da0b      	bge.n	80144fa <USBD_StdEPReq+0x2b2>
 80144e2:	7bbb      	ldrb	r3, [r7, #14]
 80144e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80144e8:	4613      	mov	r3, r2
 80144ea:	009b      	lsls	r3, r3, #2
 80144ec:	4413      	add	r3, r2
 80144ee:	009b      	lsls	r3, r3, #2
 80144f0:	3310      	adds	r3, #16
 80144f2:	687a      	ldr	r2, [r7, #4]
 80144f4:	4413      	add	r3, r2
 80144f6:	3304      	adds	r3, #4
 80144f8:	e00b      	b.n	8014512 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80144fa:	7bbb      	ldrb	r3, [r7, #14]
 80144fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014500:	4613      	mov	r3, r2
 8014502:	009b      	lsls	r3, r3, #2
 8014504:	4413      	add	r3, r2
 8014506:	009b      	lsls	r3, r3, #2
 8014508:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801450c:	687a      	ldr	r2, [r7, #4]
 801450e:	4413      	add	r3, r2
 8014510:	3304      	adds	r3, #4
 8014512:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014514:	7bbb      	ldrb	r3, [r7, #14]
 8014516:	2b00      	cmp	r3, #0
 8014518:	d002      	beq.n	8014520 <USBD_StdEPReq+0x2d8>
 801451a:	7bbb      	ldrb	r3, [r7, #14]
 801451c:	2b80      	cmp	r3, #128	; 0x80
 801451e:	d103      	bne.n	8014528 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8014520:	68bb      	ldr	r3, [r7, #8]
 8014522:	2200      	movs	r2, #0
 8014524:	601a      	str	r2, [r3, #0]
 8014526:	e00e      	b.n	8014546 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014528:	7bbb      	ldrb	r3, [r7, #14]
 801452a:	4619      	mov	r1, r3
 801452c:	6878      	ldr	r0, [r7, #4]
 801452e:	f001 f8ed 	bl	801570c <USBD_LL_IsStallEP>
 8014532:	4603      	mov	r3, r0
 8014534:	2b00      	cmp	r3, #0
 8014536:	d003      	beq.n	8014540 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8014538:	68bb      	ldr	r3, [r7, #8]
 801453a:	2201      	movs	r2, #1
 801453c:	601a      	str	r2, [r3, #0]
 801453e:	e002      	b.n	8014546 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8014540:	68bb      	ldr	r3, [r7, #8]
 8014542:	2200      	movs	r2, #0
 8014544:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014546:	68bb      	ldr	r3, [r7, #8]
 8014548:	2202      	movs	r2, #2
 801454a:	4619      	mov	r1, r3
 801454c:	6878      	ldr	r0, [r7, #4]
 801454e:	f000 fbd1 	bl	8014cf4 <USBD_CtlSendData>
              break;
 8014552:	e004      	b.n	801455e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8014554:	6839      	ldr	r1, [r7, #0]
 8014556:	6878      	ldr	r0, [r7, #4]
 8014558:	f000 fb5b 	bl	8014c12 <USBD_CtlError>
              break;
 801455c:	bf00      	nop
          }
          break;
 801455e:	e004      	b.n	801456a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8014560:	6839      	ldr	r1, [r7, #0]
 8014562:	6878      	ldr	r0, [r7, #4]
 8014564:	f000 fb55 	bl	8014c12 <USBD_CtlError>
          break;
 8014568:	bf00      	nop
      }
      break;
 801456a:	e005      	b.n	8014578 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 801456c:	6839      	ldr	r1, [r7, #0]
 801456e:	6878      	ldr	r0, [r7, #4]
 8014570:	f000 fb4f 	bl	8014c12 <USBD_CtlError>
      break;
 8014574:	e000      	b.n	8014578 <USBD_StdEPReq+0x330>
      break;
 8014576:	bf00      	nop
  }

  return ret;
 8014578:	7bfb      	ldrb	r3, [r7, #15]
}
 801457a:	4618      	mov	r0, r3
 801457c:	3710      	adds	r7, #16
 801457e:	46bd      	mov	sp, r7
 8014580:	bd80      	pop	{r7, pc}
	...

08014584 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014584:	b580      	push	{r7, lr}
 8014586:	b084      	sub	sp, #16
 8014588:	af00      	add	r7, sp, #0
 801458a:	6078      	str	r0, [r7, #4]
 801458c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801458e:	2300      	movs	r3, #0
 8014590:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8014592:	2300      	movs	r3, #0
 8014594:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014596:	2300      	movs	r3, #0
 8014598:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801459a:	683b      	ldr	r3, [r7, #0]
 801459c:	885b      	ldrh	r3, [r3, #2]
 801459e:	0a1b      	lsrs	r3, r3, #8
 80145a0:	b29b      	uxth	r3, r3
 80145a2:	3b01      	subs	r3, #1
 80145a4:	2b06      	cmp	r3, #6
 80145a6:	f200 8128 	bhi.w	80147fa <USBD_GetDescriptor+0x276>
 80145aa:	a201      	add	r2, pc, #4	; (adr r2, 80145b0 <USBD_GetDescriptor+0x2c>)
 80145ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145b0:	080145cd 	.word	0x080145cd
 80145b4:	080145e5 	.word	0x080145e5
 80145b8:	08014625 	.word	0x08014625
 80145bc:	080147fb 	.word	0x080147fb
 80145c0:	080147fb 	.word	0x080147fb
 80145c4:	0801479b 	.word	0x0801479b
 80145c8:	080147c7 	.word	0x080147c7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	687a      	ldr	r2, [r7, #4]
 80145d6:	7c12      	ldrb	r2, [r2, #16]
 80145d8:	f107 0108 	add.w	r1, r7, #8
 80145dc:	4610      	mov	r0, r2
 80145de:	4798      	blx	r3
 80145e0:	60f8      	str	r0, [r7, #12]
      break;
 80145e2:	e112      	b.n	801480a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	7c1b      	ldrb	r3, [r3, #16]
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d10d      	bne.n	8014608 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80145f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145f4:	f107 0208 	add.w	r2, r7, #8
 80145f8:	4610      	mov	r0, r2
 80145fa:	4798      	blx	r3
 80145fc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80145fe:	68fb      	ldr	r3, [r7, #12]
 8014600:	3301      	adds	r3, #1
 8014602:	2202      	movs	r2, #2
 8014604:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8014606:	e100      	b.n	801480a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801460e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014610:	f107 0208 	add.w	r2, r7, #8
 8014614:	4610      	mov	r0, r2
 8014616:	4798      	blx	r3
 8014618:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801461a:	68fb      	ldr	r3, [r7, #12]
 801461c:	3301      	adds	r3, #1
 801461e:	2202      	movs	r2, #2
 8014620:	701a      	strb	r2, [r3, #0]
      break;
 8014622:	e0f2      	b.n	801480a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8014624:	683b      	ldr	r3, [r7, #0]
 8014626:	885b      	ldrh	r3, [r3, #2]
 8014628:	b2db      	uxtb	r3, r3
 801462a:	2b05      	cmp	r3, #5
 801462c:	f200 80ac 	bhi.w	8014788 <USBD_GetDescriptor+0x204>
 8014630:	a201      	add	r2, pc, #4	; (adr r2, 8014638 <USBD_GetDescriptor+0xb4>)
 8014632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014636:	bf00      	nop
 8014638:	08014651 	.word	0x08014651
 801463c:	08014685 	.word	0x08014685
 8014640:	080146b9 	.word	0x080146b9
 8014644:	080146ed 	.word	0x080146ed
 8014648:	08014721 	.word	0x08014721
 801464c:	08014755 	.word	0x08014755
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014656:	685b      	ldr	r3, [r3, #4]
 8014658:	2b00      	cmp	r3, #0
 801465a:	d00b      	beq.n	8014674 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014662:	685b      	ldr	r3, [r3, #4]
 8014664:	687a      	ldr	r2, [r7, #4]
 8014666:	7c12      	ldrb	r2, [r2, #16]
 8014668:	f107 0108 	add.w	r1, r7, #8
 801466c:	4610      	mov	r0, r2
 801466e:	4798      	blx	r3
 8014670:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014672:	e091      	b.n	8014798 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014674:	6839      	ldr	r1, [r7, #0]
 8014676:	6878      	ldr	r0, [r7, #4]
 8014678:	f000 facb 	bl	8014c12 <USBD_CtlError>
            err++;
 801467c:	7afb      	ldrb	r3, [r7, #11]
 801467e:	3301      	adds	r3, #1
 8014680:	72fb      	strb	r3, [r7, #11]
          break;
 8014682:	e089      	b.n	8014798 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801468a:	689b      	ldr	r3, [r3, #8]
 801468c:	2b00      	cmp	r3, #0
 801468e:	d00b      	beq.n	80146a8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014696:	689b      	ldr	r3, [r3, #8]
 8014698:	687a      	ldr	r2, [r7, #4]
 801469a:	7c12      	ldrb	r2, [r2, #16]
 801469c:	f107 0108 	add.w	r1, r7, #8
 80146a0:	4610      	mov	r0, r2
 80146a2:	4798      	blx	r3
 80146a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80146a6:	e077      	b.n	8014798 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80146a8:	6839      	ldr	r1, [r7, #0]
 80146aa:	6878      	ldr	r0, [r7, #4]
 80146ac:	f000 fab1 	bl	8014c12 <USBD_CtlError>
            err++;
 80146b0:	7afb      	ldrb	r3, [r7, #11]
 80146b2:	3301      	adds	r3, #1
 80146b4:	72fb      	strb	r3, [r7, #11]
          break;
 80146b6:	e06f      	b.n	8014798 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80146be:	68db      	ldr	r3, [r3, #12]
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d00b      	beq.n	80146dc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80146ca:	68db      	ldr	r3, [r3, #12]
 80146cc:	687a      	ldr	r2, [r7, #4]
 80146ce:	7c12      	ldrb	r2, [r2, #16]
 80146d0:	f107 0108 	add.w	r1, r7, #8
 80146d4:	4610      	mov	r0, r2
 80146d6:	4798      	blx	r3
 80146d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80146da:	e05d      	b.n	8014798 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80146dc:	6839      	ldr	r1, [r7, #0]
 80146de:	6878      	ldr	r0, [r7, #4]
 80146e0:	f000 fa97 	bl	8014c12 <USBD_CtlError>
            err++;
 80146e4:	7afb      	ldrb	r3, [r7, #11]
 80146e6:	3301      	adds	r3, #1
 80146e8:	72fb      	strb	r3, [r7, #11]
          break;
 80146ea:	e055      	b.n	8014798 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80146f2:	691b      	ldr	r3, [r3, #16]
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d00b      	beq.n	8014710 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80146fe:	691b      	ldr	r3, [r3, #16]
 8014700:	687a      	ldr	r2, [r7, #4]
 8014702:	7c12      	ldrb	r2, [r2, #16]
 8014704:	f107 0108 	add.w	r1, r7, #8
 8014708:	4610      	mov	r0, r2
 801470a:	4798      	blx	r3
 801470c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801470e:	e043      	b.n	8014798 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014710:	6839      	ldr	r1, [r7, #0]
 8014712:	6878      	ldr	r0, [r7, #4]
 8014714:	f000 fa7d 	bl	8014c12 <USBD_CtlError>
            err++;
 8014718:	7afb      	ldrb	r3, [r7, #11]
 801471a:	3301      	adds	r3, #1
 801471c:	72fb      	strb	r3, [r7, #11]
          break;
 801471e:	e03b      	b.n	8014798 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014726:	695b      	ldr	r3, [r3, #20]
 8014728:	2b00      	cmp	r3, #0
 801472a:	d00b      	beq.n	8014744 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014732:	695b      	ldr	r3, [r3, #20]
 8014734:	687a      	ldr	r2, [r7, #4]
 8014736:	7c12      	ldrb	r2, [r2, #16]
 8014738:	f107 0108 	add.w	r1, r7, #8
 801473c:	4610      	mov	r0, r2
 801473e:	4798      	blx	r3
 8014740:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014742:	e029      	b.n	8014798 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014744:	6839      	ldr	r1, [r7, #0]
 8014746:	6878      	ldr	r0, [r7, #4]
 8014748:	f000 fa63 	bl	8014c12 <USBD_CtlError>
            err++;
 801474c:	7afb      	ldrb	r3, [r7, #11]
 801474e:	3301      	adds	r3, #1
 8014750:	72fb      	strb	r3, [r7, #11]
          break;
 8014752:	e021      	b.n	8014798 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801475a:	699b      	ldr	r3, [r3, #24]
 801475c:	2b00      	cmp	r3, #0
 801475e:	d00b      	beq.n	8014778 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014766:	699b      	ldr	r3, [r3, #24]
 8014768:	687a      	ldr	r2, [r7, #4]
 801476a:	7c12      	ldrb	r2, [r2, #16]
 801476c:	f107 0108 	add.w	r1, r7, #8
 8014770:	4610      	mov	r0, r2
 8014772:	4798      	blx	r3
 8014774:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014776:	e00f      	b.n	8014798 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014778:	6839      	ldr	r1, [r7, #0]
 801477a:	6878      	ldr	r0, [r7, #4]
 801477c:	f000 fa49 	bl	8014c12 <USBD_CtlError>
            err++;
 8014780:	7afb      	ldrb	r3, [r7, #11]
 8014782:	3301      	adds	r3, #1
 8014784:	72fb      	strb	r3, [r7, #11]
          break;
 8014786:	e007      	b.n	8014798 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8014788:	6839      	ldr	r1, [r7, #0]
 801478a:	6878      	ldr	r0, [r7, #4]
 801478c:	f000 fa41 	bl	8014c12 <USBD_CtlError>
          err++;
 8014790:	7afb      	ldrb	r3, [r7, #11]
 8014792:	3301      	adds	r3, #1
 8014794:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8014796:	bf00      	nop
      }
      break;
 8014798:	e037      	b.n	801480a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	7c1b      	ldrb	r3, [r3, #16]
 801479e:	2b00      	cmp	r3, #0
 80147a0:	d109      	bne.n	80147b6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80147a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80147aa:	f107 0208 	add.w	r2, r7, #8
 80147ae:	4610      	mov	r0, r2
 80147b0:	4798      	blx	r3
 80147b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80147b4:	e029      	b.n	801480a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80147b6:	6839      	ldr	r1, [r7, #0]
 80147b8:	6878      	ldr	r0, [r7, #4]
 80147ba:	f000 fa2a 	bl	8014c12 <USBD_CtlError>
        err++;
 80147be:	7afb      	ldrb	r3, [r7, #11]
 80147c0:	3301      	adds	r3, #1
 80147c2:	72fb      	strb	r3, [r7, #11]
      break;
 80147c4:	e021      	b.n	801480a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	7c1b      	ldrb	r3, [r3, #16]
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d10d      	bne.n	80147ea <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80147d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80147d6:	f107 0208 	add.w	r2, r7, #8
 80147da:	4610      	mov	r0, r2
 80147dc:	4798      	blx	r3
 80147de:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	3301      	adds	r3, #1
 80147e4:	2207      	movs	r2, #7
 80147e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80147e8:	e00f      	b.n	801480a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80147ea:	6839      	ldr	r1, [r7, #0]
 80147ec:	6878      	ldr	r0, [r7, #4]
 80147ee:	f000 fa10 	bl	8014c12 <USBD_CtlError>
        err++;
 80147f2:	7afb      	ldrb	r3, [r7, #11]
 80147f4:	3301      	adds	r3, #1
 80147f6:	72fb      	strb	r3, [r7, #11]
      break;
 80147f8:	e007      	b.n	801480a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80147fa:	6839      	ldr	r1, [r7, #0]
 80147fc:	6878      	ldr	r0, [r7, #4]
 80147fe:	f000 fa08 	bl	8014c12 <USBD_CtlError>
      err++;
 8014802:	7afb      	ldrb	r3, [r7, #11]
 8014804:	3301      	adds	r3, #1
 8014806:	72fb      	strb	r3, [r7, #11]
      break;
 8014808:	bf00      	nop
  }

  if (err != 0U)
 801480a:	7afb      	ldrb	r3, [r7, #11]
 801480c:	2b00      	cmp	r3, #0
 801480e:	d11e      	bne.n	801484e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8014810:	683b      	ldr	r3, [r7, #0]
 8014812:	88db      	ldrh	r3, [r3, #6]
 8014814:	2b00      	cmp	r3, #0
 8014816:	d016      	beq.n	8014846 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8014818:	893b      	ldrh	r3, [r7, #8]
 801481a:	2b00      	cmp	r3, #0
 801481c:	d00e      	beq.n	801483c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801481e:	683b      	ldr	r3, [r7, #0]
 8014820:	88da      	ldrh	r2, [r3, #6]
 8014822:	893b      	ldrh	r3, [r7, #8]
 8014824:	4293      	cmp	r3, r2
 8014826:	bf28      	it	cs
 8014828:	4613      	movcs	r3, r2
 801482a:	b29b      	uxth	r3, r3
 801482c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801482e:	893b      	ldrh	r3, [r7, #8]
 8014830:	461a      	mov	r2, r3
 8014832:	68f9      	ldr	r1, [r7, #12]
 8014834:	6878      	ldr	r0, [r7, #4]
 8014836:	f000 fa5d 	bl	8014cf4 <USBD_CtlSendData>
 801483a:	e009      	b.n	8014850 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801483c:	6839      	ldr	r1, [r7, #0]
 801483e:	6878      	ldr	r0, [r7, #4]
 8014840:	f000 f9e7 	bl	8014c12 <USBD_CtlError>
 8014844:	e004      	b.n	8014850 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8014846:	6878      	ldr	r0, [r7, #4]
 8014848:	f000 faae 	bl	8014da8 <USBD_CtlSendStatus>
 801484c:	e000      	b.n	8014850 <USBD_GetDescriptor+0x2cc>
    return;
 801484e:	bf00      	nop
  }
}
 8014850:	3710      	adds	r7, #16
 8014852:	46bd      	mov	sp, r7
 8014854:	bd80      	pop	{r7, pc}
 8014856:	bf00      	nop

08014858 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014858:	b580      	push	{r7, lr}
 801485a:	b084      	sub	sp, #16
 801485c:	af00      	add	r7, sp, #0
 801485e:	6078      	str	r0, [r7, #4]
 8014860:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014862:	683b      	ldr	r3, [r7, #0]
 8014864:	889b      	ldrh	r3, [r3, #4]
 8014866:	2b00      	cmp	r3, #0
 8014868:	d131      	bne.n	80148ce <USBD_SetAddress+0x76>
 801486a:	683b      	ldr	r3, [r7, #0]
 801486c:	88db      	ldrh	r3, [r3, #6]
 801486e:	2b00      	cmp	r3, #0
 8014870:	d12d      	bne.n	80148ce <USBD_SetAddress+0x76>
 8014872:	683b      	ldr	r3, [r7, #0]
 8014874:	885b      	ldrh	r3, [r3, #2]
 8014876:	2b7f      	cmp	r3, #127	; 0x7f
 8014878:	d829      	bhi.n	80148ce <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801487a:	683b      	ldr	r3, [r7, #0]
 801487c:	885b      	ldrh	r3, [r3, #2]
 801487e:	b2db      	uxtb	r3, r3
 8014880:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014884:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801488c:	b2db      	uxtb	r3, r3
 801488e:	2b03      	cmp	r3, #3
 8014890:	d104      	bne.n	801489c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8014892:	6839      	ldr	r1, [r7, #0]
 8014894:	6878      	ldr	r0, [r7, #4]
 8014896:	f000 f9bc 	bl	8014c12 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801489a:	e01d      	b.n	80148d8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	7bfa      	ldrb	r2, [r7, #15]
 80148a0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80148a4:	7bfb      	ldrb	r3, [r7, #15]
 80148a6:	4619      	mov	r1, r3
 80148a8:	6878      	ldr	r0, [r7, #4]
 80148aa:	f000 ff5b 	bl	8015764 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80148ae:	6878      	ldr	r0, [r7, #4]
 80148b0:	f000 fa7a 	bl	8014da8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80148b4:	7bfb      	ldrb	r3, [r7, #15]
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d004      	beq.n	80148c4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	2202      	movs	r2, #2
 80148be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80148c2:	e009      	b.n	80148d8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	2201      	movs	r2, #1
 80148c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80148cc:	e004      	b.n	80148d8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80148ce:	6839      	ldr	r1, [r7, #0]
 80148d0:	6878      	ldr	r0, [r7, #4]
 80148d2:	f000 f99e 	bl	8014c12 <USBD_CtlError>
  }
}
 80148d6:	bf00      	nop
 80148d8:	bf00      	nop
 80148da:	3710      	adds	r7, #16
 80148dc:	46bd      	mov	sp, r7
 80148de:	bd80      	pop	{r7, pc}

080148e0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80148e0:	b580      	push	{r7, lr}
 80148e2:	b084      	sub	sp, #16
 80148e4:	af00      	add	r7, sp, #0
 80148e6:	6078      	str	r0, [r7, #4]
 80148e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80148ea:	2300      	movs	r3, #0
 80148ec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80148ee:	683b      	ldr	r3, [r7, #0]
 80148f0:	885b      	ldrh	r3, [r3, #2]
 80148f2:	b2da      	uxtb	r2, r3
 80148f4:	4b4e      	ldr	r3, [pc, #312]	; (8014a30 <USBD_SetConfig+0x150>)
 80148f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80148f8:	4b4d      	ldr	r3, [pc, #308]	; (8014a30 <USBD_SetConfig+0x150>)
 80148fa:	781b      	ldrb	r3, [r3, #0]
 80148fc:	2b01      	cmp	r3, #1
 80148fe:	d905      	bls.n	801490c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014900:	6839      	ldr	r1, [r7, #0]
 8014902:	6878      	ldr	r0, [r7, #4]
 8014904:	f000 f985 	bl	8014c12 <USBD_CtlError>
    return USBD_FAIL;
 8014908:	2303      	movs	r3, #3
 801490a:	e08c      	b.n	8014a26 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014912:	b2db      	uxtb	r3, r3
 8014914:	2b02      	cmp	r3, #2
 8014916:	d002      	beq.n	801491e <USBD_SetConfig+0x3e>
 8014918:	2b03      	cmp	r3, #3
 801491a:	d029      	beq.n	8014970 <USBD_SetConfig+0x90>
 801491c:	e075      	b.n	8014a0a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801491e:	4b44      	ldr	r3, [pc, #272]	; (8014a30 <USBD_SetConfig+0x150>)
 8014920:	781b      	ldrb	r3, [r3, #0]
 8014922:	2b00      	cmp	r3, #0
 8014924:	d020      	beq.n	8014968 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8014926:	4b42      	ldr	r3, [pc, #264]	; (8014a30 <USBD_SetConfig+0x150>)
 8014928:	781b      	ldrb	r3, [r3, #0]
 801492a:	461a      	mov	r2, r3
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014930:	4b3f      	ldr	r3, [pc, #252]	; (8014a30 <USBD_SetConfig+0x150>)
 8014932:	781b      	ldrb	r3, [r3, #0]
 8014934:	4619      	mov	r1, r3
 8014936:	6878      	ldr	r0, [r7, #4]
 8014938:	f7fe ffe1 	bl	80138fe <USBD_SetClassConfig>
 801493c:	4603      	mov	r3, r0
 801493e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8014940:	7bfb      	ldrb	r3, [r7, #15]
 8014942:	2b00      	cmp	r3, #0
 8014944:	d008      	beq.n	8014958 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8014946:	6839      	ldr	r1, [r7, #0]
 8014948:	6878      	ldr	r0, [r7, #4]
 801494a:	f000 f962 	bl	8014c12 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801494e:	687b      	ldr	r3, [r7, #4]
 8014950:	2202      	movs	r2, #2
 8014952:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014956:	e065      	b.n	8014a24 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014958:	6878      	ldr	r0, [r7, #4]
 801495a:	f000 fa25 	bl	8014da8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	2203      	movs	r2, #3
 8014962:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8014966:	e05d      	b.n	8014a24 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014968:	6878      	ldr	r0, [r7, #4]
 801496a:	f000 fa1d 	bl	8014da8 <USBD_CtlSendStatus>
      break;
 801496e:	e059      	b.n	8014a24 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8014970:	4b2f      	ldr	r3, [pc, #188]	; (8014a30 <USBD_SetConfig+0x150>)
 8014972:	781b      	ldrb	r3, [r3, #0]
 8014974:	2b00      	cmp	r3, #0
 8014976:	d112      	bne.n	801499e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	2202      	movs	r2, #2
 801497c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8014980:	4b2b      	ldr	r3, [pc, #172]	; (8014a30 <USBD_SetConfig+0x150>)
 8014982:	781b      	ldrb	r3, [r3, #0]
 8014984:	461a      	mov	r2, r3
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801498a:	4b29      	ldr	r3, [pc, #164]	; (8014a30 <USBD_SetConfig+0x150>)
 801498c:	781b      	ldrb	r3, [r3, #0]
 801498e:	4619      	mov	r1, r3
 8014990:	6878      	ldr	r0, [r7, #4]
 8014992:	f7fe ffd0 	bl	8013936 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8014996:	6878      	ldr	r0, [r7, #4]
 8014998:	f000 fa06 	bl	8014da8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801499c:	e042      	b.n	8014a24 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801499e:	4b24      	ldr	r3, [pc, #144]	; (8014a30 <USBD_SetConfig+0x150>)
 80149a0:	781b      	ldrb	r3, [r3, #0]
 80149a2:	461a      	mov	r2, r3
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	685b      	ldr	r3, [r3, #4]
 80149a8:	429a      	cmp	r2, r3
 80149aa:	d02a      	beq.n	8014a02 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	685b      	ldr	r3, [r3, #4]
 80149b0:	b2db      	uxtb	r3, r3
 80149b2:	4619      	mov	r1, r3
 80149b4:	6878      	ldr	r0, [r7, #4]
 80149b6:	f7fe ffbe 	bl	8013936 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80149ba:	4b1d      	ldr	r3, [pc, #116]	; (8014a30 <USBD_SetConfig+0x150>)
 80149bc:	781b      	ldrb	r3, [r3, #0]
 80149be:	461a      	mov	r2, r3
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80149c4:	4b1a      	ldr	r3, [pc, #104]	; (8014a30 <USBD_SetConfig+0x150>)
 80149c6:	781b      	ldrb	r3, [r3, #0]
 80149c8:	4619      	mov	r1, r3
 80149ca:	6878      	ldr	r0, [r7, #4]
 80149cc:	f7fe ff97 	bl	80138fe <USBD_SetClassConfig>
 80149d0:	4603      	mov	r3, r0
 80149d2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80149d4:	7bfb      	ldrb	r3, [r7, #15]
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d00f      	beq.n	80149fa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80149da:	6839      	ldr	r1, [r7, #0]
 80149dc:	6878      	ldr	r0, [r7, #4]
 80149de:	f000 f918 	bl	8014c12 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	685b      	ldr	r3, [r3, #4]
 80149e6:	b2db      	uxtb	r3, r3
 80149e8:	4619      	mov	r1, r3
 80149ea:	6878      	ldr	r0, [r7, #4]
 80149ec:	f7fe ffa3 	bl	8013936 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	2202      	movs	r2, #2
 80149f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80149f8:	e014      	b.n	8014a24 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80149fa:	6878      	ldr	r0, [r7, #4]
 80149fc:	f000 f9d4 	bl	8014da8 <USBD_CtlSendStatus>
      break;
 8014a00:	e010      	b.n	8014a24 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014a02:	6878      	ldr	r0, [r7, #4]
 8014a04:	f000 f9d0 	bl	8014da8 <USBD_CtlSendStatus>
      break;
 8014a08:	e00c      	b.n	8014a24 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8014a0a:	6839      	ldr	r1, [r7, #0]
 8014a0c:	6878      	ldr	r0, [r7, #4]
 8014a0e:	f000 f900 	bl	8014c12 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014a12:	4b07      	ldr	r3, [pc, #28]	; (8014a30 <USBD_SetConfig+0x150>)
 8014a14:	781b      	ldrb	r3, [r3, #0]
 8014a16:	4619      	mov	r1, r3
 8014a18:	6878      	ldr	r0, [r7, #4]
 8014a1a:	f7fe ff8c 	bl	8013936 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8014a1e:	2303      	movs	r3, #3
 8014a20:	73fb      	strb	r3, [r7, #15]
      break;
 8014a22:	bf00      	nop
  }

  return ret;
 8014a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a26:	4618      	mov	r0, r3
 8014a28:	3710      	adds	r7, #16
 8014a2a:	46bd      	mov	sp, r7
 8014a2c:	bd80      	pop	{r7, pc}
 8014a2e:	bf00      	nop
 8014a30:	24000b20 	.word	0x24000b20

08014a34 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014a34:	b580      	push	{r7, lr}
 8014a36:	b082      	sub	sp, #8
 8014a38:	af00      	add	r7, sp, #0
 8014a3a:	6078      	str	r0, [r7, #4]
 8014a3c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8014a3e:	683b      	ldr	r3, [r7, #0]
 8014a40:	88db      	ldrh	r3, [r3, #6]
 8014a42:	2b01      	cmp	r3, #1
 8014a44:	d004      	beq.n	8014a50 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014a46:	6839      	ldr	r1, [r7, #0]
 8014a48:	6878      	ldr	r0, [r7, #4]
 8014a4a:	f000 f8e2 	bl	8014c12 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8014a4e:	e023      	b.n	8014a98 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a56:	b2db      	uxtb	r3, r3
 8014a58:	2b02      	cmp	r3, #2
 8014a5a:	dc02      	bgt.n	8014a62 <USBD_GetConfig+0x2e>
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	dc03      	bgt.n	8014a68 <USBD_GetConfig+0x34>
 8014a60:	e015      	b.n	8014a8e <USBD_GetConfig+0x5a>
 8014a62:	2b03      	cmp	r3, #3
 8014a64:	d00b      	beq.n	8014a7e <USBD_GetConfig+0x4a>
 8014a66:	e012      	b.n	8014a8e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	2200      	movs	r2, #0
 8014a6c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	3308      	adds	r3, #8
 8014a72:	2201      	movs	r2, #1
 8014a74:	4619      	mov	r1, r3
 8014a76:	6878      	ldr	r0, [r7, #4]
 8014a78:	f000 f93c 	bl	8014cf4 <USBD_CtlSendData>
        break;
 8014a7c:	e00c      	b.n	8014a98 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	3304      	adds	r3, #4
 8014a82:	2201      	movs	r2, #1
 8014a84:	4619      	mov	r1, r3
 8014a86:	6878      	ldr	r0, [r7, #4]
 8014a88:	f000 f934 	bl	8014cf4 <USBD_CtlSendData>
        break;
 8014a8c:	e004      	b.n	8014a98 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8014a8e:	6839      	ldr	r1, [r7, #0]
 8014a90:	6878      	ldr	r0, [r7, #4]
 8014a92:	f000 f8be 	bl	8014c12 <USBD_CtlError>
        break;
 8014a96:	bf00      	nop
}
 8014a98:	bf00      	nop
 8014a9a:	3708      	adds	r7, #8
 8014a9c:	46bd      	mov	sp, r7
 8014a9e:	bd80      	pop	{r7, pc}

08014aa0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014aa0:	b580      	push	{r7, lr}
 8014aa2:	b082      	sub	sp, #8
 8014aa4:	af00      	add	r7, sp, #0
 8014aa6:	6078      	str	r0, [r7, #4]
 8014aa8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014ab0:	b2db      	uxtb	r3, r3
 8014ab2:	3b01      	subs	r3, #1
 8014ab4:	2b02      	cmp	r3, #2
 8014ab6:	d81e      	bhi.n	8014af6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014ab8:	683b      	ldr	r3, [r7, #0]
 8014aba:	88db      	ldrh	r3, [r3, #6]
 8014abc:	2b02      	cmp	r3, #2
 8014abe:	d004      	beq.n	8014aca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8014ac0:	6839      	ldr	r1, [r7, #0]
 8014ac2:	6878      	ldr	r0, [r7, #4]
 8014ac4:	f000 f8a5 	bl	8014c12 <USBD_CtlError>
        break;
 8014ac8:	e01a      	b.n	8014b00 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	2201      	movs	r2, #1
 8014ace:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d005      	beq.n	8014ae6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	68db      	ldr	r3, [r3, #12]
 8014ade:	f043 0202 	orr.w	r2, r3, #2
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	330c      	adds	r3, #12
 8014aea:	2202      	movs	r2, #2
 8014aec:	4619      	mov	r1, r3
 8014aee:	6878      	ldr	r0, [r7, #4]
 8014af0:	f000 f900 	bl	8014cf4 <USBD_CtlSendData>
      break;
 8014af4:	e004      	b.n	8014b00 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8014af6:	6839      	ldr	r1, [r7, #0]
 8014af8:	6878      	ldr	r0, [r7, #4]
 8014afa:	f000 f88a 	bl	8014c12 <USBD_CtlError>
      break;
 8014afe:	bf00      	nop
  }
}
 8014b00:	bf00      	nop
 8014b02:	3708      	adds	r7, #8
 8014b04:	46bd      	mov	sp, r7
 8014b06:	bd80      	pop	{r7, pc}

08014b08 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014b08:	b580      	push	{r7, lr}
 8014b0a:	b082      	sub	sp, #8
 8014b0c:	af00      	add	r7, sp, #0
 8014b0e:	6078      	str	r0, [r7, #4]
 8014b10:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014b12:	683b      	ldr	r3, [r7, #0]
 8014b14:	885b      	ldrh	r3, [r3, #2]
 8014b16:	2b01      	cmp	r3, #1
 8014b18:	d107      	bne.n	8014b2a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	2201      	movs	r2, #1
 8014b1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8014b22:	6878      	ldr	r0, [r7, #4]
 8014b24:	f000 f940 	bl	8014da8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8014b28:	e013      	b.n	8014b52 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8014b2a:	683b      	ldr	r3, [r7, #0]
 8014b2c:	885b      	ldrh	r3, [r3, #2]
 8014b2e:	2b02      	cmp	r3, #2
 8014b30:	d10b      	bne.n	8014b4a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8014b32:	683b      	ldr	r3, [r7, #0]
 8014b34:	889b      	ldrh	r3, [r3, #4]
 8014b36:	0a1b      	lsrs	r3, r3, #8
 8014b38:	b29b      	uxth	r3, r3
 8014b3a:	b2da      	uxtb	r2, r3
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8014b42:	6878      	ldr	r0, [r7, #4]
 8014b44:	f000 f930 	bl	8014da8 <USBD_CtlSendStatus>
}
 8014b48:	e003      	b.n	8014b52 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8014b4a:	6839      	ldr	r1, [r7, #0]
 8014b4c:	6878      	ldr	r0, [r7, #4]
 8014b4e:	f000 f860 	bl	8014c12 <USBD_CtlError>
}
 8014b52:	bf00      	nop
 8014b54:	3708      	adds	r7, #8
 8014b56:	46bd      	mov	sp, r7
 8014b58:	bd80      	pop	{r7, pc}

08014b5a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014b5a:	b580      	push	{r7, lr}
 8014b5c:	b082      	sub	sp, #8
 8014b5e:	af00      	add	r7, sp, #0
 8014b60:	6078      	str	r0, [r7, #4]
 8014b62:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014b6a:	b2db      	uxtb	r3, r3
 8014b6c:	3b01      	subs	r3, #1
 8014b6e:	2b02      	cmp	r3, #2
 8014b70:	d80b      	bhi.n	8014b8a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014b72:	683b      	ldr	r3, [r7, #0]
 8014b74:	885b      	ldrh	r3, [r3, #2]
 8014b76:	2b01      	cmp	r3, #1
 8014b78:	d10c      	bne.n	8014b94 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	2200      	movs	r2, #0
 8014b7e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014b82:	6878      	ldr	r0, [r7, #4]
 8014b84:	f000 f910 	bl	8014da8 <USBD_CtlSendStatus>
      }
      break;
 8014b88:	e004      	b.n	8014b94 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8014b8a:	6839      	ldr	r1, [r7, #0]
 8014b8c:	6878      	ldr	r0, [r7, #4]
 8014b8e:	f000 f840 	bl	8014c12 <USBD_CtlError>
      break;
 8014b92:	e000      	b.n	8014b96 <USBD_ClrFeature+0x3c>
      break;
 8014b94:	bf00      	nop
  }
}
 8014b96:	bf00      	nop
 8014b98:	3708      	adds	r7, #8
 8014b9a:	46bd      	mov	sp, r7
 8014b9c:	bd80      	pop	{r7, pc}

08014b9e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8014b9e:	b580      	push	{r7, lr}
 8014ba0:	b084      	sub	sp, #16
 8014ba2:	af00      	add	r7, sp, #0
 8014ba4:	6078      	str	r0, [r7, #4]
 8014ba6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014ba8:	683b      	ldr	r3, [r7, #0]
 8014baa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	781a      	ldrb	r2, [r3, #0]
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014bb4:	68fb      	ldr	r3, [r7, #12]
 8014bb6:	3301      	adds	r3, #1
 8014bb8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	781a      	ldrb	r2, [r3, #0]
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	3301      	adds	r3, #1
 8014bc6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014bc8:	68f8      	ldr	r0, [r7, #12]
 8014bca:	f7ff fa41 	bl	8014050 <SWAPBYTE>
 8014bce:	4603      	mov	r3, r0
 8014bd0:	461a      	mov	r2, r3
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	3301      	adds	r3, #1
 8014bda:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	3301      	adds	r3, #1
 8014be0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8014be2:	68f8      	ldr	r0, [r7, #12]
 8014be4:	f7ff fa34 	bl	8014050 <SWAPBYTE>
 8014be8:	4603      	mov	r3, r0
 8014bea:	461a      	mov	r2, r3
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014bf0:	68fb      	ldr	r3, [r7, #12]
 8014bf2:	3301      	adds	r3, #1
 8014bf4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	3301      	adds	r3, #1
 8014bfa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014bfc:	68f8      	ldr	r0, [r7, #12]
 8014bfe:	f7ff fa27 	bl	8014050 <SWAPBYTE>
 8014c02:	4603      	mov	r3, r0
 8014c04:	461a      	mov	r2, r3
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	80da      	strh	r2, [r3, #6]
}
 8014c0a:	bf00      	nop
 8014c0c:	3710      	adds	r7, #16
 8014c0e:	46bd      	mov	sp, r7
 8014c10:	bd80      	pop	{r7, pc}

08014c12 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014c12:	b580      	push	{r7, lr}
 8014c14:	b082      	sub	sp, #8
 8014c16:	af00      	add	r7, sp, #0
 8014c18:	6078      	str	r0, [r7, #4]
 8014c1a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014c1c:	2180      	movs	r1, #128	; 0x80
 8014c1e:	6878      	ldr	r0, [r7, #4]
 8014c20:	f000 fd36 	bl	8015690 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014c24:	2100      	movs	r1, #0
 8014c26:	6878      	ldr	r0, [r7, #4]
 8014c28:	f000 fd32 	bl	8015690 <USBD_LL_StallEP>
}
 8014c2c:	bf00      	nop
 8014c2e:	3708      	adds	r7, #8
 8014c30:	46bd      	mov	sp, r7
 8014c32:	bd80      	pop	{r7, pc}

08014c34 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014c34:	b580      	push	{r7, lr}
 8014c36:	b086      	sub	sp, #24
 8014c38:	af00      	add	r7, sp, #0
 8014c3a:	60f8      	str	r0, [r7, #12]
 8014c3c:	60b9      	str	r1, [r7, #8]
 8014c3e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014c40:	2300      	movs	r3, #0
 8014c42:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8014c44:	68fb      	ldr	r3, [r7, #12]
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d036      	beq.n	8014cb8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8014c4a:	68fb      	ldr	r3, [r7, #12]
 8014c4c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8014c4e:	6938      	ldr	r0, [r7, #16]
 8014c50:	f000 f836 	bl	8014cc0 <USBD_GetLen>
 8014c54:	4603      	mov	r3, r0
 8014c56:	3301      	adds	r3, #1
 8014c58:	b29b      	uxth	r3, r3
 8014c5a:	005b      	lsls	r3, r3, #1
 8014c5c:	b29a      	uxth	r2, r3
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014c62:	7dfb      	ldrb	r3, [r7, #23]
 8014c64:	68ba      	ldr	r2, [r7, #8]
 8014c66:	4413      	add	r3, r2
 8014c68:	687a      	ldr	r2, [r7, #4]
 8014c6a:	7812      	ldrb	r2, [r2, #0]
 8014c6c:	701a      	strb	r2, [r3, #0]
  idx++;
 8014c6e:	7dfb      	ldrb	r3, [r7, #23]
 8014c70:	3301      	adds	r3, #1
 8014c72:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014c74:	7dfb      	ldrb	r3, [r7, #23]
 8014c76:	68ba      	ldr	r2, [r7, #8]
 8014c78:	4413      	add	r3, r2
 8014c7a:	2203      	movs	r2, #3
 8014c7c:	701a      	strb	r2, [r3, #0]
  idx++;
 8014c7e:	7dfb      	ldrb	r3, [r7, #23]
 8014c80:	3301      	adds	r3, #1
 8014c82:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014c84:	e013      	b.n	8014cae <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8014c86:	7dfb      	ldrb	r3, [r7, #23]
 8014c88:	68ba      	ldr	r2, [r7, #8]
 8014c8a:	4413      	add	r3, r2
 8014c8c:	693a      	ldr	r2, [r7, #16]
 8014c8e:	7812      	ldrb	r2, [r2, #0]
 8014c90:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8014c92:	693b      	ldr	r3, [r7, #16]
 8014c94:	3301      	adds	r3, #1
 8014c96:	613b      	str	r3, [r7, #16]
    idx++;
 8014c98:	7dfb      	ldrb	r3, [r7, #23]
 8014c9a:	3301      	adds	r3, #1
 8014c9c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8014c9e:	7dfb      	ldrb	r3, [r7, #23]
 8014ca0:	68ba      	ldr	r2, [r7, #8]
 8014ca2:	4413      	add	r3, r2
 8014ca4:	2200      	movs	r2, #0
 8014ca6:	701a      	strb	r2, [r3, #0]
    idx++;
 8014ca8:	7dfb      	ldrb	r3, [r7, #23]
 8014caa:	3301      	adds	r3, #1
 8014cac:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8014cae:	693b      	ldr	r3, [r7, #16]
 8014cb0:	781b      	ldrb	r3, [r3, #0]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d1e7      	bne.n	8014c86 <USBD_GetString+0x52>
 8014cb6:	e000      	b.n	8014cba <USBD_GetString+0x86>
    return;
 8014cb8:	bf00      	nop
  }
}
 8014cba:	3718      	adds	r7, #24
 8014cbc:	46bd      	mov	sp, r7
 8014cbe:	bd80      	pop	{r7, pc}

08014cc0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014cc0:	b480      	push	{r7}
 8014cc2:	b085      	sub	sp, #20
 8014cc4:	af00      	add	r7, sp, #0
 8014cc6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014cc8:	2300      	movs	r3, #0
 8014cca:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8014cd0:	e005      	b.n	8014cde <USBD_GetLen+0x1e>
  {
    len++;
 8014cd2:	7bfb      	ldrb	r3, [r7, #15]
 8014cd4:	3301      	adds	r3, #1
 8014cd6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8014cd8:	68bb      	ldr	r3, [r7, #8]
 8014cda:	3301      	adds	r3, #1
 8014cdc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8014cde:	68bb      	ldr	r3, [r7, #8]
 8014ce0:	781b      	ldrb	r3, [r3, #0]
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d1f5      	bne.n	8014cd2 <USBD_GetLen+0x12>
  }

  return len;
 8014ce6:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ce8:	4618      	mov	r0, r3
 8014cea:	3714      	adds	r7, #20
 8014cec:	46bd      	mov	sp, r7
 8014cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cf2:	4770      	bx	lr

08014cf4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014cf4:	b580      	push	{r7, lr}
 8014cf6:	b084      	sub	sp, #16
 8014cf8:	af00      	add	r7, sp, #0
 8014cfa:	60f8      	str	r0, [r7, #12]
 8014cfc:	60b9      	str	r1, [r7, #8]
 8014cfe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	2202      	movs	r2, #2
 8014d04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8014d08:	68fb      	ldr	r3, [r7, #12]
 8014d0a:	687a      	ldr	r2, [r7, #4]
 8014d0c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8014d0e:	68fb      	ldr	r3, [r7, #12]
 8014d10:	687a      	ldr	r2, [r7, #4]
 8014d12:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	68ba      	ldr	r2, [r7, #8]
 8014d18:	2100      	movs	r1, #0
 8014d1a:	68f8      	ldr	r0, [r7, #12]
 8014d1c:	f000 fd41 	bl	80157a2 <USBD_LL_Transmit>

  return USBD_OK;
 8014d20:	2300      	movs	r3, #0
}
 8014d22:	4618      	mov	r0, r3
 8014d24:	3710      	adds	r7, #16
 8014d26:	46bd      	mov	sp, r7
 8014d28:	bd80      	pop	{r7, pc}

08014d2a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8014d2a:	b580      	push	{r7, lr}
 8014d2c:	b084      	sub	sp, #16
 8014d2e:	af00      	add	r7, sp, #0
 8014d30:	60f8      	str	r0, [r7, #12]
 8014d32:	60b9      	str	r1, [r7, #8]
 8014d34:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	68ba      	ldr	r2, [r7, #8]
 8014d3a:	2100      	movs	r1, #0
 8014d3c:	68f8      	ldr	r0, [r7, #12]
 8014d3e:	f000 fd30 	bl	80157a2 <USBD_LL_Transmit>

  return USBD_OK;
 8014d42:	2300      	movs	r3, #0
}
 8014d44:	4618      	mov	r0, r3
 8014d46:	3710      	adds	r7, #16
 8014d48:	46bd      	mov	sp, r7
 8014d4a:	bd80      	pop	{r7, pc}

08014d4c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8014d4c:	b580      	push	{r7, lr}
 8014d4e:	b084      	sub	sp, #16
 8014d50:	af00      	add	r7, sp, #0
 8014d52:	60f8      	str	r0, [r7, #12]
 8014d54:	60b9      	str	r1, [r7, #8]
 8014d56:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014d58:	68fb      	ldr	r3, [r7, #12]
 8014d5a:	2203      	movs	r2, #3
 8014d5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	687a      	ldr	r2, [r7, #4]
 8014d64:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8014d68:	68fb      	ldr	r3, [r7, #12]
 8014d6a:	687a      	ldr	r2, [r7, #4]
 8014d6c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	68ba      	ldr	r2, [r7, #8]
 8014d74:	2100      	movs	r1, #0
 8014d76:	68f8      	ldr	r0, [r7, #12]
 8014d78:	f000 fd34 	bl	80157e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014d7c:	2300      	movs	r3, #0
}
 8014d7e:	4618      	mov	r0, r3
 8014d80:	3710      	adds	r7, #16
 8014d82:	46bd      	mov	sp, r7
 8014d84:	bd80      	pop	{r7, pc}

08014d86 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8014d86:	b580      	push	{r7, lr}
 8014d88:	b084      	sub	sp, #16
 8014d8a:	af00      	add	r7, sp, #0
 8014d8c:	60f8      	str	r0, [r7, #12]
 8014d8e:	60b9      	str	r1, [r7, #8]
 8014d90:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	68ba      	ldr	r2, [r7, #8]
 8014d96:	2100      	movs	r1, #0
 8014d98:	68f8      	ldr	r0, [r7, #12]
 8014d9a:	f000 fd23 	bl	80157e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014d9e:	2300      	movs	r3, #0
}
 8014da0:	4618      	mov	r0, r3
 8014da2:	3710      	adds	r7, #16
 8014da4:	46bd      	mov	sp, r7
 8014da6:	bd80      	pop	{r7, pc}

08014da8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014da8:	b580      	push	{r7, lr}
 8014daa:	b082      	sub	sp, #8
 8014dac:	af00      	add	r7, sp, #0
 8014dae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	2204      	movs	r2, #4
 8014db4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014db8:	2300      	movs	r3, #0
 8014dba:	2200      	movs	r2, #0
 8014dbc:	2100      	movs	r1, #0
 8014dbe:	6878      	ldr	r0, [r7, #4]
 8014dc0:	f000 fcef 	bl	80157a2 <USBD_LL_Transmit>

  return USBD_OK;
 8014dc4:	2300      	movs	r3, #0
}
 8014dc6:	4618      	mov	r0, r3
 8014dc8:	3708      	adds	r7, #8
 8014dca:	46bd      	mov	sp, r7
 8014dcc:	bd80      	pop	{r7, pc}

08014dce <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014dce:	b580      	push	{r7, lr}
 8014dd0:	b082      	sub	sp, #8
 8014dd2:	af00      	add	r7, sp, #0
 8014dd4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	2205      	movs	r2, #5
 8014dda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014dde:	2300      	movs	r3, #0
 8014de0:	2200      	movs	r2, #0
 8014de2:	2100      	movs	r1, #0
 8014de4:	6878      	ldr	r0, [r7, #4]
 8014de6:	f000 fcfd 	bl	80157e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014dea:	2300      	movs	r3, #0
}
 8014dec:	4618      	mov	r0, r3
 8014dee:	3708      	adds	r7, #8
 8014df0:	46bd      	mov	sp, r7
 8014df2:	bd80      	pop	{r7, pc}

08014df4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014df4:	b480      	push	{r7}
 8014df6:	b087      	sub	sp, #28
 8014df8:	af00      	add	r7, sp, #0
 8014dfa:	60f8      	str	r0, [r7, #12]
 8014dfc:	60b9      	str	r1, [r7, #8]
 8014dfe:	4613      	mov	r3, r2
 8014e00:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014e02:	2301      	movs	r3, #1
 8014e04:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014e06:	2300      	movs	r3, #0
 8014e08:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014e0a:	4b1f      	ldr	r3, [pc, #124]	; (8014e88 <FATFS_LinkDriverEx+0x94>)
 8014e0c:	7a5b      	ldrb	r3, [r3, #9]
 8014e0e:	b2db      	uxtb	r3, r3
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d131      	bne.n	8014e78 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014e14:	4b1c      	ldr	r3, [pc, #112]	; (8014e88 <FATFS_LinkDriverEx+0x94>)
 8014e16:	7a5b      	ldrb	r3, [r3, #9]
 8014e18:	b2db      	uxtb	r3, r3
 8014e1a:	461a      	mov	r2, r3
 8014e1c:	4b1a      	ldr	r3, [pc, #104]	; (8014e88 <FATFS_LinkDriverEx+0x94>)
 8014e1e:	2100      	movs	r1, #0
 8014e20:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014e22:	4b19      	ldr	r3, [pc, #100]	; (8014e88 <FATFS_LinkDriverEx+0x94>)
 8014e24:	7a5b      	ldrb	r3, [r3, #9]
 8014e26:	b2db      	uxtb	r3, r3
 8014e28:	4a17      	ldr	r2, [pc, #92]	; (8014e88 <FATFS_LinkDriverEx+0x94>)
 8014e2a:	009b      	lsls	r3, r3, #2
 8014e2c:	4413      	add	r3, r2
 8014e2e:	68fa      	ldr	r2, [r7, #12]
 8014e30:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014e32:	4b15      	ldr	r3, [pc, #84]	; (8014e88 <FATFS_LinkDriverEx+0x94>)
 8014e34:	7a5b      	ldrb	r3, [r3, #9]
 8014e36:	b2db      	uxtb	r3, r3
 8014e38:	461a      	mov	r2, r3
 8014e3a:	4b13      	ldr	r3, [pc, #76]	; (8014e88 <FATFS_LinkDriverEx+0x94>)
 8014e3c:	4413      	add	r3, r2
 8014e3e:	79fa      	ldrb	r2, [r7, #7]
 8014e40:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014e42:	4b11      	ldr	r3, [pc, #68]	; (8014e88 <FATFS_LinkDriverEx+0x94>)
 8014e44:	7a5b      	ldrb	r3, [r3, #9]
 8014e46:	b2db      	uxtb	r3, r3
 8014e48:	1c5a      	adds	r2, r3, #1
 8014e4a:	b2d1      	uxtb	r1, r2
 8014e4c:	4a0e      	ldr	r2, [pc, #56]	; (8014e88 <FATFS_LinkDriverEx+0x94>)
 8014e4e:	7251      	strb	r1, [r2, #9]
 8014e50:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014e52:	7dbb      	ldrb	r3, [r7, #22]
 8014e54:	3330      	adds	r3, #48	; 0x30
 8014e56:	b2da      	uxtb	r2, r3
 8014e58:	68bb      	ldr	r3, [r7, #8]
 8014e5a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014e5c:	68bb      	ldr	r3, [r7, #8]
 8014e5e:	3301      	adds	r3, #1
 8014e60:	223a      	movs	r2, #58	; 0x3a
 8014e62:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014e64:	68bb      	ldr	r3, [r7, #8]
 8014e66:	3302      	adds	r3, #2
 8014e68:	222f      	movs	r2, #47	; 0x2f
 8014e6a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014e6c:	68bb      	ldr	r3, [r7, #8]
 8014e6e:	3303      	adds	r3, #3
 8014e70:	2200      	movs	r2, #0
 8014e72:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014e74:	2300      	movs	r3, #0
 8014e76:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014e78:	7dfb      	ldrb	r3, [r7, #23]
}
 8014e7a:	4618      	mov	r0, r3
 8014e7c:	371c      	adds	r7, #28
 8014e7e:	46bd      	mov	sp, r7
 8014e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e84:	4770      	bx	lr
 8014e86:	bf00      	nop
 8014e88:	24000b24 	.word	0x24000b24

08014e8c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014e8c:	b580      	push	{r7, lr}
 8014e8e:	b082      	sub	sp, #8
 8014e90:	af00      	add	r7, sp, #0
 8014e92:	6078      	str	r0, [r7, #4]
 8014e94:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014e96:	2200      	movs	r2, #0
 8014e98:	6839      	ldr	r1, [r7, #0]
 8014e9a:	6878      	ldr	r0, [r7, #4]
 8014e9c:	f7ff ffaa 	bl	8014df4 <FATFS_LinkDriverEx>
 8014ea0:	4603      	mov	r3, r0
}
 8014ea2:	4618      	mov	r0, r3
 8014ea4:	3708      	adds	r7, #8
 8014ea6:	46bd      	mov	sp, r7
 8014ea8:	bd80      	pop	{r7, pc}
	...

08014eac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8014eac:	b580      	push	{r7, lr}
 8014eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8014eb0:	2201      	movs	r2, #1
 8014eb2:	4913      	ldr	r1, [pc, #76]	; (8014f00 <MX_USB_DEVICE_Init+0x54>)
 8014eb4:	4813      	ldr	r0, [pc, #76]	; (8014f04 <MX_USB_DEVICE_Init+0x58>)
 8014eb6:	f7fe fca5 	bl	8013804 <USBD_Init>
 8014eba:	4603      	mov	r3, r0
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d001      	beq.n	8014ec4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8014ec0:	f7ed f95a 	bl	8002178 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8014ec4:	4910      	ldr	r1, [pc, #64]	; (8014f08 <MX_USB_DEVICE_Init+0x5c>)
 8014ec6:	480f      	ldr	r0, [pc, #60]	; (8014f04 <MX_USB_DEVICE_Init+0x58>)
 8014ec8:	f7fe fccc 	bl	8013864 <USBD_RegisterClass>
 8014ecc:	4603      	mov	r3, r0
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	d001      	beq.n	8014ed6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8014ed2:	f7ed f951 	bl	8002178 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8014ed6:	490d      	ldr	r1, [pc, #52]	; (8014f0c <MX_USB_DEVICE_Init+0x60>)
 8014ed8:	480a      	ldr	r0, [pc, #40]	; (8014f04 <MX_USB_DEVICE_Init+0x58>)
 8014eda:	f7fe fbc3 	bl	8013664 <USBD_CDC_RegisterInterface>
 8014ede:	4603      	mov	r3, r0
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d001      	beq.n	8014ee8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8014ee4:	f7ed f948 	bl	8002178 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8014ee8:	4806      	ldr	r0, [pc, #24]	; (8014f04 <MX_USB_DEVICE_Init+0x58>)
 8014eea:	f7fe fcf1 	bl	80138d0 <USBD_Start>
 8014eee:	4603      	mov	r3, r0
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d001      	beq.n	8014ef8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8014ef4:	f7ed f940 	bl	8002178 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8014ef8:	f7f3 fc7a 	bl	80087f0 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8014efc:	bf00      	nop
 8014efe:	bd80      	pop	{r7, pc}
 8014f00:	240000b0 	.word	0x240000b0
 8014f04:	24000b30 	.word	0x24000b30
 8014f08:	2400001c 	.word	0x2400001c
 8014f0c:	2400009c 	.word	0x2400009c

08014f10 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8014f10:	b580      	push	{r7, lr}
 8014f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8014f14:	2200      	movs	r2, #0
 8014f16:	4905      	ldr	r1, [pc, #20]	; (8014f2c <CDC_Init_HS+0x1c>)
 8014f18:	4805      	ldr	r0, [pc, #20]	; (8014f30 <CDC_Init_HS+0x20>)
 8014f1a:	f7fe fbbd 	bl	8013698 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8014f1e:	4905      	ldr	r1, [pc, #20]	; (8014f34 <CDC_Init_HS+0x24>)
 8014f20:	4803      	ldr	r0, [pc, #12]	; (8014f30 <CDC_Init_HS+0x20>)
 8014f22:	f7fe fbdb 	bl	80136dc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8014f26:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8014f28:	4618      	mov	r0, r3
 8014f2a:	bd80      	pop	{r7, pc}
 8014f2c:	2400160c 	.word	0x2400160c
 8014f30:	24000b30 	.word	0x24000b30
 8014f34:	24000e0c 	.word	0x24000e0c

08014f38 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8014f38:	b480      	push	{r7}
 8014f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8014f3c:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8014f3e:	4618      	mov	r0, r3
 8014f40:	46bd      	mov	sp, r7
 8014f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f46:	4770      	bx	lr

08014f48 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8014f48:	b480      	push	{r7}
 8014f4a:	b083      	sub	sp, #12
 8014f4c:	af00      	add	r7, sp, #0
 8014f4e:	4603      	mov	r3, r0
 8014f50:	6039      	str	r1, [r7, #0]
 8014f52:	71fb      	strb	r3, [r7, #7]
 8014f54:	4613      	mov	r3, r2
 8014f56:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8014f58:	79fb      	ldrb	r3, [r7, #7]
 8014f5a:	2b23      	cmp	r3, #35	; 0x23
 8014f5c:	d84a      	bhi.n	8014ff4 <CDC_Control_HS+0xac>
 8014f5e:	a201      	add	r2, pc, #4	; (adr r2, 8014f64 <CDC_Control_HS+0x1c>)
 8014f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f64:	08014ff5 	.word	0x08014ff5
 8014f68:	08014ff5 	.word	0x08014ff5
 8014f6c:	08014ff5 	.word	0x08014ff5
 8014f70:	08014ff5 	.word	0x08014ff5
 8014f74:	08014ff5 	.word	0x08014ff5
 8014f78:	08014ff5 	.word	0x08014ff5
 8014f7c:	08014ff5 	.word	0x08014ff5
 8014f80:	08014ff5 	.word	0x08014ff5
 8014f84:	08014ff5 	.word	0x08014ff5
 8014f88:	08014ff5 	.word	0x08014ff5
 8014f8c:	08014ff5 	.word	0x08014ff5
 8014f90:	08014ff5 	.word	0x08014ff5
 8014f94:	08014ff5 	.word	0x08014ff5
 8014f98:	08014ff5 	.word	0x08014ff5
 8014f9c:	08014ff5 	.word	0x08014ff5
 8014fa0:	08014ff5 	.word	0x08014ff5
 8014fa4:	08014ff5 	.word	0x08014ff5
 8014fa8:	08014ff5 	.word	0x08014ff5
 8014fac:	08014ff5 	.word	0x08014ff5
 8014fb0:	08014ff5 	.word	0x08014ff5
 8014fb4:	08014ff5 	.word	0x08014ff5
 8014fb8:	08014ff5 	.word	0x08014ff5
 8014fbc:	08014ff5 	.word	0x08014ff5
 8014fc0:	08014ff5 	.word	0x08014ff5
 8014fc4:	08014ff5 	.word	0x08014ff5
 8014fc8:	08014ff5 	.word	0x08014ff5
 8014fcc:	08014ff5 	.word	0x08014ff5
 8014fd0:	08014ff5 	.word	0x08014ff5
 8014fd4:	08014ff5 	.word	0x08014ff5
 8014fd8:	08014ff5 	.word	0x08014ff5
 8014fdc:	08014ff5 	.word	0x08014ff5
 8014fe0:	08014ff5 	.word	0x08014ff5
 8014fe4:	08014ff5 	.word	0x08014ff5
 8014fe8:	08014ff5 	.word	0x08014ff5
 8014fec:	08014ff5 	.word	0x08014ff5
 8014ff0:	08014ff5 	.word	0x08014ff5
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8014ff4:	bf00      	nop
  }

  return (USBD_OK);
 8014ff6:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8014ff8:	4618      	mov	r0, r3
 8014ffa:	370c      	adds	r7, #12
 8014ffc:	46bd      	mov	sp, r7
 8014ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015002:	4770      	bx	lr

08015004 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8015004:	b580      	push	{r7, lr}
 8015006:	b082      	sub	sp, #8
 8015008:	af00      	add	r7, sp, #0
 801500a:	6078      	str	r0, [r7, #4]
 801500c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 801500e:	6879      	ldr	r1, [r7, #4]
 8015010:	4805      	ldr	r0, [pc, #20]	; (8015028 <CDC_Receive_HS+0x24>)
 8015012:	f7fe fb63 	bl	80136dc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8015016:	4804      	ldr	r0, [pc, #16]	; (8015028 <CDC_Receive_HS+0x24>)
 8015018:	f7fe fbbe 	bl	8013798 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801501c:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 801501e:	4618      	mov	r0, r3
 8015020:	3708      	adds	r7, #8
 8015022:	46bd      	mov	sp, r7
 8015024:	bd80      	pop	{r7, pc}
 8015026:	bf00      	nop
 8015028:	24000b30 	.word	0x24000b30

0801502c <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 801502c:	b580      	push	{r7, lr}
 801502e:	b084      	sub	sp, #16
 8015030:	af00      	add	r7, sp, #0
 8015032:	6078      	str	r0, [r7, #4]
 8015034:	460b      	mov	r3, r1
 8015036:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8015038:	2300      	movs	r3, #0
 801503a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 801503c:	4b0d      	ldr	r3, [pc, #52]	; (8015074 <CDC_Transmit_HS+0x48>)
 801503e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015042:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8015044:	68bb      	ldr	r3, [r7, #8]
 8015046:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801504a:	2b00      	cmp	r3, #0
 801504c:	d001      	beq.n	8015052 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 801504e:	2301      	movs	r3, #1
 8015050:	e00b      	b.n	801506a <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8015052:	887b      	ldrh	r3, [r7, #2]
 8015054:	461a      	mov	r2, r3
 8015056:	6879      	ldr	r1, [r7, #4]
 8015058:	4806      	ldr	r0, [pc, #24]	; (8015074 <CDC_Transmit_HS+0x48>)
 801505a:	f7fe fb1d 	bl	8013698 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 801505e:	4805      	ldr	r0, [pc, #20]	; (8015074 <CDC_Transmit_HS+0x48>)
 8015060:	f7fe fb5a 	bl	8013718 <USBD_CDC_TransmitPacket>
 8015064:	4603      	mov	r3, r0
 8015066:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8015068:	7bfb      	ldrb	r3, [r7, #15]
}
 801506a:	4618      	mov	r0, r3
 801506c:	3710      	adds	r7, #16
 801506e:	46bd      	mov	sp, r7
 8015070:	bd80      	pop	{r7, pc}
 8015072:	bf00      	nop
 8015074:	24000b30 	.word	0x24000b30

08015078 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8015078:	b480      	push	{r7}
 801507a:	b087      	sub	sp, #28
 801507c:	af00      	add	r7, sp, #0
 801507e:	60f8      	str	r0, [r7, #12]
 8015080:	60b9      	str	r1, [r7, #8]
 8015082:	4613      	mov	r3, r2
 8015084:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8015086:	2300      	movs	r3, #0
 8015088:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 801508a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801508e:	4618      	mov	r0, r3
 8015090:	371c      	adds	r7, #28
 8015092:	46bd      	mov	sp, r7
 8015094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015098:	4770      	bx	lr
	...

0801509c <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801509c:	b480      	push	{r7}
 801509e:	b083      	sub	sp, #12
 80150a0:	af00      	add	r7, sp, #0
 80150a2:	4603      	mov	r3, r0
 80150a4:	6039      	str	r1, [r7, #0]
 80150a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 80150a8:	683b      	ldr	r3, [r7, #0]
 80150aa:	2212      	movs	r2, #18
 80150ac:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 80150ae:	4b03      	ldr	r3, [pc, #12]	; (80150bc <USBD_HS_DeviceDescriptor+0x20>)
}
 80150b0:	4618      	mov	r0, r3
 80150b2:	370c      	adds	r7, #12
 80150b4:	46bd      	mov	sp, r7
 80150b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ba:	4770      	bx	lr
 80150bc:	240000cc 	.word	0x240000cc

080150c0 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80150c0:	b480      	push	{r7}
 80150c2:	b083      	sub	sp, #12
 80150c4:	af00      	add	r7, sp, #0
 80150c6:	4603      	mov	r3, r0
 80150c8:	6039      	str	r1, [r7, #0]
 80150ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80150cc:	683b      	ldr	r3, [r7, #0]
 80150ce:	2204      	movs	r2, #4
 80150d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80150d2:	4b03      	ldr	r3, [pc, #12]	; (80150e0 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80150d4:	4618      	mov	r0, r3
 80150d6:	370c      	adds	r7, #12
 80150d8:	46bd      	mov	sp, r7
 80150da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150de:	4770      	bx	lr
 80150e0:	240000e0 	.word	0x240000e0

080150e4 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80150e4:	b580      	push	{r7, lr}
 80150e6:	b082      	sub	sp, #8
 80150e8:	af00      	add	r7, sp, #0
 80150ea:	4603      	mov	r3, r0
 80150ec:	6039      	str	r1, [r7, #0]
 80150ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80150f0:	79fb      	ldrb	r3, [r7, #7]
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	d105      	bne.n	8015102 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80150f6:	683a      	ldr	r2, [r7, #0]
 80150f8:	4907      	ldr	r1, [pc, #28]	; (8015118 <USBD_HS_ProductStrDescriptor+0x34>)
 80150fa:	4808      	ldr	r0, [pc, #32]	; (801511c <USBD_HS_ProductStrDescriptor+0x38>)
 80150fc:	f7ff fd9a 	bl	8014c34 <USBD_GetString>
 8015100:	e004      	b.n	801510c <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8015102:	683a      	ldr	r2, [r7, #0]
 8015104:	4904      	ldr	r1, [pc, #16]	; (8015118 <USBD_HS_ProductStrDescriptor+0x34>)
 8015106:	4805      	ldr	r0, [pc, #20]	; (801511c <USBD_HS_ProductStrDescriptor+0x38>)
 8015108:	f7ff fd94 	bl	8014c34 <USBD_GetString>
  }
  return USBD_StrDesc;
 801510c:	4b02      	ldr	r3, [pc, #8]	; (8015118 <USBD_HS_ProductStrDescriptor+0x34>)
}
 801510e:	4618      	mov	r0, r3
 8015110:	3708      	adds	r7, #8
 8015112:	46bd      	mov	sp, r7
 8015114:	bd80      	pop	{r7, pc}
 8015116:	bf00      	nop
 8015118:	24001e0c 	.word	0x24001e0c
 801511c:	08016378 	.word	0x08016378

08015120 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015120:	b580      	push	{r7, lr}
 8015122:	b082      	sub	sp, #8
 8015124:	af00      	add	r7, sp, #0
 8015126:	4603      	mov	r3, r0
 8015128:	6039      	str	r1, [r7, #0]
 801512a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801512c:	683a      	ldr	r2, [r7, #0]
 801512e:	4904      	ldr	r1, [pc, #16]	; (8015140 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8015130:	4804      	ldr	r0, [pc, #16]	; (8015144 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8015132:	f7ff fd7f 	bl	8014c34 <USBD_GetString>
  return USBD_StrDesc;
 8015136:	4b02      	ldr	r3, [pc, #8]	; (8015140 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8015138:	4618      	mov	r0, r3
 801513a:	3708      	adds	r7, #8
 801513c:	46bd      	mov	sp, r7
 801513e:	bd80      	pop	{r7, pc}
 8015140:	24001e0c 	.word	0x24001e0c
 8015144:	08016394 	.word	0x08016394

08015148 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015148:	b580      	push	{r7, lr}
 801514a:	b082      	sub	sp, #8
 801514c:	af00      	add	r7, sp, #0
 801514e:	4603      	mov	r3, r0
 8015150:	6039      	str	r1, [r7, #0]
 8015152:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015154:	683b      	ldr	r3, [r7, #0]
 8015156:	221a      	movs	r2, #26
 8015158:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801515a:	f000 f843 	bl	80151e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801515e:	4b02      	ldr	r3, [pc, #8]	; (8015168 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8015160:	4618      	mov	r0, r3
 8015162:	3708      	adds	r7, #8
 8015164:	46bd      	mov	sp, r7
 8015166:	bd80      	pop	{r7, pc}
 8015168:	240000e4 	.word	0x240000e4

0801516c <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801516c:	b580      	push	{r7, lr}
 801516e:	b082      	sub	sp, #8
 8015170:	af00      	add	r7, sp, #0
 8015172:	4603      	mov	r3, r0
 8015174:	6039      	str	r1, [r7, #0]
 8015176:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015178:	79fb      	ldrb	r3, [r7, #7]
 801517a:	2b00      	cmp	r3, #0
 801517c:	d105      	bne.n	801518a <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801517e:	683a      	ldr	r2, [r7, #0]
 8015180:	4907      	ldr	r1, [pc, #28]	; (80151a0 <USBD_HS_ConfigStrDescriptor+0x34>)
 8015182:	4808      	ldr	r0, [pc, #32]	; (80151a4 <USBD_HS_ConfigStrDescriptor+0x38>)
 8015184:	f7ff fd56 	bl	8014c34 <USBD_GetString>
 8015188:	e004      	b.n	8015194 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801518a:	683a      	ldr	r2, [r7, #0]
 801518c:	4904      	ldr	r1, [pc, #16]	; (80151a0 <USBD_HS_ConfigStrDescriptor+0x34>)
 801518e:	4805      	ldr	r0, [pc, #20]	; (80151a4 <USBD_HS_ConfigStrDescriptor+0x38>)
 8015190:	f7ff fd50 	bl	8014c34 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015194:	4b02      	ldr	r3, [pc, #8]	; (80151a0 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8015196:	4618      	mov	r0, r3
 8015198:	3708      	adds	r7, #8
 801519a:	46bd      	mov	sp, r7
 801519c:	bd80      	pop	{r7, pc}
 801519e:	bf00      	nop
 80151a0:	24001e0c 	.word	0x24001e0c
 80151a4:	08016398 	.word	0x08016398

080151a8 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80151a8:	b580      	push	{r7, lr}
 80151aa:	b082      	sub	sp, #8
 80151ac:	af00      	add	r7, sp, #0
 80151ae:	4603      	mov	r3, r0
 80151b0:	6039      	str	r1, [r7, #0]
 80151b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80151b4:	79fb      	ldrb	r3, [r7, #7]
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	d105      	bne.n	80151c6 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80151ba:	683a      	ldr	r2, [r7, #0]
 80151bc:	4907      	ldr	r1, [pc, #28]	; (80151dc <USBD_HS_InterfaceStrDescriptor+0x34>)
 80151be:	4808      	ldr	r0, [pc, #32]	; (80151e0 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80151c0:	f7ff fd38 	bl	8014c34 <USBD_GetString>
 80151c4:	e004      	b.n	80151d0 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80151c6:	683a      	ldr	r2, [r7, #0]
 80151c8:	4904      	ldr	r1, [pc, #16]	; (80151dc <USBD_HS_InterfaceStrDescriptor+0x34>)
 80151ca:	4805      	ldr	r0, [pc, #20]	; (80151e0 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80151cc:	f7ff fd32 	bl	8014c34 <USBD_GetString>
  }
  return USBD_StrDesc;
 80151d0:	4b02      	ldr	r3, [pc, #8]	; (80151dc <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 80151d2:	4618      	mov	r0, r3
 80151d4:	3708      	adds	r7, #8
 80151d6:	46bd      	mov	sp, r7
 80151d8:	bd80      	pop	{r7, pc}
 80151da:	bf00      	nop
 80151dc:	24001e0c 	.word	0x24001e0c
 80151e0:	080163a4 	.word	0x080163a4

080151e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80151e4:	b580      	push	{r7, lr}
 80151e6:	b084      	sub	sp, #16
 80151e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80151ea:	4b0f      	ldr	r3, [pc, #60]	; (8015228 <Get_SerialNum+0x44>)
 80151ec:	681b      	ldr	r3, [r3, #0]
 80151ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80151f0:	4b0e      	ldr	r3, [pc, #56]	; (801522c <Get_SerialNum+0x48>)
 80151f2:	681b      	ldr	r3, [r3, #0]
 80151f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80151f6:	4b0e      	ldr	r3, [pc, #56]	; (8015230 <Get_SerialNum+0x4c>)
 80151f8:	681b      	ldr	r3, [r3, #0]
 80151fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80151fc:	68fa      	ldr	r2, [r7, #12]
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	4413      	add	r3, r2
 8015202:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	2b00      	cmp	r3, #0
 8015208:	d009      	beq.n	801521e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801520a:	2208      	movs	r2, #8
 801520c:	4909      	ldr	r1, [pc, #36]	; (8015234 <Get_SerialNum+0x50>)
 801520e:	68f8      	ldr	r0, [r7, #12]
 8015210:	f000 f814 	bl	801523c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015214:	2204      	movs	r2, #4
 8015216:	4908      	ldr	r1, [pc, #32]	; (8015238 <Get_SerialNum+0x54>)
 8015218:	68b8      	ldr	r0, [r7, #8]
 801521a:	f000 f80f 	bl	801523c <IntToUnicode>
  }
}
 801521e:	bf00      	nop
 8015220:	3710      	adds	r7, #16
 8015222:	46bd      	mov	sp, r7
 8015224:	bd80      	pop	{r7, pc}
 8015226:	bf00      	nop
 8015228:	1ff1e800 	.word	0x1ff1e800
 801522c:	1ff1e804 	.word	0x1ff1e804
 8015230:	1ff1e808 	.word	0x1ff1e808
 8015234:	240000e6 	.word	0x240000e6
 8015238:	240000f6 	.word	0x240000f6

0801523c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801523c:	b480      	push	{r7}
 801523e:	b087      	sub	sp, #28
 8015240:	af00      	add	r7, sp, #0
 8015242:	60f8      	str	r0, [r7, #12]
 8015244:	60b9      	str	r1, [r7, #8]
 8015246:	4613      	mov	r3, r2
 8015248:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801524a:	2300      	movs	r3, #0
 801524c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801524e:	2300      	movs	r3, #0
 8015250:	75fb      	strb	r3, [r7, #23]
 8015252:	e027      	b.n	80152a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015254:	68fb      	ldr	r3, [r7, #12]
 8015256:	0f1b      	lsrs	r3, r3, #28
 8015258:	2b09      	cmp	r3, #9
 801525a:	d80b      	bhi.n	8015274 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	0f1b      	lsrs	r3, r3, #28
 8015260:	b2da      	uxtb	r2, r3
 8015262:	7dfb      	ldrb	r3, [r7, #23]
 8015264:	005b      	lsls	r3, r3, #1
 8015266:	4619      	mov	r1, r3
 8015268:	68bb      	ldr	r3, [r7, #8]
 801526a:	440b      	add	r3, r1
 801526c:	3230      	adds	r2, #48	; 0x30
 801526e:	b2d2      	uxtb	r2, r2
 8015270:	701a      	strb	r2, [r3, #0]
 8015272:	e00a      	b.n	801528a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015274:	68fb      	ldr	r3, [r7, #12]
 8015276:	0f1b      	lsrs	r3, r3, #28
 8015278:	b2da      	uxtb	r2, r3
 801527a:	7dfb      	ldrb	r3, [r7, #23]
 801527c:	005b      	lsls	r3, r3, #1
 801527e:	4619      	mov	r1, r3
 8015280:	68bb      	ldr	r3, [r7, #8]
 8015282:	440b      	add	r3, r1
 8015284:	3237      	adds	r2, #55	; 0x37
 8015286:	b2d2      	uxtb	r2, r2
 8015288:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	011b      	lsls	r3, r3, #4
 801528e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015290:	7dfb      	ldrb	r3, [r7, #23]
 8015292:	005b      	lsls	r3, r3, #1
 8015294:	3301      	adds	r3, #1
 8015296:	68ba      	ldr	r2, [r7, #8]
 8015298:	4413      	add	r3, r2
 801529a:	2200      	movs	r2, #0
 801529c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801529e:	7dfb      	ldrb	r3, [r7, #23]
 80152a0:	3301      	adds	r3, #1
 80152a2:	75fb      	strb	r3, [r7, #23]
 80152a4:	7dfa      	ldrb	r2, [r7, #23]
 80152a6:	79fb      	ldrb	r3, [r7, #7]
 80152a8:	429a      	cmp	r2, r3
 80152aa:	d3d3      	bcc.n	8015254 <IntToUnicode+0x18>
  }
}
 80152ac:	bf00      	nop
 80152ae:	bf00      	nop
 80152b0:	371c      	adds	r7, #28
 80152b2:	46bd      	mov	sp, r7
 80152b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152b8:	4770      	bx	lr
	...

080152bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80152bc:	b580      	push	{r7, lr}
 80152be:	b0b2      	sub	sp, #200	; 0xc8
 80152c0:	af00      	add	r7, sp, #0
 80152c2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80152c4:	f107 0310 	add.w	r3, r7, #16
 80152c8:	22b8      	movs	r2, #184	; 0xb8
 80152ca:	2100      	movs	r1, #0
 80152cc:	4618      	mov	r0, r3
 80152ce:	f000 fb39 	bl	8015944 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	681b      	ldr	r3, [r3, #0]
 80152d6:	4a1a      	ldr	r2, [pc, #104]	; (8015340 <HAL_PCD_MspInit+0x84>)
 80152d8:	4293      	cmp	r3, r2
 80152da:	d12c      	bne.n	8015336 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80152dc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80152e0:	f04f 0300 	mov.w	r3, #0
 80152e4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80152e8:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80152ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80152f0:	f107 0310 	add.w	r3, r7, #16
 80152f4:	4618      	mov	r0, r3
 80152f6:	f7f4 fa5b 	bl	80097b0 <HAL_RCCEx_PeriphCLKConfig>
 80152fa:	4603      	mov	r3, r0
 80152fc:	2b00      	cmp	r3, #0
 80152fe:	d001      	beq.n	8015304 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8015300:	f7ec ff3a 	bl	8002178 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8015304:	f7f3 fa74 	bl	80087f0 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8015308:	4b0e      	ldr	r3, [pc, #56]	; (8015344 <HAL_PCD_MspInit+0x88>)
 801530a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801530e:	4a0d      	ldr	r2, [pc, #52]	; (8015344 <HAL_PCD_MspInit+0x88>)
 8015310:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8015314:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8015318:	4b0a      	ldr	r3, [pc, #40]	; (8015344 <HAL_PCD_MspInit+0x88>)
 801531a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801531e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015322:	60fb      	str	r3, [r7, #12]
 8015324:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8015326:	2200      	movs	r2, #0
 8015328:	2100      	movs	r1, #0
 801532a:	204d      	movs	r0, #77	; 0x4d
 801532c:	f7ef fc13 	bl	8004b56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8015330:	204d      	movs	r0, #77	; 0x4d
 8015332:	f7ef fc2a 	bl	8004b8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8015336:	bf00      	nop
 8015338:	37c8      	adds	r7, #200	; 0xc8
 801533a:	46bd      	mov	sp, r7
 801533c:	bd80      	pop	{r7, pc}
 801533e:	bf00      	nop
 8015340:	40040000 	.word	0x40040000
 8015344:	58024400 	.word	0x58024400

08015348 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015348:	b580      	push	{r7, lr}
 801534a:	b082      	sub	sp, #8
 801534c:	af00      	add	r7, sp, #0
 801534e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801535c:	4619      	mov	r1, r3
 801535e:	4610      	mov	r0, r2
 8015360:	f7fe fb03 	bl	801396a <USBD_LL_SetupStage>
}
 8015364:	bf00      	nop
 8015366:	3708      	adds	r7, #8
 8015368:	46bd      	mov	sp, r7
 801536a:	bd80      	pop	{r7, pc}

0801536c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801536c:	b580      	push	{r7, lr}
 801536e:	b082      	sub	sp, #8
 8015370:	af00      	add	r7, sp, #0
 8015372:	6078      	str	r0, [r7, #4]
 8015374:	460b      	mov	r3, r1
 8015376:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801537e:	78fa      	ldrb	r2, [r7, #3]
 8015380:	6879      	ldr	r1, [r7, #4]
 8015382:	4613      	mov	r3, r2
 8015384:	00db      	lsls	r3, r3, #3
 8015386:	4413      	add	r3, r2
 8015388:	009b      	lsls	r3, r3, #2
 801538a:	440b      	add	r3, r1
 801538c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8015390:	681a      	ldr	r2, [r3, #0]
 8015392:	78fb      	ldrb	r3, [r7, #3]
 8015394:	4619      	mov	r1, r3
 8015396:	f7fe fb3d 	bl	8013a14 <USBD_LL_DataOutStage>
}
 801539a:	bf00      	nop
 801539c:	3708      	adds	r7, #8
 801539e:	46bd      	mov	sp, r7
 80153a0:	bd80      	pop	{r7, pc}

080153a2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80153a2:	b580      	push	{r7, lr}
 80153a4:	b082      	sub	sp, #8
 80153a6:	af00      	add	r7, sp, #0
 80153a8:	6078      	str	r0, [r7, #4]
 80153aa:	460b      	mov	r3, r1
 80153ac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80153b4:	78fa      	ldrb	r2, [r7, #3]
 80153b6:	6879      	ldr	r1, [r7, #4]
 80153b8:	4613      	mov	r3, r2
 80153ba:	00db      	lsls	r3, r3, #3
 80153bc:	4413      	add	r3, r2
 80153be:	009b      	lsls	r3, r3, #2
 80153c0:	440b      	add	r3, r1
 80153c2:	3348      	adds	r3, #72	; 0x48
 80153c4:	681a      	ldr	r2, [r3, #0]
 80153c6:	78fb      	ldrb	r3, [r7, #3]
 80153c8:	4619      	mov	r1, r3
 80153ca:	f7fe fbd6 	bl	8013b7a <USBD_LL_DataInStage>
}
 80153ce:	bf00      	nop
 80153d0:	3708      	adds	r7, #8
 80153d2:	46bd      	mov	sp, r7
 80153d4:	bd80      	pop	{r7, pc}

080153d6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80153d6:	b580      	push	{r7, lr}
 80153d8:	b082      	sub	sp, #8
 80153da:	af00      	add	r7, sp, #0
 80153dc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80153e4:	4618      	mov	r0, r3
 80153e6:	f7fe fd10 	bl	8013e0a <USBD_LL_SOF>
}
 80153ea:	bf00      	nop
 80153ec:	3708      	adds	r7, #8
 80153ee:	46bd      	mov	sp, r7
 80153f0:	bd80      	pop	{r7, pc}

080153f2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80153f2:	b580      	push	{r7, lr}
 80153f4:	b084      	sub	sp, #16
 80153f6:	af00      	add	r7, sp, #0
 80153f8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80153fa:	2301      	movs	r3, #1
 80153fc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	691b      	ldr	r3, [r3, #16]
 8015402:	2b00      	cmp	r3, #0
 8015404:	d102      	bne.n	801540c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8015406:	2300      	movs	r3, #0
 8015408:	73fb      	strb	r3, [r7, #15]
 801540a:	e008      	b.n	801541e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	691b      	ldr	r3, [r3, #16]
 8015410:	2b02      	cmp	r3, #2
 8015412:	d102      	bne.n	801541a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015414:	2301      	movs	r3, #1
 8015416:	73fb      	strb	r3, [r7, #15]
 8015418:	e001      	b.n	801541e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801541a:	f7ec fead 	bl	8002178 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015424:	7bfa      	ldrb	r2, [r7, #15]
 8015426:	4611      	mov	r1, r2
 8015428:	4618      	mov	r0, r3
 801542a:	f7fe fcaa 	bl	8013d82 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015434:	4618      	mov	r0, r3
 8015436:	f7fe fc52 	bl	8013cde <USBD_LL_Reset>
}
 801543a:	bf00      	nop
 801543c:	3710      	adds	r7, #16
 801543e:	46bd      	mov	sp, r7
 8015440:	bd80      	pop	{r7, pc}
	...

08015444 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015444:	b580      	push	{r7, lr}
 8015446:	b082      	sub	sp, #8
 8015448:	af00      	add	r7, sp, #0
 801544a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015452:	4618      	mov	r0, r3
 8015454:	f7fe fca5 	bl	8013da2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	681b      	ldr	r3, [r3, #0]
 801545c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015460:	681b      	ldr	r3, [r3, #0]
 8015462:	687a      	ldr	r2, [r7, #4]
 8015464:	6812      	ldr	r2, [r2, #0]
 8015466:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801546a:	f043 0301 	orr.w	r3, r3, #1
 801546e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	6a1b      	ldr	r3, [r3, #32]
 8015474:	2b00      	cmp	r3, #0
 8015476:	d005      	beq.n	8015484 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015478:	4b04      	ldr	r3, [pc, #16]	; (801548c <HAL_PCD_SuspendCallback+0x48>)
 801547a:	691b      	ldr	r3, [r3, #16]
 801547c:	4a03      	ldr	r2, [pc, #12]	; (801548c <HAL_PCD_SuspendCallback+0x48>)
 801547e:	f043 0306 	orr.w	r3, r3, #6
 8015482:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015484:	bf00      	nop
 8015486:	3708      	adds	r7, #8
 8015488:	46bd      	mov	sp, r7
 801548a:	bd80      	pop	{r7, pc}
 801548c:	e000ed00 	.word	0xe000ed00

08015490 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015490:	b580      	push	{r7, lr}
 8015492:	b082      	sub	sp, #8
 8015494:	af00      	add	r7, sp, #0
 8015496:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801549e:	4618      	mov	r0, r3
 80154a0:	f7fe fc9b 	bl	8013dda <USBD_LL_Resume>
}
 80154a4:	bf00      	nop
 80154a6:	3708      	adds	r7, #8
 80154a8:	46bd      	mov	sp, r7
 80154aa:	bd80      	pop	{r7, pc}

080154ac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80154ac:	b580      	push	{r7, lr}
 80154ae:	b082      	sub	sp, #8
 80154b0:	af00      	add	r7, sp, #0
 80154b2:	6078      	str	r0, [r7, #4]
 80154b4:	460b      	mov	r3, r1
 80154b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80154be:	78fa      	ldrb	r2, [r7, #3]
 80154c0:	4611      	mov	r1, r2
 80154c2:	4618      	mov	r0, r3
 80154c4:	f7fe fcf3 	bl	8013eae <USBD_LL_IsoOUTIncomplete>
}
 80154c8:	bf00      	nop
 80154ca:	3708      	adds	r7, #8
 80154cc:	46bd      	mov	sp, r7
 80154ce:	bd80      	pop	{r7, pc}

080154d0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80154d0:	b580      	push	{r7, lr}
 80154d2:	b082      	sub	sp, #8
 80154d4:	af00      	add	r7, sp, #0
 80154d6:	6078      	str	r0, [r7, #4]
 80154d8:	460b      	mov	r3, r1
 80154da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80154e2:	78fa      	ldrb	r2, [r7, #3]
 80154e4:	4611      	mov	r1, r2
 80154e6:	4618      	mov	r0, r3
 80154e8:	f7fe fcaf 	bl	8013e4a <USBD_LL_IsoINIncomplete>
}
 80154ec:	bf00      	nop
 80154ee:	3708      	adds	r7, #8
 80154f0:	46bd      	mov	sp, r7
 80154f2:	bd80      	pop	{r7, pc}

080154f4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80154f4:	b580      	push	{r7, lr}
 80154f6:	b082      	sub	sp, #8
 80154f8:	af00      	add	r7, sp, #0
 80154fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015502:	4618      	mov	r0, r3
 8015504:	f7fe fd05 	bl	8013f12 <USBD_LL_DevConnected>
}
 8015508:	bf00      	nop
 801550a:	3708      	adds	r7, #8
 801550c:	46bd      	mov	sp, r7
 801550e:	bd80      	pop	{r7, pc}

08015510 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015510:	b580      	push	{r7, lr}
 8015512:	b082      	sub	sp, #8
 8015514:	af00      	add	r7, sp, #0
 8015516:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801551e:	4618      	mov	r0, r3
 8015520:	f7fe fd02 	bl	8013f28 <USBD_LL_DevDisconnected>
}
 8015524:	bf00      	nop
 8015526:	3708      	adds	r7, #8
 8015528:	46bd      	mov	sp, r7
 801552a:	bd80      	pop	{r7, pc}

0801552c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801552c:	b580      	push	{r7, lr}
 801552e:	b082      	sub	sp, #8
 8015530:	af00      	add	r7, sp, #0
 8015532:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	781b      	ldrb	r3, [r3, #0]
 8015538:	2b01      	cmp	r3, #1
 801553a:	d140      	bne.n	80155be <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 801553c:	4a22      	ldr	r2, [pc, #136]	; (80155c8 <USBD_LL_Init+0x9c>)
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	4a20      	ldr	r2, [pc, #128]	; (80155c8 <USBD_LL_Init+0x9c>)
 8015548:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 801554c:	4b1e      	ldr	r3, [pc, #120]	; (80155c8 <USBD_LL_Init+0x9c>)
 801554e:	4a1f      	ldr	r2, [pc, #124]	; (80155cc <USBD_LL_Init+0xa0>)
 8015550:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8015552:	4b1d      	ldr	r3, [pc, #116]	; (80155c8 <USBD_LL_Init+0x9c>)
 8015554:	2209      	movs	r2, #9
 8015556:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8015558:	4b1b      	ldr	r3, [pc, #108]	; (80155c8 <USBD_LL_Init+0x9c>)
 801555a:	2202      	movs	r2, #2
 801555c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801555e:	4b1a      	ldr	r3, [pc, #104]	; (80155c8 <USBD_LL_Init+0x9c>)
 8015560:	2200      	movs	r2, #0
 8015562:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8015564:	4b18      	ldr	r3, [pc, #96]	; (80155c8 <USBD_LL_Init+0x9c>)
 8015566:	2202      	movs	r2, #2
 8015568:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801556a:	4b17      	ldr	r3, [pc, #92]	; (80155c8 <USBD_LL_Init+0x9c>)
 801556c:	2200      	movs	r2, #0
 801556e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8015570:	4b15      	ldr	r3, [pc, #84]	; (80155c8 <USBD_LL_Init+0x9c>)
 8015572:	2200      	movs	r2, #0
 8015574:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8015576:	4b14      	ldr	r3, [pc, #80]	; (80155c8 <USBD_LL_Init+0x9c>)
 8015578:	2200      	movs	r2, #0
 801557a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 801557c:	4b12      	ldr	r3, [pc, #72]	; (80155c8 <USBD_LL_Init+0x9c>)
 801557e:	2200      	movs	r2, #0
 8015580:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8015582:	4b11      	ldr	r3, [pc, #68]	; (80155c8 <USBD_LL_Init+0x9c>)
 8015584:	2200      	movs	r2, #0
 8015586:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8015588:	4b0f      	ldr	r3, [pc, #60]	; (80155c8 <USBD_LL_Init+0x9c>)
 801558a:	2200      	movs	r2, #0
 801558c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 801558e:	480e      	ldr	r0, [pc, #56]	; (80155c8 <USBD_LL_Init+0x9c>)
 8015590:	f7f1 fe3b 	bl	800720a <HAL_PCD_Init>
 8015594:	4603      	mov	r3, r0
 8015596:	2b00      	cmp	r3, #0
 8015598:	d001      	beq.n	801559e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801559a:	f7ec fded 	bl	8002178 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 801559e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80155a2:	4809      	ldr	r0, [pc, #36]	; (80155c8 <USBD_LL_Init+0x9c>)
 80155a4:	f7f3 f8a9 	bl	80086fa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 80155a8:	2280      	movs	r2, #128	; 0x80
 80155aa:	2100      	movs	r1, #0
 80155ac:	4806      	ldr	r0, [pc, #24]	; (80155c8 <USBD_LL_Init+0x9c>)
 80155ae:	f7f3 f85d 	bl	800866c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 80155b2:	f44f 72ba 	mov.w	r2, #372	; 0x174
 80155b6:	2101      	movs	r1, #1
 80155b8:	4803      	ldr	r0, [pc, #12]	; (80155c8 <USBD_LL_Init+0x9c>)
 80155ba:	f7f3 f857 	bl	800866c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 80155be:	2300      	movs	r3, #0
}
 80155c0:	4618      	mov	r0, r3
 80155c2:	3708      	adds	r7, #8
 80155c4:	46bd      	mov	sp, r7
 80155c6:	bd80      	pop	{r7, pc}
 80155c8:	2400200c 	.word	0x2400200c
 80155cc:	40040000 	.word	0x40040000

080155d0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80155d0:	b580      	push	{r7, lr}
 80155d2:	b084      	sub	sp, #16
 80155d4:	af00      	add	r7, sp, #0
 80155d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80155d8:	2300      	movs	r3, #0
 80155da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80155dc:	2300      	movs	r3, #0
 80155de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80155e6:	4618      	mov	r0, r3
 80155e8:	f7f1 ff33 	bl	8007452 <HAL_PCD_Start>
 80155ec:	4603      	mov	r3, r0
 80155ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80155f0:	7bfb      	ldrb	r3, [r7, #15]
 80155f2:	4618      	mov	r0, r3
 80155f4:	f000 f942 	bl	801587c <USBD_Get_USB_Status>
 80155f8:	4603      	mov	r3, r0
 80155fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80155fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80155fe:	4618      	mov	r0, r3
 8015600:	3710      	adds	r7, #16
 8015602:	46bd      	mov	sp, r7
 8015604:	bd80      	pop	{r7, pc}

08015606 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015606:	b580      	push	{r7, lr}
 8015608:	b084      	sub	sp, #16
 801560a:	af00      	add	r7, sp, #0
 801560c:	6078      	str	r0, [r7, #4]
 801560e:	4608      	mov	r0, r1
 8015610:	4611      	mov	r1, r2
 8015612:	461a      	mov	r2, r3
 8015614:	4603      	mov	r3, r0
 8015616:	70fb      	strb	r3, [r7, #3]
 8015618:	460b      	mov	r3, r1
 801561a:	70bb      	strb	r3, [r7, #2]
 801561c:	4613      	mov	r3, r2
 801561e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015620:	2300      	movs	r3, #0
 8015622:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015624:	2300      	movs	r3, #0
 8015626:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801562e:	78bb      	ldrb	r3, [r7, #2]
 8015630:	883a      	ldrh	r2, [r7, #0]
 8015632:	78f9      	ldrb	r1, [r7, #3]
 8015634:	f7f2 fc33 	bl	8007e9e <HAL_PCD_EP_Open>
 8015638:	4603      	mov	r3, r0
 801563a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801563c:	7bfb      	ldrb	r3, [r7, #15]
 801563e:	4618      	mov	r0, r3
 8015640:	f000 f91c 	bl	801587c <USBD_Get_USB_Status>
 8015644:	4603      	mov	r3, r0
 8015646:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015648:	7bbb      	ldrb	r3, [r7, #14]
}
 801564a:	4618      	mov	r0, r3
 801564c:	3710      	adds	r7, #16
 801564e:	46bd      	mov	sp, r7
 8015650:	bd80      	pop	{r7, pc}

08015652 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015652:	b580      	push	{r7, lr}
 8015654:	b084      	sub	sp, #16
 8015656:	af00      	add	r7, sp, #0
 8015658:	6078      	str	r0, [r7, #4]
 801565a:	460b      	mov	r3, r1
 801565c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801565e:	2300      	movs	r3, #0
 8015660:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015662:	2300      	movs	r3, #0
 8015664:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801566c:	78fa      	ldrb	r2, [r7, #3]
 801566e:	4611      	mov	r1, r2
 8015670:	4618      	mov	r0, r3
 8015672:	f7f2 fc7c 	bl	8007f6e <HAL_PCD_EP_Close>
 8015676:	4603      	mov	r3, r0
 8015678:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801567a:	7bfb      	ldrb	r3, [r7, #15]
 801567c:	4618      	mov	r0, r3
 801567e:	f000 f8fd 	bl	801587c <USBD_Get_USB_Status>
 8015682:	4603      	mov	r3, r0
 8015684:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015686:	7bbb      	ldrb	r3, [r7, #14]
}
 8015688:	4618      	mov	r0, r3
 801568a:	3710      	adds	r7, #16
 801568c:	46bd      	mov	sp, r7
 801568e:	bd80      	pop	{r7, pc}

08015690 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015690:	b580      	push	{r7, lr}
 8015692:	b084      	sub	sp, #16
 8015694:	af00      	add	r7, sp, #0
 8015696:	6078      	str	r0, [r7, #4]
 8015698:	460b      	mov	r3, r1
 801569a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801569c:	2300      	movs	r3, #0
 801569e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80156a0:	2300      	movs	r3, #0
 80156a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80156aa:	78fa      	ldrb	r2, [r7, #3]
 80156ac:	4611      	mov	r1, r2
 80156ae:	4618      	mov	r0, r3
 80156b0:	f7f2 fd36 	bl	8008120 <HAL_PCD_EP_SetStall>
 80156b4:	4603      	mov	r3, r0
 80156b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80156b8:	7bfb      	ldrb	r3, [r7, #15]
 80156ba:	4618      	mov	r0, r3
 80156bc:	f000 f8de 	bl	801587c <USBD_Get_USB_Status>
 80156c0:	4603      	mov	r3, r0
 80156c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80156c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80156c6:	4618      	mov	r0, r3
 80156c8:	3710      	adds	r7, #16
 80156ca:	46bd      	mov	sp, r7
 80156cc:	bd80      	pop	{r7, pc}

080156ce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80156ce:	b580      	push	{r7, lr}
 80156d0:	b084      	sub	sp, #16
 80156d2:	af00      	add	r7, sp, #0
 80156d4:	6078      	str	r0, [r7, #4]
 80156d6:	460b      	mov	r3, r1
 80156d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80156da:	2300      	movs	r3, #0
 80156dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80156de:	2300      	movs	r3, #0
 80156e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80156e8:	78fa      	ldrb	r2, [r7, #3]
 80156ea:	4611      	mov	r1, r2
 80156ec:	4618      	mov	r0, r3
 80156ee:	f7f2 fd7b 	bl	80081e8 <HAL_PCD_EP_ClrStall>
 80156f2:	4603      	mov	r3, r0
 80156f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80156f6:	7bfb      	ldrb	r3, [r7, #15]
 80156f8:	4618      	mov	r0, r3
 80156fa:	f000 f8bf 	bl	801587c <USBD_Get_USB_Status>
 80156fe:	4603      	mov	r3, r0
 8015700:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015702:	7bbb      	ldrb	r3, [r7, #14]
}
 8015704:	4618      	mov	r0, r3
 8015706:	3710      	adds	r7, #16
 8015708:	46bd      	mov	sp, r7
 801570a:	bd80      	pop	{r7, pc}

0801570c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801570c:	b480      	push	{r7}
 801570e:	b085      	sub	sp, #20
 8015710:	af00      	add	r7, sp, #0
 8015712:	6078      	str	r0, [r7, #4]
 8015714:	460b      	mov	r3, r1
 8015716:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801571e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015720:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015724:	2b00      	cmp	r3, #0
 8015726:	da0b      	bge.n	8015740 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015728:	78fb      	ldrb	r3, [r7, #3]
 801572a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801572e:	68f9      	ldr	r1, [r7, #12]
 8015730:	4613      	mov	r3, r2
 8015732:	00db      	lsls	r3, r3, #3
 8015734:	4413      	add	r3, r2
 8015736:	009b      	lsls	r3, r3, #2
 8015738:	440b      	add	r3, r1
 801573a:	333e      	adds	r3, #62	; 0x3e
 801573c:	781b      	ldrb	r3, [r3, #0]
 801573e:	e00b      	b.n	8015758 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015740:	78fb      	ldrb	r3, [r7, #3]
 8015742:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015746:	68f9      	ldr	r1, [r7, #12]
 8015748:	4613      	mov	r3, r2
 801574a:	00db      	lsls	r3, r3, #3
 801574c:	4413      	add	r3, r2
 801574e:	009b      	lsls	r3, r3, #2
 8015750:	440b      	add	r3, r1
 8015752:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8015756:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015758:	4618      	mov	r0, r3
 801575a:	3714      	adds	r7, #20
 801575c:	46bd      	mov	sp, r7
 801575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015762:	4770      	bx	lr

08015764 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015764:	b580      	push	{r7, lr}
 8015766:	b084      	sub	sp, #16
 8015768:	af00      	add	r7, sp, #0
 801576a:	6078      	str	r0, [r7, #4]
 801576c:	460b      	mov	r3, r1
 801576e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015770:	2300      	movs	r3, #0
 8015772:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015774:	2300      	movs	r3, #0
 8015776:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801577e:	78fa      	ldrb	r2, [r7, #3]
 8015780:	4611      	mov	r1, r2
 8015782:	4618      	mov	r0, r3
 8015784:	f7f2 fb66 	bl	8007e54 <HAL_PCD_SetAddress>
 8015788:	4603      	mov	r3, r0
 801578a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801578c:	7bfb      	ldrb	r3, [r7, #15]
 801578e:	4618      	mov	r0, r3
 8015790:	f000 f874 	bl	801587c <USBD_Get_USB_Status>
 8015794:	4603      	mov	r3, r0
 8015796:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015798:	7bbb      	ldrb	r3, [r7, #14]
}
 801579a:	4618      	mov	r0, r3
 801579c:	3710      	adds	r7, #16
 801579e:	46bd      	mov	sp, r7
 80157a0:	bd80      	pop	{r7, pc}

080157a2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80157a2:	b580      	push	{r7, lr}
 80157a4:	b086      	sub	sp, #24
 80157a6:	af00      	add	r7, sp, #0
 80157a8:	60f8      	str	r0, [r7, #12]
 80157aa:	607a      	str	r2, [r7, #4]
 80157ac:	603b      	str	r3, [r7, #0]
 80157ae:	460b      	mov	r3, r1
 80157b0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80157b2:	2300      	movs	r3, #0
 80157b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80157b6:	2300      	movs	r3, #0
 80157b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80157ba:	68fb      	ldr	r3, [r7, #12]
 80157bc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80157c0:	7af9      	ldrb	r1, [r7, #11]
 80157c2:	683b      	ldr	r3, [r7, #0]
 80157c4:	687a      	ldr	r2, [r7, #4]
 80157c6:	f7f2 fc70 	bl	80080aa <HAL_PCD_EP_Transmit>
 80157ca:	4603      	mov	r3, r0
 80157cc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80157ce:	7dfb      	ldrb	r3, [r7, #23]
 80157d0:	4618      	mov	r0, r3
 80157d2:	f000 f853 	bl	801587c <USBD_Get_USB_Status>
 80157d6:	4603      	mov	r3, r0
 80157d8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80157da:	7dbb      	ldrb	r3, [r7, #22]
}
 80157dc:	4618      	mov	r0, r3
 80157de:	3718      	adds	r7, #24
 80157e0:	46bd      	mov	sp, r7
 80157e2:	bd80      	pop	{r7, pc}

080157e4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80157e4:	b580      	push	{r7, lr}
 80157e6:	b086      	sub	sp, #24
 80157e8:	af00      	add	r7, sp, #0
 80157ea:	60f8      	str	r0, [r7, #12]
 80157ec:	607a      	str	r2, [r7, #4]
 80157ee:	603b      	str	r3, [r7, #0]
 80157f0:	460b      	mov	r3, r1
 80157f2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80157f4:	2300      	movs	r3, #0
 80157f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80157f8:	2300      	movs	r3, #0
 80157fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80157fc:	68fb      	ldr	r3, [r7, #12]
 80157fe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8015802:	7af9      	ldrb	r1, [r7, #11]
 8015804:	683b      	ldr	r3, [r7, #0]
 8015806:	687a      	ldr	r2, [r7, #4]
 8015808:	f7f2 fbfb 	bl	8008002 <HAL_PCD_EP_Receive>
 801580c:	4603      	mov	r3, r0
 801580e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015810:	7dfb      	ldrb	r3, [r7, #23]
 8015812:	4618      	mov	r0, r3
 8015814:	f000 f832 	bl	801587c <USBD_Get_USB_Status>
 8015818:	4603      	mov	r3, r0
 801581a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801581c:	7dbb      	ldrb	r3, [r7, #22]
}
 801581e:	4618      	mov	r0, r3
 8015820:	3718      	adds	r7, #24
 8015822:	46bd      	mov	sp, r7
 8015824:	bd80      	pop	{r7, pc}

08015826 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015826:	b580      	push	{r7, lr}
 8015828:	b082      	sub	sp, #8
 801582a:	af00      	add	r7, sp, #0
 801582c:	6078      	str	r0, [r7, #4]
 801582e:	460b      	mov	r3, r1
 8015830:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015838:	78fa      	ldrb	r2, [r7, #3]
 801583a:	4611      	mov	r1, r2
 801583c:	4618      	mov	r0, r3
 801583e:	f7f2 fc1c 	bl	800807a <HAL_PCD_EP_GetRxCount>
 8015842:	4603      	mov	r3, r0
}
 8015844:	4618      	mov	r0, r3
 8015846:	3708      	adds	r7, #8
 8015848:	46bd      	mov	sp, r7
 801584a:	bd80      	pop	{r7, pc}

0801584c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801584c:	b480      	push	{r7}
 801584e:	b083      	sub	sp, #12
 8015850:	af00      	add	r7, sp, #0
 8015852:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015854:	4b03      	ldr	r3, [pc, #12]	; (8015864 <USBD_static_malloc+0x18>)
}
 8015856:	4618      	mov	r0, r3
 8015858:	370c      	adds	r7, #12
 801585a:	46bd      	mov	sp, r7
 801585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015860:	4770      	bx	lr
 8015862:	bf00      	nop
 8015864:	24002518 	.word	0x24002518

08015868 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015868:	b480      	push	{r7}
 801586a:	b083      	sub	sp, #12
 801586c:	af00      	add	r7, sp, #0
 801586e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8015870:	bf00      	nop
 8015872:	370c      	adds	r7, #12
 8015874:	46bd      	mov	sp, r7
 8015876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801587a:	4770      	bx	lr

0801587c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801587c:	b480      	push	{r7}
 801587e:	b085      	sub	sp, #20
 8015880:	af00      	add	r7, sp, #0
 8015882:	4603      	mov	r3, r0
 8015884:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015886:	2300      	movs	r3, #0
 8015888:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801588a:	79fb      	ldrb	r3, [r7, #7]
 801588c:	2b03      	cmp	r3, #3
 801588e:	d817      	bhi.n	80158c0 <USBD_Get_USB_Status+0x44>
 8015890:	a201      	add	r2, pc, #4	; (adr r2, 8015898 <USBD_Get_USB_Status+0x1c>)
 8015892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015896:	bf00      	nop
 8015898:	080158a9 	.word	0x080158a9
 801589c:	080158af 	.word	0x080158af
 80158a0:	080158b5 	.word	0x080158b5
 80158a4:	080158bb 	.word	0x080158bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80158a8:	2300      	movs	r3, #0
 80158aa:	73fb      	strb	r3, [r7, #15]
    break;
 80158ac:	e00b      	b.n	80158c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80158ae:	2303      	movs	r3, #3
 80158b0:	73fb      	strb	r3, [r7, #15]
    break;
 80158b2:	e008      	b.n	80158c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80158b4:	2301      	movs	r3, #1
 80158b6:	73fb      	strb	r3, [r7, #15]
    break;
 80158b8:	e005      	b.n	80158c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80158ba:	2303      	movs	r3, #3
 80158bc:	73fb      	strb	r3, [r7, #15]
    break;
 80158be:	e002      	b.n	80158c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80158c0:	2303      	movs	r3, #3
 80158c2:	73fb      	strb	r3, [r7, #15]
    break;
 80158c4:	bf00      	nop
  }
  return usb_status;
 80158c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80158c8:	4618      	mov	r0, r3
 80158ca:	3714      	adds	r7, #20
 80158cc:	46bd      	mov	sp, r7
 80158ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158d2:	4770      	bx	lr

080158d4 <__errno>:
 80158d4:	4b01      	ldr	r3, [pc, #4]	; (80158dc <__errno+0x8>)
 80158d6:	6818      	ldr	r0, [r3, #0]
 80158d8:	4770      	bx	lr
 80158da:	bf00      	nop
 80158dc:	24000100 	.word	0x24000100

080158e0 <__libc_init_array>:
 80158e0:	b570      	push	{r4, r5, r6, lr}
 80158e2:	4d0d      	ldr	r5, [pc, #52]	; (8015918 <__libc_init_array+0x38>)
 80158e4:	4c0d      	ldr	r4, [pc, #52]	; (801591c <__libc_init_array+0x3c>)
 80158e6:	1b64      	subs	r4, r4, r5
 80158e8:	10a4      	asrs	r4, r4, #2
 80158ea:	2600      	movs	r6, #0
 80158ec:	42a6      	cmp	r6, r4
 80158ee:	d109      	bne.n	8015904 <__libc_init_array+0x24>
 80158f0:	4d0b      	ldr	r5, [pc, #44]	; (8015920 <__libc_init_array+0x40>)
 80158f2:	4c0c      	ldr	r4, [pc, #48]	; (8015924 <__libc_init_array+0x44>)
 80158f4:	f000 fc96 	bl	8016224 <_init>
 80158f8:	1b64      	subs	r4, r4, r5
 80158fa:	10a4      	asrs	r4, r4, #2
 80158fc:	2600      	movs	r6, #0
 80158fe:	42a6      	cmp	r6, r4
 8015900:	d105      	bne.n	801590e <__libc_init_array+0x2e>
 8015902:	bd70      	pop	{r4, r5, r6, pc}
 8015904:	f855 3b04 	ldr.w	r3, [r5], #4
 8015908:	4798      	blx	r3
 801590a:	3601      	adds	r6, #1
 801590c:	e7ee      	b.n	80158ec <__libc_init_array+0xc>
 801590e:	f855 3b04 	ldr.w	r3, [r5], #4
 8015912:	4798      	blx	r3
 8015914:	3601      	adds	r6, #1
 8015916:	e7f2      	b.n	80158fe <__libc_init_array+0x1e>
 8015918:	08016444 	.word	0x08016444
 801591c:	08016444 	.word	0x08016444
 8015920:	08016444 	.word	0x08016444
 8015924:	08016448 	.word	0x08016448

08015928 <memcpy>:
 8015928:	440a      	add	r2, r1
 801592a:	4291      	cmp	r1, r2
 801592c:	f100 33ff 	add.w	r3, r0, #4294967295
 8015930:	d100      	bne.n	8015934 <memcpy+0xc>
 8015932:	4770      	bx	lr
 8015934:	b510      	push	{r4, lr}
 8015936:	f811 4b01 	ldrb.w	r4, [r1], #1
 801593a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801593e:	4291      	cmp	r1, r2
 8015940:	d1f9      	bne.n	8015936 <memcpy+0xe>
 8015942:	bd10      	pop	{r4, pc}

08015944 <memset>:
 8015944:	4402      	add	r2, r0
 8015946:	4603      	mov	r3, r0
 8015948:	4293      	cmp	r3, r2
 801594a:	d100      	bne.n	801594e <memset+0xa>
 801594c:	4770      	bx	lr
 801594e:	f803 1b01 	strb.w	r1, [r3], #1
 8015952:	e7f9      	b.n	8015948 <memset+0x4>

08015954 <siprintf>:
 8015954:	b40e      	push	{r1, r2, r3}
 8015956:	b500      	push	{lr}
 8015958:	b09c      	sub	sp, #112	; 0x70
 801595a:	ab1d      	add	r3, sp, #116	; 0x74
 801595c:	9002      	str	r0, [sp, #8]
 801595e:	9006      	str	r0, [sp, #24]
 8015960:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015964:	4809      	ldr	r0, [pc, #36]	; (801598c <siprintf+0x38>)
 8015966:	9107      	str	r1, [sp, #28]
 8015968:	9104      	str	r1, [sp, #16]
 801596a:	4909      	ldr	r1, [pc, #36]	; (8015990 <siprintf+0x3c>)
 801596c:	f853 2b04 	ldr.w	r2, [r3], #4
 8015970:	9105      	str	r1, [sp, #20]
 8015972:	6800      	ldr	r0, [r0, #0]
 8015974:	9301      	str	r3, [sp, #4]
 8015976:	a902      	add	r1, sp, #8
 8015978:	f000 f870 	bl	8015a5c <_svfiprintf_r>
 801597c:	9b02      	ldr	r3, [sp, #8]
 801597e:	2200      	movs	r2, #0
 8015980:	701a      	strb	r2, [r3, #0]
 8015982:	b01c      	add	sp, #112	; 0x70
 8015984:	f85d eb04 	ldr.w	lr, [sp], #4
 8015988:	b003      	add	sp, #12
 801598a:	4770      	bx	lr
 801598c:	24000100 	.word	0x24000100
 8015990:	ffff0208 	.word	0xffff0208

08015994 <strcpy>:
 8015994:	4603      	mov	r3, r0
 8015996:	f811 2b01 	ldrb.w	r2, [r1], #1
 801599a:	f803 2b01 	strb.w	r2, [r3], #1
 801599e:	2a00      	cmp	r2, #0
 80159a0:	d1f9      	bne.n	8015996 <strcpy+0x2>
 80159a2:	4770      	bx	lr

080159a4 <__ssputs_r>:
 80159a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80159a8:	688e      	ldr	r6, [r1, #8]
 80159aa:	429e      	cmp	r6, r3
 80159ac:	4682      	mov	sl, r0
 80159ae:	460c      	mov	r4, r1
 80159b0:	4690      	mov	r8, r2
 80159b2:	461f      	mov	r7, r3
 80159b4:	d838      	bhi.n	8015a28 <__ssputs_r+0x84>
 80159b6:	898a      	ldrh	r2, [r1, #12]
 80159b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80159bc:	d032      	beq.n	8015a24 <__ssputs_r+0x80>
 80159be:	6825      	ldr	r5, [r4, #0]
 80159c0:	6909      	ldr	r1, [r1, #16]
 80159c2:	eba5 0901 	sub.w	r9, r5, r1
 80159c6:	6965      	ldr	r5, [r4, #20]
 80159c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80159cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80159d0:	3301      	adds	r3, #1
 80159d2:	444b      	add	r3, r9
 80159d4:	106d      	asrs	r5, r5, #1
 80159d6:	429d      	cmp	r5, r3
 80159d8:	bf38      	it	cc
 80159da:	461d      	movcc	r5, r3
 80159dc:	0553      	lsls	r3, r2, #21
 80159de:	d531      	bpl.n	8015a44 <__ssputs_r+0xa0>
 80159e0:	4629      	mov	r1, r5
 80159e2:	f000 fb55 	bl	8016090 <_malloc_r>
 80159e6:	4606      	mov	r6, r0
 80159e8:	b950      	cbnz	r0, 8015a00 <__ssputs_r+0x5c>
 80159ea:	230c      	movs	r3, #12
 80159ec:	f8ca 3000 	str.w	r3, [sl]
 80159f0:	89a3      	ldrh	r3, [r4, #12]
 80159f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80159f6:	81a3      	strh	r3, [r4, #12]
 80159f8:	f04f 30ff 	mov.w	r0, #4294967295
 80159fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a00:	6921      	ldr	r1, [r4, #16]
 8015a02:	464a      	mov	r2, r9
 8015a04:	f7ff ff90 	bl	8015928 <memcpy>
 8015a08:	89a3      	ldrh	r3, [r4, #12]
 8015a0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015a12:	81a3      	strh	r3, [r4, #12]
 8015a14:	6126      	str	r6, [r4, #16]
 8015a16:	6165      	str	r5, [r4, #20]
 8015a18:	444e      	add	r6, r9
 8015a1a:	eba5 0509 	sub.w	r5, r5, r9
 8015a1e:	6026      	str	r6, [r4, #0]
 8015a20:	60a5      	str	r5, [r4, #8]
 8015a22:	463e      	mov	r6, r7
 8015a24:	42be      	cmp	r6, r7
 8015a26:	d900      	bls.n	8015a2a <__ssputs_r+0x86>
 8015a28:	463e      	mov	r6, r7
 8015a2a:	6820      	ldr	r0, [r4, #0]
 8015a2c:	4632      	mov	r2, r6
 8015a2e:	4641      	mov	r1, r8
 8015a30:	f000 faa8 	bl	8015f84 <memmove>
 8015a34:	68a3      	ldr	r3, [r4, #8]
 8015a36:	1b9b      	subs	r3, r3, r6
 8015a38:	60a3      	str	r3, [r4, #8]
 8015a3a:	6823      	ldr	r3, [r4, #0]
 8015a3c:	4433      	add	r3, r6
 8015a3e:	6023      	str	r3, [r4, #0]
 8015a40:	2000      	movs	r0, #0
 8015a42:	e7db      	b.n	80159fc <__ssputs_r+0x58>
 8015a44:	462a      	mov	r2, r5
 8015a46:	f000 fb97 	bl	8016178 <_realloc_r>
 8015a4a:	4606      	mov	r6, r0
 8015a4c:	2800      	cmp	r0, #0
 8015a4e:	d1e1      	bne.n	8015a14 <__ssputs_r+0x70>
 8015a50:	6921      	ldr	r1, [r4, #16]
 8015a52:	4650      	mov	r0, sl
 8015a54:	f000 fab0 	bl	8015fb8 <_free_r>
 8015a58:	e7c7      	b.n	80159ea <__ssputs_r+0x46>
	...

08015a5c <_svfiprintf_r>:
 8015a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a60:	4698      	mov	r8, r3
 8015a62:	898b      	ldrh	r3, [r1, #12]
 8015a64:	061b      	lsls	r3, r3, #24
 8015a66:	b09d      	sub	sp, #116	; 0x74
 8015a68:	4607      	mov	r7, r0
 8015a6a:	460d      	mov	r5, r1
 8015a6c:	4614      	mov	r4, r2
 8015a6e:	d50e      	bpl.n	8015a8e <_svfiprintf_r+0x32>
 8015a70:	690b      	ldr	r3, [r1, #16]
 8015a72:	b963      	cbnz	r3, 8015a8e <_svfiprintf_r+0x32>
 8015a74:	2140      	movs	r1, #64	; 0x40
 8015a76:	f000 fb0b 	bl	8016090 <_malloc_r>
 8015a7a:	6028      	str	r0, [r5, #0]
 8015a7c:	6128      	str	r0, [r5, #16]
 8015a7e:	b920      	cbnz	r0, 8015a8a <_svfiprintf_r+0x2e>
 8015a80:	230c      	movs	r3, #12
 8015a82:	603b      	str	r3, [r7, #0]
 8015a84:	f04f 30ff 	mov.w	r0, #4294967295
 8015a88:	e0d1      	b.n	8015c2e <_svfiprintf_r+0x1d2>
 8015a8a:	2340      	movs	r3, #64	; 0x40
 8015a8c:	616b      	str	r3, [r5, #20]
 8015a8e:	2300      	movs	r3, #0
 8015a90:	9309      	str	r3, [sp, #36]	; 0x24
 8015a92:	2320      	movs	r3, #32
 8015a94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015a98:	f8cd 800c 	str.w	r8, [sp, #12]
 8015a9c:	2330      	movs	r3, #48	; 0x30
 8015a9e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8015c48 <_svfiprintf_r+0x1ec>
 8015aa2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015aa6:	f04f 0901 	mov.w	r9, #1
 8015aaa:	4623      	mov	r3, r4
 8015aac:	469a      	mov	sl, r3
 8015aae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015ab2:	b10a      	cbz	r2, 8015ab8 <_svfiprintf_r+0x5c>
 8015ab4:	2a25      	cmp	r2, #37	; 0x25
 8015ab6:	d1f9      	bne.n	8015aac <_svfiprintf_r+0x50>
 8015ab8:	ebba 0b04 	subs.w	fp, sl, r4
 8015abc:	d00b      	beq.n	8015ad6 <_svfiprintf_r+0x7a>
 8015abe:	465b      	mov	r3, fp
 8015ac0:	4622      	mov	r2, r4
 8015ac2:	4629      	mov	r1, r5
 8015ac4:	4638      	mov	r0, r7
 8015ac6:	f7ff ff6d 	bl	80159a4 <__ssputs_r>
 8015aca:	3001      	adds	r0, #1
 8015acc:	f000 80aa 	beq.w	8015c24 <_svfiprintf_r+0x1c8>
 8015ad0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015ad2:	445a      	add	r2, fp
 8015ad4:	9209      	str	r2, [sp, #36]	; 0x24
 8015ad6:	f89a 3000 	ldrb.w	r3, [sl]
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	f000 80a2 	beq.w	8015c24 <_svfiprintf_r+0x1c8>
 8015ae0:	2300      	movs	r3, #0
 8015ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8015ae6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015aea:	f10a 0a01 	add.w	sl, sl, #1
 8015aee:	9304      	str	r3, [sp, #16]
 8015af0:	9307      	str	r3, [sp, #28]
 8015af2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015af6:	931a      	str	r3, [sp, #104]	; 0x68
 8015af8:	4654      	mov	r4, sl
 8015afa:	2205      	movs	r2, #5
 8015afc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015b00:	4851      	ldr	r0, [pc, #324]	; (8015c48 <_svfiprintf_r+0x1ec>)
 8015b02:	f7ea fc1d 	bl	8000340 <memchr>
 8015b06:	9a04      	ldr	r2, [sp, #16]
 8015b08:	b9d8      	cbnz	r0, 8015b42 <_svfiprintf_r+0xe6>
 8015b0a:	06d0      	lsls	r0, r2, #27
 8015b0c:	bf44      	itt	mi
 8015b0e:	2320      	movmi	r3, #32
 8015b10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015b14:	0711      	lsls	r1, r2, #28
 8015b16:	bf44      	itt	mi
 8015b18:	232b      	movmi	r3, #43	; 0x2b
 8015b1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015b1e:	f89a 3000 	ldrb.w	r3, [sl]
 8015b22:	2b2a      	cmp	r3, #42	; 0x2a
 8015b24:	d015      	beq.n	8015b52 <_svfiprintf_r+0xf6>
 8015b26:	9a07      	ldr	r2, [sp, #28]
 8015b28:	4654      	mov	r4, sl
 8015b2a:	2000      	movs	r0, #0
 8015b2c:	f04f 0c0a 	mov.w	ip, #10
 8015b30:	4621      	mov	r1, r4
 8015b32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015b36:	3b30      	subs	r3, #48	; 0x30
 8015b38:	2b09      	cmp	r3, #9
 8015b3a:	d94e      	bls.n	8015bda <_svfiprintf_r+0x17e>
 8015b3c:	b1b0      	cbz	r0, 8015b6c <_svfiprintf_r+0x110>
 8015b3e:	9207      	str	r2, [sp, #28]
 8015b40:	e014      	b.n	8015b6c <_svfiprintf_r+0x110>
 8015b42:	eba0 0308 	sub.w	r3, r0, r8
 8015b46:	fa09 f303 	lsl.w	r3, r9, r3
 8015b4a:	4313      	orrs	r3, r2
 8015b4c:	9304      	str	r3, [sp, #16]
 8015b4e:	46a2      	mov	sl, r4
 8015b50:	e7d2      	b.n	8015af8 <_svfiprintf_r+0x9c>
 8015b52:	9b03      	ldr	r3, [sp, #12]
 8015b54:	1d19      	adds	r1, r3, #4
 8015b56:	681b      	ldr	r3, [r3, #0]
 8015b58:	9103      	str	r1, [sp, #12]
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	bfbb      	ittet	lt
 8015b5e:	425b      	neglt	r3, r3
 8015b60:	f042 0202 	orrlt.w	r2, r2, #2
 8015b64:	9307      	strge	r3, [sp, #28]
 8015b66:	9307      	strlt	r3, [sp, #28]
 8015b68:	bfb8      	it	lt
 8015b6a:	9204      	strlt	r2, [sp, #16]
 8015b6c:	7823      	ldrb	r3, [r4, #0]
 8015b6e:	2b2e      	cmp	r3, #46	; 0x2e
 8015b70:	d10c      	bne.n	8015b8c <_svfiprintf_r+0x130>
 8015b72:	7863      	ldrb	r3, [r4, #1]
 8015b74:	2b2a      	cmp	r3, #42	; 0x2a
 8015b76:	d135      	bne.n	8015be4 <_svfiprintf_r+0x188>
 8015b78:	9b03      	ldr	r3, [sp, #12]
 8015b7a:	1d1a      	adds	r2, r3, #4
 8015b7c:	681b      	ldr	r3, [r3, #0]
 8015b7e:	9203      	str	r2, [sp, #12]
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	bfb8      	it	lt
 8015b84:	f04f 33ff 	movlt.w	r3, #4294967295
 8015b88:	3402      	adds	r4, #2
 8015b8a:	9305      	str	r3, [sp, #20]
 8015b8c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8015c58 <_svfiprintf_r+0x1fc>
 8015b90:	7821      	ldrb	r1, [r4, #0]
 8015b92:	2203      	movs	r2, #3
 8015b94:	4650      	mov	r0, sl
 8015b96:	f7ea fbd3 	bl	8000340 <memchr>
 8015b9a:	b140      	cbz	r0, 8015bae <_svfiprintf_r+0x152>
 8015b9c:	2340      	movs	r3, #64	; 0x40
 8015b9e:	eba0 000a 	sub.w	r0, r0, sl
 8015ba2:	fa03 f000 	lsl.w	r0, r3, r0
 8015ba6:	9b04      	ldr	r3, [sp, #16]
 8015ba8:	4303      	orrs	r3, r0
 8015baa:	3401      	adds	r4, #1
 8015bac:	9304      	str	r3, [sp, #16]
 8015bae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015bb2:	4826      	ldr	r0, [pc, #152]	; (8015c4c <_svfiprintf_r+0x1f0>)
 8015bb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015bb8:	2206      	movs	r2, #6
 8015bba:	f7ea fbc1 	bl	8000340 <memchr>
 8015bbe:	2800      	cmp	r0, #0
 8015bc0:	d038      	beq.n	8015c34 <_svfiprintf_r+0x1d8>
 8015bc2:	4b23      	ldr	r3, [pc, #140]	; (8015c50 <_svfiprintf_r+0x1f4>)
 8015bc4:	bb1b      	cbnz	r3, 8015c0e <_svfiprintf_r+0x1b2>
 8015bc6:	9b03      	ldr	r3, [sp, #12]
 8015bc8:	3307      	adds	r3, #7
 8015bca:	f023 0307 	bic.w	r3, r3, #7
 8015bce:	3308      	adds	r3, #8
 8015bd0:	9303      	str	r3, [sp, #12]
 8015bd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015bd4:	4433      	add	r3, r6
 8015bd6:	9309      	str	r3, [sp, #36]	; 0x24
 8015bd8:	e767      	b.n	8015aaa <_svfiprintf_r+0x4e>
 8015bda:	fb0c 3202 	mla	r2, ip, r2, r3
 8015bde:	460c      	mov	r4, r1
 8015be0:	2001      	movs	r0, #1
 8015be2:	e7a5      	b.n	8015b30 <_svfiprintf_r+0xd4>
 8015be4:	2300      	movs	r3, #0
 8015be6:	3401      	adds	r4, #1
 8015be8:	9305      	str	r3, [sp, #20]
 8015bea:	4619      	mov	r1, r3
 8015bec:	f04f 0c0a 	mov.w	ip, #10
 8015bf0:	4620      	mov	r0, r4
 8015bf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015bf6:	3a30      	subs	r2, #48	; 0x30
 8015bf8:	2a09      	cmp	r2, #9
 8015bfa:	d903      	bls.n	8015c04 <_svfiprintf_r+0x1a8>
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d0c5      	beq.n	8015b8c <_svfiprintf_r+0x130>
 8015c00:	9105      	str	r1, [sp, #20]
 8015c02:	e7c3      	b.n	8015b8c <_svfiprintf_r+0x130>
 8015c04:	fb0c 2101 	mla	r1, ip, r1, r2
 8015c08:	4604      	mov	r4, r0
 8015c0a:	2301      	movs	r3, #1
 8015c0c:	e7f0      	b.n	8015bf0 <_svfiprintf_r+0x194>
 8015c0e:	ab03      	add	r3, sp, #12
 8015c10:	9300      	str	r3, [sp, #0]
 8015c12:	462a      	mov	r2, r5
 8015c14:	4b0f      	ldr	r3, [pc, #60]	; (8015c54 <_svfiprintf_r+0x1f8>)
 8015c16:	a904      	add	r1, sp, #16
 8015c18:	4638      	mov	r0, r7
 8015c1a:	f3af 8000 	nop.w
 8015c1e:	1c42      	adds	r2, r0, #1
 8015c20:	4606      	mov	r6, r0
 8015c22:	d1d6      	bne.n	8015bd2 <_svfiprintf_r+0x176>
 8015c24:	89ab      	ldrh	r3, [r5, #12]
 8015c26:	065b      	lsls	r3, r3, #25
 8015c28:	f53f af2c 	bmi.w	8015a84 <_svfiprintf_r+0x28>
 8015c2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015c2e:	b01d      	add	sp, #116	; 0x74
 8015c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c34:	ab03      	add	r3, sp, #12
 8015c36:	9300      	str	r3, [sp, #0]
 8015c38:	462a      	mov	r2, r5
 8015c3a:	4b06      	ldr	r3, [pc, #24]	; (8015c54 <_svfiprintf_r+0x1f8>)
 8015c3c:	a904      	add	r1, sp, #16
 8015c3e:	4638      	mov	r0, r7
 8015c40:	f000 f87a 	bl	8015d38 <_printf_i>
 8015c44:	e7eb      	b.n	8015c1e <_svfiprintf_r+0x1c2>
 8015c46:	bf00      	nop
 8015c48:	08016408 	.word	0x08016408
 8015c4c:	08016412 	.word	0x08016412
 8015c50:	00000000 	.word	0x00000000
 8015c54:	080159a5 	.word	0x080159a5
 8015c58:	0801640e 	.word	0x0801640e

08015c5c <_printf_common>:
 8015c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015c60:	4616      	mov	r6, r2
 8015c62:	4699      	mov	r9, r3
 8015c64:	688a      	ldr	r2, [r1, #8]
 8015c66:	690b      	ldr	r3, [r1, #16]
 8015c68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015c6c:	4293      	cmp	r3, r2
 8015c6e:	bfb8      	it	lt
 8015c70:	4613      	movlt	r3, r2
 8015c72:	6033      	str	r3, [r6, #0]
 8015c74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015c78:	4607      	mov	r7, r0
 8015c7a:	460c      	mov	r4, r1
 8015c7c:	b10a      	cbz	r2, 8015c82 <_printf_common+0x26>
 8015c7e:	3301      	adds	r3, #1
 8015c80:	6033      	str	r3, [r6, #0]
 8015c82:	6823      	ldr	r3, [r4, #0]
 8015c84:	0699      	lsls	r1, r3, #26
 8015c86:	bf42      	ittt	mi
 8015c88:	6833      	ldrmi	r3, [r6, #0]
 8015c8a:	3302      	addmi	r3, #2
 8015c8c:	6033      	strmi	r3, [r6, #0]
 8015c8e:	6825      	ldr	r5, [r4, #0]
 8015c90:	f015 0506 	ands.w	r5, r5, #6
 8015c94:	d106      	bne.n	8015ca4 <_printf_common+0x48>
 8015c96:	f104 0a19 	add.w	sl, r4, #25
 8015c9a:	68e3      	ldr	r3, [r4, #12]
 8015c9c:	6832      	ldr	r2, [r6, #0]
 8015c9e:	1a9b      	subs	r3, r3, r2
 8015ca0:	42ab      	cmp	r3, r5
 8015ca2:	dc26      	bgt.n	8015cf2 <_printf_common+0x96>
 8015ca4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015ca8:	1e13      	subs	r3, r2, #0
 8015caa:	6822      	ldr	r2, [r4, #0]
 8015cac:	bf18      	it	ne
 8015cae:	2301      	movne	r3, #1
 8015cb0:	0692      	lsls	r2, r2, #26
 8015cb2:	d42b      	bmi.n	8015d0c <_printf_common+0xb0>
 8015cb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015cb8:	4649      	mov	r1, r9
 8015cba:	4638      	mov	r0, r7
 8015cbc:	47c0      	blx	r8
 8015cbe:	3001      	adds	r0, #1
 8015cc0:	d01e      	beq.n	8015d00 <_printf_common+0xa4>
 8015cc2:	6823      	ldr	r3, [r4, #0]
 8015cc4:	68e5      	ldr	r5, [r4, #12]
 8015cc6:	6832      	ldr	r2, [r6, #0]
 8015cc8:	f003 0306 	and.w	r3, r3, #6
 8015ccc:	2b04      	cmp	r3, #4
 8015cce:	bf08      	it	eq
 8015cd0:	1aad      	subeq	r5, r5, r2
 8015cd2:	68a3      	ldr	r3, [r4, #8]
 8015cd4:	6922      	ldr	r2, [r4, #16]
 8015cd6:	bf0c      	ite	eq
 8015cd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015cdc:	2500      	movne	r5, #0
 8015cde:	4293      	cmp	r3, r2
 8015ce0:	bfc4      	itt	gt
 8015ce2:	1a9b      	subgt	r3, r3, r2
 8015ce4:	18ed      	addgt	r5, r5, r3
 8015ce6:	2600      	movs	r6, #0
 8015ce8:	341a      	adds	r4, #26
 8015cea:	42b5      	cmp	r5, r6
 8015cec:	d11a      	bne.n	8015d24 <_printf_common+0xc8>
 8015cee:	2000      	movs	r0, #0
 8015cf0:	e008      	b.n	8015d04 <_printf_common+0xa8>
 8015cf2:	2301      	movs	r3, #1
 8015cf4:	4652      	mov	r2, sl
 8015cf6:	4649      	mov	r1, r9
 8015cf8:	4638      	mov	r0, r7
 8015cfa:	47c0      	blx	r8
 8015cfc:	3001      	adds	r0, #1
 8015cfe:	d103      	bne.n	8015d08 <_printf_common+0xac>
 8015d00:	f04f 30ff 	mov.w	r0, #4294967295
 8015d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d08:	3501      	adds	r5, #1
 8015d0a:	e7c6      	b.n	8015c9a <_printf_common+0x3e>
 8015d0c:	18e1      	adds	r1, r4, r3
 8015d0e:	1c5a      	adds	r2, r3, #1
 8015d10:	2030      	movs	r0, #48	; 0x30
 8015d12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015d16:	4422      	add	r2, r4
 8015d18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015d1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015d20:	3302      	adds	r3, #2
 8015d22:	e7c7      	b.n	8015cb4 <_printf_common+0x58>
 8015d24:	2301      	movs	r3, #1
 8015d26:	4622      	mov	r2, r4
 8015d28:	4649      	mov	r1, r9
 8015d2a:	4638      	mov	r0, r7
 8015d2c:	47c0      	blx	r8
 8015d2e:	3001      	adds	r0, #1
 8015d30:	d0e6      	beq.n	8015d00 <_printf_common+0xa4>
 8015d32:	3601      	adds	r6, #1
 8015d34:	e7d9      	b.n	8015cea <_printf_common+0x8e>
	...

08015d38 <_printf_i>:
 8015d38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015d3c:	7e0f      	ldrb	r7, [r1, #24]
 8015d3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015d40:	2f78      	cmp	r7, #120	; 0x78
 8015d42:	4691      	mov	r9, r2
 8015d44:	4680      	mov	r8, r0
 8015d46:	460c      	mov	r4, r1
 8015d48:	469a      	mov	sl, r3
 8015d4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015d4e:	d807      	bhi.n	8015d60 <_printf_i+0x28>
 8015d50:	2f62      	cmp	r7, #98	; 0x62
 8015d52:	d80a      	bhi.n	8015d6a <_printf_i+0x32>
 8015d54:	2f00      	cmp	r7, #0
 8015d56:	f000 80d8 	beq.w	8015f0a <_printf_i+0x1d2>
 8015d5a:	2f58      	cmp	r7, #88	; 0x58
 8015d5c:	f000 80a3 	beq.w	8015ea6 <_printf_i+0x16e>
 8015d60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015d64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015d68:	e03a      	b.n	8015de0 <_printf_i+0xa8>
 8015d6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015d6e:	2b15      	cmp	r3, #21
 8015d70:	d8f6      	bhi.n	8015d60 <_printf_i+0x28>
 8015d72:	a101      	add	r1, pc, #4	; (adr r1, 8015d78 <_printf_i+0x40>)
 8015d74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015d78:	08015dd1 	.word	0x08015dd1
 8015d7c:	08015de5 	.word	0x08015de5
 8015d80:	08015d61 	.word	0x08015d61
 8015d84:	08015d61 	.word	0x08015d61
 8015d88:	08015d61 	.word	0x08015d61
 8015d8c:	08015d61 	.word	0x08015d61
 8015d90:	08015de5 	.word	0x08015de5
 8015d94:	08015d61 	.word	0x08015d61
 8015d98:	08015d61 	.word	0x08015d61
 8015d9c:	08015d61 	.word	0x08015d61
 8015da0:	08015d61 	.word	0x08015d61
 8015da4:	08015ef1 	.word	0x08015ef1
 8015da8:	08015e15 	.word	0x08015e15
 8015dac:	08015ed3 	.word	0x08015ed3
 8015db0:	08015d61 	.word	0x08015d61
 8015db4:	08015d61 	.word	0x08015d61
 8015db8:	08015f13 	.word	0x08015f13
 8015dbc:	08015d61 	.word	0x08015d61
 8015dc0:	08015e15 	.word	0x08015e15
 8015dc4:	08015d61 	.word	0x08015d61
 8015dc8:	08015d61 	.word	0x08015d61
 8015dcc:	08015edb 	.word	0x08015edb
 8015dd0:	682b      	ldr	r3, [r5, #0]
 8015dd2:	1d1a      	adds	r2, r3, #4
 8015dd4:	681b      	ldr	r3, [r3, #0]
 8015dd6:	602a      	str	r2, [r5, #0]
 8015dd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015ddc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015de0:	2301      	movs	r3, #1
 8015de2:	e0a3      	b.n	8015f2c <_printf_i+0x1f4>
 8015de4:	6820      	ldr	r0, [r4, #0]
 8015de6:	6829      	ldr	r1, [r5, #0]
 8015de8:	0606      	lsls	r6, r0, #24
 8015dea:	f101 0304 	add.w	r3, r1, #4
 8015dee:	d50a      	bpl.n	8015e06 <_printf_i+0xce>
 8015df0:	680e      	ldr	r6, [r1, #0]
 8015df2:	602b      	str	r3, [r5, #0]
 8015df4:	2e00      	cmp	r6, #0
 8015df6:	da03      	bge.n	8015e00 <_printf_i+0xc8>
 8015df8:	232d      	movs	r3, #45	; 0x2d
 8015dfa:	4276      	negs	r6, r6
 8015dfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015e00:	485e      	ldr	r0, [pc, #376]	; (8015f7c <_printf_i+0x244>)
 8015e02:	230a      	movs	r3, #10
 8015e04:	e019      	b.n	8015e3a <_printf_i+0x102>
 8015e06:	680e      	ldr	r6, [r1, #0]
 8015e08:	602b      	str	r3, [r5, #0]
 8015e0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015e0e:	bf18      	it	ne
 8015e10:	b236      	sxthne	r6, r6
 8015e12:	e7ef      	b.n	8015df4 <_printf_i+0xbc>
 8015e14:	682b      	ldr	r3, [r5, #0]
 8015e16:	6820      	ldr	r0, [r4, #0]
 8015e18:	1d19      	adds	r1, r3, #4
 8015e1a:	6029      	str	r1, [r5, #0]
 8015e1c:	0601      	lsls	r1, r0, #24
 8015e1e:	d501      	bpl.n	8015e24 <_printf_i+0xec>
 8015e20:	681e      	ldr	r6, [r3, #0]
 8015e22:	e002      	b.n	8015e2a <_printf_i+0xf2>
 8015e24:	0646      	lsls	r6, r0, #25
 8015e26:	d5fb      	bpl.n	8015e20 <_printf_i+0xe8>
 8015e28:	881e      	ldrh	r6, [r3, #0]
 8015e2a:	4854      	ldr	r0, [pc, #336]	; (8015f7c <_printf_i+0x244>)
 8015e2c:	2f6f      	cmp	r7, #111	; 0x6f
 8015e2e:	bf0c      	ite	eq
 8015e30:	2308      	moveq	r3, #8
 8015e32:	230a      	movne	r3, #10
 8015e34:	2100      	movs	r1, #0
 8015e36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015e3a:	6865      	ldr	r5, [r4, #4]
 8015e3c:	60a5      	str	r5, [r4, #8]
 8015e3e:	2d00      	cmp	r5, #0
 8015e40:	bfa2      	ittt	ge
 8015e42:	6821      	ldrge	r1, [r4, #0]
 8015e44:	f021 0104 	bicge.w	r1, r1, #4
 8015e48:	6021      	strge	r1, [r4, #0]
 8015e4a:	b90e      	cbnz	r6, 8015e50 <_printf_i+0x118>
 8015e4c:	2d00      	cmp	r5, #0
 8015e4e:	d04d      	beq.n	8015eec <_printf_i+0x1b4>
 8015e50:	4615      	mov	r5, r2
 8015e52:	fbb6 f1f3 	udiv	r1, r6, r3
 8015e56:	fb03 6711 	mls	r7, r3, r1, r6
 8015e5a:	5dc7      	ldrb	r7, [r0, r7]
 8015e5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015e60:	4637      	mov	r7, r6
 8015e62:	42bb      	cmp	r3, r7
 8015e64:	460e      	mov	r6, r1
 8015e66:	d9f4      	bls.n	8015e52 <_printf_i+0x11a>
 8015e68:	2b08      	cmp	r3, #8
 8015e6a:	d10b      	bne.n	8015e84 <_printf_i+0x14c>
 8015e6c:	6823      	ldr	r3, [r4, #0]
 8015e6e:	07de      	lsls	r6, r3, #31
 8015e70:	d508      	bpl.n	8015e84 <_printf_i+0x14c>
 8015e72:	6923      	ldr	r3, [r4, #16]
 8015e74:	6861      	ldr	r1, [r4, #4]
 8015e76:	4299      	cmp	r1, r3
 8015e78:	bfde      	ittt	le
 8015e7a:	2330      	movle	r3, #48	; 0x30
 8015e7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015e80:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015e84:	1b52      	subs	r2, r2, r5
 8015e86:	6122      	str	r2, [r4, #16]
 8015e88:	f8cd a000 	str.w	sl, [sp]
 8015e8c:	464b      	mov	r3, r9
 8015e8e:	aa03      	add	r2, sp, #12
 8015e90:	4621      	mov	r1, r4
 8015e92:	4640      	mov	r0, r8
 8015e94:	f7ff fee2 	bl	8015c5c <_printf_common>
 8015e98:	3001      	adds	r0, #1
 8015e9a:	d14c      	bne.n	8015f36 <_printf_i+0x1fe>
 8015e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8015ea0:	b004      	add	sp, #16
 8015ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ea6:	4835      	ldr	r0, [pc, #212]	; (8015f7c <_printf_i+0x244>)
 8015ea8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8015eac:	6829      	ldr	r1, [r5, #0]
 8015eae:	6823      	ldr	r3, [r4, #0]
 8015eb0:	f851 6b04 	ldr.w	r6, [r1], #4
 8015eb4:	6029      	str	r1, [r5, #0]
 8015eb6:	061d      	lsls	r5, r3, #24
 8015eb8:	d514      	bpl.n	8015ee4 <_printf_i+0x1ac>
 8015eba:	07df      	lsls	r7, r3, #31
 8015ebc:	bf44      	itt	mi
 8015ebe:	f043 0320 	orrmi.w	r3, r3, #32
 8015ec2:	6023      	strmi	r3, [r4, #0]
 8015ec4:	b91e      	cbnz	r6, 8015ece <_printf_i+0x196>
 8015ec6:	6823      	ldr	r3, [r4, #0]
 8015ec8:	f023 0320 	bic.w	r3, r3, #32
 8015ecc:	6023      	str	r3, [r4, #0]
 8015ece:	2310      	movs	r3, #16
 8015ed0:	e7b0      	b.n	8015e34 <_printf_i+0xfc>
 8015ed2:	6823      	ldr	r3, [r4, #0]
 8015ed4:	f043 0320 	orr.w	r3, r3, #32
 8015ed8:	6023      	str	r3, [r4, #0]
 8015eda:	2378      	movs	r3, #120	; 0x78
 8015edc:	4828      	ldr	r0, [pc, #160]	; (8015f80 <_printf_i+0x248>)
 8015ede:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015ee2:	e7e3      	b.n	8015eac <_printf_i+0x174>
 8015ee4:	0659      	lsls	r1, r3, #25
 8015ee6:	bf48      	it	mi
 8015ee8:	b2b6      	uxthmi	r6, r6
 8015eea:	e7e6      	b.n	8015eba <_printf_i+0x182>
 8015eec:	4615      	mov	r5, r2
 8015eee:	e7bb      	b.n	8015e68 <_printf_i+0x130>
 8015ef0:	682b      	ldr	r3, [r5, #0]
 8015ef2:	6826      	ldr	r6, [r4, #0]
 8015ef4:	6961      	ldr	r1, [r4, #20]
 8015ef6:	1d18      	adds	r0, r3, #4
 8015ef8:	6028      	str	r0, [r5, #0]
 8015efa:	0635      	lsls	r5, r6, #24
 8015efc:	681b      	ldr	r3, [r3, #0]
 8015efe:	d501      	bpl.n	8015f04 <_printf_i+0x1cc>
 8015f00:	6019      	str	r1, [r3, #0]
 8015f02:	e002      	b.n	8015f0a <_printf_i+0x1d2>
 8015f04:	0670      	lsls	r0, r6, #25
 8015f06:	d5fb      	bpl.n	8015f00 <_printf_i+0x1c8>
 8015f08:	8019      	strh	r1, [r3, #0]
 8015f0a:	2300      	movs	r3, #0
 8015f0c:	6123      	str	r3, [r4, #16]
 8015f0e:	4615      	mov	r5, r2
 8015f10:	e7ba      	b.n	8015e88 <_printf_i+0x150>
 8015f12:	682b      	ldr	r3, [r5, #0]
 8015f14:	1d1a      	adds	r2, r3, #4
 8015f16:	602a      	str	r2, [r5, #0]
 8015f18:	681d      	ldr	r5, [r3, #0]
 8015f1a:	6862      	ldr	r2, [r4, #4]
 8015f1c:	2100      	movs	r1, #0
 8015f1e:	4628      	mov	r0, r5
 8015f20:	f7ea fa0e 	bl	8000340 <memchr>
 8015f24:	b108      	cbz	r0, 8015f2a <_printf_i+0x1f2>
 8015f26:	1b40      	subs	r0, r0, r5
 8015f28:	6060      	str	r0, [r4, #4]
 8015f2a:	6863      	ldr	r3, [r4, #4]
 8015f2c:	6123      	str	r3, [r4, #16]
 8015f2e:	2300      	movs	r3, #0
 8015f30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015f34:	e7a8      	b.n	8015e88 <_printf_i+0x150>
 8015f36:	6923      	ldr	r3, [r4, #16]
 8015f38:	462a      	mov	r2, r5
 8015f3a:	4649      	mov	r1, r9
 8015f3c:	4640      	mov	r0, r8
 8015f3e:	47d0      	blx	sl
 8015f40:	3001      	adds	r0, #1
 8015f42:	d0ab      	beq.n	8015e9c <_printf_i+0x164>
 8015f44:	6823      	ldr	r3, [r4, #0]
 8015f46:	079b      	lsls	r3, r3, #30
 8015f48:	d413      	bmi.n	8015f72 <_printf_i+0x23a>
 8015f4a:	68e0      	ldr	r0, [r4, #12]
 8015f4c:	9b03      	ldr	r3, [sp, #12]
 8015f4e:	4298      	cmp	r0, r3
 8015f50:	bfb8      	it	lt
 8015f52:	4618      	movlt	r0, r3
 8015f54:	e7a4      	b.n	8015ea0 <_printf_i+0x168>
 8015f56:	2301      	movs	r3, #1
 8015f58:	4632      	mov	r2, r6
 8015f5a:	4649      	mov	r1, r9
 8015f5c:	4640      	mov	r0, r8
 8015f5e:	47d0      	blx	sl
 8015f60:	3001      	adds	r0, #1
 8015f62:	d09b      	beq.n	8015e9c <_printf_i+0x164>
 8015f64:	3501      	adds	r5, #1
 8015f66:	68e3      	ldr	r3, [r4, #12]
 8015f68:	9903      	ldr	r1, [sp, #12]
 8015f6a:	1a5b      	subs	r3, r3, r1
 8015f6c:	42ab      	cmp	r3, r5
 8015f6e:	dcf2      	bgt.n	8015f56 <_printf_i+0x21e>
 8015f70:	e7eb      	b.n	8015f4a <_printf_i+0x212>
 8015f72:	2500      	movs	r5, #0
 8015f74:	f104 0619 	add.w	r6, r4, #25
 8015f78:	e7f5      	b.n	8015f66 <_printf_i+0x22e>
 8015f7a:	bf00      	nop
 8015f7c:	08016419 	.word	0x08016419
 8015f80:	0801642a 	.word	0x0801642a

08015f84 <memmove>:
 8015f84:	4288      	cmp	r0, r1
 8015f86:	b510      	push	{r4, lr}
 8015f88:	eb01 0402 	add.w	r4, r1, r2
 8015f8c:	d902      	bls.n	8015f94 <memmove+0x10>
 8015f8e:	4284      	cmp	r4, r0
 8015f90:	4623      	mov	r3, r4
 8015f92:	d807      	bhi.n	8015fa4 <memmove+0x20>
 8015f94:	1e43      	subs	r3, r0, #1
 8015f96:	42a1      	cmp	r1, r4
 8015f98:	d008      	beq.n	8015fac <memmove+0x28>
 8015f9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015f9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015fa2:	e7f8      	b.n	8015f96 <memmove+0x12>
 8015fa4:	4402      	add	r2, r0
 8015fa6:	4601      	mov	r1, r0
 8015fa8:	428a      	cmp	r2, r1
 8015faa:	d100      	bne.n	8015fae <memmove+0x2a>
 8015fac:	bd10      	pop	{r4, pc}
 8015fae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015fb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015fb6:	e7f7      	b.n	8015fa8 <memmove+0x24>

08015fb8 <_free_r>:
 8015fb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015fba:	2900      	cmp	r1, #0
 8015fbc:	d044      	beq.n	8016048 <_free_r+0x90>
 8015fbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015fc2:	9001      	str	r0, [sp, #4]
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	f1a1 0404 	sub.w	r4, r1, #4
 8015fca:	bfb8      	it	lt
 8015fcc:	18e4      	addlt	r4, r4, r3
 8015fce:	f000 f913 	bl	80161f8 <__malloc_lock>
 8015fd2:	4a1e      	ldr	r2, [pc, #120]	; (801604c <_free_r+0x94>)
 8015fd4:	9801      	ldr	r0, [sp, #4]
 8015fd6:	6813      	ldr	r3, [r2, #0]
 8015fd8:	b933      	cbnz	r3, 8015fe8 <_free_r+0x30>
 8015fda:	6063      	str	r3, [r4, #4]
 8015fdc:	6014      	str	r4, [r2, #0]
 8015fde:	b003      	add	sp, #12
 8015fe0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015fe4:	f000 b90e 	b.w	8016204 <__malloc_unlock>
 8015fe8:	42a3      	cmp	r3, r4
 8015fea:	d908      	bls.n	8015ffe <_free_r+0x46>
 8015fec:	6825      	ldr	r5, [r4, #0]
 8015fee:	1961      	adds	r1, r4, r5
 8015ff0:	428b      	cmp	r3, r1
 8015ff2:	bf01      	itttt	eq
 8015ff4:	6819      	ldreq	r1, [r3, #0]
 8015ff6:	685b      	ldreq	r3, [r3, #4]
 8015ff8:	1949      	addeq	r1, r1, r5
 8015ffa:	6021      	streq	r1, [r4, #0]
 8015ffc:	e7ed      	b.n	8015fda <_free_r+0x22>
 8015ffe:	461a      	mov	r2, r3
 8016000:	685b      	ldr	r3, [r3, #4]
 8016002:	b10b      	cbz	r3, 8016008 <_free_r+0x50>
 8016004:	42a3      	cmp	r3, r4
 8016006:	d9fa      	bls.n	8015ffe <_free_r+0x46>
 8016008:	6811      	ldr	r1, [r2, #0]
 801600a:	1855      	adds	r5, r2, r1
 801600c:	42a5      	cmp	r5, r4
 801600e:	d10b      	bne.n	8016028 <_free_r+0x70>
 8016010:	6824      	ldr	r4, [r4, #0]
 8016012:	4421      	add	r1, r4
 8016014:	1854      	adds	r4, r2, r1
 8016016:	42a3      	cmp	r3, r4
 8016018:	6011      	str	r1, [r2, #0]
 801601a:	d1e0      	bne.n	8015fde <_free_r+0x26>
 801601c:	681c      	ldr	r4, [r3, #0]
 801601e:	685b      	ldr	r3, [r3, #4]
 8016020:	6053      	str	r3, [r2, #4]
 8016022:	4421      	add	r1, r4
 8016024:	6011      	str	r1, [r2, #0]
 8016026:	e7da      	b.n	8015fde <_free_r+0x26>
 8016028:	d902      	bls.n	8016030 <_free_r+0x78>
 801602a:	230c      	movs	r3, #12
 801602c:	6003      	str	r3, [r0, #0]
 801602e:	e7d6      	b.n	8015fde <_free_r+0x26>
 8016030:	6825      	ldr	r5, [r4, #0]
 8016032:	1961      	adds	r1, r4, r5
 8016034:	428b      	cmp	r3, r1
 8016036:	bf04      	itt	eq
 8016038:	6819      	ldreq	r1, [r3, #0]
 801603a:	685b      	ldreq	r3, [r3, #4]
 801603c:	6063      	str	r3, [r4, #4]
 801603e:	bf04      	itt	eq
 8016040:	1949      	addeq	r1, r1, r5
 8016042:	6021      	streq	r1, [r4, #0]
 8016044:	6054      	str	r4, [r2, #4]
 8016046:	e7ca      	b.n	8015fde <_free_r+0x26>
 8016048:	b003      	add	sp, #12
 801604a:	bd30      	pop	{r4, r5, pc}
 801604c:	24002738 	.word	0x24002738

08016050 <sbrk_aligned>:
 8016050:	b570      	push	{r4, r5, r6, lr}
 8016052:	4e0e      	ldr	r6, [pc, #56]	; (801608c <sbrk_aligned+0x3c>)
 8016054:	460c      	mov	r4, r1
 8016056:	6831      	ldr	r1, [r6, #0]
 8016058:	4605      	mov	r5, r0
 801605a:	b911      	cbnz	r1, 8016062 <sbrk_aligned+0x12>
 801605c:	f000 f8bc 	bl	80161d8 <_sbrk_r>
 8016060:	6030      	str	r0, [r6, #0]
 8016062:	4621      	mov	r1, r4
 8016064:	4628      	mov	r0, r5
 8016066:	f000 f8b7 	bl	80161d8 <_sbrk_r>
 801606a:	1c43      	adds	r3, r0, #1
 801606c:	d00a      	beq.n	8016084 <sbrk_aligned+0x34>
 801606e:	1cc4      	adds	r4, r0, #3
 8016070:	f024 0403 	bic.w	r4, r4, #3
 8016074:	42a0      	cmp	r0, r4
 8016076:	d007      	beq.n	8016088 <sbrk_aligned+0x38>
 8016078:	1a21      	subs	r1, r4, r0
 801607a:	4628      	mov	r0, r5
 801607c:	f000 f8ac 	bl	80161d8 <_sbrk_r>
 8016080:	3001      	adds	r0, #1
 8016082:	d101      	bne.n	8016088 <sbrk_aligned+0x38>
 8016084:	f04f 34ff 	mov.w	r4, #4294967295
 8016088:	4620      	mov	r0, r4
 801608a:	bd70      	pop	{r4, r5, r6, pc}
 801608c:	2400273c 	.word	0x2400273c

08016090 <_malloc_r>:
 8016090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016094:	1ccd      	adds	r5, r1, #3
 8016096:	f025 0503 	bic.w	r5, r5, #3
 801609a:	3508      	adds	r5, #8
 801609c:	2d0c      	cmp	r5, #12
 801609e:	bf38      	it	cc
 80160a0:	250c      	movcc	r5, #12
 80160a2:	2d00      	cmp	r5, #0
 80160a4:	4607      	mov	r7, r0
 80160a6:	db01      	blt.n	80160ac <_malloc_r+0x1c>
 80160a8:	42a9      	cmp	r1, r5
 80160aa:	d905      	bls.n	80160b8 <_malloc_r+0x28>
 80160ac:	230c      	movs	r3, #12
 80160ae:	603b      	str	r3, [r7, #0]
 80160b0:	2600      	movs	r6, #0
 80160b2:	4630      	mov	r0, r6
 80160b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160b8:	4e2e      	ldr	r6, [pc, #184]	; (8016174 <_malloc_r+0xe4>)
 80160ba:	f000 f89d 	bl	80161f8 <__malloc_lock>
 80160be:	6833      	ldr	r3, [r6, #0]
 80160c0:	461c      	mov	r4, r3
 80160c2:	bb34      	cbnz	r4, 8016112 <_malloc_r+0x82>
 80160c4:	4629      	mov	r1, r5
 80160c6:	4638      	mov	r0, r7
 80160c8:	f7ff ffc2 	bl	8016050 <sbrk_aligned>
 80160cc:	1c43      	adds	r3, r0, #1
 80160ce:	4604      	mov	r4, r0
 80160d0:	d14d      	bne.n	801616e <_malloc_r+0xde>
 80160d2:	6834      	ldr	r4, [r6, #0]
 80160d4:	4626      	mov	r6, r4
 80160d6:	2e00      	cmp	r6, #0
 80160d8:	d140      	bne.n	801615c <_malloc_r+0xcc>
 80160da:	6823      	ldr	r3, [r4, #0]
 80160dc:	4631      	mov	r1, r6
 80160de:	4638      	mov	r0, r7
 80160e0:	eb04 0803 	add.w	r8, r4, r3
 80160e4:	f000 f878 	bl	80161d8 <_sbrk_r>
 80160e8:	4580      	cmp	r8, r0
 80160ea:	d13a      	bne.n	8016162 <_malloc_r+0xd2>
 80160ec:	6821      	ldr	r1, [r4, #0]
 80160ee:	3503      	adds	r5, #3
 80160f0:	1a6d      	subs	r5, r5, r1
 80160f2:	f025 0503 	bic.w	r5, r5, #3
 80160f6:	3508      	adds	r5, #8
 80160f8:	2d0c      	cmp	r5, #12
 80160fa:	bf38      	it	cc
 80160fc:	250c      	movcc	r5, #12
 80160fe:	4629      	mov	r1, r5
 8016100:	4638      	mov	r0, r7
 8016102:	f7ff ffa5 	bl	8016050 <sbrk_aligned>
 8016106:	3001      	adds	r0, #1
 8016108:	d02b      	beq.n	8016162 <_malloc_r+0xd2>
 801610a:	6823      	ldr	r3, [r4, #0]
 801610c:	442b      	add	r3, r5
 801610e:	6023      	str	r3, [r4, #0]
 8016110:	e00e      	b.n	8016130 <_malloc_r+0xa0>
 8016112:	6822      	ldr	r2, [r4, #0]
 8016114:	1b52      	subs	r2, r2, r5
 8016116:	d41e      	bmi.n	8016156 <_malloc_r+0xc6>
 8016118:	2a0b      	cmp	r2, #11
 801611a:	d916      	bls.n	801614a <_malloc_r+0xba>
 801611c:	1961      	adds	r1, r4, r5
 801611e:	42a3      	cmp	r3, r4
 8016120:	6025      	str	r5, [r4, #0]
 8016122:	bf18      	it	ne
 8016124:	6059      	strne	r1, [r3, #4]
 8016126:	6863      	ldr	r3, [r4, #4]
 8016128:	bf08      	it	eq
 801612a:	6031      	streq	r1, [r6, #0]
 801612c:	5162      	str	r2, [r4, r5]
 801612e:	604b      	str	r3, [r1, #4]
 8016130:	4638      	mov	r0, r7
 8016132:	f104 060b 	add.w	r6, r4, #11
 8016136:	f000 f865 	bl	8016204 <__malloc_unlock>
 801613a:	f026 0607 	bic.w	r6, r6, #7
 801613e:	1d23      	adds	r3, r4, #4
 8016140:	1af2      	subs	r2, r6, r3
 8016142:	d0b6      	beq.n	80160b2 <_malloc_r+0x22>
 8016144:	1b9b      	subs	r3, r3, r6
 8016146:	50a3      	str	r3, [r4, r2]
 8016148:	e7b3      	b.n	80160b2 <_malloc_r+0x22>
 801614a:	6862      	ldr	r2, [r4, #4]
 801614c:	42a3      	cmp	r3, r4
 801614e:	bf0c      	ite	eq
 8016150:	6032      	streq	r2, [r6, #0]
 8016152:	605a      	strne	r2, [r3, #4]
 8016154:	e7ec      	b.n	8016130 <_malloc_r+0xa0>
 8016156:	4623      	mov	r3, r4
 8016158:	6864      	ldr	r4, [r4, #4]
 801615a:	e7b2      	b.n	80160c2 <_malloc_r+0x32>
 801615c:	4634      	mov	r4, r6
 801615e:	6876      	ldr	r6, [r6, #4]
 8016160:	e7b9      	b.n	80160d6 <_malloc_r+0x46>
 8016162:	230c      	movs	r3, #12
 8016164:	603b      	str	r3, [r7, #0]
 8016166:	4638      	mov	r0, r7
 8016168:	f000 f84c 	bl	8016204 <__malloc_unlock>
 801616c:	e7a1      	b.n	80160b2 <_malloc_r+0x22>
 801616e:	6025      	str	r5, [r4, #0]
 8016170:	e7de      	b.n	8016130 <_malloc_r+0xa0>
 8016172:	bf00      	nop
 8016174:	24002738 	.word	0x24002738

08016178 <_realloc_r>:
 8016178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801617c:	4680      	mov	r8, r0
 801617e:	4614      	mov	r4, r2
 8016180:	460e      	mov	r6, r1
 8016182:	b921      	cbnz	r1, 801618e <_realloc_r+0x16>
 8016184:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016188:	4611      	mov	r1, r2
 801618a:	f7ff bf81 	b.w	8016090 <_malloc_r>
 801618e:	b92a      	cbnz	r2, 801619c <_realloc_r+0x24>
 8016190:	f7ff ff12 	bl	8015fb8 <_free_r>
 8016194:	4625      	mov	r5, r4
 8016196:	4628      	mov	r0, r5
 8016198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801619c:	f000 f838 	bl	8016210 <_malloc_usable_size_r>
 80161a0:	4284      	cmp	r4, r0
 80161a2:	4607      	mov	r7, r0
 80161a4:	d802      	bhi.n	80161ac <_realloc_r+0x34>
 80161a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80161aa:	d812      	bhi.n	80161d2 <_realloc_r+0x5a>
 80161ac:	4621      	mov	r1, r4
 80161ae:	4640      	mov	r0, r8
 80161b0:	f7ff ff6e 	bl	8016090 <_malloc_r>
 80161b4:	4605      	mov	r5, r0
 80161b6:	2800      	cmp	r0, #0
 80161b8:	d0ed      	beq.n	8016196 <_realloc_r+0x1e>
 80161ba:	42bc      	cmp	r4, r7
 80161bc:	4622      	mov	r2, r4
 80161be:	4631      	mov	r1, r6
 80161c0:	bf28      	it	cs
 80161c2:	463a      	movcs	r2, r7
 80161c4:	f7ff fbb0 	bl	8015928 <memcpy>
 80161c8:	4631      	mov	r1, r6
 80161ca:	4640      	mov	r0, r8
 80161cc:	f7ff fef4 	bl	8015fb8 <_free_r>
 80161d0:	e7e1      	b.n	8016196 <_realloc_r+0x1e>
 80161d2:	4635      	mov	r5, r6
 80161d4:	e7df      	b.n	8016196 <_realloc_r+0x1e>
	...

080161d8 <_sbrk_r>:
 80161d8:	b538      	push	{r3, r4, r5, lr}
 80161da:	4d06      	ldr	r5, [pc, #24]	; (80161f4 <_sbrk_r+0x1c>)
 80161dc:	2300      	movs	r3, #0
 80161de:	4604      	mov	r4, r0
 80161e0:	4608      	mov	r0, r1
 80161e2:	602b      	str	r3, [r5, #0]
 80161e4:	f7ec fec8 	bl	8002f78 <_sbrk>
 80161e8:	1c43      	adds	r3, r0, #1
 80161ea:	d102      	bne.n	80161f2 <_sbrk_r+0x1a>
 80161ec:	682b      	ldr	r3, [r5, #0]
 80161ee:	b103      	cbz	r3, 80161f2 <_sbrk_r+0x1a>
 80161f0:	6023      	str	r3, [r4, #0]
 80161f2:	bd38      	pop	{r3, r4, r5, pc}
 80161f4:	24002740 	.word	0x24002740

080161f8 <__malloc_lock>:
 80161f8:	4801      	ldr	r0, [pc, #4]	; (8016200 <__malloc_lock+0x8>)
 80161fa:	f000 b811 	b.w	8016220 <__retarget_lock_acquire_recursive>
 80161fe:	bf00      	nop
 8016200:	24002744 	.word	0x24002744

08016204 <__malloc_unlock>:
 8016204:	4801      	ldr	r0, [pc, #4]	; (801620c <__malloc_unlock+0x8>)
 8016206:	f000 b80c 	b.w	8016222 <__retarget_lock_release_recursive>
 801620a:	bf00      	nop
 801620c:	24002744 	.word	0x24002744

08016210 <_malloc_usable_size_r>:
 8016210:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016214:	1f18      	subs	r0, r3, #4
 8016216:	2b00      	cmp	r3, #0
 8016218:	bfbc      	itt	lt
 801621a:	580b      	ldrlt	r3, [r1, r0]
 801621c:	18c0      	addlt	r0, r0, r3
 801621e:	4770      	bx	lr

08016220 <__retarget_lock_acquire_recursive>:
 8016220:	4770      	bx	lr

08016222 <__retarget_lock_release_recursive>:
 8016222:	4770      	bx	lr

08016224 <_init>:
 8016224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016226:	bf00      	nop
 8016228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801622a:	bc08      	pop	{r3}
 801622c:	469e      	mov	lr, r3
 801622e:	4770      	bx	lr

08016230 <_fini>:
 8016230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016232:	bf00      	nop
 8016234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016236:	bc08      	pop	{r3}
 8016238:	469e      	mov	lr, r3
 801623a:	4770      	bx	lr
