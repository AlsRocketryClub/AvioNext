
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018070  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  08018340  08018340  00028340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080186f8  080186f8  000286f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018700  08018700  00028700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08018704  08018704  00028704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000150  24000000  08018708  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000031f4  24000150  08018858  00030150  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  24003344  08018858  00033344  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030150  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0003017e  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003578c  00000000  00000000  000301c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00006245  00000000  00000000  0006594d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002ae8  00000000  00000000  0006bb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000214b  00000000  00000000  0006e680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003de3d  00000000  00000000  000707cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003a910  00000000  00000000  000ae608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017d42f  00000000  00000000  000e8f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000c2c4  00000000  00000000  00266348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  0027260c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000150 	.word	0x24000150
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08018328 	.word	0x08018328

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000154 	.word	0x24000154
 800030c:	08018328 	.word	0x08018328

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr

08000324 <strlen>:
 8000324:	4603      	mov	r3, r0
 8000326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800032a:	2a00      	cmp	r2, #0
 800032c:	d1fb      	bne.n	8000326 <strlen+0x2>
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	3801      	subs	r0, #1
 8000332:	4770      	bx	lr
	...

08000340 <memchr>:
 8000340:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000344:	2a10      	cmp	r2, #16
 8000346:	db2b      	blt.n	80003a0 <memchr+0x60>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	d008      	beq.n	8000360 <memchr+0x20>
 800034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000352:	3a01      	subs	r2, #1
 8000354:	428b      	cmp	r3, r1
 8000356:	d02d      	beq.n	80003b4 <memchr+0x74>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	b342      	cbz	r2, 80003b0 <memchr+0x70>
 800035e:	d1f6      	bne.n	800034e <memchr+0xe>
 8000360:	b4f0      	push	{r4, r5, r6, r7}
 8000362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800036a:	f022 0407 	bic.w	r4, r2, #7
 800036e:	f07f 0700 	mvns.w	r7, #0
 8000372:	2300      	movs	r3, #0
 8000374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000378:	3c08      	subs	r4, #8
 800037a:	ea85 0501 	eor.w	r5, r5, r1
 800037e:	ea86 0601 	eor.w	r6, r6, r1
 8000382:	fa85 f547 	uadd8	r5, r5, r7
 8000386:	faa3 f587 	sel	r5, r3, r7
 800038a:	fa86 f647 	uadd8	r6, r6, r7
 800038e:	faa5 f687 	sel	r6, r5, r7
 8000392:	b98e      	cbnz	r6, 80003b8 <memchr+0x78>
 8000394:	d1ee      	bne.n	8000374 <memchr+0x34>
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800039c:	f002 0207 	and.w	r2, r2, #7
 80003a0:	b132      	cbz	r2, 80003b0 <memchr+0x70>
 80003a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a6:	3a01      	subs	r2, #1
 80003a8:	ea83 0301 	eor.w	r3, r3, r1
 80003ac:	b113      	cbz	r3, 80003b4 <memchr+0x74>
 80003ae:	d1f8      	bne.n	80003a2 <memchr+0x62>
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	bf06      	itte	eq
 80003bc:	4635      	moveq	r5, r6
 80003be:	3803      	subeq	r0, #3
 80003c0:	3807      	subne	r0, #7
 80003c2:	f015 0f01 	tst.w	r5, #1
 80003c6:	d107      	bne.n	80003d8 <memchr+0x98>
 80003c8:	3001      	adds	r0, #1
 80003ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ce:	bf02      	ittt	eq
 80003d0:	3001      	addeq	r0, #1
 80003d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003d6:	3001      	addeq	r0, #1
 80003d8:	bcf0      	pop	{r4, r5, r6, r7}
 80003da:	3801      	subs	r0, #1
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295
 80003f4:	f000 b970 	b.w	80006d8 <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9e08      	ldr	r6, [sp, #32]
 8000416:	460d      	mov	r5, r1
 8000418:	4604      	mov	r4, r0
 800041a:	460f      	mov	r7, r1
 800041c:	2b00      	cmp	r3, #0
 800041e:	d14a      	bne.n	80004b6 <__udivmoddi4+0xa6>
 8000420:	428a      	cmp	r2, r1
 8000422:	4694      	mov	ip, r2
 8000424:	d965      	bls.n	80004f2 <__udivmoddi4+0xe2>
 8000426:	fab2 f382 	clz	r3, r2
 800042a:	b143      	cbz	r3, 800043e <__udivmoddi4+0x2e>
 800042c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000430:	f1c3 0220 	rsb	r2, r3, #32
 8000434:	409f      	lsls	r7, r3
 8000436:	fa20 f202 	lsr.w	r2, r0, r2
 800043a:	4317      	orrs	r7, r2
 800043c:	409c      	lsls	r4, r3
 800043e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000442:	fa1f f58c 	uxth.w	r5, ip
 8000446:	fbb7 f1fe 	udiv	r1, r7, lr
 800044a:	0c22      	lsrs	r2, r4, #16
 800044c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000450:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000454:	fb01 f005 	mul.w	r0, r1, r5
 8000458:	4290      	cmp	r0, r2
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x62>
 800045c:	eb1c 0202 	adds.w	r2, ip, r2
 8000460:	f101 37ff 	add.w	r7, r1, #4294967295
 8000464:	f080 811c 	bcs.w	80006a0 <__udivmoddi4+0x290>
 8000468:	4290      	cmp	r0, r2
 800046a:	f240 8119 	bls.w	80006a0 <__udivmoddi4+0x290>
 800046e:	3902      	subs	r1, #2
 8000470:	4462      	add	r2, ip
 8000472:	1a12      	subs	r2, r2, r0
 8000474:	b2a4      	uxth	r4, r4
 8000476:	fbb2 f0fe 	udiv	r0, r2, lr
 800047a:	fb0e 2210 	mls	r2, lr, r0, r2
 800047e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000482:	fb00 f505 	mul.w	r5, r0, r5
 8000486:	42a5      	cmp	r5, r4
 8000488:	d90a      	bls.n	80004a0 <__udivmoddi4+0x90>
 800048a:	eb1c 0404 	adds.w	r4, ip, r4
 800048e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000492:	f080 8107 	bcs.w	80006a4 <__udivmoddi4+0x294>
 8000496:	42a5      	cmp	r5, r4
 8000498:	f240 8104 	bls.w	80006a4 <__udivmoddi4+0x294>
 800049c:	4464      	add	r4, ip
 800049e:	3802      	subs	r0, #2
 80004a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80004a4:	1b64      	subs	r4, r4, r5
 80004a6:	2100      	movs	r1, #0
 80004a8:	b11e      	cbz	r6, 80004b2 <__udivmoddi4+0xa2>
 80004aa:	40dc      	lsrs	r4, r3
 80004ac:	2300      	movs	r3, #0
 80004ae:	e9c6 4300 	strd	r4, r3, [r6]
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0xbc>
 80004ba:	2e00      	cmp	r6, #0
 80004bc:	f000 80ed 	beq.w	800069a <__udivmoddi4+0x28a>
 80004c0:	2100      	movs	r1, #0
 80004c2:	e9c6 0500 	strd	r0, r5, [r6]
 80004c6:	4608      	mov	r0, r1
 80004c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004cc:	fab3 f183 	clz	r1, r3
 80004d0:	2900      	cmp	r1, #0
 80004d2:	d149      	bne.n	8000568 <__udivmoddi4+0x158>
 80004d4:	42ab      	cmp	r3, r5
 80004d6:	d302      	bcc.n	80004de <__udivmoddi4+0xce>
 80004d8:	4282      	cmp	r2, r0
 80004da:	f200 80f8 	bhi.w	80006ce <__udivmoddi4+0x2be>
 80004de:	1a84      	subs	r4, r0, r2
 80004e0:	eb65 0203 	sbc.w	r2, r5, r3
 80004e4:	2001      	movs	r0, #1
 80004e6:	4617      	mov	r7, r2
 80004e8:	2e00      	cmp	r6, #0
 80004ea:	d0e2      	beq.n	80004b2 <__udivmoddi4+0xa2>
 80004ec:	e9c6 4700 	strd	r4, r7, [r6]
 80004f0:	e7df      	b.n	80004b2 <__udivmoddi4+0xa2>
 80004f2:	b902      	cbnz	r2, 80004f6 <__udivmoddi4+0xe6>
 80004f4:	deff      	udf	#255	; 0xff
 80004f6:	fab2 f382 	clz	r3, r2
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	f040 8090 	bne.w	8000620 <__udivmoddi4+0x210>
 8000500:	1a8a      	subs	r2, r1, r2
 8000502:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000506:	fa1f fe8c 	uxth.w	lr, ip
 800050a:	2101      	movs	r1, #1
 800050c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000510:	fb07 2015 	mls	r0, r7, r5, r2
 8000514:	0c22      	lsrs	r2, r4, #16
 8000516:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800051a:	fb0e f005 	mul.w	r0, lr, r5
 800051e:	4290      	cmp	r0, r2
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x124>
 8000522:	eb1c 0202 	adds.w	r2, ip, r2
 8000526:	f105 38ff 	add.w	r8, r5, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x122>
 800052c:	4290      	cmp	r0, r2
 800052e:	f200 80cb 	bhi.w	80006c8 <__udivmoddi4+0x2b8>
 8000532:	4645      	mov	r5, r8
 8000534:	1a12      	subs	r2, r2, r0
 8000536:	b2a4      	uxth	r4, r4
 8000538:	fbb2 f0f7 	udiv	r0, r2, r7
 800053c:	fb07 2210 	mls	r2, r7, r0, r2
 8000540:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000544:	fb0e fe00 	mul.w	lr, lr, r0
 8000548:	45a6      	cmp	lr, r4
 800054a:	d908      	bls.n	800055e <__udivmoddi4+0x14e>
 800054c:	eb1c 0404 	adds.w	r4, ip, r4
 8000550:	f100 32ff 	add.w	r2, r0, #4294967295
 8000554:	d202      	bcs.n	800055c <__udivmoddi4+0x14c>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f200 80bb 	bhi.w	80006d2 <__udivmoddi4+0x2c2>
 800055c:	4610      	mov	r0, r2
 800055e:	eba4 040e 	sub.w	r4, r4, lr
 8000562:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000566:	e79f      	b.n	80004a8 <__udivmoddi4+0x98>
 8000568:	f1c1 0720 	rsb	r7, r1, #32
 800056c:	408b      	lsls	r3, r1
 800056e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000572:	ea4c 0c03 	orr.w	ip, ip, r3
 8000576:	fa05 f401 	lsl.w	r4, r5, r1
 800057a:	fa20 f307 	lsr.w	r3, r0, r7
 800057e:	40fd      	lsrs	r5, r7
 8000580:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000584:	4323      	orrs	r3, r4
 8000586:	fbb5 f8f9 	udiv	r8, r5, r9
 800058a:	fa1f fe8c 	uxth.w	lr, ip
 800058e:	fb09 5518 	mls	r5, r9, r8, r5
 8000592:	0c1c      	lsrs	r4, r3, #16
 8000594:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000598:	fb08 f50e 	mul.w	r5, r8, lr
 800059c:	42a5      	cmp	r5, r4
 800059e:	fa02 f201 	lsl.w	r2, r2, r1
 80005a2:	fa00 f001 	lsl.w	r0, r0, r1
 80005a6:	d90b      	bls.n	80005c0 <__udivmoddi4+0x1b0>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80005b0:	f080 8088 	bcs.w	80006c4 <__udivmoddi4+0x2b4>
 80005b4:	42a5      	cmp	r5, r4
 80005b6:	f240 8085 	bls.w	80006c4 <__udivmoddi4+0x2b4>
 80005ba:	f1a8 0802 	sub.w	r8, r8, #2
 80005be:	4464      	add	r4, ip
 80005c0:	1b64      	subs	r4, r4, r5
 80005c2:	b29d      	uxth	r5, r3
 80005c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80005c8:	fb09 4413 	mls	r4, r9, r3, r4
 80005cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005d4:	45a6      	cmp	lr, r4
 80005d6:	d908      	bls.n	80005ea <__udivmoddi4+0x1da>
 80005d8:	eb1c 0404 	adds.w	r4, ip, r4
 80005dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80005e0:	d26c      	bcs.n	80006bc <__udivmoddi4+0x2ac>
 80005e2:	45a6      	cmp	lr, r4
 80005e4:	d96a      	bls.n	80006bc <__udivmoddi4+0x2ac>
 80005e6:	3b02      	subs	r3, #2
 80005e8:	4464      	add	r4, ip
 80005ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ee:	fba3 9502 	umull	r9, r5, r3, r2
 80005f2:	eba4 040e 	sub.w	r4, r4, lr
 80005f6:	42ac      	cmp	r4, r5
 80005f8:	46c8      	mov	r8, r9
 80005fa:	46ae      	mov	lr, r5
 80005fc:	d356      	bcc.n	80006ac <__udivmoddi4+0x29c>
 80005fe:	d053      	beq.n	80006a8 <__udivmoddi4+0x298>
 8000600:	b156      	cbz	r6, 8000618 <__udivmoddi4+0x208>
 8000602:	ebb0 0208 	subs.w	r2, r0, r8
 8000606:	eb64 040e 	sbc.w	r4, r4, lr
 800060a:	fa04 f707 	lsl.w	r7, r4, r7
 800060e:	40ca      	lsrs	r2, r1
 8000610:	40cc      	lsrs	r4, r1
 8000612:	4317      	orrs	r7, r2
 8000614:	e9c6 7400 	strd	r7, r4, [r6]
 8000618:	4618      	mov	r0, r3
 800061a:	2100      	movs	r1, #0
 800061c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000620:	f1c3 0120 	rsb	r1, r3, #32
 8000624:	fa02 fc03 	lsl.w	ip, r2, r3
 8000628:	fa20 f201 	lsr.w	r2, r0, r1
 800062c:	fa25 f101 	lsr.w	r1, r5, r1
 8000630:	409d      	lsls	r5, r3
 8000632:	432a      	orrs	r2, r5
 8000634:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000638:	fa1f fe8c 	uxth.w	lr, ip
 800063c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000640:	fb07 1510 	mls	r5, r7, r0, r1
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800064a:	fb00 f50e 	mul.w	r5, r0, lr
 800064e:	428d      	cmp	r5, r1
 8000650:	fa04 f403 	lsl.w	r4, r4, r3
 8000654:	d908      	bls.n	8000668 <__udivmoddi4+0x258>
 8000656:	eb1c 0101 	adds.w	r1, ip, r1
 800065a:	f100 38ff 	add.w	r8, r0, #4294967295
 800065e:	d22f      	bcs.n	80006c0 <__udivmoddi4+0x2b0>
 8000660:	428d      	cmp	r5, r1
 8000662:	d92d      	bls.n	80006c0 <__udivmoddi4+0x2b0>
 8000664:	3802      	subs	r0, #2
 8000666:	4461      	add	r1, ip
 8000668:	1b49      	subs	r1, r1, r5
 800066a:	b292      	uxth	r2, r2
 800066c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000670:	fb07 1115 	mls	r1, r7, r5, r1
 8000674:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000678:	fb05 f10e 	mul.w	r1, r5, lr
 800067c:	4291      	cmp	r1, r2
 800067e:	d908      	bls.n	8000692 <__udivmoddi4+0x282>
 8000680:	eb1c 0202 	adds.w	r2, ip, r2
 8000684:	f105 38ff 	add.w	r8, r5, #4294967295
 8000688:	d216      	bcs.n	80006b8 <__udivmoddi4+0x2a8>
 800068a:	4291      	cmp	r1, r2
 800068c:	d914      	bls.n	80006b8 <__udivmoddi4+0x2a8>
 800068e:	3d02      	subs	r5, #2
 8000690:	4462      	add	r2, ip
 8000692:	1a52      	subs	r2, r2, r1
 8000694:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000698:	e738      	b.n	800050c <__udivmoddi4+0xfc>
 800069a:	4631      	mov	r1, r6
 800069c:	4630      	mov	r0, r6
 800069e:	e708      	b.n	80004b2 <__udivmoddi4+0xa2>
 80006a0:	4639      	mov	r1, r7
 80006a2:	e6e6      	b.n	8000472 <__udivmoddi4+0x62>
 80006a4:	4610      	mov	r0, r2
 80006a6:	e6fb      	b.n	80004a0 <__udivmoddi4+0x90>
 80006a8:	4548      	cmp	r0, r9
 80006aa:	d2a9      	bcs.n	8000600 <__udivmoddi4+0x1f0>
 80006ac:	ebb9 0802 	subs.w	r8, r9, r2
 80006b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80006b4:	3b01      	subs	r3, #1
 80006b6:	e7a3      	b.n	8000600 <__udivmoddi4+0x1f0>
 80006b8:	4645      	mov	r5, r8
 80006ba:	e7ea      	b.n	8000692 <__udivmoddi4+0x282>
 80006bc:	462b      	mov	r3, r5
 80006be:	e794      	b.n	80005ea <__udivmoddi4+0x1da>
 80006c0:	4640      	mov	r0, r8
 80006c2:	e7d1      	b.n	8000668 <__udivmoddi4+0x258>
 80006c4:	46d0      	mov	r8, sl
 80006c6:	e77b      	b.n	80005c0 <__udivmoddi4+0x1b0>
 80006c8:	3d02      	subs	r5, #2
 80006ca:	4462      	add	r2, ip
 80006cc:	e732      	b.n	8000534 <__udivmoddi4+0x124>
 80006ce:	4608      	mov	r0, r1
 80006d0:	e70a      	b.n	80004e8 <__udivmoddi4+0xd8>
 80006d2:	4464      	add	r4, ip
 80006d4:	3802      	subs	r0, #2
 80006d6:	e742      	b.n	800055e <__udivmoddi4+0x14e>

080006d8 <__aeabi_idiv0>:
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop

080006dc <HG2_Write_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);

	return reg_value;
}

void HG2_Write_Register(uint8_t addr, uint8_t data){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	460a      	mov	r2, r1
 80006e6:	71fb      	strb	r3, [r7, #7]
 80006e8:	4613      	mov	r3, r2
 80006ea:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f2:	480c      	ldr	r0, [pc, #48]	; (8000724 <HG2_Write_Register+0x48>)
 80006f4:	f007 fc6a 	bl	8007fcc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 80006f8:	1df9      	adds	r1, r7, #7
 80006fa:	2364      	movs	r3, #100	; 0x64
 80006fc:	2201      	movs	r2, #1
 80006fe:	480a      	ldr	r0, [pc, #40]	; (8000728 <HG2_Write_Register+0x4c>)
 8000700:	f00e fa00 	bl	800eb04 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000704:	1db9      	adds	r1, r7, #6
 8000706:	2364      	movs	r3, #100	; 0x64
 8000708:	2201      	movs	r2, #1
 800070a:	4807      	ldr	r0, [pc, #28]	; (8000728 <HG2_Write_Register+0x4c>)
 800070c:	f00e f9fa 	bl	800eb04 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 8000710:	2201      	movs	r2, #1
 8000712:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000716:	4803      	ldr	r0, [pc, #12]	; (8000724 <HG2_Write_Register+0x48>)
 8000718:	f007 fc58 	bl	8007fcc <HAL_GPIO_WritePin>

}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	58020c00 	.word	0x58020c00
 8000728:	24000fc0 	.word	0x24000fc0

0800072c <LG2_Read_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
}



uint8_t LG2_Read_Register(uint8_t addr){
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	addr |= (1<<7);
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800073c:	b2db      	uxtb	r3, r3
 800073e:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <LG2_Read_Register+0x50>)
 8000748:	f007 fc40 	bl	8007fcc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 800074c:	1df9      	adds	r1, r7, #7
 800074e:	2364      	movs	r3, #100	; 0x64
 8000750:	2201      	movs	r2, #1
 8000752:	480b      	ldr	r0, [pc, #44]	; (8000780 <LG2_Read_Register+0x54>)
 8000754:	f00e f9d6 	bl	800eb04 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &reg_value, 1, 100);
 8000758:	f107 010f 	add.w	r1, r7, #15
 800075c:	2364      	movs	r3, #100	; 0x64
 800075e:	2201      	movs	r2, #1
 8000760:	4807      	ldr	r0, [pc, #28]	; (8000780 <LG2_Read_Register+0x54>)
 8000762:	f00e fbcb 	bl	800eefc <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8000766:	2201      	movs	r2, #1
 8000768:	f44f 7180 	mov.w	r1, #256	; 0x100
 800076c:	4803      	ldr	r0, [pc, #12]	; (800077c <LG2_Read_Register+0x50>)
 800076e:	f007 fc2d 	bl	8007fcc <HAL_GPIO_WritePin>

	return reg_value;
 8000772:	7bfb      	ldrb	r3, [r7, #15]
}
 8000774:	4618      	mov	r0, r3
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	58020c00 	.word	0x58020c00
 8000780:	24000fc0 	.word	0x24000fc0

08000784 <LG2_Write_Register>:

void LG2_Write_Register(uint8_t addr, uint8_t data){
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	460a      	mov	r2, r1
 800078e:	71fb      	strb	r3, [r7, #7]
 8000790:	4613      	mov	r3, r2
 8000792:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000794:	2200      	movs	r2, #0
 8000796:	f44f 7180 	mov.w	r1, #256	; 0x100
 800079a:	480c      	ldr	r0, [pc, #48]	; (80007cc <LG2_Write_Register+0x48>)
 800079c:	f007 fc16 	bl	8007fcc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 80007a0:	1df9      	adds	r1, r7, #7
 80007a2:	2364      	movs	r3, #100	; 0x64
 80007a4:	2201      	movs	r2, #1
 80007a6:	480a      	ldr	r0, [pc, #40]	; (80007d0 <LG2_Write_Register+0x4c>)
 80007a8:	f00e f9ac 	bl	800eb04 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 80007ac:	1db9      	adds	r1, r7, #6
 80007ae:	2364      	movs	r3, #100	; 0x64
 80007b0:	2201      	movs	r2, #1
 80007b2:	4807      	ldr	r0, [pc, #28]	; (80007d0 <LG2_Write_Register+0x4c>)
 80007b4:	f00e f9a6 	bl	800eb04 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 80007b8:	2201      	movs	r2, #1
 80007ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007be:	4803      	ldr	r0, [pc, #12]	; (80007cc <LG2_Write_Register+0x48>)
 80007c0:	f007 fc04 	bl	8007fcc <HAL_GPIO_WritePin>

}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	58020c00 	.word	0x58020c00
 80007d0:	24000fc0 	.word	0x24000fc0

080007d4 <LG2_Get_Gyro_X>:

float LG2_Get_Gyro_X(){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x22);
 80007da:	2022      	movs	r0, #34	; 0x22
 80007dc:	f7ff ffa6 	bl	800072c <LG2_Read_Register>
 80007e0:	4603      	mov	r3, r0
 80007e2:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x23);
 80007e4:	2023      	movs	r0, #35	; 0x23
 80007e6:	f7ff ffa1 	bl	800072c <LG2_Read_Register>
 80007ea:	4603      	mov	r3, r0
 80007ec:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80007ee:	79bb      	ldrb	r3, [r7, #6]
 80007f0:	021b      	lsls	r3, r3, #8
 80007f2:	b21a      	sxth	r2, r3
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	b21b      	sxth	r3, r3
 80007f8:	4313      	orrs	r3, r2
 80007fa:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 80007fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000800:	ee07 3a90 	vmov	s15, r3
 8000804:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000808:	eddf 6a08 	vldr	s13, [pc, #32]	; 800082c <LG2_Get_Gyro_X+0x58>
 800080c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000810:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000830 <LG2_Get_Gyro_X+0x5c>
 8000814:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000818:	edc7 7a00 	vstr	s15, [r7]
	return omega;
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	ee07 3a90 	vmov	s15, r3
}
 8000822:	eeb0 0a67 	vmov.f32	s0, s15
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	46fffe00 	.word	0x46fffe00
 8000830:	437a0000 	.word	0x437a0000

08000834 <LG2_Get_Gyro_Y>:

float LG2_Get_Gyro_Y(){
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x24);
 800083a:	2024      	movs	r0, #36	; 0x24
 800083c:	f7ff ff76 	bl	800072c <LG2_Read_Register>
 8000840:	4603      	mov	r3, r0
 8000842:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x25);
 8000844:	2025      	movs	r0, #37	; 0x25
 8000846:	f7ff ff71 	bl	800072c <LG2_Read_Register>
 800084a:	4603      	mov	r3, r0
 800084c:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 800084e:	79bb      	ldrb	r3, [r7, #6]
 8000850:	021b      	lsls	r3, r3, #8
 8000852:	b21a      	sxth	r2, r3
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	b21b      	sxth	r3, r3
 8000858:	4313      	orrs	r3, r2
 800085a:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 800085c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000860:	ee07 3a90 	vmov	s15, r3
 8000864:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000868:	eddf 6a08 	vldr	s13, [pc, #32]	; 800088c <LG2_Get_Gyro_Y+0x58>
 800086c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000870:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000890 <LG2_Get_Gyro_Y+0x5c>
 8000874:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000878:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	ee07 3a90 	vmov	s15, r3
}
 8000882:	eeb0 0a67 	vmov.f32	s0, s15
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	46fffe00 	.word	0x46fffe00
 8000890:	437a0000 	.word	0x437a0000
 8000894:	00000000 	.word	0x00000000

08000898 <LG2_Get_Gyro_Z>:

float LG2_Get_Gyro_Z(){
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x26);
 800089e:	2026      	movs	r0, #38	; 0x26
 80008a0:	f7ff ff44 	bl	800072c <LG2_Read_Register>
 80008a4:	4603      	mov	r3, r0
 80008a6:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x27);
 80008a8:	2027      	movs	r0, #39	; 0x27
 80008aa:	f7ff ff3f 	bl	800072c <LG2_Read_Register>
 80008ae:	4603      	mov	r3, r0
 80008b0:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80008b2:	79bb      	ldrb	r3, [r7, #6]
 80008b4:	021b      	lsls	r3, r3, #8
 80008b6:	b21a      	sxth	r2, r3
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	b21b      	sxth	r3, r3
 80008bc:	4313      	orrs	r3, r2
 80008be:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767.0) * 250.0;
 80008c0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008c4:	ee07 3a90 	vmov	s15, r3
 80008c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008cc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80008d0:	ed9f 5b09 	vldr	d5, [pc, #36]	; 80008f8 <LG2_Get_Gyro_Z+0x60>
 80008d4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008d8:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000900 <LG2_Get_Gyro_Z+0x68>
 80008dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008e0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008e4:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	ee07 3a90 	vmov	s15, r3
}
 80008ee:	eeb0 0a67 	vmov.f32	s0, s15
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	00000000 	.word	0x00000000
 80008fc:	40dfffc0 	.word	0x40dfffc0
 8000900:	00000000 	.word	0x00000000
 8000904:	406f4000 	.word	0x406f4000

08000908 <setServo>:
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;


void setServo(int servoNum, float angle){
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal =(int)( 3000 + (4000 * (angle/180)));
 8000914:	ed97 7a00 	vldr	s14, [r7]
 8000918:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000988 <setServo+0x80>
 800091c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000920:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800098c <setServo+0x84>
 8000924:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000928:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000990 <setServo+0x88>
 800092c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000930:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000934:	ee17 3a90 	vmov	r3, s15
 8000938:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	3b01      	subs	r3, #1
 800093e:	2b03      	cmp	r3, #3
 8000940:	d81a      	bhi.n	8000978 <setServo+0x70>
 8000942:	a201      	add	r2, pc, #4	; (adr r2, 8000948 <setServo+0x40>)
 8000944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000948:	08000959 	.word	0x08000959
 800094c:	08000961 	.word	0x08000961
 8000950:	08000969 	.word	0x08000969
 8000954:	08000971 	.word	0x08000971
		case 1:
			TIM4->CCR4 = timerVal;
 8000958:	4a0e      	ldr	r2, [pc, #56]	; (8000994 <setServo+0x8c>)
 800095a:	89fb      	ldrh	r3, [r7, #14]
 800095c:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 800095e:	e00c      	b.n	800097a <setServo+0x72>
		case 2:
			TIM4->CCR3 = timerVal;
 8000960:	4a0c      	ldr	r2, [pc, #48]	; (8000994 <setServo+0x8c>)
 8000962:	89fb      	ldrh	r3, [r7, #14]
 8000964:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 8000966:	e008      	b.n	800097a <setServo+0x72>
		case 3:
			TIM4->CCR2 = timerVal;
 8000968:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <setServo+0x8c>)
 800096a:	89fb      	ldrh	r3, [r7, #14]
 800096c:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 800096e:	e004      	b.n	800097a <setServo+0x72>
		case 4:
			TIM4->CCR1 = timerVal;
 8000970:	4a08      	ldr	r2, [pc, #32]	; (8000994 <setServo+0x8c>)
 8000972:	89fb      	ldrh	r3, [r7, #14]
 8000974:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8000976:	e000      	b.n	800097a <setServo+0x72>

		default:
			break;
 8000978:	bf00      	nop
	}
}
 800097a:	bf00      	nop
 800097c:	3714      	adds	r7, #20
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	43340000 	.word	0x43340000
 800098c:	457a0000 	.word	0x457a0000
 8000990:	453b8000 	.word	0x453b8000
 8000994:	40000800 	.word	0x40000800

08000998 <setLEDs>:

void setLEDs(void) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b08e      	sub	sp, #56	; 0x38
 800099c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 800099e:	2300      	movs	r3, #0
 80009a0:	637b      	str	r3, [r7, #52]	; 0x34
 80009a2:	e181      	b.n	8000ca8 <setLEDs+0x310>
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 80009a4:	4aa1      	ldr	r2, [pc, #644]	; (8000c2c <setLEDs+0x294>)
 80009a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80009ac:	2b03      	cmp	r3, #3
 80009ae:	f200 8177 	bhi.w	8000ca0 <setLEDs+0x308>
 80009b2:	a201      	add	r2, pc, #4	; (adr r2, 80009b8 <setLEDs+0x20>)
 80009b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b8:	080009c9 	.word	0x080009c9
 80009bc:	08000a79 	.word	0x08000a79
 80009c0:	08000b29 	.word	0x08000b29
 80009c4:	08000bd9 	.word	0x08000bd9
		case 0:
			for (int j = 0; j < 3; j++) {
 80009c8:	2300      	movs	r3, #0
 80009ca:	633b      	str	r3, [r7, #48]	; 0x30
 80009cc:	e042      	b.n	8000a54 <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 80009ce:	2300      	movs	r3, #0
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009d2:	e039      	b.n	8000a48 <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 80009d4:	4996      	ldr	r1, [pc, #600]	; (8000c30 <setLEDs+0x298>)
 80009d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009d8:	4613      	mov	r3, r2
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	4413      	add	r3, r2
 80009de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80009e0:	4413      	add	r3, r2
 80009e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009e6:	2180      	movs	r1, #128	; 0x80
 80009e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009ea:	fa41 f202 	asr.w	r2, r1, r2
 80009ee:	4013      	ands	r3, r2
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d013      	beq.n	8000a1c <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 80009f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009f6:	00da      	lsls	r2, r3, #3
 80009f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009fa:	18d1      	adds	r1, r2, r3
 80009fc:	4a8b      	ldr	r2, [pc, #556]	; (8000c2c <setLEDs+0x294>)
 80009fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a00:	00db      	lsls	r3, r3, #3
 8000a02:	4413      	add	r3, r2
 8000a04:	685a      	ldr	r2, [r3, #4]
 8000a06:	4613      	mov	r3, r2
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	4413      	add	r3, r2
 8000a0c:	00db      	lsls	r3, r3, #3
 8000a0e:	440b      	add	r3, r1
 8000a10:	3308      	adds	r3, #8
 8000a12:	4a88      	ldr	r2, [pc, #544]	; (8000c34 <setLEDs+0x29c>)
 8000a14:	213c      	movs	r1, #60	; 0x3c
 8000a16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000a1a:	e012      	b.n	8000a42 <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a1e:	00da      	lsls	r2, r3, #3
 8000a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a22:	18d1      	adds	r1, r2, r3
 8000a24:	4a81      	ldr	r2, [pc, #516]	; (8000c2c <setLEDs+0x294>)
 8000a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a28:	00db      	lsls	r3, r3, #3
 8000a2a:	4413      	add	r3, r2
 8000a2c:	685a      	ldr	r2, [r3, #4]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	4413      	add	r3, r2
 8000a34:	00db      	lsls	r3, r3, #3
 8000a36:	440b      	add	r3, r1
 8000a38:	3308      	adds	r3, #8
 8000a3a:	4a7e      	ldr	r2, [pc, #504]	; (8000c34 <setLEDs+0x29c>)
 8000a3c:	211e      	movs	r1, #30
 8000a3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a44:	3301      	adds	r3, #1
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a4a:	2b07      	cmp	r3, #7
 8000a4c:	ddc2      	ble.n	80009d4 <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 8000a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a50:	3301      	adds	r3, #1
 8000a52:	633b      	str	r3, [r7, #48]	; 0x30
 8000a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	ddb9      	ble.n	80009ce <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000a5a:	2380      	movs	r3, #128	; 0x80
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a5e:	e007      	b.n	8000a70 <setLEDs+0xd8>
				LED_PWM_Data_0[i] = 0;
 8000a60:	4a74      	ldr	r2, [pc, #464]	; (8000c34 <setLEDs+0x29c>)
 8000a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a64:	2100      	movs	r1, #0
 8000a66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a72:	2bb1      	cmp	r3, #177	; 0xb1
 8000a74:	ddf4      	ble.n	8000a60 <setLEDs+0xc8>
			}
			break;
 8000a76:	e114      	b.n	8000ca2 <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a7c:	e042      	b.n	8000b04 <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]
 8000a82:	e039      	b.n	8000af8 <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000a84:	496a      	ldr	r1, [pc, #424]	; (8000c30 <setLEDs+0x298>)
 8000a86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a88:	4613      	mov	r3, r2
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	4413      	add	r3, r2
 8000a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a90:	4413      	add	r3, r2
 8000a92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a96:	2180      	movs	r1, #128	; 0x80
 8000a98:	6a3a      	ldr	r2, [r7, #32]
 8000a9a:	fa41 f202 	asr.w	r2, r1, r2
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d013      	beq.n	8000acc <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa6:	00da      	lsls	r2, r3, #3
 8000aa8:	6a3b      	ldr	r3, [r7, #32]
 8000aaa:	18d1      	adds	r1, r2, r3
 8000aac:	4a5f      	ldr	r2, [pc, #380]	; (8000c2c <setLEDs+0x294>)
 8000aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	4413      	add	r3, r2
 8000ab4:	685a      	ldr	r2, [r3, #4]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	4413      	add	r3, r2
 8000abc:	00db      	lsls	r3, r3, #3
 8000abe:	440b      	add	r3, r1
 8000ac0:	3308      	adds	r3, #8
 8000ac2:	4a5d      	ldr	r2, [pc, #372]	; (8000c38 <setLEDs+0x2a0>)
 8000ac4:	213c      	movs	r1, #60	; 0x3c
 8000ac6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000aca:	e012      	b.n	8000af2 <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ace:	00da      	lsls	r2, r3, #3
 8000ad0:	6a3b      	ldr	r3, [r7, #32]
 8000ad2:	18d1      	adds	r1, r2, r3
 8000ad4:	4a55      	ldr	r2, [pc, #340]	; (8000c2c <setLEDs+0x294>)
 8000ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ad8:	00db      	lsls	r3, r3, #3
 8000ada:	4413      	add	r3, r2
 8000adc:	685a      	ldr	r2, [r3, #4]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	4413      	add	r3, r2
 8000ae4:	00db      	lsls	r3, r3, #3
 8000ae6:	440b      	add	r3, r1
 8000ae8:	3308      	adds	r3, #8
 8000aea:	4a53      	ldr	r2, [pc, #332]	; (8000c38 <setLEDs+0x2a0>)
 8000aec:	211e      	movs	r1, #30
 8000aee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000af2:	6a3b      	ldr	r3, [r7, #32]
 8000af4:	3301      	adds	r3, #1
 8000af6:	623b      	str	r3, [r7, #32]
 8000af8:	6a3b      	ldr	r3, [r7, #32]
 8000afa:	2b07      	cmp	r3, #7
 8000afc:	ddc2      	ble.n	8000a84 <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 8000afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b00:	3301      	adds	r3, #1
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
 8000b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	ddb9      	ble.n	8000a7e <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000b0a:	2380      	movs	r3, #128	; 0x80
 8000b0c:	61fb      	str	r3, [r7, #28]
 8000b0e:	e007      	b.n	8000b20 <setLEDs+0x188>
				LED_PWM_Data_1[i] = 0;
 8000b10:	4a49      	ldr	r2, [pc, #292]	; (8000c38 <setLEDs+0x2a0>)
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	2100      	movs	r1, #0
 8000b16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	61fb      	str	r3, [r7, #28]
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	2bb1      	cmp	r3, #177	; 0xb1
 8000b24:	ddf4      	ble.n	8000b10 <setLEDs+0x178>
			}
			break;
 8000b26:	e0bc      	b.n	8000ca2 <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61bb      	str	r3, [r7, #24]
 8000b2c:	e042      	b.n	8000bb4 <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
 8000b32:	e039      	b.n	8000ba8 <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000b34:	493e      	ldr	r1, [pc, #248]	; (8000c30 <setLEDs+0x298>)
 8000b36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b38:	4613      	mov	r3, r2
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	4413      	add	r3, r2
 8000b3e:	69ba      	ldr	r2, [r7, #24]
 8000b40:	4413      	add	r3, r2
 8000b42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b46:	2180      	movs	r1, #128	; 0x80
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	fa41 f202 	asr.w	r2, r1, r2
 8000b4e:	4013      	ands	r3, r2
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d013      	beq.n	8000b7c <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	00da      	lsls	r2, r3, #3
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	18d1      	adds	r1, r2, r3
 8000b5c:	4a33      	ldr	r2, [pc, #204]	; (8000c2c <setLEDs+0x294>)
 8000b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b60:	00db      	lsls	r3, r3, #3
 8000b62:	4413      	add	r3, r2
 8000b64:	685a      	ldr	r2, [r3, #4]
 8000b66:	4613      	mov	r3, r2
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	4413      	add	r3, r2
 8000b6c:	00db      	lsls	r3, r3, #3
 8000b6e:	440b      	add	r3, r1
 8000b70:	3308      	adds	r3, #8
 8000b72:	4a32      	ldr	r2, [pc, #200]	; (8000c3c <setLEDs+0x2a4>)
 8000b74:	213c      	movs	r1, #60	; 0x3c
 8000b76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000b7a:	e012      	b.n	8000ba2 <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	00da      	lsls	r2, r3, #3
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	18d1      	adds	r1, r2, r3
 8000b84:	4a29      	ldr	r2, [pc, #164]	; (8000c2c <setLEDs+0x294>)
 8000b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b88:	00db      	lsls	r3, r3, #3
 8000b8a:	4413      	add	r3, r2
 8000b8c:	685a      	ldr	r2, [r3, #4]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	4413      	add	r3, r2
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	440b      	add	r3, r1
 8000b98:	3308      	adds	r3, #8
 8000b9a:	4a28      	ldr	r2, [pc, #160]	; (8000c3c <setLEDs+0x2a4>)
 8000b9c:	211e      	movs	r1, #30
 8000b9e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	2b07      	cmp	r3, #7
 8000bac:	ddc2      	ble.n	8000b34 <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	61bb      	str	r3, [r7, #24]
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	ddb9      	ble.n	8000b2e <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000bba:	2338      	movs	r3, #56	; 0x38
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	e007      	b.n	8000bd0 <setLEDs+0x238>
				LED_PWM_Data_2[i] = 0;
 8000bc0:	4a1e      	ldr	r2, [pc, #120]	; (8000c3c <setLEDs+0x2a4>)
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	2b69      	cmp	r3, #105	; 0x69
 8000bd4:	ddf4      	ble.n	8000bc0 <setLEDs+0x228>
			}
			break;
 8000bd6:	e064      	b.n	8000ca2 <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	e04e      	b.n	8000c7c <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 8000bde:	2300      	movs	r3, #0
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	e045      	b.n	8000c70 <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000be4:	4912      	ldr	r1, [pc, #72]	; (8000c30 <setLEDs+0x298>)
 8000be6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000be8:	4613      	mov	r3, r2
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	4413      	add	r3, r2
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bf6:	2180      	movs	r1, #128	; 0x80
 8000bf8:	68ba      	ldr	r2, [r7, #8]
 8000bfa:	fa41 f202 	asr.w	r2, r1, r2
 8000bfe:	4013      	ands	r3, r2
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d01f      	beq.n	8000c44 <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	00da      	lsls	r2, r3, #3
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	18d1      	adds	r1, r2, r3
 8000c0c:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <setLEDs+0x294>)
 8000c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	4413      	add	r3, r2
 8000c14:	685a      	ldr	r2, [r3, #4]
 8000c16:	4613      	mov	r3, r2
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	4413      	add	r3, r2
 8000c1c:	00db      	lsls	r3, r3, #3
 8000c1e:	440b      	add	r3, r1
 8000c20:	3308      	adds	r3, #8
 8000c22:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <setLEDs+0x2a8>)
 8000c24:	213c      	movs	r1, #60	; 0x3c
 8000c26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000c2a:	e01e      	b.n	8000c6a <setLEDs+0x2d2>
 8000c2c:	080184e4 	.word	0x080184e4
 8000c30:	24000b50 	.word	0x24000b50
 8000c34:	24000270 	.word	0x24000270
 8000c38:	24000538 	.word	0x24000538
 8000c3c:	24000800 	.word	0x24000800
 8000c40:	240009a8 	.word	0x240009a8
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	00da      	lsls	r2, r3, #3
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	18d1      	adds	r1, r2, r3
 8000c4c:	4a26      	ldr	r2, [pc, #152]	; (8000ce8 <setLEDs+0x350>)
 8000c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c50:	00db      	lsls	r3, r3, #3
 8000c52:	4413      	add	r3, r2
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	4613      	mov	r3, r2
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	4413      	add	r3, r2
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	440b      	add	r3, r1
 8000c60:	3308      	adds	r3, #8
 8000c62:	4a22      	ldr	r2, [pc, #136]	; (8000cec <setLEDs+0x354>)
 8000c64:	211e      	movs	r1, #30
 8000c66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	2b07      	cmp	r3, #7
 8000c74:	ddb6      	ble.n	8000be4 <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	ddad      	ble.n	8000bde <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8000c82:	2338      	movs	r3, #56	; 0x38
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	e007      	b.n	8000c98 <setLEDs+0x300>
				LED_PWM_Data_3[i] = 0;
 8000c88:	4a18      	ldr	r2, [pc, #96]	; (8000cec <setLEDs+0x354>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	3301      	adds	r3, #1
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b69      	cmp	r3, #105	; 0x69
 8000c9c:	ddf4      	ble.n	8000c88 <setLEDs+0x2f0>
			}
			break;
 8000c9e:	e000      	b.n	8000ca2 <setLEDs+0x30a>
		default:
			break;
 8000ca0:	bf00      	nop
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 8000ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8000ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000caa:	2b0d      	cmp	r3, #13
 8000cac:	f77f ae7a 	ble.w	80009a4 <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0, (NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
 8000cb0:	23b2      	movs	r3, #178	; 0xb2
 8000cb2:	4a0f      	ldr	r2, [pc, #60]	; (8000cf0 <setLEDs+0x358>)
 8000cb4:	210c      	movs	r1, #12
 8000cb6:	480f      	ldr	r0, [pc, #60]	; (8000cf4 <setLEDs+0x35c>)
 8000cb8:	f00e fd64 	bl	800f784 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1, (NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
 8000cbc:	23b2      	movs	r3, #178	; 0xb2
 8000cbe:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <setLEDs+0x360>)
 8000cc0:	2108      	movs	r1, #8
 8000cc2:	480e      	ldr	r0, [pc, #56]	; (8000cfc <setLEDs+0x364>)
 8000cc4:	f00e fd5e 	bl	800f784 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2, (NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
 8000cc8:	236a      	movs	r3, #106	; 0x6a
 8000cca:	4a0d      	ldr	r2, [pc, #52]	; (8000d00 <setLEDs+0x368>)
 8000ccc:	2104      	movs	r1, #4
 8000cce:	480d      	ldr	r0, [pc, #52]	; (8000d04 <setLEDs+0x36c>)
 8000cd0:	f00e fd58 	bl	800f784 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3, (NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3
 8000cd4:	236a      	movs	r3, #106	; 0x6a
 8000cd6:	4a05      	ldr	r2, [pc, #20]	; (8000cec <setLEDs+0x354>)
 8000cd8:	2100      	movs	r1, #0
 8000cda:	480a      	ldr	r0, [pc, #40]	; (8000d04 <setLEDs+0x36c>)
 8000cdc:	f00e fd52 	bl	800f784 <HAL_TIM_PWM_Start_DMA>

}
 8000ce0:	bf00      	nop
 8000ce2:	3738      	adds	r7, #56	; 0x38
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	080184e4 	.word	0x080184e4
 8000cec:	240009a8 	.word	0x240009a8
 8000cf0:	24000270 	.word	0x24000270
 8000cf4:	240011b4 	.word	0x240011b4
 8000cf8:	24000538 	.word	0x24000538
 8000cfc:	240010d0 	.word	0x240010d0
 8000d00:	24000800 	.word	0x24000800
 8000d04:	2400111c 	.word	0x2400111c

08000d08 <LoRA_Read_Register>:
	}
}



uint8_t LoRA_Read_Register(uint8_t addr){
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d18:	480d      	ldr	r0, [pc, #52]	; (8000d50 <LoRA_Read_Register+0x48>)
 8000d1a:	f007 f957 	bl	8007fcc <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000d1e:	1df9      	adds	r1, r7, #7
 8000d20:	2364      	movs	r3, #100	; 0x64
 8000d22:	2201      	movs	r2, #1
 8000d24:	480b      	ldr	r0, [pc, #44]	; (8000d54 <LoRA_Read_Register+0x4c>)
 8000d26:	f00d feed 	bl	800eb04 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 8000d2a:	f107 010f 	add.w	r1, r7, #15
 8000d2e:	2364      	movs	r3, #100	; 0x64
 8000d30:	2201      	movs	r2, #1
 8000d32:	4808      	ldr	r0, [pc, #32]	; (8000d54 <LoRA_Read_Register+0x4c>)
 8000d34:	f00e f8e2 	bl	800eefc <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d3e:	4804      	ldr	r0, [pc, #16]	; (8000d50 <LoRA_Read_Register+0x48>)
 8000d40:	f007 f944 	bl	8007fcc <HAL_GPIO_WritePin>

	return reg_value;
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	58020000 	.word	0x58020000
 8000d54:	24001048 	.word	0x24001048

08000d58 <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	460a      	mov	r2, r1
 8000d62:	71fb      	strb	r3, [r7, #7]
 8000d64:	4613      	mov	r3, r2
 8000d66:	71bb      	strb	r3, [r7, #6]
	addr |= (1<<7);
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d78:	480c      	ldr	r0, [pc, #48]	; (8000dac <LoRA_Write_Register+0x54>)
 8000d7a:	f007 f927 	bl	8007fcc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000d7e:	1df9      	adds	r1, r7, #7
 8000d80:	2364      	movs	r3, #100	; 0x64
 8000d82:	2201      	movs	r2, #1
 8000d84:	480a      	ldr	r0, [pc, #40]	; (8000db0 <LoRA_Write_Register+0x58>)
 8000d86:	f00d febd 	bl	800eb04 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 8000d8a:	1db9      	adds	r1, r7, #6
 8000d8c:	2364      	movs	r3, #100	; 0x64
 8000d8e:	2201      	movs	r2, #1
 8000d90:	4807      	ldr	r0, [pc, #28]	; (8000db0 <LoRA_Write_Register+0x58>)
 8000d92:	f00d feb7 	bl	800eb04 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000d96:	2201      	movs	r2, #1
 8000d98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d9c:	4803      	ldr	r0, [pc, #12]	; (8000dac <LoRA_Write_Register+0x54>)
 8000d9e:	f007 f915 	bl	8007fcc <HAL_GPIO_WritePin>

}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	58020000 	.word	0x58020000
 8000db0:	24001048 	.word	0x24001048

08000db4 <LoRA_sleep>:


void LoRA_sleep(void){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8000db8:	2180      	movs	r1, #128	; 0x80
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f7ff ffcc 	bl	8000d58 <LoRA_Write_Register>
}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency){
 8000dc4:	b5b0      	push	{r4, r5, r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8000dcc:	6879      	ldr	r1, [r7, #4]
 8000dce:	17c8      	asrs	r0, r1, #31
 8000dd0:	460a      	mov	r2, r1
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	1355      	asrs	r5, r2, #13
 8000dd6:	04d4      	lsls	r4, r2, #19
 8000dd8:	4a18      	ldr	r2, [pc, #96]	; (8000e3c <LoRA_set_frequency+0x78>)
 8000dda:	f04f 0300 	mov.w	r3, #0
 8000dde:	4620      	mov	r0, r4
 8000de0:	4629      	mov	r1, r5
 8000de2:	f7ff fafd 	bl	80003e0 <__aeabi_uldivmod>
 8000de6:	4602      	mov	r2, r0
 8000de8:	460b      	mov	r3, r1
 8000dea:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8000dee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000df2:	f04f 0200 	mov.w	r2, #0
 8000df6:	f04f 0300 	mov.w	r3, #0
 8000dfa:	0c02      	lsrs	r2, r0, #16
 8000dfc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e00:	0c0b      	lsrs	r3, r1, #16
 8000e02:	b2d3      	uxtb	r3, r2
 8000e04:	4619      	mov	r1, r3
 8000e06:	2006      	movs	r0, #6
 8000e08:	f7ff ffa6 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t)(frf >> 8));
 8000e0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e10:	f04f 0200 	mov.w	r2, #0
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	0a02      	lsrs	r2, r0, #8
 8000e1a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000e1e:	0a0b      	lsrs	r3, r1, #8
 8000e20:	b2d3      	uxtb	r3, r2
 8000e22:	4619      	mov	r1, r3
 8000e24:	2007      	movs	r0, #7
 8000e26:	f7ff ff97 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8000e2a:	7a3b      	ldrb	r3, [r7, #8]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	2008      	movs	r0, #8
 8000e30:	f7ff ff92 	bl	8000d58 <LoRA_Write_Register>
}
 8000e34:	bf00      	nop
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e3c:	01e84800 	.word	0x01e84800

08000e40 <LoRA_idle>:

void LoRA_idle(){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8000e44:	2181      	movs	r1, #129	; 0x81
 8000e46:	2001      	movs	r0, #1
 8000e48:	f7ff ff86 	bl	8000d58 <LoRA_Write_Register>
}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <LoRA_setOCP>:

void LoRA_setOCP(uint8_t mA){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
	  uint8_t ocpTrim = 27;
 8000e5a:	231b      	movs	r3, #27
 8000e5c:	73fb      	strb	r3, [r7, #15]

	  if (mA <= 120) {
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	2b78      	cmp	r3, #120	; 0x78
 8000e62:	d809      	bhi.n	8000e78 <LoRA_setOCP+0x28>
	    ocpTrim = (mA - 45) / 5;
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	3b2d      	subs	r3, #45	; 0x2d
 8000e68:	4a11      	ldr	r2, [pc, #68]	; (8000eb0 <LoRA_setOCP+0x60>)
 8000e6a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e6e:	1052      	asrs	r2, r2, #1
 8000e70:	17db      	asrs	r3, r3, #31
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	73fb      	strb	r3, [r7, #15]
 8000e76:	e00b      	b.n	8000e90 <LoRA_setOCP+0x40>
	  } else if (mA <=240) {
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	2bf0      	cmp	r3, #240	; 0xf0
 8000e7c:	d808      	bhi.n	8000e90 <LoRA_setOCP+0x40>
	    ocpTrim = (mA + 30) / 10;
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	331e      	adds	r3, #30
 8000e82:	4a0b      	ldr	r2, [pc, #44]	; (8000eb0 <LoRA_setOCP+0x60>)
 8000e84:	fb82 1203 	smull	r1, r2, r2, r3
 8000e88:	1092      	asrs	r2, r2, #2
 8000e8a:	17db      	asrs	r3, r3, #31
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	73fb      	strb	r3, [r7, #15]
	  }

	  LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	f003 031f 	and.w	r3, r3, #31
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	f043 0320 	orr.w	r3, r3, #32
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	200b      	movs	r0, #11
 8000ea2:	f7ff ff59 	bl	8000d58 <LoRA_Write_Register>
}
 8000ea6:	bf00      	nop
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	66666667 	.word	0x66666667

08000eb4 <LoRA_setTxPower>:

void LoRA_setTxPower(int level){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
    // PA BOOST
    if (level > 17) {
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b11      	cmp	r3, #17
 8000ec0:	dd0f      	ble.n	8000ee2 <LoRA_setTxPower+0x2e>
      if (level > 20) {
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b14      	cmp	r3, #20
 8000ec6:	dd01      	ble.n	8000ecc <LoRA_setTxPower+0x18>
        level = 20;
 8000ec8:	2314      	movs	r3, #20
 8000eca:	607b      	str	r3, [r7, #4]
      }

      // subtract 3 from level, so 18 - 20 maps to 15 - 17
      level -= 3;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b03      	subs	r3, #3
 8000ed0:	607b      	str	r3, [r7, #4]

      // High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
      LoRA_Write_Register(REG_PA_DAC, 0x87);
 8000ed2:	2187      	movs	r1, #135	; 0x87
 8000ed4:	204d      	movs	r0, #77	; 0x4d
 8000ed6:	f7ff ff3f 	bl	8000d58 <LoRA_Write_Register>
      LoRA_setOCP(140);
 8000eda:	208c      	movs	r0, #140	; 0x8c
 8000edc:	f7ff ffb8 	bl	8000e50 <LoRA_setOCP>
 8000ee0:	e00b      	b.n	8000efa <LoRA_setTxPower+0x46>
    } else {
      if (level < 2) {
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	dc01      	bgt.n	8000eec <LoRA_setTxPower+0x38>
        level = 2;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	607b      	str	r3, [r7, #4]
      }
      //Default value PA_HF/LF or +17dBm
      LoRA_Write_Register(REG_PA_DAC, 0x84);
 8000eec:	2184      	movs	r1, #132	; 0x84
 8000eee:	204d      	movs	r0, #77	; 0x4d
 8000ef0:	f7ff ff32 	bl	8000d58 <LoRA_Write_Register>
      LoRA_setOCP(100);
 8000ef4:	2064      	movs	r0, #100	; 0x64
 8000ef6:	f7ff ffab 	bl	8000e50 <LoRA_setOCP>
    }

    LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	3b02      	subs	r3, #2
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	b25b      	sxtb	r3, r3
 8000f04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f08:	b25b      	sxtb	r3, r3
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	2009      	movs	r0, #9
 8000f10:	f7ff ff22 	bl	8000d58 <LoRA_Write_Register>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <LoRA_explicit_header_mode>:

void LoRA_explicit_header_mode(){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_MODEM_CONFIG_1, LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
 8000f20:	201d      	movs	r0, #29
 8000f22:	f7ff fef1 	bl	8000d08 <LoRA_Read_Register>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f023 0301 	bic.w	r3, r3, #1
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	4619      	mov	r1, r3
 8000f30:	201d      	movs	r0, #29
 8000f32:	f7ff ff11 	bl	8000d58 <LoRA_Write_Register>
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <LoRA_begin>:

void LoRA_begin(long frequency){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b09c      	sub	sp, #112	; 0x70
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8000f44:	2201      	movs	r2, #1
 8000f46:	2101      	movs	r1, #1
 8000f48:	4822      	ldr	r0, [pc, #136]	; (8000fd4 <LoRA_begin+0x98>)
 8000f4a:	f007 f83f 	bl	8007fcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f54:	4820      	ldr	r0, [pc, #128]	; (8000fd8 <LoRA_begin+0x9c>)
 8000f56:	f007 f839 	bl	8007fcc <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 8000f5a:	2042      	movs	r0, #66	; 0x42
 8000f5c:	f7ff fed4 	bl	8000d08 <LoRA_Read_Register>
 8000f60:	4603      	mov	r3, r0
 8000f62:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    char data_debug[100];
	sprintf( data_debug,  "%x\n", version);
 8000f66:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000f6a:	f107 0308 	add.w	r3, r7, #8
 8000f6e:	491b      	ldr	r1, [pc, #108]	; (8000fdc <LoRA_begin+0xa0>)
 8000f70:	4618      	mov	r0, r3
 8000f72:	f016 f873 	bl	801705c <siprintf>
	CDC_Transmit_HS(data_debug, strlen(data_debug));
 8000f76:	f107 0308 	add.w	r3, r7, #8
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff f9d2 	bl	8000324 <strlen>
 8000f80:	4602      	mov	r2, r0
 8000f82:	f107 0308 	add.w	r3, r7, #8
 8000f86:	4611      	mov	r1, r2
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f015 fc13 	bl	80167b4 <CDC_Transmit_HS>

	LoRA_sleep();
 8000f8e:	f7ff ff11 	bl	8000db4 <LoRA_sleep>
	LoRA_set_frequency(868000000);
 8000f92:	4813      	ldr	r0, [pc, #76]	; (8000fe0 <LoRA_begin+0xa4>)
 8000f94:	f7ff ff16 	bl	8000dc4 <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 8000f98:	2100      	movs	r1, #0
 8000f9a:	200f      	movs	r0, #15
 8000f9c:	f7ff fedc 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	200e      	movs	r0, #14
 8000fa4:	f7ff fed8 	bl	8000d58 <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 8000fa8:	200c      	movs	r0, #12
 8000faa:	f7ff fead 	bl	8000d08 <LoRA_Read_Register>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	f043 0303 	orr.w	r3, r3, #3
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	200c      	movs	r0, #12
 8000fba:	f7ff fecd 	bl	8000d58 <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 8000fbe:	2104      	movs	r1, #4
 8000fc0:	2026      	movs	r0, #38	; 0x26
 8000fc2:	f7ff fec9 	bl	8000d58 <LoRA_Write_Register>

	LoRA_setTxPower(17);
 8000fc6:	2011      	movs	r0, #17
 8000fc8:	f7ff ff74 	bl	8000eb4 <LoRA_setTxPower>

}
 8000fcc:	bf00      	nop
 8000fce:	3770      	adds	r7, #112	; 0x70
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	58020c00 	.word	0x58020c00
 8000fd8:	58020000 	.word	0x58020000
 8000fdc:	08018340 	.word	0x08018340
 8000fe0:	33bca100 	.word	0x33bca100

08000fe4 <LoRA_beginPacket>:


void LoRA_beginPacket(){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	LoRA_explicit_header_mode();
 8000fe8:	f7ff ff98 	bl	8000f1c <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8000fec:	2100      	movs	r1, #0
 8000fee:	200d      	movs	r0, #13
 8000ff0:	f7ff feb2 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, 0);
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2022      	movs	r0, #34	; 0x22
 8000ff8:	f7ff feae 	bl	8000d58 <LoRA_Write_Register>
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <LoRA_endPacket>:

void LoRA_endPacket(){
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8001004:	2183      	movs	r1, #131	; 0x83
 8001006:	2001      	movs	r0, #1
 8001008:	f7ff fea6 	bl	8000d58 <LoRA_Write_Register>

	while((LoRA_Read_Register(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0){
 800100c:	bf00      	nop
 800100e:	2012      	movs	r0, #18
 8001010:	f7ff fe7a 	bl	8000d08 <LoRA_Read_Register>
 8001014:	4603      	mov	r3, r0
 8001016:	f003 0308 	and.w	r3, r3, #8
 800101a:	2b00      	cmp	r3, #0
 800101c:	d0f7      	beq.n	800100e <LoRA_endPacket+0xe>

	}
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 800101e:	2185      	movs	r1, #133	; 0x85
 8001020:	2001      	movs	r0, #1
 8001022:	f7ff fe99 	bl	8000d58 <LoRA_Write_Register>

	LoRA_Write_Register(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8001026:	2108      	movs	r1, #8
 8001028:	2012      	movs	r0, #18
 800102a:	f7ff fe95 	bl	8000d58 <LoRA_Write_Register>

}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}

08001032 <LoRA_parsePacket>:


int LoRA_parsePacket(){
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
	int packetLenght = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	607b      	str	r3, [r7, #4]
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 800103c:	2012      	movs	r0, #18
 800103e:	f7ff fe63 	bl	8000d08 <LoRA_Read_Register>
 8001042:	4603      	mov	r3, r0
 8001044:	603b      	str	r3, [r7, #0]

	LoRA_explicit_header_mode();
 8001046:	f7ff ff69 	bl	8000f1c <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	b2db      	uxtb	r3, r3
 800104e:	4619      	mov	r1, r3
 8001050:	2012      	movs	r0, #18
 8001052:	f7ff fe81 	bl	8000d58 <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800105c:	2b00      	cmp	r3, #0
 800105e:	d016      	beq.n	800108e <LoRA_parsePacket+0x5c>
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	f003 0320 	and.w	r3, r3, #32
 8001066:	2b00      	cmp	r3, #0
 8001068:	d111      	bne.n	800108e <LoRA_parsePacket+0x5c>
		packetLenght = LoRA_Read_Register(REG_RX_NB_BYTES);
 800106a:	2013      	movs	r0, #19
 800106c:	f7ff fe4c 	bl	8000d08 <LoRA_Read_Register>
 8001070:	4603      	mov	r3, r0
 8001072:	607b      	str	r3, [r7, #4]
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
 8001074:	2010      	movs	r0, #16
 8001076:	f7ff fe47 	bl	8000d08 <LoRA_Read_Register>
 800107a:	4603      	mov	r3, r0
 800107c:	4619      	mov	r1, r3
 800107e:	200d      	movs	r0, #13
 8001080:	f7ff fe6a 	bl	8000d58 <LoRA_Write_Register>
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8001084:	2185      	movs	r1, #133	; 0x85
 8001086:	2001      	movs	r0, #1
 8001088:	f7ff fe66 	bl	8000d58 <LoRA_Write_Register>
 800108c:	e00d      	b.n	80010aa <LoRA_parsePacket+0x78>

		//LoRA_idle();
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS)){
 800108e:	2001      	movs	r0, #1
 8001090:	f7ff fe3a 	bl	8000d08 <LoRA_Read_Register>
 8001094:	4603      	mov	r3, r0
 8001096:	2b85      	cmp	r3, #133	; 0x85
 8001098:	d007      	beq.n	80010aa <LoRA_parsePacket+0x78>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 800109a:	2100      	movs	r1, #0
 800109c:	200d      	movs	r0, #13
 800109e:	f7ff fe5b 	bl	8000d58 <LoRA_Write_Register>

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 80010a2:	2185      	movs	r1, #133	; 0x85
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff fe57 	bl	8000d58 <LoRA_Write_Register>
	}
	return packetLenght;
 80010aa:	687b      	ldr	r3, [r7, #4]

}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <LoRA_sendPacket>:

void LoRA_sendPacket(char * data){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b0d0      	sub	sp, #320	; 0x140
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80010be:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80010c2:	6018      	str	r0, [r3, #0]
	LoRA_idle();
 80010c4:	f7ff febc 	bl	8000e40 <LoRA_idle>
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 80010c8:	2012      	movs	r0, #18
 80010ca:	f7ff fe1d 	bl	8000d08 <LoRA_Read_Register>
 80010ce:	4603      	mov	r3, r0
 80010d0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	/*char debug[250];
	sprintf(debug, "here: %d\n", (irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK));
	CDC_Transmit_HS(debug, strlen(debug));
	HAL_Delay(100);*/
	if(!((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0))
 80010d4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80010d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d005      	beq.n	80010ec <LoRA_sendPacket+0x38>
 80010e0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80010e4:	f003 0320 	and.w	r3, r3, #32
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d033      	beq.n	8001154 <LoRA_sendPacket+0xa0>
	{
		//CDC_Transmit_HS("here1\n", strlen("here1\n"));
		LoRA_beginPacket();
 80010ec:	f7ff ff7a 	bl	8000fe4 <LoRA_beginPacket>
    	for(int i = 0; i < strlen(data); i++){
 80010f0:	2300      	movs	r3, #0
 80010f2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80010f6:	e011      	b.n	800111c <LoRA_sendPacket+0x68>
    		LoRA_Write_Register(REG_FIFO, data[i]);
 80010f8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80010fc:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8001100:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 8001104:	6812      	ldr	r2, [r2, #0]
 8001106:	4413      	add	r3, r2
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	4619      	mov	r1, r3
 800110c:	2000      	movs	r0, #0
 800110e:	f7ff fe23 	bl	8000d58 <LoRA_Write_Register>
    	for(int i = 0; i < strlen(data); i++){
 8001112:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001116:	3301      	adds	r3, #1
 8001118:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 800111c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001120:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001124:	6818      	ldr	r0, [r3, #0]
 8001126:	f7ff f8fd 	bl	8000324 <strlen>
 800112a:	4602      	mov	r2, r0
 800112c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001130:	429a      	cmp	r2, r3
 8001132:	d8e1      	bhi.n	80010f8 <LoRA_sendPacket+0x44>
    	}
    	LoRA_Write_Register(REG_PAYLOAD_LENGTH, strlen(data));
 8001134:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001138:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800113c:	6818      	ldr	r0, [r3, #0]
 800113e:	f7ff f8f1 	bl	8000324 <strlen>
 8001142:	4603      	mov	r3, r0
 8001144:	b2db      	uxtb	r3, r3
 8001146:	4619      	mov	r1, r3
 8001148:	2022      	movs	r0, #34	; 0x22
 800114a:	f7ff fe05 	bl	8000d58 <LoRA_Write_Register>
    	LoRA_endPacket();
 800114e:	f7ff ff57 	bl	8001000 <LoRA_endPacket>
 8001152:	e003      	b.n	800115c <LoRA_sendPacket+0xa8>
	}
	else {
		//CDC_Transmit_HS("here2\n", strlen("here2\n"));
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8001154:	2185      	movs	r1, #133	; 0x85
 8001156:	2001      	movs	r0, #1
 8001158:	f7ff fdfe 	bl	8000d58 <LoRA_Write_Register>
	}
	char sent[300];
	sprintf(sent, "\nsent: %s\n", data);
 800115c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001160:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001164:	f107 000c 	add.w	r0, r7, #12
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	490b      	ldr	r1, [pc, #44]	; (8001198 <LoRA_sendPacket+0xe4>)
 800116c:	f015 ff76 	bl	801705c <siprintf>
	HAL_Delay(100);
 8001170:	2064      	movs	r0, #100	; 0x64
 8001172:	f002 fc79 	bl	8003a68 <HAL_Delay>
	CDC_Transmit_HS(sent, strlen(sent));
 8001176:	f107 030c 	add.w	r3, r7, #12
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff f8d2 	bl	8000324 <strlen>
 8001180:	4602      	mov	r2, r0
 8001182:	f107 030c 	add.w	r3, r7, #12
 8001186:	4611      	mov	r1, r2
 8001188:	4618      	mov	r0, r3
 800118a:	f015 fb13 	bl	80167b4 <CDC_Transmit_HS>
}
 800118e:	bf00      	nop
 8001190:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	08018344 	.word	0x08018344

0800119c <disarm>:
	int status = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
	return status;
}

int disarm(char* state)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 0);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2102      	movs	r1, #2
 80011a8:	4827      	ldr	r0, [pc, #156]	; (8001248 <disarm+0xac>)
 80011aa:	f006 ff0f 	bl	8007fcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2104      	movs	r1, #4
 80011b2:	4825      	ldr	r0, [pc, #148]	; (8001248 <disarm+0xac>)
 80011b4:	f006 ff0a 	bl	8007fcc <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 0);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2102      	movs	r1, #2
 80011bc:	4823      	ldr	r0, [pc, #140]	; (800124c <disarm+0xb0>)
 80011be:	f006 ff05 	bl	8007fcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 0);
 80011c2:	2200      	movs	r2, #0
 80011c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011c8:	4821      	ldr	r0, [pc, #132]	; (8001250 <disarm+0xb4>)
 80011ca:	f006 feff 	bl	8007fcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 0);
 80011ce:	2200      	movs	r2, #0
 80011d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011d4:	481e      	ldr	r0, [pc, #120]	; (8001250 <disarm+0xb4>)
 80011d6:	f006 fef9 	bl	8007fcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011e0:	481b      	ldr	r0, [pc, #108]	; (8001250 <disarm+0xb4>)
 80011e2:	f006 fef3 	bl	8007fcc <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2102      	movs	r1, #2
 80011ea:	481a      	ldr	r0, [pc, #104]	; (8001254 <disarm+0xb8>)
 80011ec:	f006 feee 	bl	8007fcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 0);
 80011f0:	2200      	movs	r2, #0
 80011f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011f6:	4818      	ldr	r0, [pc, #96]	; (8001258 <disarm+0xbc>)
 80011f8:	f006 fee8 	bl	8007fcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 0);
 80011fc:	2200      	movs	r2, #0
 80011fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001202:	4815      	ldr	r0, [pc, #84]	; (8001258 <disarm+0xbc>)
 8001204:	f006 fee2 	bl	8007fcc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 0);
 8001208:	2200      	movs	r2, #0
 800120a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800120e:	4812      	ldr	r0, [pc, #72]	; (8001258 <disarm+0xbc>)
 8001210:	f006 fedc 	bl	8007fcc <HAL_GPIO_WritePin>

  LED_Color_Data[7][0] = 255;
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <disarm+0xc0>)
 8001216:	22ff      	movs	r2, #255	; 0xff
 8001218:	655a      	str	r2, [r3, #84]	; 0x54
  LED_Color_Data[7][1] = 0;
 800121a:	4b10      	ldr	r3, [pc, #64]	; (800125c <disarm+0xc0>)
 800121c:	2200      	movs	r2, #0
 800121e:	659a      	str	r2, [r3, #88]	; 0x58
  LED_Color_Data[7][2] = 0;
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <disarm+0xc0>)
 8001222:	2200      	movs	r2, #0
 8001224:	65da      	str	r2, [r3, #92]	; 0x5c
  setLEDs();
 8001226:	f7ff fbb7 	bl	8000998 <setLEDs>

  strcpy(state,"DISARMED");
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	490c      	ldr	r1, [pc, #48]	; (8001260 <disarm+0xc4>)
 800122e:	461a      	mov	r2, r3
 8001230:	460b      	mov	r3, r1
 8001232:	cb03      	ldmia	r3!, {r0, r1}
 8001234:	6010      	str	r0, [r2, #0]
 8001236:	6051      	str	r1, [r2, #4]
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	7213      	strb	r3, [r2, #8]
  return 0;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	58020000 	.word	0x58020000
 800124c:	58020400 	.word	0x58020400
 8001250:	58021400 	.word	0x58021400
 8001254:	58021800 	.word	0x58021800
 8001258:	58021000 	.word	0x58021000
 800125c:	24000b50 	.word	0x24000b50
 8001260:	08018350 	.word	0x08018350

08001264 <recv_packet>:
  setLEDs();
  return 0;
}

int recv_packet(char* LoRA_data, int max_length)
{
 8001264:	b590      	push	{r4, r7, lr}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  int packet_length = LoRA_parsePacket();
 800126e:	f7ff fee0 	bl	8001032 <LoRA_parsePacket>
 8001272:	60b8      	str	r0, [r7, #8]
  if(max_length-1 < packet_length) //-1 for the null terminator
 8001274:	683a      	ldr	r2, [r7, #0]
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	429a      	cmp	r2, r3
 800127a:	dc01      	bgt.n	8001280 <recv_packet+0x1c>
  {
    return 0;
 800127c:	2300      	movs	r3, #0
 800127e:	e01c      	b.n	80012ba <recv_packet+0x56>
  }
  if(packet_length){
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d018      	beq.n	80012b8 <recv_packet+0x54>
    for(int i = 0; i < packet_length; i++){
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	e00a      	b.n	80012a2 <recv_packet+0x3e>
      LoRA_data[i] = LoRA_Read_Register(0x00);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	18d4      	adds	r4, r2, r3
 8001292:	2000      	movs	r0, #0
 8001294:	f7ff fd38 	bl	8000d08 <LoRA_Read_Register>
 8001298:	4603      	mov	r3, r0
 800129a:	7023      	strb	r3, [r4, #0]
    for(int i = 0; i < packet_length; i++){
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	3301      	adds	r3, #1
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	dbf0      	blt.n	800128c <recv_packet+0x28>
    }
    LoRA_data[packet_length] = '\0';
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	4413      	add	r3, r2
 80012b0:	2200      	movs	r2, #0
 80012b2:	701a      	strb	r2, [r3, #0]

    /*char rec[300];
    sprintf(rec, "received: %s\n", LoRA_data);
    CDC_Transmit_HS(rec, strlen(rec));*/
    return packet_length;
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	e000      	b.n	80012ba <recv_packet+0x56>
  }
  else{
    return 0;
 80012b8:	2300      	movs	r3, #0
  }
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd90      	pop	{r4, r7, pc}

080012c2 <reliable_send_packet>:

void reliable_send_packet(char *LoRA_data) {
 80012c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012c6:	b087      	sub	sp, #28
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	466b      	mov	r3, sp
 80012ce:	461e      	mov	r6, r3
	uint16_t length = strlen(LoRA_data) + 1; //+1 for the \0
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f7ff f827 	bl	8000324 <strlen>
 80012d6:	4603      	mov	r3, r0
 80012d8:	b29b      	uxth	r3, r3
 80012da:	3301      	adds	r3, #1
 80012dc:	827b      	strh	r3, [r7, #18]
	char acknowledge[length];
 80012de:	8a79      	ldrh	r1, [r7, #18]
 80012e0:	460b      	mov	r3, r1
 80012e2:	3b01      	subs	r3, #1
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	b28b      	uxth	r3, r1
 80012e8:	2200      	movs	r2, #0
 80012ea:	4698      	mov	r8, r3
 80012ec:	4691      	mov	r9, r2
 80012ee:	f04f 0200 	mov.w	r2, #0
 80012f2:	f04f 0300 	mov.w	r3, #0
 80012f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80012fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80012fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001302:	b28b      	uxth	r3, r1
 8001304:	2200      	movs	r2, #0
 8001306:	461c      	mov	r4, r3
 8001308:	4615      	mov	r5, r2
 800130a:	f04f 0200 	mov.w	r2, #0
 800130e:	f04f 0300 	mov.w	r3, #0
 8001312:	00eb      	lsls	r3, r5, #3
 8001314:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001318:	00e2      	lsls	r2, r4, #3
 800131a:	460b      	mov	r3, r1
 800131c:	3307      	adds	r3, #7
 800131e:	08db      	lsrs	r3, r3, #3
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	ebad 0d03 	sub.w	sp, sp, r3
 8001326:	466b      	mov	r3, sp
 8001328:	3300      	adds	r3, #0
 800132a:	60bb      	str	r3, [r7, #8]
	uint32_t lastTime = HAL_GetTick();
 800132c:	f002 fb90 	bl	8003a50 <HAL_GetTick>
 8001330:	6178      	str	r0, [r7, #20]
	LoRA_sendPacket(LoRA_data);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff febe 	bl	80010b4 <LoRA_sendPacket>
	while (1) {

		if (recv_packet(acknowledge, length)) {
 8001338:	8a7b      	ldrh	r3, [r7, #18]
 800133a:	4619      	mov	r1, r3
 800133c:	68b8      	ldr	r0, [r7, #8]
 800133e:	f7ff ff91 	bl	8001264 <recv_packet>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d009      	beq.n	800135c <reliable_send_packet+0x9a>
			//cehck crc
			if (strcmp(acknowledge, LoRA_data) != 0) {
 8001348:	6879      	ldr	r1, [r7, #4]
 800134a:	68b8      	ldr	r0, [r7, #8]
 800134c:	f7fe ffe0 	bl	8000310 <strcmp>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d011      	beq.n	800137a <reliable_send_packet+0xb8>
				LoRA_sendPacket(LoRA_data);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff feac 	bl	80010b4 <LoRA_sendPacket>
			} else {
				break;
			}
		}

		if (HAL_GetTick() - lastTime > 1000) {
 800135c:	f002 fb78 	bl	8003a50 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800136a:	d9e5      	bls.n	8001338 <reliable_send_packet+0x76>
			LoRA_sendPacket(LoRA_data);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff fea1 	bl	80010b4 <LoRA_sendPacket>
			lastTime = HAL_GetTick();
 8001372:	f002 fb6d 	bl	8003a50 <HAL_GetTick>
 8001376:	6178      	str	r0, [r7, #20]
		if (recv_packet(acknowledge, length)) {
 8001378:	e7de      	b.n	8001338 <reliable_send_packet+0x76>
				break;
 800137a:	bf00      	nop
 800137c:	46b5      	mov	sp, r6
		}
	}
}
 800137e:	bf00      	nop
 8001380:	371c      	adds	r7, #28
 8001382:	46bd      	mov	sp, r7
 8001384:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001388 <usbReceiveHandle>:

		reliable_send_packet(message);
	}
}

int usbReceiveHandle(char* output){
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
	uint32_t temp = usbBytesReady;
 8001390:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <usbReceiveHandle+0x38>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	60fb      	str	r3, [r7, #12]

	if(temp > 0){
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d00c      	beq.n	80013b6 <usbReceiveHandle+0x2e>
		if(temp > 256){
			//crash(2);
		}
		memcpy(output, usbDataBuffer, temp);
 800139c:	68fa      	ldr	r2, [r7, #12]
 800139e:	4909      	ldr	r1, [pc, #36]	; (80013c4 <usbReceiveHandle+0x3c>)
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f015 fee5 	bl	8017170 <memcpy>
		output[temp] = '\0';
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	4413      	add	r3, r2
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]
		usbBytesReady = 0;
 80013b0:	4b03      	ldr	r3, [pc, #12]	; (80013c0 <usbReceiveHandle+0x38>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
	}
	return temp;
 80013b6:	68fb      	ldr	r3, [r7, #12]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	2400026c 	.word	0x2400026c
 80013c4:	2400016c 	.word	0x2400016c

080013c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ca:	f6ad 4d14 	subw	sp, sp, #3092	; 0xc14
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 80013d0:	4bd7      	ldr	r3, [pc, #860]	; (8001730 <main+0x368>)
 80013d2:	f507 6439 	add.w	r4, r7, #2960	; 0xb90
 80013d6:	461d      	mov	r5, r3
 80013d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013dc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013e0:	c403      	stmia	r4!, {r0, r1}
 80013e2:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013e4:	f002 faae 	bl	8003944 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013e8:	f000 fb34 	bl	8001a54 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80013ec:	f000 fbaa 	bl	8001b44 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013f0:	f001 f932 	bl	8002658 <MX_GPIO_Init>
  MX_DMA_Init();
 80013f4:	f001 f8d0 	bl	8002598 <MX_DMA_Init>
  MX_SPI3_Init();
 80013f8:	f000 fe2a 	bl	8002050 <MX_SPI3_Init>
  MX_FDCAN3_Init();
 80013fc:	f000 fcba 	bl	8001d74 <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 8001400:	f001 f87e 	bl	8002500 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8001404:	f000 fbd0 	bl	8001ba8 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001408:	f000 ff34 	bl	8002274 <MX_TIM4_Init>
  MX_ADC3_Init();
 800140c:	f000 fc44 	bl	8001c98 <MX_ADC3_Init>
  MX_SPI2_Init();
 8001410:	f000 fdc8 	bl	8001fa4 <MX_SPI2_Init>
  MX_I2C2_Init();
 8001414:	f000 fd12 	bl	8001e3c <MX_I2C2_Init>
  MX_TIM2_Init();
 8001418:	f000 fe70 	bl	80020fc <MX_TIM2_Init>
  MX_TIM5_Init();
 800141c:	f000 ffa6 	bl	800236c <MX_TIM5_Init>
  MX_TIM3_Init();
 8001420:	f000 fec4 	bl	80021ac <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8001424:	f015 f8f0 	bl	8016608 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8001428:	f000 fd66 	bl	8001ef8 <MX_SPI1_Init>
  MX_UART4_Init();
 800142c:	f001 f81c 	bl	8002468 <MX_UART4_Init>
  MX_FATFS_Init();
 8001430:	f012 fe7e 	bl	8014130 <MX_FATFS_Init>
  MX_SDMMC2_SD_Init();
 8001434:	f000 fd42 	bl	8001ebc <MX_SDMMC2_SD_Init>
  MX_TIM13_Init();
 8001438:	f000 fff2 	bl	8002420 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

	const int MAX = 50;
 800143c:	2332      	movs	r3, #50	; 0x32
 800143e:	f8c7 3bf4 	str.w	r3, [r7, #3060]	; 0xbf4
	const double SPEED = 2.0/2000;
 8001442:	a3b9      	add	r3, pc, #740	; (adr r3, 8001728 <main+0x360>)
 8001444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001448:	f607 31e8 	addw	r1, r7, #3048	; 0xbe8
 800144c:	e9c1 2300 	strd	r2, r3, [r1]
	const double r_offset = 0;
 8001450:	f04f 0200 	mov.w	r2, #0
 8001454:	f04f 0300 	mov.w	r3, #0
 8001458:	f507 613e 	add.w	r1, r7, #3040	; 0xbe0
 800145c:	e9c1 2300 	strd	r2, r3, [r1]
	const double g_offset = 1;
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	4bb3      	ldr	r3, [pc, #716]	; (8001734 <main+0x36c>)
 8001466:	f607 31d8 	addw	r1, r7, #3032	; 0xbd8
 800146a:	e9c1 2300 	strd	r2, r3, [r1]
	const double b_offset = 2;
 800146e:	f04f 0200 	mov.w	r2, #0
 8001472:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001476:	f507 613d 	add.w	r1, r7, #3024	; 0xbd0
 800147a:	e9c1 2300 	strd	r2, r3, [r1]

	LG2_Write_Register(0x10, 0b00111100); //Accelerometer setup - CTRL1_XL
 800147e:	213c      	movs	r1, #60	; 0x3c
 8001480:	2010      	movs	r0, #16
 8001482:	f7ff f97f 	bl	8000784 <LG2_Write_Register>
	LG2_Write_Register(0x11, 0b00110000); //Gyroscope setup - CTRL2_G
 8001486:	2130      	movs	r1, #48	; 0x30
 8001488:	2011      	movs	r0, #17
 800148a:	f7ff f97b 	bl	8000784 <LG2_Write_Register>
	LG2_Write_Register(0x13, 0b00000100); //disables I2C - CTRL4_C
 800148e:	2104      	movs	r1, #4
 8001490:	2013      	movs	r0, #19
 8001492:	f7ff f977 	bl	8000784 <LG2_Write_Register>

	HAL_Delay(3000);
 8001496:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800149a:	f002 fae5 	bl	8003a68 <HAL_Delay>
	HG2_Write_Register(0x1C, 0b10111111);
 800149e:	21bf      	movs	r1, #191	; 0xbf
 80014a0:	201c      	movs	r0, #28
 80014a2:	f7ff f91b 	bl	80006dc <HG2_Write_Register>
	HAL_Delay(2);
 80014a6:	2002      	movs	r0, #2
 80014a8:	f002 fade 	bl	8003a68 <HAL_Delay>

	HG2_Write_Register(0x1B, 0b01011000);
 80014ac:	2158      	movs	r1, #88	; 0x58
 80014ae:	201b      	movs	r0, #27
 80014b0:	f7ff f914 	bl	80006dc <HG2_Write_Register>
	HG2_Write_Register(0x1B, 0b11011000);
 80014b4:	21d8      	movs	r1, #216	; 0xd8
 80014b6:	201b      	movs	r0, #27
 80014b8:	f7ff f910 	bl	80006dc <HG2_Write_Register>

	float rotZ = 0;
 80014bc:	f04f 0300 	mov.w	r3, #0
 80014c0:	f607 32cc 	addw	r2, r7, #3020	; 0xbcc
 80014c4:	6013      	str	r3, [r2, #0]
	uint32_t lastTime = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	f8c7 3c0c 	str.w	r3, [r7, #3084]	; 0xc0c

	float calOmegaX = 0;
 80014cc:	f04f 0300 	mov.w	r3, #0
 80014d0:	f607 4208 	addw	r2, r7, #3080	; 0xc08
 80014d4:	6013      	str	r3, [r2, #0]
	float calOmegaY = 0;
 80014d6:	f04f 0300 	mov.w	r3, #0
 80014da:	f607 4204 	addw	r2, r7, #3076	; 0xc04
 80014de:	6013      	str	r3, [r2, #0]
	float calOmegaZ = 0;
 80014e0:	f04f 0300 	mov.w	r3, #0
 80014e4:	f507 6240 	add.w	r2, r7, #3072	; 0xc00
 80014e8:	6013      	str	r3, [r2, #0]
	//HAL_Delay(2000);
	for(int i = 0; i < 500; i++){
 80014ea:	2300      	movs	r3, #0
 80014ec:	f8c7 3bfc 	str.w	r3, [r7, #3068]	; 0xbfc
 80014f0:	e02e      	b.n	8001550 <main+0x188>
		calOmegaX += LG2_Get_Gyro_X();
 80014f2:	f7ff f96f 	bl	80007d4 <LG2_Get_Gyro_X>
 80014f6:	eeb0 7a40 	vmov.f32	s14, s0
 80014fa:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 80014fe:	edd3 7a00 	vldr	s15, [r3]
 8001502:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001506:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 800150a:	edc3 7a00 	vstr	s15, [r3]
		calOmegaY += LG2_Get_Gyro_Y();
 800150e:	f7ff f991 	bl	8000834 <LG2_Get_Gyro_Y>
 8001512:	eeb0 7a40 	vmov.f32	s14, s0
 8001516:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 800151a:	edd3 7a00 	vldr	s15, [r3]
 800151e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001522:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 8001526:	edc3 7a00 	vstr	s15, [r3]
		calOmegaZ += LG2_Get_Gyro_Z();
 800152a:	f7ff f9b5 	bl	8000898 <LG2_Get_Gyro_Z>
 800152e:	eeb0 7a40 	vmov.f32	s14, s0
 8001532:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 8001536:	edd3 7a00 	vldr	s15, [r3]
 800153a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800153e:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 8001542:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < 500; i++){
 8001546:	f8d7 3bfc 	ldr.w	r3, [r7, #3068]	; 0xbfc
 800154a:	3301      	adds	r3, #1
 800154c:	f8c7 3bfc 	str.w	r3, [r7, #3068]	; 0xbfc
 8001550:	f8d7 3bfc 	ldr.w	r3, [r7, #3068]	; 0xbfc
 8001554:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001558:	dbcb      	blt.n	80014f2 <main+0x12a>

		//HAL_Delay(20);
	}
	calOmegaX /= 500;
 800155a:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 800155e:	ed93 7a00 	vldr	s14, [r3]
 8001562:	eddf 6a75 	vldr	s13, [pc, #468]	; 8001738 <main+0x370>
 8001566:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800156a:	f607 4308 	addw	r3, r7, #3080	; 0xc08
 800156e:	edc3 7a00 	vstr	s15, [r3]
	calOmegaY /= 500;
 8001572:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 8001576:	ed93 7a00 	vldr	s14, [r3]
 800157a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8001738 <main+0x370>
 800157e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001582:	f607 4304 	addw	r3, r7, #3076	; 0xc04
 8001586:	edc3 7a00 	vstr	s15, [r3]
	calOmegaZ /= 500;
 800158a:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 800158e:	ed93 7a00 	vldr	s14, [r3]
 8001592:	eddf 6a69 	vldr	s13, [pc, #420]	; 8001738 <main+0x370>
 8001596:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800159a:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 800159e:	edc3 7a00 	vstr	s15, [r3]

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 80015a2:	2201      	movs	r2, #1
 80015a4:	2101      	movs	r1, #1
 80015a6:	4865      	ldr	r0, [pc, #404]	; (800173c <main+0x374>)
 80015a8:	f006 fd10 	bl	8007fcc <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80015ac:	20c8      	movs	r0, #200	; 0xc8
 80015ae:	f002 fa5b 	bl	8003a68 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2101      	movs	r1, #1
 80015b6:	4861      	ldr	r0, [pc, #388]	; (800173c <main+0x374>)
 80015b8:	f006 fd08 	bl	8007fcc <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80015bc:	20c8      	movs	r0, #200	; 0xc8
 80015be:	f002 fa53 	bl	8003a68 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 80015c2:	2201      	movs	r2, #1
 80015c4:	2101      	movs	r1, #1
 80015c6:	485d      	ldr	r0, [pc, #372]	; (800173c <main+0x374>)
 80015c8:	f006 fd00 	bl	8007fcc <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80015cc:	20c8      	movs	r0, #200	; 0xc8
 80015ce:	f002 fa4b 	bl	8003a68 <HAL_Delay>


	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 80015d2:	2201      	movs	r2, #1
 80015d4:	2104      	movs	r1, #4
 80015d6:	485a      	ldr	r0, [pc, #360]	; (8001740 <main+0x378>)
 80015d8:	f006 fcf8 	bl	8007fcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 80015dc:	2201      	movs	r2, #1
 80015de:	2108      	movs	r1, #8
 80015e0:	4857      	ldr	r0, [pc, #348]	; (8001740 <main+0x378>)
 80015e2:	f006 fcf3 	bl	8007fcc <HAL_GPIO_WritePin>


    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80015e6:	2100      	movs	r1, #0
 80015e8:	4856      	ldr	r0, [pc, #344]	; (8001744 <main+0x37c>)
 80015ea:	f00d ffaf 	bl	800f54c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80015ee:	2104      	movs	r1, #4
 80015f0:	4854      	ldr	r0, [pc, #336]	; (8001744 <main+0x37c>)
 80015f2:	f00d ffab 	bl	800f54c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80015f6:	2108      	movs	r1, #8
 80015f8:	4852      	ldr	r0, [pc, #328]	; (8001744 <main+0x37c>)
 80015fa:	f00d ffa7 	bl	800f54c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80015fe:	210c      	movs	r1, #12
 8001600:	4850      	ldr	r0, [pc, #320]	; (8001744 <main+0x37c>)
 8001602:	f00d ffa3 	bl	800f54c <HAL_TIM_PWM_Start>

    setServo(1, 90);
 8001606:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8001748 <main+0x380>
 800160a:	2001      	movs	r0, #1
 800160c:	f7ff f97c 	bl	8000908 <setServo>
    setServo(2, 180);
 8001610:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800174c <main+0x384>
 8001614:	2002      	movs	r0, #2
 8001616:	f7ff f977 	bl	8000908 <setServo>
    setServo(3, 0);
 800161a:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8001750 <main+0x388>
 800161e:	2003      	movs	r0, #3
 8001620:	f7ff f972 	bl	8000908 <setServo>
    setServo(4, 45);
 8001624:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8001754 <main+0x38c>
 8001628:	2004      	movs	r0, #4
 800162a:	f7ff f96d 	bl	8000908 <setServo>
//    				}
//    			}
//    		}
//    	}
//    	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
	  LoRA_begin(868000000);
 800162e:	484a      	ldr	r0, [pc, #296]	; (8001758 <main+0x390>)
 8001630:	f7ff fc84 	bl	8000f3c <LoRA_begin>
		LoRA_sendPacket("whatever");
		HAL_Delay(1000);
	}
*/

	int connected = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	f8c7 3bc8 	str.w	r3, [r7, #3016]	; 0xbc8
	long last_packet = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	f8c7 3bc4 	str.w	r3, [r7, #3012]	; 0xbc4
	int ARMED = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	f8c7 3bc0 	str.w	r3, [r7, #3008]	; 0xbc0

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//HAL_ADC_Start_DMA(&hadc3, &read_Data, 1);

  int max_packet_count = 0;
 8001646:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 800164a:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
  int stream_counter = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	f8c7 3bbc 	str.w	r3, [r7, #3004]	; 0xbbc
  char state[MAX_PAYLOAD_LENGHT] = "";
 8001658:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 800165c:	f5a3 7379 	sub.w	r3, r3, #996	; 0x3e4
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	3304      	adds	r3, #4
 8001666:	22f6      	movs	r2, #246	; 0xf6
 8001668:	2100      	movs	r1, #0
 800166a:	4618      	mov	r0, r3
 800166c:	f015 fd44 	bl	80170f8 <memset>
  char acknowledge[MAX_PAYLOAD_LENGHT];
  char previous_packet[MAX_PAYLOAD_LENGHT];
  char recieved_packet[MAX_PAYLOAD_LENGHT];
  char response_packet[MAX_PAYLOAD_LENGHT];
  char sendMessage[MAX_PAYLOAD_LENGHT];
  int last = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	f8c7 3bb8 	str.w	r3, [r7, #3000]	; 0xbb8
  int packets_streamed = 50;
 8001676:	2332      	movs	r3, #50	; 0x32
 8001678:	f8c7 3bb4 	str.w	r3, [r7, #2996]	; 0xbb4
  int packetId;
  int have_recieved_anything = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
  char communication_state[50] = "SENDING RELIABLE";
 8001682:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8001686:	f5a3 6620 	sub.w	r6, r3, #2560	; 0xa00
 800168a:	4b34      	ldr	r3, [pc, #208]	; (800175c <main+0x394>)
 800168c:	4634      	mov	r4, r6
 800168e:	461d      	mov	r5, r3
 8001690:	6828      	ldr	r0, [r5, #0]
 8001692:	6869      	ldr	r1, [r5, #4]
 8001694:	68aa      	ldr	r2, [r5, #8]
 8001696:	68eb      	ldr	r3, [r5, #12]
 8001698:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800169a:	7c2b      	ldrb	r3, [r5, #16]
 800169c:	7023      	strb	r3, [r4, #0]
 800169e:	f106 0311 	add.w	r3, r6, #17
 80016a2:	2221      	movs	r2, #33	; 0x21
 80016a4:	2100      	movs	r1, #0
 80016a6:	4618      	mov	r0, r3
 80016a8:	f015 fd26 	bl	80170f8 <memset>
  uint32_t previousTime = HAL_GetTick();
 80016ac:	f002 f9d0 	bl	8003a50 <HAL_GetTick>
 80016b0:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
  disarm(state);
 80016b4:	f607 032c 	addw	r3, r7, #2092	; 0x82c
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fd6f 	bl	800119c <disarm>
  LoRA_begin(868000000);
 80016be:	4826      	ldr	r0, [pc, #152]	; (8001758 <main+0x390>)
 80016c0:	f7ff fc3c 	bl	8000f3c <LoRA_begin>
	sprintf(debug, "Debug: %s\n", input);
	CDC_Transmit_HS(debug, strlen(debug));
  }*/

while (1) {
    if(strcmp(communication_state,"RECEIVING RELIABLE") == 0)
 80016c4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80016c8:	4925      	ldr	r1, [pc, #148]	; (8001760 <main+0x398>)
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7fe fe20 	bl	8000310 <strcmp>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f040 809c 	bne.w	8001810 <main+0x448>
    {
      if(recv_packet(recieved_packet, MAX_PAYLOAD_LENGHT))
 80016d8:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80016dc:	21fa      	movs	r1, #250	; 0xfa
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fdc0 	bl	8001264 <recv_packet>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 8080 	beq.w	80017ec <main+0x424>
      {
    	  have_recieved_anything = 1;
 80016ec:	2301      	movs	r3, #1
 80016ee:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
        previousTime = HAL_GetTick();
 80016f2:	f002 f9ad 	bl	8003a50 <HAL_GetTick>
 80016f6:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
        //HAL_Delay(100);
        //CDC_Transmit_HS("is arm 0succ\n", strlen("is arm 0succ\n"));
        //HAL_Delay(100);
        if(sscanf(recieved_packet, "$ %s", state) == 1)
 80016fa:	f607 022c 	addw	r2, r7, #2092	; 0x82c
 80016fe:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001702:	4918      	ldr	r1, [pc, #96]	; (8001764 <main+0x39c>)
 8001704:	4618      	mov	r0, r3
 8001706:	f015 fcc9 	bl	801709c <siscanf>
 800170a:	4603      	mov	r3, r0
 800170c:	2b01      	cmp	r3, #1
 800170e:	d12b      	bne.n	8001768 <main+0x3a0>
        {
          strcpy(communication_state,"SENDING RELIABLE");
 8001710:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001714:	4a11      	ldr	r2, [pc, #68]	; (800175c <main+0x394>)
 8001716:	461c      	mov	r4, r3
 8001718:	4615      	mov	r5, r2
 800171a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800171c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800171e:	682b      	ldr	r3, [r5, #0]
 8001720:	7023      	strb	r3, [r4, #0]
 8001722:	e16a      	b.n	80019fa <main+0x632>
 8001724:	f3af 8000 	nop.w
 8001728:	d2f1a9fc 	.word	0xd2f1a9fc
 800172c:	3f50624d 	.word	0x3f50624d
 8001730:	08018430 	.word	0x08018430
 8001734:	3ff00000 	.word	0x3ff00000
 8001738:	43fa0000 	.word	0x43fa0000
 800173c:	58020c00 	.word	0x58020c00
 8001740:	58021800 	.word	0x58021800
 8001744:	24001168 	.word	0x24001168
 8001748:	42b40000 	.word	0x42b40000
 800174c:	43340000 	.word	0x43340000
 8001750:	00000000 	.word	0x00000000
 8001754:	42340000 	.word	0x42340000
 8001758:	33bca100 	.word	0x33bca100
 800175c:	080183b8 	.word	0x080183b8
 8001760:	0801839c 	.word	0x0801839c
 8001764:	080183b0 	.word	0x080183b0
        }
        else if(sscanf(recieved_packet, "! %d", &max_packet_count) == 1)
 8001768:	f607 1228 	addw	r2, r7, #2344	; 0x928
 800176c:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001770:	49ad      	ldr	r1, [pc, #692]	; (8001a28 <main+0x660>)
 8001772:	4618      	mov	r0, r3
 8001774:	f015 fc92 	bl	801709c <siscanf>
 8001778:	4603      	mov	r3, r0
 800177a:	2b01      	cmp	r3, #1
 800177c:	d10b      	bne.n	8001796 <main+0x3ce>
        {
          strcpy(communication_state,"SENDING STREAM");
 800177e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001782:	4aaa      	ldr	r2, [pc, #680]	; (8001a2c <main+0x664>)
 8001784:	461c      	mov	r4, r3
 8001786:	4613      	mov	r3, r2
 8001788:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800178a:	c407      	stmia	r4!, {r0, r1, r2}
 800178c:	8023      	strh	r3, [r4, #0]
 800178e:	3402      	adds	r4, #2
 8001790:	0c1b      	lsrs	r3, r3, #16
 8001792:	7023      	strb	r3, [r4, #0]
 8001794:	e131      	b.n	80019fa <main+0x632>
        }
        else if(strcmp(recieved_packet, previous_packet)==0)
 8001796:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 800179a:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800179e:	4611      	mov	r1, r2
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7fe fdb5 	bl	8000310 <strcmp>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d105      	bne.n	80017b8 <main+0x3f0>
        {
          //send acknowledge again
          LoRA_sendPacket(recieved_packet);
 80017ac:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff fc7f 	bl	80010b4 <LoRA_sendPacket>
 80017b6:	e120      	b.n	80019fa <main+0x632>
        }
        else
        {
          //CDC_Transmit_HS("is arm 1succ\n", strlen("is arm 1succ\n"));
          //HAL_Delay(100);
          strcpy(previous_packet, recieved_packet);
 80017b8:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 80017bc:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 80017c0:	4611      	mov	r1, r2
 80017c2:	4618      	mov	r0, r3
 80017c4:	f015 fccc 	bl	8017160 <strcpy>
          //HAL_Delay(100);
          LoRA_sendPacket(recieved_packet);
 80017c8:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff fc71 	bl	80010b4 <LoRA_sendPacket>
          //HAL_Delay(100);
          CDC_Transmit_HS(recieved_packet, strlen(recieved_packet));
 80017d2:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7fe fda4 	bl	8000324 <strlen>
 80017dc:	4602      	mov	r2, r0
 80017de:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80017e2:	4611      	mov	r1, r2
 80017e4:	4618      	mov	r0, r3
 80017e6:	f014 ffe5 	bl	80167b4 <CDC_Transmit_HS>
 80017ea:	e106      	b.n	80019fa <main+0x632>
        }
      } else if (HAL_GetTick()-previousTime > 1000)
 80017ec:	f002 f930 	bl	8003a50 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	f8d7 3bf8 	ldr.w	r3, [r7, #3064]	; 0xbf8
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017fc:	f240 80fd 	bls.w	80019fa <main+0x632>
      /*else if((!have_recieved_anything && HAL_GetTick()-previousTime > 1000) ||
    		  (have_recieved_anything && HAL_GetTick()-previousTime > 5000))*/
      {
        previousTime = HAL_GetTick();
 8001800:	f002 f926 	bl	8003a50 <HAL_GetTick>
 8001804:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
        //give up SENDING
        //HAL_Delay(100);
        LoRA_sendPacket("$");
 8001808:	4889      	ldr	r0, [pc, #548]	; (8001a30 <main+0x668>)
 800180a:	f7ff fc53 	bl	80010b4 <LoRA_sendPacket>
 800180e:	e0f4      	b.n	80019fa <main+0x632>
      }
    }
    else if(strcmp(communication_state,"RECEIVING STREAM") == 0)
 8001810:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001814:	4987      	ldr	r1, [pc, #540]	; (8001a34 <main+0x66c>)
 8001816:	4618      	mov	r0, r3
 8001818:	f7fe fd7a 	bl	8000310 <strcmp>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d14a      	bne.n	80018b8 <main+0x4f0>
    {
      if(recv_packet(recieved_packet, MAX_PAYLOAD_LENGHT))
 8001822:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001826:	21fa      	movs	r1, #250	; 0xfa
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff fd1b 	bl	8001264 <recv_packet>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d025      	beq.n	8001880 <main+0x4b8>
      {
        previousTime = HAL_GetTick();
 8001834:	f002 f90c 	bl	8003a50 <HAL_GetTick>
 8001838:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
        if(sscanf(recieved_packet, "$ %s", state) == 1)
 800183c:	f607 022c 	addw	r2, r7, #2092	; 0x82c
 8001840:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001844:	497c      	ldr	r1, [pc, #496]	; (8001a38 <main+0x670>)
 8001846:	4618      	mov	r0, r3
 8001848:	f015 fc28 	bl	801709c <siscanf>
 800184c:	4603      	mov	r3, r0
 800184e:	2b01      	cmp	r3, #1
 8001850:	d109      	bne.n	8001866 <main+0x49e>
        {
          strcpy(communication_state,"SENDING RELIABLE");
 8001852:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001856:	4a79      	ldr	r2, [pc, #484]	; (8001a3c <main+0x674>)
 8001858:	461c      	mov	r4, r3
 800185a:	4615      	mov	r5, r2
 800185c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800185e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001860:	682b      	ldr	r3, [r5, #0]
 8001862:	7023      	strb	r3, [r4, #0]
 8001864:	e0c9      	b.n	80019fa <main+0x632>
        }
        else
        {
          CDC_Transmit_HS(recieved_packet, strlen(recieved_packet));
 8001866:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 800186a:	4618      	mov	r0, r3
 800186c:	f7fe fd5a 	bl	8000324 <strlen>
 8001870:	4602      	mov	r2, r0
 8001872:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8001876:	4611      	mov	r1, r2
 8001878:	4618      	mov	r0, r3
 800187a:	f014 ff9b 	bl	80167b4 <CDC_Transmit_HS>
 800187e:	e0bc      	b.n	80019fa <main+0x632>
        }
      }
      else if(HAL_GetTick()-previousTime > 1000)
 8001880:	f002 f8e6 	bl	8003a50 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	f8d7 3bf8 	ldr.w	r3, [r7, #3064]	; 0xbf8
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001890:	f240 80b3 	bls.w	80019fa <main+0x632>
      {
        previousTime = HAL_GetTick();
 8001894:	f002 f8dc 	bl	8003a50 <HAL_GetTick>
 8001898:	f8c7 0bf8 	str.w	r0, [r7, #3064]	; 0xbf8
        //give up SENDING
        sprintf(sendMessage, "! %d", packets_streamed);
 800189c:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80018a0:	f8d7 2bb4 	ldr.w	r2, [r7, #2996]	; 0xbb4
 80018a4:	4960      	ldr	r1, [pc, #384]	; (8001a28 <main+0x660>)
 80018a6:	4618      	mov	r0, r3
 80018a8:	f015 fbd8 	bl	801705c <siprintf>
        LoRA_sendPacket(sendMessage);
 80018ac:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fbff 	bl	80010b4 <LoRA_sendPacket>
 80018b6:	e0a0      	b.n	80019fa <main+0x632>
      }
    }
    else if(strcmp(communication_state,"SENDING STREAM") == 0)
 80018b8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80018bc:	495b      	ldr	r1, [pc, #364]	; (8001a2c <main+0x664>)
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe fd26 	bl	8000310 <strcmp>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d126      	bne.n	8001918 <main+0x550>
    {
      if(max_packet_count == 0)
 80018ca:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 80018ce:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d113      	bne.n	8001900 <main+0x538>
      {
        strcpy(communication_state,"RECEIVING RELIABLE");
 80018d8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80018dc:	4a58      	ldr	r2, [pc, #352]	; (8001a40 <main+0x678>)
 80018de:	461c      	mov	r4, r3
 80018e0:	4615      	mov	r5, r2
 80018e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018e6:	682b      	ldr	r3, [r5, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	8022      	strh	r2, [r4, #0]
 80018ec:	3402      	adds	r4, #2
 80018ee:	0c1b      	lsrs	r3, r3, #16
 80018f0:	7023      	strb	r3, [r4, #0]
        have_recieved_anything = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
        LoRA_sendPacket("$");
 80018f8:	484d      	ldr	r0, [pc, #308]	; (8001a30 <main+0x668>)
 80018fa:	f7ff fbdb 	bl	80010b4 <LoRA_sendPacket>
 80018fe:	e07c      	b.n	80019fa <main+0x632>
      }
      else
      {
        //send whatever
        max_packet_count--;
 8001900:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8001904:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	1e5a      	subs	r2, r3, #1
 800190c:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8001910:	f5a3 733a 	sub.w	r3, r3, #744	; 0x2e8
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	e070      	b.n	80019fa <main+0x632>
      }

    }
    else if(strcmp(communication_state,"SENDING RELIABLE") == 0)
 8001918:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800191c:	4947      	ldr	r1, [pc, #284]	; (8001a3c <main+0x674>)
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fcf6 	bl	8000310 <strcmp>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d167      	bne.n	80019fa <main+0x632>
    {
    	sprintf(response_packet, "\nState of other board: %s", state);
 800192a:	f607 022c 	addw	r2, r7, #2092	; 0x82c
 800192e:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8001932:	4944      	ldr	r1, [pc, #272]	; (8001a44 <main+0x67c>)
 8001934:	4618      	mov	r0, r3
 8001936:	f015 fb91 	bl	801705c <siprintf>
	  	CDC_Transmit_HS(response_packet, strlen(response_packet));
 800193a:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fcf0 	bl	8000324 <strlen>
 8001944:	4602      	mov	r2, r0
 8001946:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800194a:	4611      	mov	r1, r2
 800194c:	4618      	mov	r0, r3
 800194e:	f014 ff31 	bl	80167b4 <CDC_Transmit_HS>

    	//get input
    	char input[usbBufferLen];
    	//usbReceiveHandle(input);

    	while(!usbReceiveHandle(input))
 8001952:	bf00      	nop
 8001954:	1d3b      	adds	r3, r7, #4
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff fd16 	bl	8001388 <usbReceiveHandle>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0f8      	beq.n	8001954 <main+0x58c>
    	{}

      reliable_send_packet(input);
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff fcac 	bl	80012c2 <reliable_send_packet>

	  	char debug[usbBufferLen+10];
	  	sprintf(debug, "\nEntered: %s\n", input);
 800196a:	1d3a      	adds	r2, r7, #4
 800196c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001970:	4935      	ldr	r1, [pc, #212]	; (8001a48 <main+0x680>)
 8001972:	4618      	mov	r0, r3
 8001974:	f015 fb72 	bl	801705c <siprintf>
	  	CDC_Transmit_HS(debug, strlen(debug));
 8001978:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800197c:	4618      	mov	r0, r3
 800197e:	f7fe fcd1 	bl	8000324 <strlen>
 8001982:	4602      	mov	r2, r0
 8001984:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001988:	4611      	mov	r1, r2
 800198a:	4618      	mov	r0, r3
 800198c:	f014 ff12 	bl	80167b4 <CDC_Transmit_HS>

      if(strcmp(input,"FIRE")==0)
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	492e      	ldr	r1, [pc, #184]	; (8001a4c <main+0x684>)
 8001994:	4618      	mov	r0, r3
 8001996:	f7fe fcbb 	bl	8000310 <strcmp>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d116      	bne.n	80019ce <main+0x606>
      {
        strcpy(communication_state,"RECEIVING STREAM");
 80019a0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80019a4:	4a23      	ldr	r2, [pc, #140]	; (8001a34 <main+0x66c>)
 80019a6:	461c      	mov	r4, r3
 80019a8:	4615      	mov	r5, r2
 80019aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019ae:	682b      	ldr	r3, [r5, #0]
 80019b0:	7023      	strb	r3, [r4, #0]
        sprintf(sendMessage, "! %d", packets_streamed);
 80019b2:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80019b6:	f8d7 2bb4 	ldr.w	r2, [r7, #2996]	; 0xbb4
 80019ba:	491b      	ldr	r1, [pc, #108]	; (8001a28 <main+0x660>)
 80019bc:	4618      	mov	r0, r3
 80019be:	f015 fb4d 	bl	801705c <siprintf>
        LoRA_sendPacket(sendMessage);
 80019c2:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff fb74 	bl	80010b4 <LoRA_sendPacket>
 80019cc:	e015      	b.n	80019fa <main+0x632>
      }
      else
      {
        strcpy(communication_state,"RECEIVING RELIABLE");
 80019ce:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80019d2:	4a1b      	ldr	r2, [pc, #108]	; (8001a40 <main+0x678>)
 80019d4:	461c      	mov	r4, r3
 80019d6:	4615      	mov	r5, r2
 80019d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019dc:	682b      	ldr	r3, [r5, #0]
 80019de:	461a      	mov	r2, r3
 80019e0:	8022      	strh	r2, [r4, #0]
 80019e2:	3402      	adds	r4, #2
 80019e4:	0c1b      	lsrs	r3, r3, #16
 80019e6:	7023      	strb	r3, [r4, #0]
        have_recieved_anything = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	f8c7 3bb0 	str.w	r3, [r7, #2992]	; 0xbb0
        HAL_Delay(100);
 80019ee:	2064      	movs	r0, #100	; 0x64
 80019f0:	f002 f83a 	bl	8003a68 <HAL_Delay>
        LoRA_sendPacket("$");
 80019f4:	480e      	ldr	r0, [pc, #56]	; (8001a30 <main+0x668>)
 80019f6:	f7ff fb5d 	bl	80010b4 <LoRA_sendPacket>
//			LED_Color_Data[i][0] = (uint32_t)MAX*triangle_space(color_offset+r_offset);
//			LED_Color_Data[i][1] = (uint32_t)MAX*triangle_space(color_offset+g_offset);
//			LED_Color_Data[i][2] = (uint32_t)MAX*triangle_space(color_offset+b_offset);
//		}

		float timeElapsed = ((float)(HAL_GetTick() - lastTime)) / 1000;
 80019fa:	f002 f829 	bl	8003a50 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	f8d7 3c0c 	ldr.w	r3, [r7, #3084]	; 0xc0c
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	ee07 3a90 	vmov	s15, r3
 8001a0a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a0e:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001a50 <main+0x688>
 8001a12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a16:	f607 33ac 	addw	r3, r7, #2988	; 0xbac
 8001a1a:	edc3 7a00 	vstr	s15, [r3]

		//float GyroX = LG2_Get_Gyro_X() - calOmegaX;
		//float GyroY = LG2_Get_Gyro_Y() - calOmegaY;
		//float GyroZ = LG2_Get_Gyro_Z() - calOmegaZ;

		lastTime = HAL_GetTick();
 8001a1e:	f002 f817 	bl	8003a50 <HAL_GetTick>
 8001a22:	f8c7 0c0c 	str.w	r0, [r7, #3084]	; 0xc0c
while (1) {
 8001a26:	e64d      	b.n	80016c4 <main+0x2fc>
 8001a28:	080183cc 	.word	0x080183cc
 8001a2c:	080183d4 	.word	0x080183d4
 8001a30:	080183e4 	.word	0x080183e4
 8001a34:	080183e8 	.word	0x080183e8
 8001a38:	080183b0 	.word	0x080183b0
 8001a3c:	080183b8 	.word	0x080183b8
 8001a40:	0801839c 	.word	0x0801839c
 8001a44:	080183fc 	.word	0x080183fc
 8001a48:	08018418 	.word	0x08018418
 8001a4c:	08018428 	.word	0x08018428
 8001a50:	447a0000 	.word	0x447a0000

08001a54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b09c      	sub	sp, #112	; 0x70
 8001a58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a5e:	224c      	movs	r2, #76	; 0x4c
 8001a60:	2100      	movs	r1, #0
 8001a62:	4618      	mov	r0, r3
 8001a64:	f015 fb48 	bl	80170f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a68:	1d3b      	adds	r3, r7, #4
 8001a6a:	2220      	movs	r2, #32
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f015 fb42 	bl	80170f8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001a74:	2002      	movs	r0, #2
 8001a76:	f007 febd 	bl	80097f4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	603b      	str	r3, [r7, #0]
 8001a7e:	4b30      	ldr	r3, [pc, #192]	; (8001b40 <SystemClock_Config+0xec>)
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a86:	4a2e      	ldr	r2, [pc, #184]	; (8001b40 <SystemClock_Config+0xec>)
 8001a88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a8c:	6193      	str	r3, [r2, #24]
 8001a8e:	4b2c      	ldr	r3, [pc, #176]	; (8001b40 <SystemClock_Config+0xec>)
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a96:	603b      	str	r3, [r7, #0]
 8001a98:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001a9a:	bf00      	nop
 8001a9c:	4b28      	ldr	r3, [pc, #160]	; (8001b40 <SystemClock_Config+0xec>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001aa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001aa8:	d1f8      	bne.n	8001a9c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001aaa:	2322      	movs	r3, #34	; 0x22
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001ab2:	2340      	movs	r3, #64	; 0x40
 8001ab4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aba:	2302      	movs	r3, #2
 8001abc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001ac6:	230c      	movs	r3, #12
 8001ac8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001aca:	2301      	movs	r3, #1
 8001acc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 8001ace:	230c      	movs	r3, #12
 8001ad0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001ad6:	230c      	movs	r3, #12
 8001ad8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001ada:	2300      	movs	r3, #0
 8001adc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ae2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f007 fece 	bl	8009888 <HAL_RCC_OscConfig>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001af2:	f000 ff1b 	bl	800292c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001af6:	233f      	movs	r3, #63	; 0x3f
 8001af8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001afa:	2303      	movs	r3, #3
 8001afc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001afe:	2300      	movs	r3, #0
 8001b00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001b02:	2308      	movs	r3, #8
 8001b04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001b06:	2340      	movs	r3, #64	; 0x40
 8001b08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001b0a:	2340      	movs	r3, #64	; 0x40
 8001b0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001b0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b12:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001b14:	2340      	movs	r3, #64	; 0x40
 8001b16:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f008 fa8d 	bl	800a03c <HAL_RCC_ClockConfig>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8001b28:	f000 ff00 	bl	800292c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001b2c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001b30:	2100      	movs	r1, #0
 8001b32:	2000      	movs	r0, #0
 8001b34:	f008 fc38 	bl	800a3a8 <HAL_RCC_MCOConfig>
}
 8001b38:	bf00      	nop
 8001b3a:	3770      	adds	r7, #112	; 0x70
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	58024800 	.word	0x58024800

08001b44 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b0ae      	sub	sp, #184	; 0xb8
 8001b48:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b4a:	463b      	mov	r3, r7
 8001b4c:	22b8      	movs	r2, #184	; 0xb8
 8001b4e:	2100      	movs	r1, #0
 8001b50:	4618      	mov	r0, r3
 8001b52:	f015 fad1 	bl	80170f8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 8001b56:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 8001b5a:	f04f 0300 	mov.w	r3, #0
 8001b5e:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001b62:	2304      	movs	r3, #4
 8001b64:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001b66:	230c      	movs	r3, #12
 8001b68:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001b6a:	2304      	movs	r3, #4
 8001b6c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001b72:	2302      	movs	r3, #2
 8001b74:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001b76:	23c0      	movs	r3, #192	; 0xc0
 8001b78:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001b82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b86:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b8e:	463b      	mov	r3, r7
 8001b90:	4618      	mov	r0, r3
 8001b92:	f008 fe49 	bl	800a828 <HAL_RCCEx_PeriphCLKConfig>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8001b9c:	f000 fec6 	bl	800292c <Error_Handler>
  }
}
 8001ba0:	bf00      	nop
 8001ba2:	37b8      	adds	r7, #184	; 0xb8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08c      	sub	sp, #48	; 0x30
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001bba:	463b      	mov	r3, r7
 8001bbc:	2224      	movs	r2, #36	; 0x24
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f015 fa99 	bl	80170f8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001bc6:	4b31      	ldr	r3, [pc, #196]	; (8001c8c <MX_ADC1_Init+0xe4>)
 8001bc8:	4a31      	ldr	r2, [pc, #196]	; (8001c90 <MX_ADC1_Init+0xe8>)
 8001bca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001bcc:	4b2f      	ldr	r3, [pc, #188]	; (8001c8c <MX_ADC1_Init+0xe4>)
 8001bce:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001bd2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001bd4:	4b2d      	ldr	r3, [pc, #180]	; (8001c8c <MX_ADC1_Init+0xe4>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001bda:	4b2c      	ldr	r3, [pc, #176]	; (8001c8c <MX_ADC1_Init+0xe4>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001be0:	4b2a      	ldr	r3, [pc, #168]	; (8001c8c <MX_ADC1_Init+0xe4>)
 8001be2:	2204      	movs	r2, #4
 8001be4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001be6:	4b29      	ldr	r3, [pc, #164]	; (8001c8c <MX_ADC1_Init+0xe4>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001bec:	4b27      	ldr	r3, [pc, #156]	; (8001c8c <MX_ADC1_Init+0xe4>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001bf2:	4b26      	ldr	r3, [pc, #152]	; (8001c8c <MX_ADC1_Init+0xe4>)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001bf8:	4b24      	ldr	r3, [pc, #144]	; (8001c8c <MX_ADC1_Init+0xe4>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c00:	4b22      	ldr	r3, [pc, #136]	; (8001c8c <MX_ADC1_Init+0xe4>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c06:	4b21      	ldr	r3, [pc, #132]	; (8001c8c <MX_ADC1_Init+0xe4>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001c0c:	4b1f      	ldr	r3, [pc, #124]	; (8001c8c <MX_ADC1_Init+0xe4>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c12:	4b1e      	ldr	r3, [pc, #120]	; (8001c8c <MX_ADC1_Init+0xe4>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001c18:	4b1c      	ldr	r3, [pc, #112]	; (8001c8c <MX_ADC1_Init+0xe4>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001c1e:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <MX_ADC1_Init+0xe4>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c26:	4819      	ldr	r0, [pc, #100]	; (8001c8c <MX_ADC1_Init+0xe4>)
 8001c28:	f002 f99e 	bl	8003f68 <HAL_ADC_Init>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001c32:	f000 fe7b 	bl	800292c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001c36:	2300      	movs	r3, #0
 8001c38:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4812      	ldr	r0, [pc, #72]	; (8001c8c <MX_ADC1_Init+0xe4>)
 8001c42:	f003 f9d9 	bl	8004ff8 <HAL_ADCEx_MultiModeConfigChannel>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001c4c:	f000 fe6e 	bl	800292c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001c50:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <MX_ADC1_Init+0xec>)
 8001c52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c54:	2306      	movs	r3, #6
 8001c56:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c5c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001c60:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c62:	2304      	movs	r3, #4
 8001c64:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c70:	463b      	mov	r3, r7
 8001c72:	4619      	mov	r1, r3
 8001c74:	4805      	ldr	r0, [pc, #20]	; (8001c8c <MX_ADC1_Init+0xe4>)
 8001c76:	f002 fb7f 	bl	8004378 <HAL_ADC_ConfigChannel>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001c80:	f000 fe54 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c84:	bf00      	nop
 8001c86:	3730      	adds	r7, #48	; 0x30
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	24000bf8 	.word	0x24000bf8
 8001c90:	40022000 	.word	0x40022000
 8001c94:	2a000400 	.word	0x2a000400

08001c98 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b08a      	sub	sp, #40	; 0x28
 8001c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c9e:	1d3b      	adds	r3, r7, #4
 8001ca0:	2224      	movs	r2, #36	; 0x24
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f015 fa27 	bl	80170f8 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001caa:	4b2f      	ldr	r3, [pc, #188]	; (8001d68 <MX_ADC3_Init+0xd0>)
 8001cac:	4a2f      	ldr	r2, [pc, #188]	; (8001d6c <MX_ADC3_Init+0xd4>)
 8001cae:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001cb0:	4b2d      	ldr	r3, [pc, #180]	; (8001d68 <MX_ADC3_Init+0xd0>)
 8001cb2:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001cb6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001cb8:	4b2b      	ldr	r3, [pc, #172]	; (8001d68 <MX_ADC3_Init+0xd0>)
 8001cba:	2208      	movs	r2, #8
 8001cbc:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001cbe:	4b2a      	ldr	r3, [pc, #168]	; (8001d68 <MX_ADC3_Init+0xd0>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001cc4:	4b28      	ldr	r3, [pc, #160]	; (8001d68 <MX_ADC3_Init+0xd0>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cca:	4b27      	ldr	r3, [pc, #156]	; (8001d68 <MX_ADC3_Init+0xd0>)
 8001ccc:	2204      	movs	r2, #4
 8001cce:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001cd0:	4b25      	ldr	r3, [pc, #148]	; (8001d68 <MX_ADC3_Init+0xd0>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001cd6:	4b24      	ldr	r3, [pc, #144]	; (8001d68 <MX_ADC3_Init+0xd0>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001cdc:	4b22      	ldr	r3, [pc, #136]	; (8001d68 <MX_ADC3_Init+0xd0>)
 8001cde:	2201      	movs	r2, #1
 8001ce0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001ce2:	4b21      	ldr	r3, [pc, #132]	; (8001d68 <MX_ADC3_Init+0xd0>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cea:	4b1f      	ldr	r3, [pc, #124]	; (8001d68 <MX_ADC3_Init+0xd0>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cf0:	4b1d      	ldr	r3, [pc, #116]	; (8001d68 <MX_ADC3_Init+0xd0>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001cf6:	4b1c      	ldr	r3, [pc, #112]	; (8001d68 <MX_ADC3_Init+0xd0>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001cfe:	4b1a      	ldr	r3, [pc, #104]	; (8001d68 <MX_ADC3_Init+0xd0>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001d04:	4b18      	ldr	r3, [pc, #96]	; (8001d68 <MX_ADC3_Init+0xd0>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d0a:	4b17      	ldr	r3, [pc, #92]	; (8001d68 <MX_ADC3_Init+0xd0>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001d10:	4b15      	ldr	r3, [pc, #84]	; (8001d68 <MX_ADC3_Init+0xd0>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001d16:	4b14      	ldr	r3, [pc, #80]	; (8001d68 <MX_ADC3_Init+0xd0>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001d1e:	4812      	ldr	r0, [pc, #72]	; (8001d68 <MX_ADC3_Init+0xd0>)
 8001d20:	f002 f922 	bl	8003f68 <HAL_ADC_Init>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001d2a:	f000 fdff 	bl	800292c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001d2e:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <MX_ADC3_Init+0xd8>)
 8001d30:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d32:	2306      	movs	r3, #6
 8001d34:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001d3a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001d3e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001d40:	2304      	movs	r3, #4
 8001d42:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001d4c:	1d3b      	adds	r3, r7, #4
 8001d4e:	4619      	mov	r1, r3
 8001d50:	4805      	ldr	r0, [pc, #20]	; (8001d68 <MX_ADC3_Init+0xd0>)
 8001d52:	f002 fb11 	bl	8004378 <HAL_ADC_ConfigChannel>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8001d5c:	f000 fde6 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001d60:	bf00      	nop
 8001d62:	3728      	adds	r7, #40	; 0x28
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	24000c68 	.word	0x24000c68
 8001d6c:	58026000 	.word	0x58026000
 8001d70:	04300002 	.word	0x04300002

08001d74 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8001d78:	4b2e      	ldr	r3, [pc, #184]	; (8001e34 <MX_FDCAN3_Init+0xc0>)
 8001d7a:	4a2f      	ldr	r2, [pc, #188]	; (8001e38 <MX_FDCAN3_Init+0xc4>)
 8001d7c:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001d7e:	4b2d      	ldr	r3, [pc, #180]	; (8001e34 <MX_FDCAN3_Init+0xc0>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001d84:	4b2b      	ldr	r3, [pc, #172]	; (8001e34 <MX_FDCAN3_Init+0xc0>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8001d8a:	4b2a      	ldr	r3, [pc, #168]	; (8001e34 <MX_FDCAN3_Init+0xc0>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8001d90:	4b28      	ldr	r3, [pc, #160]	; (8001e34 <MX_FDCAN3_Init+0xc0>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001d96:	4b27      	ldr	r3, [pc, #156]	; (8001e34 <MX_FDCAN3_Init+0xc0>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8001d9c:	4b25      	ldr	r3, [pc, #148]	; (8001e34 <MX_FDCAN3_Init+0xc0>)
 8001d9e:	2210      	movs	r2, #16
 8001da0:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8001da2:	4b24      	ldr	r3, [pc, #144]	; (8001e34 <MX_FDCAN3_Init+0xc0>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8001da8:	4b22      	ldr	r3, [pc, #136]	; (8001e34 <MX_FDCAN3_Init+0xc0>)
 8001daa:	2202      	movs	r2, #2
 8001dac:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8001dae:	4b21      	ldr	r3, [pc, #132]	; (8001e34 <MX_FDCAN3_Init+0xc0>)
 8001db0:	2202      	movs	r2, #2
 8001db2:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8001db4:	4b1f      	ldr	r3, [pc, #124]	; (8001e34 <MX_FDCAN3_Init+0xc0>)
 8001db6:	2201      	movs	r2, #1
 8001db8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8001dba:	4b1e      	ldr	r3, [pc, #120]	; (8001e34 <MX_FDCAN3_Init+0xc0>)
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8001dc0:	4b1c      	ldr	r3, [pc, #112]	; (8001e34 <MX_FDCAN3_Init+0xc0>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8001dc6:	4b1b      	ldr	r3, [pc, #108]	; (8001e34 <MX_FDCAN3_Init+0xc0>)
 8001dc8:	2201      	movs	r2, #1
 8001dca:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8001dcc:	4b19      	ldr	r3, [pc, #100]	; (8001e34 <MX_FDCAN3_Init+0xc0>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 8001dd2:	4b18      	ldr	r3, [pc, #96]	; (8001e34 <MX_FDCAN3_Init+0xc0>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8001dd8:	4b16      	ldr	r3, [pc, #88]	; (8001e34 <MX_FDCAN3_Init+0xc0>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8001dde:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <MX_FDCAN3_Init+0xc0>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001de4:	4b13      	ldr	r3, [pc, #76]	; (8001e34 <MX_FDCAN3_Init+0xc0>)
 8001de6:	2204      	movs	r2, #4
 8001de8:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8001dea:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <MX_FDCAN3_Init+0xc0>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001df0:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <MX_FDCAN3_Init+0xc0>)
 8001df2:	2204      	movs	r2, #4
 8001df4:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8001df6:	4b0f      	ldr	r3, [pc, #60]	; (8001e34 <MX_FDCAN3_Init+0xc0>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001dfc:	4b0d      	ldr	r3, [pc, #52]	; (8001e34 <MX_FDCAN3_Init+0xc0>)
 8001dfe:	2204      	movs	r2, #4
 8001e00:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8001e02:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <MX_FDCAN3_Init+0xc0>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8001e08:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <MX_FDCAN3_Init+0xc0>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8001e0e:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <MX_FDCAN3_Init+0xc0>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001e14:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <MX_FDCAN3_Init+0xc0>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <MX_FDCAN3_Init+0xc0>)
 8001e1c:	2204      	movs	r2, #4
 8001e1e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001e20:	4804      	ldr	r0, [pc, #16]	; (8001e34 <MX_FDCAN3_Init+0xc0>)
 8001e22:	f005 fbaf 	bl	8007584 <HAL_FDCAN_Init>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8001e2c:	f000 fd7e 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8001e30:	bf00      	nop
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	24000dc8 	.word	0x24000dc8
 8001e38:	4000d400 	.word	0x4000d400

08001e3c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001e40:	4b1b      	ldr	r3, [pc, #108]	; (8001eb0 <MX_I2C2_Init+0x74>)
 8001e42:	4a1c      	ldr	r2, [pc, #112]	; (8001eb4 <MX_I2C2_Init+0x78>)
 8001e44:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001e46:	4b1a      	ldr	r3, [pc, #104]	; (8001eb0 <MX_I2C2_Init+0x74>)
 8001e48:	4a1b      	ldr	r2, [pc, #108]	; (8001eb8 <MX_I2C2_Init+0x7c>)
 8001e4a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001e4c:	4b18      	ldr	r3, [pc, #96]	; (8001eb0 <MX_I2C2_Init+0x74>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e52:	4b17      	ldr	r3, [pc, #92]	; (8001eb0 <MX_I2C2_Init+0x74>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e58:	4b15      	ldr	r3, [pc, #84]	; (8001eb0 <MX_I2C2_Init+0x74>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001e5e:	4b14      	ldr	r3, [pc, #80]	; (8001eb0 <MX_I2C2_Init+0x74>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e64:	4b12      	ldr	r3, [pc, #72]	; (8001eb0 <MX_I2C2_Init+0x74>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e6a:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <MX_I2C2_Init+0x74>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e70:	4b0f      	ldr	r3, [pc, #60]	; (8001eb0 <MX_I2C2_Init+0x74>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001e76:	480e      	ldr	r0, [pc, #56]	; (8001eb0 <MX_I2C2_Init+0x74>)
 8001e78:	f006 f8c2 	bl	8008000 <HAL_I2C_Init>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001e82:	f000 fd53 	bl	800292c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e86:	2100      	movs	r1, #0
 8001e88:	4809      	ldr	r0, [pc, #36]	; (8001eb0 <MX_I2C2_Init+0x74>)
 8001e8a:	f006 f963 	bl	8008154 <HAL_I2CEx_ConfigAnalogFilter>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001e94:	f000 fd4a 	bl	800292c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4805      	ldr	r0, [pc, #20]	; (8001eb0 <MX_I2C2_Init+0x74>)
 8001e9c:	f006 f9a5 	bl	80081ea <HAL_I2CEx_ConfigDigitalFilter>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001ea6:	f000 fd41 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	24000e68 	.word	0x24000e68
 8001eb4:	40005800 	.word	0x40005800
 8001eb8:	20303e5d 	.word	0x20303e5d

08001ebc <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8001ec0:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <MX_SDMMC2_SD_Init+0x34>)
 8001ec2:	4a0c      	ldr	r2, [pc, #48]	; (8001ef4 <MX_SDMMC2_SD_Init+0x38>)
 8001ec4:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001ec6:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <MX_SDMMC2_SD_Init+0x34>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001ecc:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <MX_SDMMC2_SD_Init+0x34>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001ed2:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <MX_SDMMC2_SD_Init+0x34>)
 8001ed4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ed8:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001eda:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <MX_SDMMC2_SD_Init+0x34>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
 8001ee0:	4b03      	ldr	r3, [pc, #12]	; (8001ef0 <MX_SDMMC2_SD_Init+0x34>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8001ee6:	bf00      	nop
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	24000ebc 	.word	0x24000ebc
 8001ef4:	48022400 	.word	0x48022400

08001ef8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001efc:	4b27      	ldr	r3, [pc, #156]	; (8001f9c <MX_SPI1_Init+0xa4>)
 8001efe:	4a28      	ldr	r2, [pc, #160]	; (8001fa0 <MX_SPI1_Init+0xa8>)
 8001f00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f02:	4b26      	ldr	r3, [pc, #152]	; (8001f9c <MX_SPI1_Init+0xa4>)
 8001f04:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001f08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f0a:	4b24      	ldr	r3, [pc, #144]	; (8001f9c <MX_SPI1_Init+0xa4>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f10:	4b22      	ldr	r3, [pc, #136]	; (8001f9c <MX_SPI1_Init+0xa4>)
 8001f12:	2207      	movs	r2, #7
 8001f14:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f16:	4b21      	ldr	r3, [pc, #132]	; (8001f9c <MX_SPI1_Init+0xa4>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f1c:	4b1f      	ldr	r3, [pc, #124]	; (8001f9c <MX_SPI1_Init+0xa4>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f22:	4b1e      	ldr	r3, [pc, #120]	; (8001f9c <MX_SPI1_Init+0xa4>)
 8001f24:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f28:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001f2a:	4b1c      	ldr	r3, [pc, #112]	; (8001f9c <MX_SPI1_Init+0xa4>)
 8001f2c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001f30:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f32:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <MX_SPI1_Init+0xa4>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f38:	4b18      	ldr	r3, [pc, #96]	; (8001f9c <MX_SPI1_Init+0xa4>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f3e:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <MX_SPI1_Init+0xa4>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001f44:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <MX_SPI1_Init+0xa4>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f4a:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <MX_SPI1_Init+0xa4>)
 8001f4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f50:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001f52:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <MX_SPI1_Init+0xa4>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001f58:	4b10      	ldr	r3, [pc, #64]	; (8001f9c <MX_SPI1_Init+0xa4>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f5e:	4b0f      	ldr	r3, [pc, #60]	; (8001f9c <MX_SPI1_Init+0xa4>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f64:	4b0d      	ldr	r3, [pc, #52]	; (8001f9c <MX_SPI1_Init+0xa4>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001f6a:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <MX_SPI1_Init+0xa4>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001f70:	4b0a      	ldr	r3, [pc, #40]	; (8001f9c <MX_SPI1_Init+0xa4>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001f76:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <MX_SPI1_Init+0xa4>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001f7c:	4b07      	ldr	r3, [pc, #28]	; (8001f9c <MX_SPI1_Init+0xa4>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001f82:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <MX_SPI1_Init+0xa4>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f88:	4804      	ldr	r0, [pc, #16]	; (8001f9c <MX_SPI1_Init+0xa4>)
 8001f8a:	f00c fc97 	bl	800e8bc <HAL_SPI_Init>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001f94:	f000 fcca 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001f98:	bf00      	nop
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	24000f38 	.word	0x24000f38
 8001fa0:	40013000 	.word	0x40013000

08001fa4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001fa8:	4b27      	ldr	r3, [pc, #156]	; (8002048 <MX_SPI2_Init+0xa4>)
 8001faa:	4a28      	ldr	r2, [pc, #160]	; (800204c <MX_SPI2_Init+0xa8>)
 8001fac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001fae:	4b26      	ldr	r3, [pc, #152]	; (8002048 <MX_SPI2_Init+0xa4>)
 8001fb0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001fb4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001fb6:	4b24      	ldr	r3, [pc, #144]	; (8002048 <MX_SPI2_Init+0xa4>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fbc:	4b22      	ldr	r3, [pc, #136]	; (8002048 <MX_SPI2_Init+0xa4>)
 8001fbe:	2207      	movs	r2, #7
 8001fc0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fc2:	4b21      	ldr	r3, [pc, #132]	; (8002048 <MX_SPI2_Init+0xa4>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fc8:	4b1f      	ldr	r3, [pc, #124]	; (8002048 <MX_SPI2_Init+0xa4>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001fce:	4b1e      	ldr	r3, [pc, #120]	; (8002048 <MX_SPI2_Init+0xa4>)
 8001fd0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001fd4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001fd6:	4b1c      	ldr	r3, [pc, #112]	; (8002048 <MX_SPI2_Init+0xa4>)
 8001fd8:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001fdc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fde:	4b1a      	ldr	r3, [pc, #104]	; (8002048 <MX_SPI2_Init+0xa4>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fe4:	4b18      	ldr	r3, [pc, #96]	; (8002048 <MX_SPI2_Init+0xa4>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fea:	4b17      	ldr	r3, [pc, #92]	; (8002048 <MX_SPI2_Init+0xa4>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001ff0:	4b15      	ldr	r3, [pc, #84]	; (8002048 <MX_SPI2_Init+0xa4>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ff6:	4b14      	ldr	r3, [pc, #80]	; (8002048 <MX_SPI2_Init+0xa4>)
 8001ff8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ffc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001ffe:	4b12      	ldr	r3, [pc, #72]	; (8002048 <MX_SPI2_Init+0xa4>)
 8002000:	2200      	movs	r2, #0
 8002002:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002004:	4b10      	ldr	r3, [pc, #64]	; (8002048 <MX_SPI2_Init+0xa4>)
 8002006:	2200      	movs	r2, #0
 8002008:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800200a:	4b0f      	ldr	r3, [pc, #60]	; (8002048 <MX_SPI2_Init+0xa4>)
 800200c:	2200      	movs	r2, #0
 800200e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002010:	4b0d      	ldr	r3, [pc, #52]	; (8002048 <MX_SPI2_Init+0xa4>)
 8002012:	2200      	movs	r2, #0
 8002014:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002016:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <MX_SPI2_Init+0xa4>)
 8002018:	2200      	movs	r2, #0
 800201a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800201c:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <MX_SPI2_Init+0xa4>)
 800201e:	2200      	movs	r2, #0
 8002020:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002022:	4b09      	ldr	r3, [pc, #36]	; (8002048 <MX_SPI2_Init+0xa4>)
 8002024:	2200      	movs	r2, #0
 8002026:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002028:	4b07      	ldr	r3, [pc, #28]	; (8002048 <MX_SPI2_Init+0xa4>)
 800202a:	2200      	movs	r2, #0
 800202c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800202e:	4b06      	ldr	r3, [pc, #24]	; (8002048 <MX_SPI2_Init+0xa4>)
 8002030:	2200      	movs	r2, #0
 8002032:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002034:	4804      	ldr	r0, [pc, #16]	; (8002048 <MX_SPI2_Init+0xa4>)
 8002036:	f00c fc41 	bl	800e8bc <HAL_SPI_Init>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8002040:	f000 fc74 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002044:	bf00      	nop
 8002046:	bd80      	pop	{r7, pc}
 8002048:	24000fc0 	.word	0x24000fc0
 800204c:	40003800 	.word	0x40003800

08002050 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002054:	4b27      	ldr	r3, [pc, #156]	; (80020f4 <MX_SPI3_Init+0xa4>)
 8002056:	4a28      	ldr	r2, [pc, #160]	; (80020f8 <MX_SPI3_Init+0xa8>)
 8002058:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800205a:	4b26      	ldr	r3, [pc, #152]	; (80020f4 <MX_SPI3_Init+0xa4>)
 800205c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002060:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002062:	4b24      	ldr	r3, [pc, #144]	; (80020f4 <MX_SPI3_Init+0xa4>)
 8002064:	2200      	movs	r2, #0
 8002066:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002068:	4b22      	ldr	r3, [pc, #136]	; (80020f4 <MX_SPI3_Init+0xa4>)
 800206a:	2207      	movs	r2, #7
 800206c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800206e:	4b21      	ldr	r3, [pc, #132]	; (80020f4 <MX_SPI3_Init+0xa4>)
 8002070:	2200      	movs	r2, #0
 8002072:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002074:	4b1f      	ldr	r3, [pc, #124]	; (80020f4 <MX_SPI3_Init+0xa4>)
 8002076:	2200      	movs	r2, #0
 8002078:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800207a:	4b1e      	ldr	r3, [pc, #120]	; (80020f4 <MX_SPI3_Init+0xa4>)
 800207c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002080:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002082:	4b1c      	ldr	r3, [pc, #112]	; (80020f4 <MX_SPI3_Init+0xa4>)
 8002084:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002088:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800208a:	4b1a      	ldr	r3, [pc, #104]	; (80020f4 <MX_SPI3_Init+0xa4>)
 800208c:	2200      	movs	r2, #0
 800208e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002090:	4b18      	ldr	r3, [pc, #96]	; (80020f4 <MX_SPI3_Init+0xa4>)
 8002092:	2200      	movs	r2, #0
 8002094:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002096:	4b17      	ldr	r3, [pc, #92]	; (80020f4 <MX_SPI3_Init+0xa4>)
 8002098:	2200      	movs	r2, #0
 800209a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800209c:	4b15      	ldr	r3, [pc, #84]	; (80020f4 <MX_SPI3_Init+0xa4>)
 800209e:	2200      	movs	r2, #0
 80020a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80020a2:	4b14      	ldr	r3, [pc, #80]	; (80020f4 <MX_SPI3_Init+0xa4>)
 80020a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020a8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80020aa:	4b12      	ldr	r3, [pc, #72]	; (80020f4 <MX_SPI3_Init+0xa4>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80020b0:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <MX_SPI3_Init+0xa4>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80020b6:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <MX_SPI3_Init+0xa4>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80020bc:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <MX_SPI3_Init+0xa4>)
 80020be:	2200      	movs	r2, #0
 80020c0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80020c2:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <MX_SPI3_Init+0xa4>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80020c8:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <MX_SPI3_Init+0xa4>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80020ce:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <MX_SPI3_Init+0xa4>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80020d4:	4b07      	ldr	r3, [pc, #28]	; (80020f4 <MX_SPI3_Init+0xa4>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80020da:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <MX_SPI3_Init+0xa4>)
 80020dc:	2200      	movs	r2, #0
 80020de:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80020e0:	4804      	ldr	r0, [pc, #16]	; (80020f4 <MX_SPI3_Init+0xa4>)
 80020e2:	f00c fbeb 	bl	800e8bc <HAL_SPI_Init>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 80020ec:	f000 fc1e 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80020f0:	bf00      	nop
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	24001048 	.word	0x24001048
 80020f8:	40003c00 	.word	0x40003c00

080020fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08a      	sub	sp, #40	; 0x28
 8002100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002102:	f107 031c 	add.w	r3, r7, #28
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	605a      	str	r2, [r3, #4]
 800210c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800210e:	463b      	mov	r3, r7
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	60da      	str	r2, [r3, #12]
 800211a:	611a      	str	r2, [r3, #16]
 800211c:	615a      	str	r2, [r3, #20]
 800211e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002120:	4b21      	ldr	r3, [pc, #132]	; (80021a8 <MX_TIM2_Init+0xac>)
 8002122:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002126:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002128:	4b1f      	ldr	r3, [pc, #124]	; (80021a8 <MX_TIM2_Init+0xac>)
 800212a:	2200      	movs	r2, #0
 800212c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800212e:	4b1e      	ldr	r3, [pc, #120]	; (80021a8 <MX_TIM2_Init+0xac>)
 8002130:	2200      	movs	r2, #0
 8002132:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 8002134:	4b1c      	ldr	r3, [pc, #112]	; (80021a8 <MX_TIM2_Init+0xac>)
 8002136:	225a      	movs	r2, #90	; 0x5a
 8002138:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800213a:	4b1b      	ldr	r3, [pc, #108]	; (80021a8 <MX_TIM2_Init+0xac>)
 800213c:	2200      	movs	r2, #0
 800213e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002140:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <MX_TIM2_Init+0xac>)
 8002142:	2200      	movs	r2, #0
 8002144:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002146:	4818      	ldr	r0, [pc, #96]	; (80021a8 <MX_TIM2_Init+0xac>)
 8002148:	f00d f9a8 	bl	800f49c <HAL_TIM_PWM_Init>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002152:	f000 fbeb 	bl	800292c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002156:	2300      	movs	r3, #0
 8002158:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800215a:	2300      	movs	r3, #0
 800215c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800215e:	f107 031c 	add.w	r3, r7, #28
 8002162:	4619      	mov	r1, r3
 8002164:	4810      	ldr	r0, [pc, #64]	; (80021a8 <MX_TIM2_Init+0xac>)
 8002166:	f00e fc2f 	bl	80109c8 <HAL_TIMEx_MasterConfigSynchronization>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002170:	f000 fbdc 	bl	800292c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002174:	2360      	movs	r3, #96	; 0x60
 8002176:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002178:	2300      	movs	r3, #0
 800217a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800217c:	2300      	movs	r3, #0
 800217e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002180:	2300      	movs	r3, #0
 8002182:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002184:	463b      	mov	r3, r7
 8002186:	2208      	movs	r2, #8
 8002188:	4619      	mov	r1, r3
 800218a:	4807      	ldr	r0, [pc, #28]	; (80021a8 <MX_TIM2_Init+0xac>)
 800218c:	f00d fe4e 	bl	800fe2c <HAL_TIM_PWM_ConfigChannel>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002196:	f000 fbc9 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800219a:	4803      	ldr	r0, [pc, #12]	; (80021a8 <MX_TIM2_Init+0xac>)
 800219c:	f001 f8e4 	bl	8003368 <HAL_TIM_MspPostInit>

}
 80021a0:	bf00      	nop
 80021a2:	3728      	adds	r7, #40	; 0x28
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	240010d0 	.word	0x240010d0

080021ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b08a      	sub	sp, #40	; 0x28
 80021b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021b2:	f107 031c 	add.w	r3, r7, #28
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	605a      	str	r2, [r3, #4]
 80021bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021be:	463b      	mov	r3, r7
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	60da      	str	r2, [r3, #12]
 80021ca:	611a      	str	r2, [r3, #16]
 80021cc:	615a      	str	r2, [r3, #20]
 80021ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021d0:	4b26      	ldr	r3, [pc, #152]	; (800226c <MX_TIM3_Init+0xc0>)
 80021d2:	4a27      	ldr	r2, [pc, #156]	; (8002270 <MX_TIM3_Init+0xc4>)
 80021d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80021d6:	4b25      	ldr	r3, [pc, #148]	; (800226c <MX_TIM3_Init+0xc0>)
 80021d8:	2200      	movs	r2, #0
 80021da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021dc:	4b23      	ldr	r3, [pc, #140]	; (800226c <MX_TIM3_Init+0xc0>)
 80021de:	2200      	movs	r2, #0
 80021e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 80021e2:	4b22      	ldr	r3, [pc, #136]	; (800226c <MX_TIM3_Init+0xc0>)
 80021e4:	225a      	movs	r2, #90	; 0x5a
 80021e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021e8:	4b20      	ldr	r3, [pc, #128]	; (800226c <MX_TIM3_Init+0xc0>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ee:	4b1f      	ldr	r3, [pc, #124]	; (800226c <MX_TIM3_Init+0xc0>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80021f4:	481d      	ldr	r0, [pc, #116]	; (800226c <MX_TIM3_Init+0xc0>)
 80021f6:	f00d f951 	bl	800f49c <HAL_TIM_PWM_Init>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d001      	beq.n	8002204 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002200:	f000 fb94 	bl	800292c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002204:	2300      	movs	r3, #0
 8002206:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002208:	2300      	movs	r3, #0
 800220a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800220c:	f107 031c 	add.w	r3, r7, #28
 8002210:	4619      	mov	r1, r3
 8002212:	4816      	ldr	r0, [pc, #88]	; (800226c <MX_TIM3_Init+0xc0>)
 8002214:	f00e fbd8 	bl	80109c8 <HAL_TIMEx_MasterConfigSynchronization>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800221e:	f000 fb85 	bl	800292c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002222:	2360      	movs	r3, #96	; 0x60
 8002224:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002226:	2300      	movs	r3, #0
 8002228:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800222a:	2300      	movs	r3, #0
 800222c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800222e:	2300      	movs	r3, #0
 8002230:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002232:	463b      	mov	r3, r7
 8002234:	2200      	movs	r2, #0
 8002236:	4619      	mov	r1, r3
 8002238:	480c      	ldr	r0, [pc, #48]	; (800226c <MX_TIM3_Init+0xc0>)
 800223a:	f00d fdf7 	bl	800fe2c <HAL_TIM_PWM_ConfigChannel>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002244:	f000 fb72 	bl	800292c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002248:	463b      	mov	r3, r7
 800224a:	2204      	movs	r2, #4
 800224c:	4619      	mov	r1, r3
 800224e:	4807      	ldr	r0, [pc, #28]	; (800226c <MX_TIM3_Init+0xc0>)
 8002250:	f00d fdec 	bl	800fe2c <HAL_TIM_PWM_ConfigChannel>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800225a:	f000 fb67 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800225e:	4803      	ldr	r0, [pc, #12]	; (800226c <MX_TIM3_Init+0xc0>)
 8002260:	f001 f882 	bl	8003368 <HAL_TIM_MspPostInit>

}
 8002264:	bf00      	nop
 8002266:	3728      	adds	r7, #40	; 0x28
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	2400111c 	.word	0x2400111c
 8002270:	40000400 	.word	0x40000400

08002274 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b08a      	sub	sp, #40	; 0x28
 8002278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800227a:	f107 031c 	add.w	r3, r7, #28
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	605a      	str	r2, [r3, #4]
 8002284:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002286:	463b      	mov	r3, r7
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	60da      	str	r2, [r3, #12]
 8002292:	611a      	str	r2, [r3, #16]
 8002294:	615a      	str	r2, [r3, #20]
 8002296:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002298:	4b32      	ldr	r3, [pc, #200]	; (8002364 <MX_TIM4_Init+0xf0>)
 800229a:	4a33      	ldr	r2, [pc, #204]	; (8002368 <MX_TIM4_Init+0xf4>)
 800229c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 28;
 800229e:	4b31      	ldr	r3, [pc, #196]	; (8002364 <MX_TIM4_Init+0xf0>)
 80022a0:	221c      	movs	r2, #28
 80022a2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022a4:	4b2f      	ldr	r3, [pc, #188]	; (8002364 <MX_TIM4_Init+0xf0>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80022aa:	4b2e      	ldr	r3, [pc, #184]	; (8002364 <MX_TIM4_Init+0xf0>)
 80022ac:	f242 720f 	movw	r2, #9999	; 0x270f
 80022b0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022b2:	4b2c      	ldr	r3, [pc, #176]	; (8002364 <MX_TIM4_Init+0xf0>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022b8:	4b2a      	ldr	r3, [pc, #168]	; (8002364 <MX_TIM4_Init+0xf0>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80022be:	4829      	ldr	r0, [pc, #164]	; (8002364 <MX_TIM4_Init+0xf0>)
 80022c0:	f00d f8ec 	bl	800f49c <HAL_TIM_PWM_Init>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80022ca:	f000 fb2f 	bl	800292c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ce:	2300      	movs	r3, #0
 80022d0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022d2:	2300      	movs	r3, #0
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80022d6:	f107 031c 	add.w	r3, r7, #28
 80022da:	4619      	mov	r1, r3
 80022dc:	4821      	ldr	r0, [pc, #132]	; (8002364 <MX_TIM4_Init+0xf0>)
 80022de:	f00e fb73 	bl	80109c8 <HAL_TIMEx_MasterConfigSynchronization>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80022e8:	f000 fb20 	bl	800292c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022ec:	2360      	movs	r3, #96	; 0x60
 80022ee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80022f0:	2300      	movs	r3, #0
 80022f2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022f4:	2300      	movs	r3, #0
 80022f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022f8:	2300      	movs	r3, #0
 80022fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022fc:	463b      	mov	r3, r7
 80022fe:	2200      	movs	r2, #0
 8002300:	4619      	mov	r1, r3
 8002302:	4818      	ldr	r0, [pc, #96]	; (8002364 <MX_TIM4_Init+0xf0>)
 8002304:	f00d fd92 	bl	800fe2c <HAL_TIM_PWM_ConfigChannel>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800230e:	f000 fb0d 	bl	800292c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002312:	463b      	mov	r3, r7
 8002314:	2204      	movs	r2, #4
 8002316:	4619      	mov	r1, r3
 8002318:	4812      	ldr	r0, [pc, #72]	; (8002364 <MX_TIM4_Init+0xf0>)
 800231a:	f00d fd87 	bl	800fe2c <HAL_TIM_PWM_ConfigChannel>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002324:	f000 fb02 	bl	800292c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002328:	463b      	mov	r3, r7
 800232a:	2208      	movs	r2, #8
 800232c:	4619      	mov	r1, r3
 800232e:	480d      	ldr	r0, [pc, #52]	; (8002364 <MX_TIM4_Init+0xf0>)
 8002330:	f00d fd7c 	bl	800fe2c <HAL_TIM_PWM_ConfigChannel>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 800233a:	f000 faf7 	bl	800292c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800233e:	463b      	mov	r3, r7
 8002340:	220c      	movs	r2, #12
 8002342:	4619      	mov	r1, r3
 8002344:	4807      	ldr	r0, [pc, #28]	; (8002364 <MX_TIM4_Init+0xf0>)
 8002346:	f00d fd71 	bl	800fe2c <HAL_TIM_PWM_ConfigChannel>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d001      	beq.n	8002354 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8002350:	f000 faec 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002354:	4803      	ldr	r0, [pc, #12]	; (8002364 <MX_TIM4_Init+0xf0>)
 8002356:	f001 f807 	bl	8003368 <HAL_TIM_MspPostInit>

}
 800235a:	bf00      	nop
 800235c:	3728      	adds	r7, #40	; 0x28
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	24001168 	.word	0x24001168
 8002368:	40000800 	.word	0x40000800

0800236c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08a      	sub	sp, #40	; 0x28
 8002370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002372:	f107 031c 	add.w	r3, r7, #28
 8002376:	2200      	movs	r2, #0
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	605a      	str	r2, [r3, #4]
 800237c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800237e:	463b      	mov	r3, r7
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	609a      	str	r2, [r3, #8]
 8002388:	60da      	str	r2, [r3, #12]
 800238a:	611a      	str	r2, [r3, #16]
 800238c:	615a      	str	r2, [r3, #20]
 800238e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002390:	4b21      	ldr	r3, [pc, #132]	; (8002418 <MX_TIM5_Init+0xac>)
 8002392:	4a22      	ldr	r2, [pc, #136]	; (800241c <MX_TIM5_Init+0xb0>)
 8002394:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002396:	4b20      	ldr	r3, [pc, #128]	; (8002418 <MX_TIM5_Init+0xac>)
 8002398:	2200      	movs	r2, #0
 800239a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800239c:	4b1e      	ldr	r3, [pc, #120]	; (8002418 <MX_TIM5_Init+0xac>)
 800239e:	2200      	movs	r2, #0
 80023a0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 80023a2:	4b1d      	ldr	r3, [pc, #116]	; (8002418 <MX_TIM5_Init+0xac>)
 80023a4:	225a      	movs	r2, #90	; 0x5a
 80023a6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023a8:	4b1b      	ldr	r3, [pc, #108]	; (8002418 <MX_TIM5_Init+0xac>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ae:	4b1a      	ldr	r3, [pc, #104]	; (8002418 <MX_TIM5_Init+0xac>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80023b4:	4818      	ldr	r0, [pc, #96]	; (8002418 <MX_TIM5_Init+0xac>)
 80023b6:	f00d f871 	bl	800f49c <HAL_TIM_PWM_Init>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80023c0:	f000 fab4 	bl	800292c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023c4:	2300      	movs	r3, #0
 80023c6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023c8:	2300      	movs	r3, #0
 80023ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80023cc:	f107 031c 	add.w	r3, r7, #28
 80023d0:	4619      	mov	r1, r3
 80023d2:	4811      	ldr	r0, [pc, #68]	; (8002418 <MX_TIM5_Init+0xac>)
 80023d4:	f00e faf8 	bl	80109c8 <HAL_TIMEx_MasterConfigSynchronization>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80023de:	f000 faa5 	bl	800292c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023e2:	2360      	movs	r3, #96	; 0x60
 80023e4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023ea:	2300      	movs	r3, #0
 80023ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023ee:	2300      	movs	r3, #0
 80023f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80023f2:	463b      	mov	r3, r7
 80023f4:	220c      	movs	r2, #12
 80023f6:	4619      	mov	r1, r3
 80023f8:	4807      	ldr	r0, [pc, #28]	; (8002418 <MX_TIM5_Init+0xac>)
 80023fa:	f00d fd17 	bl	800fe2c <HAL_TIM_PWM_ConfigChannel>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002404:	f000 fa92 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002408:	4803      	ldr	r0, [pc, #12]	; (8002418 <MX_TIM5_Init+0xac>)
 800240a:	f000 ffad 	bl	8003368 <HAL_TIM_MspPostInit>

}
 800240e:	bf00      	nop
 8002410:	3728      	adds	r7, #40	; 0x28
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	240011b4 	.word	0x240011b4
 800241c:	40000c00 	.word	0x40000c00

08002420 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002424:	4b0e      	ldr	r3, [pc, #56]	; (8002460 <MX_TIM13_Init+0x40>)
 8002426:	4a0f      	ldr	r2, [pc, #60]	; (8002464 <MX_TIM13_Init+0x44>)
 8002428:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 95;
 800242a:	4b0d      	ldr	r3, [pc, #52]	; (8002460 <MX_TIM13_Init+0x40>)
 800242c:	225f      	movs	r2, #95	; 0x5f
 800242e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002430:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <MX_TIM13_Init+0x40>)
 8002432:	2200      	movs	r2, #0
 8002434:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8002436:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <MX_TIM13_Init+0x40>)
 8002438:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800243c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800243e:	4b08      	ldr	r3, [pc, #32]	; (8002460 <MX_TIM13_Init+0x40>)
 8002440:	2200      	movs	r2, #0
 8002442:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002444:	4b06      	ldr	r3, [pc, #24]	; (8002460 <MX_TIM13_Init+0x40>)
 8002446:	2200      	movs	r2, #0
 8002448:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800244a:	4805      	ldr	r0, [pc, #20]	; (8002460 <MX_TIM13_Init+0x40>)
 800244c:	f00c ffcf 	bl	800f3ee <HAL_TIM_Base_Init>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8002456:	f000 fa69 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	24001200 	.word	0x24001200
 8002464:	40001c00 	.word	0x40001c00

08002468 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800246c:	4b22      	ldr	r3, [pc, #136]	; (80024f8 <MX_UART4_Init+0x90>)
 800246e:	4a23      	ldr	r2, [pc, #140]	; (80024fc <MX_UART4_Init+0x94>)
 8002470:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002472:	4b21      	ldr	r3, [pc, #132]	; (80024f8 <MX_UART4_Init+0x90>)
 8002474:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002478:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800247a:	4b1f      	ldr	r3, [pc, #124]	; (80024f8 <MX_UART4_Init+0x90>)
 800247c:	2200      	movs	r2, #0
 800247e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002480:	4b1d      	ldr	r3, [pc, #116]	; (80024f8 <MX_UART4_Init+0x90>)
 8002482:	2200      	movs	r2, #0
 8002484:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002486:	4b1c      	ldr	r3, [pc, #112]	; (80024f8 <MX_UART4_Init+0x90>)
 8002488:	2200      	movs	r2, #0
 800248a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800248c:	4b1a      	ldr	r3, [pc, #104]	; (80024f8 <MX_UART4_Init+0x90>)
 800248e:	220c      	movs	r2, #12
 8002490:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002492:	4b19      	ldr	r3, [pc, #100]	; (80024f8 <MX_UART4_Init+0x90>)
 8002494:	2200      	movs	r2, #0
 8002496:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002498:	4b17      	ldr	r3, [pc, #92]	; (80024f8 <MX_UART4_Init+0x90>)
 800249a:	2200      	movs	r2, #0
 800249c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800249e:	4b16      	ldr	r3, [pc, #88]	; (80024f8 <MX_UART4_Init+0x90>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024a4:	4b14      	ldr	r3, [pc, #80]	; (80024f8 <MX_UART4_Init+0x90>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024aa:	4b13      	ldr	r3, [pc, #76]	; (80024f8 <MX_UART4_Init+0x90>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80024b0:	4811      	ldr	r0, [pc, #68]	; (80024f8 <MX_UART4_Init+0x90>)
 80024b2:	f00e fb43 	bl	8010b3c <HAL_UART_Init>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80024bc:	f000 fa36 	bl	800292c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024c0:	2100      	movs	r1, #0
 80024c2:	480d      	ldr	r0, [pc, #52]	; (80024f8 <MX_UART4_Init+0x90>)
 80024c4:	f00f fc49 	bl	8011d5a <HAL_UARTEx_SetTxFifoThreshold>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80024ce:	f000 fa2d 	bl	800292c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024d2:	2100      	movs	r1, #0
 80024d4:	4808      	ldr	r0, [pc, #32]	; (80024f8 <MX_UART4_Init+0x90>)
 80024d6:	f00f fc7e 	bl	8011dd6 <HAL_UARTEx_SetRxFifoThreshold>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80024e0:	f000 fa24 	bl	800292c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80024e4:	4804      	ldr	r0, [pc, #16]	; (80024f8 <MX_UART4_Init+0x90>)
 80024e6:	f00f fbff 	bl	8011ce8 <HAL_UARTEx_DisableFifoMode>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80024f0:	f000 fa1c 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80024f4:	bf00      	nop
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	240014a4 	.word	0x240014a4
 80024fc:	40004c00 	.word	0x40004c00

08002500 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002504:	4b22      	ldr	r3, [pc, #136]	; (8002590 <MX_USART6_UART_Init+0x90>)
 8002506:	4a23      	ldr	r2, [pc, #140]	; (8002594 <MX_USART6_UART_Init+0x94>)
 8002508:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800250a:	4b21      	ldr	r3, [pc, #132]	; (8002590 <MX_USART6_UART_Init+0x90>)
 800250c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002510:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002512:	4b1f      	ldr	r3, [pc, #124]	; (8002590 <MX_USART6_UART_Init+0x90>)
 8002514:	2200      	movs	r2, #0
 8002516:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002518:	4b1d      	ldr	r3, [pc, #116]	; (8002590 <MX_USART6_UART_Init+0x90>)
 800251a:	2200      	movs	r2, #0
 800251c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800251e:	4b1c      	ldr	r3, [pc, #112]	; (8002590 <MX_USART6_UART_Init+0x90>)
 8002520:	2200      	movs	r2, #0
 8002522:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002524:	4b1a      	ldr	r3, [pc, #104]	; (8002590 <MX_USART6_UART_Init+0x90>)
 8002526:	220c      	movs	r2, #12
 8002528:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800252a:	4b19      	ldr	r3, [pc, #100]	; (8002590 <MX_USART6_UART_Init+0x90>)
 800252c:	2200      	movs	r2, #0
 800252e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002530:	4b17      	ldr	r3, [pc, #92]	; (8002590 <MX_USART6_UART_Init+0x90>)
 8002532:	2200      	movs	r2, #0
 8002534:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002536:	4b16      	ldr	r3, [pc, #88]	; (8002590 <MX_USART6_UART_Init+0x90>)
 8002538:	2200      	movs	r2, #0
 800253a:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800253c:	4b14      	ldr	r3, [pc, #80]	; (8002590 <MX_USART6_UART_Init+0x90>)
 800253e:	2200      	movs	r2, #0
 8002540:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002542:	4b13      	ldr	r3, [pc, #76]	; (8002590 <MX_USART6_UART_Init+0x90>)
 8002544:	2200      	movs	r2, #0
 8002546:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002548:	4811      	ldr	r0, [pc, #68]	; (8002590 <MX_USART6_UART_Init+0x90>)
 800254a:	f00e faf7 	bl	8010b3c <HAL_UART_Init>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8002554:	f000 f9ea 	bl	800292c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002558:	2100      	movs	r1, #0
 800255a:	480d      	ldr	r0, [pc, #52]	; (8002590 <MX_USART6_UART_Init+0x90>)
 800255c:	f00f fbfd 	bl	8011d5a <HAL_UARTEx_SetTxFifoThreshold>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8002566:	f000 f9e1 	bl	800292c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800256a:	2100      	movs	r1, #0
 800256c:	4808      	ldr	r0, [pc, #32]	; (8002590 <MX_USART6_UART_Init+0x90>)
 800256e:	f00f fc32 	bl	8011dd6 <HAL_UARTEx_SetRxFifoThreshold>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8002578:	f000 f9d8 	bl	800292c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 800257c:	4804      	ldr	r0, [pc, #16]	; (8002590 <MX_USART6_UART_Init+0x90>)
 800257e:	f00f fbb3 	bl	8011ce8 <HAL_UARTEx_DisableFifoMode>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8002588:	f000 f9d0 	bl	800292c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800258c:	bf00      	nop
 800258e:	bd80      	pop	{r7, pc}
 8002590:	24001538 	.word	0x24001538
 8002594:	40011400 	.word	0x40011400

08002598 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800259e:	4b2d      	ldr	r3, [pc, #180]	; (8002654 <MX_DMA_Init+0xbc>)
 80025a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025a4:	4a2b      	ldr	r2, [pc, #172]	; (8002654 <MX_DMA_Init+0xbc>)
 80025a6:	f043 0301 	orr.w	r3, r3, #1
 80025aa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80025ae:	4b29      	ldr	r3, [pc, #164]	; (8002654 <MX_DMA_Init+0xbc>)
 80025b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	607b      	str	r3, [r7, #4]
 80025ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80025bc:	4b25      	ldr	r3, [pc, #148]	; (8002654 <MX_DMA_Init+0xbc>)
 80025be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025c2:	4a24      	ldr	r2, [pc, #144]	; (8002654 <MX_DMA_Init+0xbc>)
 80025c4:	f043 0302 	orr.w	r3, r3, #2
 80025c8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80025cc:	4b21      	ldr	r3, [pc, #132]	; (8002654 <MX_DMA_Init+0xbc>)
 80025ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	603b      	str	r3, [r7, #0]
 80025d8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80025da:	2200      	movs	r2, #0
 80025dc:	2100      	movs	r1, #0
 80025de:	200b      	movs	r0, #11
 80025e0:	f002 fec7 	bl	8005372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80025e4:	200b      	movs	r0, #11
 80025e6:	f002 fede 	bl	80053a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80025ea:	2200      	movs	r2, #0
 80025ec:	2100      	movs	r1, #0
 80025ee:	200c      	movs	r0, #12
 80025f0:	f002 febf 	bl	8005372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80025f4:	200c      	movs	r0, #12
 80025f6:	f002 fed6 	bl	80053a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80025fa:	2200      	movs	r2, #0
 80025fc:	2100      	movs	r1, #0
 80025fe:	200d      	movs	r0, #13
 8002600:	f002 feb7 	bl	8005372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002604:	200d      	movs	r0, #13
 8002606:	f002 fece 	bl	80053a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800260a:	2200      	movs	r2, #0
 800260c:	2100      	movs	r1, #0
 800260e:	200e      	movs	r0, #14
 8002610:	f002 feaf 	bl	8005372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002614:	200e      	movs	r0, #14
 8002616:	f002 fec6 	bl	80053a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800261a:	2200      	movs	r2, #0
 800261c:	2100      	movs	r1, #0
 800261e:	200f      	movs	r0, #15
 8002620:	f002 fea7 	bl	8005372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002624:	200f      	movs	r0, #15
 8002626:	f002 febe 	bl	80053a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800262a:	2200      	movs	r2, #0
 800262c:	2100      	movs	r1, #0
 800262e:	2010      	movs	r0, #16
 8002630:	f002 fe9f 	bl	8005372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002634:	2010      	movs	r0, #16
 8002636:	f002 feb6 	bl	80053a6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800263a:	2200      	movs	r2, #0
 800263c:	2100      	movs	r1, #0
 800263e:	2046      	movs	r0, #70	; 0x46
 8002640:	f002 fe97 	bl	8005372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002644:	2046      	movs	r0, #70	; 0x46
 8002646:	f002 feae 	bl	80053a6 <HAL_NVIC_EnableIRQ>

}
 800264a:	bf00      	nop
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	58024400 	.word	0x58024400

08002658 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b08c      	sub	sp, #48	; 0x30
 800265c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800265e:	f107 031c 	add.w	r3, r7, #28
 8002662:	2200      	movs	r2, #0
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	605a      	str	r2, [r3, #4]
 8002668:	609a      	str	r2, [r3, #8]
 800266a:	60da      	str	r2, [r3, #12]
 800266c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800266e:	4ba7      	ldr	r3, [pc, #668]	; (800290c <MX_GPIO_Init+0x2b4>)
 8002670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002674:	4aa5      	ldr	r2, [pc, #660]	; (800290c <MX_GPIO_Init+0x2b4>)
 8002676:	f043 0310 	orr.w	r3, r3, #16
 800267a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800267e:	4ba3      	ldr	r3, [pc, #652]	; (800290c <MX_GPIO_Init+0x2b4>)
 8002680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002684:	f003 0310 	and.w	r3, r3, #16
 8002688:	61bb      	str	r3, [r7, #24]
 800268a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800268c:	4b9f      	ldr	r3, [pc, #636]	; (800290c <MX_GPIO_Init+0x2b4>)
 800268e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002692:	4a9e      	ldr	r2, [pc, #632]	; (800290c <MX_GPIO_Init+0x2b4>)
 8002694:	f043 0320 	orr.w	r3, r3, #32
 8002698:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800269c:	4b9b      	ldr	r3, [pc, #620]	; (800290c <MX_GPIO_Init+0x2b4>)
 800269e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026a2:	f003 0320 	and.w	r3, r3, #32
 80026a6:	617b      	str	r3, [r7, #20]
 80026a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026aa:	4b98      	ldr	r3, [pc, #608]	; (800290c <MX_GPIO_Init+0x2b4>)
 80026ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026b0:	4a96      	ldr	r2, [pc, #600]	; (800290c <MX_GPIO_Init+0x2b4>)
 80026b2:	f043 0304 	orr.w	r3, r3, #4
 80026b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026ba:	4b94      	ldr	r3, [pc, #592]	; (800290c <MX_GPIO_Init+0x2b4>)
 80026bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	613b      	str	r3, [r7, #16]
 80026c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c8:	4b90      	ldr	r3, [pc, #576]	; (800290c <MX_GPIO_Init+0x2b4>)
 80026ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ce:	4a8f      	ldr	r2, [pc, #572]	; (800290c <MX_GPIO_Init+0x2b4>)
 80026d0:	f043 0301 	orr.w	r3, r3, #1
 80026d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026d8:	4b8c      	ldr	r3, [pc, #560]	; (800290c <MX_GPIO_Init+0x2b4>)
 80026da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026e6:	4b89      	ldr	r3, [pc, #548]	; (800290c <MX_GPIO_Init+0x2b4>)
 80026e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ec:	4a87      	ldr	r2, [pc, #540]	; (800290c <MX_GPIO_Init+0x2b4>)
 80026ee:	f043 0302 	orr.w	r3, r3, #2
 80026f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026f6:	4b85      	ldr	r3, [pc, #532]	; (800290c <MX_GPIO_Init+0x2b4>)
 80026f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	60bb      	str	r3, [r7, #8]
 8002702:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002704:	4b81      	ldr	r3, [pc, #516]	; (800290c <MX_GPIO_Init+0x2b4>)
 8002706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800270a:	4a80      	ldr	r2, [pc, #512]	; (800290c <MX_GPIO_Init+0x2b4>)
 800270c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002710:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002714:	4b7d      	ldr	r3, [pc, #500]	; (800290c <MX_GPIO_Init+0x2b4>)
 8002716:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800271a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800271e:	607b      	str	r3, [r7, #4]
 8002720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002722:	4b7a      	ldr	r3, [pc, #488]	; (800290c <MX_GPIO_Init+0x2b4>)
 8002724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002728:	4a78      	ldr	r2, [pc, #480]	; (800290c <MX_GPIO_Init+0x2b4>)
 800272a:	f043 0308 	orr.w	r3, r3, #8
 800272e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002732:	4b76      	ldr	r3, [pc, #472]	; (800290c <MX_GPIO_Init+0x2b4>)
 8002734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002738:	f003 0308 	and.w	r3, r3, #8
 800273c:	603b      	str	r3, [r7, #0]
 800273e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin, GPIO_PIN_RESET);
 8002740:	2200      	movs	r2, #0
 8002742:	f241 5104 	movw	r1, #5380	; 0x1504
 8002746:	4872      	ldr	r0, [pc, #456]	; (8002910 <MX_GPIO_Init+0x2b8>)
 8002748:	f005 fc40 	bl	8007fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARM1_Pin|ARM2_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 800274c:	2200      	movs	r2, #0
 800274e:	f248 0106 	movw	r1, #32774	; 0x8006
 8002752:	4870      	ldr	r0, [pc, #448]	; (8002914 <MX_GPIO_Init+0x2bc>)
 8002754:	f005 fc3a 	bl	8007fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8002758:	2200      	movs	r2, #0
 800275a:	2130      	movs	r1, #48	; 0x30
 800275c:	486e      	ldr	r0, [pc, #440]	; (8002918 <MX_GPIO_Init+0x2c0>)
 800275e:	f005 fc35 	bl	8007fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|PYRO1_Pin, GPIO_PIN_RESET);
 8002762:	2200      	movs	r2, #0
 8002764:	2103      	movs	r1, #3
 8002766:	486d      	ldr	r0, [pc, #436]	; (800291c <MX_GPIO_Init+0x2c4>)
 8002768:	f005 fc30 	bl	8007fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PYRO2_Pin|PYRO3_Pin|PYRO4_Pin, GPIO_PIN_RESET);
 800276c:	2200      	movs	r2, #0
 800276e:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8002772:	486b      	ldr	r0, [pc, #428]	; (8002920 <MX_GPIO_Init+0x2c8>)
 8002774:	f005 fc2a 	bl	8007fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8002778:	2200      	movs	r2, #0
 800277a:	210e      	movs	r1, #14
 800277c:	4869      	ldr	r0, [pc, #420]	; (8002924 <MX_GPIO_Init+0x2cc>)
 800277e:	f005 fc25 	bl	8007fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_SET);
 8002782:	2201      	movs	r2, #1
 8002784:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002788:	4867      	ldr	r0, [pc, #412]	; (8002928 <MX_GPIO_Init+0x2d0>)
 800278a:	f005 fc1f 	bl	8007fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 800278e:	2200      	movs	r2, #0
 8002790:	2101      	movs	r1, #1
 8002792:	4865      	ldr	r0, [pc, #404]	; (8002928 <MX_GPIO_Init+0x2d0>)
 8002794:	f005 fc1a 	bl	8007fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin;
 8002798:	f241 5304 	movw	r3, #5380	; 0x1504
 800279c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800279e:	2301      	movs	r3, #1
 80027a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a2:	2300      	movs	r3, #0
 80027a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a6:	2300      	movs	r3, #0
 80027a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027aa:	f107 031c 	add.w	r3, r7, #28
 80027ae:	4619      	mov	r1, r3
 80027b0:	4857      	ldr	r0, [pc, #348]	; (8002910 <MX_GPIO_Init+0x2b8>)
 80027b2:	f005 fa4b 	bl	8007c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARM1_Pin ARM2_Pin PA15 */
  GPIO_InitStruct.Pin = ARM1_Pin|ARM2_Pin|GPIO_PIN_15;
 80027b6:	f248 0306 	movw	r3, #32774	; 0x8006
 80027ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027bc:	2301      	movs	r3, #1
 80027be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c0:	2300      	movs	r3, #0
 80027c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027c4:	2300      	movs	r3, #0
 80027c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c8:	f107 031c 	add.w	r3, r7, #28
 80027cc:	4619      	mov	r1, r3
 80027ce:	4851      	ldr	r0, [pc, #324]	; (8002914 <MX_GPIO_Init+0x2bc>)
 80027d0:	f005 fa3c 	bl	8007c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80027d4:	2330      	movs	r3, #48	; 0x30
 80027d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027d8:	2301      	movs	r3, #1
 80027da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027dc:	2300      	movs	r3, #0
 80027de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e0:	2300      	movs	r3, #0
 80027e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027e4:	f107 031c 	add.w	r3, r7, #28
 80027e8:	4619      	mov	r1, r3
 80027ea:	484b      	ldr	r0, [pc, #300]	; (8002918 <MX_GPIO_Init+0x2c0>)
 80027ec:	f005 fa2e 	bl	8007c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PYRO1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|PYRO1_Pin;
 80027f0:	2303      	movs	r3, #3
 80027f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027f4:	2301      	movs	r3, #1
 80027f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fc:	2300      	movs	r3, #0
 80027fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002800:	f107 031c 	add.w	r3, r7, #28
 8002804:	4619      	mov	r1, r3
 8002806:	4845      	ldr	r0, [pc, #276]	; (800291c <MX_GPIO_Init+0x2c4>)
 8002808:	f005 fa20 	bl	8007c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT1_Pin */
  GPIO_InitStruct.Pin = CONT1_Pin;
 800280c:	2304      	movs	r3, #4
 800280e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002810:	2300      	movs	r3, #0
 8002812:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002814:	2301      	movs	r3, #1
 8002816:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 8002818:	f107 031c 	add.w	r3, r7, #28
 800281c:	4619      	mov	r1, r3
 800281e:	483f      	ldr	r0, [pc, #252]	; (800291c <MX_GPIO_Init+0x2c4>)
 8002820:	f005 fa14 	bl	8007c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
  GPIO_InitStruct.Pin = PYRO2_Pin|PYRO3_Pin|PYRO4_Pin;
 8002824:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8002828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800282a:	2301      	movs	r3, #1
 800282c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282e:	2300      	movs	r3, #0
 8002830:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002832:	2300      	movs	r3, #0
 8002834:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002836:	f107 031c 	add.w	r3, r7, #28
 800283a:	4619      	mov	r1, r3
 800283c:	4838      	ldr	r0, [pc, #224]	; (8002920 <MX_GPIO_Init+0x2c8>)
 800283e:	f005 fa05 	bl	8007c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT2_Pin CONT3_Pin */
  GPIO_InitStruct.Pin = CONT2_Pin|CONT3_Pin;
 8002842:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002848:	2300      	movs	r3, #0
 800284a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800284c:	2301      	movs	r3, #1
 800284e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002850:	f107 031c 	add.w	r3, r7, #28
 8002854:	4619      	mov	r1, r3
 8002856:	4832      	ldr	r0, [pc, #200]	; (8002920 <MX_GPIO_Init+0x2c8>)
 8002858:	f005 f9f8 	bl	8007c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT4_Pin */
  GPIO_InitStruct.Pin = CONT4_Pin;
 800285c:	2301      	movs	r3, #1
 800285e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002860:	2300      	movs	r3, #0
 8002862:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002864:	2301      	movs	r3, #1
 8002866:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 8002868:	f107 031c 	add.w	r3, r7, #28
 800286c:	4619      	mov	r1, r3
 800286e:	482d      	ldr	r0, [pc, #180]	; (8002924 <MX_GPIO_Init+0x2cc>)
 8002870:	f005 f9ec 	bl	8007c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
  GPIO_InitStruct.Pin = PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3;
 8002874:	230e      	movs	r3, #14
 8002876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002878:	2301      	movs	r3, #1
 800287a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287c:	2300      	movs	r3, #0
 800287e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002880:	2300      	movs	r3, #0
 8002882:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002884:	f107 031c 	add.w	r3, r7, #28
 8002888:	4619      	mov	r1, r3
 800288a:	4826      	ldr	r0, [pc, #152]	; (8002924 <MX_GPIO_Init+0x2cc>)
 800288c:	f005 f9de 	bl	8007c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
  GPIO_InitStruct.Pin = CONT5_Pin|CONT6_Pin|CONT7_Pin|CONT8_Pin;
 8002890:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 8002894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002896:	2300      	movs	r3, #0
 8002898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800289a:	2301      	movs	r3, #1
 800289c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800289e:	f107 031c 	add.w	r3, r7, #28
 80028a2:	4619      	mov	r1, r3
 80028a4:	481a      	ldr	r0, [pc, #104]	; (8002910 <MX_GPIO_Init+0x2b8>)
 80028a6:	f005 f9d1 	bl	8007c4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0;
 80028aa:	f240 7301 	movw	r3, #1793	; 0x701
 80028ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028b0:	2301      	movs	r3, #1
 80028b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b8:	2300      	movs	r3, #0
 80028ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028bc:	f107 031c 	add.w	r3, r7, #28
 80028c0:	4619      	mov	r1, r3
 80028c2:	4819      	ldr	r0, [pc, #100]	; (8002928 <MX_GPIO_Init+0x2d0>)
 80028c4:	f005 f9c2 	bl	8007c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_ARM_CHECK_Pin */
  GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 80028c8:	2310      	movs	r3, #16
 80028ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028cc:	2300      	movs	r3, #0
 80028ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 80028d4:	f107 031c 	add.w	r3, r7, #28
 80028d8:	4619      	mov	r1, r3
 80028da:	4812      	ldr	r0, [pc, #72]	; (8002924 <MX_GPIO_Init+0x2cc>)
 80028dc:	f005 f9b6 	bl	8007c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80028e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e6:	2302      	movs	r3, #2
 80028e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ea:	2300      	movs	r3, #0
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ee:	2300      	movs	r3, #0
 80028f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80028f2:	2300      	movs	r3, #0
 80028f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f6:	f107 031c 	add.w	r3, r7, #28
 80028fa:	4619      	mov	r1, r3
 80028fc:	4805      	ldr	r0, [pc, #20]	; (8002914 <MX_GPIO_Init+0x2bc>)
 80028fe:	f005 f9a5 	bl	8007c4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002902:	bf00      	nop
 8002904:	3730      	adds	r7, #48	; 0x30
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	58024400 	.word	0x58024400
 8002910:	58021000 	.word	0x58021000
 8002914:	58020000 	.word	0x58020000
 8002918:	58020800 	.word	0x58020800
 800291c:	58020400 	.word	0x58020400
 8002920:	58021400 	.word	0x58021400
 8002924:	58021800 	.word	0x58021800
 8002928:	58020c00 	.word	0x58020c00

0800292c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002930:	b672      	cpsid	i
}
 8002932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002934:	e7fe      	b.n	8002934 <Error_Handler+0x8>
	...

08002938 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800293e:	4b0a      	ldr	r3, [pc, #40]	; (8002968 <HAL_MspInit+0x30>)
 8002940:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002944:	4a08      	ldr	r2, [pc, #32]	; (8002968 <HAL_MspInit+0x30>)
 8002946:	f043 0302 	orr.w	r3, r3, #2
 800294a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800294e:	4b06      	ldr	r3, [pc, #24]	; (8002968 <HAL_MspInit+0x30>)
 8002950:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	607b      	str	r3, [r7, #4]
 800295a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	58024400 	.word	0x58024400

0800296c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08c      	sub	sp, #48	; 0x30
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002974:	f107 031c 	add.w	r3, r7, #28
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
 800297c:	605a      	str	r2, [r3, #4]
 800297e:	609a      	str	r2, [r3, #8]
 8002980:	60da      	str	r2, [r3, #12]
 8002982:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a5d      	ldr	r2, [pc, #372]	; (8002b00 <HAL_ADC_MspInit+0x194>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d159      	bne.n	8002a42 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800298e:	4b5d      	ldr	r3, [pc, #372]	; (8002b04 <HAL_ADC_MspInit+0x198>)
 8002990:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002994:	4a5b      	ldr	r2, [pc, #364]	; (8002b04 <HAL_ADC_MspInit+0x198>)
 8002996:	f043 0320 	orr.w	r3, r3, #32
 800299a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800299e:	4b59      	ldr	r3, [pc, #356]	; (8002b04 <HAL_ADC_MspInit+0x198>)
 80029a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80029a4:	f003 0320 	and.w	r3, r3, #32
 80029a8:	61bb      	str	r3, [r7, #24]
 80029aa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ac:	4b55      	ldr	r3, [pc, #340]	; (8002b04 <HAL_ADC_MspInit+0x198>)
 80029ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029b2:	4a54      	ldr	r2, [pc, #336]	; (8002b04 <HAL_ADC_MspInit+0x198>)
 80029b4:	f043 0304 	orr.w	r3, r3, #4
 80029b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029bc:	4b51      	ldr	r3, [pc, #324]	; (8002b04 <HAL_ADC_MspInit+0x198>)
 80029be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029c2:	f003 0304 	and.w	r3, r3, #4
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = ARM_CHECK_Pin;
 80029ca:	2301      	movs	r3, #1
 80029cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029ce:	2303      	movs	r3, #3
 80029d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d2:	2300      	movs	r3, #0
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 80029d6:	f107 031c 	add.w	r3, r7, #28
 80029da:	4619      	mov	r1, r3
 80029dc:	484a      	ldr	r0, [pc, #296]	; (8002b08 <HAL_ADC_MspInit+0x19c>)
 80029de:	f005 f935 	bl	8007c4c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 80029e2:	4b4a      	ldr	r3, [pc, #296]	; (8002b0c <HAL_ADC_MspInit+0x1a0>)
 80029e4:	4a4a      	ldr	r2, [pc, #296]	; (8002b10 <HAL_ADC_MspInit+0x1a4>)
 80029e6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80029e8:	4b48      	ldr	r3, [pc, #288]	; (8002b0c <HAL_ADC_MspInit+0x1a0>)
 80029ea:	2209      	movs	r2, #9
 80029ec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029ee:	4b47      	ldr	r3, [pc, #284]	; (8002b0c <HAL_ADC_MspInit+0x1a0>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80029f4:	4b45      	ldr	r3, [pc, #276]	; (8002b0c <HAL_ADC_MspInit+0x1a0>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80029fa:	4b44      	ldr	r3, [pc, #272]	; (8002b0c <HAL_ADC_MspInit+0x1a0>)
 80029fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a00:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a02:	4b42      	ldr	r3, [pc, #264]	; (8002b0c <HAL_ADC_MspInit+0x1a0>)
 8002a04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a08:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a0a:	4b40      	ldr	r3, [pc, #256]	; (8002b0c <HAL_ADC_MspInit+0x1a0>)
 8002a0c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a10:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002a12:	4b3e      	ldr	r3, [pc, #248]	; (8002b0c <HAL_ADC_MspInit+0x1a0>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002a18:	4b3c      	ldr	r3, [pc, #240]	; (8002b0c <HAL_ADC_MspInit+0x1a0>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a1e:	4b3b      	ldr	r3, [pc, #236]	; (8002b0c <HAL_ADC_MspInit+0x1a0>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002a24:	4839      	ldr	r0, [pc, #228]	; (8002b0c <HAL_ADC_MspInit+0x1a0>)
 8002a26:	f002 fcd9 	bl	80053dc <HAL_DMA_Init>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002a30:	f7ff ff7c 	bl	800292c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a35      	ldr	r2, [pc, #212]	; (8002b0c <HAL_ADC_MspInit+0x1a0>)
 8002a38:	659a      	str	r2, [r3, #88]	; 0x58
 8002a3a:	4a34      	ldr	r2, [pc, #208]	; (8002b0c <HAL_ADC_MspInit+0x1a0>)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002a40:	e059      	b.n	8002af6 <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a33      	ldr	r2, [pc, #204]	; (8002b14 <HAL_ADC_MspInit+0x1a8>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d154      	bne.n	8002af6 <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002a4c:	4b2d      	ldr	r3, [pc, #180]	; (8002b04 <HAL_ADC_MspInit+0x198>)
 8002a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a52:	4a2c      	ldr	r2, [pc, #176]	; (8002b04 <HAL_ADC_MspInit+0x198>)
 8002a54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a5c:	4b29      	ldr	r3, [pc, #164]	; (8002b04 <HAL_ADC_MspInit+0x198>)
 8002a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a66:	613b      	str	r3, [r7, #16]
 8002a68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a6a:	4b26      	ldr	r3, [pc, #152]	; (8002b04 <HAL_ADC_MspInit+0x198>)
 8002a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a70:	4a24      	ldr	r2, [pc, #144]	; (8002b04 <HAL_ADC_MspInit+0x198>)
 8002a72:	f043 0304 	orr.w	r3, r3, #4
 8002a76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a7a:	4b22      	ldr	r3, [pc, #136]	; (8002b04 <HAL_ADC_MspInit+0x198>)
 8002a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002a88:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002a8c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002a90:	f001 f80e 	bl	8003ab0 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 8002a94:	4b20      	ldr	r3, [pc, #128]	; (8002b18 <HAL_ADC_MspInit+0x1ac>)
 8002a96:	4a21      	ldr	r2, [pc, #132]	; (8002b1c <HAL_ADC_MspInit+0x1b0>)
 8002a98:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002a9a:	4b1f      	ldr	r3, [pc, #124]	; (8002b18 <HAL_ADC_MspInit+0x1ac>)
 8002a9c:	2273      	movs	r2, #115	; 0x73
 8002a9e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002aa0:	4b1d      	ldr	r3, [pc, #116]	; (8002b18 <HAL_ADC_MspInit+0x1ac>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aa6:	4b1c      	ldr	r3, [pc, #112]	; (8002b18 <HAL_ADC_MspInit+0x1ac>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002aac:	4b1a      	ldr	r3, [pc, #104]	; (8002b18 <HAL_ADC_MspInit+0x1ac>)
 8002aae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ab2:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ab4:	4b18      	ldr	r3, [pc, #96]	; (8002b18 <HAL_ADC_MspInit+0x1ac>)
 8002ab6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002aba:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002abc:	4b16      	ldr	r3, [pc, #88]	; (8002b18 <HAL_ADC_MspInit+0x1ac>)
 8002abe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ac2:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002ac4:	4b14      	ldr	r3, [pc, #80]	; (8002b18 <HAL_ADC_MspInit+0x1ac>)
 8002ac6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002aca:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002acc:	4b12      	ldr	r3, [pc, #72]	; (8002b18 <HAL_ADC_MspInit+0x1ac>)
 8002ace:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ad2:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ad4:	4b10      	ldr	r3, [pc, #64]	; (8002b18 <HAL_ADC_MspInit+0x1ac>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002ada:	480f      	ldr	r0, [pc, #60]	; (8002b18 <HAL_ADC_MspInit+0x1ac>)
 8002adc:	f002 fc7e 	bl	80053dc <HAL_DMA_Init>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 8002ae6:	f7ff ff21 	bl	800292c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a0a      	ldr	r2, [pc, #40]	; (8002b18 <HAL_ADC_MspInit+0x1ac>)
 8002aee:	659a      	str	r2, [r3, #88]	; 0x58
 8002af0:	4a09      	ldr	r2, [pc, #36]	; (8002b18 <HAL_ADC_MspInit+0x1ac>)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002af6:	bf00      	nop
 8002af8:	3730      	adds	r7, #48	; 0x30
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	40022000 	.word	0x40022000
 8002b04:	58024400 	.word	0x58024400
 8002b08:	58020800 	.word	0x58020800
 8002b0c:	24000cd8 	.word	0x24000cd8
 8002b10:	40020088 	.word	0x40020088
 8002b14:	58026000 	.word	0x58026000
 8002b18:	24000d50 	.word	0x24000d50
 8002b1c:	400204b8 	.word	0x400204b8

08002b20 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b0b8      	sub	sp, #224	; 0xe0
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b28:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	605a      	str	r2, [r3, #4]
 8002b32:	609a      	str	r2, [r3, #8]
 8002b34:	60da      	str	r2, [r3, #12]
 8002b36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b38:	f107 0310 	add.w	r3, r7, #16
 8002b3c:	22b8      	movs	r2, #184	; 0xb8
 8002b3e:	2100      	movs	r1, #0
 8002b40:	4618      	mov	r0, r3
 8002b42:	f014 fad9 	bl	80170f8 <memset>
  if(hfdcan->Instance==FDCAN3)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a26      	ldr	r2, [pc, #152]	; (8002be4 <HAL_FDCAN_MspInit+0xc4>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d145      	bne.n	8002bdc <HAL_FDCAN_MspInit+0xbc>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002b50:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002b54:	f04f 0300 	mov.w	r3, #0
 8002b58:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002b5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002b60:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b62:	f107 0310 	add.w	r3, r7, #16
 8002b66:	4618      	mov	r0, r3
 8002b68:	f007 fe5e 	bl	800a828 <HAL_RCCEx_PeriphCLKConfig>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8002b72:	f7ff fedb 	bl	800292c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002b76:	4b1c      	ldr	r3, [pc, #112]	; (8002be8 <HAL_FDCAN_MspInit+0xc8>)
 8002b78:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002b7c:	4a1a      	ldr	r2, [pc, #104]	; (8002be8 <HAL_FDCAN_MspInit+0xc8>)
 8002b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b82:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002b86:	4b18      	ldr	r3, [pc, #96]	; (8002be8 <HAL_FDCAN_MspInit+0xc8>)
 8002b88:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b94:	4b14      	ldr	r3, [pc, #80]	; (8002be8 <HAL_FDCAN_MspInit+0xc8>)
 8002b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b9a:	4a13      	ldr	r2, [pc, #76]	; (8002be8 <HAL_FDCAN_MspInit+0xc8>)
 8002b9c:	f043 0320 	orr.w	r3, r3, #32
 8002ba0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ba4:	4b10      	ldr	r3, [pc, #64]	; (8002be8 <HAL_FDCAN_MspInit+0xc8>)
 8002ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002baa:	f003 0320 	and.w	r3, r3, #32
 8002bae:	60bb      	str	r3, [r7, #8]
 8002bb0:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002bb2:	23c0      	movs	r3, #192	; 0xc0
 8002bb4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb8:	2302      	movs	r3, #2
 8002bba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8002bca:	2302      	movs	r3, #2
 8002bcc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002bd0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4805      	ldr	r0, [pc, #20]	; (8002bec <HAL_FDCAN_MspInit+0xcc>)
 8002bd8:	f005 f838 	bl	8007c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8002bdc:	bf00      	nop
 8002bde:	37e0      	adds	r7, #224	; 0xe0
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	4000d400 	.word	0x4000d400
 8002be8:	58024400 	.word	0x58024400
 8002bec:	58021400 	.word	0x58021400

08002bf0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b0b8      	sub	sp, #224	; 0xe0
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	605a      	str	r2, [r3, #4]
 8002c02:	609a      	str	r2, [r3, #8]
 8002c04:	60da      	str	r2, [r3, #12]
 8002c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c08:	f107 0310 	add.w	r3, r7, #16
 8002c0c:	22b8      	movs	r2, #184	; 0xb8
 8002c0e:	2100      	movs	r1, #0
 8002c10:	4618      	mov	r0, r3
 8002c12:	f014 fa71 	bl	80170f8 <memset>
  if(hi2c->Instance==I2C2)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a2a      	ldr	r2, [pc, #168]	; (8002cc4 <HAL_I2C_MspInit+0xd4>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d14d      	bne.n	8002cbc <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002c20:	f04f 0208 	mov.w	r2, #8
 8002c24:	f04f 0300 	mov.w	r3, #0
 8002c28:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c32:	f107 0310 	add.w	r3, r7, #16
 8002c36:	4618      	mov	r0, r3
 8002c38:	f007 fdf6 	bl	800a828 <HAL_RCCEx_PeriphCLKConfig>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002c42:	f7ff fe73 	bl	800292c <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c46:	4b20      	ldr	r3, [pc, #128]	; (8002cc8 <HAL_I2C_MspInit+0xd8>)
 8002c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c4c:	4a1e      	ldr	r2, [pc, #120]	; (8002cc8 <HAL_I2C_MspInit+0xd8>)
 8002c4e:	f043 0320 	orr.w	r3, r3, #32
 8002c52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c56:	4b1c      	ldr	r3, [pc, #112]	; (8002cc8 <HAL_I2C_MspInit+0xd8>)
 8002c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c5c:	f003 0320 	and.w	r3, r3, #32
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c64:	2303      	movs	r3, #3
 8002c66:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c6a:	2312      	movs	r3, #18
 8002c6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c70:	2300      	movs	r3, #0
 8002c72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c76:	2300      	movs	r3, #0
 8002c78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002c7c:	2304      	movs	r3, #4
 8002c7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c82:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c86:	4619      	mov	r1, r3
 8002c88:	4810      	ldr	r0, [pc, #64]	; (8002ccc <HAL_I2C_MspInit+0xdc>)
 8002c8a:	f004 ffdf 	bl	8007c4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002c8e:	4b0e      	ldr	r3, [pc, #56]	; (8002cc8 <HAL_I2C_MspInit+0xd8>)
 8002c90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c94:	4a0c      	ldr	r2, [pc, #48]	; (8002cc8 <HAL_I2C_MspInit+0xd8>)
 8002c96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c9a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c9e:	4b0a      	ldr	r3, [pc, #40]	; (8002cc8 <HAL_I2C_MspInit+0xd8>)
 8002ca0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ca4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca8:	60bb      	str	r3, [r7, #8]
 8002caa:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8002cac:	2200      	movs	r2, #0
 8002cae:	2101      	movs	r1, #1
 8002cb0:	2021      	movs	r0, #33	; 0x21
 8002cb2:	f002 fb5e 	bl	8005372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002cb6:	2021      	movs	r0, #33	; 0x21
 8002cb8:	f002 fb75 	bl	80053a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002cbc:	bf00      	nop
 8002cbe:	37e0      	adds	r7, #224	; 0xe0
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40005800 	.word	0x40005800
 8002cc8:	58024400 	.word	0x58024400
 8002ccc:	58021400 	.word	0x58021400

08002cd0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b0ba      	sub	sp, #232	; 0xe8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	605a      	str	r2, [r3, #4]
 8002ce2:	609a      	str	r2, [r3, #8]
 8002ce4:	60da      	str	r2, [r3, #12]
 8002ce6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ce8:	f107 0318 	add.w	r3, r7, #24
 8002cec:	22b8      	movs	r2, #184	; 0xb8
 8002cee:	2100      	movs	r1, #0
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f014 fa01 	bl	80170f8 <memset>
  if(hsd->Instance==SDMMC2)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a5d      	ldr	r2, [pc, #372]	; (8002e70 <HAL_SD_MspInit+0x1a0>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	f040 80b3 	bne.w	8002e68 <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002d02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d06:	f04f 0300 	mov.w	r3, #0
 8002d0a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d12:	f107 0318 	add.w	r3, r7, #24
 8002d16:	4618      	mov	r0, r3
 8002d18:	f007 fd86 	bl	800a828 <HAL_RCCEx_PeriphCLKConfig>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8002d22:	f7ff fe03 	bl	800292c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8002d26:	4b53      	ldr	r3, [pc, #332]	; (8002e74 <HAL_SD_MspInit+0x1a4>)
 8002d28:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002d2c:	4a51      	ldr	r2, [pc, #324]	; (8002e74 <HAL_SD_MspInit+0x1a4>)
 8002d2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d32:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002d36:	4b4f      	ldr	r3, [pc, #316]	; (8002e74 <HAL_SD_MspInit+0x1a4>)
 8002d38:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002d3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d40:	617b      	str	r3, [r7, #20]
 8002d42:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d44:	4b4b      	ldr	r3, [pc, #300]	; (8002e74 <HAL_SD_MspInit+0x1a4>)
 8002d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d4a:	4a4a      	ldr	r2, [pc, #296]	; (8002e74 <HAL_SD_MspInit+0x1a4>)
 8002d4c:	f043 0308 	orr.w	r3, r3, #8
 8002d50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d54:	4b47      	ldr	r3, [pc, #284]	; (8002e74 <HAL_SD_MspInit+0x1a4>)
 8002d56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d5a:	f003 0308 	and.w	r3, r3, #8
 8002d5e:	613b      	str	r3, [r7, #16]
 8002d60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d62:	4b44      	ldr	r3, [pc, #272]	; (8002e74 <HAL_SD_MspInit+0x1a4>)
 8002d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d68:	4a42      	ldr	r2, [pc, #264]	; (8002e74 <HAL_SD_MspInit+0x1a4>)
 8002d6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d72:	4b40      	ldr	r3, [pc, #256]	; (8002e74 <HAL_SD_MspInit+0x1a4>)
 8002d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7c:	60fb      	str	r3, [r7, #12]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d80:	2340      	movs	r3, #64	; 0x40
 8002d82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d86:	2302      	movs	r3, #2
 8002d88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d92:	2303      	movs	r3, #3
 8002d94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002d98:	230b      	movs	r3, #11
 8002d9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d9e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002da2:	4619      	mov	r1, r3
 8002da4:	4834      	ldr	r0, [pc, #208]	; (8002e78 <HAL_SD_MspInit+0x1a8>)
 8002da6:	f004 ff51 	bl	8007c4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002daa:	2380      	movs	r3, #128	; 0x80
 8002dac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db0:	2302      	movs	r3, #2
 8002db2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002db6:	2301      	movs	r3, #1
 8002db8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002dc2:	230b      	movs	r3, #11
 8002dc4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dc8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002dcc:	4619      	mov	r1, r3
 8002dce:	482a      	ldr	r0, [pc, #168]	; (8002e78 <HAL_SD_MspInit+0x1a8>)
 8002dd0:	f004 ff3c 	bl	8007c4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002dd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dd8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ddc:	2302      	movs	r3, #2
 8002dde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002de2:	2301      	movs	r3, #1
 8002de4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de8:	2303      	movs	r3, #3
 8002dea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002dee:	230b      	movs	r3, #11
 8002df0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002df4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4820      	ldr	r0, [pc, #128]	; (8002e7c <HAL_SD_MspInit+0x1ac>)
 8002dfc:	f004 ff26 	bl	8007c4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002e00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e04:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e08:	2302      	movs	r3, #2
 8002e0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e14:	2303      	movs	r3, #3
 8002e16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002e1a:	230b      	movs	r3, #11
 8002e1c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e20:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002e24:	4619      	mov	r1, r3
 8002e26:	4815      	ldr	r0, [pc, #84]	; (8002e7c <HAL_SD_MspInit+0x1ac>)
 8002e28:	f004 ff10 	bl	8007c4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002e2c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002e30:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e34:	2302      	movs	r3, #2
 8002e36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e40:	2303      	movs	r3, #3
 8002e42:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8002e46:	230a      	movs	r3, #10
 8002e48:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e4c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002e50:	4619      	mov	r1, r3
 8002e52:	480a      	ldr	r0, [pc, #40]	; (8002e7c <HAL_SD_MspInit+0x1ac>)
 8002e54:	f004 fefa 	bl	8007c4c <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8002e58:	2200      	movs	r2, #0
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	207c      	movs	r0, #124	; 0x7c
 8002e5e:	f002 fa88 	bl	8005372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8002e62:	207c      	movs	r0, #124	; 0x7c
 8002e64:	f002 fa9f 	bl	80053a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8002e68:	bf00      	nop
 8002e6a:	37e8      	adds	r7, #232	; 0xe8
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	48022400 	.word	0x48022400
 8002e74:	58024400 	.word	0x58024400
 8002e78:	58020c00 	.word	0x58020c00
 8002e7c:	58021800 	.word	0x58021800

08002e80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b08e      	sub	sp, #56	; 0x38
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	605a      	str	r2, [r3, #4]
 8002e92:	609a      	str	r2, [r3, #8]
 8002e94:	60da      	str	r2, [r3, #12]
 8002e96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a4f      	ldr	r2, [pc, #316]	; (8002fdc <HAL_SPI_MspInit+0x15c>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d12e      	bne.n	8002f00 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ea2:	4b4f      	ldr	r3, [pc, #316]	; (8002fe0 <HAL_SPI_MspInit+0x160>)
 8002ea4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002ea8:	4a4d      	ldr	r2, [pc, #308]	; (8002fe0 <HAL_SPI_MspInit+0x160>)
 8002eaa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002eae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002eb2:	4b4b      	ldr	r3, [pc, #300]	; (8002fe0 <HAL_SPI_MspInit+0x160>)
 8002eb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002eb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ebc:	623b      	str	r3, [r7, #32]
 8002ebe:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ec0:	4b47      	ldr	r3, [pc, #284]	; (8002fe0 <HAL_SPI_MspInit+0x160>)
 8002ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ec6:	4a46      	ldr	r2, [pc, #280]	; (8002fe0 <HAL_SPI_MspInit+0x160>)
 8002ec8:	f043 0301 	orr.w	r3, r3, #1
 8002ecc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ed0:	4b43      	ldr	r3, [pc, #268]	; (8002fe0 <HAL_SPI_MspInit+0x160>)
 8002ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	61fb      	str	r3, [r7, #28]
 8002edc:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002ede:	23e0      	movs	r3, #224	; 0xe0
 8002ee0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eea:	2300      	movs	r3, #0
 8002eec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002eee:	2305      	movs	r3, #5
 8002ef0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ef2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	483a      	ldr	r0, [pc, #232]	; (8002fe4 <HAL_SPI_MspInit+0x164>)
 8002efa:	f004 fea7 	bl	8007c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002efe:	e068      	b.n	8002fd2 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a38      	ldr	r2, [pc, #224]	; (8002fe8 <HAL_SPI_MspInit+0x168>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d12f      	bne.n	8002f6a <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002f0a:	4b35      	ldr	r3, [pc, #212]	; (8002fe0 <HAL_SPI_MspInit+0x160>)
 8002f0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f10:	4a33      	ldr	r2, [pc, #204]	; (8002fe0 <HAL_SPI_MspInit+0x160>)
 8002f12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f16:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f1a:	4b31      	ldr	r3, [pc, #196]	; (8002fe0 <HAL_SPI_MspInit+0x160>)
 8002f1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f24:	61bb      	str	r3, [r7, #24]
 8002f26:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f28:	4b2d      	ldr	r3, [pc, #180]	; (8002fe0 <HAL_SPI_MspInit+0x160>)
 8002f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f2e:	4a2c      	ldr	r2, [pc, #176]	; (8002fe0 <HAL_SPI_MspInit+0x160>)
 8002f30:	f043 0302 	orr.w	r3, r3, #2
 8002f34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f38:	4b29      	ldr	r3, [pc, #164]	; (8002fe0 <HAL_SPI_MspInit+0x160>)
 8002f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	617b      	str	r3, [r7, #20]
 8002f44:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002f46:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002f4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f50:	2300      	movs	r3, #0
 8002f52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f54:	2300      	movs	r3, #0
 8002f56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f58:	2305      	movs	r3, #5
 8002f5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f60:	4619      	mov	r1, r3
 8002f62:	4822      	ldr	r0, [pc, #136]	; (8002fec <HAL_SPI_MspInit+0x16c>)
 8002f64:	f004 fe72 	bl	8007c4c <HAL_GPIO_Init>
}
 8002f68:	e033      	b.n	8002fd2 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a20      	ldr	r2, [pc, #128]	; (8002ff0 <HAL_SPI_MspInit+0x170>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d12e      	bne.n	8002fd2 <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002f74:	4b1a      	ldr	r3, [pc, #104]	; (8002fe0 <HAL_SPI_MspInit+0x160>)
 8002f76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f7a:	4a19      	ldr	r2, [pc, #100]	; (8002fe0 <HAL_SPI_MspInit+0x160>)
 8002f7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f80:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f84:	4b16      	ldr	r3, [pc, #88]	; (8002fe0 <HAL_SPI_MspInit+0x160>)
 8002f86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f8e:	613b      	str	r3, [r7, #16]
 8002f90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f92:	4b13      	ldr	r3, [pc, #76]	; (8002fe0 <HAL_SPI_MspInit+0x160>)
 8002f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f98:	4a11      	ldr	r2, [pc, #68]	; (8002fe0 <HAL_SPI_MspInit+0x160>)
 8002f9a:	f043 0304 	orr.w	r3, r3, #4
 8002f9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fa2:	4b0f      	ldr	r3, [pc, #60]	; (8002fe0 <HAL_SPI_MspInit+0x160>)
 8002fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	60fb      	str	r3, [r7, #12]
 8002fae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002fb0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002fb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002fc2:	2306      	movs	r3, #6
 8002fc4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fca:	4619      	mov	r1, r3
 8002fcc:	4809      	ldr	r0, [pc, #36]	; (8002ff4 <HAL_SPI_MspInit+0x174>)
 8002fce:	f004 fe3d 	bl	8007c4c <HAL_GPIO_Init>
}
 8002fd2:	bf00      	nop
 8002fd4:	3738      	adds	r7, #56	; 0x38
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	40013000 	.word	0x40013000
 8002fe0:	58024400 	.word	0x58024400
 8002fe4:	58020000 	.word	0x58020000
 8002fe8:	40003800 	.word	0x40003800
 8002fec:	58020400 	.word	0x58020400
 8002ff0:	40003c00 	.word	0x40003c00
 8002ff4:	58020800 	.word	0x58020800

08002ff8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08c      	sub	sp, #48	; 0x30
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003000:	f107 031c 	add.w	r3, r7, #28
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	605a      	str	r2, [r3, #4]
 800300a:	609a      	str	r2, [r3, #8]
 800300c:	60da      	str	r2, [r3, #12]
 800300e:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003018:	d15d      	bne.n	80030d6 <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800301a:	4b8e      	ldr	r3, [pc, #568]	; (8003254 <HAL_TIM_PWM_MspInit+0x25c>)
 800301c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003020:	4a8c      	ldr	r2, [pc, #560]	; (8003254 <HAL_TIM_PWM_MspInit+0x25c>)
 8003022:	f043 0301 	orr.w	r3, r3, #1
 8003026:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800302a:	4b8a      	ldr	r3, [pc, #552]	; (8003254 <HAL_TIM_PWM_MspInit+0x25c>)
 800302c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	61bb      	str	r3, [r7, #24]
 8003036:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003038:	4b86      	ldr	r3, [pc, #536]	; (8003254 <HAL_TIM_PWM_MspInit+0x25c>)
 800303a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800303e:	4a85      	ldr	r2, [pc, #532]	; (8003254 <HAL_TIM_PWM_MspInit+0x25c>)
 8003040:	f043 0301 	orr.w	r3, r3, #1
 8003044:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003048:	4b82      	ldr	r3, [pc, #520]	; (8003254 <HAL_TIM_PWM_MspInit+0x25c>)
 800304a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	617b      	str	r3, [r7, #20]
 8003054:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003056:	2301      	movs	r3, #1
 8003058:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305a:	2302      	movs	r3, #2
 800305c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305e:	2300      	movs	r3, #0
 8003060:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003062:	2300      	movs	r3, #0
 8003064:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003066:	2301      	movs	r3, #1
 8003068:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800306a:	f107 031c 	add.w	r3, r7, #28
 800306e:	4619      	mov	r1, r3
 8003070:	4879      	ldr	r0, [pc, #484]	; (8003258 <HAL_TIM_PWM_MspInit+0x260>)
 8003072:	f004 fdeb 	bl	8007c4c <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 8003076:	4b79      	ldr	r3, [pc, #484]	; (800325c <HAL_TIM_PWM_MspInit+0x264>)
 8003078:	4a79      	ldr	r2, [pc, #484]	; (8003260 <HAL_TIM_PWM_MspInit+0x268>)
 800307a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 800307c:	4b77      	ldr	r3, [pc, #476]	; (800325c <HAL_TIM_PWM_MspInit+0x264>)
 800307e:	2214      	movs	r2, #20
 8003080:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003082:	4b76      	ldr	r3, [pc, #472]	; (800325c <HAL_TIM_PWM_MspInit+0x264>)
 8003084:	2240      	movs	r2, #64	; 0x40
 8003086:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003088:	4b74      	ldr	r3, [pc, #464]	; (800325c <HAL_TIM_PWM_MspInit+0x264>)
 800308a:	2200      	movs	r2, #0
 800308c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800308e:	4b73      	ldr	r3, [pc, #460]	; (800325c <HAL_TIM_PWM_MspInit+0x264>)
 8003090:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003094:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003096:	4b71      	ldr	r3, [pc, #452]	; (800325c <HAL_TIM_PWM_MspInit+0x264>)
 8003098:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800309c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800309e:	4b6f      	ldr	r3, [pc, #444]	; (800325c <HAL_TIM_PWM_MspInit+0x264>)
 80030a0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80030a4:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 80030a6:	4b6d      	ldr	r3, [pc, #436]	; (800325c <HAL_TIM_PWM_MspInit+0x264>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80030ac:	4b6b      	ldr	r3, [pc, #428]	; (800325c <HAL_TIM_PWM_MspInit+0x264>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030b2:	4b6a      	ldr	r3, [pc, #424]	; (800325c <HAL_TIM_PWM_MspInit+0x264>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 80030b8:	4868      	ldr	r0, [pc, #416]	; (800325c <HAL_TIM_PWM_MspInit+0x264>)
 80030ba:	f002 f98f 	bl	80053dc <HAL_DMA_Init>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 80030c4:	f7ff fc32 	bl	800292c <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a64      	ldr	r2, [pc, #400]	; (800325c <HAL_TIM_PWM_MspInit+0x264>)
 80030cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80030ce:	4a63      	ldr	r2, [pc, #396]	; (800325c <HAL_TIM_PWM_MspInit+0x264>)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80030d4:	e119      	b.n	800330a <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a62      	ldr	r2, [pc, #392]	; (8003264 <HAL_TIM_PWM_MspInit+0x26c>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d16d      	bne.n	80031bc <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80030e0:	4b5c      	ldr	r3, [pc, #368]	; (8003254 <HAL_TIM_PWM_MspInit+0x25c>)
 80030e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030e6:	4a5b      	ldr	r2, [pc, #364]	; (8003254 <HAL_TIM_PWM_MspInit+0x25c>)
 80030e8:	f043 0302 	orr.w	r3, r3, #2
 80030ec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80030f0:	4b58      	ldr	r3, [pc, #352]	; (8003254 <HAL_TIM_PWM_MspInit+0x25c>)
 80030f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	613b      	str	r3, [r7, #16]
 80030fc:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 80030fe:	4b5a      	ldr	r3, [pc, #360]	; (8003268 <HAL_TIM_PWM_MspInit+0x270>)
 8003100:	4a5a      	ldr	r2, [pc, #360]	; (800326c <HAL_TIM_PWM_MspInit+0x274>)
 8003102:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8003104:	4b58      	ldr	r3, [pc, #352]	; (8003268 <HAL_TIM_PWM_MspInit+0x270>)
 8003106:	2218      	movs	r2, #24
 8003108:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800310a:	4b57      	ldr	r3, [pc, #348]	; (8003268 <HAL_TIM_PWM_MspInit+0x270>)
 800310c:	2240      	movs	r2, #64	; 0x40
 800310e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003110:	4b55      	ldr	r3, [pc, #340]	; (8003268 <HAL_TIM_PWM_MspInit+0x270>)
 8003112:	2200      	movs	r2, #0
 8003114:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8003116:	4b54      	ldr	r3, [pc, #336]	; (8003268 <HAL_TIM_PWM_MspInit+0x270>)
 8003118:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800311c:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800311e:	4b52      	ldr	r3, [pc, #328]	; (8003268 <HAL_TIM_PWM_MspInit+0x270>)
 8003120:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003124:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003126:	4b50      	ldr	r3, [pc, #320]	; (8003268 <HAL_TIM_PWM_MspInit+0x270>)
 8003128:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800312c:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 800312e:	4b4e      	ldr	r3, [pc, #312]	; (8003268 <HAL_TIM_PWM_MspInit+0x270>)
 8003130:	2200      	movs	r2, #0
 8003132:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8003134:	4b4c      	ldr	r3, [pc, #304]	; (8003268 <HAL_TIM_PWM_MspInit+0x270>)
 8003136:	2200      	movs	r2, #0
 8003138:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800313a:	4b4b      	ldr	r3, [pc, #300]	; (8003268 <HAL_TIM_PWM_MspInit+0x270>)
 800313c:	2200      	movs	r2, #0
 800313e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8003140:	4849      	ldr	r0, [pc, #292]	; (8003268 <HAL_TIM_PWM_MspInit+0x270>)
 8003142:	f002 f94b 	bl	80053dc <HAL_DMA_Init>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 800314c:	f7ff fbee 	bl	800292c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a45      	ldr	r2, [pc, #276]	; (8003268 <HAL_TIM_PWM_MspInit+0x270>)
 8003154:	629a      	str	r2, [r3, #40]	; 0x28
 8003156:	4a44      	ldr	r2, [pc, #272]	; (8003268 <HAL_TIM_PWM_MspInit+0x270>)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 800315c:	4b44      	ldr	r3, [pc, #272]	; (8003270 <HAL_TIM_PWM_MspInit+0x278>)
 800315e:	4a45      	ldr	r2, [pc, #276]	; (8003274 <HAL_TIM_PWM_MspInit+0x27c>)
 8003160:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8003162:	4b43      	ldr	r3, [pc, #268]	; (8003270 <HAL_TIM_PWM_MspInit+0x278>)
 8003164:	2217      	movs	r2, #23
 8003166:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003168:	4b41      	ldr	r3, [pc, #260]	; (8003270 <HAL_TIM_PWM_MspInit+0x278>)
 800316a:	2240      	movs	r2, #64	; 0x40
 800316c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800316e:	4b40      	ldr	r3, [pc, #256]	; (8003270 <HAL_TIM_PWM_MspInit+0x278>)
 8003170:	2200      	movs	r2, #0
 8003172:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003174:	4b3e      	ldr	r3, [pc, #248]	; (8003270 <HAL_TIM_PWM_MspInit+0x278>)
 8003176:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800317a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800317c:	4b3c      	ldr	r3, [pc, #240]	; (8003270 <HAL_TIM_PWM_MspInit+0x278>)
 800317e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003182:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003184:	4b3a      	ldr	r3, [pc, #232]	; (8003270 <HAL_TIM_PWM_MspInit+0x278>)
 8003186:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800318a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 800318c:	4b38      	ldr	r3, [pc, #224]	; (8003270 <HAL_TIM_PWM_MspInit+0x278>)
 800318e:	2200      	movs	r2, #0
 8003190:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003192:	4b37      	ldr	r3, [pc, #220]	; (8003270 <HAL_TIM_PWM_MspInit+0x278>)
 8003194:	2200      	movs	r2, #0
 8003196:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003198:	4b35      	ldr	r3, [pc, #212]	; (8003270 <HAL_TIM_PWM_MspInit+0x278>)
 800319a:	2200      	movs	r2, #0
 800319c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 800319e:	4834      	ldr	r0, [pc, #208]	; (8003270 <HAL_TIM_PWM_MspInit+0x278>)
 80031a0:	f002 f91c 	bl	80053dc <HAL_DMA_Init>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 80031aa:	f7ff fbbf 	bl	800292c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a2f      	ldr	r2, [pc, #188]	; (8003270 <HAL_TIM_PWM_MspInit+0x278>)
 80031b2:	625a      	str	r2, [r3, #36]	; 0x24
 80031b4:	4a2e      	ldr	r2, [pc, #184]	; (8003270 <HAL_TIM_PWM_MspInit+0x278>)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80031ba:	e0a6      	b.n	800330a <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a2d      	ldr	r2, [pc, #180]	; (8003278 <HAL_TIM_PWM_MspInit+0x280>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d15e      	bne.n	8003284 <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80031c6:	4b23      	ldr	r3, [pc, #140]	; (8003254 <HAL_TIM_PWM_MspInit+0x25c>)
 80031c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031cc:	4a21      	ldr	r2, [pc, #132]	; (8003254 <HAL_TIM_PWM_MspInit+0x25c>)
 80031ce:	f043 0304 	orr.w	r3, r3, #4
 80031d2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80031d6:	4b1f      	ldr	r3, [pc, #124]	; (8003254 <HAL_TIM_PWM_MspInit+0x25c>)
 80031d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	60fb      	str	r3, [r7, #12]
 80031e2:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 80031e4:	4b25      	ldr	r3, [pc, #148]	; (800327c <HAL_TIM_PWM_MspInit+0x284>)
 80031e6:	4a26      	ldr	r2, [pc, #152]	; (8003280 <HAL_TIM_PWM_MspInit+0x288>)
 80031e8:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 80031ea:	4b24      	ldr	r3, [pc, #144]	; (800327c <HAL_TIM_PWM_MspInit+0x284>)
 80031ec:	221f      	movs	r2, #31
 80031ee:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031f0:	4b22      	ldr	r3, [pc, #136]	; (800327c <HAL_TIM_PWM_MspInit+0x284>)
 80031f2:	2240      	movs	r2, #64	; 0x40
 80031f4:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80031f6:	4b21      	ldr	r3, [pc, #132]	; (800327c <HAL_TIM_PWM_MspInit+0x284>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80031fc:	4b1f      	ldr	r3, [pc, #124]	; (800327c <HAL_TIM_PWM_MspInit+0x284>)
 80031fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003202:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003204:	4b1d      	ldr	r3, [pc, #116]	; (800327c <HAL_TIM_PWM_MspInit+0x284>)
 8003206:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800320a:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800320c:	4b1b      	ldr	r3, [pc, #108]	; (800327c <HAL_TIM_PWM_MspInit+0x284>)
 800320e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003212:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8003214:	4b19      	ldr	r3, [pc, #100]	; (800327c <HAL_TIM_PWM_MspInit+0x284>)
 8003216:	2200      	movs	r2, #0
 8003218:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 800321a:	4b18      	ldr	r3, [pc, #96]	; (800327c <HAL_TIM_PWM_MspInit+0x284>)
 800321c:	2200      	movs	r2, #0
 800321e:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003220:	4b16      	ldr	r3, [pc, #88]	; (800327c <HAL_TIM_PWM_MspInit+0x284>)
 8003222:	2200      	movs	r2, #0
 8003224:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8003226:	4815      	ldr	r0, [pc, #84]	; (800327c <HAL_TIM_PWM_MspInit+0x284>)
 8003228:	f002 f8d8 	bl	80053dc <HAL_DMA_Init>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 8003232:	f7ff fb7b 	bl	800292c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a10      	ldr	r2, [pc, #64]	; (800327c <HAL_TIM_PWM_MspInit+0x284>)
 800323a:	62da      	str	r2, [r3, #44]	; 0x2c
 800323c:	4a0f      	ldr	r2, [pc, #60]	; (800327c <HAL_TIM_PWM_MspInit+0x284>)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003242:	2200      	movs	r2, #0
 8003244:	2100      	movs	r1, #0
 8003246:	201e      	movs	r0, #30
 8003248:	f002 f893 	bl	8005372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800324c:	201e      	movs	r0, #30
 800324e:	f002 f8aa 	bl	80053a6 <HAL_NVIC_EnableIRQ>
}
 8003252:	e05a      	b.n	800330a <HAL_TIM_PWM_MspInit+0x312>
 8003254:	58024400 	.word	0x58024400
 8003258:	58020000 	.word	0x58020000
 800325c:	2400124c 	.word	0x2400124c
 8003260:	40020028 	.word	0x40020028
 8003264:	40000400 	.word	0x40000400
 8003268:	240012c4 	.word	0x240012c4
 800326c:	40020058 	.word	0x40020058
 8003270:	2400133c 	.word	0x2400133c
 8003274:	40020070 	.word	0x40020070
 8003278:	40000800 	.word	0x40000800
 800327c:	240013b4 	.word	0x240013b4
 8003280:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a22      	ldr	r2, [pc, #136]	; (8003314 <HAL_TIM_PWM_MspInit+0x31c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d13d      	bne.n	800330a <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800328e:	4b22      	ldr	r3, [pc, #136]	; (8003318 <HAL_TIM_PWM_MspInit+0x320>)
 8003290:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003294:	4a20      	ldr	r2, [pc, #128]	; (8003318 <HAL_TIM_PWM_MspInit+0x320>)
 8003296:	f043 0308 	orr.w	r3, r3, #8
 800329a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800329e:	4b1e      	ldr	r3, [pc, #120]	; (8003318 <HAL_TIM_PWM_MspInit+0x320>)
 80032a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032a4:	f003 0308 	and.w	r3, r3, #8
 80032a8:	60bb      	str	r3, [r7, #8]
 80032aa:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 80032ac:	4b1b      	ldr	r3, [pc, #108]	; (800331c <HAL_TIM_PWM_MspInit+0x324>)
 80032ae:	4a1c      	ldr	r2, [pc, #112]	; (8003320 <HAL_TIM_PWM_MspInit+0x328>)
 80032b0:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 80032b2:	4b1a      	ldr	r3, [pc, #104]	; (800331c <HAL_TIM_PWM_MspInit+0x324>)
 80032b4:	223a      	movs	r2, #58	; 0x3a
 80032b6:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032b8:	4b18      	ldr	r3, [pc, #96]	; (800331c <HAL_TIM_PWM_MspInit+0x324>)
 80032ba:	2240      	movs	r2, #64	; 0x40
 80032bc:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80032be:	4b17      	ldr	r3, [pc, #92]	; (800331c <HAL_TIM_PWM_MspInit+0x324>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80032c4:	4b15      	ldr	r3, [pc, #84]	; (800331c <HAL_TIM_PWM_MspInit+0x324>)
 80032c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032ca:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80032cc:	4b13      	ldr	r3, [pc, #76]	; (800331c <HAL_TIM_PWM_MspInit+0x324>)
 80032ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032d2:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80032d4:	4b11      	ldr	r3, [pc, #68]	; (800331c <HAL_TIM_PWM_MspInit+0x324>)
 80032d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80032da:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 80032dc:	4b0f      	ldr	r3, [pc, #60]	; (800331c <HAL_TIM_PWM_MspInit+0x324>)
 80032de:	2200      	movs	r2, #0
 80032e0:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 80032e2:	4b0e      	ldr	r3, [pc, #56]	; (800331c <HAL_TIM_PWM_MspInit+0x324>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032e8:	4b0c      	ldr	r3, [pc, #48]	; (800331c <HAL_TIM_PWM_MspInit+0x324>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 80032ee:	480b      	ldr	r0, [pc, #44]	; (800331c <HAL_TIM_PWM_MspInit+0x324>)
 80032f0:	f002 f874 	bl	80053dc <HAL_DMA_Init>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 80032fa:	f7ff fb17 	bl	800292c <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a06      	ldr	r2, [pc, #24]	; (800331c <HAL_TIM_PWM_MspInit+0x324>)
 8003302:	631a      	str	r2, [r3, #48]	; 0x30
 8003304:	4a05      	ldr	r2, [pc, #20]	; (800331c <HAL_TIM_PWM_MspInit+0x324>)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6393      	str	r3, [r2, #56]	; 0x38
}
 800330a:	bf00      	nop
 800330c:	3730      	adds	r7, #48	; 0x30
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40000c00 	.word	0x40000c00
 8003318:	58024400 	.word	0x58024400
 800331c:	2400142c 	.word	0x2400142c
 8003320:	40020040 	.word	0x40020040

08003324 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a0b      	ldr	r2, [pc, #44]	; (8003360 <HAL_TIM_Base_MspInit+0x3c>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d10e      	bne.n	8003354 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003336:	4b0b      	ldr	r3, [pc, #44]	; (8003364 <HAL_TIM_Base_MspInit+0x40>)
 8003338:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800333c:	4a09      	ldr	r2, [pc, #36]	; (8003364 <HAL_TIM_Base_MspInit+0x40>)
 800333e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003342:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003346:	4b07      	ldr	r3, [pc, #28]	; (8003364 <HAL_TIM_Base_MspInit+0x40>)
 8003348:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800334c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003350:	60fb      	str	r3, [r7, #12]
 8003352:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8003354:	bf00      	nop
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	40001c00 	.word	0x40001c00
 8003364:	58024400 	.word	0x58024400

08003368 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b08c      	sub	sp, #48	; 0x30
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003370:	f107 031c 	add.w	r3, r7, #28
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	605a      	str	r2, [r3, #4]
 800337a:	609a      	str	r2, [r3, #8]
 800337c:	60da      	str	r2, [r3, #12]
 800337e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003388:	d120      	bne.n	80033cc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800338a:	4b52      	ldr	r3, [pc, #328]	; (80034d4 <HAL_TIM_MspPostInit+0x16c>)
 800338c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003390:	4a50      	ldr	r2, [pc, #320]	; (80034d4 <HAL_TIM_MspPostInit+0x16c>)
 8003392:	f043 0302 	orr.w	r3, r3, #2
 8003396:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800339a:	4b4e      	ldr	r3, [pc, #312]	; (80034d4 <HAL_TIM_MspPostInit+0x16c>)
 800339c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	61bb      	str	r3, [r7, #24]
 80033a6:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80033a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ae:	2302      	movs	r3, #2
 80033b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80033b2:	2302      	movs	r3, #2
 80033b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033b6:	2300      	movs	r3, #0
 80033b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80033ba:	2301      	movs	r3, #1
 80033bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033be:	f107 031c 	add.w	r3, r7, #28
 80033c2:	4619      	mov	r1, r3
 80033c4:	4844      	ldr	r0, [pc, #272]	; (80034d8 <HAL_TIM_MspPostInit+0x170>)
 80033c6:	f004 fc41 	bl	8007c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80033ca:	e07f      	b.n	80034cc <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a42      	ldr	r2, [pc, #264]	; (80034dc <HAL_TIM_MspPostInit+0x174>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d11f      	bne.n	8003416 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033d6:	4b3f      	ldr	r3, [pc, #252]	; (80034d4 <HAL_TIM_MspPostInit+0x16c>)
 80033d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033dc:	4a3d      	ldr	r2, [pc, #244]	; (80034d4 <HAL_TIM_MspPostInit+0x16c>)
 80033de:	f043 0302 	orr.w	r3, r3, #2
 80033e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033e6:	4b3b      	ldr	r3, [pc, #236]	; (80034d4 <HAL_TIM_MspPostInit+0x16c>)
 80033e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	617b      	str	r3, [r7, #20]
 80033f2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80033f4:	2330      	movs	r3, #48	; 0x30
 80033f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f8:	2302      	movs	r3, #2
 80033fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80033fc:	2302      	movs	r3, #2
 80033fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003400:	2300      	movs	r3, #0
 8003402:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003404:	2302      	movs	r3, #2
 8003406:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003408:	f107 031c 	add.w	r3, r7, #28
 800340c:	4619      	mov	r1, r3
 800340e:	4832      	ldr	r0, [pc, #200]	; (80034d8 <HAL_TIM_MspPostInit+0x170>)
 8003410:	f004 fc1c 	bl	8007c4c <HAL_GPIO_Init>
}
 8003414:	e05a      	b.n	80034cc <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a31      	ldr	r2, [pc, #196]	; (80034e0 <HAL_TIM_MspPostInit+0x178>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d131      	bne.n	8003484 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003420:	4b2c      	ldr	r3, [pc, #176]	; (80034d4 <HAL_TIM_MspPostInit+0x16c>)
 8003422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003426:	4a2b      	ldr	r2, [pc, #172]	; (80034d4 <HAL_TIM_MspPostInit+0x16c>)
 8003428:	f043 0308 	orr.w	r3, r3, #8
 800342c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003430:	4b28      	ldr	r3, [pc, #160]	; (80034d4 <HAL_TIM_MspPostInit+0x16c>)
 8003432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003436:	f003 0308 	and.w	r3, r3, #8
 800343a:	613b      	str	r3, [r7, #16]
 800343c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800343e:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8003442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003444:	2302      	movs	r3, #2
 8003446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003448:	2300      	movs	r3, #0
 800344a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800344c:	2300      	movs	r3, #0
 800344e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003450:	2302      	movs	r3, #2
 8003452:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003454:	f107 031c 	add.w	r3, r7, #28
 8003458:	4619      	mov	r1, r3
 800345a:	4822      	ldr	r0, [pc, #136]	; (80034e4 <HAL_TIM_MspPostInit+0x17c>)
 800345c:	f004 fbf6 	bl	8007c4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003460:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003464:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003466:	2302      	movs	r3, #2
 8003468:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800346a:	2302      	movs	r3, #2
 800346c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800346e:	2300      	movs	r3, #0
 8003470:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003472:	2302      	movs	r3, #2
 8003474:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003476:	f107 031c 	add.w	r3, r7, #28
 800347a:	4619      	mov	r1, r3
 800347c:	4819      	ldr	r0, [pc, #100]	; (80034e4 <HAL_TIM_MspPostInit+0x17c>)
 800347e:	f004 fbe5 	bl	8007c4c <HAL_GPIO_Init>
}
 8003482:	e023      	b.n	80034cc <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a17      	ldr	r2, [pc, #92]	; (80034e8 <HAL_TIM_MspPostInit+0x180>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d11e      	bne.n	80034cc <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800348e:	4b11      	ldr	r3, [pc, #68]	; (80034d4 <HAL_TIM_MspPostInit+0x16c>)
 8003490:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003494:	4a0f      	ldr	r2, [pc, #60]	; (80034d4 <HAL_TIM_MspPostInit+0x16c>)
 8003496:	f043 0301 	orr.w	r3, r3, #1
 800349a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800349e:	4b0d      	ldr	r3, [pc, #52]	; (80034d4 <HAL_TIM_MspPostInit+0x16c>)
 80034a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80034ac:	2308      	movs	r3, #8
 80034ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b0:	2302      	movs	r3, #2
 80034b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80034b4:	2302      	movs	r3, #2
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b8:	2300      	movs	r3, #0
 80034ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80034bc:	2302      	movs	r3, #2
 80034be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c0:	f107 031c 	add.w	r3, r7, #28
 80034c4:	4619      	mov	r1, r3
 80034c6:	4809      	ldr	r0, [pc, #36]	; (80034ec <HAL_TIM_MspPostInit+0x184>)
 80034c8:	f004 fbc0 	bl	8007c4c <HAL_GPIO_Init>
}
 80034cc:	bf00      	nop
 80034ce:	3730      	adds	r7, #48	; 0x30
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	58024400 	.word	0x58024400
 80034d8:	58020400 	.word	0x58020400
 80034dc:	40000400 	.word	0x40000400
 80034e0:	40000800 	.word	0x40000800
 80034e4:	58020c00 	.word	0x58020c00
 80034e8:	40000c00 	.word	0x40000c00
 80034ec:	58020000 	.word	0x58020000

080034f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b0ba      	sub	sp, #232	; 0xe8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034f8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	605a      	str	r2, [r3, #4]
 8003502:	609a      	str	r2, [r3, #8]
 8003504:	60da      	str	r2, [r3, #12]
 8003506:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003508:	f107 0318 	add.w	r3, r7, #24
 800350c:	22b8      	movs	r2, #184	; 0xb8
 800350e:	2100      	movs	r1, #0
 8003510:	4618      	mov	r0, r3
 8003512:	f013 fdf1 	bl	80170f8 <memset>
  if(huart->Instance==UART4)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a4d      	ldr	r2, [pc, #308]	; (8003650 <HAL_UART_MspInit+0x160>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d147      	bne.n	80035b0 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003520:	f04f 0202 	mov.w	r2, #2
 8003524:	f04f 0300 	mov.w	r3, #0
 8003528:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800352c:	2300      	movs	r3, #0
 800352e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003532:	f107 0318 	add.w	r3, r7, #24
 8003536:	4618      	mov	r0, r3
 8003538:	f007 f976 	bl	800a828 <HAL_RCCEx_PeriphCLKConfig>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003542:	f7ff f9f3 	bl	800292c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003546:	4b43      	ldr	r3, [pc, #268]	; (8003654 <HAL_UART_MspInit+0x164>)
 8003548:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800354c:	4a41      	ldr	r2, [pc, #260]	; (8003654 <HAL_UART_MspInit+0x164>)
 800354e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003552:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003556:	4b3f      	ldr	r3, [pc, #252]	; (8003654 <HAL_UART_MspInit+0x164>)
 8003558:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800355c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003560:	617b      	str	r3, [r7, #20]
 8003562:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003564:	4b3b      	ldr	r3, [pc, #236]	; (8003654 <HAL_UART_MspInit+0x164>)
 8003566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800356a:	4a3a      	ldr	r2, [pc, #232]	; (8003654 <HAL_UART_MspInit+0x164>)
 800356c:	f043 0302 	orr.w	r3, r3, #2
 8003570:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003574:	4b37      	ldr	r3, [pc, #220]	; (8003654 <HAL_UART_MspInit+0x164>)
 8003576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	613b      	str	r3, [r7, #16]
 8003580:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003582:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003586:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800358a:	2302      	movs	r3, #2
 800358c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003590:	2300      	movs	r3, #0
 8003592:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003596:	2300      	movs	r3, #0
 8003598:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800359c:	2308      	movs	r3, #8
 800359e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035a2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80035a6:	4619      	mov	r1, r3
 80035a8:	482b      	ldr	r0, [pc, #172]	; (8003658 <HAL_UART_MspInit+0x168>)
 80035aa:	f004 fb4f 	bl	8007c4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80035ae:	e04a      	b.n	8003646 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a29      	ldr	r2, [pc, #164]	; (800365c <HAL_UART_MspInit+0x16c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d145      	bne.n	8003646 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80035ba:	f04f 0201 	mov.w	r2, #1
 80035be:	f04f 0300 	mov.w	r3, #0
 80035c2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80035c6:	2300      	movs	r3, #0
 80035c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035cc:	f107 0318 	add.w	r3, r7, #24
 80035d0:	4618      	mov	r0, r3
 80035d2:	f007 f929 	bl	800a828 <HAL_RCCEx_PeriphCLKConfig>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 80035dc:	f7ff f9a6 	bl	800292c <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80035e0:	4b1c      	ldr	r3, [pc, #112]	; (8003654 <HAL_UART_MspInit+0x164>)
 80035e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035e6:	4a1b      	ldr	r2, [pc, #108]	; (8003654 <HAL_UART_MspInit+0x164>)
 80035e8:	f043 0320 	orr.w	r3, r3, #32
 80035ec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80035f0:	4b18      	ldr	r3, [pc, #96]	; (8003654 <HAL_UART_MspInit+0x164>)
 80035f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035f6:	f003 0320 	and.w	r3, r3, #32
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035fe:	4b15      	ldr	r3, [pc, #84]	; (8003654 <HAL_UART_MspInit+0x164>)
 8003600:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003604:	4a13      	ldr	r2, [pc, #76]	; (8003654 <HAL_UART_MspInit+0x164>)
 8003606:	f043 0304 	orr.w	r3, r3, #4
 800360a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800360e:	4b11      	ldr	r3, [pc, #68]	; (8003654 <HAL_UART_MspInit+0x164>)
 8003610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	60bb      	str	r3, [r7, #8]
 800361a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800361c:	23c0      	movs	r3, #192	; 0xc0
 800361e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003622:	2302      	movs	r3, #2
 8003624:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003628:	2300      	movs	r3, #0
 800362a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800362e:	2300      	movs	r3, #0
 8003630:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8003634:	2307      	movs	r3, #7
 8003636:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800363a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800363e:	4619      	mov	r1, r3
 8003640:	4807      	ldr	r0, [pc, #28]	; (8003660 <HAL_UART_MspInit+0x170>)
 8003642:	f004 fb03 	bl	8007c4c <HAL_GPIO_Init>
}
 8003646:	bf00      	nop
 8003648:	37e8      	adds	r7, #232	; 0xe8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	40004c00 	.word	0x40004c00
 8003654:	58024400 	.word	0x58024400
 8003658:	58020400 	.word	0x58020400
 800365c:	40011400 	.word	0x40011400
 8003660:	58020800 	.word	0x58020800

08003664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003664:	b480      	push	{r7}
 8003666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003668:	e7fe      	b.n	8003668 <NMI_Handler+0x4>

0800366a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800366a:	b480      	push	{r7}
 800366c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800366e:	e7fe      	b.n	800366e <HardFault_Handler+0x4>

08003670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003674:	e7fe      	b.n	8003674 <MemManage_Handler+0x4>

08003676 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003676:	b480      	push	{r7}
 8003678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800367a:	e7fe      	b.n	800367a <BusFault_Handler+0x4>

0800367c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003680:	e7fe      	b.n	8003680 <UsageFault_Handler+0x4>

08003682 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003682:	b480      	push	{r7}
 8003684:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003686:	bf00      	nop
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003694:	bf00      	nop
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800369e:	b480      	push	{r7}
 80036a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036a2:	bf00      	nop
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036b0:	f000 f9ba 	bl	8003a28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036b4:	bf00      	nop
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 80036bc:	4802      	ldr	r0, [pc, #8]	; (80036c8 <DMA1_Stream0_IRQHandler+0x10>)
 80036be:	f002 fc4f 	bl	8005f60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80036c2:	bf00      	nop
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	240013b4 	.word	0x240013b4

080036cc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 80036d0:	4802      	ldr	r0, [pc, #8]	; (80036dc <DMA1_Stream1_IRQHandler+0x10>)
 80036d2:	f002 fc45 	bl	8005f60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80036d6:	bf00      	nop
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	2400124c 	.word	0x2400124c

080036e0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 80036e4:	4802      	ldr	r0, [pc, #8]	; (80036f0 <DMA1_Stream2_IRQHandler+0x10>)
 80036e6:	f002 fc3b 	bl	8005f60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80036ea:	bf00      	nop
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	2400142c 	.word	0x2400142c

080036f4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 80036f8:	4802      	ldr	r0, [pc, #8]	; (8003704 <DMA1_Stream3_IRQHandler+0x10>)
 80036fa:	f002 fc31 	bl	8005f60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80036fe:	bf00      	nop
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	240012c4 	.word	0x240012c4

08003708 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 800370c:	4802      	ldr	r0, [pc, #8]	; (8003718 <DMA1_Stream4_IRQHandler+0x10>)
 800370e:	f002 fc27 	bl	8005f60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003712:	bf00      	nop
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	2400133c 	.word	0x2400133c

0800371c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003720:	4802      	ldr	r0, [pc, #8]	; (800372c <DMA1_Stream5_IRQHandler+0x10>)
 8003722:	f002 fc1d 	bl	8005f60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003726:	bf00      	nop
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	24000cd8 	.word	0x24000cd8

08003730 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003734:	4802      	ldr	r0, [pc, #8]	; (8003740 <TIM4_IRQHandler+0x10>)
 8003736:	f00c fa59 	bl	800fbec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800373a:	bf00      	nop
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	24001168 	.word	0x24001168

08003744 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003748:	4802      	ldr	r0, [pc, #8]	; (8003754 <I2C2_EV_IRQHandler+0x10>)
 800374a:	f004 fce9 	bl	8008120 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800374e:	bf00      	nop
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	24000e68 	.word	0x24000e68

08003758 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800375c:	4802      	ldr	r0, [pc, #8]	; (8003768 <DMA2_Stream7_IRQHandler+0x10>)
 800375e:	f002 fbff 	bl	8005f60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003762:	bf00      	nop
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	24000d50 	.word	0x24000d50

0800376c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003770:	4802      	ldr	r0, [pc, #8]	; (800377c <OTG_HS_IRQHandler+0x10>)
 8003772:	f004 fedf 	bl	8008534 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8003776:	bf00      	nop
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	24002ad0 	.word	0x24002ad0

08003780 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8003784:	4802      	ldr	r0, [pc, #8]	; (8003790 <SDMMC2_IRQHandler+0x10>)
 8003786:	f009 fea5 	bl	800d4d4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 800378a:	bf00      	nop
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	24000ebc 	.word	0x24000ebc

08003794 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800379c:	4a14      	ldr	r2, [pc, #80]	; (80037f0 <_sbrk+0x5c>)
 800379e:	4b15      	ldr	r3, [pc, #84]	; (80037f4 <_sbrk+0x60>)
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037a8:	4b13      	ldr	r3, [pc, #76]	; (80037f8 <_sbrk+0x64>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d102      	bne.n	80037b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037b0:	4b11      	ldr	r3, [pc, #68]	; (80037f8 <_sbrk+0x64>)
 80037b2:	4a12      	ldr	r2, [pc, #72]	; (80037fc <_sbrk+0x68>)
 80037b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037b6:	4b10      	ldr	r3, [pc, #64]	; (80037f8 <_sbrk+0x64>)
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4413      	add	r3, r2
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d207      	bcs.n	80037d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037c4:	f013 fca0 	bl	8017108 <__errno>
 80037c8:	4603      	mov	r3, r0
 80037ca:	220c      	movs	r2, #12
 80037cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037ce:	f04f 33ff 	mov.w	r3, #4294967295
 80037d2:	e009      	b.n	80037e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037d4:	4b08      	ldr	r3, [pc, #32]	; (80037f8 <_sbrk+0x64>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037da:	4b07      	ldr	r3, [pc, #28]	; (80037f8 <_sbrk+0x64>)
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4413      	add	r3, r2
 80037e2:	4a05      	ldr	r2, [pc, #20]	; (80037f8 <_sbrk+0x64>)
 80037e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037e6:	68fb      	ldr	r3, [r7, #12]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3718      	adds	r7, #24
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	24050000 	.word	0x24050000
 80037f4:	00000800 	.word	0x00000800
 80037f8:	240015cc 	.word	0x240015cc
 80037fc:	24003348 	.word	0x24003348

08003800 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003804:	4b32      	ldr	r3, [pc, #200]	; (80038d0 <SystemInit+0xd0>)
 8003806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380a:	4a31      	ldr	r2, [pc, #196]	; (80038d0 <SystemInit+0xd0>)
 800380c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003810:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003814:	4b2f      	ldr	r3, [pc, #188]	; (80038d4 <SystemInit+0xd4>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 030f 	and.w	r3, r3, #15
 800381c:	2b06      	cmp	r3, #6
 800381e:	d807      	bhi.n	8003830 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003820:	4b2c      	ldr	r3, [pc, #176]	; (80038d4 <SystemInit+0xd4>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f023 030f 	bic.w	r3, r3, #15
 8003828:	4a2a      	ldr	r2, [pc, #168]	; (80038d4 <SystemInit+0xd4>)
 800382a:	f043 0307 	orr.w	r3, r3, #7
 800382e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003830:	4b29      	ldr	r3, [pc, #164]	; (80038d8 <SystemInit+0xd8>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a28      	ldr	r2, [pc, #160]	; (80038d8 <SystemInit+0xd8>)
 8003836:	f043 0301 	orr.w	r3, r3, #1
 800383a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800383c:	4b26      	ldr	r3, [pc, #152]	; (80038d8 <SystemInit+0xd8>)
 800383e:	2200      	movs	r2, #0
 8003840:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003842:	4b25      	ldr	r3, [pc, #148]	; (80038d8 <SystemInit+0xd8>)
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	4924      	ldr	r1, [pc, #144]	; (80038d8 <SystemInit+0xd8>)
 8003848:	4b24      	ldr	r3, [pc, #144]	; (80038dc <SystemInit+0xdc>)
 800384a:	4013      	ands	r3, r2
 800384c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800384e:	4b21      	ldr	r3, [pc, #132]	; (80038d4 <SystemInit+0xd4>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0308 	and.w	r3, r3, #8
 8003856:	2b00      	cmp	r3, #0
 8003858:	d007      	beq.n	800386a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800385a:	4b1e      	ldr	r3, [pc, #120]	; (80038d4 <SystemInit+0xd4>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f023 030f 	bic.w	r3, r3, #15
 8003862:	4a1c      	ldr	r2, [pc, #112]	; (80038d4 <SystemInit+0xd4>)
 8003864:	f043 0307 	orr.w	r3, r3, #7
 8003868:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800386a:	4b1b      	ldr	r3, [pc, #108]	; (80038d8 <SystemInit+0xd8>)
 800386c:	2200      	movs	r2, #0
 800386e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003870:	4b19      	ldr	r3, [pc, #100]	; (80038d8 <SystemInit+0xd8>)
 8003872:	2200      	movs	r2, #0
 8003874:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003876:	4b18      	ldr	r3, [pc, #96]	; (80038d8 <SystemInit+0xd8>)
 8003878:	2200      	movs	r2, #0
 800387a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800387c:	4b16      	ldr	r3, [pc, #88]	; (80038d8 <SystemInit+0xd8>)
 800387e:	4a18      	ldr	r2, [pc, #96]	; (80038e0 <SystemInit+0xe0>)
 8003880:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003882:	4b15      	ldr	r3, [pc, #84]	; (80038d8 <SystemInit+0xd8>)
 8003884:	4a17      	ldr	r2, [pc, #92]	; (80038e4 <SystemInit+0xe4>)
 8003886:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003888:	4b13      	ldr	r3, [pc, #76]	; (80038d8 <SystemInit+0xd8>)
 800388a:	4a17      	ldr	r2, [pc, #92]	; (80038e8 <SystemInit+0xe8>)
 800388c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800388e:	4b12      	ldr	r3, [pc, #72]	; (80038d8 <SystemInit+0xd8>)
 8003890:	2200      	movs	r2, #0
 8003892:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003894:	4b10      	ldr	r3, [pc, #64]	; (80038d8 <SystemInit+0xd8>)
 8003896:	4a14      	ldr	r2, [pc, #80]	; (80038e8 <SystemInit+0xe8>)
 8003898:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800389a:	4b0f      	ldr	r3, [pc, #60]	; (80038d8 <SystemInit+0xd8>)
 800389c:	2200      	movs	r2, #0
 800389e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80038a0:	4b0d      	ldr	r3, [pc, #52]	; (80038d8 <SystemInit+0xd8>)
 80038a2:	4a11      	ldr	r2, [pc, #68]	; (80038e8 <SystemInit+0xe8>)
 80038a4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80038a6:	4b0c      	ldr	r3, [pc, #48]	; (80038d8 <SystemInit+0xd8>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80038ac:	4b0a      	ldr	r3, [pc, #40]	; (80038d8 <SystemInit+0xd8>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a09      	ldr	r2, [pc, #36]	; (80038d8 <SystemInit+0xd8>)
 80038b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80038b8:	4b07      	ldr	r3, [pc, #28]	; (80038d8 <SystemInit+0xd8>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80038be:	4b0b      	ldr	r3, [pc, #44]	; (80038ec <SystemInit+0xec>)
 80038c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80038c4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80038c6:	bf00      	nop
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	e000ed00 	.word	0xe000ed00
 80038d4:	52002000 	.word	0x52002000
 80038d8:	58024400 	.word	0x58024400
 80038dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80038e0:	02020200 	.word	0x02020200
 80038e4:	01ff0000 	.word	0x01ff0000
 80038e8:	01010280 	.word	0x01010280
 80038ec:	52004000 	.word	0x52004000

080038f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80038f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003928 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80038f4:	f7ff ff84 	bl	8003800 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80038f8:	480c      	ldr	r0, [pc, #48]	; (800392c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80038fa:	490d      	ldr	r1, [pc, #52]	; (8003930 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80038fc:	4a0d      	ldr	r2, [pc, #52]	; (8003934 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80038fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003900:	e002      	b.n	8003908 <LoopCopyDataInit>

08003902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003906:	3304      	adds	r3, #4

08003908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800390a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800390c:	d3f9      	bcc.n	8003902 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800390e:	4a0a      	ldr	r2, [pc, #40]	; (8003938 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003910:	4c0a      	ldr	r4, [pc, #40]	; (800393c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003914:	e001      	b.n	800391a <LoopFillZerobss>

08003916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003918:	3204      	adds	r2, #4

0800391a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800391a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800391c:	d3fb      	bcc.n	8003916 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800391e:	f013 fbf9 	bl	8017114 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003922:	f7fd fd51 	bl	80013c8 <main>
  bx  lr
 8003926:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003928:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800392c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003930:	24000150 	.word	0x24000150
  ldr r2, =_sidata
 8003934:	08018708 	.word	0x08018708
  ldr r2, =_sbss
 8003938:	24000150 	.word	0x24000150
  ldr r4, =_ebss
 800393c:	24003344 	.word	0x24003344

08003940 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003940:	e7fe      	b.n	8003940 <ADC3_IRQHandler>
	...

08003944 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800394a:	2003      	movs	r0, #3
 800394c:	f001 fd06 	bl	800535c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003950:	f006 fd94 	bl	800a47c <HAL_RCC_GetSysClockFreq>
 8003954:	4602      	mov	r2, r0
 8003956:	4b15      	ldr	r3, [pc, #84]	; (80039ac <HAL_Init+0x68>)
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	0a1b      	lsrs	r3, r3, #8
 800395c:	f003 030f 	and.w	r3, r3, #15
 8003960:	4913      	ldr	r1, [pc, #76]	; (80039b0 <HAL_Init+0x6c>)
 8003962:	5ccb      	ldrb	r3, [r1, r3]
 8003964:	f003 031f 	and.w	r3, r3, #31
 8003968:	fa22 f303 	lsr.w	r3, r2, r3
 800396c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800396e:	4b0f      	ldr	r3, [pc, #60]	; (80039ac <HAL_Init+0x68>)
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	f003 030f 	and.w	r3, r3, #15
 8003976:	4a0e      	ldr	r2, [pc, #56]	; (80039b0 <HAL_Init+0x6c>)
 8003978:	5cd3      	ldrb	r3, [r2, r3]
 800397a:	f003 031f 	and.w	r3, r3, #31
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	fa22 f303 	lsr.w	r3, r2, r3
 8003984:	4a0b      	ldr	r2, [pc, #44]	; (80039b4 <HAL_Init+0x70>)
 8003986:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003988:	4a0b      	ldr	r2, [pc, #44]	; (80039b8 <HAL_Init+0x74>)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800398e:	200f      	movs	r0, #15
 8003990:	f000 f814 	bl	80039bc <HAL_InitTick>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e002      	b.n	80039a4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800399e:	f7fe ffcb 	bl	8002938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3708      	adds	r7, #8
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	58024400 	.word	0x58024400
 80039b0:	08018554 	.word	0x08018554
 80039b4:	24000004 	.word	0x24000004
 80039b8:	24000000 	.word	0x24000000

080039bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80039c4:	4b15      	ldr	r3, [pc, #84]	; (8003a1c <HAL_InitTick+0x60>)
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e021      	b.n	8003a14 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80039d0:	4b13      	ldr	r3, [pc, #76]	; (8003a20 <HAL_InitTick+0x64>)
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	4b11      	ldr	r3, [pc, #68]	; (8003a1c <HAL_InitTick+0x60>)
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	4619      	mov	r1, r3
 80039da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039de:	fbb3 f3f1 	udiv	r3, r3, r1
 80039e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e6:	4618      	mov	r0, r3
 80039e8:	f001 fceb 	bl	80053c2 <HAL_SYSTICK_Config>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e00e      	b.n	8003a14 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b0f      	cmp	r3, #15
 80039fa:	d80a      	bhi.n	8003a12 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039fc:	2200      	movs	r2, #0
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	f04f 30ff 	mov.w	r0, #4294967295
 8003a04:	f001 fcb5 	bl	8005372 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a08:	4a06      	ldr	r2, [pc, #24]	; (8003a24 <HAL_InitTick+0x68>)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	e000      	b.n	8003a14 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3708      	adds	r7, #8
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	2400000c 	.word	0x2400000c
 8003a20:	24000000 	.word	0x24000000
 8003a24:	24000008 	.word	0x24000008

08003a28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003a2c:	4b06      	ldr	r3, [pc, #24]	; (8003a48 <HAL_IncTick+0x20>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	461a      	mov	r2, r3
 8003a32:	4b06      	ldr	r3, [pc, #24]	; (8003a4c <HAL_IncTick+0x24>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4413      	add	r3, r2
 8003a38:	4a04      	ldr	r2, [pc, #16]	; (8003a4c <HAL_IncTick+0x24>)
 8003a3a:	6013      	str	r3, [r2, #0]
}
 8003a3c:	bf00      	nop
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	2400000c 	.word	0x2400000c
 8003a4c:	240015d0 	.word	0x240015d0

08003a50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
  return uwTick;
 8003a54:	4b03      	ldr	r3, [pc, #12]	; (8003a64 <HAL_GetTick+0x14>)
 8003a56:	681b      	ldr	r3, [r3, #0]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	240015d0 	.word	0x240015d0

08003a68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a70:	f7ff ffee 	bl	8003a50 <HAL_GetTick>
 8003a74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a80:	d005      	beq.n	8003a8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003a82:	4b0a      	ldr	r3, [pc, #40]	; (8003aac <HAL_Delay+0x44>)
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	461a      	mov	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a8e:	bf00      	nop
 8003a90:	f7ff ffde 	bl	8003a50 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d8f7      	bhi.n	8003a90 <HAL_Delay+0x28>
  {
  }
}
 8003aa0:	bf00      	nop
 8003aa2:	bf00      	nop
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	2400000c 	.word	0x2400000c

08003ab0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003aba:	4b07      	ldr	r3, [pc, #28]	; (8003ad8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	43db      	mvns	r3, r3
 8003ac2:	401a      	ands	r2, r3
 8003ac4:	4904      	ldr	r1, [pc, #16]	; (8003ad8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	604b      	str	r3, [r1, #4]
}
 8003acc:	bf00      	nop
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	58000400 	.word	0x58000400

08003adc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	431a      	orrs	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	609a      	str	r2, [r3, #8]
}
 8003af6:	bf00      	nop
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b083      	sub	sp, #12
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
 8003b0a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	431a      	orrs	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	609a      	str	r2, [r3, #8]
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr

08003b28 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b087      	sub	sp, #28
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
 8003b50:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	3360      	adds	r3, #96	; 0x60
 8003b56:	461a      	mov	r2, r3
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4413      	add	r3, r2
 8003b5e:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	4a10      	ldr	r2, [pc, #64]	; (8003ba4 <LL_ADC_SetOffset+0x60>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d10b      	bne.n	8003b80 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003b7e:	e00b      	b.n	8003b98 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	430b      	orrs	r3, r1
 8003b92:	431a      	orrs	r2, r3
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	601a      	str	r2, [r3, #0]
}
 8003b98:	bf00      	nop
 8003b9a:	371c      	adds	r7, #28
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr
 8003ba4:	58026000 	.word	0x58026000

08003ba8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	3360      	adds	r3, #96	; 0x60
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3714      	adds	r7, #20
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	f003 031f 	and.w	r3, r3, #31
 8003bee:	6879      	ldr	r1, [r7, #4]
 8003bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	611a      	str	r2, [r3, #16]
}
 8003bfa:	bf00      	nop
 8003bfc:	3714      	adds	r7, #20
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
	...

08003c08 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b087      	sub	sp, #28
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	4a0c      	ldr	r2, [pc, #48]	; (8003c48 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d00e      	beq.n	8003c3a <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	3360      	adds	r3, #96	; 0x60
 8003c20:	461a      	mov	r2, r3
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	4413      	add	r3, r2
 8003c28:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	431a      	orrs	r2, r3
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	601a      	str	r2, [r3, #0]
  }
}
 8003c3a:	bf00      	nop
 8003c3c:	371c      	adds	r7, #28
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	58026000 	.word	0x58026000

08003c4c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b087      	sub	sp, #28
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	4a0c      	ldr	r2, [pc, #48]	; (8003c8c <LL_ADC_SetOffsetSaturation+0x40>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d10e      	bne.n	8003c7e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	3360      	adds	r3, #96	; 0x60
 8003c64:	461a      	mov	r2, r3
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4413      	add	r3, r2
 8003c6c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003c7e:	bf00      	nop
 8003c80:	371c      	adds	r7, #28
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	58026000 	.word	0x58026000

08003c90 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b087      	sub	sp, #28
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	4a0c      	ldr	r2, [pc, #48]	; (8003cd0 <LL_ADC_SetOffsetSign+0x40>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d10e      	bne.n	8003cc2 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	3360      	adds	r3, #96	; 0x60
 8003ca8:	461a      	mov	r2, r3
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	4413      	add	r3, r2
 8003cb0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003cc2:	bf00      	nop
 8003cc4:	371c      	adds	r7, #28
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	58026000 	.word	0x58026000

08003cd4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b087      	sub	sp, #28
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	3360      	adds	r3, #96	; 0x60
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	4413      	add	r3, r2
 8003cec:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	4a0c      	ldr	r2, [pc, #48]	; (8003d24 <LL_ADC_SetOffsetState+0x50>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d108      	bne.n	8003d08 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	431a      	orrs	r2, r3
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003d06:	e007      	b.n	8003d18 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	431a      	orrs	r2, r3
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	601a      	str	r2, [r3, #0]
}
 8003d18:	bf00      	nop
 8003d1a:	371c      	adds	r7, #28
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr
 8003d24:	58026000 	.word	0x58026000

08003d28 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b087      	sub	sp, #28
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	3330      	adds	r3, #48	; 0x30
 8003d38:	461a      	mov	r2, r3
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	0a1b      	lsrs	r3, r3, #8
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	f003 030c 	and.w	r3, r3, #12
 8003d44:	4413      	add	r3, r2
 8003d46:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	f003 031f 	and.w	r3, r3, #31
 8003d52:	211f      	movs	r1, #31
 8003d54:	fa01 f303 	lsl.w	r3, r1, r3
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	401a      	ands	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	0e9b      	lsrs	r3, r3, #26
 8003d60:	f003 011f 	and.w	r1, r3, #31
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f003 031f 	and.w	r3, r3, #31
 8003d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003d74:	bf00      	nop
 8003d76:	371c      	adds	r7, #28
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b087      	sub	sp, #28
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	3314      	adds	r3, #20
 8003d90:	461a      	mov	r2, r3
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	0e5b      	lsrs	r3, r3, #25
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	4413      	add	r3, r2
 8003d9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	0d1b      	lsrs	r3, r3, #20
 8003da8:	f003 031f 	and.w	r3, r3, #31
 8003dac:	2107      	movs	r1, #7
 8003dae:	fa01 f303 	lsl.w	r3, r1, r3
 8003db2:	43db      	mvns	r3, r3
 8003db4:	401a      	ands	r2, r3
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	0d1b      	lsrs	r3, r3, #20
 8003dba:	f003 031f 	and.w	r3, r3, #31
 8003dbe:	6879      	ldr	r1, [r7, #4]
 8003dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003dca:	bf00      	nop
 8003dcc:	371c      	adds	r7, #28
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
	...

08003dd8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	4a1a      	ldr	r2, [pc, #104]	; (8003e50 <LL_ADC_SetChannelSingleDiff+0x78>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d115      	bne.n	8003e18 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003df8:	43db      	mvns	r3, r3
 8003dfa:	401a      	ands	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f003 0318 	and.w	r3, r3, #24
 8003e02:	4914      	ldr	r1, [pc, #80]	; (8003e54 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003e04:	40d9      	lsrs	r1, r3
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	400b      	ands	r3, r1
 8003e0a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003e16:	e014      	b.n	8003e42 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e24:	43db      	mvns	r3, r3
 8003e26:	401a      	ands	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f003 0318 	and.w	r3, r3, #24
 8003e2e:	4909      	ldr	r1, [pc, #36]	; (8003e54 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003e30:	40d9      	lsrs	r1, r3
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	400b      	ands	r3, r1
 8003e36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003e42:	bf00      	nop
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	58026000 	.word	0x58026000
 8003e54:	000fffff 	.word	0x000fffff

08003e58 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	4b04      	ldr	r3, [pc, #16]	; (8003e78 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003e66:	4013      	ands	r3, r2
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	6093      	str	r3, [r2, #8]
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr
 8003e78:	5fffffc0 	.word	0x5fffffc0

08003e7c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e90:	d101      	bne.n	8003e96 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003e92:	2301      	movs	r3, #1
 8003e94:	e000      	b.n	8003e98 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	4b05      	ldr	r3, [pc, #20]	; (8003ec8 <LL_ADC_EnableInternalRegulator+0x24>)
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	6fffffc0 	.word	0x6fffffc0

08003ecc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003edc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ee0:	d101      	bne.n	8003ee6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e000      	b.n	8003ee8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d101      	bne.n	8003f0c <LL_ADC_IsEnabled+0x18>
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e000      	b.n	8003f0e <LL_ADC_IsEnabled+0x1a>
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 0304 	and.w	r3, r3, #4
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d101      	bne.n	8003f32 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e000      	b.n	8003f34 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f003 0308 	and.w	r3, r3, #8
 8003f50:	2b08      	cmp	r3, #8
 8003f52:	d101      	bne.n	8003f58 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003f54:	2301      	movs	r3, #1
 8003f56:	e000      	b.n	8003f5a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
	...

08003f68 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003f68:	b590      	push	{r4, r7, lr}
 8003f6a:	b089      	sub	sp, #36	; 0x24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f70:	2300      	movs	r3, #0
 8003f72:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003f74:	2300      	movs	r3, #0
 8003f76:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e1ee      	b.n	8004360 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d109      	bne.n	8003fa4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f7fe fceb 	bl	800296c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7ff ff67 	bl	8003e7c <LL_ADC_IsDeepPowerDownEnabled>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d004      	beq.n	8003fbe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f7ff ff4d 	bl	8003e58 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7ff ff82 	bl	8003ecc <LL_ADC_IsInternalRegulatorEnabled>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d114      	bne.n	8003ff8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7ff ff66 	bl	8003ea4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003fd8:	4b8e      	ldr	r3, [pc, #568]	; (8004214 <HAL_ADC_Init+0x2ac>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	099b      	lsrs	r3, r3, #6
 8003fde:	4a8e      	ldr	r2, [pc, #568]	; (8004218 <HAL_ADC_Init+0x2b0>)
 8003fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe4:	099b      	lsrs	r3, r3, #6
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003fea:	e002      	b.n	8003ff2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1f9      	bne.n	8003fec <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7ff ff65 	bl	8003ecc <LL_ADC_IsInternalRegulatorEnabled>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10d      	bne.n	8004024 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800400c:	f043 0210 	orr.w	r2, r3, #16
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004018:	f043 0201 	orr.w	r2, r3, #1
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4618      	mov	r0, r3
 800402a:	f7ff ff76 	bl	8003f1a <LL_ADC_REG_IsConversionOngoing>
 800402e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004034:	f003 0310 	and.w	r3, r3, #16
 8004038:	2b00      	cmp	r3, #0
 800403a:	f040 8188 	bne.w	800434e <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	2b00      	cmp	r3, #0
 8004042:	f040 8184 	bne.w	800434e <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800404a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800404e:	f043 0202 	orr.w	r2, r3, #2
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4618      	mov	r0, r3
 800405c:	f7ff ff4a 	bl	8003ef4 <LL_ADC_IsEnabled>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d136      	bne.n	80040d4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a6c      	ldr	r2, [pc, #432]	; (800421c <HAL_ADC_Init+0x2b4>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d004      	beq.n	800407a <HAL_ADC_Init+0x112>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a6a      	ldr	r2, [pc, #424]	; (8004220 <HAL_ADC_Init+0x2b8>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d10e      	bne.n	8004098 <HAL_ADC_Init+0x130>
 800407a:	4868      	ldr	r0, [pc, #416]	; (800421c <HAL_ADC_Init+0x2b4>)
 800407c:	f7ff ff3a 	bl	8003ef4 <LL_ADC_IsEnabled>
 8004080:	4604      	mov	r4, r0
 8004082:	4867      	ldr	r0, [pc, #412]	; (8004220 <HAL_ADC_Init+0x2b8>)
 8004084:	f7ff ff36 	bl	8003ef4 <LL_ADC_IsEnabled>
 8004088:	4603      	mov	r3, r0
 800408a:	4323      	orrs	r3, r4
 800408c:	2b00      	cmp	r3, #0
 800408e:	bf0c      	ite	eq
 8004090:	2301      	moveq	r3, #1
 8004092:	2300      	movne	r3, #0
 8004094:	b2db      	uxtb	r3, r3
 8004096:	e008      	b.n	80040aa <HAL_ADC_Init+0x142>
 8004098:	4862      	ldr	r0, [pc, #392]	; (8004224 <HAL_ADC_Init+0x2bc>)
 800409a:	f7ff ff2b 	bl	8003ef4 <LL_ADC_IsEnabled>
 800409e:	4603      	mov	r3, r0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	bf0c      	ite	eq
 80040a4:	2301      	moveq	r3, #1
 80040a6:	2300      	movne	r3, #0
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d012      	beq.n	80040d4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a5a      	ldr	r2, [pc, #360]	; (800421c <HAL_ADC_Init+0x2b4>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d004      	beq.n	80040c2 <HAL_ADC_Init+0x15a>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a58      	ldr	r2, [pc, #352]	; (8004220 <HAL_ADC_Init+0x2b8>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d101      	bne.n	80040c6 <HAL_ADC_Init+0x15e>
 80040c2:	4a59      	ldr	r2, [pc, #356]	; (8004228 <HAL_ADC_Init+0x2c0>)
 80040c4:	e000      	b.n	80040c8 <HAL_ADC_Init+0x160>
 80040c6:	4a59      	ldr	r2, [pc, #356]	; (800422c <HAL_ADC_Init+0x2c4>)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	4619      	mov	r1, r3
 80040ce:	4610      	mov	r0, r2
 80040d0:	f7ff fd04 	bl	8003adc <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a52      	ldr	r2, [pc, #328]	; (8004224 <HAL_ADC_Init+0x2bc>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d129      	bne.n	8004132 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	7e5b      	ldrb	r3, [r3, #25]
 80040e2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80040e8:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80040ee:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	2b08      	cmp	r3, #8
 80040f6:	d013      	beq.n	8004120 <HAL_ADC_Init+0x1b8>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	2b0c      	cmp	r3, #12
 80040fe:	d00d      	beq.n	800411c <HAL_ADC_Init+0x1b4>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	2b1c      	cmp	r3, #28
 8004106:	d007      	beq.n	8004118 <HAL_ADC_Init+0x1b0>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	2b18      	cmp	r3, #24
 800410e:	d101      	bne.n	8004114 <HAL_ADC_Init+0x1ac>
 8004110:	2318      	movs	r3, #24
 8004112:	e006      	b.n	8004122 <HAL_ADC_Init+0x1ba>
 8004114:	2300      	movs	r3, #0
 8004116:	e004      	b.n	8004122 <HAL_ADC_Init+0x1ba>
 8004118:	2310      	movs	r3, #16
 800411a:	e002      	b.n	8004122 <HAL_ADC_Init+0x1ba>
 800411c:	2308      	movs	r3, #8
 800411e:	e000      	b.n	8004122 <HAL_ADC_Init+0x1ba>
 8004120:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8004122:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f893 3020 	ldrb.w	r3, [r3, #32]
 800412a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800412c:	4313      	orrs	r3, r2
 800412e:	61bb      	str	r3, [r7, #24]
 8004130:	e00e      	b.n	8004150 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	7e5b      	ldrb	r3, [r3, #25]
 8004136:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800413c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004142:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 3020 	ldrb.w	r3, [r3, #32]
 800414a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800414c:	4313      	orrs	r3, r2
 800414e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d106      	bne.n	8004168 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415e:	3b01      	subs	r3, #1
 8004160:	045b      	lsls	r3, r3, #17
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	4313      	orrs	r3, r2
 8004166:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416c:	2b00      	cmp	r3, #0
 800416e:	d009      	beq.n	8004184 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004174:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800417e:	69ba      	ldr	r2, [r7, #24]
 8004180:	4313      	orrs	r3, r2
 8004182:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a26      	ldr	r2, [pc, #152]	; (8004224 <HAL_ADC_Init+0x2bc>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d115      	bne.n	80041ba <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68da      	ldr	r2, [r3, #12]
 8004194:	4b26      	ldr	r3, [pc, #152]	; (8004230 <HAL_ADC_Init+0x2c8>)
 8004196:	4013      	ands	r3, r2
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	6812      	ldr	r2, [r2, #0]
 800419c:	69b9      	ldr	r1, [r7, #24]
 800419e:	430b      	orrs	r3, r1
 80041a0:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	430a      	orrs	r2, r1
 80041b6:	611a      	str	r2, [r3, #16]
 80041b8:	e009      	b.n	80041ce <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68da      	ldr	r2, [r3, #12]
 80041c0:	4b1c      	ldr	r3, [pc, #112]	; (8004234 <HAL_ADC_Init+0x2cc>)
 80041c2:	4013      	ands	r3, r2
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	6812      	ldr	r2, [r2, #0]
 80041c8:	69b9      	ldr	r1, [r7, #24]
 80041ca:	430b      	orrs	r3, r1
 80041cc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7ff fea1 	bl	8003f1a <LL_ADC_REG_IsConversionOngoing>
 80041d8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4618      	mov	r0, r3
 80041e0:	f7ff feae 	bl	8003f40 <LL_ADC_INJ_IsConversionOngoing>
 80041e4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f040 808e 	bne.w	800430a <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f040 808a 	bne.w	800430a <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a0a      	ldr	r2, [pc, #40]	; (8004224 <HAL_ADC_Init+0x2bc>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d11b      	bne.n	8004238 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	7e1b      	ldrb	r3, [r3, #24]
 8004204:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800420c:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800420e:	4313      	orrs	r3, r2
 8004210:	61bb      	str	r3, [r7, #24]
 8004212:	e018      	b.n	8004246 <HAL_ADC_Init+0x2de>
 8004214:	24000000 	.word	0x24000000
 8004218:	053e2d63 	.word	0x053e2d63
 800421c:	40022000 	.word	0x40022000
 8004220:	40022100 	.word	0x40022100
 8004224:	58026000 	.word	0x58026000
 8004228:	40022300 	.word	0x40022300
 800422c:	58026300 	.word	0x58026300
 8004230:	fff04007 	.word	0xfff04007
 8004234:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	7e1b      	ldrb	r3, [r3, #24]
 800423c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8004242:	4313      	orrs	r3, r2
 8004244:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68da      	ldr	r2, [r3, #12]
 800424c:	4b46      	ldr	r3, [pc, #280]	; (8004368 <HAL_ADC_Init+0x400>)
 800424e:	4013      	ands	r3, r2
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	6812      	ldr	r2, [r2, #0]
 8004254:	69b9      	ldr	r1, [r7, #24]
 8004256:	430b      	orrs	r3, r1
 8004258:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004260:	2b01      	cmp	r3, #1
 8004262:	d137      	bne.n	80042d4 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004268:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a3f      	ldr	r2, [pc, #252]	; (800436c <HAL_ADC_Init+0x404>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d116      	bne.n	80042a2 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	691a      	ldr	r2, [r3, #16]
 800427a:	4b3d      	ldr	r3, [pc, #244]	; (8004370 <HAL_ADC_Init+0x408>)
 800427c:	4013      	ands	r3, r2
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004286:	4311      	orrs	r1, r2
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800428c:	4311      	orrs	r1, r2
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004292:	430a      	orrs	r2, r1
 8004294:	431a      	orrs	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 0201 	orr.w	r2, r2, #1
 800429e:	611a      	str	r2, [r3, #16]
 80042a0:	e020      	b.n	80042e4 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	691a      	ldr	r2, [r3, #16]
 80042a8:	4b32      	ldr	r3, [pc, #200]	; (8004374 <HAL_ADC_Init+0x40c>)
 80042aa:	4013      	ands	r3, r2
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80042b0:	3a01      	subs	r2, #1
 80042b2:	0411      	lsls	r1, r2, #16
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80042b8:	4311      	orrs	r1, r2
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80042be:	4311      	orrs	r1, r2
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80042c4:	430a      	orrs	r2, r1
 80042c6:	431a      	orrs	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f042 0201 	orr.w	r2, r2, #1
 80042d0:	611a      	str	r2, [r3, #16]
 80042d2:	e007      	b.n	80042e4 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	691a      	ldr	r2, [r3, #16]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f022 0201 	bic.w	r2, r2, #1
 80042e2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a1b      	ldr	r2, [pc, #108]	; (800436c <HAL_ADC_Init+0x404>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d002      	beq.n	800430a <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 fd63 	bl	8004dd0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	2b01      	cmp	r3, #1
 8004310:	d10c      	bne.n	800432c <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004318:	f023 010f 	bic.w	r1, r3, #15
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	69db      	ldr	r3, [r3, #28]
 8004320:	1e5a      	subs	r2, r3, #1
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	631a      	str	r2, [r3, #48]	; 0x30
 800432a:	e007      	b.n	800433c <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f022 020f 	bic.w	r2, r2, #15
 800433a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004340:	f023 0303 	bic.w	r3, r3, #3
 8004344:	f043 0201 	orr.w	r2, r3, #1
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	661a      	str	r2, [r3, #96]	; 0x60
 800434c:	e007      	b.n	800435e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004352:	f043 0210 	orr.w	r2, r3, #16
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800435e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004360:	4618      	mov	r0, r3
 8004362:	3724      	adds	r7, #36	; 0x24
 8004364:	46bd      	mov	sp, r7
 8004366:	bd90      	pop	{r4, r7, pc}
 8004368:	ffffbffc 	.word	0xffffbffc
 800436c:	58026000 	.word	0x58026000
 8004370:	fc00f81f 	.word	0xfc00f81f
 8004374:	fc00f81e 	.word	0xfc00f81e

08004378 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004378:	b590      	push	{r4, r7, lr}
 800437a:	b0b9      	sub	sp, #228	; 0xe4
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004382:	2300      	movs	r3, #0
 8004384:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004388:	2300      	movs	r3, #0
 800438a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004392:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	4aa9      	ldr	r2, [pc, #676]	; (8004640 <HAL_ADC_ConfigChannel+0x2c8>)
 800439a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d102      	bne.n	80043ac <HAL_ADC_ConfigChannel+0x34>
 80043a6:	2302      	movs	r3, #2
 80043a8:	f000 bcfa 	b.w	8004da0 <HAL_ADC_ConfigChannel+0xa28>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7ff fdae 	bl	8003f1a <LL_ADC_REG_IsConversionOngoing>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f040 84de 	bne.w	8004d82 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a9e      	ldr	r2, [pc, #632]	; (8004644 <HAL_ADC_ConfigChannel+0x2cc>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d033      	beq.n	8004438 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d108      	bne.n	80043ee <HAL_ADC_ConfigChannel+0x76>
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	0e9b      	lsrs	r3, r3, #26
 80043e2:	f003 031f 	and.w	r3, r3, #31
 80043e6:	2201      	movs	r2, #1
 80043e8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ec:	e01d      	b.n	800442a <HAL_ADC_ConfigChannel+0xb2>
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043fa:	fa93 f3a3 	rbit	r3, r3
 80043fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004402:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004406:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800440a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8004412:	2320      	movs	r3, #32
 8004414:	e004      	b.n	8004420 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8004416:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800441a:	fab3 f383 	clz	r3, r3
 800441e:	b2db      	uxtb	r3, r3
 8004420:	f003 031f 	and.w	r3, r3, #31
 8004424:	2201      	movs	r2, #1
 8004426:	fa02 f303 	lsl.w	r3, r2, r3
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	6812      	ldr	r2, [r2, #0]
 800442e:	69d1      	ldr	r1, [r2, #28]
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6812      	ldr	r2, [r2, #0]
 8004434:	430b      	orrs	r3, r1
 8004436:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6818      	ldr	r0, [r3, #0]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	6859      	ldr	r1, [r3, #4]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	461a      	mov	r2, r3
 8004446:	f7ff fc6f 	bl	8003d28 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4618      	mov	r0, r3
 8004450:	f7ff fd63 	bl	8003f1a <LL_ADC_REG_IsConversionOngoing>
 8004454:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4618      	mov	r0, r3
 800445e:	f7ff fd6f 	bl	8003f40 <LL_ADC_INJ_IsConversionOngoing>
 8004462:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004466:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800446a:	2b00      	cmp	r3, #0
 800446c:	f040 8270 	bne.w	8004950 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004470:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004474:	2b00      	cmp	r3, #0
 8004476:	f040 826b 	bne.w	8004950 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6818      	ldr	r0, [r3, #0]
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	6819      	ldr	r1, [r3, #0]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	461a      	mov	r2, r3
 8004488:	f7ff fc7a 	bl	8003d80 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a6c      	ldr	r2, [pc, #432]	; (8004644 <HAL_ADC_ConfigChannel+0x2cc>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d10d      	bne.n	80044b2 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	695a      	ldr	r2, [r3, #20]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	08db      	lsrs	r3, r3, #3
 80044a2:	f003 0303 	and.w	r3, r3, #3
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80044b0:	e032      	b.n	8004518 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80044b2:	4b65      	ldr	r3, [pc, #404]	; (8004648 <HAL_ADC_ConfigChannel+0x2d0>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80044ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044be:	d10b      	bne.n	80044d8 <HAL_ADC_ConfigChannel+0x160>
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	695a      	ldr	r2, [r3, #20]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	089b      	lsrs	r3, r3, #2
 80044cc:	f003 0307 	and.w	r3, r3, #7
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	fa02 f303 	lsl.w	r3, r2, r3
 80044d6:	e01d      	b.n	8004514 <HAL_ADC_ConfigChannel+0x19c>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	f003 0310 	and.w	r3, r3, #16
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10b      	bne.n	80044fe <HAL_ADC_ConfigChannel+0x186>
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	695a      	ldr	r2, [r3, #20]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	089b      	lsrs	r3, r3, #2
 80044f2:	f003 0307 	and.w	r3, r3, #7
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	fa02 f303 	lsl.w	r3, r2, r3
 80044fc:	e00a      	b.n	8004514 <HAL_ADC_ConfigChannel+0x19c>
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	695a      	ldr	r2, [r3, #20]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	089b      	lsrs	r3, r3, #2
 800450a:	f003 0304 	and.w	r3, r3, #4
 800450e:	005b      	lsls	r3, r3, #1
 8004510:	fa02 f303 	lsl.w	r3, r2, r3
 8004514:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	2b04      	cmp	r3, #4
 800451e:	d048      	beq.n	80045b2 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6818      	ldr	r0, [r3, #0]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	6919      	ldr	r1, [r3, #16]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004530:	f7ff fb08 	bl	8003b44 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a42      	ldr	r2, [pc, #264]	; (8004644 <HAL_ADC_ConfigChannel+0x2cc>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d119      	bne.n	8004572 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6818      	ldr	r0, [r3, #0]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	6919      	ldr	r1, [r3, #16]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	461a      	mov	r2, r3
 800454c:	f7ff fba0 	bl	8003c90 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6818      	ldr	r0, [r3, #0]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	6919      	ldr	r1, [r3, #16]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d102      	bne.n	8004568 <HAL_ADC_ConfigChannel+0x1f0>
 8004562:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004566:	e000      	b.n	800456a <HAL_ADC_ConfigChannel+0x1f2>
 8004568:	2300      	movs	r3, #0
 800456a:	461a      	mov	r2, r3
 800456c:	f7ff fb6e 	bl	8003c4c <LL_ADC_SetOffsetSaturation>
 8004570:	e1ee      	b.n	8004950 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6818      	ldr	r0, [r3, #0]
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	6919      	ldr	r1, [r3, #16]
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004580:	2b01      	cmp	r3, #1
 8004582:	d102      	bne.n	800458a <HAL_ADC_ConfigChannel+0x212>
 8004584:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004588:	e000      	b.n	800458c <HAL_ADC_ConfigChannel+0x214>
 800458a:	2300      	movs	r3, #0
 800458c:	461a      	mov	r2, r3
 800458e:	f7ff fb3b 	bl	8003c08 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6818      	ldr	r0, [r3, #0]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	6919      	ldr	r1, [r3, #16]
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	7e1b      	ldrb	r3, [r3, #24]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d102      	bne.n	80045a8 <HAL_ADC_ConfigChannel+0x230>
 80045a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80045a6:	e000      	b.n	80045aa <HAL_ADC_ConfigChannel+0x232>
 80045a8:	2300      	movs	r3, #0
 80045aa:	461a      	mov	r2, r3
 80045ac:	f7ff fb12 	bl	8003bd4 <LL_ADC_SetDataRightShift>
 80045b0:	e1ce      	b.n	8004950 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a23      	ldr	r2, [pc, #140]	; (8004644 <HAL_ADC_ConfigChannel+0x2cc>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	f040 8181 	bne.w	80048c0 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2100      	movs	r1, #0
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7ff faef 	bl	8003ba8 <LL_ADC_GetOffsetChannel>
 80045ca:	4603      	mov	r3, r0
 80045cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10a      	bne.n	80045ea <HAL_ADC_ConfigChannel+0x272>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2100      	movs	r1, #0
 80045da:	4618      	mov	r0, r3
 80045dc:	f7ff fae4 	bl	8003ba8 <LL_ADC_GetOffsetChannel>
 80045e0:	4603      	mov	r3, r0
 80045e2:	0e9b      	lsrs	r3, r3, #26
 80045e4:	f003 021f 	and.w	r2, r3, #31
 80045e8:	e01e      	b.n	8004628 <HAL_ADC_ConfigChannel+0x2b0>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2100      	movs	r1, #0
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7ff fad9 	bl	8003ba8 <LL_ADC_GetOffsetChannel>
 80045f6:	4603      	mov	r3, r0
 80045f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004600:	fa93 f3a3 	rbit	r3, r3
 8004604:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8004608:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800460c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8004610:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8004618:	2320      	movs	r3, #32
 800461a:	e004      	b.n	8004626 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 800461c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004620:	fab3 f383 	clz	r3, r3
 8004624:	b2db      	uxtb	r3, r3
 8004626:	461a      	mov	r2, r3
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10b      	bne.n	800464c <HAL_ADC_ConfigChannel+0x2d4>
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	0e9b      	lsrs	r3, r3, #26
 800463a:	f003 031f 	and.w	r3, r3, #31
 800463e:	e01e      	b.n	800467e <HAL_ADC_ConfigChannel+0x306>
 8004640:	47ff0000 	.word	0x47ff0000
 8004644:	58026000 	.word	0x58026000
 8004648:	5c001000 	.word	0x5c001000
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004654:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004658:	fa93 f3a3 	rbit	r3, r3
 800465c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004660:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004664:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004668:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d101      	bne.n	8004674 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8004670:	2320      	movs	r3, #32
 8004672:	e004      	b.n	800467e <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8004674:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004678:	fab3 f383 	clz	r3, r3
 800467c:	b2db      	uxtb	r3, r3
 800467e:	429a      	cmp	r2, r3
 8004680:	d106      	bne.n	8004690 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2200      	movs	r2, #0
 8004688:	2100      	movs	r1, #0
 800468a:	4618      	mov	r0, r3
 800468c:	f7ff fb22 	bl	8003cd4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2101      	movs	r1, #1
 8004696:	4618      	mov	r0, r3
 8004698:	f7ff fa86 	bl	8003ba8 <LL_ADC_GetOffsetChannel>
 800469c:	4603      	mov	r3, r0
 800469e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10a      	bne.n	80046bc <HAL_ADC_ConfigChannel+0x344>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2101      	movs	r1, #1
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7ff fa7b 	bl	8003ba8 <LL_ADC_GetOffsetChannel>
 80046b2:	4603      	mov	r3, r0
 80046b4:	0e9b      	lsrs	r3, r3, #26
 80046b6:	f003 021f 	and.w	r2, r3, #31
 80046ba:	e01e      	b.n	80046fa <HAL_ADC_ConfigChannel+0x382>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2101      	movs	r1, #1
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7ff fa70 	bl	8003ba8 <LL_ADC_GetOffsetChannel>
 80046c8:	4603      	mov	r3, r0
 80046ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046d2:	fa93 f3a3 	rbit	r3, r3
 80046d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80046da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80046e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 80046ea:	2320      	movs	r3, #32
 80046ec:	e004      	b.n	80046f8 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 80046ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80046f2:	fab3 f383 	clz	r3, r3
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	461a      	mov	r2, r3
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004702:	2b00      	cmp	r3, #0
 8004704:	d105      	bne.n	8004712 <HAL_ADC_ConfigChannel+0x39a>
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	0e9b      	lsrs	r3, r3, #26
 800470c:	f003 031f 	and.w	r3, r3, #31
 8004710:	e018      	b.n	8004744 <HAL_ADC_ConfigChannel+0x3cc>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800471a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800471e:	fa93 f3a3 	rbit	r3, r3
 8004722:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004726:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800472a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800472e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8004736:	2320      	movs	r3, #32
 8004738:	e004      	b.n	8004744 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 800473a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800473e:	fab3 f383 	clz	r3, r3
 8004742:	b2db      	uxtb	r3, r3
 8004744:	429a      	cmp	r2, r3
 8004746:	d106      	bne.n	8004756 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2200      	movs	r2, #0
 800474e:	2101      	movs	r1, #1
 8004750:	4618      	mov	r0, r3
 8004752:	f7ff fabf 	bl	8003cd4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2102      	movs	r1, #2
 800475c:	4618      	mov	r0, r3
 800475e:	f7ff fa23 	bl	8003ba8 <LL_ADC_GetOffsetChannel>
 8004762:	4603      	mov	r3, r0
 8004764:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10a      	bne.n	8004782 <HAL_ADC_ConfigChannel+0x40a>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2102      	movs	r1, #2
 8004772:	4618      	mov	r0, r3
 8004774:	f7ff fa18 	bl	8003ba8 <LL_ADC_GetOffsetChannel>
 8004778:	4603      	mov	r3, r0
 800477a:	0e9b      	lsrs	r3, r3, #26
 800477c:	f003 021f 	and.w	r2, r3, #31
 8004780:	e01e      	b.n	80047c0 <HAL_ADC_ConfigChannel+0x448>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2102      	movs	r1, #2
 8004788:	4618      	mov	r0, r3
 800478a:	f7ff fa0d 	bl	8003ba8 <LL_ADC_GetOffsetChannel>
 800478e:	4603      	mov	r3, r0
 8004790:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004794:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004798:	fa93 f3a3 	rbit	r3, r3
 800479c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80047a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80047a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d101      	bne.n	80047b4 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 80047b0:	2320      	movs	r3, #32
 80047b2:	e004      	b.n	80047be <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 80047b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047b8:	fab3 f383 	clz	r3, r3
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	461a      	mov	r2, r3
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d105      	bne.n	80047d8 <HAL_ADC_ConfigChannel+0x460>
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	0e9b      	lsrs	r3, r3, #26
 80047d2:	f003 031f 	and.w	r3, r3, #31
 80047d6:	e014      	b.n	8004802 <HAL_ADC_ConfigChannel+0x48a>
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80047e0:	fa93 f3a3 	rbit	r3, r3
 80047e4:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80047e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80047ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d101      	bne.n	80047f8 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 80047f4:	2320      	movs	r3, #32
 80047f6:	e004      	b.n	8004802 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 80047f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80047fc:	fab3 f383 	clz	r3, r3
 8004800:	b2db      	uxtb	r3, r3
 8004802:	429a      	cmp	r2, r3
 8004804:	d106      	bne.n	8004814 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2200      	movs	r2, #0
 800480c:	2102      	movs	r1, #2
 800480e:	4618      	mov	r0, r3
 8004810:	f7ff fa60 	bl	8003cd4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2103      	movs	r1, #3
 800481a:	4618      	mov	r0, r3
 800481c:	f7ff f9c4 	bl	8003ba8 <LL_ADC_GetOffsetChannel>
 8004820:	4603      	mov	r3, r0
 8004822:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10a      	bne.n	8004840 <HAL_ADC_ConfigChannel+0x4c8>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2103      	movs	r1, #3
 8004830:	4618      	mov	r0, r3
 8004832:	f7ff f9b9 	bl	8003ba8 <LL_ADC_GetOffsetChannel>
 8004836:	4603      	mov	r3, r0
 8004838:	0e9b      	lsrs	r3, r3, #26
 800483a:	f003 021f 	and.w	r2, r3, #31
 800483e:	e017      	b.n	8004870 <HAL_ADC_ConfigChannel+0x4f8>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2103      	movs	r1, #3
 8004846:	4618      	mov	r0, r3
 8004848:	f7ff f9ae 	bl	8003ba8 <LL_ADC_GetOffsetChannel>
 800484c:	4603      	mov	r3, r0
 800484e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004850:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004852:	fa93 f3a3 	rbit	r3, r3
 8004856:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800485a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800485c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004862:	2320      	movs	r3, #32
 8004864:	e003      	b.n	800486e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004866:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004868:	fab3 f383 	clz	r3, r3
 800486c:	b2db      	uxtb	r3, r3
 800486e:	461a      	mov	r2, r3
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004878:	2b00      	cmp	r3, #0
 800487a:	d105      	bne.n	8004888 <HAL_ADC_ConfigChannel+0x510>
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	0e9b      	lsrs	r3, r3, #26
 8004882:	f003 031f 	and.w	r3, r3, #31
 8004886:	e011      	b.n	80048ac <HAL_ADC_ConfigChannel+0x534>
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800488e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004890:	fa93 f3a3 	rbit	r3, r3
 8004894:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004896:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004898:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800489a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800489c:	2b00      	cmp	r3, #0
 800489e:	d101      	bne.n	80048a4 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 80048a0:	2320      	movs	r3, #32
 80048a2:	e003      	b.n	80048ac <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 80048a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80048a6:	fab3 f383 	clz	r3, r3
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d14f      	bne.n	8004950 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2200      	movs	r2, #0
 80048b6:	2103      	movs	r1, #3
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7ff fa0b 	bl	8003cd4 <LL_ADC_SetOffsetState>
 80048be:	e047      	b.n	8004950 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	069b      	lsls	r3, r3, #26
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d107      	bne.n	80048e4 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80048e2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	069b      	lsls	r3, r3, #26
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d107      	bne.n	8004908 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004906:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800490e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	069b      	lsls	r3, r3, #26
 8004918:	429a      	cmp	r2, r3
 800491a:	d107      	bne.n	800492c <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800492a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004932:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	069b      	lsls	r3, r3, #26
 800493c:	429a      	cmp	r2, r3
 800493e:	d107      	bne.n	8004950 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800494e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4618      	mov	r0, r3
 8004956:	f7ff facd 	bl	8003ef4 <LL_ADC_IsEnabled>
 800495a:	4603      	mov	r3, r0
 800495c:	2b00      	cmp	r3, #0
 800495e:	f040 8219 	bne.w	8004d94 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6818      	ldr	r0, [r3, #0]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	6819      	ldr	r1, [r3, #0]
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	461a      	mov	r2, r3
 8004970:	f7ff fa32 	bl	8003dd8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	4aa1      	ldr	r2, [pc, #644]	; (8004c00 <HAL_ADC_ConfigChannel+0x888>)
 800497a:	4293      	cmp	r3, r2
 800497c:	f040 812e 	bne.w	8004bdc <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10b      	bne.n	80049a8 <HAL_ADC_ConfigChannel+0x630>
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	0e9b      	lsrs	r3, r3, #26
 8004996:	3301      	adds	r3, #1
 8004998:	f003 031f 	and.w	r3, r3, #31
 800499c:	2b09      	cmp	r3, #9
 800499e:	bf94      	ite	ls
 80049a0:	2301      	movls	r3, #1
 80049a2:	2300      	movhi	r3, #0
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	e019      	b.n	80049dc <HAL_ADC_ConfigChannel+0x664>
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049b0:	fa93 f3a3 	rbit	r3, r3
 80049b4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80049b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80049ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d101      	bne.n	80049c4 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 80049c0:	2320      	movs	r3, #32
 80049c2:	e003      	b.n	80049cc <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 80049c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049c6:	fab3 f383 	clz	r3, r3
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	3301      	adds	r3, #1
 80049ce:	f003 031f 	and.w	r3, r3, #31
 80049d2:	2b09      	cmp	r3, #9
 80049d4:	bf94      	ite	ls
 80049d6:	2301      	movls	r3, #1
 80049d8:	2300      	movhi	r3, #0
 80049da:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d079      	beq.n	8004ad4 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d107      	bne.n	80049fc <HAL_ADC_ConfigChannel+0x684>
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	0e9b      	lsrs	r3, r3, #26
 80049f2:	3301      	adds	r3, #1
 80049f4:	069b      	lsls	r3, r3, #26
 80049f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80049fa:	e015      	b.n	8004a28 <HAL_ADC_ConfigChannel+0x6b0>
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a04:	fa93 f3a3 	rbit	r3, r3
 8004a08:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a0c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004a0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d101      	bne.n	8004a18 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004a14:	2320      	movs	r3, #32
 8004a16:	e003      	b.n	8004a20 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8004a18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a1a:	fab3 f383 	clz	r3, r3
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	3301      	adds	r3, #1
 8004a22:	069b      	lsls	r3, r3, #26
 8004a24:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d109      	bne.n	8004a48 <HAL_ADC_ConfigChannel+0x6d0>
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	0e9b      	lsrs	r3, r3, #26
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	f003 031f 	and.w	r3, r3, #31
 8004a40:	2101      	movs	r1, #1
 8004a42:	fa01 f303 	lsl.w	r3, r1, r3
 8004a46:	e017      	b.n	8004a78 <HAL_ADC_ConfigChannel+0x700>
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a50:	fa93 f3a3 	rbit	r3, r3
 8004a54:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a58:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004a5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d101      	bne.n	8004a64 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8004a60:	2320      	movs	r3, #32
 8004a62:	e003      	b.n	8004a6c <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8004a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a66:	fab3 f383 	clz	r3, r3
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	f003 031f 	and.w	r3, r3, #31
 8004a72:	2101      	movs	r1, #1
 8004a74:	fa01 f303 	lsl.w	r3, r1, r3
 8004a78:	ea42 0103 	orr.w	r1, r2, r3
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10a      	bne.n	8004a9e <HAL_ADC_ConfigChannel+0x726>
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	0e9b      	lsrs	r3, r3, #26
 8004a8e:	3301      	adds	r3, #1
 8004a90:	f003 021f 	and.w	r2, r3, #31
 8004a94:	4613      	mov	r3, r2
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	4413      	add	r3, r2
 8004a9a:	051b      	lsls	r3, r3, #20
 8004a9c:	e018      	b.n	8004ad0 <HAL_ADC_ConfigChannel+0x758>
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa6:	fa93 f3a3 	rbit	r3, r3
 8004aaa:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aae:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d101      	bne.n	8004aba <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8004ab6:	2320      	movs	r3, #32
 8004ab8:	e003      	b.n	8004ac2 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8004aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004abc:	fab3 f383 	clz	r3, r3
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	f003 021f 	and.w	r2, r3, #31
 8004ac8:	4613      	mov	r3, r2
 8004aca:	005b      	lsls	r3, r3, #1
 8004acc:	4413      	add	r3, r2
 8004ace:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ad0:	430b      	orrs	r3, r1
 8004ad2:	e07e      	b.n	8004bd2 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d107      	bne.n	8004af0 <HAL_ADC_ConfigChannel+0x778>
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	0e9b      	lsrs	r3, r3, #26
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	069b      	lsls	r3, r3, #26
 8004aea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004aee:	e015      	b.n	8004b1c <HAL_ADC_ConfigChannel+0x7a4>
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af8:	fa93 f3a3 	rbit	r3, r3
 8004afc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d101      	bne.n	8004b0c <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8004b08:	2320      	movs	r3, #32
 8004b0a:	e003      	b.n	8004b14 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b0e:	fab3 f383 	clz	r3, r3
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	3301      	adds	r3, #1
 8004b16:	069b      	lsls	r3, r3, #26
 8004b18:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d109      	bne.n	8004b3c <HAL_ADC_ConfigChannel+0x7c4>
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	0e9b      	lsrs	r3, r3, #26
 8004b2e:	3301      	adds	r3, #1
 8004b30:	f003 031f 	and.w	r3, r3, #31
 8004b34:	2101      	movs	r1, #1
 8004b36:	fa01 f303 	lsl.w	r3, r1, r3
 8004b3a:	e017      	b.n	8004b6c <HAL_ADC_ConfigChannel+0x7f4>
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	fa93 f3a3 	rbit	r3, r3
 8004b48:	61bb      	str	r3, [r7, #24]
  return result;
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004b4e:	6a3b      	ldr	r3, [r7, #32]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d101      	bne.n	8004b58 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004b54:	2320      	movs	r3, #32
 8004b56:	e003      	b.n	8004b60 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004b58:	6a3b      	ldr	r3, [r7, #32]
 8004b5a:	fab3 f383 	clz	r3, r3
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	3301      	adds	r3, #1
 8004b62:	f003 031f 	and.w	r3, r3, #31
 8004b66:	2101      	movs	r1, #1
 8004b68:	fa01 f303 	lsl.w	r3, r1, r3
 8004b6c:	ea42 0103 	orr.w	r1, r2, r3
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d10d      	bne.n	8004b98 <HAL_ADC_ConfigChannel+0x820>
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	0e9b      	lsrs	r3, r3, #26
 8004b82:	3301      	adds	r3, #1
 8004b84:	f003 021f 	and.w	r2, r3, #31
 8004b88:	4613      	mov	r3, r2
 8004b8a:	005b      	lsls	r3, r3, #1
 8004b8c:	4413      	add	r3, r2
 8004b8e:	3b1e      	subs	r3, #30
 8004b90:	051b      	lsls	r3, r3, #20
 8004b92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b96:	e01b      	b.n	8004bd0 <HAL_ADC_ConfigChannel+0x858>
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	fa93 f3a3 	rbit	r3, r3
 8004ba4:	60fb      	str	r3, [r7, #12]
  return result;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d101      	bne.n	8004bb4 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004bb0:	2320      	movs	r3, #32
 8004bb2:	e003      	b.n	8004bbc <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	fab3 f383 	clz	r3, r3
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	f003 021f 	and.w	r2, r3, #31
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	005b      	lsls	r3, r3, #1
 8004bc6:	4413      	add	r3, r2
 8004bc8:	3b1e      	subs	r3, #30
 8004bca:	051b      	lsls	r3, r3, #20
 8004bcc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bd0:	430b      	orrs	r3, r1
 8004bd2:	683a      	ldr	r2, [r7, #0]
 8004bd4:	6892      	ldr	r2, [r2, #8]
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	f7ff f8d2 	bl	8003d80 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f280 80d7 	bge.w	8004d94 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a06      	ldr	r2, [pc, #24]	; (8004c04 <HAL_ADC_ConfigChannel+0x88c>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d004      	beq.n	8004bfa <HAL_ADC_ConfigChannel+0x882>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a04      	ldr	r2, [pc, #16]	; (8004c08 <HAL_ADC_ConfigChannel+0x890>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d10a      	bne.n	8004c10 <HAL_ADC_ConfigChannel+0x898>
 8004bfa:	4b04      	ldr	r3, [pc, #16]	; (8004c0c <HAL_ADC_ConfigChannel+0x894>)
 8004bfc:	e009      	b.n	8004c12 <HAL_ADC_ConfigChannel+0x89a>
 8004bfe:	bf00      	nop
 8004c00:	47ff0000 	.word	0x47ff0000
 8004c04:	40022000 	.word	0x40022000
 8004c08:	40022100 	.word	0x40022100
 8004c0c:	40022300 	.word	0x40022300
 8004c10:	4b65      	ldr	r3, [pc, #404]	; (8004da8 <HAL_ADC_ConfigChannel+0xa30>)
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7fe ff88 	bl	8003b28 <LL_ADC_GetCommonPathInternalCh>
 8004c18:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a62      	ldr	r2, [pc, #392]	; (8004dac <HAL_ADC_ConfigChannel+0xa34>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d004      	beq.n	8004c30 <HAL_ADC_ConfigChannel+0x8b8>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a61      	ldr	r2, [pc, #388]	; (8004db0 <HAL_ADC_ConfigChannel+0xa38>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d10e      	bne.n	8004c4e <HAL_ADC_ConfigChannel+0x8d6>
 8004c30:	485e      	ldr	r0, [pc, #376]	; (8004dac <HAL_ADC_ConfigChannel+0xa34>)
 8004c32:	f7ff f95f 	bl	8003ef4 <LL_ADC_IsEnabled>
 8004c36:	4604      	mov	r4, r0
 8004c38:	485d      	ldr	r0, [pc, #372]	; (8004db0 <HAL_ADC_ConfigChannel+0xa38>)
 8004c3a:	f7ff f95b 	bl	8003ef4 <LL_ADC_IsEnabled>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	4323      	orrs	r3, r4
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	bf0c      	ite	eq
 8004c46:	2301      	moveq	r3, #1
 8004c48:	2300      	movne	r3, #0
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	e008      	b.n	8004c60 <HAL_ADC_ConfigChannel+0x8e8>
 8004c4e:	4859      	ldr	r0, [pc, #356]	; (8004db4 <HAL_ADC_ConfigChannel+0xa3c>)
 8004c50:	f7ff f950 	bl	8003ef4 <LL_ADC_IsEnabled>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	bf0c      	ite	eq
 8004c5a:	2301      	moveq	r3, #1
 8004c5c:	2300      	movne	r3, #0
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f000 8084 	beq.w	8004d6e <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a53      	ldr	r2, [pc, #332]	; (8004db8 <HAL_ADC_ConfigChannel+0xa40>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d132      	bne.n	8004cd6 <HAL_ADC_ConfigChannel+0x95e>
 8004c70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d12c      	bne.n	8004cd6 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a4c      	ldr	r2, [pc, #304]	; (8004db4 <HAL_ADC_ConfigChannel+0xa3c>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	f040 8086 	bne.w	8004d94 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a47      	ldr	r2, [pc, #284]	; (8004dac <HAL_ADC_ConfigChannel+0xa34>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d004      	beq.n	8004c9c <HAL_ADC_ConfigChannel+0x924>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a46      	ldr	r2, [pc, #280]	; (8004db0 <HAL_ADC_ConfigChannel+0xa38>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d101      	bne.n	8004ca0 <HAL_ADC_ConfigChannel+0x928>
 8004c9c:	4a47      	ldr	r2, [pc, #284]	; (8004dbc <HAL_ADC_ConfigChannel+0xa44>)
 8004c9e:	e000      	b.n	8004ca2 <HAL_ADC_ConfigChannel+0x92a>
 8004ca0:	4a41      	ldr	r2, [pc, #260]	; (8004da8 <HAL_ADC_ConfigChannel+0xa30>)
 8004ca2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ca6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004caa:	4619      	mov	r1, r3
 8004cac:	4610      	mov	r0, r2
 8004cae:	f7fe ff28 	bl	8003b02 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004cb2:	4b43      	ldr	r3, [pc, #268]	; (8004dc0 <HAL_ADC_ConfigChannel+0xa48>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	099b      	lsrs	r3, r3, #6
 8004cb8:	4a42      	ldr	r2, [pc, #264]	; (8004dc4 <HAL_ADC_ConfigChannel+0xa4c>)
 8004cba:	fba2 2303 	umull	r2, r3, r2, r3
 8004cbe:	099b      	lsrs	r3, r3, #6
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	005b      	lsls	r3, r3, #1
 8004cc4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004cc6:	e002      	b.n	8004cce <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1f9      	bne.n	8004cc8 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004cd4:	e05e      	b.n	8004d94 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a3b      	ldr	r2, [pc, #236]	; (8004dc8 <HAL_ADC_ConfigChannel+0xa50>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d120      	bne.n	8004d22 <HAL_ADC_ConfigChannel+0x9aa>
 8004ce0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ce4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d11a      	bne.n	8004d22 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a30      	ldr	r2, [pc, #192]	; (8004db4 <HAL_ADC_ConfigChannel+0xa3c>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d14e      	bne.n	8004d94 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a2c      	ldr	r2, [pc, #176]	; (8004dac <HAL_ADC_ConfigChannel+0xa34>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d004      	beq.n	8004d0a <HAL_ADC_ConfigChannel+0x992>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a2a      	ldr	r2, [pc, #168]	; (8004db0 <HAL_ADC_ConfigChannel+0xa38>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d101      	bne.n	8004d0e <HAL_ADC_ConfigChannel+0x996>
 8004d0a:	4a2c      	ldr	r2, [pc, #176]	; (8004dbc <HAL_ADC_ConfigChannel+0xa44>)
 8004d0c:	e000      	b.n	8004d10 <HAL_ADC_ConfigChannel+0x998>
 8004d0e:	4a26      	ldr	r2, [pc, #152]	; (8004da8 <HAL_ADC_ConfigChannel+0xa30>)
 8004d10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d18:	4619      	mov	r1, r3
 8004d1a:	4610      	mov	r0, r2
 8004d1c:	f7fe fef1 	bl	8003b02 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d20:	e038      	b.n	8004d94 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a29      	ldr	r2, [pc, #164]	; (8004dcc <HAL_ADC_ConfigChannel+0xa54>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d133      	bne.n	8004d94 <HAL_ADC_ConfigChannel+0xa1c>
 8004d2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d12d      	bne.n	8004d94 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a1d      	ldr	r2, [pc, #116]	; (8004db4 <HAL_ADC_ConfigChannel+0xa3c>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d128      	bne.n	8004d94 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a19      	ldr	r2, [pc, #100]	; (8004dac <HAL_ADC_ConfigChannel+0xa34>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d004      	beq.n	8004d56 <HAL_ADC_ConfigChannel+0x9de>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a17      	ldr	r2, [pc, #92]	; (8004db0 <HAL_ADC_ConfigChannel+0xa38>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d101      	bne.n	8004d5a <HAL_ADC_ConfigChannel+0x9e2>
 8004d56:	4a19      	ldr	r2, [pc, #100]	; (8004dbc <HAL_ADC_ConfigChannel+0xa44>)
 8004d58:	e000      	b.n	8004d5c <HAL_ADC_ConfigChannel+0x9e4>
 8004d5a:	4a13      	ldr	r2, [pc, #76]	; (8004da8 <HAL_ADC_ConfigChannel+0xa30>)
 8004d5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004d60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d64:	4619      	mov	r1, r3
 8004d66:	4610      	mov	r0, r2
 8004d68:	f7fe fecb 	bl	8003b02 <LL_ADC_SetCommonPathInternalCh>
 8004d6c:	e012      	b.n	8004d94 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d72:	f043 0220 	orr.w	r2, r3, #32
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8004d80:	e008      	b.n	8004d94 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d86:	f043 0220 	orr.w	r2, r3, #32
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004d9c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	37e4      	adds	r7, #228	; 0xe4
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd90      	pop	{r4, r7, pc}
 8004da8:	58026300 	.word	0x58026300
 8004dac:	40022000 	.word	0x40022000
 8004db0:	40022100 	.word	0x40022100
 8004db4:	58026000 	.word	0x58026000
 8004db8:	c7520000 	.word	0xc7520000
 8004dbc:	40022300 	.word	0x40022300
 8004dc0:	24000000 	.word	0x24000000
 8004dc4:	053e2d63 	.word	0x053e2d63
 8004dc8:	c3210000 	.word	0xc3210000
 8004dcc:	cb840000 	.word	0xcb840000

08004dd0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a6c      	ldr	r2, [pc, #432]	; (8004f90 <ADC_ConfigureBoostMode+0x1c0>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d004      	beq.n	8004dec <ADC_ConfigureBoostMode+0x1c>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a6b      	ldr	r2, [pc, #428]	; (8004f94 <ADC_ConfigureBoostMode+0x1c4>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d109      	bne.n	8004e00 <ADC_ConfigureBoostMode+0x30>
 8004dec:	4b6a      	ldr	r3, [pc, #424]	; (8004f98 <ADC_ConfigureBoostMode+0x1c8>)
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	bf14      	ite	ne
 8004df8:	2301      	movne	r3, #1
 8004dfa:	2300      	moveq	r3, #0
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	e008      	b.n	8004e12 <ADC_ConfigureBoostMode+0x42>
 8004e00:	4b66      	ldr	r3, [pc, #408]	; (8004f9c <ADC_ConfigureBoostMode+0x1cc>)
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	bf14      	ite	ne
 8004e0c:	2301      	movne	r3, #1
 8004e0e:	2300      	moveq	r3, #0
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d01c      	beq.n	8004e50 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004e16:	f005 fcab 	bl	800a770 <HAL_RCC_GetHCLKFreq>
 8004e1a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e24:	d010      	beq.n	8004e48 <ADC_ConfigureBoostMode+0x78>
 8004e26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004e2a:	d873      	bhi.n	8004f14 <ADC_ConfigureBoostMode+0x144>
 8004e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e30:	d002      	beq.n	8004e38 <ADC_ConfigureBoostMode+0x68>
 8004e32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e36:	d16d      	bne.n	8004f14 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	0c1b      	lsrs	r3, r3, #16
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e44:	60fb      	str	r3, [r7, #12]
        break;
 8004e46:	e068      	b.n	8004f1a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	089b      	lsrs	r3, r3, #2
 8004e4c:	60fb      	str	r3, [r7, #12]
        break;
 8004e4e:	e064      	b.n	8004f1a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004e50:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004e54:	f04f 0100 	mov.w	r1, #0
 8004e58:	f006 fe86 	bl	800bb68 <HAL_RCCEx_GetPeriphCLKFreq>
 8004e5c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004e66:	d051      	beq.n	8004f0c <ADC_ConfigureBoostMode+0x13c>
 8004e68:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004e6c:	d854      	bhi.n	8004f18 <ADC_ConfigureBoostMode+0x148>
 8004e6e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004e72:	d047      	beq.n	8004f04 <ADC_ConfigureBoostMode+0x134>
 8004e74:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004e78:	d84e      	bhi.n	8004f18 <ADC_ConfigureBoostMode+0x148>
 8004e7a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004e7e:	d03d      	beq.n	8004efc <ADC_ConfigureBoostMode+0x12c>
 8004e80:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004e84:	d848      	bhi.n	8004f18 <ADC_ConfigureBoostMode+0x148>
 8004e86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e8a:	d033      	beq.n	8004ef4 <ADC_ConfigureBoostMode+0x124>
 8004e8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e90:	d842      	bhi.n	8004f18 <ADC_ConfigureBoostMode+0x148>
 8004e92:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004e96:	d029      	beq.n	8004eec <ADC_ConfigureBoostMode+0x11c>
 8004e98:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004e9c:	d83c      	bhi.n	8004f18 <ADC_ConfigureBoostMode+0x148>
 8004e9e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004ea2:	d01a      	beq.n	8004eda <ADC_ConfigureBoostMode+0x10a>
 8004ea4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004ea8:	d836      	bhi.n	8004f18 <ADC_ConfigureBoostMode+0x148>
 8004eaa:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004eae:	d014      	beq.n	8004eda <ADC_ConfigureBoostMode+0x10a>
 8004eb0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004eb4:	d830      	bhi.n	8004f18 <ADC_ConfigureBoostMode+0x148>
 8004eb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004eba:	d00e      	beq.n	8004eda <ADC_ConfigureBoostMode+0x10a>
 8004ebc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ec0:	d82a      	bhi.n	8004f18 <ADC_ConfigureBoostMode+0x148>
 8004ec2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004ec6:	d008      	beq.n	8004eda <ADC_ConfigureBoostMode+0x10a>
 8004ec8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004ecc:	d824      	bhi.n	8004f18 <ADC_ConfigureBoostMode+0x148>
 8004ece:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ed2:	d002      	beq.n	8004eda <ADC_ConfigureBoostMode+0x10a>
 8004ed4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ed8:	d11e      	bne.n	8004f18 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	0c9b      	lsrs	r3, r3, #18
 8004ee0:	005b      	lsls	r3, r3, #1
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee8:	60fb      	str	r3, [r7, #12]
        break;
 8004eea:	e016      	b.n	8004f1a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	091b      	lsrs	r3, r3, #4
 8004ef0:	60fb      	str	r3, [r7, #12]
        break;
 8004ef2:	e012      	b.n	8004f1a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	095b      	lsrs	r3, r3, #5
 8004ef8:	60fb      	str	r3, [r7, #12]
        break;
 8004efa:	e00e      	b.n	8004f1a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	099b      	lsrs	r3, r3, #6
 8004f00:	60fb      	str	r3, [r7, #12]
        break;
 8004f02:	e00a      	b.n	8004f1a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	09db      	lsrs	r3, r3, #7
 8004f08:	60fb      	str	r3, [r7, #12]
        break;
 8004f0a:	e006      	b.n	8004f1a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	0a1b      	lsrs	r3, r3, #8
 8004f10:	60fb      	str	r3, [r7, #12]
        break;
 8004f12:	e002      	b.n	8004f1a <ADC_ConfigureBoostMode+0x14a>
        break;
 8004f14:	bf00      	nop
 8004f16:	e000      	b.n	8004f1a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004f18:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	085b      	lsrs	r3, r3, #1
 8004f1e:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	4a1f      	ldr	r2, [pc, #124]	; (8004fa0 <ADC_ConfigureBoostMode+0x1d0>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d808      	bhi.n	8004f3a <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	689a      	ldr	r2, [r3, #8]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004f36:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004f38:	e025      	b.n	8004f86 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	4a19      	ldr	r2, [pc, #100]	; (8004fa4 <ADC_ConfigureBoostMode+0x1d4>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d80a      	bhi.n	8004f58 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f54:	609a      	str	r2, [r3, #8]
}
 8004f56:	e016      	b.n	8004f86 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	4a13      	ldr	r2, [pc, #76]	; (8004fa8 <ADC_ConfigureBoostMode+0x1d8>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d80a      	bhi.n	8004f76 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f72:	609a      	str	r2, [r3, #8]
}
 8004f74:	e007      	b.n	8004f86 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	689a      	ldr	r2, [r3, #8]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004f84:	609a      	str	r2, [r3, #8]
}
 8004f86:	bf00      	nop
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	40022000 	.word	0x40022000
 8004f94:	40022100 	.word	0x40022100
 8004f98:	40022300 	.word	0x40022300
 8004f9c:	58026300 	.word	0x58026300
 8004fa0:	005f5e10 	.word	0x005f5e10
 8004fa4:	00bebc20 	.word	0x00bebc20
 8004fa8:	017d7840 	.word	0x017d7840

08004fac <LL_ADC_IsEnabled>:
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d101      	bne.n	8004fc4 <LL_ADC_IsEnabled+0x18>
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e000      	b.n	8004fc6 <LL_ADC_IsEnabled+0x1a>
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	370c      	adds	r7, #12
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr

08004fd2 <LL_ADC_REG_IsConversionOngoing>:
{
 8004fd2:	b480      	push	{r7}
 8004fd4:	b083      	sub	sp, #12
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f003 0304 	and.w	r3, r3, #4
 8004fe2:	2b04      	cmp	r3, #4
 8004fe4:	d101      	bne.n	8004fea <LL_ADC_REG_IsConversionOngoing+0x18>
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e000      	b.n	8004fec <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004fea:	2300      	movs	r3, #0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004ff8:	b590      	push	{r4, r7, lr}
 8004ffa:	b0a3      	sub	sp, #140	; 0x8c
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005002:	2300      	movs	r3, #0
 8005004:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800500e:	2b01      	cmp	r3, #1
 8005010:	d101      	bne.n	8005016 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005012:	2302      	movs	r3, #2
 8005014:	e0c1      	b.n	800519a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800501e:	2300      	movs	r3, #0
 8005020:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005022:	2300      	movs	r3, #0
 8005024:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a5e      	ldr	r2, [pc, #376]	; (80051a4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d102      	bne.n	8005036 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005030:	4b5d      	ldr	r3, [pc, #372]	; (80051a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005032:	60fb      	str	r3, [r7, #12]
 8005034:	e001      	b.n	800503a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005036:	2300      	movs	r3, #0
 8005038:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10b      	bne.n	8005058 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005044:	f043 0220 	orr.w	r2, r3, #32
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e0a0      	b.n	800519a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	4618      	mov	r0, r3
 800505c:	f7ff ffb9 	bl	8004fd2 <LL_ADC_REG_IsConversionOngoing>
 8005060:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4618      	mov	r0, r3
 800506a:	f7ff ffb2 	bl	8004fd2 <LL_ADC_REG_IsConversionOngoing>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	f040 8081 	bne.w	8005178 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005076:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800507a:	2b00      	cmp	r3, #0
 800507c:	d17c      	bne.n	8005178 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a48      	ldr	r2, [pc, #288]	; (80051a4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d004      	beq.n	8005092 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a46      	ldr	r2, [pc, #280]	; (80051a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d101      	bne.n	8005096 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8005092:	4b46      	ldr	r3, [pc, #280]	; (80051ac <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005094:	e000      	b.n	8005098 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8005096:	4b46      	ldr	r3, [pc, #280]	; (80051b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005098:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d039      	beq.n	8005116 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80050a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	431a      	orrs	r2, r3
 80050b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050b2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a3a      	ldr	r2, [pc, #232]	; (80051a4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d004      	beq.n	80050c8 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a39      	ldr	r2, [pc, #228]	; (80051a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d10e      	bne.n	80050e6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80050c8:	4836      	ldr	r0, [pc, #216]	; (80051a4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80050ca:	f7ff ff6f 	bl	8004fac <LL_ADC_IsEnabled>
 80050ce:	4604      	mov	r4, r0
 80050d0:	4835      	ldr	r0, [pc, #212]	; (80051a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80050d2:	f7ff ff6b 	bl	8004fac <LL_ADC_IsEnabled>
 80050d6:	4603      	mov	r3, r0
 80050d8:	4323      	orrs	r3, r4
 80050da:	2b00      	cmp	r3, #0
 80050dc:	bf0c      	ite	eq
 80050de:	2301      	moveq	r3, #1
 80050e0:	2300      	movne	r3, #0
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	e008      	b.n	80050f8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80050e6:	4833      	ldr	r0, [pc, #204]	; (80051b4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80050e8:	f7ff ff60 	bl	8004fac <LL_ADC_IsEnabled>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	bf0c      	ite	eq
 80050f2:	2301      	moveq	r3, #1
 80050f4:	2300      	movne	r3, #0
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d047      	beq.n	800518c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80050fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	4b2d      	ldr	r3, [pc, #180]	; (80051b8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005102:	4013      	ands	r3, r2
 8005104:	683a      	ldr	r2, [r7, #0]
 8005106:	6811      	ldr	r1, [r2, #0]
 8005108:	683a      	ldr	r2, [r7, #0]
 800510a:	6892      	ldr	r2, [r2, #8]
 800510c:	430a      	orrs	r2, r1
 800510e:	431a      	orrs	r2, r3
 8005110:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005112:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005114:	e03a      	b.n	800518c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005116:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800511e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005120:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a1f      	ldr	r2, [pc, #124]	; (80051a4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d004      	beq.n	8005136 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a1d      	ldr	r2, [pc, #116]	; (80051a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d10e      	bne.n	8005154 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8005136:	481b      	ldr	r0, [pc, #108]	; (80051a4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005138:	f7ff ff38 	bl	8004fac <LL_ADC_IsEnabled>
 800513c:	4604      	mov	r4, r0
 800513e:	481a      	ldr	r0, [pc, #104]	; (80051a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005140:	f7ff ff34 	bl	8004fac <LL_ADC_IsEnabled>
 8005144:	4603      	mov	r3, r0
 8005146:	4323      	orrs	r3, r4
 8005148:	2b00      	cmp	r3, #0
 800514a:	bf0c      	ite	eq
 800514c:	2301      	moveq	r3, #1
 800514e:	2300      	movne	r3, #0
 8005150:	b2db      	uxtb	r3, r3
 8005152:	e008      	b.n	8005166 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8005154:	4817      	ldr	r0, [pc, #92]	; (80051b4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005156:	f7ff ff29 	bl	8004fac <LL_ADC_IsEnabled>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	bf0c      	ite	eq
 8005160:	2301      	moveq	r3, #1
 8005162:	2300      	movne	r3, #0
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d010      	beq.n	800518c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800516a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800516c:	689a      	ldr	r2, [r3, #8]
 800516e:	4b12      	ldr	r3, [pc, #72]	; (80051b8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005170:	4013      	ands	r3, r2
 8005172:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005174:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005176:	e009      	b.n	800518c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800517c:	f043 0220 	orr.w	r2, r3, #32
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800518a:	e000      	b.n	800518e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800518c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005196:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800519a:	4618      	mov	r0, r3
 800519c:	378c      	adds	r7, #140	; 0x8c
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd90      	pop	{r4, r7, pc}
 80051a2:	bf00      	nop
 80051a4:	40022000 	.word	0x40022000
 80051a8:	40022100 	.word	0x40022100
 80051ac:	40022300 	.word	0x40022300
 80051b0:	58026300 	.word	0x58026300
 80051b4:	58026000 	.word	0x58026000
 80051b8:	fffff0e0 	.word	0xfffff0e0

080051bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051bc:	b480      	push	{r7}
 80051be:	b085      	sub	sp, #20
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f003 0307 	and.w	r3, r3, #7
 80051ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80051cc:	4b0b      	ldr	r3, [pc, #44]	; (80051fc <__NVIC_SetPriorityGrouping+0x40>)
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80051d2:	68ba      	ldr	r2, [r7, #8]
 80051d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80051d8:	4013      	ands	r3, r2
 80051da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80051e4:	4b06      	ldr	r3, [pc, #24]	; (8005200 <__NVIC_SetPriorityGrouping+0x44>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80051ea:	4a04      	ldr	r2, [pc, #16]	; (80051fc <__NVIC_SetPriorityGrouping+0x40>)
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	60d3      	str	r3, [r2, #12]
}
 80051f0:	bf00      	nop
 80051f2:	3714      	adds	r7, #20
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr
 80051fc:	e000ed00 	.word	0xe000ed00
 8005200:	05fa0000 	.word	0x05fa0000

08005204 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005204:	b480      	push	{r7}
 8005206:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005208:	4b04      	ldr	r3, [pc, #16]	; (800521c <__NVIC_GetPriorityGrouping+0x18>)
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	0a1b      	lsrs	r3, r3, #8
 800520e:	f003 0307 	and.w	r3, r3, #7
}
 8005212:	4618      	mov	r0, r3
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr
 800521c:	e000ed00 	.word	0xe000ed00

08005220 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	4603      	mov	r3, r0
 8005228:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800522a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800522e:	2b00      	cmp	r3, #0
 8005230:	db0b      	blt.n	800524a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005232:	88fb      	ldrh	r3, [r7, #6]
 8005234:	f003 021f 	and.w	r2, r3, #31
 8005238:	4907      	ldr	r1, [pc, #28]	; (8005258 <__NVIC_EnableIRQ+0x38>)
 800523a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800523e:	095b      	lsrs	r3, r3, #5
 8005240:	2001      	movs	r0, #1
 8005242:	fa00 f202 	lsl.w	r2, r0, r2
 8005246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800524a:	bf00      	nop
 800524c:	370c      	adds	r7, #12
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	e000e100 	.word	0xe000e100

0800525c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	4603      	mov	r3, r0
 8005264:	6039      	str	r1, [r7, #0]
 8005266:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005268:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800526c:	2b00      	cmp	r3, #0
 800526e:	db0a      	blt.n	8005286 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	b2da      	uxtb	r2, r3
 8005274:	490c      	ldr	r1, [pc, #48]	; (80052a8 <__NVIC_SetPriority+0x4c>)
 8005276:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800527a:	0112      	lsls	r2, r2, #4
 800527c:	b2d2      	uxtb	r2, r2
 800527e:	440b      	add	r3, r1
 8005280:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005284:	e00a      	b.n	800529c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	b2da      	uxtb	r2, r3
 800528a:	4908      	ldr	r1, [pc, #32]	; (80052ac <__NVIC_SetPriority+0x50>)
 800528c:	88fb      	ldrh	r3, [r7, #6]
 800528e:	f003 030f 	and.w	r3, r3, #15
 8005292:	3b04      	subs	r3, #4
 8005294:	0112      	lsls	r2, r2, #4
 8005296:	b2d2      	uxtb	r2, r2
 8005298:	440b      	add	r3, r1
 800529a:	761a      	strb	r2, [r3, #24]
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr
 80052a8:	e000e100 	.word	0xe000e100
 80052ac:	e000ed00 	.word	0xe000ed00

080052b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b089      	sub	sp, #36	; 0x24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f003 0307 	and.w	r3, r3, #7
 80052c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	f1c3 0307 	rsb	r3, r3, #7
 80052ca:	2b04      	cmp	r3, #4
 80052cc:	bf28      	it	cs
 80052ce:	2304      	movcs	r3, #4
 80052d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	3304      	adds	r3, #4
 80052d6:	2b06      	cmp	r3, #6
 80052d8:	d902      	bls.n	80052e0 <NVIC_EncodePriority+0x30>
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	3b03      	subs	r3, #3
 80052de:	e000      	b.n	80052e2 <NVIC_EncodePriority+0x32>
 80052e0:	2300      	movs	r3, #0
 80052e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80052e4:	f04f 32ff 	mov.w	r2, #4294967295
 80052e8:	69bb      	ldr	r3, [r7, #24]
 80052ea:	fa02 f303 	lsl.w	r3, r2, r3
 80052ee:	43da      	mvns	r2, r3
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	401a      	ands	r2, r3
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80052f8:	f04f 31ff 	mov.w	r1, #4294967295
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005302:	43d9      	mvns	r1, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005308:	4313      	orrs	r3, r2
         );
}
 800530a:	4618      	mov	r0, r3
 800530c:	3724      	adds	r7, #36	; 0x24
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
	...

08005318 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	3b01      	subs	r3, #1
 8005324:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005328:	d301      	bcc.n	800532e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800532a:	2301      	movs	r3, #1
 800532c:	e00f      	b.n	800534e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800532e:	4a0a      	ldr	r2, [pc, #40]	; (8005358 <SysTick_Config+0x40>)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	3b01      	subs	r3, #1
 8005334:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005336:	210f      	movs	r1, #15
 8005338:	f04f 30ff 	mov.w	r0, #4294967295
 800533c:	f7ff ff8e 	bl	800525c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005340:	4b05      	ldr	r3, [pc, #20]	; (8005358 <SysTick_Config+0x40>)
 8005342:	2200      	movs	r2, #0
 8005344:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005346:	4b04      	ldr	r3, [pc, #16]	; (8005358 <SysTick_Config+0x40>)
 8005348:	2207      	movs	r2, #7
 800534a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3708      	adds	r7, #8
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	e000e010 	.word	0xe000e010

0800535c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f7ff ff29 	bl	80051bc <__NVIC_SetPriorityGrouping>
}
 800536a:	bf00      	nop
 800536c:	3708      	adds	r7, #8
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b086      	sub	sp, #24
 8005376:	af00      	add	r7, sp, #0
 8005378:	4603      	mov	r3, r0
 800537a:	60b9      	str	r1, [r7, #8]
 800537c:	607a      	str	r2, [r7, #4]
 800537e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005380:	f7ff ff40 	bl	8005204 <__NVIC_GetPriorityGrouping>
 8005384:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	68b9      	ldr	r1, [r7, #8]
 800538a:	6978      	ldr	r0, [r7, #20]
 800538c:	f7ff ff90 	bl	80052b0 <NVIC_EncodePriority>
 8005390:	4602      	mov	r2, r0
 8005392:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005396:	4611      	mov	r1, r2
 8005398:	4618      	mov	r0, r3
 800539a:	f7ff ff5f 	bl	800525c <__NVIC_SetPriority>
}
 800539e:	bf00      	nop
 80053a0:	3718      	adds	r7, #24
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b082      	sub	sp, #8
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	4603      	mov	r3, r0
 80053ae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80053b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053b4:	4618      	mov	r0, r3
 80053b6:	f7ff ff33 	bl	8005220 <__NVIC_EnableIRQ>
}
 80053ba:	bf00      	nop
 80053bc:	3708      	adds	r7, #8
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b082      	sub	sp, #8
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f7ff ffa4 	bl	8005318 <SysTick_Config>
 80053d0:	4603      	mov	r3, r0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3708      	adds	r7, #8
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
	...

080053dc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80053e4:	f7fe fb34 	bl	8003a50 <HAL_GetTick>
 80053e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d101      	bne.n	80053f4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e312      	b.n	8005a1a <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a66      	ldr	r2, [pc, #408]	; (8005594 <HAL_DMA_Init+0x1b8>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d04a      	beq.n	8005494 <HAL_DMA_Init+0xb8>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a65      	ldr	r2, [pc, #404]	; (8005598 <HAL_DMA_Init+0x1bc>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d045      	beq.n	8005494 <HAL_DMA_Init+0xb8>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a63      	ldr	r2, [pc, #396]	; (800559c <HAL_DMA_Init+0x1c0>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d040      	beq.n	8005494 <HAL_DMA_Init+0xb8>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a62      	ldr	r2, [pc, #392]	; (80055a0 <HAL_DMA_Init+0x1c4>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d03b      	beq.n	8005494 <HAL_DMA_Init+0xb8>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a60      	ldr	r2, [pc, #384]	; (80055a4 <HAL_DMA_Init+0x1c8>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d036      	beq.n	8005494 <HAL_DMA_Init+0xb8>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a5f      	ldr	r2, [pc, #380]	; (80055a8 <HAL_DMA_Init+0x1cc>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d031      	beq.n	8005494 <HAL_DMA_Init+0xb8>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a5d      	ldr	r2, [pc, #372]	; (80055ac <HAL_DMA_Init+0x1d0>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d02c      	beq.n	8005494 <HAL_DMA_Init+0xb8>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a5c      	ldr	r2, [pc, #368]	; (80055b0 <HAL_DMA_Init+0x1d4>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d027      	beq.n	8005494 <HAL_DMA_Init+0xb8>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a5a      	ldr	r2, [pc, #360]	; (80055b4 <HAL_DMA_Init+0x1d8>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d022      	beq.n	8005494 <HAL_DMA_Init+0xb8>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a59      	ldr	r2, [pc, #356]	; (80055b8 <HAL_DMA_Init+0x1dc>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d01d      	beq.n	8005494 <HAL_DMA_Init+0xb8>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a57      	ldr	r2, [pc, #348]	; (80055bc <HAL_DMA_Init+0x1e0>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d018      	beq.n	8005494 <HAL_DMA_Init+0xb8>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a56      	ldr	r2, [pc, #344]	; (80055c0 <HAL_DMA_Init+0x1e4>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d013      	beq.n	8005494 <HAL_DMA_Init+0xb8>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a54      	ldr	r2, [pc, #336]	; (80055c4 <HAL_DMA_Init+0x1e8>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d00e      	beq.n	8005494 <HAL_DMA_Init+0xb8>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a53      	ldr	r2, [pc, #332]	; (80055c8 <HAL_DMA_Init+0x1ec>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d009      	beq.n	8005494 <HAL_DMA_Init+0xb8>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a51      	ldr	r2, [pc, #324]	; (80055cc <HAL_DMA_Init+0x1f0>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d004      	beq.n	8005494 <HAL_DMA_Init+0xb8>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a50      	ldr	r2, [pc, #320]	; (80055d0 <HAL_DMA_Init+0x1f4>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d101      	bne.n	8005498 <HAL_DMA_Init+0xbc>
 8005494:	2301      	movs	r3, #1
 8005496:	e000      	b.n	800549a <HAL_DMA_Init+0xbe>
 8005498:	2300      	movs	r3, #0
 800549a:	2b00      	cmp	r3, #0
 800549c:	f000 813c 	beq.w	8005718 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2202      	movs	r2, #2
 80054a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a37      	ldr	r2, [pc, #220]	; (8005594 <HAL_DMA_Init+0x1b8>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d04a      	beq.n	8005550 <HAL_DMA_Init+0x174>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a36      	ldr	r2, [pc, #216]	; (8005598 <HAL_DMA_Init+0x1bc>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d045      	beq.n	8005550 <HAL_DMA_Init+0x174>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a34      	ldr	r2, [pc, #208]	; (800559c <HAL_DMA_Init+0x1c0>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d040      	beq.n	8005550 <HAL_DMA_Init+0x174>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a33      	ldr	r2, [pc, #204]	; (80055a0 <HAL_DMA_Init+0x1c4>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d03b      	beq.n	8005550 <HAL_DMA_Init+0x174>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a31      	ldr	r2, [pc, #196]	; (80055a4 <HAL_DMA_Init+0x1c8>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d036      	beq.n	8005550 <HAL_DMA_Init+0x174>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a30      	ldr	r2, [pc, #192]	; (80055a8 <HAL_DMA_Init+0x1cc>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d031      	beq.n	8005550 <HAL_DMA_Init+0x174>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a2e      	ldr	r2, [pc, #184]	; (80055ac <HAL_DMA_Init+0x1d0>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d02c      	beq.n	8005550 <HAL_DMA_Init+0x174>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a2d      	ldr	r2, [pc, #180]	; (80055b0 <HAL_DMA_Init+0x1d4>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d027      	beq.n	8005550 <HAL_DMA_Init+0x174>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a2b      	ldr	r2, [pc, #172]	; (80055b4 <HAL_DMA_Init+0x1d8>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d022      	beq.n	8005550 <HAL_DMA_Init+0x174>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a2a      	ldr	r2, [pc, #168]	; (80055b8 <HAL_DMA_Init+0x1dc>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d01d      	beq.n	8005550 <HAL_DMA_Init+0x174>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a28      	ldr	r2, [pc, #160]	; (80055bc <HAL_DMA_Init+0x1e0>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d018      	beq.n	8005550 <HAL_DMA_Init+0x174>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a27      	ldr	r2, [pc, #156]	; (80055c0 <HAL_DMA_Init+0x1e4>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d013      	beq.n	8005550 <HAL_DMA_Init+0x174>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a25      	ldr	r2, [pc, #148]	; (80055c4 <HAL_DMA_Init+0x1e8>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d00e      	beq.n	8005550 <HAL_DMA_Init+0x174>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a24      	ldr	r2, [pc, #144]	; (80055c8 <HAL_DMA_Init+0x1ec>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d009      	beq.n	8005550 <HAL_DMA_Init+0x174>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a22      	ldr	r2, [pc, #136]	; (80055cc <HAL_DMA_Init+0x1f0>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d004      	beq.n	8005550 <HAL_DMA_Init+0x174>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a21      	ldr	r2, [pc, #132]	; (80055d0 <HAL_DMA_Init+0x1f4>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d108      	bne.n	8005562 <HAL_DMA_Init+0x186>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f022 0201 	bic.w	r2, r2, #1
 800555e:	601a      	str	r2, [r3, #0]
 8005560:	e007      	b.n	8005572 <HAL_DMA_Init+0x196>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f022 0201 	bic.w	r2, r2, #1
 8005570:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005572:	e02f      	b.n	80055d4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005574:	f7fe fa6c 	bl	8003a50 <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b05      	cmp	r3, #5
 8005580:	d928      	bls.n	80055d4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2220      	movs	r2, #32
 8005586:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2203      	movs	r2, #3
 800558c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e242      	b.n	8005a1a <HAL_DMA_Init+0x63e>
 8005594:	40020010 	.word	0x40020010
 8005598:	40020028 	.word	0x40020028
 800559c:	40020040 	.word	0x40020040
 80055a0:	40020058 	.word	0x40020058
 80055a4:	40020070 	.word	0x40020070
 80055a8:	40020088 	.word	0x40020088
 80055ac:	400200a0 	.word	0x400200a0
 80055b0:	400200b8 	.word	0x400200b8
 80055b4:	40020410 	.word	0x40020410
 80055b8:	40020428 	.word	0x40020428
 80055bc:	40020440 	.word	0x40020440
 80055c0:	40020458 	.word	0x40020458
 80055c4:	40020470 	.word	0x40020470
 80055c8:	40020488 	.word	0x40020488
 80055cc:	400204a0 	.word	0x400204a0
 80055d0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1c8      	bne.n	8005574 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	4b83      	ldr	r3, [pc, #524]	; (80057fc <HAL_DMA_Init+0x420>)
 80055ee:	4013      	ands	r3, r2
 80055f0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80055fa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005606:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005612:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a1b      	ldr	r3, [r3, #32]
 8005618:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	4313      	orrs	r3, r2
 800561e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005624:	2b04      	cmp	r3, #4
 8005626:	d107      	bne.n	8005638 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005630:	4313      	orrs	r3, r2
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	4313      	orrs	r3, r2
 8005636:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	2b28      	cmp	r3, #40	; 0x28
 800563e:	d903      	bls.n	8005648 <HAL_DMA_Init+0x26c>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	2b2e      	cmp	r3, #46	; 0x2e
 8005646:	d91f      	bls.n	8005688 <HAL_DMA_Init+0x2ac>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	2b3e      	cmp	r3, #62	; 0x3e
 800564e:	d903      	bls.n	8005658 <HAL_DMA_Init+0x27c>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	2b42      	cmp	r3, #66	; 0x42
 8005656:	d917      	bls.n	8005688 <HAL_DMA_Init+0x2ac>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	2b46      	cmp	r3, #70	; 0x46
 800565e:	d903      	bls.n	8005668 <HAL_DMA_Init+0x28c>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	2b48      	cmp	r3, #72	; 0x48
 8005666:	d90f      	bls.n	8005688 <HAL_DMA_Init+0x2ac>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	2b4e      	cmp	r3, #78	; 0x4e
 800566e:	d903      	bls.n	8005678 <HAL_DMA_Init+0x29c>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	2b52      	cmp	r3, #82	; 0x52
 8005676:	d907      	bls.n	8005688 <HAL_DMA_Init+0x2ac>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	2b73      	cmp	r3, #115	; 0x73
 800567e:	d905      	bls.n	800568c <HAL_DMA_Init+0x2b0>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	2b77      	cmp	r3, #119	; 0x77
 8005686:	d801      	bhi.n	800568c <HAL_DMA_Init+0x2b0>
 8005688:	2301      	movs	r3, #1
 800568a:	e000      	b.n	800568e <HAL_DMA_Init+0x2b2>
 800568c:	2300      	movs	r3, #0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d003      	beq.n	800569a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005698:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	f023 0307 	bic.w	r3, r3, #7
 80056b0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c0:	2b04      	cmp	r3, #4
 80056c2:	d117      	bne.n	80056f4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00e      	beq.n	80056f4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f001 fdca 	bl	8007270 <DMA_CheckFifoParam>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d008      	beq.n	80056f4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2240      	movs	r2, #64	; 0x40
 80056e6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e192      	b.n	8005a1a <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f001 fd05 	bl	800710c <DMA_CalcBaseAndBitshift>
 8005702:	4603      	mov	r3, r0
 8005704:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800570a:	f003 031f 	and.w	r3, r3, #31
 800570e:	223f      	movs	r2, #63	; 0x3f
 8005710:	409a      	lsls	r2, r3
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	609a      	str	r2, [r3, #8]
 8005716:	e0c8      	b.n	80058aa <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a38      	ldr	r2, [pc, #224]	; (8005800 <HAL_DMA_Init+0x424>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d022      	beq.n	8005768 <HAL_DMA_Init+0x38c>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a37      	ldr	r2, [pc, #220]	; (8005804 <HAL_DMA_Init+0x428>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d01d      	beq.n	8005768 <HAL_DMA_Init+0x38c>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a35      	ldr	r2, [pc, #212]	; (8005808 <HAL_DMA_Init+0x42c>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d018      	beq.n	8005768 <HAL_DMA_Init+0x38c>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a34      	ldr	r2, [pc, #208]	; (800580c <HAL_DMA_Init+0x430>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d013      	beq.n	8005768 <HAL_DMA_Init+0x38c>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a32      	ldr	r2, [pc, #200]	; (8005810 <HAL_DMA_Init+0x434>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d00e      	beq.n	8005768 <HAL_DMA_Init+0x38c>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a31      	ldr	r2, [pc, #196]	; (8005814 <HAL_DMA_Init+0x438>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d009      	beq.n	8005768 <HAL_DMA_Init+0x38c>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a2f      	ldr	r2, [pc, #188]	; (8005818 <HAL_DMA_Init+0x43c>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d004      	beq.n	8005768 <HAL_DMA_Init+0x38c>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a2e      	ldr	r2, [pc, #184]	; (800581c <HAL_DMA_Init+0x440>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d101      	bne.n	800576c <HAL_DMA_Init+0x390>
 8005768:	2301      	movs	r3, #1
 800576a:	e000      	b.n	800576e <HAL_DMA_Init+0x392>
 800576c:	2300      	movs	r3, #0
 800576e:	2b00      	cmp	r3, #0
 8005770:	f000 8092 	beq.w	8005898 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a21      	ldr	r2, [pc, #132]	; (8005800 <HAL_DMA_Init+0x424>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d021      	beq.n	80057c2 <HAL_DMA_Init+0x3e6>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a20      	ldr	r2, [pc, #128]	; (8005804 <HAL_DMA_Init+0x428>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d01c      	beq.n	80057c2 <HAL_DMA_Init+0x3e6>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a1e      	ldr	r2, [pc, #120]	; (8005808 <HAL_DMA_Init+0x42c>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d017      	beq.n	80057c2 <HAL_DMA_Init+0x3e6>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a1d      	ldr	r2, [pc, #116]	; (800580c <HAL_DMA_Init+0x430>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d012      	beq.n	80057c2 <HAL_DMA_Init+0x3e6>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a1b      	ldr	r2, [pc, #108]	; (8005810 <HAL_DMA_Init+0x434>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d00d      	beq.n	80057c2 <HAL_DMA_Init+0x3e6>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a1a      	ldr	r2, [pc, #104]	; (8005814 <HAL_DMA_Init+0x438>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d008      	beq.n	80057c2 <HAL_DMA_Init+0x3e6>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a18      	ldr	r2, [pc, #96]	; (8005818 <HAL_DMA_Init+0x43c>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d003      	beq.n	80057c2 <HAL_DMA_Init+0x3e6>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a17      	ldr	r2, [pc, #92]	; (800581c <HAL_DMA_Init+0x440>)
 80057c0:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2202      	movs	r2, #2
 80057c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	4b10      	ldr	r3, [pc, #64]	; (8005820 <HAL_DMA_Init+0x444>)
 80057de:	4013      	ands	r3, r2
 80057e0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	2b40      	cmp	r3, #64	; 0x40
 80057e8:	d01c      	beq.n	8005824 <HAL_DMA_Init+0x448>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	2b80      	cmp	r3, #128	; 0x80
 80057f0:	d102      	bne.n	80057f8 <HAL_DMA_Init+0x41c>
 80057f2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80057f6:	e016      	b.n	8005826 <HAL_DMA_Init+0x44a>
 80057f8:	2300      	movs	r3, #0
 80057fa:	e014      	b.n	8005826 <HAL_DMA_Init+0x44a>
 80057fc:	fe10803f 	.word	0xfe10803f
 8005800:	58025408 	.word	0x58025408
 8005804:	5802541c 	.word	0x5802541c
 8005808:	58025430 	.word	0x58025430
 800580c:	58025444 	.word	0x58025444
 8005810:	58025458 	.word	0x58025458
 8005814:	5802546c 	.word	0x5802546c
 8005818:	58025480 	.word	0x58025480
 800581c:	58025494 	.word	0x58025494
 8005820:	fffe000f 	.word	0xfffe000f
 8005824:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005826:	687a      	ldr	r2, [r7, #4]
 8005828:	68d2      	ldr	r2, [r2, #12]
 800582a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800582c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005834:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800583c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005844:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	69db      	ldr	r3, [r3, #28]
 800584a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800584c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005854:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	4313      	orrs	r3, r2
 800585a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	461a      	mov	r2, r3
 800586a:	4b6e      	ldr	r3, [pc, #440]	; (8005a24 <HAL_DMA_Init+0x648>)
 800586c:	4413      	add	r3, r2
 800586e:	4a6e      	ldr	r2, [pc, #440]	; (8005a28 <HAL_DMA_Init+0x64c>)
 8005870:	fba2 2303 	umull	r2, r3, r2, r3
 8005874:	091b      	lsrs	r3, r3, #4
 8005876:	009a      	lsls	r2, r3, #2
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f001 fc45 	bl	800710c <DMA_CalcBaseAndBitshift>
 8005882:	4603      	mov	r3, r0
 8005884:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800588a:	f003 031f 	and.w	r3, r3, #31
 800588e:	2201      	movs	r2, #1
 8005890:	409a      	lsls	r2, r3
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	605a      	str	r2, [r3, #4]
 8005896:	e008      	b.n	80058aa <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2240      	movs	r2, #64	; 0x40
 800589c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2203      	movs	r2, #3
 80058a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e0b7      	b.n	8005a1a <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a5f      	ldr	r2, [pc, #380]	; (8005a2c <HAL_DMA_Init+0x650>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d072      	beq.n	800599a <HAL_DMA_Init+0x5be>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a5d      	ldr	r2, [pc, #372]	; (8005a30 <HAL_DMA_Init+0x654>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d06d      	beq.n	800599a <HAL_DMA_Init+0x5be>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a5c      	ldr	r2, [pc, #368]	; (8005a34 <HAL_DMA_Init+0x658>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d068      	beq.n	800599a <HAL_DMA_Init+0x5be>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a5a      	ldr	r2, [pc, #360]	; (8005a38 <HAL_DMA_Init+0x65c>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d063      	beq.n	800599a <HAL_DMA_Init+0x5be>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a59      	ldr	r2, [pc, #356]	; (8005a3c <HAL_DMA_Init+0x660>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d05e      	beq.n	800599a <HAL_DMA_Init+0x5be>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a57      	ldr	r2, [pc, #348]	; (8005a40 <HAL_DMA_Init+0x664>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d059      	beq.n	800599a <HAL_DMA_Init+0x5be>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a56      	ldr	r2, [pc, #344]	; (8005a44 <HAL_DMA_Init+0x668>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d054      	beq.n	800599a <HAL_DMA_Init+0x5be>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a54      	ldr	r2, [pc, #336]	; (8005a48 <HAL_DMA_Init+0x66c>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d04f      	beq.n	800599a <HAL_DMA_Init+0x5be>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a53      	ldr	r2, [pc, #332]	; (8005a4c <HAL_DMA_Init+0x670>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d04a      	beq.n	800599a <HAL_DMA_Init+0x5be>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a51      	ldr	r2, [pc, #324]	; (8005a50 <HAL_DMA_Init+0x674>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d045      	beq.n	800599a <HAL_DMA_Init+0x5be>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a50      	ldr	r2, [pc, #320]	; (8005a54 <HAL_DMA_Init+0x678>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d040      	beq.n	800599a <HAL_DMA_Init+0x5be>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a4e      	ldr	r2, [pc, #312]	; (8005a58 <HAL_DMA_Init+0x67c>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d03b      	beq.n	800599a <HAL_DMA_Init+0x5be>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a4d      	ldr	r2, [pc, #308]	; (8005a5c <HAL_DMA_Init+0x680>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d036      	beq.n	800599a <HAL_DMA_Init+0x5be>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a4b      	ldr	r2, [pc, #300]	; (8005a60 <HAL_DMA_Init+0x684>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d031      	beq.n	800599a <HAL_DMA_Init+0x5be>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a4a      	ldr	r2, [pc, #296]	; (8005a64 <HAL_DMA_Init+0x688>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d02c      	beq.n	800599a <HAL_DMA_Init+0x5be>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a48      	ldr	r2, [pc, #288]	; (8005a68 <HAL_DMA_Init+0x68c>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d027      	beq.n	800599a <HAL_DMA_Init+0x5be>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a47      	ldr	r2, [pc, #284]	; (8005a6c <HAL_DMA_Init+0x690>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d022      	beq.n	800599a <HAL_DMA_Init+0x5be>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a45      	ldr	r2, [pc, #276]	; (8005a70 <HAL_DMA_Init+0x694>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d01d      	beq.n	800599a <HAL_DMA_Init+0x5be>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a44      	ldr	r2, [pc, #272]	; (8005a74 <HAL_DMA_Init+0x698>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d018      	beq.n	800599a <HAL_DMA_Init+0x5be>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a42      	ldr	r2, [pc, #264]	; (8005a78 <HAL_DMA_Init+0x69c>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d013      	beq.n	800599a <HAL_DMA_Init+0x5be>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a41      	ldr	r2, [pc, #260]	; (8005a7c <HAL_DMA_Init+0x6a0>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d00e      	beq.n	800599a <HAL_DMA_Init+0x5be>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a3f      	ldr	r2, [pc, #252]	; (8005a80 <HAL_DMA_Init+0x6a4>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d009      	beq.n	800599a <HAL_DMA_Init+0x5be>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a3e      	ldr	r2, [pc, #248]	; (8005a84 <HAL_DMA_Init+0x6a8>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d004      	beq.n	800599a <HAL_DMA_Init+0x5be>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a3c      	ldr	r2, [pc, #240]	; (8005a88 <HAL_DMA_Init+0x6ac>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d101      	bne.n	800599e <HAL_DMA_Init+0x5c2>
 800599a:	2301      	movs	r3, #1
 800599c:	e000      	b.n	80059a0 <HAL_DMA_Init+0x5c4>
 800599e:	2300      	movs	r3, #0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d032      	beq.n	8005a0a <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f001 fcdf 	bl	8007368 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	2b80      	cmp	r3, #128	; 0x80
 80059b0:	d102      	bne.n	80059b8 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059c0:	b2d2      	uxtb	r2, r2
 80059c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80059cc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d010      	beq.n	80059f8 <HAL_DMA_Init+0x61c>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	2b08      	cmp	r3, #8
 80059dc:	d80c      	bhi.n	80059f8 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f001 fd5c 	bl	800749c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059e8:	2200      	movs	r2, #0
 80059ea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80059f4:	605a      	str	r2, [r3, #4]
 80059f6:	e008      	b.n	8005a0a <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3718      	adds	r7, #24
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	a7fdabf8 	.word	0xa7fdabf8
 8005a28:	cccccccd 	.word	0xcccccccd
 8005a2c:	40020010 	.word	0x40020010
 8005a30:	40020028 	.word	0x40020028
 8005a34:	40020040 	.word	0x40020040
 8005a38:	40020058 	.word	0x40020058
 8005a3c:	40020070 	.word	0x40020070
 8005a40:	40020088 	.word	0x40020088
 8005a44:	400200a0 	.word	0x400200a0
 8005a48:	400200b8 	.word	0x400200b8
 8005a4c:	40020410 	.word	0x40020410
 8005a50:	40020428 	.word	0x40020428
 8005a54:	40020440 	.word	0x40020440
 8005a58:	40020458 	.word	0x40020458
 8005a5c:	40020470 	.word	0x40020470
 8005a60:	40020488 	.word	0x40020488
 8005a64:	400204a0 	.word	0x400204a0
 8005a68:	400204b8 	.word	0x400204b8
 8005a6c:	58025408 	.word	0x58025408
 8005a70:	5802541c 	.word	0x5802541c
 8005a74:	58025430 	.word	0x58025430
 8005a78:	58025444 	.word	0x58025444
 8005a7c:	58025458 	.word	0x58025458
 8005a80:	5802546c 	.word	0x5802546c
 8005a84:	58025480 	.word	0x58025480
 8005a88:	58025494 	.word	0x58025494

08005a8c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b086      	sub	sp, #24
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
 8005a98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d101      	bne.n	8005aa8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e226      	b.n	8005ef6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d101      	bne.n	8005ab6 <HAL_DMA_Start_IT+0x2a>
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	e21f      	b.n	8005ef6 <HAL_DMA_Start_IT+0x46a>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	f040 820a 	bne.w	8005ee0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2202      	movs	r2, #2
 8005ad0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a68      	ldr	r2, [pc, #416]	; (8005c80 <HAL_DMA_Start_IT+0x1f4>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d04a      	beq.n	8005b7a <HAL_DMA_Start_IT+0xee>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a66      	ldr	r2, [pc, #408]	; (8005c84 <HAL_DMA_Start_IT+0x1f8>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d045      	beq.n	8005b7a <HAL_DMA_Start_IT+0xee>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a65      	ldr	r2, [pc, #404]	; (8005c88 <HAL_DMA_Start_IT+0x1fc>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d040      	beq.n	8005b7a <HAL_DMA_Start_IT+0xee>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a63      	ldr	r2, [pc, #396]	; (8005c8c <HAL_DMA_Start_IT+0x200>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d03b      	beq.n	8005b7a <HAL_DMA_Start_IT+0xee>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a62      	ldr	r2, [pc, #392]	; (8005c90 <HAL_DMA_Start_IT+0x204>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d036      	beq.n	8005b7a <HAL_DMA_Start_IT+0xee>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a60      	ldr	r2, [pc, #384]	; (8005c94 <HAL_DMA_Start_IT+0x208>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d031      	beq.n	8005b7a <HAL_DMA_Start_IT+0xee>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a5f      	ldr	r2, [pc, #380]	; (8005c98 <HAL_DMA_Start_IT+0x20c>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d02c      	beq.n	8005b7a <HAL_DMA_Start_IT+0xee>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a5d      	ldr	r2, [pc, #372]	; (8005c9c <HAL_DMA_Start_IT+0x210>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d027      	beq.n	8005b7a <HAL_DMA_Start_IT+0xee>
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a5c      	ldr	r2, [pc, #368]	; (8005ca0 <HAL_DMA_Start_IT+0x214>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d022      	beq.n	8005b7a <HAL_DMA_Start_IT+0xee>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a5a      	ldr	r2, [pc, #360]	; (8005ca4 <HAL_DMA_Start_IT+0x218>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d01d      	beq.n	8005b7a <HAL_DMA_Start_IT+0xee>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a59      	ldr	r2, [pc, #356]	; (8005ca8 <HAL_DMA_Start_IT+0x21c>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d018      	beq.n	8005b7a <HAL_DMA_Start_IT+0xee>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a57      	ldr	r2, [pc, #348]	; (8005cac <HAL_DMA_Start_IT+0x220>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d013      	beq.n	8005b7a <HAL_DMA_Start_IT+0xee>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a56      	ldr	r2, [pc, #344]	; (8005cb0 <HAL_DMA_Start_IT+0x224>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d00e      	beq.n	8005b7a <HAL_DMA_Start_IT+0xee>
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a54      	ldr	r2, [pc, #336]	; (8005cb4 <HAL_DMA_Start_IT+0x228>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d009      	beq.n	8005b7a <HAL_DMA_Start_IT+0xee>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a53      	ldr	r2, [pc, #332]	; (8005cb8 <HAL_DMA_Start_IT+0x22c>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d004      	beq.n	8005b7a <HAL_DMA_Start_IT+0xee>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a51      	ldr	r2, [pc, #324]	; (8005cbc <HAL_DMA_Start_IT+0x230>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d108      	bne.n	8005b8c <HAL_DMA_Start_IT+0x100>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f022 0201 	bic.w	r2, r2, #1
 8005b88:	601a      	str	r2, [r3, #0]
 8005b8a:	e007      	b.n	8005b9c <HAL_DMA_Start_IT+0x110>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f022 0201 	bic.w	r2, r2, #1
 8005b9a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	68b9      	ldr	r1, [r7, #8]
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f001 f906 	bl	8006db4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a34      	ldr	r2, [pc, #208]	; (8005c80 <HAL_DMA_Start_IT+0x1f4>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d04a      	beq.n	8005c48 <HAL_DMA_Start_IT+0x1bc>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a33      	ldr	r2, [pc, #204]	; (8005c84 <HAL_DMA_Start_IT+0x1f8>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d045      	beq.n	8005c48 <HAL_DMA_Start_IT+0x1bc>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a31      	ldr	r2, [pc, #196]	; (8005c88 <HAL_DMA_Start_IT+0x1fc>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d040      	beq.n	8005c48 <HAL_DMA_Start_IT+0x1bc>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a30      	ldr	r2, [pc, #192]	; (8005c8c <HAL_DMA_Start_IT+0x200>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d03b      	beq.n	8005c48 <HAL_DMA_Start_IT+0x1bc>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a2e      	ldr	r2, [pc, #184]	; (8005c90 <HAL_DMA_Start_IT+0x204>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d036      	beq.n	8005c48 <HAL_DMA_Start_IT+0x1bc>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a2d      	ldr	r2, [pc, #180]	; (8005c94 <HAL_DMA_Start_IT+0x208>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d031      	beq.n	8005c48 <HAL_DMA_Start_IT+0x1bc>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a2b      	ldr	r2, [pc, #172]	; (8005c98 <HAL_DMA_Start_IT+0x20c>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d02c      	beq.n	8005c48 <HAL_DMA_Start_IT+0x1bc>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a2a      	ldr	r2, [pc, #168]	; (8005c9c <HAL_DMA_Start_IT+0x210>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d027      	beq.n	8005c48 <HAL_DMA_Start_IT+0x1bc>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a28      	ldr	r2, [pc, #160]	; (8005ca0 <HAL_DMA_Start_IT+0x214>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d022      	beq.n	8005c48 <HAL_DMA_Start_IT+0x1bc>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a27      	ldr	r2, [pc, #156]	; (8005ca4 <HAL_DMA_Start_IT+0x218>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d01d      	beq.n	8005c48 <HAL_DMA_Start_IT+0x1bc>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a25      	ldr	r2, [pc, #148]	; (8005ca8 <HAL_DMA_Start_IT+0x21c>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d018      	beq.n	8005c48 <HAL_DMA_Start_IT+0x1bc>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a24      	ldr	r2, [pc, #144]	; (8005cac <HAL_DMA_Start_IT+0x220>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d013      	beq.n	8005c48 <HAL_DMA_Start_IT+0x1bc>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a22      	ldr	r2, [pc, #136]	; (8005cb0 <HAL_DMA_Start_IT+0x224>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d00e      	beq.n	8005c48 <HAL_DMA_Start_IT+0x1bc>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a21      	ldr	r2, [pc, #132]	; (8005cb4 <HAL_DMA_Start_IT+0x228>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d009      	beq.n	8005c48 <HAL_DMA_Start_IT+0x1bc>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a1f      	ldr	r2, [pc, #124]	; (8005cb8 <HAL_DMA_Start_IT+0x22c>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d004      	beq.n	8005c48 <HAL_DMA_Start_IT+0x1bc>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a1e      	ldr	r2, [pc, #120]	; (8005cbc <HAL_DMA_Start_IT+0x230>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d101      	bne.n	8005c4c <HAL_DMA_Start_IT+0x1c0>
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e000      	b.n	8005c4e <HAL_DMA_Start_IT+0x1c2>
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d036      	beq.n	8005cc0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f023 021e 	bic.w	r2, r3, #30
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f042 0216 	orr.w	r2, r2, #22
 8005c64:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d03e      	beq.n	8005cec <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f042 0208 	orr.w	r2, r2, #8
 8005c7c:	601a      	str	r2, [r3, #0]
 8005c7e:	e035      	b.n	8005cec <HAL_DMA_Start_IT+0x260>
 8005c80:	40020010 	.word	0x40020010
 8005c84:	40020028 	.word	0x40020028
 8005c88:	40020040 	.word	0x40020040
 8005c8c:	40020058 	.word	0x40020058
 8005c90:	40020070 	.word	0x40020070
 8005c94:	40020088 	.word	0x40020088
 8005c98:	400200a0 	.word	0x400200a0
 8005c9c:	400200b8 	.word	0x400200b8
 8005ca0:	40020410 	.word	0x40020410
 8005ca4:	40020428 	.word	0x40020428
 8005ca8:	40020440 	.word	0x40020440
 8005cac:	40020458 	.word	0x40020458
 8005cb0:	40020470 	.word	0x40020470
 8005cb4:	40020488 	.word	0x40020488
 8005cb8:	400204a0 	.word	0x400204a0
 8005cbc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f023 020e 	bic.w	r2, r3, #14
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f042 020a 	orr.w	r2, r2, #10
 8005cd2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d007      	beq.n	8005cec <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f042 0204 	orr.w	r2, r2, #4
 8005cea:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a83      	ldr	r2, [pc, #524]	; (8005f00 <HAL_DMA_Start_IT+0x474>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d072      	beq.n	8005ddc <HAL_DMA_Start_IT+0x350>
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a82      	ldr	r2, [pc, #520]	; (8005f04 <HAL_DMA_Start_IT+0x478>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d06d      	beq.n	8005ddc <HAL_DMA_Start_IT+0x350>
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a80      	ldr	r2, [pc, #512]	; (8005f08 <HAL_DMA_Start_IT+0x47c>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d068      	beq.n	8005ddc <HAL_DMA_Start_IT+0x350>
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a7f      	ldr	r2, [pc, #508]	; (8005f0c <HAL_DMA_Start_IT+0x480>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d063      	beq.n	8005ddc <HAL_DMA_Start_IT+0x350>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a7d      	ldr	r2, [pc, #500]	; (8005f10 <HAL_DMA_Start_IT+0x484>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d05e      	beq.n	8005ddc <HAL_DMA_Start_IT+0x350>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a7c      	ldr	r2, [pc, #496]	; (8005f14 <HAL_DMA_Start_IT+0x488>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d059      	beq.n	8005ddc <HAL_DMA_Start_IT+0x350>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a7a      	ldr	r2, [pc, #488]	; (8005f18 <HAL_DMA_Start_IT+0x48c>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d054      	beq.n	8005ddc <HAL_DMA_Start_IT+0x350>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a79      	ldr	r2, [pc, #484]	; (8005f1c <HAL_DMA_Start_IT+0x490>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d04f      	beq.n	8005ddc <HAL_DMA_Start_IT+0x350>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a77      	ldr	r2, [pc, #476]	; (8005f20 <HAL_DMA_Start_IT+0x494>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d04a      	beq.n	8005ddc <HAL_DMA_Start_IT+0x350>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a76      	ldr	r2, [pc, #472]	; (8005f24 <HAL_DMA_Start_IT+0x498>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d045      	beq.n	8005ddc <HAL_DMA_Start_IT+0x350>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a74      	ldr	r2, [pc, #464]	; (8005f28 <HAL_DMA_Start_IT+0x49c>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d040      	beq.n	8005ddc <HAL_DMA_Start_IT+0x350>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a73      	ldr	r2, [pc, #460]	; (8005f2c <HAL_DMA_Start_IT+0x4a0>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d03b      	beq.n	8005ddc <HAL_DMA_Start_IT+0x350>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a71      	ldr	r2, [pc, #452]	; (8005f30 <HAL_DMA_Start_IT+0x4a4>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d036      	beq.n	8005ddc <HAL_DMA_Start_IT+0x350>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a70      	ldr	r2, [pc, #448]	; (8005f34 <HAL_DMA_Start_IT+0x4a8>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d031      	beq.n	8005ddc <HAL_DMA_Start_IT+0x350>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a6e      	ldr	r2, [pc, #440]	; (8005f38 <HAL_DMA_Start_IT+0x4ac>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d02c      	beq.n	8005ddc <HAL_DMA_Start_IT+0x350>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a6d      	ldr	r2, [pc, #436]	; (8005f3c <HAL_DMA_Start_IT+0x4b0>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d027      	beq.n	8005ddc <HAL_DMA_Start_IT+0x350>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a6b      	ldr	r2, [pc, #428]	; (8005f40 <HAL_DMA_Start_IT+0x4b4>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d022      	beq.n	8005ddc <HAL_DMA_Start_IT+0x350>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a6a      	ldr	r2, [pc, #424]	; (8005f44 <HAL_DMA_Start_IT+0x4b8>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d01d      	beq.n	8005ddc <HAL_DMA_Start_IT+0x350>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a68      	ldr	r2, [pc, #416]	; (8005f48 <HAL_DMA_Start_IT+0x4bc>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d018      	beq.n	8005ddc <HAL_DMA_Start_IT+0x350>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a67      	ldr	r2, [pc, #412]	; (8005f4c <HAL_DMA_Start_IT+0x4c0>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d013      	beq.n	8005ddc <HAL_DMA_Start_IT+0x350>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a65      	ldr	r2, [pc, #404]	; (8005f50 <HAL_DMA_Start_IT+0x4c4>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d00e      	beq.n	8005ddc <HAL_DMA_Start_IT+0x350>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a64      	ldr	r2, [pc, #400]	; (8005f54 <HAL_DMA_Start_IT+0x4c8>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d009      	beq.n	8005ddc <HAL_DMA_Start_IT+0x350>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a62      	ldr	r2, [pc, #392]	; (8005f58 <HAL_DMA_Start_IT+0x4cc>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d004      	beq.n	8005ddc <HAL_DMA_Start_IT+0x350>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a61      	ldr	r2, [pc, #388]	; (8005f5c <HAL_DMA_Start_IT+0x4d0>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d101      	bne.n	8005de0 <HAL_DMA_Start_IT+0x354>
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e000      	b.n	8005de2 <HAL_DMA_Start_IT+0x356>
 8005de0:	2300      	movs	r3, #0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d01a      	beq.n	8005e1c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d007      	beq.n	8005e04 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e02:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d007      	beq.n	8005e1c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e1a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a37      	ldr	r2, [pc, #220]	; (8005f00 <HAL_DMA_Start_IT+0x474>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d04a      	beq.n	8005ebc <HAL_DMA_Start_IT+0x430>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a36      	ldr	r2, [pc, #216]	; (8005f04 <HAL_DMA_Start_IT+0x478>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d045      	beq.n	8005ebc <HAL_DMA_Start_IT+0x430>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a34      	ldr	r2, [pc, #208]	; (8005f08 <HAL_DMA_Start_IT+0x47c>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d040      	beq.n	8005ebc <HAL_DMA_Start_IT+0x430>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a33      	ldr	r2, [pc, #204]	; (8005f0c <HAL_DMA_Start_IT+0x480>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d03b      	beq.n	8005ebc <HAL_DMA_Start_IT+0x430>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a31      	ldr	r2, [pc, #196]	; (8005f10 <HAL_DMA_Start_IT+0x484>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d036      	beq.n	8005ebc <HAL_DMA_Start_IT+0x430>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a30      	ldr	r2, [pc, #192]	; (8005f14 <HAL_DMA_Start_IT+0x488>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d031      	beq.n	8005ebc <HAL_DMA_Start_IT+0x430>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a2e      	ldr	r2, [pc, #184]	; (8005f18 <HAL_DMA_Start_IT+0x48c>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d02c      	beq.n	8005ebc <HAL_DMA_Start_IT+0x430>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a2d      	ldr	r2, [pc, #180]	; (8005f1c <HAL_DMA_Start_IT+0x490>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d027      	beq.n	8005ebc <HAL_DMA_Start_IT+0x430>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a2b      	ldr	r2, [pc, #172]	; (8005f20 <HAL_DMA_Start_IT+0x494>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d022      	beq.n	8005ebc <HAL_DMA_Start_IT+0x430>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a2a      	ldr	r2, [pc, #168]	; (8005f24 <HAL_DMA_Start_IT+0x498>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d01d      	beq.n	8005ebc <HAL_DMA_Start_IT+0x430>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a28      	ldr	r2, [pc, #160]	; (8005f28 <HAL_DMA_Start_IT+0x49c>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d018      	beq.n	8005ebc <HAL_DMA_Start_IT+0x430>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a27      	ldr	r2, [pc, #156]	; (8005f2c <HAL_DMA_Start_IT+0x4a0>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d013      	beq.n	8005ebc <HAL_DMA_Start_IT+0x430>
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a25      	ldr	r2, [pc, #148]	; (8005f30 <HAL_DMA_Start_IT+0x4a4>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d00e      	beq.n	8005ebc <HAL_DMA_Start_IT+0x430>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a24      	ldr	r2, [pc, #144]	; (8005f34 <HAL_DMA_Start_IT+0x4a8>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d009      	beq.n	8005ebc <HAL_DMA_Start_IT+0x430>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a22      	ldr	r2, [pc, #136]	; (8005f38 <HAL_DMA_Start_IT+0x4ac>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d004      	beq.n	8005ebc <HAL_DMA_Start_IT+0x430>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a21      	ldr	r2, [pc, #132]	; (8005f3c <HAL_DMA_Start_IT+0x4b0>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d108      	bne.n	8005ece <HAL_DMA_Start_IT+0x442>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f042 0201 	orr.w	r2, r2, #1
 8005eca:	601a      	str	r2, [r3, #0]
 8005ecc:	e012      	b.n	8005ef4 <HAL_DMA_Start_IT+0x468>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f042 0201 	orr.w	r2, r2, #1
 8005edc:	601a      	str	r2, [r3, #0]
 8005ede:	e009      	b.n	8005ef4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ee6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005ef4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3718      	adds	r7, #24
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	40020010 	.word	0x40020010
 8005f04:	40020028 	.word	0x40020028
 8005f08:	40020040 	.word	0x40020040
 8005f0c:	40020058 	.word	0x40020058
 8005f10:	40020070 	.word	0x40020070
 8005f14:	40020088 	.word	0x40020088
 8005f18:	400200a0 	.word	0x400200a0
 8005f1c:	400200b8 	.word	0x400200b8
 8005f20:	40020410 	.word	0x40020410
 8005f24:	40020428 	.word	0x40020428
 8005f28:	40020440 	.word	0x40020440
 8005f2c:	40020458 	.word	0x40020458
 8005f30:	40020470 	.word	0x40020470
 8005f34:	40020488 	.word	0x40020488
 8005f38:	400204a0 	.word	0x400204a0
 8005f3c:	400204b8 	.word	0x400204b8
 8005f40:	58025408 	.word	0x58025408
 8005f44:	5802541c 	.word	0x5802541c
 8005f48:	58025430 	.word	0x58025430
 8005f4c:	58025444 	.word	0x58025444
 8005f50:	58025458 	.word	0x58025458
 8005f54:	5802546c 	.word	0x5802546c
 8005f58:	58025480 	.word	0x58025480
 8005f5c:	58025494 	.word	0x58025494

08005f60 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b08a      	sub	sp, #40	; 0x28
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005f6c:	4b67      	ldr	r3, [pc, #412]	; (800610c <HAL_DMA_IRQHandler+0x1ac>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a67      	ldr	r2, [pc, #412]	; (8006110 <HAL_DMA_IRQHandler+0x1b0>)
 8005f72:	fba2 2303 	umull	r2, r3, r2, r3
 8005f76:	0a9b      	lsrs	r3, r3, #10
 8005f78:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f7e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f84:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005f86:	6a3b      	ldr	r3, [r7, #32]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a5f      	ldr	r2, [pc, #380]	; (8006114 <HAL_DMA_IRQHandler+0x1b4>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d04a      	beq.n	8006032 <HAL_DMA_IRQHandler+0xd2>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a5d      	ldr	r2, [pc, #372]	; (8006118 <HAL_DMA_IRQHandler+0x1b8>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d045      	beq.n	8006032 <HAL_DMA_IRQHandler+0xd2>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a5c      	ldr	r2, [pc, #368]	; (800611c <HAL_DMA_IRQHandler+0x1bc>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d040      	beq.n	8006032 <HAL_DMA_IRQHandler+0xd2>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a5a      	ldr	r2, [pc, #360]	; (8006120 <HAL_DMA_IRQHandler+0x1c0>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d03b      	beq.n	8006032 <HAL_DMA_IRQHandler+0xd2>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a59      	ldr	r2, [pc, #356]	; (8006124 <HAL_DMA_IRQHandler+0x1c4>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d036      	beq.n	8006032 <HAL_DMA_IRQHandler+0xd2>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a57      	ldr	r2, [pc, #348]	; (8006128 <HAL_DMA_IRQHandler+0x1c8>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d031      	beq.n	8006032 <HAL_DMA_IRQHandler+0xd2>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a56      	ldr	r2, [pc, #344]	; (800612c <HAL_DMA_IRQHandler+0x1cc>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d02c      	beq.n	8006032 <HAL_DMA_IRQHandler+0xd2>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a54      	ldr	r2, [pc, #336]	; (8006130 <HAL_DMA_IRQHandler+0x1d0>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d027      	beq.n	8006032 <HAL_DMA_IRQHandler+0xd2>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a53      	ldr	r2, [pc, #332]	; (8006134 <HAL_DMA_IRQHandler+0x1d4>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d022      	beq.n	8006032 <HAL_DMA_IRQHandler+0xd2>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a51      	ldr	r2, [pc, #324]	; (8006138 <HAL_DMA_IRQHandler+0x1d8>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d01d      	beq.n	8006032 <HAL_DMA_IRQHandler+0xd2>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a50      	ldr	r2, [pc, #320]	; (800613c <HAL_DMA_IRQHandler+0x1dc>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d018      	beq.n	8006032 <HAL_DMA_IRQHandler+0xd2>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a4e      	ldr	r2, [pc, #312]	; (8006140 <HAL_DMA_IRQHandler+0x1e0>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d013      	beq.n	8006032 <HAL_DMA_IRQHandler+0xd2>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a4d      	ldr	r2, [pc, #308]	; (8006144 <HAL_DMA_IRQHandler+0x1e4>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d00e      	beq.n	8006032 <HAL_DMA_IRQHandler+0xd2>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a4b      	ldr	r2, [pc, #300]	; (8006148 <HAL_DMA_IRQHandler+0x1e8>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d009      	beq.n	8006032 <HAL_DMA_IRQHandler+0xd2>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a4a      	ldr	r2, [pc, #296]	; (800614c <HAL_DMA_IRQHandler+0x1ec>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d004      	beq.n	8006032 <HAL_DMA_IRQHandler+0xd2>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a48      	ldr	r2, [pc, #288]	; (8006150 <HAL_DMA_IRQHandler+0x1f0>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d101      	bne.n	8006036 <HAL_DMA_IRQHandler+0xd6>
 8006032:	2301      	movs	r3, #1
 8006034:	e000      	b.n	8006038 <HAL_DMA_IRQHandler+0xd8>
 8006036:	2300      	movs	r3, #0
 8006038:	2b00      	cmp	r3, #0
 800603a:	f000 842b 	beq.w	8006894 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006042:	f003 031f 	and.w	r3, r3, #31
 8006046:	2208      	movs	r2, #8
 8006048:	409a      	lsls	r2, r3
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	4013      	ands	r3, r2
 800604e:	2b00      	cmp	r3, #0
 8006050:	f000 80a2 	beq.w	8006198 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a2e      	ldr	r2, [pc, #184]	; (8006114 <HAL_DMA_IRQHandler+0x1b4>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d04a      	beq.n	80060f4 <HAL_DMA_IRQHandler+0x194>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a2d      	ldr	r2, [pc, #180]	; (8006118 <HAL_DMA_IRQHandler+0x1b8>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d045      	beq.n	80060f4 <HAL_DMA_IRQHandler+0x194>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a2b      	ldr	r2, [pc, #172]	; (800611c <HAL_DMA_IRQHandler+0x1bc>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d040      	beq.n	80060f4 <HAL_DMA_IRQHandler+0x194>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a2a      	ldr	r2, [pc, #168]	; (8006120 <HAL_DMA_IRQHandler+0x1c0>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d03b      	beq.n	80060f4 <HAL_DMA_IRQHandler+0x194>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a28      	ldr	r2, [pc, #160]	; (8006124 <HAL_DMA_IRQHandler+0x1c4>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d036      	beq.n	80060f4 <HAL_DMA_IRQHandler+0x194>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a27      	ldr	r2, [pc, #156]	; (8006128 <HAL_DMA_IRQHandler+0x1c8>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d031      	beq.n	80060f4 <HAL_DMA_IRQHandler+0x194>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a25      	ldr	r2, [pc, #148]	; (800612c <HAL_DMA_IRQHandler+0x1cc>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d02c      	beq.n	80060f4 <HAL_DMA_IRQHandler+0x194>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a24      	ldr	r2, [pc, #144]	; (8006130 <HAL_DMA_IRQHandler+0x1d0>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d027      	beq.n	80060f4 <HAL_DMA_IRQHandler+0x194>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a22      	ldr	r2, [pc, #136]	; (8006134 <HAL_DMA_IRQHandler+0x1d4>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d022      	beq.n	80060f4 <HAL_DMA_IRQHandler+0x194>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a21      	ldr	r2, [pc, #132]	; (8006138 <HAL_DMA_IRQHandler+0x1d8>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d01d      	beq.n	80060f4 <HAL_DMA_IRQHandler+0x194>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a1f      	ldr	r2, [pc, #124]	; (800613c <HAL_DMA_IRQHandler+0x1dc>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d018      	beq.n	80060f4 <HAL_DMA_IRQHandler+0x194>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a1e      	ldr	r2, [pc, #120]	; (8006140 <HAL_DMA_IRQHandler+0x1e0>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d013      	beq.n	80060f4 <HAL_DMA_IRQHandler+0x194>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a1c      	ldr	r2, [pc, #112]	; (8006144 <HAL_DMA_IRQHandler+0x1e4>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d00e      	beq.n	80060f4 <HAL_DMA_IRQHandler+0x194>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a1b      	ldr	r2, [pc, #108]	; (8006148 <HAL_DMA_IRQHandler+0x1e8>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d009      	beq.n	80060f4 <HAL_DMA_IRQHandler+0x194>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a19      	ldr	r2, [pc, #100]	; (800614c <HAL_DMA_IRQHandler+0x1ec>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d004      	beq.n	80060f4 <HAL_DMA_IRQHandler+0x194>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a18      	ldr	r2, [pc, #96]	; (8006150 <HAL_DMA_IRQHandler+0x1f0>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d12f      	bne.n	8006154 <HAL_DMA_IRQHandler+0x1f4>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0304 	and.w	r3, r3, #4
 80060fe:	2b00      	cmp	r3, #0
 8006100:	bf14      	ite	ne
 8006102:	2301      	movne	r3, #1
 8006104:	2300      	moveq	r3, #0
 8006106:	b2db      	uxtb	r3, r3
 8006108:	e02e      	b.n	8006168 <HAL_DMA_IRQHandler+0x208>
 800610a:	bf00      	nop
 800610c:	24000000 	.word	0x24000000
 8006110:	1b4e81b5 	.word	0x1b4e81b5
 8006114:	40020010 	.word	0x40020010
 8006118:	40020028 	.word	0x40020028
 800611c:	40020040 	.word	0x40020040
 8006120:	40020058 	.word	0x40020058
 8006124:	40020070 	.word	0x40020070
 8006128:	40020088 	.word	0x40020088
 800612c:	400200a0 	.word	0x400200a0
 8006130:	400200b8 	.word	0x400200b8
 8006134:	40020410 	.word	0x40020410
 8006138:	40020428 	.word	0x40020428
 800613c:	40020440 	.word	0x40020440
 8006140:	40020458 	.word	0x40020458
 8006144:	40020470 	.word	0x40020470
 8006148:	40020488 	.word	0x40020488
 800614c:	400204a0 	.word	0x400204a0
 8006150:	400204b8 	.word	0x400204b8
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0308 	and.w	r3, r3, #8
 800615e:	2b00      	cmp	r3, #0
 8006160:	bf14      	ite	ne
 8006162:	2301      	movne	r3, #1
 8006164:	2300      	moveq	r3, #0
 8006166:	b2db      	uxtb	r3, r3
 8006168:	2b00      	cmp	r3, #0
 800616a:	d015      	beq.n	8006198 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f022 0204 	bic.w	r2, r2, #4
 800617a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006180:	f003 031f 	and.w	r3, r3, #31
 8006184:	2208      	movs	r2, #8
 8006186:	409a      	lsls	r2, r3
 8006188:	6a3b      	ldr	r3, [r7, #32]
 800618a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006190:	f043 0201 	orr.w	r2, r3, #1
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800619c:	f003 031f 	and.w	r3, r3, #31
 80061a0:	69ba      	ldr	r2, [r7, #24]
 80061a2:	fa22 f303 	lsr.w	r3, r2, r3
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d06e      	beq.n	800628c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a69      	ldr	r2, [pc, #420]	; (8006358 <HAL_DMA_IRQHandler+0x3f8>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d04a      	beq.n	800624e <HAL_DMA_IRQHandler+0x2ee>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a67      	ldr	r2, [pc, #412]	; (800635c <HAL_DMA_IRQHandler+0x3fc>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d045      	beq.n	800624e <HAL_DMA_IRQHandler+0x2ee>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a66      	ldr	r2, [pc, #408]	; (8006360 <HAL_DMA_IRQHandler+0x400>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d040      	beq.n	800624e <HAL_DMA_IRQHandler+0x2ee>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a64      	ldr	r2, [pc, #400]	; (8006364 <HAL_DMA_IRQHandler+0x404>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d03b      	beq.n	800624e <HAL_DMA_IRQHandler+0x2ee>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a63      	ldr	r2, [pc, #396]	; (8006368 <HAL_DMA_IRQHandler+0x408>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d036      	beq.n	800624e <HAL_DMA_IRQHandler+0x2ee>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a61      	ldr	r2, [pc, #388]	; (800636c <HAL_DMA_IRQHandler+0x40c>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d031      	beq.n	800624e <HAL_DMA_IRQHandler+0x2ee>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a60      	ldr	r2, [pc, #384]	; (8006370 <HAL_DMA_IRQHandler+0x410>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d02c      	beq.n	800624e <HAL_DMA_IRQHandler+0x2ee>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a5e      	ldr	r2, [pc, #376]	; (8006374 <HAL_DMA_IRQHandler+0x414>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d027      	beq.n	800624e <HAL_DMA_IRQHandler+0x2ee>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a5d      	ldr	r2, [pc, #372]	; (8006378 <HAL_DMA_IRQHandler+0x418>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d022      	beq.n	800624e <HAL_DMA_IRQHandler+0x2ee>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a5b      	ldr	r2, [pc, #364]	; (800637c <HAL_DMA_IRQHandler+0x41c>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d01d      	beq.n	800624e <HAL_DMA_IRQHandler+0x2ee>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a5a      	ldr	r2, [pc, #360]	; (8006380 <HAL_DMA_IRQHandler+0x420>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d018      	beq.n	800624e <HAL_DMA_IRQHandler+0x2ee>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a58      	ldr	r2, [pc, #352]	; (8006384 <HAL_DMA_IRQHandler+0x424>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d013      	beq.n	800624e <HAL_DMA_IRQHandler+0x2ee>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a57      	ldr	r2, [pc, #348]	; (8006388 <HAL_DMA_IRQHandler+0x428>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d00e      	beq.n	800624e <HAL_DMA_IRQHandler+0x2ee>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a55      	ldr	r2, [pc, #340]	; (800638c <HAL_DMA_IRQHandler+0x42c>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d009      	beq.n	800624e <HAL_DMA_IRQHandler+0x2ee>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a54      	ldr	r2, [pc, #336]	; (8006390 <HAL_DMA_IRQHandler+0x430>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d004      	beq.n	800624e <HAL_DMA_IRQHandler+0x2ee>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a52      	ldr	r2, [pc, #328]	; (8006394 <HAL_DMA_IRQHandler+0x434>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d10a      	bne.n	8006264 <HAL_DMA_IRQHandler+0x304>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	695b      	ldr	r3, [r3, #20]
 8006254:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006258:	2b00      	cmp	r3, #0
 800625a:	bf14      	ite	ne
 800625c:	2301      	movne	r3, #1
 800625e:	2300      	moveq	r3, #0
 8006260:	b2db      	uxtb	r3, r3
 8006262:	e003      	b.n	800626c <HAL_DMA_IRQHandler+0x30c>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2300      	movs	r3, #0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d00d      	beq.n	800628c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006274:	f003 031f 	and.w	r3, r3, #31
 8006278:	2201      	movs	r2, #1
 800627a:	409a      	lsls	r2, r3
 800627c:	6a3b      	ldr	r3, [r7, #32]
 800627e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006284:	f043 0202 	orr.w	r2, r3, #2
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006290:	f003 031f 	and.w	r3, r3, #31
 8006294:	2204      	movs	r2, #4
 8006296:	409a      	lsls	r2, r3
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	4013      	ands	r3, r2
 800629c:	2b00      	cmp	r3, #0
 800629e:	f000 808f 	beq.w	80063c0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a2c      	ldr	r2, [pc, #176]	; (8006358 <HAL_DMA_IRQHandler+0x3f8>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d04a      	beq.n	8006342 <HAL_DMA_IRQHandler+0x3e2>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a2a      	ldr	r2, [pc, #168]	; (800635c <HAL_DMA_IRQHandler+0x3fc>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d045      	beq.n	8006342 <HAL_DMA_IRQHandler+0x3e2>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a29      	ldr	r2, [pc, #164]	; (8006360 <HAL_DMA_IRQHandler+0x400>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d040      	beq.n	8006342 <HAL_DMA_IRQHandler+0x3e2>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a27      	ldr	r2, [pc, #156]	; (8006364 <HAL_DMA_IRQHandler+0x404>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d03b      	beq.n	8006342 <HAL_DMA_IRQHandler+0x3e2>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a26      	ldr	r2, [pc, #152]	; (8006368 <HAL_DMA_IRQHandler+0x408>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d036      	beq.n	8006342 <HAL_DMA_IRQHandler+0x3e2>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a24      	ldr	r2, [pc, #144]	; (800636c <HAL_DMA_IRQHandler+0x40c>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d031      	beq.n	8006342 <HAL_DMA_IRQHandler+0x3e2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a23      	ldr	r2, [pc, #140]	; (8006370 <HAL_DMA_IRQHandler+0x410>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d02c      	beq.n	8006342 <HAL_DMA_IRQHandler+0x3e2>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a21      	ldr	r2, [pc, #132]	; (8006374 <HAL_DMA_IRQHandler+0x414>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d027      	beq.n	8006342 <HAL_DMA_IRQHandler+0x3e2>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a20      	ldr	r2, [pc, #128]	; (8006378 <HAL_DMA_IRQHandler+0x418>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d022      	beq.n	8006342 <HAL_DMA_IRQHandler+0x3e2>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a1e      	ldr	r2, [pc, #120]	; (800637c <HAL_DMA_IRQHandler+0x41c>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d01d      	beq.n	8006342 <HAL_DMA_IRQHandler+0x3e2>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a1d      	ldr	r2, [pc, #116]	; (8006380 <HAL_DMA_IRQHandler+0x420>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d018      	beq.n	8006342 <HAL_DMA_IRQHandler+0x3e2>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a1b      	ldr	r2, [pc, #108]	; (8006384 <HAL_DMA_IRQHandler+0x424>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d013      	beq.n	8006342 <HAL_DMA_IRQHandler+0x3e2>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a1a      	ldr	r2, [pc, #104]	; (8006388 <HAL_DMA_IRQHandler+0x428>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d00e      	beq.n	8006342 <HAL_DMA_IRQHandler+0x3e2>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a18      	ldr	r2, [pc, #96]	; (800638c <HAL_DMA_IRQHandler+0x42c>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d009      	beq.n	8006342 <HAL_DMA_IRQHandler+0x3e2>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a17      	ldr	r2, [pc, #92]	; (8006390 <HAL_DMA_IRQHandler+0x430>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d004      	beq.n	8006342 <HAL_DMA_IRQHandler+0x3e2>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a15      	ldr	r2, [pc, #84]	; (8006394 <HAL_DMA_IRQHandler+0x434>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d12a      	bne.n	8006398 <HAL_DMA_IRQHandler+0x438>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0302 	and.w	r3, r3, #2
 800634c:	2b00      	cmp	r3, #0
 800634e:	bf14      	ite	ne
 8006350:	2301      	movne	r3, #1
 8006352:	2300      	moveq	r3, #0
 8006354:	b2db      	uxtb	r3, r3
 8006356:	e023      	b.n	80063a0 <HAL_DMA_IRQHandler+0x440>
 8006358:	40020010 	.word	0x40020010
 800635c:	40020028 	.word	0x40020028
 8006360:	40020040 	.word	0x40020040
 8006364:	40020058 	.word	0x40020058
 8006368:	40020070 	.word	0x40020070
 800636c:	40020088 	.word	0x40020088
 8006370:	400200a0 	.word	0x400200a0
 8006374:	400200b8 	.word	0x400200b8
 8006378:	40020410 	.word	0x40020410
 800637c:	40020428 	.word	0x40020428
 8006380:	40020440 	.word	0x40020440
 8006384:	40020458 	.word	0x40020458
 8006388:	40020470 	.word	0x40020470
 800638c:	40020488 	.word	0x40020488
 8006390:	400204a0 	.word	0x400204a0
 8006394:	400204b8 	.word	0x400204b8
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2300      	movs	r3, #0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00d      	beq.n	80063c0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063a8:	f003 031f 	and.w	r3, r3, #31
 80063ac:	2204      	movs	r2, #4
 80063ae:	409a      	lsls	r2, r3
 80063b0:	6a3b      	ldr	r3, [r7, #32]
 80063b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063b8:	f043 0204 	orr.w	r2, r3, #4
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063c4:	f003 031f 	and.w	r3, r3, #31
 80063c8:	2210      	movs	r2, #16
 80063ca:	409a      	lsls	r2, r3
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	4013      	ands	r3, r2
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f000 80a6 	beq.w	8006522 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a85      	ldr	r2, [pc, #532]	; (80065f0 <HAL_DMA_IRQHandler+0x690>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d04a      	beq.n	8006476 <HAL_DMA_IRQHandler+0x516>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a83      	ldr	r2, [pc, #524]	; (80065f4 <HAL_DMA_IRQHandler+0x694>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d045      	beq.n	8006476 <HAL_DMA_IRQHandler+0x516>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a82      	ldr	r2, [pc, #520]	; (80065f8 <HAL_DMA_IRQHandler+0x698>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d040      	beq.n	8006476 <HAL_DMA_IRQHandler+0x516>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a80      	ldr	r2, [pc, #512]	; (80065fc <HAL_DMA_IRQHandler+0x69c>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d03b      	beq.n	8006476 <HAL_DMA_IRQHandler+0x516>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a7f      	ldr	r2, [pc, #508]	; (8006600 <HAL_DMA_IRQHandler+0x6a0>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d036      	beq.n	8006476 <HAL_DMA_IRQHandler+0x516>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a7d      	ldr	r2, [pc, #500]	; (8006604 <HAL_DMA_IRQHandler+0x6a4>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d031      	beq.n	8006476 <HAL_DMA_IRQHandler+0x516>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a7c      	ldr	r2, [pc, #496]	; (8006608 <HAL_DMA_IRQHandler+0x6a8>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d02c      	beq.n	8006476 <HAL_DMA_IRQHandler+0x516>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a7a      	ldr	r2, [pc, #488]	; (800660c <HAL_DMA_IRQHandler+0x6ac>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d027      	beq.n	8006476 <HAL_DMA_IRQHandler+0x516>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a79      	ldr	r2, [pc, #484]	; (8006610 <HAL_DMA_IRQHandler+0x6b0>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d022      	beq.n	8006476 <HAL_DMA_IRQHandler+0x516>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a77      	ldr	r2, [pc, #476]	; (8006614 <HAL_DMA_IRQHandler+0x6b4>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d01d      	beq.n	8006476 <HAL_DMA_IRQHandler+0x516>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a76      	ldr	r2, [pc, #472]	; (8006618 <HAL_DMA_IRQHandler+0x6b8>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d018      	beq.n	8006476 <HAL_DMA_IRQHandler+0x516>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a74      	ldr	r2, [pc, #464]	; (800661c <HAL_DMA_IRQHandler+0x6bc>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d013      	beq.n	8006476 <HAL_DMA_IRQHandler+0x516>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a73      	ldr	r2, [pc, #460]	; (8006620 <HAL_DMA_IRQHandler+0x6c0>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d00e      	beq.n	8006476 <HAL_DMA_IRQHandler+0x516>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a71      	ldr	r2, [pc, #452]	; (8006624 <HAL_DMA_IRQHandler+0x6c4>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d009      	beq.n	8006476 <HAL_DMA_IRQHandler+0x516>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a70      	ldr	r2, [pc, #448]	; (8006628 <HAL_DMA_IRQHandler+0x6c8>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d004      	beq.n	8006476 <HAL_DMA_IRQHandler+0x516>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a6e      	ldr	r2, [pc, #440]	; (800662c <HAL_DMA_IRQHandler+0x6cc>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d10a      	bne.n	800648c <HAL_DMA_IRQHandler+0x52c>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0308 	and.w	r3, r3, #8
 8006480:	2b00      	cmp	r3, #0
 8006482:	bf14      	ite	ne
 8006484:	2301      	movne	r3, #1
 8006486:	2300      	moveq	r3, #0
 8006488:	b2db      	uxtb	r3, r3
 800648a:	e009      	b.n	80064a0 <HAL_DMA_IRQHandler+0x540>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0304 	and.w	r3, r3, #4
 8006496:	2b00      	cmp	r3, #0
 8006498:	bf14      	ite	ne
 800649a:	2301      	movne	r3, #1
 800649c:	2300      	moveq	r3, #0
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d03e      	beq.n	8006522 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064a8:	f003 031f 	and.w	r3, r3, #31
 80064ac:	2210      	movs	r2, #16
 80064ae:	409a      	lsls	r2, r3
 80064b0:	6a3b      	ldr	r3, [r7, #32]
 80064b2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d018      	beq.n	80064f4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d108      	bne.n	80064e2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d024      	beq.n	8006522 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	4798      	blx	r3
 80064e0:	e01f      	b.n	8006522 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d01b      	beq.n	8006522 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	4798      	blx	r3
 80064f2:	e016      	b.n	8006522 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d107      	bne.n	8006512 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f022 0208 	bic.w	r2, r2, #8
 8006510:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006516:	2b00      	cmp	r3, #0
 8006518:	d003      	beq.n	8006522 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006526:	f003 031f 	and.w	r3, r3, #31
 800652a:	2220      	movs	r2, #32
 800652c:	409a      	lsls	r2, r3
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	4013      	ands	r3, r2
 8006532:	2b00      	cmp	r3, #0
 8006534:	f000 8110 	beq.w	8006758 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a2c      	ldr	r2, [pc, #176]	; (80065f0 <HAL_DMA_IRQHandler+0x690>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d04a      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x678>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a2b      	ldr	r2, [pc, #172]	; (80065f4 <HAL_DMA_IRQHandler+0x694>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d045      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x678>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a29      	ldr	r2, [pc, #164]	; (80065f8 <HAL_DMA_IRQHandler+0x698>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d040      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x678>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a28      	ldr	r2, [pc, #160]	; (80065fc <HAL_DMA_IRQHandler+0x69c>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d03b      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x678>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a26      	ldr	r2, [pc, #152]	; (8006600 <HAL_DMA_IRQHandler+0x6a0>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d036      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x678>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a25      	ldr	r2, [pc, #148]	; (8006604 <HAL_DMA_IRQHandler+0x6a4>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d031      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x678>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a23      	ldr	r2, [pc, #140]	; (8006608 <HAL_DMA_IRQHandler+0x6a8>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d02c      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x678>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a22      	ldr	r2, [pc, #136]	; (800660c <HAL_DMA_IRQHandler+0x6ac>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d027      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x678>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a20      	ldr	r2, [pc, #128]	; (8006610 <HAL_DMA_IRQHandler+0x6b0>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d022      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x678>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a1f      	ldr	r2, [pc, #124]	; (8006614 <HAL_DMA_IRQHandler+0x6b4>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d01d      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x678>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a1d      	ldr	r2, [pc, #116]	; (8006618 <HAL_DMA_IRQHandler+0x6b8>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d018      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x678>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a1c      	ldr	r2, [pc, #112]	; (800661c <HAL_DMA_IRQHandler+0x6bc>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d013      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x678>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a1a      	ldr	r2, [pc, #104]	; (8006620 <HAL_DMA_IRQHandler+0x6c0>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d00e      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x678>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a19      	ldr	r2, [pc, #100]	; (8006624 <HAL_DMA_IRQHandler+0x6c4>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d009      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x678>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a17      	ldr	r2, [pc, #92]	; (8006628 <HAL_DMA_IRQHandler+0x6c8>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d004      	beq.n	80065d8 <HAL_DMA_IRQHandler+0x678>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a16      	ldr	r2, [pc, #88]	; (800662c <HAL_DMA_IRQHandler+0x6cc>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d12b      	bne.n	8006630 <HAL_DMA_IRQHandler+0x6d0>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 0310 	and.w	r3, r3, #16
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	bf14      	ite	ne
 80065e6:	2301      	movne	r3, #1
 80065e8:	2300      	moveq	r3, #0
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	e02a      	b.n	8006644 <HAL_DMA_IRQHandler+0x6e4>
 80065ee:	bf00      	nop
 80065f0:	40020010 	.word	0x40020010
 80065f4:	40020028 	.word	0x40020028
 80065f8:	40020040 	.word	0x40020040
 80065fc:	40020058 	.word	0x40020058
 8006600:	40020070 	.word	0x40020070
 8006604:	40020088 	.word	0x40020088
 8006608:	400200a0 	.word	0x400200a0
 800660c:	400200b8 	.word	0x400200b8
 8006610:	40020410 	.word	0x40020410
 8006614:	40020428 	.word	0x40020428
 8006618:	40020440 	.word	0x40020440
 800661c:	40020458 	.word	0x40020458
 8006620:	40020470 	.word	0x40020470
 8006624:	40020488 	.word	0x40020488
 8006628:	400204a0 	.word	0x400204a0
 800662c:	400204b8 	.word	0x400204b8
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 0302 	and.w	r3, r3, #2
 800663a:	2b00      	cmp	r3, #0
 800663c:	bf14      	ite	ne
 800663e:	2301      	movne	r3, #1
 8006640:	2300      	moveq	r3, #0
 8006642:	b2db      	uxtb	r3, r3
 8006644:	2b00      	cmp	r3, #0
 8006646:	f000 8087 	beq.w	8006758 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800664e:	f003 031f 	and.w	r3, r3, #31
 8006652:	2220      	movs	r2, #32
 8006654:	409a      	lsls	r2, r3
 8006656:	6a3b      	ldr	r3, [r7, #32]
 8006658:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006660:	b2db      	uxtb	r3, r3
 8006662:	2b04      	cmp	r3, #4
 8006664:	d139      	bne.n	80066da <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f022 0216 	bic.w	r2, r2, #22
 8006674:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	695a      	ldr	r2, [r3, #20]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006684:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668a:	2b00      	cmp	r3, #0
 800668c:	d103      	bne.n	8006696 <HAL_DMA_IRQHandler+0x736>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006692:	2b00      	cmp	r3, #0
 8006694:	d007      	beq.n	80066a6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f022 0208 	bic.w	r2, r2, #8
 80066a4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066aa:	f003 031f 	and.w	r3, r3, #31
 80066ae:	223f      	movs	r2, #63	; 0x3f
 80066b0:	409a      	lsls	r2, r3
 80066b2:	6a3b      	ldr	r3, [r7, #32]
 80066b4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f000 834a 	beq.w	8006d64 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	4798      	blx	r3
          }
          return;
 80066d8:	e344      	b.n	8006d64 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d018      	beq.n	800671a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d108      	bne.n	8006708 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d02c      	beq.n	8006758 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	4798      	blx	r3
 8006706:	e027      	b.n	8006758 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800670c:	2b00      	cmp	r3, #0
 800670e:	d023      	beq.n	8006758 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	4798      	blx	r3
 8006718:	e01e      	b.n	8006758 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006724:	2b00      	cmp	r3, #0
 8006726:	d10f      	bne.n	8006748 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f022 0210 	bic.w	r2, r2, #16
 8006736:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800674c:	2b00      	cmp	r3, #0
 800674e:	d003      	beq.n	8006758 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800675c:	2b00      	cmp	r3, #0
 800675e:	f000 8306 	beq.w	8006d6e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006766:	f003 0301 	and.w	r3, r3, #1
 800676a:	2b00      	cmp	r3, #0
 800676c:	f000 8088 	beq.w	8006880 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2204      	movs	r2, #4
 8006774:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a7a      	ldr	r2, [pc, #488]	; (8006968 <HAL_DMA_IRQHandler+0xa08>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d04a      	beq.n	8006818 <HAL_DMA_IRQHandler+0x8b8>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a79      	ldr	r2, [pc, #484]	; (800696c <HAL_DMA_IRQHandler+0xa0c>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d045      	beq.n	8006818 <HAL_DMA_IRQHandler+0x8b8>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a77      	ldr	r2, [pc, #476]	; (8006970 <HAL_DMA_IRQHandler+0xa10>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d040      	beq.n	8006818 <HAL_DMA_IRQHandler+0x8b8>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a76      	ldr	r2, [pc, #472]	; (8006974 <HAL_DMA_IRQHandler+0xa14>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d03b      	beq.n	8006818 <HAL_DMA_IRQHandler+0x8b8>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a74      	ldr	r2, [pc, #464]	; (8006978 <HAL_DMA_IRQHandler+0xa18>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d036      	beq.n	8006818 <HAL_DMA_IRQHandler+0x8b8>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a73      	ldr	r2, [pc, #460]	; (800697c <HAL_DMA_IRQHandler+0xa1c>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d031      	beq.n	8006818 <HAL_DMA_IRQHandler+0x8b8>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a71      	ldr	r2, [pc, #452]	; (8006980 <HAL_DMA_IRQHandler+0xa20>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d02c      	beq.n	8006818 <HAL_DMA_IRQHandler+0x8b8>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a70      	ldr	r2, [pc, #448]	; (8006984 <HAL_DMA_IRQHandler+0xa24>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d027      	beq.n	8006818 <HAL_DMA_IRQHandler+0x8b8>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a6e      	ldr	r2, [pc, #440]	; (8006988 <HAL_DMA_IRQHandler+0xa28>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d022      	beq.n	8006818 <HAL_DMA_IRQHandler+0x8b8>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a6d      	ldr	r2, [pc, #436]	; (800698c <HAL_DMA_IRQHandler+0xa2c>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d01d      	beq.n	8006818 <HAL_DMA_IRQHandler+0x8b8>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a6b      	ldr	r2, [pc, #428]	; (8006990 <HAL_DMA_IRQHandler+0xa30>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d018      	beq.n	8006818 <HAL_DMA_IRQHandler+0x8b8>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a6a      	ldr	r2, [pc, #424]	; (8006994 <HAL_DMA_IRQHandler+0xa34>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d013      	beq.n	8006818 <HAL_DMA_IRQHandler+0x8b8>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a68      	ldr	r2, [pc, #416]	; (8006998 <HAL_DMA_IRQHandler+0xa38>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d00e      	beq.n	8006818 <HAL_DMA_IRQHandler+0x8b8>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a67      	ldr	r2, [pc, #412]	; (800699c <HAL_DMA_IRQHandler+0xa3c>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d009      	beq.n	8006818 <HAL_DMA_IRQHandler+0x8b8>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a65      	ldr	r2, [pc, #404]	; (80069a0 <HAL_DMA_IRQHandler+0xa40>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d004      	beq.n	8006818 <HAL_DMA_IRQHandler+0x8b8>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a64      	ldr	r2, [pc, #400]	; (80069a4 <HAL_DMA_IRQHandler+0xa44>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d108      	bne.n	800682a <HAL_DMA_IRQHandler+0x8ca>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f022 0201 	bic.w	r2, r2, #1
 8006826:	601a      	str	r2, [r3, #0]
 8006828:	e007      	b.n	800683a <HAL_DMA_IRQHandler+0x8da>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f022 0201 	bic.w	r2, r2, #1
 8006838:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	3301      	adds	r3, #1
 800683e:	60fb      	str	r3, [r7, #12]
 8006840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006842:	429a      	cmp	r2, r3
 8006844:	d307      	bcc.n	8006856 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0301 	and.w	r3, r3, #1
 8006850:	2b00      	cmp	r3, #0
 8006852:	d1f2      	bne.n	800683a <HAL_DMA_IRQHandler+0x8da>
 8006854:	e000      	b.n	8006858 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006856:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0301 	and.w	r3, r3, #1
 8006862:	2b00      	cmp	r3, #0
 8006864:	d004      	beq.n	8006870 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2203      	movs	r2, #3
 800686a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800686e:	e003      	b.n	8006878 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006884:	2b00      	cmp	r3, #0
 8006886:	f000 8272 	beq.w	8006d6e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	4798      	blx	r3
 8006892:	e26c      	b.n	8006d6e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a43      	ldr	r2, [pc, #268]	; (80069a8 <HAL_DMA_IRQHandler+0xa48>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d022      	beq.n	80068e4 <HAL_DMA_IRQHandler+0x984>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a42      	ldr	r2, [pc, #264]	; (80069ac <HAL_DMA_IRQHandler+0xa4c>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d01d      	beq.n	80068e4 <HAL_DMA_IRQHandler+0x984>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a40      	ldr	r2, [pc, #256]	; (80069b0 <HAL_DMA_IRQHandler+0xa50>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d018      	beq.n	80068e4 <HAL_DMA_IRQHandler+0x984>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a3f      	ldr	r2, [pc, #252]	; (80069b4 <HAL_DMA_IRQHandler+0xa54>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d013      	beq.n	80068e4 <HAL_DMA_IRQHandler+0x984>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a3d      	ldr	r2, [pc, #244]	; (80069b8 <HAL_DMA_IRQHandler+0xa58>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d00e      	beq.n	80068e4 <HAL_DMA_IRQHandler+0x984>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a3c      	ldr	r2, [pc, #240]	; (80069bc <HAL_DMA_IRQHandler+0xa5c>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d009      	beq.n	80068e4 <HAL_DMA_IRQHandler+0x984>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a3a      	ldr	r2, [pc, #232]	; (80069c0 <HAL_DMA_IRQHandler+0xa60>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d004      	beq.n	80068e4 <HAL_DMA_IRQHandler+0x984>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a39      	ldr	r2, [pc, #228]	; (80069c4 <HAL_DMA_IRQHandler+0xa64>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d101      	bne.n	80068e8 <HAL_DMA_IRQHandler+0x988>
 80068e4:	2301      	movs	r3, #1
 80068e6:	e000      	b.n	80068ea <HAL_DMA_IRQHandler+0x98a>
 80068e8:	2300      	movs	r3, #0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	f000 823f 	beq.w	8006d6e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068fc:	f003 031f 	and.w	r3, r3, #31
 8006900:	2204      	movs	r2, #4
 8006902:	409a      	lsls	r2, r3
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	4013      	ands	r3, r2
 8006908:	2b00      	cmp	r3, #0
 800690a:	f000 80cd 	beq.w	8006aa8 <HAL_DMA_IRQHandler+0xb48>
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	f003 0304 	and.w	r3, r3, #4
 8006914:	2b00      	cmp	r3, #0
 8006916:	f000 80c7 	beq.w	8006aa8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800691e:	f003 031f 	and.w	r3, r3, #31
 8006922:	2204      	movs	r2, #4
 8006924:	409a      	lsls	r2, r3
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d049      	beq.n	80069c8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800693a:	2b00      	cmp	r3, #0
 800693c:	d109      	bne.n	8006952 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006942:	2b00      	cmp	r3, #0
 8006944:	f000 8210 	beq.w	8006d68 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006950:	e20a      	b.n	8006d68 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006956:	2b00      	cmp	r3, #0
 8006958:	f000 8206 	beq.w	8006d68 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006964:	e200      	b.n	8006d68 <HAL_DMA_IRQHandler+0xe08>
 8006966:	bf00      	nop
 8006968:	40020010 	.word	0x40020010
 800696c:	40020028 	.word	0x40020028
 8006970:	40020040 	.word	0x40020040
 8006974:	40020058 	.word	0x40020058
 8006978:	40020070 	.word	0x40020070
 800697c:	40020088 	.word	0x40020088
 8006980:	400200a0 	.word	0x400200a0
 8006984:	400200b8 	.word	0x400200b8
 8006988:	40020410 	.word	0x40020410
 800698c:	40020428 	.word	0x40020428
 8006990:	40020440 	.word	0x40020440
 8006994:	40020458 	.word	0x40020458
 8006998:	40020470 	.word	0x40020470
 800699c:	40020488 	.word	0x40020488
 80069a0:	400204a0 	.word	0x400204a0
 80069a4:	400204b8 	.word	0x400204b8
 80069a8:	58025408 	.word	0x58025408
 80069ac:	5802541c 	.word	0x5802541c
 80069b0:	58025430 	.word	0x58025430
 80069b4:	58025444 	.word	0x58025444
 80069b8:	58025458 	.word	0x58025458
 80069bc:	5802546c 	.word	0x5802546c
 80069c0:	58025480 	.word	0x58025480
 80069c4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	f003 0320 	and.w	r3, r3, #32
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d160      	bne.n	8006a94 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a7f      	ldr	r2, [pc, #508]	; (8006bd4 <HAL_DMA_IRQHandler+0xc74>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d04a      	beq.n	8006a72 <HAL_DMA_IRQHandler+0xb12>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a7d      	ldr	r2, [pc, #500]	; (8006bd8 <HAL_DMA_IRQHandler+0xc78>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d045      	beq.n	8006a72 <HAL_DMA_IRQHandler+0xb12>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a7c      	ldr	r2, [pc, #496]	; (8006bdc <HAL_DMA_IRQHandler+0xc7c>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d040      	beq.n	8006a72 <HAL_DMA_IRQHandler+0xb12>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a7a      	ldr	r2, [pc, #488]	; (8006be0 <HAL_DMA_IRQHandler+0xc80>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d03b      	beq.n	8006a72 <HAL_DMA_IRQHandler+0xb12>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a79      	ldr	r2, [pc, #484]	; (8006be4 <HAL_DMA_IRQHandler+0xc84>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d036      	beq.n	8006a72 <HAL_DMA_IRQHandler+0xb12>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a77      	ldr	r2, [pc, #476]	; (8006be8 <HAL_DMA_IRQHandler+0xc88>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d031      	beq.n	8006a72 <HAL_DMA_IRQHandler+0xb12>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a76      	ldr	r2, [pc, #472]	; (8006bec <HAL_DMA_IRQHandler+0xc8c>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d02c      	beq.n	8006a72 <HAL_DMA_IRQHandler+0xb12>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a74      	ldr	r2, [pc, #464]	; (8006bf0 <HAL_DMA_IRQHandler+0xc90>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d027      	beq.n	8006a72 <HAL_DMA_IRQHandler+0xb12>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a73      	ldr	r2, [pc, #460]	; (8006bf4 <HAL_DMA_IRQHandler+0xc94>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d022      	beq.n	8006a72 <HAL_DMA_IRQHandler+0xb12>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a71      	ldr	r2, [pc, #452]	; (8006bf8 <HAL_DMA_IRQHandler+0xc98>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d01d      	beq.n	8006a72 <HAL_DMA_IRQHandler+0xb12>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a70      	ldr	r2, [pc, #448]	; (8006bfc <HAL_DMA_IRQHandler+0xc9c>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d018      	beq.n	8006a72 <HAL_DMA_IRQHandler+0xb12>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a6e      	ldr	r2, [pc, #440]	; (8006c00 <HAL_DMA_IRQHandler+0xca0>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d013      	beq.n	8006a72 <HAL_DMA_IRQHandler+0xb12>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a6d      	ldr	r2, [pc, #436]	; (8006c04 <HAL_DMA_IRQHandler+0xca4>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d00e      	beq.n	8006a72 <HAL_DMA_IRQHandler+0xb12>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a6b      	ldr	r2, [pc, #428]	; (8006c08 <HAL_DMA_IRQHandler+0xca8>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d009      	beq.n	8006a72 <HAL_DMA_IRQHandler+0xb12>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a6a      	ldr	r2, [pc, #424]	; (8006c0c <HAL_DMA_IRQHandler+0xcac>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d004      	beq.n	8006a72 <HAL_DMA_IRQHandler+0xb12>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a68      	ldr	r2, [pc, #416]	; (8006c10 <HAL_DMA_IRQHandler+0xcb0>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d108      	bne.n	8006a84 <HAL_DMA_IRQHandler+0xb24>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f022 0208 	bic.w	r2, r2, #8
 8006a80:	601a      	str	r2, [r3, #0]
 8006a82:	e007      	b.n	8006a94 <HAL_DMA_IRQHandler+0xb34>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f022 0204 	bic.w	r2, r2, #4
 8006a92:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f000 8165 	beq.w	8006d68 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006aa6:	e15f      	b.n	8006d68 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aac:	f003 031f 	and.w	r3, r3, #31
 8006ab0:	2202      	movs	r2, #2
 8006ab2:	409a      	lsls	r2, r3
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f000 80c5 	beq.w	8006c48 <HAL_DMA_IRQHandler+0xce8>
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	f003 0302 	and.w	r3, r3, #2
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f000 80bf 	beq.w	8006c48 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ace:	f003 031f 	and.w	r3, r3, #31
 8006ad2:	2202      	movs	r2, #2
 8006ad4:	409a      	lsls	r2, r3
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d018      	beq.n	8006b16 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d109      	bne.n	8006b02 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f000 813a 	beq.w	8006d6c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b00:	e134      	b.n	8006d6c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f000 8130 	beq.w	8006d6c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b14:	e12a      	b.n	8006d6c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	f003 0320 	and.w	r3, r3, #32
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f040 8089 	bne.w	8006c34 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a2b      	ldr	r2, [pc, #172]	; (8006bd4 <HAL_DMA_IRQHandler+0xc74>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d04a      	beq.n	8006bc2 <HAL_DMA_IRQHandler+0xc62>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a29      	ldr	r2, [pc, #164]	; (8006bd8 <HAL_DMA_IRQHandler+0xc78>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d045      	beq.n	8006bc2 <HAL_DMA_IRQHandler+0xc62>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a28      	ldr	r2, [pc, #160]	; (8006bdc <HAL_DMA_IRQHandler+0xc7c>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d040      	beq.n	8006bc2 <HAL_DMA_IRQHandler+0xc62>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a26      	ldr	r2, [pc, #152]	; (8006be0 <HAL_DMA_IRQHandler+0xc80>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d03b      	beq.n	8006bc2 <HAL_DMA_IRQHandler+0xc62>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a25      	ldr	r2, [pc, #148]	; (8006be4 <HAL_DMA_IRQHandler+0xc84>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d036      	beq.n	8006bc2 <HAL_DMA_IRQHandler+0xc62>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a23      	ldr	r2, [pc, #140]	; (8006be8 <HAL_DMA_IRQHandler+0xc88>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d031      	beq.n	8006bc2 <HAL_DMA_IRQHandler+0xc62>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a22      	ldr	r2, [pc, #136]	; (8006bec <HAL_DMA_IRQHandler+0xc8c>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d02c      	beq.n	8006bc2 <HAL_DMA_IRQHandler+0xc62>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a20      	ldr	r2, [pc, #128]	; (8006bf0 <HAL_DMA_IRQHandler+0xc90>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d027      	beq.n	8006bc2 <HAL_DMA_IRQHandler+0xc62>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a1f      	ldr	r2, [pc, #124]	; (8006bf4 <HAL_DMA_IRQHandler+0xc94>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d022      	beq.n	8006bc2 <HAL_DMA_IRQHandler+0xc62>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a1d      	ldr	r2, [pc, #116]	; (8006bf8 <HAL_DMA_IRQHandler+0xc98>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d01d      	beq.n	8006bc2 <HAL_DMA_IRQHandler+0xc62>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a1c      	ldr	r2, [pc, #112]	; (8006bfc <HAL_DMA_IRQHandler+0xc9c>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d018      	beq.n	8006bc2 <HAL_DMA_IRQHandler+0xc62>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a1a      	ldr	r2, [pc, #104]	; (8006c00 <HAL_DMA_IRQHandler+0xca0>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d013      	beq.n	8006bc2 <HAL_DMA_IRQHandler+0xc62>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a19      	ldr	r2, [pc, #100]	; (8006c04 <HAL_DMA_IRQHandler+0xca4>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d00e      	beq.n	8006bc2 <HAL_DMA_IRQHandler+0xc62>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a17      	ldr	r2, [pc, #92]	; (8006c08 <HAL_DMA_IRQHandler+0xca8>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d009      	beq.n	8006bc2 <HAL_DMA_IRQHandler+0xc62>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a16      	ldr	r2, [pc, #88]	; (8006c0c <HAL_DMA_IRQHandler+0xcac>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d004      	beq.n	8006bc2 <HAL_DMA_IRQHandler+0xc62>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a14      	ldr	r2, [pc, #80]	; (8006c10 <HAL_DMA_IRQHandler+0xcb0>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d128      	bne.n	8006c14 <HAL_DMA_IRQHandler+0xcb4>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f022 0214 	bic.w	r2, r2, #20
 8006bd0:	601a      	str	r2, [r3, #0]
 8006bd2:	e027      	b.n	8006c24 <HAL_DMA_IRQHandler+0xcc4>
 8006bd4:	40020010 	.word	0x40020010
 8006bd8:	40020028 	.word	0x40020028
 8006bdc:	40020040 	.word	0x40020040
 8006be0:	40020058 	.word	0x40020058
 8006be4:	40020070 	.word	0x40020070
 8006be8:	40020088 	.word	0x40020088
 8006bec:	400200a0 	.word	0x400200a0
 8006bf0:	400200b8 	.word	0x400200b8
 8006bf4:	40020410 	.word	0x40020410
 8006bf8:	40020428 	.word	0x40020428
 8006bfc:	40020440 	.word	0x40020440
 8006c00:	40020458 	.word	0x40020458
 8006c04:	40020470 	.word	0x40020470
 8006c08:	40020488 	.word	0x40020488
 8006c0c:	400204a0 	.word	0x400204a0
 8006c10:	400204b8 	.word	0x400204b8
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f022 020a 	bic.w	r2, r2, #10
 8006c22:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	f000 8097 	beq.w	8006d6c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c46:	e091      	b.n	8006d6c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c4c:	f003 031f 	and.w	r3, r3, #31
 8006c50:	2208      	movs	r2, #8
 8006c52:	409a      	lsls	r2, r3
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	4013      	ands	r3, r2
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	f000 8088 	beq.w	8006d6e <HAL_DMA_IRQHandler+0xe0e>
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	f003 0308 	and.w	r3, r3, #8
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f000 8082 	beq.w	8006d6e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a41      	ldr	r2, [pc, #260]	; (8006d74 <HAL_DMA_IRQHandler+0xe14>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d04a      	beq.n	8006d0a <HAL_DMA_IRQHandler+0xdaa>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a3f      	ldr	r2, [pc, #252]	; (8006d78 <HAL_DMA_IRQHandler+0xe18>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d045      	beq.n	8006d0a <HAL_DMA_IRQHandler+0xdaa>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a3e      	ldr	r2, [pc, #248]	; (8006d7c <HAL_DMA_IRQHandler+0xe1c>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d040      	beq.n	8006d0a <HAL_DMA_IRQHandler+0xdaa>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a3c      	ldr	r2, [pc, #240]	; (8006d80 <HAL_DMA_IRQHandler+0xe20>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d03b      	beq.n	8006d0a <HAL_DMA_IRQHandler+0xdaa>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a3b      	ldr	r2, [pc, #236]	; (8006d84 <HAL_DMA_IRQHandler+0xe24>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d036      	beq.n	8006d0a <HAL_DMA_IRQHandler+0xdaa>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a39      	ldr	r2, [pc, #228]	; (8006d88 <HAL_DMA_IRQHandler+0xe28>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d031      	beq.n	8006d0a <HAL_DMA_IRQHandler+0xdaa>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a38      	ldr	r2, [pc, #224]	; (8006d8c <HAL_DMA_IRQHandler+0xe2c>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d02c      	beq.n	8006d0a <HAL_DMA_IRQHandler+0xdaa>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a36      	ldr	r2, [pc, #216]	; (8006d90 <HAL_DMA_IRQHandler+0xe30>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d027      	beq.n	8006d0a <HAL_DMA_IRQHandler+0xdaa>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a35      	ldr	r2, [pc, #212]	; (8006d94 <HAL_DMA_IRQHandler+0xe34>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d022      	beq.n	8006d0a <HAL_DMA_IRQHandler+0xdaa>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a33      	ldr	r2, [pc, #204]	; (8006d98 <HAL_DMA_IRQHandler+0xe38>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d01d      	beq.n	8006d0a <HAL_DMA_IRQHandler+0xdaa>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a32      	ldr	r2, [pc, #200]	; (8006d9c <HAL_DMA_IRQHandler+0xe3c>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d018      	beq.n	8006d0a <HAL_DMA_IRQHandler+0xdaa>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a30      	ldr	r2, [pc, #192]	; (8006da0 <HAL_DMA_IRQHandler+0xe40>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d013      	beq.n	8006d0a <HAL_DMA_IRQHandler+0xdaa>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a2f      	ldr	r2, [pc, #188]	; (8006da4 <HAL_DMA_IRQHandler+0xe44>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d00e      	beq.n	8006d0a <HAL_DMA_IRQHandler+0xdaa>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a2d      	ldr	r2, [pc, #180]	; (8006da8 <HAL_DMA_IRQHandler+0xe48>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d009      	beq.n	8006d0a <HAL_DMA_IRQHandler+0xdaa>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a2c      	ldr	r2, [pc, #176]	; (8006dac <HAL_DMA_IRQHandler+0xe4c>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d004      	beq.n	8006d0a <HAL_DMA_IRQHandler+0xdaa>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a2a      	ldr	r2, [pc, #168]	; (8006db0 <HAL_DMA_IRQHandler+0xe50>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d108      	bne.n	8006d1c <HAL_DMA_IRQHandler+0xdbc>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f022 021c 	bic.w	r2, r2, #28
 8006d18:	601a      	str	r2, [r3, #0]
 8006d1a:	e007      	b.n	8006d2c <HAL_DMA_IRQHandler+0xdcc>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f022 020e 	bic.w	r2, r2, #14
 8006d2a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d30:	f003 031f 	and.w	r3, r3, #31
 8006d34:	2201      	movs	r2, #1
 8006d36:	409a      	lsls	r2, r3
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2201      	movs	r2, #1
 8006d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d009      	beq.n	8006d6e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	4798      	blx	r3
 8006d62:	e004      	b.n	8006d6e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006d64:	bf00      	nop
 8006d66:	e002      	b.n	8006d6e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d68:	bf00      	nop
 8006d6a:	e000      	b.n	8006d6e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d6c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006d6e:	3728      	adds	r7, #40	; 0x28
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	40020010 	.word	0x40020010
 8006d78:	40020028 	.word	0x40020028
 8006d7c:	40020040 	.word	0x40020040
 8006d80:	40020058 	.word	0x40020058
 8006d84:	40020070 	.word	0x40020070
 8006d88:	40020088 	.word	0x40020088
 8006d8c:	400200a0 	.word	0x400200a0
 8006d90:	400200b8 	.word	0x400200b8
 8006d94:	40020410 	.word	0x40020410
 8006d98:	40020428 	.word	0x40020428
 8006d9c:	40020440 	.word	0x40020440
 8006da0:	40020458 	.word	0x40020458
 8006da4:	40020470 	.word	0x40020470
 8006da8:	40020488 	.word	0x40020488
 8006dac:	400204a0 	.word	0x400204a0
 8006db0:	400204b8 	.word	0x400204b8

08006db4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b087      	sub	sp, #28
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	607a      	str	r2, [r7, #4]
 8006dc0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dc6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dcc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a7f      	ldr	r2, [pc, #508]	; (8006fd0 <DMA_SetConfig+0x21c>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d072      	beq.n	8006ebe <DMA_SetConfig+0x10a>
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a7d      	ldr	r2, [pc, #500]	; (8006fd4 <DMA_SetConfig+0x220>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d06d      	beq.n	8006ebe <DMA_SetConfig+0x10a>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a7c      	ldr	r2, [pc, #496]	; (8006fd8 <DMA_SetConfig+0x224>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d068      	beq.n	8006ebe <DMA_SetConfig+0x10a>
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a7a      	ldr	r2, [pc, #488]	; (8006fdc <DMA_SetConfig+0x228>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d063      	beq.n	8006ebe <DMA_SetConfig+0x10a>
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a79      	ldr	r2, [pc, #484]	; (8006fe0 <DMA_SetConfig+0x22c>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d05e      	beq.n	8006ebe <DMA_SetConfig+0x10a>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a77      	ldr	r2, [pc, #476]	; (8006fe4 <DMA_SetConfig+0x230>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d059      	beq.n	8006ebe <DMA_SetConfig+0x10a>
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a76      	ldr	r2, [pc, #472]	; (8006fe8 <DMA_SetConfig+0x234>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d054      	beq.n	8006ebe <DMA_SetConfig+0x10a>
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a74      	ldr	r2, [pc, #464]	; (8006fec <DMA_SetConfig+0x238>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d04f      	beq.n	8006ebe <DMA_SetConfig+0x10a>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a73      	ldr	r2, [pc, #460]	; (8006ff0 <DMA_SetConfig+0x23c>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d04a      	beq.n	8006ebe <DMA_SetConfig+0x10a>
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a71      	ldr	r2, [pc, #452]	; (8006ff4 <DMA_SetConfig+0x240>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d045      	beq.n	8006ebe <DMA_SetConfig+0x10a>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a70      	ldr	r2, [pc, #448]	; (8006ff8 <DMA_SetConfig+0x244>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d040      	beq.n	8006ebe <DMA_SetConfig+0x10a>
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a6e      	ldr	r2, [pc, #440]	; (8006ffc <DMA_SetConfig+0x248>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d03b      	beq.n	8006ebe <DMA_SetConfig+0x10a>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a6d      	ldr	r2, [pc, #436]	; (8007000 <DMA_SetConfig+0x24c>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d036      	beq.n	8006ebe <DMA_SetConfig+0x10a>
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a6b      	ldr	r2, [pc, #428]	; (8007004 <DMA_SetConfig+0x250>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d031      	beq.n	8006ebe <DMA_SetConfig+0x10a>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a6a      	ldr	r2, [pc, #424]	; (8007008 <DMA_SetConfig+0x254>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d02c      	beq.n	8006ebe <DMA_SetConfig+0x10a>
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a68      	ldr	r2, [pc, #416]	; (800700c <DMA_SetConfig+0x258>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d027      	beq.n	8006ebe <DMA_SetConfig+0x10a>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a67      	ldr	r2, [pc, #412]	; (8007010 <DMA_SetConfig+0x25c>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d022      	beq.n	8006ebe <DMA_SetConfig+0x10a>
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a65      	ldr	r2, [pc, #404]	; (8007014 <DMA_SetConfig+0x260>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d01d      	beq.n	8006ebe <DMA_SetConfig+0x10a>
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a64      	ldr	r2, [pc, #400]	; (8007018 <DMA_SetConfig+0x264>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d018      	beq.n	8006ebe <DMA_SetConfig+0x10a>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a62      	ldr	r2, [pc, #392]	; (800701c <DMA_SetConfig+0x268>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d013      	beq.n	8006ebe <DMA_SetConfig+0x10a>
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a61      	ldr	r2, [pc, #388]	; (8007020 <DMA_SetConfig+0x26c>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d00e      	beq.n	8006ebe <DMA_SetConfig+0x10a>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a5f      	ldr	r2, [pc, #380]	; (8007024 <DMA_SetConfig+0x270>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d009      	beq.n	8006ebe <DMA_SetConfig+0x10a>
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a5e      	ldr	r2, [pc, #376]	; (8007028 <DMA_SetConfig+0x274>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d004      	beq.n	8006ebe <DMA_SetConfig+0x10a>
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a5c      	ldr	r2, [pc, #368]	; (800702c <DMA_SetConfig+0x278>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d101      	bne.n	8006ec2 <DMA_SetConfig+0x10e>
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e000      	b.n	8006ec4 <DMA_SetConfig+0x110>
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00d      	beq.n	8006ee4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006ed0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d004      	beq.n	8006ee4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006ee2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a39      	ldr	r2, [pc, #228]	; (8006fd0 <DMA_SetConfig+0x21c>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d04a      	beq.n	8006f84 <DMA_SetConfig+0x1d0>
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a38      	ldr	r2, [pc, #224]	; (8006fd4 <DMA_SetConfig+0x220>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d045      	beq.n	8006f84 <DMA_SetConfig+0x1d0>
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a36      	ldr	r2, [pc, #216]	; (8006fd8 <DMA_SetConfig+0x224>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d040      	beq.n	8006f84 <DMA_SetConfig+0x1d0>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a35      	ldr	r2, [pc, #212]	; (8006fdc <DMA_SetConfig+0x228>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d03b      	beq.n	8006f84 <DMA_SetConfig+0x1d0>
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a33      	ldr	r2, [pc, #204]	; (8006fe0 <DMA_SetConfig+0x22c>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d036      	beq.n	8006f84 <DMA_SetConfig+0x1d0>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a32      	ldr	r2, [pc, #200]	; (8006fe4 <DMA_SetConfig+0x230>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d031      	beq.n	8006f84 <DMA_SetConfig+0x1d0>
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a30      	ldr	r2, [pc, #192]	; (8006fe8 <DMA_SetConfig+0x234>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d02c      	beq.n	8006f84 <DMA_SetConfig+0x1d0>
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a2f      	ldr	r2, [pc, #188]	; (8006fec <DMA_SetConfig+0x238>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d027      	beq.n	8006f84 <DMA_SetConfig+0x1d0>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a2d      	ldr	r2, [pc, #180]	; (8006ff0 <DMA_SetConfig+0x23c>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d022      	beq.n	8006f84 <DMA_SetConfig+0x1d0>
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a2c      	ldr	r2, [pc, #176]	; (8006ff4 <DMA_SetConfig+0x240>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d01d      	beq.n	8006f84 <DMA_SetConfig+0x1d0>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a2a      	ldr	r2, [pc, #168]	; (8006ff8 <DMA_SetConfig+0x244>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d018      	beq.n	8006f84 <DMA_SetConfig+0x1d0>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a29      	ldr	r2, [pc, #164]	; (8006ffc <DMA_SetConfig+0x248>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d013      	beq.n	8006f84 <DMA_SetConfig+0x1d0>
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a27      	ldr	r2, [pc, #156]	; (8007000 <DMA_SetConfig+0x24c>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d00e      	beq.n	8006f84 <DMA_SetConfig+0x1d0>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a26      	ldr	r2, [pc, #152]	; (8007004 <DMA_SetConfig+0x250>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d009      	beq.n	8006f84 <DMA_SetConfig+0x1d0>
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a24      	ldr	r2, [pc, #144]	; (8007008 <DMA_SetConfig+0x254>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d004      	beq.n	8006f84 <DMA_SetConfig+0x1d0>
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a23      	ldr	r2, [pc, #140]	; (800700c <DMA_SetConfig+0x258>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d101      	bne.n	8006f88 <DMA_SetConfig+0x1d4>
 8006f84:	2301      	movs	r3, #1
 8006f86:	e000      	b.n	8006f8a <DMA_SetConfig+0x1d6>
 8006f88:	2300      	movs	r3, #0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d059      	beq.n	8007042 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f92:	f003 031f 	and.w	r3, r3, #31
 8006f96:	223f      	movs	r2, #63	; 0x3f
 8006f98:	409a      	lsls	r2, r3
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006fac:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	683a      	ldr	r2, [r7, #0]
 8006fb4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	2b40      	cmp	r3, #64	; 0x40
 8006fbc:	d138      	bne.n	8007030 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68ba      	ldr	r2, [r7, #8]
 8006fcc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006fce:	e086      	b.n	80070de <DMA_SetConfig+0x32a>
 8006fd0:	40020010 	.word	0x40020010
 8006fd4:	40020028 	.word	0x40020028
 8006fd8:	40020040 	.word	0x40020040
 8006fdc:	40020058 	.word	0x40020058
 8006fe0:	40020070 	.word	0x40020070
 8006fe4:	40020088 	.word	0x40020088
 8006fe8:	400200a0 	.word	0x400200a0
 8006fec:	400200b8 	.word	0x400200b8
 8006ff0:	40020410 	.word	0x40020410
 8006ff4:	40020428 	.word	0x40020428
 8006ff8:	40020440 	.word	0x40020440
 8006ffc:	40020458 	.word	0x40020458
 8007000:	40020470 	.word	0x40020470
 8007004:	40020488 	.word	0x40020488
 8007008:	400204a0 	.word	0x400204a0
 800700c:	400204b8 	.word	0x400204b8
 8007010:	58025408 	.word	0x58025408
 8007014:	5802541c 	.word	0x5802541c
 8007018:	58025430 	.word	0x58025430
 800701c:	58025444 	.word	0x58025444
 8007020:	58025458 	.word	0x58025458
 8007024:	5802546c 	.word	0x5802546c
 8007028:	58025480 	.word	0x58025480
 800702c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68ba      	ldr	r2, [r7, #8]
 8007036:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	60da      	str	r2, [r3, #12]
}
 8007040:	e04d      	b.n	80070de <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a29      	ldr	r2, [pc, #164]	; (80070ec <DMA_SetConfig+0x338>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d022      	beq.n	8007092 <DMA_SetConfig+0x2de>
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a27      	ldr	r2, [pc, #156]	; (80070f0 <DMA_SetConfig+0x33c>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d01d      	beq.n	8007092 <DMA_SetConfig+0x2de>
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a26      	ldr	r2, [pc, #152]	; (80070f4 <DMA_SetConfig+0x340>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d018      	beq.n	8007092 <DMA_SetConfig+0x2de>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a24      	ldr	r2, [pc, #144]	; (80070f8 <DMA_SetConfig+0x344>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d013      	beq.n	8007092 <DMA_SetConfig+0x2de>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a23      	ldr	r2, [pc, #140]	; (80070fc <DMA_SetConfig+0x348>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d00e      	beq.n	8007092 <DMA_SetConfig+0x2de>
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a21      	ldr	r2, [pc, #132]	; (8007100 <DMA_SetConfig+0x34c>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d009      	beq.n	8007092 <DMA_SetConfig+0x2de>
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a20      	ldr	r2, [pc, #128]	; (8007104 <DMA_SetConfig+0x350>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d004      	beq.n	8007092 <DMA_SetConfig+0x2de>
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a1e      	ldr	r2, [pc, #120]	; (8007108 <DMA_SetConfig+0x354>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d101      	bne.n	8007096 <DMA_SetConfig+0x2e2>
 8007092:	2301      	movs	r3, #1
 8007094:	e000      	b.n	8007098 <DMA_SetConfig+0x2e4>
 8007096:	2300      	movs	r3, #0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d020      	beq.n	80070de <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070a0:	f003 031f 	and.w	r3, r3, #31
 80070a4:	2201      	movs	r2, #1
 80070a6:	409a      	lsls	r2, r3
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	683a      	ldr	r2, [r7, #0]
 80070b2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	2b40      	cmp	r3, #64	; 0x40
 80070ba:	d108      	bne.n	80070ce <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68ba      	ldr	r2, [r7, #8]
 80070ca:	60da      	str	r2, [r3, #12]
}
 80070cc:	e007      	b.n	80070de <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	68ba      	ldr	r2, [r7, #8]
 80070d4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	60da      	str	r2, [r3, #12]
}
 80070de:	bf00      	nop
 80070e0:	371c      	adds	r7, #28
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop
 80070ec:	58025408 	.word	0x58025408
 80070f0:	5802541c 	.word	0x5802541c
 80070f4:	58025430 	.word	0x58025430
 80070f8:	58025444 	.word	0x58025444
 80070fc:	58025458 	.word	0x58025458
 8007100:	5802546c 	.word	0x5802546c
 8007104:	58025480 	.word	0x58025480
 8007108:	58025494 	.word	0x58025494

0800710c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a42      	ldr	r2, [pc, #264]	; (8007224 <DMA_CalcBaseAndBitshift+0x118>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d04a      	beq.n	80071b4 <DMA_CalcBaseAndBitshift+0xa8>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a41      	ldr	r2, [pc, #260]	; (8007228 <DMA_CalcBaseAndBitshift+0x11c>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d045      	beq.n	80071b4 <DMA_CalcBaseAndBitshift+0xa8>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a3f      	ldr	r2, [pc, #252]	; (800722c <DMA_CalcBaseAndBitshift+0x120>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d040      	beq.n	80071b4 <DMA_CalcBaseAndBitshift+0xa8>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a3e      	ldr	r2, [pc, #248]	; (8007230 <DMA_CalcBaseAndBitshift+0x124>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d03b      	beq.n	80071b4 <DMA_CalcBaseAndBitshift+0xa8>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a3c      	ldr	r2, [pc, #240]	; (8007234 <DMA_CalcBaseAndBitshift+0x128>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d036      	beq.n	80071b4 <DMA_CalcBaseAndBitshift+0xa8>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a3b      	ldr	r2, [pc, #236]	; (8007238 <DMA_CalcBaseAndBitshift+0x12c>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d031      	beq.n	80071b4 <DMA_CalcBaseAndBitshift+0xa8>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a39      	ldr	r2, [pc, #228]	; (800723c <DMA_CalcBaseAndBitshift+0x130>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d02c      	beq.n	80071b4 <DMA_CalcBaseAndBitshift+0xa8>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a38      	ldr	r2, [pc, #224]	; (8007240 <DMA_CalcBaseAndBitshift+0x134>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d027      	beq.n	80071b4 <DMA_CalcBaseAndBitshift+0xa8>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a36      	ldr	r2, [pc, #216]	; (8007244 <DMA_CalcBaseAndBitshift+0x138>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d022      	beq.n	80071b4 <DMA_CalcBaseAndBitshift+0xa8>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a35      	ldr	r2, [pc, #212]	; (8007248 <DMA_CalcBaseAndBitshift+0x13c>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d01d      	beq.n	80071b4 <DMA_CalcBaseAndBitshift+0xa8>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a33      	ldr	r2, [pc, #204]	; (800724c <DMA_CalcBaseAndBitshift+0x140>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d018      	beq.n	80071b4 <DMA_CalcBaseAndBitshift+0xa8>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a32      	ldr	r2, [pc, #200]	; (8007250 <DMA_CalcBaseAndBitshift+0x144>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d013      	beq.n	80071b4 <DMA_CalcBaseAndBitshift+0xa8>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a30      	ldr	r2, [pc, #192]	; (8007254 <DMA_CalcBaseAndBitshift+0x148>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d00e      	beq.n	80071b4 <DMA_CalcBaseAndBitshift+0xa8>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a2f      	ldr	r2, [pc, #188]	; (8007258 <DMA_CalcBaseAndBitshift+0x14c>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d009      	beq.n	80071b4 <DMA_CalcBaseAndBitshift+0xa8>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a2d      	ldr	r2, [pc, #180]	; (800725c <DMA_CalcBaseAndBitshift+0x150>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d004      	beq.n	80071b4 <DMA_CalcBaseAndBitshift+0xa8>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a2c      	ldr	r2, [pc, #176]	; (8007260 <DMA_CalcBaseAndBitshift+0x154>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d101      	bne.n	80071b8 <DMA_CalcBaseAndBitshift+0xac>
 80071b4:	2301      	movs	r3, #1
 80071b6:	e000      	b.n	80071ba <DMA_CalcBaseAndBitshift+0xae>
 80071b8:	2300      	movs	r3, #0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d024      	beq.n	8007208 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	3b10      	subs	r3, #16
 80071c6:	4a27      	ldr	r2, [pc, #156]	; (8007264 <DMA_CalcBaseAndBitshift+0x158>)
 80071c8:	fba2 2303 	umull	r2, r3, r2, r3
 80071cc:	091b      	lsrs	r3, r3, #4
 80071ce:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f003 0307 	and.w	r3, r3, #7
 80071d6:	4a24      	ldr	r2, [pc, #144]	; (8007268 <DMA_CalcBaseAndBitshift+0x15c>)
 80071d8:	5cd3      	ldrb	r3, [r2, r3]
 80071da:	461a      	mov	r2, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2b03      	cmp	r3, #3
 80071e4:	d908      	bls.n	80071f8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	461a      	mov	r2, r3
 80071ec:	4b1f      	ldr	r3, [pc, #124]	; (800726c <DMA_CalcBaseAndBitshift+0x160>)
 80071ee:	4013      	ands	r3, r2
 80071f0:	1d1a      	adds	r2, r3, #4
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	659a      	str	r2, [r3, #88]	; 0x58
 80071f6:	e00d      	b.n	8007214 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	461a      	mov	r2, r3
 80071fe:	4b1b      	ldr	r3, [pc, #108]	; (800726c <DMA_CalcBaseAndBitshift+0x160>)
 8007200:	4013      	ands	r3, r2
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	6593      	str	r3, [r2, #88]	; 0x58
 8007206:	e005      	b.n	8007214 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007218:	4618      	mov	r0, r3
 800721a:	3714      	adds	r7, #20
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr
 8007224:	40020010 	.word	0x40020010
 8007228:	40020028 	.word	0x40020028
 800722c:	40020040 	.word	0x40020040
 8007230:	40020058 	.word	0x40020058
 8007234:	40020070 	.word	0x40020070
 8007238:	40020088 	.word	0x40020088
 800723c:	400200a0 	.word	0x400200a0
 8007240:	400200b8 	.word	0x400200b8
 8007244:	40020410 	.word	0x40020410
 8007248:	40020428 	.word	0x40020428
 800724c:	40020440 	.word	0x40020440
 8007250:	40020458 	.word	0x40020458
 8007254:	40020470 	.word	0x40020470
 8007258:	40020488 	.word	0x40020488
 800725c:	400204a0 	.word	0x400204a0
 8007260:	400204b8 	.word	0x400204b8
 8007264:	aaaaaaab 	.word	0xaaaaaaab
 8007268:	08018564 	.word	0x08018564
 800726c:	fffffc00 	.word	0xfffffc00

08007270 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007270:	b480      	push	{r7}
 8007272:	b085      	sub	sp, #20
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007278:	2300      	movs	r3, #0
 800727a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	699b      	ldr	r3, [r3, #24]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d120      	bne.n	80072c6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007288:	2b03      	cmp	r3, #3
 800728a:	d858      	bhi.n	800733e <DMA_CheckFifoParam+0xce>
 800728c:	a201      	add	r2, pc, #4	; (adr r2, 8007294 <DMA_CheckFifoParam+0x24>)
 800728e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007292:	bf00      	nop
 8007294:	080072a5 	.word	0x080072a5
 8007298:	080072b7 	.word	0x080072b7
 800729c:	080072a5 	.word	0x080072a5
 80072a0:	0800733f 	.word	0x0800733f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d048      	beq.n	8007342 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80072b4:	e045      	b.n	8007342 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80072be:	d142      	bne.n	8007346 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80072c4:	e03f      	b.n	8007346 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	699b      	ldr	r3, [r3, #24]
 80072ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072ce:	d123      	bne.n	8007318 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d4:	2b03      	cmp	r3, #3
 80072d6:	d838      	bhi.n	800734a <DMA_CheckFifoParam+0xda>
 80072d8:	a201      	add	r2, pc, #4	; (adr r2, 80072e0 <DMA_CheckFifoParam+0x70>)
 80072da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072de:	bf00      	nop
 80072e0:	080072f1 	.word	0x080072f1
 80072e4:	080072f7 	.word	0x080072f7
 80072e8:	080072f1 	.word	0x080072f1
 80072ec:	08007309 	.word	0x08007309
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	73fb      	strb	r3, [r7, #15]
        break;
 80072f4:	e030      	b.n	8007358 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d025      	beq.n	800734e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007306:	e022      	b.n	800734e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800730c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007310:	d11f      	bne.n	8007352 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007316:	e01c      	b.n	8007352 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800731c:	2b02      	cmp	r3, #2
 800731e:	d902      	bls.n	8007326 <DMA_CheckFifoParam+0xb6>
 8007320:	2b03      	cmp	r3, #3
 8007322:	d003      	beq.n	800732c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007324:	e018      	b.n	8007358 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	73fb      	strb	r3, [r7, #15]
        break;
 800732a:	e015      	b.n	8007358 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007330:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007334:	2b00      	cmp	r3, #0
 8007336:	d00e      	beq.n	8007356 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	73fb      	strb	r3, [r7, #15]
    break;
 800733c:	e00b      	b.n	8007356 <DMA_CheckFifoParam+0xe6>
        break;
 800733e:	bf00      	nop
 8007340:	e00a      	b.n	8007358 <DMA_CheckFifoParam+0xe8>
        break;
 8007342:	bf00      	nop
 8007344:	e008      	b.n	8007358 <DMA_CheckFifoParam+0xe8>
        break;
 8007346:	bf00      	nop
 8007348:	e006      	b.n	8007358 <DMA_CheckFifoParam+0xe8>
        break;
 800734a:	bf00      	nop
 800734c:	e004      	b.n	8007358 <DMA_CheckFifoParam+0xe8>
        break;
 800734e:	bf00      	nop
 8007350:	e002      	b.n	8007358 <DMA_CheckFifoParam+0xe8>
        break;
 8007352:	bf00      	nop
 8007354:	e000      	b.n	8007358 <DMA_CheckFifoParam+0xe8>
    break;
 8007356:	bf00      	nop
    }
  }

  return status;
 8007358:	7bfb      	ldrb	r3, [r7, #15]
}
 800735a:	4618      	mov	r0, r3
 800735c:	3714      	adds	r7, #20
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr
 8007366:	bf00      	nop

08007368 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007368:	b480      	push	{r7}
 800736a:	b085      	sub	sp, #20
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a38      	ldr	r2, [pc, #224]	; (800745c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d022      	beq.n	80073c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a36      	ldr	r2, [pc, #216]	; (8007460 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d01d      	beq.n	80073c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a35      	ldr	r2, [pc, #212]	; (8007464 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d018      	beq.n	80073c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a33      	ldr	r2, [pc, #204]	; (8007468 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d013      	beq.n	80073c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a32      	ldr	r2, [pc, #200]	; (800746c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d00e      	beq.n	80073c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a30      	ldr	r2, [pc, #192]	; (8007470 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d009      	beq.n	80073c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a2f      	ldr	r2, [pc, #188]	; (8007474 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d004      	beq.n	80073c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a2d      	ldr	r2, [pc, #180]	; (8007478 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d101      	bne.n	80073ca <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80073c6:	2301      	movs	r3, #1
 80073c8:	e000      	b.n	80073cc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80073ca:	2300      	movs	r3, #0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d01a      	beq.n	8007406 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	3b08      	subs	r3, #8
 80073d8:	4a28      	ldr	r2, [pc, #160]	; (800747c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80073da:	fba2 2303 	umull	r2, r3, r2, r3
 80073de:	091b      	lsrs	r3, r3, #4
 80073e0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	4b26      	ldr	r3, [pc, #152]	; (8007480 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80073e6:	4413      	add	r3, r2
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	461a      	mov	r2, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a24      	ldr	r2, [pc, #144]	; (8007484 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80073f4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f003 031f 	and.w	r3, r3, #31
 80073fc:	2201      	movs	r2, #1
 80073fe:	409a      	lsls	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007404:	e024      	b.n	8007450 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	b2db      	uxtb	r3, r3
 800740c:	3b10      	subs	r3, #16
 800740e:	4a1e      	ldr	r2, [pc, #120]	; (8007488 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007410:	fba2 2303 	umull	r2, r3, r2, r3
 8007414:	091b      	lsrs	r3, r3, #4
 8007416:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	4a1c      	ldr	r2, [pc, #112]	; (800748c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d806      	bhi.n	800742e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	4a1b      	ldr	r2, [pc, #108]	; (8007490 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d902      	bls.n	800742e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	3308      	adds	r3, #8
 800742c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800742e:	68fa      	ldr	r2, [r7, #12]
 8007430:	4b18      	ldr	r3, [pc, #96]	; (8007494 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007432:	4413      	add	r3, r2
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	461a      	mov	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4a16      	ldr	r2, [pc, #88]	; (8007498 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007440:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f003 031f 	and.w	r3, r3, #31
 8007448:	2201      	movs	r2, #1
 800744a:	409a      	lsls	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007450:	bf00      	nop
 8007452:	3714      	adds	r7, #20
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr
 800745c:	58025408 	.word	0x58025408
 8007460:	5802541c 	.word	0x5802541c
 8007464:	58025430 	.word	0x58025430
 8007468:	58025444 	.word	0x58025444
 800746c:	58025458 	.word	0x58025458
 8007470:	5802546c 	.word	0x5802546c
 8007474:	58025480 	.word	0x58025480
 8007478:	58025494 	.word	0x58025494
 800747c:	cccccccd 	.word	0xcccccccd
 8007480:	16009600 	.word	0x16009600
 8007484:	58025880 	.word	0x58025880
 8007488:	aaaaaaab 	.word	0xaaaaaaab
 800748c:	400204b8 	.word	0x400204b8
 8007490:	4002040f 	.word	0x4002040f
 8007494:	10008200 	.word	0x10008200
 8007498:	40020880 	.word	0x40020880

0800749c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800749c:	b480      	push	{r7}
 800749e:	b085      	sub	sp, #20
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d04a      	beq.n	8007548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2b08      	cmp	r3, #8
 80074b6:	d847      	bhi.n	8007548 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a25      	ldr	r2, [pc, #148]	; (8007554 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d022      	beq.n	8007508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a24      	ldr	r2, [pc, #144]	; (8007558 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d01d      	beq.n	8007508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a22      	ldr	r2, [pc, #136]	; (800755c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d018      	beq.n	8007508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a21      	ldr	r2, [pc, #132]	; (8007560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d013      	beq.n	8007508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a1f      	ldr	r2, [pc, #124]	; (8007564 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d00e      	beq.n	8007508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a1e      	ldr	r2, [pc, #120]	; (8007568 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d009      	beq.n	8007508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a1c      	ldr	r2, [pc, #112]	; (800756c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d004      	beq.n	8007508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a1b      	ldr	r2, [pc, #108]	; (8007570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d101      	bne.n	800750c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007508:	2301      	movs	r3, #1
 800750a:	e000      	b.n	800750e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800750c:	2300      	movs	r3, #0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00a      	beq.n	8007528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	4b17      	ldr	r3, [pc, #92]	; (8007574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007516:	4413      	add	r3, r2
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	461a      	mov	r2, r3
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4a15      	ldr	r2, [pc, #84]	; (8007578 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007524:	671a      	str	r2, [r3, #112]	; 0x70
 8007526:	e009      	b.n	800753c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007528:	68fa      	ldr	r2, [r7, #12]
 800752a:	4b14      	ldr	r3, [pc, #80]	; (800757c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800752c:	4413      	add	r3, r2
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	461a      	mov	r2, r3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4a11      	ldr	r2, [pc, #68]	; (8007580 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800753a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	3b01      	subs	r3, #1
 8007540:	2201      	movs	r2, #1
 8007542:	409a      	lsls	r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007548:	bf00      	nop
 800754a:	3714      	adds	r7, #20
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr
 8007554:	58025408 	.word	0x58025408
 8007558:	5802541c 	.word	0x5802541c
 800755c:	58025430 	.word	0x58025430
 8007560:	58025444 	.word	0x58025444
 8007564:	58025458 	.word	0x58025458
 8007568:	5802546c 	.word	0x5802546c
 800756c:	58025480 	.word	0x58025480
 8007570:	58025494 	.word	0x58025494
 8007574:	1600963f 	.word	0x1600963f
 8007578:	58025940 	.word	0x58025940
 800757c:	1000823f 	.word	0x1000823f
 8007580:	40020940 	.word	0x40020940

08007584 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b098      	sub	sp, #96	; 0x60
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800758c:	4a84      	ldr	r2, [pc, #528]	; (80077a0 <HAL_FDCAN_Init+0x21c>)
 800758e:	f107 030c 	add.w	r3, r7, #12
 8007592:	4611      	mov	r1, r2
 8007594:	224c      	movs	r2, #76	; 0x4c
 8007596:	4618      	mov	r0, r3
 8007598:	f00f fdea 	bl	8017170 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d101      	bne.n	80075a6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e1c6      	b.n	8007934 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a7e      	ldr	r2, [pc, #504]	; (80077a4 <HAL_FDCAN_Init+0x220>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d106      	bne.n	80075be <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80075b8:	461a      	mov	r2, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d106      	bne.n	80075d8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f7fb faa4 	bl	8002b20 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	699a      	ldr	r2, [r3, #24]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f022 0210 	bic.w	r2, r2, #16
 80075e6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80075e8:	f7fc fa32 	bl	8003a50 <HAL_GetTick>
 80075ec:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80075ee:	e014      	b.n	800761a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80075f0:	f7fc fa2e 	bl	8003a50 <HAL_GetTick>
 80075f4:	4602      	mov	r2, r0
 80075f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075f8:	1ad3      	subs	r3, r2, r3
 80075fa:	2b0a      	cmp	r3, #10
 80075fc:	d90d      	bls.n	800761a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007604:	f043 0201 	orr.w	r2, r3, #1
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2203      	movs	r2, #3
 8007612:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	e18c      	b.n	8007934 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	699b      	ldr	r3, [r3, #24]
 8007620:	f003 0308 	and.w	r3, r3, #8
 8007624:	2b08      	cmp	r3, #8
 8007626:	d0e3      	beq.n	80075f0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	699a      	ldr	r2, [r3, #24]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f042 0201 	orr.w	r2, r2, #1
 8007636:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007638:	f7fc fa0a 	bl	8003a50 <HAL_GetTick>
 800763c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800763e:	e014      	b.n	800766a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007640:	f7fc fa06 	bl	8003a50 <HAL_GetTick>
 8007644:	4602      	mov	r2, r0
 8007646:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007648:	1ad3      	subs	r3, r2, r3
 800764a:	2b0a      	cmp	r3, #10
 800764c:	d90d      	bls.n	800766a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007654:	f043 0201 	orr.w	r2, r3, #1
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2203      	movs	r2, #3
 8007662:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e164      	b.n	8007934 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	699b      	ldr	r3, [r3, #24]
 8007670:	f003 0301 	and.w	r3, r3, #1
 8007674:	2b00      	cmp	r3, #0
 8007676:	d0e3      	beq.n	8007640 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	699a      	ldr	r2, [r3, #24]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f042 0202 	orr.w	r2, r2, #2
 8007686:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	7c1b      	ldrb	r3, [r3, #16]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d108      	bne.n	80076a2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	699a      	ldr	r2, [r3, #24]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800769e:	619a      	str	r2, [r3, #24]
 80076a0:	e007      	b.n	80076b2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	699a      	ldr	r2, [r3, #24]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076b0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	7c5b      	ldrb	r3, [r3, #17]
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d108      	bne.n	80076cc <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	699a      	ldr	r2, [r3, #24]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076c8:	619a      	str	r2, [r3, #24]
 80076ca:	e007      	b.n	80076dc <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	699a      	ldr	r2, [r3, #24]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80076da:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	7c9b      	ldrb	r3, [r3, #18]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d108      	bne.n	80076f6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	699a      	ldr	r2, [r3, #24]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80076f2:	619a      	str	r2, [r3, #24]
 80076f4:	e007      	b.n	8007706 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	699a      	ldr	r2, [r3, #24]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007704:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	699b      	ldr	r3, [r3, #24]
 800770c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	689a      	ldr	r2, [r3, #8]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	430a      	orrs	r2, r1
 800771a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	699a      	ldr	r2, [r3, #24]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800772a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	691a      	ldr	r2, [r3, #16]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f022 0210 	bic.w	r2, r2, #16
 800773a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	2b01      	cmp	r3, #1
 8007742:	d108      	bne.n	8007756 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	699a      	ldr	r2, [r3, #24]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f042 0204 	orr.w	r2, r2, #4
 8007752:	619a      	str	r2, [r3, #24]
 8007754:	e030      	b.n	80077b8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d02c      	beq.n	80077b8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	2b02      	cmp	r3, #2
 8007764:	d020      	beq.n	80077a8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	699a      	ldr	r2, [r3, #24]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007774:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	691a      	ldr	r2, [r3, #16]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f042 0210 	orr.w	r2, r2, #16
 8007784:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	68db      	ldr	r3, [r3, #12]
 800778a:	2b03      	cmp	r3, #3
 800778c:	d114      	bne.n	80077b8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	699a      	ldr	r2, [r3, #24]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f042 0220 	orr.w	r2, r2, #32
 800779c:	619a      	str	r2, [r3, #24]
 800779e:	e00b      	b.n	80077b8 <HAL_FDCAN_Init+0x234>
 80077a0:	08018450 	.word	0x08018450
 80077a4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	699a      	ldr	r2, [r3, #24]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f042 0220 	orr.w	r2, r2, #32
 80077b6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	699b      	ldr	r3, [r3, #24]
 80077bc:	3b01      	subs	r3, #1
 80077be:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	69db      	ldr	r3, [r3, #28]
 80077c4:	3b01      	subs	r3, #1
 80077c6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80077c8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a1b      	ldr	r3, [r3, #32]
 80077ce:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80077d0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	695b      	ldr	r3, [r3, #20]
 80077d8:	3b01      	subs	r3, #1
 80077da:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80077e0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80077e2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077ec:	d115      	bne.n	800781a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f8:	3b01      	subs	r3, #1
 80077fa:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80077fc:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007802:	3b01      	subs	r3, #1
 8007804:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007806:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780e:	3b01      	subs	r3, #1
 8007810:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007816:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007818:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800781e:	2b00      	cmp	r3, #0
 8007820:	d00a      	beq.n	8007838 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	430a      	orrs	r2, r1
 8007834:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007840:	4413      	add	r3, r2
 8007842:	2b00      	cmp	r3, #0
 8007844:	d011      	beq.n	800786a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800784e:	f023 0107 	bic.w	r1, r3, #7
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007856:	009b      	lsls	r3, r3, #2
 8007858:	3360      	adds	r3, #96	; 0x60
 800785a:	443b      	add	r3, r7
 800785c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	430a      	orrs	r2, r1
 8007866:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800786e:	2b00      	cmp	r3, #0
 8007870:	d011      	beq.n	8007896 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800787a:	f023 0107 	bic.w	r1, r3, #7
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	3360      	adds	r3, #96	; 0x60
 8007886:	443b      	add	r3, r7
 8007888:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	430a      	orrs	r2, r1
 8007892:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800789a:	2b00      	cmp	r3, #0
 800789c:	d012      	beq.n	80078c4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80078a6:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	3360      	adds	r3, #96	; 0x60
 80078b2:	443b      	add	r3, r7
 80078b4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80078b8:	011a      	lsls	r2, r3, #4
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	430a      	orrs	r2, r1
 80078c0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d012      	beq.n	80078f2 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80078d4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078dc:	009b      	lsls	r3, r3, #2
 80078de:	3360      	adds	r3, #96	; 0x60
 80078e0:	443b      	add	r3, r7
 80078e2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80078e6:	021a      	lsls	r2, r3, #8
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	430a      	orrs	r2, r1
 80078ee:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a11      	ldr	r2, [pc, #68]	; (800793c <HAL_FDCAN_Init+0x3b8>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d107      	bne.n	800790c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	689a      	ldr	r2, [r3, #8]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	f022 0203 	bic.w	r2, r2, #3
 800790a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 f80b 	bl	8007940 <FDCAN_CalcultateRamBlockAddresses>
 800792a:	4603      	mov	r3, r0
 800792c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8007930:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8007934:	4618      	mov	r0, r3
 8007936:	3760      	adds	r7, #96	; 0x60
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}
 800793c:	4000a000 	.word	0x4000a000

08007940 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007940:	b480      	push	{r7}
 8007942:	b085      	sub	sp, #20
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800794c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007956:	4ba7      	ldr	r3, [pc, #668]	; (8007bf4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007958:	4013      	ands	r3, r2
 800795a:	68ba      	ldr	r2, [r7, #8]
 800795c:	0091      	lsls	r1, r2, #2
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	6812      	ldr	r2, [r2, #0]
 8007962:	430b      	orrs	r3, r1
 8007964:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007970:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007978:	041a      	lsls	r2, r3, #16
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	430a      	orrs	r2, r1
 8007980:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007988:	68ba      	ldr	r2, [r7, #8]
 800798a:	4413      	add	r3, r2
 800798c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007996:	4b97      	ldr	r3, [pc, #604]	; (8007bf4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007998:	4013      	ands	r3, r2
 800799a:	68ba      	ldr	r2, [r7, #8]
 800799c:	0091      	lsls	r1, r2, #2
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	6812      	ldr	r2, [r2, #0]
 80079a2:	430b      	orrs	r3, r1
 80079a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079b0:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079b8:	041a      	lsls	r2, r3, #16
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	430a      	orrs	r2, r1
 80079c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079c8:	005b      	lsls	r3, r3, #1
 80079ca:	68ba      	ldr	r2, [r7, #8]
 80079cc:	4413      	add	r3, r2
 80079ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80079d8:	4b86      	ldr	r3, [pc, #536]	; (8007bf4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80079da:	4013      	ands	r3, r2
 80079dc:	68ba      	ldr	r2, [r7, #8]
 80079de:	0091      	lsls	r1, r2, #2
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	6812      	ldr	r2, [r2, #0]
 80079e4:	430b      	orrs	r3, r1
 80079e6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80079f2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fa:	041a      	lsls	r2, r3, #16
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	430a      	orrs	r2, r1
 8007a02:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0a:	687a      	ldr	r2, [r7, #4]
 8007a0c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007a0e:	fb02 f303 	mul.w	r3, r2, r3
 8007a12:	68ba      	ldr	r2, [r7, #8]
 8007a14:	4413      	add	r3, r2
 8007a16:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007a20:	4b74      	ldr	r3, [pc, #464]	; (8007bf4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a22:	4013      	ands	r3, r2
 8007a24:	68ba      	ldr	r2, [r7, #8]
 8007a26:	0091      	lsls	r1, r2, #2
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	6812      	ldr	r2, [r2, #0]
 8007a2c:	430b      	orrs	r3, r1
 8007a2e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a3a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a42:	041a      	lsls	r2, r3, #16
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	430a      	orrs	r2, r1
 8007a4a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007a56:	fb02 f303 	mul.w	r3, r2, r3
 8007a5a:	68ba      	ldr	r2, [r7, #8]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007a68:	4b62      	ldr	r3, [pc, #392]	; (8007bf4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	68ba      	ldr	r2, [r7, #8]
 8007a6e:	0091      	lsls	r1, r2, #2
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	6812      	ldr	r2, [r2, #0]
 8007a74:	430b      	orrs	r3, r1
 8007a76:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007a82:	fb02 f303 	mul.w	r3, r2, r3
 8007a86:	68ba      	ldr	r2, [r7, #8]
 8007a88:	4413      	add	r3, r2
 8007a8a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007a94:	4b57      	ldr	r3, [pc, #348]	; (8007bf4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a96:	4013      	ands	r3, r2
 8007a98:	68ba      	ldr	r2, [r7, #8]
 8007a9a:	0091      	lsls	r1, r2, #2
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	6812      	ldr	r2, [r2, #0]
 8007aa0:	430b      	orrs	r3, r1
 8007aa2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007aae:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ab6:	041a      	lsls	r2, r3, #16
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	430a      	orrs	r2, r1
 8007abe:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ac6:	005b      	lsls	r3, r3, #1
 8007ac8:	68ba      	ldr	r2, [r7, #8]
 8007aca:	4413      	add	r3, r2
 8007acc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007ad6:	4b47      	ldr	r3, [pc, #284]	; (8007bf4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007ad8:	4013      	ands	r3, r2
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	0091      	lsls	r1, r2, #2
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	6812      	ldr	r2, [r2, #0]
 8007ae2:	430b      	orrs	r3, r1
 8007ae4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007af0:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007af8:	041a      	lsls	r2, r3, #16
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	430a      	orrs	r2, r1
 8007b00:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007b0c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b14:	061a      	lsls	r2, r3, #24
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	430a      	orrs	r2, r1
 8007b1c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b24:	4b34      	ldr	r3, [pc, #208]	; (8007bf8 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007b26:	4413      	add	r3, r2
 8007b28:	009a      	lsls	r2, r3, #2
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	441a      	add	r2, r3
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b46:	00db      	lsls	r3, r3, #3
 8007b48:	441a      	add	r2, r3
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b56:	6879      	ldr	r1, [r7, #4]
 8007b58:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8007b5a:	fb01 f303 	mul.w	r3, r1, r3
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	441a      	add	r2, r3
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b6e:	6879      	ldr	r1, [r7, #4]
 8007b70:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007b72:	fb01 f303 	mul.w	r3, r1, r3
 8007b76:	009b      	lsls	r3, r3, #2
 8007b78:	441a      	add	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b86:	6879      	ldr	r1, [r7, #4]
 8007b88:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8007b8a:	fb01 f303 	mul.w	r3, r1, r3
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	441a      	add	r2, r3
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ba2:	00db      	lsls	r3, r3, #3
 8007ba4:	441a      	add	r2, r3
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bb6:	6879      	ldr	r1, [r7, #4]
 8007bb8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007bba:	fb01 f303 	mul.w	r3, r1, r3
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	441a      	add	r2, r3
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bd2:	6879      	ldr	r1, [r7, #4]
 8007bd4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007bd6:	fb01 f303 	mul.w	r3, r1, r3
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	441a      	add	r2, r3
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bea:	4a04      	ldr	r2, [pc, #16]	; (8007bfc <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d915      	bls.n	8007c1c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007bf0:	e006      	b.n	8007c00 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007bf2:	bf00      	nop
 8007bf4:	ffff0003 	.word	0xffff0003
 8007bf8:	10002b00 	.word	0x10002b00
 8007bfc:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007c06:	f043 0220 	orr.w	r2, r3, #32
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2203      	movs	r2, #3
 8007c14:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	e010      	b.n	8007c3e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c20:	60fb      	str	r3, [r7, #12]
 8007c22:	e005      	b.n	8007c30 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2200      	movs	r2, #0
 8007c28:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	3304      	adds	r3, #4
 8007c2e:	60fb      	str	r3, [r7, #12]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d3f3      	bcc.n	8007c24 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007c3c:	2300      	movs	r3, #0
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3714      	adds	r7, #20
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop

08007c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b089      	sub	sp, #36	; 0x24
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007c56:	2300      	movs	r3, #0
 8007c58:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007c5a:	4b86      	ldr	r3, [pc, #536]	; (8007e74 <HAL_GPIO_Init+0x228>)
 8007c5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007c5e:	e18c      	b.n	8007f7a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	2101      	movs	r1, #1
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	fa01 f303 	lsl.w	r3, r1, r3
 8007c6c:	4013      	ands	r3, r2
 8007c6e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	f000 817e 	beq.w	8007f74 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	f003 0303 	and.w	r3, r3, #3
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d005      	beq.n	8007c90 <HAL_GPIO_Init+0x44>
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	f003 0303 	and.w	r3, r3, #3
 8007c8c:	2b02      	cmp	r3, #2
 8007c8e:	d130      	bne.n	8007cf2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007c96:	69fb      	ldr	r3, [r7, #28]
 8007c98:	005b      	lsls	r3, r3, #1
 8007c9a:	2203      	movs	r2, #3
 8007c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007ca0:	43db      	mvns	r3, r3
 8007ca2:	69ba      	ldr	r2, [r7, #24]
 8007ca4:	4013      	ands	r3, r2
 8007ca6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	68da      	ldr	r2, [r3, #12]
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	005b      	lsls	r3, r3, #1
 8007cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cb4:	69ba      	ldr	r2, [r7, #24]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	69ba      	ldr	r2, [r7, #24]
 8007cbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	fa02 f303 	lsl.w	r3, r2, r3
 8007cce:	43db      	mvns	r3, r3
 8007cd0:	69ba      	ldr	r2, [r7, #24]
 8007cd2:	4013      	ands	r3, r2
 8007cd4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	091b      	lsrs	r3, r3, #4
 8007cdc:	f003 0201 	and.w	r2, r3, #1
 8007ce0:	69fb      	ldr	r3, [r7, #28]
 8007ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ce6:	69ba      	ldr	r2, [r7, #24]
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	69ba      	ldr	r2, [r7, #24]
 8007cf0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	685b      	ldr	r3, [r3, #4]
 8007cf6:	f003 0303 	and.w	r3, r3, #3
 8007cfa:	2b03      	cmp	r3, #3
 8007cfc:	d017      	beq.n	8007d2e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	005b      	lsls	r3, r3, #1
 8007d08:	2203      	movs	r2, #3
 8007d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d0e:	43db      	mvns	r3, r3
 8007d10:	69ba      	ldr	r2, [r7, #24]
 8007d12:	4013      	ands	r3, r2
 8007d14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	689a      	ldr	r2, [r3, #8]
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	005b      	lsls	r3, r3, #1
 8007d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d22:	69ba      	ldr	r2, [r7, #24]
 8007d24:	4313      	orrs	r3, r2
 8007d26:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	69ba      	ldr	r2, [r7, #24]
 8007d2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	f003 0303 	and.w	r3, r3, #3
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	d123      	bne.n	8007d82 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007d3a:	69fb      	ldr	r3, [r7, #28]
 8007d3c:	08da      	lsrs	r2, r3, #3
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	3208      	adds	r2, #8
 8007d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	f003 0307 	and.w	r3, r3, #7
 8007d4e:	009b      	lsls	r3, r3, #2
 8007d50:	220f      	movs	r2, #15
 8007d52:	fa02 f303 	lsl.w	r3, r2, r3
 8007d56:	43db      	mvns	r3, r3
 8007d58:	69ba      	ldr	r2, [r7, #24]
 8007d5a:	4013      	ands	r3, r2
 8007d5c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	691a      	ldr	r2, [r3, #16]
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	f003 0307 	and.w	r3, r3, #7
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d6e:	69ba      	ldr	r2, [r7, #24]
 8007d70:	4313      	orrs	r3, r2
 8007d72:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007d74:	69fb      	ldr	r3, [r7, #28]
 8007d76:	08da      	lsrs	r2, r3, #3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	3208      	adds	r2, #8
 8007d7c:	69b9      	ldr	r1, [r7, #24]
 8007d7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	005b      	lsls	r3, r3, #1
 8007d8c:	2203      	movs	r2, #3
 8007d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d92:	43db      	mvns	r3, r3
 8007d94:	69ba      	ldr	r2, [r7, #24]
 8007d96:	4013      	ands	r3, r2
 8007d98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	f003 0203 	and.w	r2, r3, #3
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	005b      	lsls	r3, r3, #1
 8007da6:	fa02 f303 	lsl.w	r3, r2, r3
 8007daa:	69ba      	ldr	r2, [r7, #24]
 8007dac:	4313      	orrs	r3, r2
 8007dae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	69ba      	ldr	r2, [r7, #24]
 8007db4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	f000 80d8 	beq.w	8007f74 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007dc4:	4b2c      	ldr	r3, [pc, #176]	; (8007e78 <HAL_GPIO_Init+0x22c>)
 8007dc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007dca:	4a2b      	ldr	r2, [pc, #172]	; (8007e78 <HAL_GPIO_Init+0x22c>)
 8007dcc:	f043 0302 	orr.w	r3, r3, #2
 8007dd0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007dd4:	4b28      	ldr	r3, [pc, #160]	; (8007e78 <HAL_GPIO_Init+0x22c>)
 8007dd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007dda:	f003 0302 	and.w	r3, r3, #2
 8007dde:	60fb      	str	r3, [r7, #12]
 8007de0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007de2:	4a26      	ldr	r2, [pc, #152]	; (8007e7c <HAL_GPIO_Init+0x230>)
 8007de4:	69fb      	ldr	r3, [r7, #28]
 8007de6:	089b      	lsrs	r3, r3, #2
 8007de8:	3302      	adds	r3, #2
 8007dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	f003 0303 	and.w	r3, r3, #3
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	220f      	movs	r2, #15
 8007dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8007dfe:	43db      	mvns	r3, r3
 8007e00:	69ba      	ldr	r2, [r7, #24]
 8007e02:	4013      	ands	r3, r2
 8007e04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	4a1d      	ldr	r2, [pc, #116]	; (8007e80 <HAL_GPIO_Init+0x234>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d04a      	beq.n	8007ea4 <HAL_GPIO_Init+0x258>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4a1c      	ldr	r2, [pc, #112]	; (8007e84 <HAL_GPIO_Init+0x238>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d02b      	beq.n	8007e6e <HAL_GPIO_Init+0x222>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4a1b      	ldr	r2, [pc, #108]	; (8007e88 <HAL_GPIO_Init+0x23c>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d025      	beq.n	8007e6a <HAL_GPIO_Init+0x21e>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4a1a      	ldr	r2, [pc, #104]	; (8007e8c <HAL_GPIO_Init+0x240>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d01f      	beq.n	8007e66 <HAL_GPIO_Init+0x21a>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4a19      	ldr	r2, [pc, #100]	; (8007e90 <HAL_GPIO_Init+0x244>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d019      	beq.n	8007e62 <HAL_GPIO_Init+0x216>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4a18      	ldr	r2, [pc, #96]	; (8007e94 <HAL_GPIO_Init+0x248>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d013      	beq.n	8007e5e <HAL_GPIO_Init+0x212>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4a17      	ldr	r2, [pc, #92]	; (8007e98 <HAL_GPIO_Init+0x24c>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d00d      	beq.n	8007e5a <HAL_GPIO_Init+0x20e>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a16      	ldr	r2, [pc, #88]	; (8007e9c <HAL_GPIO_Init+0x250>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d007      	beq.n	8007e56 <HAL_GPIO_Init+0x20a>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4a15      	ldr	r2, [pc, #84]	; (8007ea0 <HAL_GPIO_Init+0x254>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d101      	bne.n	8007e52 <HAL_GPIO_Init+0x206>
 8007e4e:	2309      	movs	r3, #9
 8007e50:	e029      	b.n	8007ea6 <HAL_GPIO_Init+0x25a>
 8007e52:	230a      	movs	r3, #10
 8007e54:	e027      	b.n	8007ea6 <HAL_GPIO_Init+0x25a>
 8007e56:	2307      	movs	r3, #7
 8007e58:	e025      	b.n	8007ea6 <HAL_GPIO_Init+0x25a>
 8007e5a:	2306      	movs	r3, #6
 8007e5c:	e023      	b.n	8007ea6 <HAL_GPIO_Init+0x25a>
 8007e5e:	2305      	movs	r3, #5
 8007e60:	e021      	b.n	8007ea6 <HAL_GPIO_Init+0x25a>
 8007e62:	2304      	movs	r3, #4
 8007e64:	e01f      	b.n	8007ea6 <HAL_GPIO_Init+0x25a>
 8007e66:	2303      	movs	r3, #3
 8007e68:	e01d      	b.n	8007ea6 <HAL_GPIO_Init+0x25a>
 8007e6a:	2302      	movs	r3, #2
 8007e6c:	e01b      	b.n	8007ea6 <HAL_GPIO_Init+0x25a>
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e019      	b.n	8007ea6 <HAL_GPIO_Init+0x25a>
 8007e72:	bf00      	nop
 8007e74:	58000080 	.word	0x58000080
 8007e78:	58024400 	.word	0x58024400
 8007e7c:	58000400 	.word	0x58000400
 8007e80:	58020000 	.word	0x58020000
 8007e84:	58020400 	.word	0x58020400
 8007e88:	58020800 	.word	0x58020800
 8007e8c:	58020c00 	.word	0x58020c00
 8007e90:	58021000 	.word	0x58021000
 8007e94:	58021400 	.word	0x58021400
 8007e98:	58021800 	.word	0x58021800
 8007e9c:	58021c00 	.word	0x58021c00
 8007ea0:	58022400 	.word	0x58022400
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	69fa      	ldr	r2, [r7, #28]
 8007ea8:	f002 0203 	and.w	r2, r2, #3
 8007eac:	0092      	lsls	r2, r2, #2
 8007eae:	4093      	lsls	r3, r2
 8007eb0:	69ba      	ldr	r2, [r7, #24]
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007eb6:	4938      	ldr	r1, [pc, #224]	; (8007f98 <HAL_GPIO_Init+0x34c>)
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	089b      	lsrs	r3, r3, #2
 8007ebc:	3302      	adds	r3, #2
 8007ebe:	69ba      	ldr	r2, [r7, #24]
 8007ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	43db      	mvns	r3, r3
 8007ed0:	69ba      	ldr	r2, [r7, #24]
 8007ed2:	4013      	ands	r3, r2
 8007ed4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d003      	beq.n	8007eea <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007ee2:	69ba      	ldr	r2, [r7, #24]
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007eea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007eee:	69bb      	ldr	r3, [r7, #24]
 8007ef0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007ef2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007efa:	693b      	ldr	r3, [r7, #16]
 8007efc:	43db      	mvns	r3, r3
 8007efe:	69ba      	ldr	r2, [r7, #24]
 8007f00:	4013      	ands	r3, r2
 8007f02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d003      	beq.n	8007f18 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007f10:	69ba      	ldr	r2, [r7, #24]
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	4313      	orrs	r3, r2
 8007f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007f18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	43db      	mvns	r3, r3
 8007f2a:	69ba      	ldr	r2, [r7, #24]
 8007f2c:	4013      	ands	r3, r2
 8007f2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d003      	beq.n	8007f44 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007f3c:	69ba      	ldr	r2, [r7, #24]
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	4313      	orrs	r3, r2
 8007f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	69ba      	ldr	r2, [r7, #24]
 8007f48:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	43db      	mvns	r3, r3
 8007f54:	69ba      	ldr	r2, [r7, #24]
 8007f56:	4013      	ands	r3, r2
 8007f58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d003      	beq.n	8007f6e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007f66:	69ba      	ldr	r2, [r7, #24]
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	69ba      	ldr	r2, [r7, #24]
 8007f72:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007f74:	69fb      	ldr	r3, [r7, #28]
 8007f76:	3301      	adds	r3, #1
 8007f78:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	fa22 f303 	lsr.w	r3, r2, r3
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	f47f ae6b 	bne.w	8007c60 <HAL_GPIO_Init+0x14>
  }
}
 8007f8a:	bf00      	nop
 8007f8c:	bf00      	nop
 8007f8e:	3724      	adds	r7, #36	; 0x24
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr
 8007f98:	58000400 	.word	0x58000400

08007f9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b085      	sub	sp, #20
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	691a      	ldr	r2, [r3, #16]
 8007fac:	887b      	ldrh	r3, [r7, #2]
 8007fae:	4013      	ands	r3, r2
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d002      	beq.n	8007fba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	73fb      	strb	r3, [r7, #15]
 8007fb8:	e001      	b.n	8007fbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3714      	adds	r7, #20
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	807b      	strh	r3, [r7, #2]
 8007fd8:	4613      	mov	r3, r2
 8007fda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007fdc:	787b      	ldrb	r3, [r7, #1]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d003      	beq.n	8007fea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007fe2:	887a      	ldrh	r2, [r7, #2]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007fe8:	e003      	b.n	8007ff2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007fea:	887b      	ldrh	r3, [r7, #2]
 8007fec:	041a      	lsls	r2, r3, #16
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	619a      	str	r2, [r3, #24]
}
 8007ff2:	bf00      	nop
 8007ff4:	370c      	adds	r7, #12
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr
	...

08008000 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d101      	bne.n	8008012 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	e07f      	b.n	8008112 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008018:	b2db      	uxtb	r3, r3
 800801a:	2b00      	cmp	r3, #0
 800801c:	d106      	bne.n	800802c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f7fa fde2 	bl	8002bf0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2224      	movs	r2, #36	; 0x24
 8008030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f022 0201 	bic.w	r2, r2, #1
 8008042:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	685a      	ldr	r2, [r3, #4]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008050:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	689a      	ldr	r2, [r3, #8]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008060:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	2b01      	cmp	r3, #1
 8008068:	d107      	bne.n	800807a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	689a      	ldr	r2, [r3, #8]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008076:	609a      	str	r2, [r3, #8]
 8008078:	e006      	b.n	8008088 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	689a      	ldr	r2, [r3, #8]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008086:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	2b02      	cmp	r3, #2
 800808e:	d104      	bne.n	800809a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008098:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	6859      	ldr	r1, [r3, #4]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	4b1d      	ldr	r3, [pc, #116]	; (800811c <HAL_I2C_Init+0x11c>)
 80080a6:	430b      	orrs	r3, r1
 80080a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	68da      	ldr	r2, [r3, #12]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80080b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	691a      	ldr	r2, [r3, #16]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	695b      	ldr	r3, [r3, #20]
 80080c2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	699b      	ldr	r3, [r3, #24]
 80080ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	430a      	orrs	r2, r1
 80080d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	69d9      	ldr	r1, [r3, #28]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6a1a      	ldr	r2, [r3, #32]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	430a      	orrs	r2, r1
 80080e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f042 0201 	orr.w	r2, r2, #1
 80080f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2220      	movs	r2, #32
 80080fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008110:	2300      	movs	r3, #0
}
 8008112:	4618      	mov	r0, r3
 8008114:	3708      	adds	r7, #8
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	02008000 	.word	0x02008000

08008120 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	699b      	ldr	r3, [r3, #24]
 800812e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800813c:	2b00      	cmp	r3, #0
 800813e:	d005      	beq.n	800814c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	68f9      	ldr	r1, [r7, #12]
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	4798      	blx	r3
  }
}
 800814c:	bf00      	nop
 800814e:	3710      	adds	r7, #16
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008164:	b2db      	uxtb	r3, r3
 8008166:	2b20      	cmp	r3, #32
 8008168:	d138      	bne.n	80081dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008170:	2b01      	cmp	r3, #1
 8008172:	d101      	bne.n	8008178 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008174:	2302      	movs	r3, #2
 8008176:	e032      	b.n	80081de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2201      	movs	r2, #1
 800817c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2224      	movs	r2, #36	; 0x24
 8008184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f022 0201 	bic.w	r2, r2, #1
 8008196:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80081a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	6819      	ldr	r1, [r3, #0]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	683a      	ldr	r2, [r7, #0]
 80081b4:	430a      	orrs	r2, r1
 80081b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f042 0201 	orr.w	r2, r2, #1
 80081c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2220      	movs	r2, #32
 80081cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80081d8:	2300      	movs	r3, #0
 80081da:	e000      	b.n	80081de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80081dc:	2302      	movs	r3, #2
  }
}
 80081de:	4618      	mov	r0, r3
 80081e0:	370c      	adds	r7, #12
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr

080081ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80081ea:	b480      	push	{r7}
 80081ec:	b085      	sub	sp, #20
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
 80081f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	2b20      	cmp	r3, #32
 80081fe:	d139      	bne.n	8008274 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008206:	2b01      	cmp	r3, #1
 8008208:	d101      	bne.n	800820e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800820a:	2302      	movs	r3, #2
 800820c:	e033      	b.n	8008276 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2201      	movs	r2, #1
 8008212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2224      	movs	r2, #36	; 0x24
 800821a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f022 0201 	bic.w	r2, r2, #1
 800822c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800823c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	021b      	lsls	r3, r3, #8
 8008242:	68fa      	ldr	r2, [r7, #12]
 8008244:	4313      	orrs	r3, r2
 8008246:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	68fa      	ldr	r2, [r7, #12]
 800824e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f042 0201 	orr.w	r2, r2, #1
 800825e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2220      	movs	r2, #32
 8008264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008270:	2300      	movs	r3, #0
 8008272:	e000      	b.n	8008276 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008274:	2302      	movs	r3, #2
  }
}
 8008276:	4618      	mov	r0, r3
 8008278:	3714      	adds	r7, #20
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr

08008282 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008282:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008284:	b08f      	sub	sp, #60	; 0x3c
 8008286:	af0a      	add	r7, sp, #40	; 0x28
 8008288:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d101      	bne.n	8008294 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	e116      	b.n	80084c2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d106      	bne.n	80082b4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f00e fbc8 	bl	8016a44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2203      	movs	r2, #3
 80082b8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d102      	bne.n	80082ce <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4618      	mov	r0, r3
 80082d4:	f00a fcf7 	bl	8012cc6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	603b      	str	r3, [r7, #0]
 80082de:	687e      	ldr	r6, [r7, #4]
 80082e0:	466d      	mov	r5, sp
 80082e2:	f106 0410 	add.w	r4, r6, #16
 80082e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80082e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80082ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80082ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80082ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80082f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80082f6:	1d33      	adds	r3, r6, #4
 80082f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80082fa:	6838      	ldr	r0, [r7, #0]
 80082fc:	f00a fbc2 	bl	8012a84 <USB_CoreInit>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d005      	beq.n	8008312 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2202      	movs	r2, #2
 800830a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	e0d7      	b.n	80084c2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	2100      	movs	r1, #0
 8008318:	4618      	mov	r0, r3
 800831a:	f00a fce5 	bl	8012ce8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800831e:	2300      	movs	r3, #0
 8008320:	73fb      	strb	r3, [r7, #15]
 8008322:	e04a      	b.n	80083ba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008324:	7bfa      	ldrb	r2, [r7, #15]
 8008326:	6879      	ldr	r1, [r7, #4]
 8008328:	4613      	mov	r3, r2
 800832a:	00db      	lsls	r3, r3, #3
 800832c:	4413      	add	r3, r2
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	440b      	add	r3, r1
 8008332:	333d      	adds	r3, #61	; 0x3d
 8008334:	2201      	movs	r2, #1
 8008336:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008338:	7bfa      	ldrb	r2, [r7, #15]
 800833a:	6879      	ldr	r1, [r7, #4]
 800833c:	4613      	mov	r3, r2
 800833e:	00db      	lsls	r3, r3, #3
 8008340:	4413      	add	r3, r2
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	440b      	add	r3, r1
 8008346:	333c      	adds	r3, #60	; 0x3c
 8008348:	7bfa      	ldrb	r2, [r7, #15]
 800834a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800834c:	7bfa      	ldrb	r2, [r7, #15]
 800834e:	7bfb      	ldrb	r3, [r7, #15]
 8008350:	b298      	uxth	r0, r3
 8008352:	6879      	ldr	r1, [r7, #4]
 8008354:	4613      	mov	r3, r2
 8008356:	00db      	lsls	r3, r3, #3
 8008358:	4413      	add	r3, r2
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	440b      	add	r3, r1
 800835e:	3356      	adds	r3, #86	; 0x56
 8008360:	4602      	mov	r2, r0
 8008362:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008364:	7bfa      	ldrb	r2, [r7, #15]
 8008366:	6879      	ldr	r1, [r7, #4]
 8008368:	4613      	mov	r3, r2
 800836a:	00db      	lsls	r3, r3, #3
 800836c:	4413      	add	r3, r2
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	440b      	add	r3, r1
 8008372:	3340      	adds	r3, #64	; 0x40
 8008374:	2200      	movs	r2, #0
 8008376:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008378:	7bfa      	ldrb	r2, [r7, #15]
 800837a:	6879      	ldr	r1, [r7, #4]
 800837c:	4613      	mov	r3, r2
 800837e:	00db      	lsls	r3, r3, #3
 8008380:	4413      	add	r3, r2
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	440b      	add	r3, r1
 8008386:	3344      	adds	r3, #68	; 0x44
 8008388:	2200      	movs	r2, #0
 800838a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800838c:	7bfa      	ldrb	r2, [r7, #15]
 800838e:	6879      	ldr	r1, [r7, #4]
 8008390:	4613      	mov	r3, r2
 8008392:	00db      	lsls	r3, r3, #3
 8008394:	4413      	add	r3, r2
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	440b      	add	r3, r1
 800839a:	3348      	adds	r3, #72	; 0x48
 800839c:	2200      	movs	r2, #0
 800839e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80083a0:	7bfa      	ldrb	r2, [r7, #15]
 80083a2:	6879      	ldr	r1, [r7, #4]
 80083a4:	4613      	mov	r3, r2
 80083a6:	00db      	lsls	r3, r3, #3
 80083a8:	4413      	add	r3, r2
 80083aa:	009b      	lsls	r3, r3, #2
 80083ac:	440b      	add	r3, r1
 80083ae:	334c      	adds	r3, #76	; 0x4c
 80083b0:	2200      	movs	r2, #0
 80083b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80083b4:	7bfb      	ldrb	r3, [r7, #15]
 80083b6:	3301      	adds	r3, #1
 80083b8:	73fb      	strb	r3, [r7, #15]
 80083ba:	7bfa      	ldrb	r2, [r7, #15]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d3af      	bcc.n	8008324 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80083c4:	2300      	movs	r3, #0
 80083c6:	73fb      	strb	r3, [r7, #15]
 80083c8:	e044      	b.n	8008454 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80083ca:	7bfa      	ldrb	r2, [r7, #15]
 80083cc:	6879      	ldr	r1, [r7, #4]
 80083ce:	4613      	mov	r3, r2
 80083d0:	00db      	lsls	r3, r3, #3
 80083d2:	4413      	add	r3, r2
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	440b      	add	r3, r1
 80083d8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80083dc:	2200      	movs	r2, #0
 80083de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80083e0:	7bfa      	ldrb	r2, [r7, #15]
 80083e2:	6879      	ldr	r1, [r7, #4]
 80083e4:	4613      	mov	r3, r2
 80083e6:	00db      	lsls	r3, r3, #3
 80083e8:	4413      	add	r3, r2
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	440b      	add	r3, r1
 80083ee:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80083f2:	7bfa      	ldrb	r2, [r7, #15]
 80083f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80083f6:	7bfa      	ldrb	r2, [r7, #15]
 80083f8:	6879      	ldr	r1, [r7, #4]
 80083fa:	4613      	mov	r3, r2
 80083fc:	00db      	lsls	r3, r3, #3
 80083fe:	4413      	add	r3, r2
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	440b      	add	r3, r1
 8008404:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008408:	2200      	movs	r2, #0
 800840a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800840c:	7bfa      	ldrb	r2, [r7, #15]
 800840e:	6879      	ldr	r1, [r7, #4]
 8008410:	4613      	mov	r3, r2
 8008412:	00db      	lsls	r3, r3, #3
 8008414:	4413      	add	r3, r2
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	440b      	add	r3, r1
 800841a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800841e:	2200      	movs	r2, #0
 8008420:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008422:	7bfa      	ldrb	r2, [r7, #15]
 8008424:	6879      	ldr	r1, [r7, #4]
 8008426:	4613      	mov	r3, r2
 8008428:	00db      	lsls	r3, r3, #3
 800842a:	4413      	add	r3, r2
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	440b      	add	r3, r1
 8008430:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008434:	2200      	movs	r2, #0
 8008436:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008438:	7bfa      	ldrb	r2, [r7, #15]
 800843a:	6879      	ldr	r1, [r7, #4]
 800843c:	4613      	mov	r3, r2
 800843e:	00db      	lsls	r3, r3, #3
 8008440:	4413      	add	r3, r2
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	440b      	add	r3, r1
 8008446:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800844a:	2200      	movs	r2, #0
 800844c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800844e:	7bfb      	ldrb	r3, [r7, #15]
 8008450:	3301      	adds	r3, #1
 8008452:	73fb      	strb	r3, [r7, #15]
 8008454:	7bfa      	ldrb	r2, [r7, #15]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	429a      	cmp	r2, r3
 800845c:	d3b5      	bcc.n	80083ca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	603b      	str	r3, [r7, #0]
 8008464:	687e      	ldr	r6, [r7, #4]
 8008466:	466d      	mov	r5, sp
 8008468:	f106 0410 	add.w	r4, r6, #16
 800846c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800846e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008470:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008472:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008474:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008478:	e885 0003 	stmia.w	r5, {r0, r1}
 800847c:	1d33      	adds	r3, r6, #4
 800847e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008480:	6838      	ldr	r0, [r7, #0]
 8008482:	f00a fc7d 	bl	8012d80 <USB_DevInit>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d005      	beq.n	8008498 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2202      	movs	r2, #2
 8008490:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008494:	2301      	movs	r3, #1
 8008496:	e014      	b.n	80084c2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2200      	movs	r2, #0
 800849c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2201      	movs	r2, #1
 80084a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d102      	bne.n	80084b6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f001 f96f 	bl	8009794 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4618      	mov	r0, r3
 80084bc:	f00b fcbf 	bl	8013e3e <USB_DevDisconnect>

  return HAL_OK;
 80084c0:	2300      	movs	r3, #0
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3714      	adds	r7, #20
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080084ca <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80084ca:	b580      	push	{r7, lr}
 80084cc:	b084      	sub	sp, #16
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d101      	bne.n	80084e6 <HAL_PCD_Start+0x1c>
 80084e2:	2302      	movs	r3, #2
 80084e4:	e022      	b.n	800852c <HAL_PCD_Start+0x62>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2201      	movs	r2, #1
 80084ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d109      	bne.n	800850e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d105      	bne.n	800850e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008506:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4618      	mov	r0, r3
 8008514:	f00a fbc6 	bl	8012ca4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4618      	mov	r0, r3
 800851e:	f00b fc6d 	bl	8013dfc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800852a:	2300      	movs	r3, #0
}
 800852c:	4618      	mov	r0, r3
 800852e:	3710      	adds	r7, #16
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008534:	b590      	push	{r4, r7, lr}
 8008536:	b08d      	sub	sp, #52	; 0x34
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008542:	6a3b      	ldr	r3, [r7, #32]
 8008544:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4618      	mov	r0, r3
 800854c:	f00b fd2b 	bl	8013fa6 <USB_GetMode>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	f040 84b7 	bne.w	8008ec6 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4618      	mov	r0, r3
 800855e:	f00b fc8f 	bl	8013e80 <USB_ReadInterrupts>
 8008562:	4603      	mov	r3, r0
 8008564:	2b00      	cmp	r3, #0
 8008566:	f000 84ad 	beq.w	8008ec4 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800856a:	69fb      	ldr	r3, [r7, #28]
 800856c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	0a1b      	lsrs	r3, r3, #8
 8008574:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4618      	mov	r0, r3
 8008584:	f00b fc7c 	bl	8013e80 <USB_ReadInterrupts>
 8008588:	4603      	mov	r3, r0
 800858a:	f003 0302 	and.w	r3, r3, #2
 800858e:	2b02      	cmp	r3, #2
 8008590:	d107      	bne.n	80085a2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	695a      	ldr	r2, [r3, #20]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f002 0202 	and.w	r2, r2, #2
 80085a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4618      	mov	r0, r3
 80085a8:	f00b fc6a 	bl	8013e80 <USB_ReadInterrupts>
 80085ac:	4603      	mov	r3, r0
 80085ae:	f003 0310 	and.w	r3, r3, #16
 80085b2:	2b10      	cmp	r3, #16
 80085b4:	d161      	bne.n	800867a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	699a      	ldr	r2, [r3, #24]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f022 0210 	bic.w	r2, r2, #16
 80085c4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80085c6:	6a3b      	ldr	r3, [r7, #32]
 80085c8:	6a1b      	ldr	r3, [r3, #32]
 80085ca:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	f003 020f 	and.w	r2, r3, #15
 80085d2:	4613      	mov	r3, r2
 80085d4:	00db      	lsls	r3, r3, #3
 80085d6:	4413      	add	r3, r2
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	4413      	add	r3, r2
 80085e2:	3304      	adds	r3, #4
 80085e4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80085e6:	69bb      	ldr	r3, [r7, #24]
 80085e8:	0c5b      	lsrs	r3, r3, #17
 80085ea:	f003 030f 	and.w	r3, r3, #15
 80085ee:	2b02      	cmp	r3, #2
 80085f0:	d124      	bne.n	800863c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80085f2:	69ba      	ldr	r2, [r7, #24]
 80085f4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80085f8:	4013      	ands	r3, r2
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d035      	beq.n	800866a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008602:	69bb      	ldr	r3, [r7, #24]
 8008604:	091b      	lsrs	r3, r3, #4
 8008606:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008608:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800860c:	b29b      	uxth	r3, r3
 800860e:	461a      	mov	r2, r3
 8008610:	6a38      	ldr	r0, [r7, #32]
 8008612:	f00b faa1 	bl	8013b58 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	68da      	ldr	r2, [r3, #12]
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	091b      	lsrs	r3, r3, #4
 800861e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008622:	441a      	add	r2, r3
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	695a      	ldr	r2, [r3, #20]
 800862c:	69bb      	ldr	r3, [r7, #24]
 800862e:	091b      	lsrs	r3, r3, #4
 8008630:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008634:	441a      	add	r2, r3
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	615a      	str	r2, [r3, #20]
 800863a:	e016      	b.n	800866a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	0c5b      	lsrs	r3, r3, #17
 8008640:	f003 030f 	and.w	r3, r3, #15
 8008644:	2b06      	cmp	r3, #6
 8008646:	d110      	bne.n	800866a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800864e:	2208      	movs	r2, #8
 8008650:	4619      	mov	r1, r3
 8008652:	6a38      	ldr	r0, [r7, #32]
 8008654:	f00b fa80 	bl	8013b58 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	695a      	ldr	r2, [r3, #20]
 800865c:	69bb      	ldr	r3, [r7, #24]
 800865e:	091b      	lsrs	r3, r3, #4
 8008660:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008664:	441a      	add	r2, r3
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	699a      	ldr	r2, [r3, #24]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f042 0210 	orr.w	r2, r2, #16
 8008678:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4618      	mov	r0, r3
 8008680:	f00b fbfe 	bl	8013e80 <USB_ReadInterrupts>
 8008684:	4603      	mov	r3, r0
 8008686:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800868a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800868e:	f040 80a7 	bne.w	80087e0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8008692:	2300      	movs	r3, #0
 8008694:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4618      	mov	r0, r3
 800869c:	f00b fc03 	bl	8013ea6 <USB_ReadDevAllOutEpInterrupt>
 80086a0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80086a2:	e099      	b.n	80087d8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80086a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a6:	f003 0301 	and.w	r3, r3, #1
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	f000 808e 	beq.w	80087cc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086b6:	b2d2      	uxtb	r2, r2
 80086b8:	4611      	mov	r1, r2
 80086ba:	4618      	mov	r0, r3
 80086bc:	f00b fc27 	bl	8013f0e <USB_ReadDevOutEPInterrupt>
 80086c0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	f003 0301 	and.w	r3, r3, #1
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00c      	beq.n	80086e6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80086cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ce:	015a      	lsls	r2, r3, #5
 80086d0:	69fb      	ldr	r3, [r7, #28]
 80086d2:	4413      	add	r3, r2
 80086d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086d8:	461a      	mov	r2, r3
 80086da:	2301      	movs	r3, #1
 80086dc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80086de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 fed1 	bl	8009488 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	f003 0308 	and.w	r3, r3, #8
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d00c      	beq.n	800870a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80086f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f2:	015a      	lsls	r2, r3, #5
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	4413      	add	r3, r2
 80086f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086fc:	461a      	mov	r2, r3
 80086fe:	2308      	movs	r3, #8
 8008700:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008702:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 ffa7 	bl	8009658 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	f003 0310 	and.w	r3, r3, #16
 8008710:	2b00      	cmp	r3, #0
 8008712:	d008      	beq.n	8008726 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008716:	015a      	lsls	r2, r3, #5
 8008718:	69fb      	ldr	r3, [r7, #28]
 800871a:	4413      	add	r3, r2
 800871c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008720:	461a      	mov	r2, r3
 8008722:	2310      	movs	r3, #16
 8008724:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	f003 0302 	and.w	r3, r3, #2
 800872c:	2b00      	cmp	r3, #0
 800872e:	d030      	beq.n	8008792 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8008730:	6a3b      	ldr	r3, [r7, #32]
 8008732:	695b      	ldr	r3, [r3, #20]
 8008734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008738:	2b80      	cmp	r3, #128	; 0x80
 800873a:	d109      	bne.n	8008750 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008742:	685b      	ldr	r3, [r3, #4]
 8008744:	69fa      	ldr	r2, [r7, #28]
 8008746:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800874a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800874e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008752:	4613      	mov	r3, r2
 8008754:	00db      	lsls	r3, r3, #3
 8008756:	4413      	add	r3, r2
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	4413      	add	r3, r2
 8008762:	3304      	adds	r3, #4
 8008764:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	78db      	ldrb	r3, [r3, #3]
 800876a:	2b01      	cmp	r3, #1
 800876c:	d108      	bne.n	8008780 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	2200      	movs	r2, #0
 8008772:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008776:	b2db      	uxtb	r3, r3
 8008778:	4619      	mov	r1, r3
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f00e fa5a 	bl	8016c34 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008782:	015a      	lsls	r2, r3, #5
 8008784:	69fb      	ldr	r3, [r7, #28]
 8008786:	4413      	add	r3, r2
 8008788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800878c:	461a      	mov	r2, r3
 800878e:	2302      	movs	r3, #2
 8008790:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	f003 0320 	and.w	r3, r3, #32
 8008798:	2b00      	cmp	r3, #0
 800879a:	d008      	beq.n	80087ae <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800879c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879e:	015a      	lsls	r2, r3, #5
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	4413      	add	r3, r2
 80087a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087a8:	461a      	mov	r2, r3
 80087aa:	2320      	movs	r3, #32
 80087ac:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d009      	beq.n	80087cc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80087b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ba:	015a      	lsls	r2, r3, #5
 80087bc:	69fb      	ldr	r3, [r7, #28]
 80087be:	4413      	add	r3, r2
 80087c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087c4:	461a      	mov	r2, r3
 80087c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80087ca:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80087cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ce:	3301      	adds	r3, #1
 80087d0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80087d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d4:	085b      	lsrs	r3, r3, #1
 80087d6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80087d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087da:	2b00      	cmp	r3, #0
 80087dc:	f47f af62 	bne.w	80086a4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4618      	mov	r0, r3
 80087e6:	f00b fb4b 	bl	8013e80 <USB_ReadInterrupts>
 80087ea:	4603      	mov	r3, r0
 80087ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80087f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80087f4:	f040 80db 	bne.w	80089ae <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4618      	mov	r0, r3
 80087fe:	f00b fb6c 	bl	8013eda <USB_ReadDevAllInEpInterrupt>
 8008802:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008804:	2300      	movs	r3, #0
 8008806:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008808:	e0cd      	b.n	80089a6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800880a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800880c:	f003 0301 	and.w	r3, r3, #1
 8008810:	2b00      	cmp	r3, #0
 8008812:	f000 80c2 	beq.w	800899a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800881c:	b2d2      	uxtb	r2, r2
 800881e:	4611      	mov	r1, r2
 8008820:	4618      	mov	r0, r3
 8008822:	f00b fb92 	bl	8013f4a <USB_ReadDevInEPInterrupt>
 8008826:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	f003 0301 	and.w	r3, r3, #1
 800882e:	2b00      	cmp	r3, #0
 8008830:	d057      	beq.n	80088e2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008834:	f003 030f 	and.w	r3, r3, #15
 8008838:	2201      	movs	r2, #1
 800883a:	fa02 f303 	lsl.w	r3, r2, r3
 800883e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008840:	69fb      	ldr	r3, [r7, #28]
 8008842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008846:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	43db      	mvns	r3, r3
 800884c:	69f9      	ldr	r1, [r7, #28]
 800884e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008852:	4013      	ands	r3, r2
 8008854:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008858:	015a      	lsls	r2, r3, #5
 800885a:	69fb      	ldr	r3, [r7, #28]
 800885c:	4413      	add	r3, r2
 800885e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008862:	461a      	mov	r2, r3
 8008864:	2301      	movs	r3, #1
 8008866:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	68db      	ldr	r3, [r3, #12]
 800886c:	2b01      	cmp	r3, #1
 800886e:	d132      	bne.n	80088d6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008870:	6879      	ldr	r1, [r7, #4]
 8008872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008874:	4613      	mov	r3, r2
 8008876:	00db      	lsls	r3, r3, #3
 8008878:	4413      	add	r3, r2
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	440b      	add	r3, r1
 800887e:	3348      	adds	r3, #72	; 0x48
 8008880:	6819      	ldr	r1, [r3, #0]
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008886:	4613      	mov	r3, r2
 8008888:	00db      	lsls	r3, r3, #3
 800888a:	4413      	add	r3, r2
 800888c:	009b      	lsls	r3, r3, #2
 800888e:	4403      	add	r3, r0
 8008890:	3344      	adds	r3, #68	; 0x44
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4419      	add	r1, r3
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800889a:	4613      	mov	r3, r2
 800889c:	00db      	lsls	r3, r3, #3
 800889e:	4413      	add	r3, r2
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	4403      	add	r3, r0
 80088a4:	3348      	adds	r3, #72	; 0x48
 80088a6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80088a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d113      	bne.n	80088d6 <HAL_PCD_IRQHandler+0x3a2>
 80088ae:	6879      	ldr	r1, [r7, #4]
 80088b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088b2:	4613      	mov	r3, r2
 80088b4:	00db      	lsls	r3, r3, #3
 80088b6:	4413      	add	r3, r2
 80088b8:	009b      	lsls	r3, r3, #2
 80088ba:	440b      	add	r3, r1
 80088bc:	334c      	adds	r3, #76	; 0x4c
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d108      	bne.n	80088d6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6818      	ldr	r0, [r3, #0]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80088ce:	461a      	mov	r2, r3
 80088d0:	2101      	movs	r1, #1
 80088d2:	f00b fb9b 	bl	801400c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80088d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	4619      	mov	r1, r3
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f00e f924 	bl	8016b2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	f003 0308 	and.w	r3, r3, #8
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d008      	beq.n	80088fe <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80088ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ee:	015a      	lsls	r2, r3, #5
 80088f0:	69fb      	ldr	r3, [r7, #28]
 80088f2:	4413      	add	r3, r2
 80088f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088f8:	461a      	mov	r2, r3
 80088fa:	2308      	movs	r3, #8
 80088fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	f003 0310 	and.w	r3, r3, #16
 8008904:	2b00      	cmp	r3, #0
 8008906:	d008      	beq.n	800891a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890a:	015a      	lsls	r2, r3, #5
 800890c:	69fb      	ldr	r3, [r7, #28]
 800890e:	4413      	add	r3, r2
 8008910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008914:	461a      	mov	r2, r3
 8008916:	2310      	movs	r3, #16
 8008918:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008920:	2b00      	cmp	r3, #0
 8008922:	d008      	beq.n	8008936 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008926:	015a      	lsls	r2, r3, #5
 8008928:	69fb      	ldr	r3, [r7, #28]
 800892a:	4413      	add	r3, r2
 800892c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008930:	461a      	mov	r2, r3
 8008932:	2340      	movs	r3, #64	; 0x40
 8008934:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	f003 0302 	and.w	r3, r3, #2
 800893c:	2b00      	cmp	r3, #0
 800893e:	d023      	beq.n	8008988 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008940:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008942:	6a38      	ldr	r0, [r7, #32]
 8008944:	f00a fb7a 	bl	801303c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800894a:	4613      	mov	r3, r2
 800894c:	00db      	lsls	r3, r3, #3
 800894e:	4413      	add	r3, r2
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	3338      	adds	r3, #56	; 0x38
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	4413      	add	r3, r2
 8008958:	3304      	adds	r3, #4
 800895a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	78db      	ldrb	r3, [r3, #3]
 8008960:	2b01      	cmp	r3, #1
 8008962:	d108      	bne.n	8008976 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	2200      	movs	r2, #0
 8008968:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800896a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896c:	b2db      	uxtb	r3, r3
 800896e:	4619      	mov	r1, r3
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f00e f971 	bl	8016c58 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008978:	015a      	lsls	r2, r3, #5
 800897a:	69fb      	ldr	r3, [r7, #28]
 800897c:	4413      	add	r3, r2
 800897e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008982:	461a      	mov	r2, r3
 8008984:	2302      	movs	r3, #2
 8008986:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800898e:	2b00      	cmp	r3, #0
 8008990:	d003      	beq.n	800899a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008992:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 fcea 	bl	800936e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800899a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899c:	3301      	adds	r3, #1
 800899e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80089a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a2:	085b      	lsrs	r3, r3, #1
 80089a4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80089a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	f47f af2e 	bne.w	800880a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4618      	mov	r0, r3
 80089b4:	f00b fa64 	bl	8013e80 <USB_ReadInterrupts>
 80089b8:	4603      	mov	r3, r0
 80089ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089c2:	d122      	bne.n	8008a0a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	69fa      	ldr	r2, [r7, #28]
 80089ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089d2:	f023 0301 	bic.w	r3, r3, #1
 80089d6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d108      	bne.n	80089f4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80089ea:	2100      	movs	r1, #0
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 fef5 	bl	80097dc <HAL_PCDEx_LPM_Callback>
 80089f2:	e002      	b.n	80089fa <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f00e f90f 	bl	8016c18 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	695a      	ldr	r2, [r3, #20]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008a08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f00b fa36 	bl	8013e80 <USB_ReadInterrupts>
 8008a14:	4603      	mov	r3, r0
 8008a16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a1e:	d112      	bne.n	8008a46 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008a20:	69fb      	ldr	r3, [r7, #28]
 8008a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	f003 0301 	and.w	r3, r3, #1
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d102      	bne.n	8008a36 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f00e f8cb 	bl	8016bcc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	695a      	ldr	r2, [r3, #20]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008a44:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f00b fa18 	bl	8013e80 <USB_ReadInterrupts>
 8008a50:	4603      	mov	r3, r0
 8008a52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a5a:	d121      	bne.n	8008aa0 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	695a      	ldr	r2, [r3, #20]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008a6a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d111      	bne.n	8008a9a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2201      	movs	r2, #1
 8008a7a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a84:	089b      	lsrs	r3, r3, #2
 8008a86:	f003 020f 	and.w	r2, r3, #15
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008a90:	2101      	movs	r1, #1
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 fea2 	bl	80097dc <HAL_PCDEx_LPM_Callback>
 8008a98:	e002      	b.n	8008aa0 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f00e f896 	bl	8016bcc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f00b f9eb 	bl	8013e80 <USB_ReadInterrupts>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008ab0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ab4:	f040 80b7 	bne.w	8008c26 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	69fa      	ldr	r2, [r7, #28]
 8008ac2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ac6:	f023 0301 	bic.w	r3, r3, #1
 8008aca:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	2110      	movs	r1, #16
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f00a fab2 	bl	801303c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008ad8:	2300      	movs	r3, #0
 8008ada:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008adc:	e046      	b.n	8008b6c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae0:	015a      	lsls	r2, r3, #5
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aea:	461a      	mov	r2, r3
 8008aec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008af0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af4:	015a      	lsls	r2, r3, #5
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	4413      	add	r3, r2
 8008afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b02:	0151      	lsls	r1, r2, #5
 8008b04:	69fa      	ldr	r2, [r7, #28]
 8008b06:	440a      	add	r2, r1
 8008b08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b10:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b14:	015a      	lsls	r2, r3, #5
 8008b16:	69fb      	ldr	r3, [r7, #28]
 8008b18:	4413      	add	r3, r2
 8008b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b1e:	461a      	mov	r2, r3
 8008b20:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008b24:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b28:	015a      	lsls	r2, r3, #5
 8008b2a:	69fb      	ldr	r3, [r7, #28]
 8008b2c:	4413      	add	r3, r2
 8008b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b36:	0151      	lsls	r1, r2, #5
 8008b38:	69fa      	ldr	r2, [r7, #28]
 8008b3a:	440a      	add	r2, r1
 8008b3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b40:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b44:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b48:	015a      	lsls	r2, r3, #5
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b56:	0151      	lsls	r1, r2, #5
 8008b58:	69fa      	ldr	r2, [r7, #28]
 8008b5a:	440a      	add	r2, r1
 8008b5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b60:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008b64:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b68:	3301      	adds	r3, #1
 8008b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d3b3      	bcc.n	8008ade <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b7c:	69db      	ldr	r3, [r3, #28]
 8008b7e:	69fa      	ldr	r2, [r7, #28]
 8008b80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b84:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008b88:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d016      	beq.n	8008bc0 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008b92:	69fb      	ldr	r3, [r7, #28]
 8008b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b9c:	69fa      	ldr	r2, [r7, #28]
 8008b9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ba2:	f043 030b 	orr.w	r3, r3, #11
 8008ba6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008baa:	69fb      	ldr	r3, [r7, #28]
 8008bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bb2:	69fa      	ldr	r2, [r7, #28]
 8008bb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bb8:	f043 030b 	orr.w	r3, r3, #11
 8008bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8008bbe:	e015      	b.n	8008bec <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008bc0:	69fb      	ldr	r3, [r7, #28]
 8008bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bc6:	695a      	ldr	r2, [r3, #20]
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bce:	4619      	mov	r1, r3
 8008bd0:	f242 032b 	movw	r3, #8235	; 0x202b
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008bd8:	69fb      	ldr	r3, [r7, #28]
 8008bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bde:	691b      	ldr	r3, [r3, #16]
 8008be0:	69fa      	ldr	r2, [r7, #28]
 8008be2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008be6:	f043 030b 	orr.w	r3, r3, #11
 8008bea:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008bec:	69fb      	ldr	r3, [r7, #28]
 8008bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	69fa      	ldr	r2, [r7, #28]
 8008bf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bfa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008bfe:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6818      	ldr	r0, [r3, #0]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008c10:	461a      	mov	r2, r3
 8008c12:	f00b f9fb 	bl	801400c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	695a      	ldr	r2, [r3, #20]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008c24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f00b f928 	bl	8013e80 <USB_ReadInterrupts>
 8008c30:	4603      	mov	r3, r0
 8008c32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c3a:	d124      	bne.n	8008c86 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4618      	mov	r0, r3
 8008c42:	f00b f9bf 	bl	8013fc4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f00a fa73 	bl	8013136 <USB_GetDevSpeed>
 8008c50:	4603      	mov	r3, r0
 8008c52:	461a      	mov	r2, r3
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681c      	ldr	r4, [r3, #0]
 8008c5c:	f001 fd88 	bl	800a770 <HAL_RCC_GetHCLKFreq>
 8008c60:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	461a      	mov	r2, r3
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	f009 ff78 	bl	8012b60 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f00d ff82 	bl	8016b7a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	695a      	ldr	r2, [r3, #20]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008c84:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f00b f8f8 	bl	8013e80 <USB_ReadInterrupts>
 8008c90:	4603      	mov	r3, r0
 8008c92:	f003 0308 	and.w	r3, r3, #8
 8008c96:	2b08      	cmp	r3, #8
 8008c98:	d10a      	bne.n	8008cb0 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f00d ff5f 	bl	8016b5e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	695a      	ldr	r2, [r3, #20]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f002 0208 	and.w	r2, r2, #8
 8008cae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f00b f8e3 	bl	8013e80 <USB_ReadInterrupts>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cc0:	2b80      	cmp	r3, #128	; 0x80
 8008cc2:	d122      	bne.n	8008d0a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008cc4:	6a3b      	ldr	r3, [r7, #32]
 8008cc6:	699b      	ldr	r3, [r3, #24]
 8008cc8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008ccc:	6a3b      	ldr	r3, [r7, #32]
 8008cce:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8008cd4:	e014      	b.n	8008d00 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008cd6:	6879      	ldr	r1, [r7, #4]
 8008cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cda:	4613      	mov	r3, r2
 8008cdc:	00db      	lsls	r3, r3, #3
 8008cde:	4413      	add	r3, r2
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	440b      	add	r3, r1
 8008ce4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d105      	bne.n	8008cfa <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 fb09 	bl	800930c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	627b      	str	r3, [r7, #36]	; 0x24
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d3e5      	bcc.n	8008cd6 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f00b f8b6 	bl	8013e80 <USB_ReadInterrupts>
 8008d14:	4603      	mov	r3, r0
 8008d16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d1e:	d13b      	bne.n	8008d98 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d20:	2301      	movs	r3, #1
 8008d22:	627b      	str	r3, [r7, #36]	; 0x24
 8008d24:	e02b      	b.n	8008d7e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d28:	015a      	lsls	r2, r3, #5
 8008d2a:	69fb      	ldr	r3, [r7, #28]
 8008d2c:	4413      	add	r3, r2
 8008d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008d36:	6879      	ldr	r1, [r7, #4]
 8008d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d3a:	4613      	mov	r3, r2
 8008d3c:	00db      	lsls	r3, r3, #3
 8008d3e:	4413      	add	r3, r2
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	440b      	add	r3, r1
 8008d44:	3340      	adds	r3, #64	; 0x40
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d115      	bne.n	8008d78 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008d4c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	da12      	bge.n	8008d78 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008d52:	6879      	ldr	r1, [r7, #4]
 8008d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d56:	4613      	mov	r3, r2
 8008d58:	00db      	lsls	r3, r3, #3
 8008d5a:	4413      	add	r3, r2
 8008d5c:	009b      	lsls	r3, r3, #2
 8008d5e:	440b      	add	r3, r1
 8008d60:	333f      	adds	r3, #63	; 0x3f
 8008d62:	2201      	movs	r2, #1
 8008d64:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008d6e:	b2db      	uxtb	r3, r3
 8008d70:	4619      	mov	r1, r3
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 faca 	bl	800930c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d84:	429a      	cmp	r2, r3
 8008d86:	d3ce      	bcc.n	8008d26 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	695a      	ldr	r2, [r3, #20]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008d96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f00b f86f 	bl	8013e80 <USB_ReadInterrupts>
 8008da2:	4603      	mov	r3, r0
 8008da4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008da8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008dac:	d155      	bne.n	8008e5a <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008dae:	2301      	movs	r3, #1
 8008db0:	627b      	str	r3, [r7, #36]	; 0x24
 8008db2:	e045      	b.n	8008e40 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db6:	015a      	lsls	r2, r3, #5
 8008db8:	69fb      	ldr	r3, [r7, #28]
 8008dba:	4413      	add	r3, r2
 8008dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008dc4:	6879      	ldr	r1, [r7, #4]
 8008dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dc8:	4613      	mov	r3, r2
 8008dca:	00db      	lsls	r3, r3, #3
 8008dcc:	4413      	add	r3, r2
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	440b      	add	r3, r1
 8008dd2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d12e      	bne.n	8008e3a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008ddc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	da2b      	bge.n	8008e3a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008de2:	69bb      	ldr	r3, [r7, #24]
 8008de4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8008dee:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d121      	bne.n	8008e3a <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008df6:	6879      	ldr	r1, [r7, #4]
 8008df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dfa:	4613      	mov	r3, r2
 8008dfc:	00db      	lsls	r3, r3, #3
 8008dfe:	4413      	add	r3, r2
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	440b      	add	r3, r1
 8008e04:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008e08:	2201      	movs	r2, #1
 8008e0a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008e0c:	6a3b      	ldr	r3, [r7, #32]
 8008e0e:	699b      	ldr	r3, [r3, #24]
 8008e10:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008e14:	6a3b      	ldr	r3, [r7, #32]
 8008e16:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008e18:	6a3b      	ldr	r3, [r7, #32]
 8008e1a:	695b      	ldr	r3, [r3, #20]
 8008e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d10a      	bne.n	8008e3a <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008e24:	69fb      	ldr	r3, [r7, #28]
 8008e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	69fa      	ldr	r2, [r7, #28]
 8008e2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008e36:	6053      	str	r3, [r2, #4]
            break;
 8008e38:	e007      	b.n	8008e4a <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d3b4      	bcc.n	8008db4 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	695a      	ldr	r2, [r3, #20]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008e58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f00b f80e 	bl	8013e80 <USB_ReadInterrupts>
 8008e64:	4603      	mov	r3, r0
 8008e66:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e6e:	d10a      	bne.n	8008e86 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f00d ff03 	bl	8016c7c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	695a      	ldr	r2, [r3, #20]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008e84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f00a fff8 	bl	8013e80 <USB_ReadInterrupts>
 8008e90:	4603      	mov	r3, r0
 8008e92:	f003 0304 	and.w	r3, r3, #4
 8008e96:	2b04      	cmp	r3, #4
 8008e98:	d115      	bne.n	8008ec6 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008ea2:	69bb      	ldr	r3, [r7, #24]
 8008ea4:	f003 0304 	and.w	r3, r3, #4
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d002      	beq.n	8008eb2 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f00d fef3 	bl	8016c98 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	6859      	ldr	r1, [r3, #4]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	69ba      	ldr	r2, [r7, #24]
 8008ebe:	430a      	orrs	r2, r1
 8008ec0:	605a      	str	r2, [r3, #4]
 8008ec2:	e000      	b.n	8008ec6 <HAL_PCD_IRQHandler+0x992>
      return;
 8008ec4:	bf00      	nop
    }
  }
}
 8008ec6:	3734      	adds	r7, #52	; 0x34
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd90      	pop	{r4, r7, pc}

08008ecc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b082      	sub	sp, #8
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008ede:	2b01      	cmp	r3, #1
 8008ee0:	d101      	bne.n	8008ee6 <HAL_PCD_SetAddress+0x1a>
 8008ee2:	2302      	movs	r3, #2
 8008ee4:	e013      	b.n	8008f0e <HAL_PCD_SetAddress+0x42>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2201      	movs	r2, #1
 8008eea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	78fa      	ldrb	r2, [r7, #3]
 8008ef2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	78fa      	ldrb	r2, [r7, #3]
 8008efc:	4611      	mov	r1, r2
 8008efe:	4618      	mov	r0, r3
 8008f00:	f00a ff56 	bl	8013db0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008f0c:	2300      	movs	r3, #0
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3708      	adds	r7, #8
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}

08008f16 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008f16:	b580      	push	{r7, lr}
 8008f18:	b084      	sub	sp, #16
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
 8008f1e:	4608      	mov	r0, r1
 8008f20:	4611      	mov	r1, r2
 8008f22:	461a      	mov	r2, r3
 8008f24:	4603      	mov	r3, r0
 8008f26:	70fb      	strb	r3, [r7, #3]
 8008f28:	460b      	mov	r3, r1
 8008f2a:	803b      	strh	r3, [r7, #0]
 8008f2c:	4613      	mov	r3, r2
 8008f2e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008f30:	2300      	movs	r3, #0
 8008f32:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008f34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	da0f      	bge.n	8008f5c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008f3c:	78fb      	ldrb	r3, [r7, #3]
 8008f3e:	f003 020f 	and.w	r2, r3, #15
 8008f42:	4613      	mov	r3, r2
 8008f44:	00db      	lsls	r3, r3, #3
 8008f46:	4413      	add	r3, r2
 8008f48:	009b      	lsls	r3, r3, #2
 8008f4a:	3338      	adds	r3, #56	; 0x38
 8008f4c:	687a      	ldr	r2, [r7, #4]
 8008f4e:	4413      	add	r3, r2
 8008f50:	3304      	adds	r3, #4
 8008f52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2201      	movs	r2, #1
 8008f58:	705a      	strb	r2, [r3, #1]
 8008f5a:	e00f      	b.n	8008f7c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008f5c:	78fb      	ldrb	r3, [r7, #3]
 8008f5e:	f003 020f 	and.w	r2, r3, #15
 8008f62:	4613      	mov	r3, r2
 8008f64:	00db      	lsls	r3, r3, #3
 8008f66:	4413      	add	r3, r2
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	4413      	add	r3, r2
 8008f72:	3304      	adds	r3, #4
 8008f74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008f7c:	78fb      	ldrb	r3, [r7, #3]
 8008f7e:	f003 030f 	and.w	r3, r3, #15
 8008f82:	b2da      	uxtb	r2, r3
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008f88:	883a      	ldrh	r2, [r7, #0]
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	78ba      	ldrb	r2, [r7, #2]
 8008f92:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	785b      	ldrb	r3, [r3, #1]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d004      	beq.n	8008fa6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	b29a      	uxth	r2, r3
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008fa6:	78bb      	ldrb	r3, [r7, #2]
 8008fa8:	2b02      	cmp	r3, #2
 8008faa:	d102      	bne.n	8008fb2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2200      	movs	r2, #0
 8008fb0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d101      	bne.n	8008fc0 <HAL_PCD_EP_Open+0xaa>
 8008fbc:	2302      	movs	r3, #2
 8008fbe:	e00e      	b.n	8008fde <HAL_PCD_EP_Open+0xc8>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	68f9      	ldr	r1, [r7, #12]
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f00a f8d6 	bl	8013180 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8008fdc:	7afb      	ldrb	r3, [r7, #11]
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3710      	adds	r7, #16
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}

08008fe6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008fe6:	b580      	push	{r7, lr}
 8008fe8:	b084      	sub	sp, #16
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	6078      	str	r0, [r7, #4]
 8008fee:	460b      	mov	r3, r1
 8008ff0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008ff2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	da0f      	bge.n	800901a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008ffa:	78fb      	ldrb	r3, [r7, #3]
 8008ffc:	f003 020f 	and.w	r2, r3, #15
 8009000:	4613      	mov	r3, r2
 8009002:	00db      	lsls	r3, r3, #3
 8009004:	4413      	add	r3, r2
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	3338      	adds	r3, #56	; 0x38
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	4413      	add	r3, r2
 800900e:	3304      	adds	r3, #4
 8009010:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	2201      	movs	r2, #1
 8009016:	705a      	strb	r2, [r3, #1]
 8009018:	e00f      	b.n	800903a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800901a:	78fb      	ldrb	r3, [r7, #3]
 800901c:	f003 020f 	and.w	r2, r3, #15
 8009020:	4613      	mov	r3, r2
 8009022:	00db      	lsls	r3, r3, #3
 8009024:	4413      	add	r3, r2
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800902c:	687a      	ldr	r2, [r7, #4]
 800902e:	4413      	add	r3, r2
 8009030:	3304      	adds	r3, #4
 8009032:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2200      	movs	r2, #0
 8009038:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800903a:	78fb      	ldrb	r3, [r7, #3]
 800903c:	f003 030f 	and.w	r3, r3, #15
 8009040:	b2da      	uxtb	r2, r3
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800904c:	2b01      	cmp	r3, #1
 800904e:	d101      	bne.n	8009054 <HAL_PCD_EP_Close+0x6e>
 8009050:	2302      	movs	r3, #2
 8009052:	e00e      	b.n	8009072 <HAL_PCD_EP_Close+0x8c>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2201      	movs	r2, #1
 8009058:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	68f9      	ldr	r1, [r7, #12]
 8009062:	4618      	mov	r0, r3
 8009064:	f00a f914 	bl	8013290 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8009070:	2300      	movs	r3, #0
}
 8009072:	4618      	mov	r0, r3
 8009074:	3710      	adds	r7, #16
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}

0800907a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800907a:	b580      	push	{r7, lr}
 800907c:	b086      	sub	sp, #24
 800907e:	af00      	add	r7, sp, #0
 8009080:	60f8      	str	r0, [r7, #12]
 8009082:	607a      	str	r2, [r7, #4]
 8009084:	603b      	str	r3, [r7, #0]
 8009086:	460b      	mov	r3, r1
 8009088:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800908a:	7afb      	ldrb	r3, [r7, #11]
 800908c:	f003 020f 	and.w	r2, r3, #15
 8009090:	4613      	mov	r3, r2
 8009092:	00db      	lsls	r3, r3, #3
 8009094:	4413      	add	r3, r2
 8009096:	009b      	lsls	r3, r3, #2
 8009098:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800909c:	68fa      	ldr	r2, [r7, #12]
 800909e:	4413      	add	r3, r2
 80090a0:	3304      	adds	r3, #4
 80090a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	687a      	ldr	r2, [r7, #4]
 80090a8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	683a      	ldr	r2, [r7, #0]
 80090ae:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	2200      	movs	r2, #0
 80090b4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	2200      	movs	r2, #0
 80090ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80090bc:	7afb      	ldrb	r3, [r7, #11]
 80090be:	f003 030f 	and.w	r3, r3, #15
 80090c2:	b2da      	uxtb	r2, r3
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d102      	bne.n	80090d6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	6818      	ldr	r0, [r3, #0]
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	b2db      	uxtb	r3, r3
 80090e0:	461a      	mov	r2, r3
 80090e2:	6979      	ldr	r1, [r7, #20]
 80090e4:	f00a f9b0 	bl	8013448 <USB_EPStartXfer>

  return HAL_OK;
 80090e8:	2300      	movs	r3, #0
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3718      	adds	r7, #24
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}

080090f2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80090f2:	b480      	push	{r7}
 80090f4:	b083      	sub	sp, #12
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
 80090fa:	460b      	mov	r3, r1
 80090fc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80090fe:	78fb      	ldrb	r3, [r7, #3]
 8009100:	f003 020f 	and.w	r2, r3, #15
 8009104:	6879      	ldr	r1, [r7, #4]
 8009106:	4613      	mov	r3, r2
 8009108:	00db      	lsls	r3, r3, #3
 800910a:	4413      	add	r3, r2
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	440b      	add	r3, r1
 8009110:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8009114:	681b      	ldr	r3, [r3, #0]
}
 8009116:	4618      	mov	r0, r3
 8009118:	370c      	adds	r7, #12
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr

08009122 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009122:	b580      	push	{r7, lr}
 8009124:	b086      	sub	sp, #24
 8009126:	af00      	add	r7, sp, #0
 8009128:	60f8      	str	r0, [r7, #12]
 800912a:	607a      	str	r2, [r7, #4]
 800912c:	603b      	str	r3, [r7, #0]
 800912e:	460b      	mov	r3, r1
 8009130:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009132:	7afb      	ldrb	r3, [r7, #11]
 8009134:	f003 020f 	and.w	r2, r3, #15
 8009138:	4613      	mov	r3, r2
 800913a:	00db      	lsls	r3, r3, #3
 800913c:	4413      	add	r3, r2
 800913e:	009b      	lsls	r3, r3, #2
 8009140:	3338      	adds	r3, #56	; 0x38
 8009142:	68fa      	ldr	r2, [r7, #12]
 8009144:	4413      	add	r3, r2
 8009146:	3304      	adds	r3, #4
 8009148:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	687a      	ldr	r2, [r7, #4]
 800914e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	683a      	ldr	r2, [r7, #0]
 8009154:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	2200      	movs	r2, #0
 800915a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	2201      	movs	r2, #1
 8009160:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009162:	7afb      	ldrb	r3, [r7, #11]
 8009164:	f003 030f 	and.w	r3, r3, #15
 8009168:	b2da      	uxtb	r2, r3
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	68db      	ldr	r3, [r3, #12]
 8009172:	2b01      	cmp	r3, #1
 8009174:	d102      	bne.n	800917c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009176:	687a      	ldr	r2, [r7, #4]
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	6818      	ldr	r0, [r3, #0]
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	b2db      	uxtb	r3, r3
 8009186:	461a      	mov	r2, r3
 8009188:	6979      	ldr	r1, [r7, #20]
 800918a:	f00a f95d 	bl	8013448 <USB_EPStartXfer>

  return HAL_OK;
 800918e:	2300      	movs	r3, #0
}
 8009190:	4618      	mov	r0, r3
 8009192:	3718      	adds	r7, #24
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	460b      	mov	r3, r1
 80091a2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80091a4:	78fb      	ldrb	r3, [r7, #3]
 80091a6:	f003 020f 	and.w	r2, r3, #15
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d901      	bls.n	80091b6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80091b2:	2301      	movs	r3, #1
 80091b4:	e050      	b.n	8009258 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80091b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	da0f      	bge.n	80091de <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80091be:	78fb      	ldrb	r3, [r7, #3]
 80091c0:	f003 020f 	and.w	r2, r3, #15
 80091c4:	4613      	mov	r3, r2
 80091c6:	00db      	lsls	r3, r3, #3
 80091c8:	4413      	add	r3, r2
 80091ca:	009b      	lsls	r3, r3, #2
 80091cc:	3338      	adds	r3, #56	; 0x38
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	4413      	add	r3, r2
 80091d2:	3304      	adds	r3, #4
 80091d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2201      	movs	r2, #1
 80091da:	705a      	strb	r2, [r3, #1]
 80091dc:	e00d      	b.n	80091fa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80091de:	78fa      	ldrb	r2, [r7, #3]
 80091e0:	4613      	mov	r3, r2
 80091e2:	00db      	lsls	r3, r3, #3
 80091e4:	4413      	add	r3, r2
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	4413      	add	r3, r2
 80091f0:	3304      	adds	r3, #4
 80091f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2200      	movs	r2, #0
 80091f8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2201      	movs	r2, #1
 80091fe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009200:	78fb      	ldrb	r3, [r7, #3]
 8009202:	f003 030f 	and.w	r3, r3, #15
 8009206:	b2da      	uxtb	r2, r3
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009212:	2b01      	cmp	r3, #1
 8009214:	d101      	bne.n	800921a <HAL_PCD_EP_SetStall+0x82>
 8009216:	2302      	movs	r3, #2
 8009218:	e01e      	b.n	8009258 <HAL_PCD_EP_SetStall+0xc0>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2201      	movs	r2, #1
 800921e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	68f9      	ldr	r1, [r7, #12]
 8009228:	4618      	mov	r0, r3
 800922a:	f00a fced 	bl	8013c08 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800922e:	78fb      	ldrb	r3, [r7, #3]
 8009230:	f003 030f 	and.w	r3, r3, #15
 8009234:	2b00      	cmp	r3, #0
 8009236:	d10a      	bne.n	800924e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6818      	ldr	r0, [r3, #0]
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	68db      	ldr	r3, [r3, #12]
 8009240:	b2d9      	uxtb	r1, r3
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009248:	461a      	mov	r2, r3
 800924a:	f00a fedf 	bl	801400c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2200      	movs	r2, #0
 8009252:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009256:	2300      	movs	r3, #0
}
 8009258:	4618      	mov	r0, r3
 800925a:	3710      	adds	r7, #16
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b084      	sub	sp, #16
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	460b      	mov	r3, r1
 800926a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800926c:	78fb      	ldrb	r3, [r7, #3]
 800926e:	f003 020f 	and.w	r2, r3, #15
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	429a      	cmp	r2, r3
 8009278:	d901      	bls.n	800927e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800927a:	2301      	movs	r3, #1
 800927c:	e042      	b.n	8009304 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800927e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009282:	2b00      	cmp	r3, #0
 8009284:	da0f      	bge.n	80092a6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009286:	78fb      	ldrb	r3, [r7, #3]
 8009288:	f003 020f 	and.w	r2, r3, #15
 800928c:	4613      	mov	r3, r2
 800928e:	00db      	lsls	r3, r3, #3
 8009290:	4413      	add	r3, r2
 8009292:	009b      	lsls	r3, r3, #2
 8009294:	3338      	adds	r3, #56	; 0x38
 8009296:	687a      	ldr	r2, [r7, #4]
 8009298:	4413      	add	r3, r2
 800929a:	3304      	adds	r3, #4
 800929c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2201      	movs	r2, #1
 80092a2:	705a      	strb	r2, [r3, #1]
 80092a4:	e00f      	b.n	80092c6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80092a6:	78fb      	ldrb	r3, [r7, #3]
 80092a8:	f003 020f 	and.w	r2, r3, #15
 80092ac:	4613      	mov	r3, r2
 80092ae:	00db      	lsls	r3, r3, #3
 80092b0:	4413      	add	r3, r2
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	4413      	add	r3, r2
 80092bc:	3304      	adds	r3, #4
 80092be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2200      	movs	r2, #0
 80092c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2200      	movs	r2, #0
 80092ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80092cc:	78fb      	ldrb	r3, [r7, #3]
 80092ce:	f003 030f 	and.w	r3, r3, #15
 80092d2:	b2da      	uxtb	r2, r3
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d101      	bne.n	80092e6 <HAL_PCD_EP_ClrStall+0x86>
 80092e2:	2302      	movs	r3, #2
 80092e4:	e00e      	b.n	8009304 <HAL_PCD_EP_ClrStall+0xa4>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2201      	movs	r2, #1
 80092ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	68f9      	ldr	r1, [r7, #12]
 80092f4:	4618      	mov	r0, r3
 80092f6:	f00a fcf5 	bl	8013ce4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2200      	movs	r2, #0
 80092fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009302:	2300      	movs	r3, #0
}
 8009304:	4618      	mov	r0, r3
 8009306:	3710      	adds	r7, #16
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b084      	sub	sp, #16
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	460b      	mov	r3, r1
 8009316:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009318:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800931c:	2b00      	cmp	r3, #0
 800931e:	da0c      	bge.n	800933a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009320:	78fb      	ldrb	r3, [r7, #3]
 8009322:	f003 020f 	and.w	r2, r3, #15
 8009326:	4613      	mov	r3, r2
 8009328:	00db      	lsls	r3, r3, #3
 800932a:	4413      	add	r3, r2
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	3338      	adds	r3, #56	; 0x38
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	4413      	add	r3, r2
 8009334:	3304      	adds	r3, #4
 8009336:	60fb      	str	r3, [r7, #12]
 8009338:	e00c      	b.n	8009354 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800933a:	78fb      	ldrb	r3, [r7, #3]
 800933c:	f003 020f 	and.w	r2, r3, #15
 8009340:	4613      	mov	r3, r2
 8009342:	00db      	lsls	r3, r3, #3
 8009344:	4413      	add	r3, r2
 8009346:	009b      	lsls	r3, r3, #2
 8009348:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800934c:	687a      	ldr	r2, [r7, #4]
 800934e:	4413      	add	r3, r2
 8009350:	3304      	adds	r3, #4
 8009352:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	68f9      	ldr	r1, [r7, #12]
 800935a:	4618      	mov	r0, r3
 800935c:	f00a fb14 	bl	8013988 <USB_EPStopXfer>
 8009360:	4603      	mov	r3, r0
 8009362:	72fb      	strb	r3, [r7, #11]

  return ret;
 8009364:	7afb      	ldrb	r3, [r7, #11]
}
 8009366:	4618      	mov	r0, r3
 8009368:	3710      	adds	r7, #16
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}

0800936e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800936e:	b580      	push	{r7, lr}
 8009370:	b08a      	sub	sp, #40	; 0x28
 8009372:	af02      	add	r7, sp, #8
 8009374:	6078      	str	r0, [r7, #4]
 8009376:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009382:	683a      	ldr	r2, [r7, #0]
 8009384:	4613      	mov	r3, r2
 8009386:	00db      	lsls	r3, r3, #3
 8009388:	4413      	add	r3, r2
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	3338      	adds	r3, #56	; 0x38
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	4413      	add	r3, r2
 8009392:	3304      	adds	r3, #4
 8009394:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	695a      	ldr	r2, [r3, #20]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	691b      	ldr	r3, [r3, #16]
 800939e:	429a      	cmp	r2, r3
 80093a0:	d901      	bls.n	80093a6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80093a2:	2301      	movs	r3, #1
 80093a4:	e06c      	b.n	8009480 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	691a      	ldr	r2, [r3, #16]
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	695b      	ldr	r3, [r3, #20]
 80093ae:	1ad3      	subs	r3, r2, r3
 80093b0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	689b      	ldr	r3, [r3, #8]
 80093b6:	69fa      	ldr	r2, [r7, #28]
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d902      	bls.n	80093c2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	689b      	ldr	r3, [r3, #8]
 80093c0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80093c2:	69fb      	ldr	r3, [r7, #28]
 80093c4:	3303      	adds	r3, #3
 80093c6:	089b      	lsrs	r3, r3, #2
 80093c8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80093ca:	e02b      	b.n	8009424 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	691a      	ldr	r2, [r3, #16]
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	695b      	ldr	r3, [r3, #20]
 80093d4:	1ad3      	subs	r3, r2, r3
 80093d6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	69fa      	ldr	r2, [r7, #28]
 80093de:	429a      	cmp	r2, r3
 80093e0:	d902      	bls.n	80093e8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	689b      	ldr	r3, [r3, #8]
 80093e6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80093e8:	69fb      	ldr	r3, [r7, #28]
 80093ea:	3303      	adds	r3, #3
 80093ec:	089b      	lsrs	r3, r3, #2
 80093ee:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	68d9      	ldr	r1, [r3, #12]
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	b2da      	uxtb	r2, r3
 80093f8:	69fb      	ldr	r3, [r7, #28]
 80093fa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009400:	b2db      	uxtb	r3, r3
 8009402:	9300      	str	r3, [sp, #0]
 8009404:	4603      	mov	r3, r0
 8009406:	6978      	ldr	r0, [r7, #20]
 8009408:	f00a fb68 	bl	8013adc <USB_WritePacket>

    ep->xfer_buff  += len;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	68da      	ldr	r2, [r3, #12]
 8009410:	69fb      	ldr	r3, [r7, #28]
 8009412:	441a      	add	r2, r3
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	695a      	ldr	r2, [r3, #20]
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	441a      	add	r2, r3
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	015a      	lsls	r2, r3, #5
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	4413      	add	r3, r2
 800942c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009430:	699b      	ldr	r3, [r3, #24]
 8009432:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009434:	69ba      	ldr	r2, [r7, #24]
 8009436:	429a      	cmp	r2, r3
 8009438:	d809      	bhi.n	800944e <PCD_WriteEmptyTxFifo+0xe0>
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	695a      	ldr	r2, [r3, #20]
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009442:	429a      	cmp	r2, r3
 8009444:	d203      	bcs.n	800944e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	691b      	ldr	r3, [r3, #16]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d1be      	bne.n	80093cc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	691a      	ldr	r2, [r3, #16]
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	695b      	ldr	r3, [r3, #20]
 8009456:	429a      	cmp	r2, r3
 8009458:	d811      	bhi.n	800947e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	f003 030f 	and.w	r3, r3, #15
 8009460:	2201      	movs	r2, #1
 8009462:	fa02 f303 	lsl.w	r3, r2, r3
 8009466:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800946e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	43db      	mvns	r3, r3
 8009474:	6939      	ldr	r1, [r7, #16]
 8009476:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800947a:	4013      	ands	r3, r2
 800947c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800947e:	2300      	movs	r3, #0
}
 8009480:	4618      	mov	r0, r3
 8009482:	3720      	adds	r7, #32
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b088      	sub	sp, #32
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009498:	69fb      	ldr	r3, [r7, #28]
 800949a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800949c:	69fb      	ldr	r3, [r7, #28]
 800949e:	333c      	adds	r3, #60	; 0x3c
 80094a0:	3304      	adds	r3, #4
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	015a      	lsls	r2, r3, #5
 80094aa:	69bb      	ldr	r3, [r7, #24]
 80094ac:	4413      	add	r3, r2
 80094ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	d17b      	bne.n	80095b6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	f003 0308 	and.w	r3, r3, #8
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d015      	beq.n	80094f4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	4a61      	ldr	r2, [pc, #388]	; (8009650 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	f240 80b9 	bls.w	8009644 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80094d8:	2b00      	cmp	r3, #0
 80094da:	f000 80b3 	beq.w	8009644 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	015a      	lsls	r2, r3, #5
 80094e2:	69bb      	ldr	r3, [r7, #24]
 80094e4:	4413      	add	r3, r2
 80094e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094ea:	461a      	mov	r2, r3
 80094ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094f0:	6093      	str	r3, [r2, #8]
 80094f2:	e0a7      	b.n	8009644 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	f003 0320 	and.w	r3, r3, #32
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d009      	beq.n	8009512 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	015a      	lsls	r2, r3, #5
 8009502:	69bb      	ldr	r3, [r7, #24]
 8009504:	4413      	add	r3, r2
 8009506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800950a:	461a      	mov	r2, r3
 800950c:	2320      	movs	r3, #32
 800950e:	6093      	str	r3, [r2, #8]
 8009510:	e098      	b.n	8009644 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009518:	2b00      	cmp	r3, #0
 800951a:	f040 8093 	bne.w	8009644 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	4a4b      	ldr	r2, [pc, #300]	; (8009650 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d90f      	bls.n	8009546 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800952c:	2b00      	cmp	r3, #0
 800952e:	d00a      	beq.n	8009546 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	015a      	lsls	r2, r3, #5
 8009534:	69bb      	ldr	r3, [r7, #24]
 8009536:	4413      	add	r3, r2
 8009538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800953c:	461a      	mov	r2, r3
 800953e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009542:	6093      	str	r3, [r2, #8]
 8009544:	e07e      	b.n	8009644 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8009546:	683a      	ldr	r2, [r7, #0]
 8009548:	4613      	mov	r3, r2
 800954a:	00db      	lsls	r3, r3, #3
 800954c:	4413      	add	r3, r2
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009554:	687a      	ldr	r2, [r7, #4]
 8009556:	4413      	add	r3, r2
 8009558:	3304      	adds	r3, #4
 800955a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	6a1a      	ldr	r2, [r3, #32]
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	0159      	lsls	r1, r3, #5
 8009564:	69bb      	ldr	r3, [r7, #24]
 8009566:	440b      	add	r3, r1
 8009568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800956c:	691b      	ldr	r3, [r3, #16]
 800956e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009572:	1ad2      	subs	r2, r2, r3
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d114      	bne.n	80095a8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	691b      	ldr	r3, [r3, #16]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d109      	bne.n	800959a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6818      	ldr	r0, [r3, #0]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009590:	461a      	mov	r2, r3
 8009592:	2101      	movs	r1, #1
 8009594:	f00a fd3a 	bl	801400c <USB_EP0_OutStart>
 8009598:	e006      	b.n	80095a8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	68da      	ldr	r2, [r3, #12]
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	695b      	ldr	r3, [r3, #20]
 80095a2:	441a      	add	r2, r3
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	b2db      	uxtb	r3, r3
 80095ac:	4619      	mov	r1, r3
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f00d faa0 	bl	8016af4 <HAL_PCD_DataOutStageCallback>
 80095b4:	e046      	b.n	8009644 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	4a26      	ldr	r2, [pc, #152]	; (8009654 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d124      	bne.n	8009608 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d00a      	beq.n	80095de <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	015a      	lsls	r2, r3, #5
 80095cc:	69bb      	ldr	r3, [r7, #24]
 80095ce:	4413      	add	r3, r2
 80095d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095d4:	461a      	mov	r2, r3
 80095d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095da:	6093      	str	r3, [r2, #8]
 80095dc:	e032      	b.n	8009644 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	f003 0320 	and.w	r3, r3, #32
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d008      	beq.n	80095fa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	015a      	lsls	r2, r3, #5
 80095ec:	69bb      	ldr	r3, [r7, #24]
 80095ee:	4413      	add	r3, r2
 80095f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095f4:	461a      	mov	r2, r3
 80095f6:	2320      	movs	r3, #32
 80095f8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	4619      	mov	r1, r3
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f00d fa77 	bl	8016af4 <HAL_PCD_DataOutStageCallback>
 8009606:	e01d      	b.n	8009644 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d114      	bne.n	8009638 <PCD_EP_OutXfrComplete_int+0x1b0>
 800960e:	6879      	ldr	r1, [r7, #4]
 8009610:	683a      	ldr	r2, [r7, #0]
 8009612:	4613      	mov	r3, r2
 8009614:	00db      	lsls	r3, r3, #3
 8009616:	4413      	add	r3, r2
 8009618:	009b      	lsls	r3, r3, #2
 800961a:	440b      	add	r3, r1
 800961c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d108      	bne.n	8009638 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6818      	ldr	r0, [r3, #0]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009630:	461a      	mov	r2, r3
 8009632:	2100      	movs	r1, #0
 8009634:	f00a fcea 	bl	801400c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	b2db      	uxtb	r3, r3
 800963c:	4619      	mov	r1, r3
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f00d fa58 	bl	8016af4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009644:	2300      	movs	r3, #0
}
 8009646:	4618      	mov	r0, r3
 8009648:	3720      	adds	r7, #32
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
 800964e:	bf00      	nop
 8009650:	4f54300a 	.word	0x4f54300a
 8009654:	4f54310a 	.word	0x4f54310a

08009658 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b086      	sub	sp, #24
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	333c      	adds	r3, #60	; 0x3c
 8009670:	3304      	adds	r3, #4
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	015a      	lsls	r2, r3, #5
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	4413      	add	r3, r2
 800967e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009682:	689b      	ldr	r3, [r3, #8]
 8009684:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	4a15      	ldr	r2, [pc, #84]	; (80096e0 <PCD_EP_OutSetupPacket_int+0x88>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d90e      	bls.n	80096ac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009694:	2b00      	cmp	r3, #0
 8009696:	d009      	beq.n	80096ac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	015a      	lsls	r2, r3, #5
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	4413      	add	r3, r2
 80096a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096a4:	461a      	mov	r2, r3
 80096a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096aa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f00d fa0f 	bl	8016ad0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	4a0a      	ldr	r2, [pc, #40]	; (80096e0 <PCD_EP_OutSetupPacket_int+0x88>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d90c      	bls.n	80096d4 <PCD_EP_OutSetupPacket_int+0x7c>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	68db      	ldr	r3, [r3, #12]
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d108      	bne.n	80096d4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6818      	ldr	r0, [r3, #0]
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80096cc:	461a      	mov	r2, r3
 80096ce:	2101      	movs	r1, #1
 80096d0:	f00a fc9c 	bl	801400c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80096d4:	2300      	movs	r3, #0
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3718      	adds	r7, #24
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
 80096de:	bf00      	nop
 80096e0:	4f54300a 	.word	0x4f54300a

080096e4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b085      	sub	sp, #20
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	460b      	mov	r3, r1
 80096ee:	70fb      	strb	r3, [r7, #3]
 80096f0:	4613      	mov	r3, r2
 80096f2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096fa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80096fc:	78fb      	ldrb	r3, [r7, #3]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d107      	bne.n	8009712 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009702:	883b      	ldrh	r3, [r7, #0]
 8009704:	0419      	lsls	r1, r3, #16
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	68ba      	ldr	r2, [r7, #8]
 800970c:	430a      	orrs	r2, r1
 800970e:	629a      	str	r2, [r3, #40]	; 0x28
 8009710:	e028      	b.n	8009764 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009718:	0c1b      	lsrs	r3, r3, #16
 800971a:	68ba      	ldr	r2, [r7, #8]
 800971c:	4413      	add	r3, r2
 800971e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009720:	2300      	movs	r3, #0
 8009722:	73fb      	strb	r3, [r7, #15]
 8009724:	e00d      	b.n	8009742 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681a      	ldr	r2, [r3, #0]
 800972a:	7bfb      	ldrb	r3, [r7, #15]
 800972c:	3340      	adds	r3, #64	; 0x40
 800972e:	009b      	lsls	r3, r3, #2
 8009730:	4413      	add	r3, r2
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	0c1b      	lsrs	r3, r3, #16
 8009736:	68ba      	ldr	r2, [r7, #8]
 8009738:	4413      	add	r3, r2
 800973a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800973c:	7bfb      	ldrb	r3, [r7, #15]
 800973e:	3301      	adds	r3, #1
 8009740:	73fb      	strb	r3, [r7, #15]
 8009742:	7bfa      	ldrb	r2, [r7, #15]
 8009744:	78fb      	ldrb	r3, [r7, #3]
 8009746:	3b01      	subs	r3, #1
 8009748:	429a      	cmp	r2, r3
 800974a:	d3ec      	bcc.n	8009726 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800974c:	883b      	ldrh	r3, [r7, #0]
 800974e:	0418      	lsls	r0, r3, #16
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6819      	ldr	r1, [r3, #0]
 8009754:	78fb      	ldrb	r3, [r7, #3]
 8009756:	3b01      	subs	r3, #1
 8009758:	68ba      	ldr	r2, [r7, #8]
 800975a:	4302      	orrs	r2, r0
 800975c:	3340      	adds	r3, #64	; 0x40
 800975e:	009b      	lsls	r3, r3, #2
 8009760:	440b      	add	r3, r1
 8009762:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009764:	2300      	movs	r3, #0
}
 8009766:	4618      	mov	r0, r3
 8009768:	3714      	adds	r7, #20
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr

08009772 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009772:	b480      	push	{r7}
 8009774:	b083      	sub	sp, #12
 8009776:	af00      	add	r7, sp, #0
 8009778:	6078      	str	r0, [r7, #4]
 800977a:	460b      	mov	r3, r1
 800977c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	887a      	ldrh	r2, [r7, #2]
 8009784:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009786:	2300      	movs	r3, #0
}
 8009788:	4618      	mov	r0, r3
 800978a:	370c      	adds	r7, #12
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009794:	b480      	push	{r7}
 8009796:	b085      	sub	sp, #20
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2201      	movs	r2, #1
 80097a6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	699b      	ldr	r3, [r3, #24]
 80097b6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80097c2:	4b05      	ldr	r3, [pc, #20]	; (80097d8 <HAL_PCDEx_ActivateLPM+0x44>)
 80097c4:	4313      	orrs	r3, r2
 80097c6:	68fa      	ldr	r2, [r7, #12]
 80097c8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80097ca:	2300      	movs	r3, #0
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	3714      	adds	r7, #20
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr
 80097d8:	10000003 	.word	0x10000003

080097dc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80097dc:	b480      	push	{r7}
 80097de:	b083      	sub	sp, #12
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	460b      	mov	r3, r1
 80097e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80097e8:	bf00      	nop
 80097ea:	370c      	adds	r7, #12
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b084      	sub	sp, #16
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80097fc:	4b19      	ldr	r3, [pc, #100]	; (8009864 <HAL_PWREx_ConfigSupply+0x70>)
 80097fe:	68db      	ldr	r3, [r3, #12]
 8009800:	f003 0304 	and.w	r3, r3, #4
 8009804:	2b04      	cmp	r3, #4
 8009806:	d00a      	beq.n	800981e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009808:	4b16      	ldr	r3, [pc, #88]	; (8009864 <HAL_PWREx_ConfigSupply+0x70>)
 800980a:	68db      	ldr	r3, [r3, #12]
 800980c:	f003 0307 	and.w	r3, r3, #7
 8009810:	687a      	ldr	r2, [r7, #4]
 8009812:	429a      	cmp	r2, r3
 8009814:	d001      	beq.n	800981a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009816:	2301      	movs	r3, #1
 8009818:	e01f      	b.n	800985a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800981a:	2300      	movs	r3, #0
 800981c:	e01d      	b.n	800985a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800981e:	4b11      	ldr	r3, [pc, #68]	; (8009864 <HAL_PWREx_ConfigSupply+0x70>)
 8009820:	68db      	ldr	r3, [r3, #12]
 8009822:	f023 0207 	bic.w	r2, r3, #7
 8009826:	490f      	ldr	r1, [pc, #60]	; (8009864 <HAL_PWREx_ConfigSupply+0x70>)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	4313      	orrs	r3, r2
 800982c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800982e:	f7fa f90f 	bl	8003a50 <HAL_GetTick>
 8009832:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009834:	e009      	b.n	800984a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009836:	f7fa f90b 	bl	8003a50 <HAL_GetTick>
 800983a:	4602      	mov	r2, r0
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	1ad3      	subs	r3, r2, r3
 8009840:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009844:	d901      	bls.n	800984a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009846:	2301      	movs	r3, #1
 8009848:	e007      	b.n	800985a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800984a:	4b06      	ldr	r3, [pc, #24]	; (8009864 <HAL_PWREx_ConfigSupply+0x70>)
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009856:	d1ee      	bne.n	8009836 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009858:	2300      	movs	r3, #0
}
 800985a:	4618      	mov	r0, r3
 800985c:	3710      	adds	r7, #16
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	58024800 	.word	0x58024800

08009868 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8009868:	b480      	push	{r7}
 800986a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800986c:	4b05      	ldr	r3, [pc, #20]	; (8009884 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800986e:	68db      	ldr	r3, [r3, #12]
 8009870:	4a04      	ldr	r2, [pc, #16]	; (8009884 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009872:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009876:	60d3      	str	r3, [r2, #12]
}
 8009878:	bf00      	nop
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr
 8009882:	bf00      	nop
 8009884:	58024800 	.word	0x58024800

08009888 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b08c      	sub	sp, #48	; 0x30
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d101      	bne.n	800989a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009896:	2301      	movs	r3, #1
 8009898:	e3c8      	b.n	800a02c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f003 0301 	and.w	r3, r3, #1
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	f000 8087 	beq.w	80099b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80098a8:	4b88      	ldr	r3, [pc, #544]	; (8009acc <HAL_RCC_OscConfig+0x244>)
 80098aa:	691b      	ldr	r3, [r3, #16]
 80098ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80098b2:	4b86      	ldr	r3, [pc, #536]	; (8009acc <HAL_RCC_OscConfig+0x244>)
 80098b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098b6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80098b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ba:	2b10      	cmp	r3, #16
 80098bc:	d007      	beq.n	80098ce <HAL_RCC_OscConfig+0x46>
 80098be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098c0:	2b18      	cmp	r3, #24
 80098c2:	d110      	bne.n	80098e6 <HAL_RCC_OscConfig+0x5e>
 80098c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c6:	f003 0303 	and.w	r3, r3, #3
 80098ca:	2b02      	cmp	r3, #2
 80098cc:	d10b      	bne.n	80098e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80098ce:	4b7f      	ldr	r3, [pc, #508]	; (8009acc <HAL_RCC_OscConfig+0x244>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d06c      	beq.n	80099b4 <HAL_RCC_OscConfig+0x12c>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d168      	bne.n	80099b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80098e2:	2301      	movs	r3, #1
 80098e4:	e3a2      	b.n	800a02c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098ee:	d106      	bne.n	80098fe <HAL_RCC_OscConfig+0x76>
 80098f0:	4b76      	ldr	r3, [pc, #472]	; (8009acc <HAL_RCC_OscConfig+0x244>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a75      	ldr	r2, [pc, #468]	; (8009acc <HAL_RCC_OscConfig+0x244>)
 80098f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098fa:	6013      	str	r3, [r2, #0]
 80098fc:	e02e      	b.n	800995c <HAL_RCC_OscConfig+0xd4>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	685b      	ldr	r3, [r3, #4]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d10c      	bne.n	8009920 <HAL_RCC_OscConfig+0x98>
 8009906:	4b71      	ldr	r3, [pc, #452]	; (8009acc <HAL_RCC_OscConfig+0x244>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a70      	ldr	r2, [pc, #448]	; (8009acc <HAL_RCC_OscConfig+0x244>)
 800990c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009910:	6013      	str	r3, [r2, #0]
 8009912:	4b6e      	ldr	r3, [pc, #440]	; (8009acc <HAL_RCC_OscConfig+0x244>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4a6d      	ldr	r2, [pc, #436]	; (8009acc <HAL_RCC_OscConfig+0x244>)
 8009918:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800991c:	6013      	str	r3, [r2, #0]
 800991e:	e01d      	b.n	800995c <HAL_RCC_OscConfig+0xd4>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009928:	d10c      	bne.n	8009944 <HAL_RCC_OscConfig+0xbc>
 800992a:	4b68      	ldr	r3, [pc, #416]	; (8009acc <HAL_RCC_OscConfig+0x244>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4a67      	ldr	r2, [pc, #412]	; (8009acc <HAL_RCC_OscConfig+0x244>)
 8009930:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009934:	6013      	str	r3, [r2, #0]
 8009936:	4b65      	ldr	r3, [pc, #404]	; (8009acc <HAL_RCC_OscConfig+0x244>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a64      	ldr	r2, [pc, #400]	; (8009acc <HAL_RCC_OscConfig+0x244>)
 800993c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009940:	6013      	str	r3, [r2, #0]
 8009942:	e00b      	b.n	800995c <HAL_RCC_OscConfig+0xd4>
 8009944:	4b61      	ldr	r3, [pc, #388]	; (8009acc <HAL_RCC_OscConfig+0x244>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a60      	ldr	r2, [pc, #384]	; (8009acc <HAL_RCC_OscConfig+0x244>)
 800994a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800994e:	6013      	str	r3, [r2, #0]
 8009950:	4b5e      	ldr	r3, [pc, #376]	; (8009acc <HAL_RCC_OscConfig+0x244>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4a5d      	ldr	r2, [pc, #372]	; (8009acc <HAL_RCC_OscConfig+0x244>)
 8009956:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800995a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d013      	beq.n	800998c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009964:	f7fa f874 	bl	8003a50 <HAL_GetTick>
 8009968:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800996a:	e008      	b.n	800997e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800996c:	f7fa f870 	bl	8003a50 <HAL_GetTick>
 8009970:	4602      	mov	r2, r0
 8009972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009974:	1ad3      	subs	r3, r2, r3
 8009976:	2b64      	cmp	r3, #100	; 0x64
 8009978:	d901      	bls.n	800997e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800997a:	2303      	movs	r3, #3
 800997c:	e356      	b.n	800a02c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800997e:	4b53      	ldr	r3, [pc, #332]	; (8009acc <HAL_RCC_OscConfig+0x244>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009986:	2b00      	cmp	r3, #0
 8009988:	d0f0      	beq.n	800996c <HAL_RCC_OscConfig+0xe4>
 800998a:	e014      	b.n	80099b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800998c:	f7fa f860 	bl	8003a50 <HAL_GetTick>
 8009990:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009992:	e008      	b.n	80099a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009994:	f7fa f85c 	bl	8003a50 <HAL_GetTick>
 8009998:	4602      	mov	r2, r0
 800999a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999c:	1ad3      	subs	r3, r2, r3
 800999e:	2b64      	cmp	r3, #100	; 0x64
 80099a0:	d901      	bls.n	80099a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80099a2:	2303      	movs	r3, #3
 80099a4:	e342      	b.n	800a02c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80099a6:	4b49      	ldr	r3, [pc, #292]	; (8009acc <HAL_RCC_OscConfig+0x244>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d1f0      	bne.n	8009994 <HAL_RCC_OscConfig+0x10c>
 80099b2:	e000      	b.n	80099b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80099b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f003 0302 	and.w	r3, r3, #2
 80099be:	2b00      	cmp	r3, #0
 80099c0:	f000 808c 	beq.w	8009adc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80099c4:	4b41      	ldr	r3, [pc, #260]	; (8009acc <HAL_RCC_OscConfig+0x244>)
 80099c6:	691b      	ldr	r3, [r3, #16]
 80099c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80099cc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80099ce:	4b3f      	ldr	r3, [pc, #252]	; (8009acc <HAL_RCC_OscConfig+0x244>)
 80099d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099d2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80099d4:	6a3b      	ldr	r3, [r7, #32]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d007      	beq.n	80099ea <HAL_RCC_OscConfig+0x162>
 80099da:	6a3b      	ldr	r3, [r7, #32]
 80099dc:	2b18      	cmp	r3, #24
 80099de:	d137      	bne.n	8009a50 <HAL_RCC_OscConfig+0x1c8>
 80099e0:	69fb      	ldr	r3, [r7, #28]
 80099e2:	f003 0303 	and.w	r3, r3, #3
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d132      	bne.n	8009a50 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80099ea:	4b38      	ldr	r3, [pc, #224]	; (8009acc <HAL_RCC_OscConfig+0x244>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f003 0304 	and.w	r3, r3, #4
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d005      	beq.n	8009a02 <HAL_RCC_OscConfig+0x17a>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	68db      	ldr	r3, [r3, #12]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d101      	bne.n	8009a02 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80099fe:	2301      	movs	r3, #1
 8009a00:	e314      	b.n	800a02c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009a02:	4b32      	ldr	r3, [pc, #200]	; (8009acc <HAL_RCC_OscConfig+0x244>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f023 0219 	bic.w	r2, r3, #25
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	68db      	ldr	r3, [r3, #12]
 8009a0e:	492f      	ldr	r1, [pc, #188]	; (8009acc <HAL_RCC_OscConfig+0x244>)
 8009a10:	4313      	orrs	r3, r2
 8009a12:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a14:	f7fa f81c 	bl	8003a50 <HAL_GetTick>
 8009a18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a1a:	e008      	b.n	8009a2e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a1c:	f7fa f818 	bl	8003a50 <HAL_GetTick>
 8009a20:	4602      	mov	r2, r0
 8009a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a24:	1ad3      	subs	r3, r2, r3
 8009a26:	2b02      	cmp	r3, #2
 8009a28:	d901      	bls.n	8009a2e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8009a2a:	2303      	movs	r3, #3
 8009a2c:	e2fe      	b.n	800a02c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a2e:	4b27      	ldr	r3, [pc, #156]	; (8009acc <HAL_RCC_OscConfig+0x244>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f003 0304 	and.w	r3, r3, #4
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d0f0      	beq.n	8009a1c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a3a:	4b24      	ldr	r3, [pc, #144]	; (8009acc <HAL_RCC_OscConfig+0x244>)
 8009a3c:	685b      	ldr	r3, [r3, #4]
 8009a3e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	691b      	ldr	r3, [r3, #16]
 8009a46:	061b      	lsls	r3, r3, #24
 8009a48:	4920      	ldr	r1, [pc, #128]	; (8009acc <HAL_RCC_OscConfig+0x244>)
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a4e:	e045      	b.n	8009adc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	68db      	ldr	r3, [r3, #12]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d026      	beq.n	8009aa6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009a58:	4b1c      	ldr	r3, [pc, #112]	; (8009acc <HAL_RCC_OscConfig+0x244>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f023 0219 	bic.w	r2, r3, #25
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	68db      	ldr	r3, [r3, #12]
 8009a64:	4919      	ldr	r1, [pc, #100]	; (8009acc <HAL_RCC_OscConfig+0x244>)
 8009a66:	4313      	orrs	r3, r2
 8009a68:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a6a:	f7f9 fff1 	bl	8003a50 <HAL_GetTick>
 8009a6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a70:	e008      	b.n	8009a84 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009a72:	f7f9 ffed 	bl	8003a50 <HAL_GetTick>
 8009a76:	4602      	mov	r2, r0
 8009a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a7a:	1ad3      	subs	r3, r2, r3
 8009a7c:	2b02      	cmp	r3, #2
 8009a7e:	d901      	bls.n	8009a84 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009a80:	2303      	movs	r3, #3
 8009a82:	e2d3      	b.n	800a02c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009a84:	4b11      	ldr	r3, [pc, #68]	; (8009acc <HAL_RCC_OscConfig+0x244>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f003 0304 	and.w	r3, r3, #4
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d0f0      	beq.n	8009a72 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a90:	4b0e      	ldr	r3, [pc, #56]	; (8009acc <HAL_RCC_OscConfig+0x244>)
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	691b      	ldr	r3, [r3, #16]
 8009a9c:	061b      	lsls	r3, r3, #24
 8009a9e:	490b      	ldr	r1, [pc, #44]	; (8009acc <HAL_RCC_OscConfig+0x244>)
 8009aa0:	4313      	orrs	r3, r2
 8009aa2:	604b      	str	r3, [r1, #4]
 8009aa4:	e01a      	b.n	8009adc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009aa6:	4b09      	ldr	r3, [pc, #36]	; (8009acc <HAL_RCC_OscConfig+0x244>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4a08      	ldr	r2, [pc, #32]	; (8009acc <HAL_RCC_OscConfig+0x244>)
 8009aac:	f023 0301 	bic.w	r3, r3, #1
 8009ab0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ab2:	f7f9 ffcd 	bl	8003a50 <HAL_GetTick>
 8009ab6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009ab8:	e00a      	b.n	8009ad0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009aba:	f7f9 ffc9 	bl	8003a50 <HAL_GetTick>
 8009abe:	4602      	mov	r2, r0
 8009ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac2:	1ad3      	subs	r3, r2, r3
 8009ac4:	2b02      	cmp	r3, #2
 8009ac6:	d903      	bls.n	8009ad0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009ac8:	2303      	movs	r3, #3
 8009aca:	e2af      	b.n	800a02c <HAL_RCC_OscConfig+0x7a4>
 8009acc:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009ad0:	4b96      	ldr	r3, [pc, #600]	; (8009d2c <HAL_RCC_OscConfig+0x4a4>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f003 0304 	and.w	r3, r3, #4
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d1ee      	bne.n	8009aba <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f003 0310 	and.w	r3, r3, #16
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d06a      	beq.n	8009bbe <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009ae8:	4b90      	ldr	r3, [pc, #576]	; (8009d2c <HAL_RCC_OscConfig+0x4a4>)
 8009aea:	691b      	ldr	r3, [r3, #16]
 8009aec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009af0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009af2:	4b8e      	ldr	r3, [pc, #568]	; (8009d2c <HAL_RCC_OscConfig+0x4a4>)
 8009af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009af6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009af8:	69bb      	ldr	r3, [r7, #24]
 8009afa:	2b08      	cmp	r3, #8
 8009afc:	d007      	beq.n	8009b0e <HAL_RCC_OscConfig+0x286>
 8009afe:	69bb      	ldr	r3, [r7, #24]
 8009b00:	2b18      	cmp	r3, #24
 8009b02:	d11b      	bne.n	8009b3c <HAL_RCC_OscConfig+0x2b4>
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	f003 0303 	and.w	r3, r3, #3
 8009b0a:	2b01      	cmp	r3, #1
 8009b0c:	d116      	bne.n	8009b3c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009b0e:	4b87      	ldr	r3, [pc, #540]	; (8009d2c <HAL_RCC_OscConfig+0x4a4>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d005      	beq.n	8009b26 <HAL_RCC_OscConfig+0x29e>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	69db      	ldr	r3, [r3, #28]
 8009b1e:	2b80      	cmp	r3, #128	; 0x80
 8009b20:	d001      	beq.n	8009b26 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009b22:	2301      	movs	r3, #1
 8009b24:	e282      	b.n	800a02c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009b26:	4b81      	ldr	r3, [pc, #516]	; (8009d2c <HAL_RCC_OscConfig+0x4a4>)
 8009b28:	68db      	ldr	r3, [r3, #12]
 8009b2a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6a1b      	ldr	r3, [r3, #32]
 8009b32:	061b      	lsls	r3, r3, #24
 8009b34:	497d      	ldr	r1, [pc, #500]	; (8009d2c <HAL_RCC_OscConfig+0x4a4>)
 8009b36:	4313      	orrs	r3, r2
 8009b38:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009b3a:	e040      	b.n	8009bbe <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	69db      	ldr	r3, [r3, #28]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d023      	beq.n	8009b8c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009b44:	4b79      	ldr	r3, [pc, #484]	; (8009d2c <HAL_RCC_OscConfig+0x4a4>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	4a78      	ldr	r2, [pc, #480]	; (8009d2c <HAL_RCC_OscConfig+0x4a4>)
 8009b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b50:	f7f9 ff7e 	bl	8003a50 <HAL_GetTick>
 8009b54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009b56:	e008      	b.n	8009b6a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009b58:	f7f9 ff7a 	bl	8003a50 <HAL_GetTick>
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b60:	1ad3      	subs	r3, r2, r3
 8009b62:	2b02      	cmp	r3, #2
 8009b64:	d901      	bls.n	8009b6a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009b66:	2303      	movs	r3, #3
 8009b68:	e260      	b.n	800a02c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009b6a:	4b70      	ldr	r3, [pc, #448]	; (8009d2c <HAL_RCC_OscConfig+0x4a4>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d0f0      	beq.n	8009b58 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009b76:	4b6d      	ldr	r3, [pc, #436]	; (8009d2c <HAL_RCC_OscConfig+0x4a4>)
 8009b78:	68db      	ldr	r3, [r3, #12]
 8009b7a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6a1b      	ldr	r3, [r3, #32]
 8009b82:	061b      	lsls	r3, r3, #24
 8009b84:	4969      	ldr	r1, [pc, #420]	; (8009d2c <HAL_RCC_OscConfig+0x4a4>)
 8009b86:	4313      	orrs	r3, r2
 8009b88:	60cb      	str	r3, [r1, #12]
 8009b8a:	e018      	b.n	8009bbe <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009b8c:	4b67      	ldr	r3, [pc, #412]	; (8009d2c <HAL_RCC_OscConfig+0x4a4>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	4a66      	ldr	r2, [pc, #408]	; (8009d2c <HAL_RCC_OscConfig+0x4a4>)
 8009b92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b98:	f7f9 ff5a 	bl	8003a50 <HAL_GetTick>
 8009b9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009b9e:	e008      	b.n	8009bb2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009ba0:	f7f9 ff56 	bl	8003a50 <HAL_GetTick>
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba8:	1ad3      	subs	r3, r2, r3
 8009baa:	2b02      	cmp	r3, #2
 8009bac:	d901      	bls.n	8009bb2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8009bae:	2303      	movs	r3, #3
 8009bb0:	e23c      	b.n	800a02c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009bb2:	4b5e      	ldr	r3, [pc, #376]	; (8009d2c <HAL_RCC_OscConfig+0x4a4>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d1f0      	bne.n	8009ba0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f003 0308 	and.w	r3, r3, #8
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d036      	beq.n	8009c38 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	695b      	ldr	r3, [r3, #20]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d019      	beq.n	8009c06 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009bd2:	4b56      	ldr	r3, [pc, #344]	; (8009d2c <HAL_RCC_OscConfig+0x4a4>)
 8009bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bd6:	4a55      	ldr	r2, [pc, #340]	; (8009d2c <HAL_RCC_OscConfig+0x4a4>)
 8009bd8:	f043 0301 	orr.w	r3, r3, #1
 8009bdc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bde:	f7f9 ff37 	bl	8003a50 <HAL_GetTick>
 8009be2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009be4:	e008      	b.n	8009bf8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009be6:	f7f9 ff33 	bl	8003a50 <HAL_GetTick>
 8009bea:	4602      	mov	r2, r0
 8009bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bee:	1ad3      	subs	r3, r2, r3
 8009bf0:	2b02      	cmp	r3, #2
 8009bf2:	d901      	bls.n	8009bf8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009bf4:	2303      	movs	r3, #3
 8009bf6:	e219      	b.n	800a02c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009bf8:	4b4c      	ldr	r3, [pc, #304]	; (8009d2c <HAL_RCC_OscConfig+0x4a4>)
 8009bfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bfc:	f003 0302 	and.w	r3, r3, #2
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d0f0      	beq.n	8009be6 <HAL_RCC_OscConfig+0x35e>
 8009c04:	e018      	b.n	8009c38 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009c06:	4b49      	ldr	r3, [pc, #292]	; (8009d2c <HAL_RCC_OscConfig+0x4a4>)
 8009c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c0a:	4a48      	ldr	r2, [pc, #288]	; (8009d2c <HAL_RCC_OscConfig+0x4a4>)
 8009c0c:	f023 0301 	bic.w	r3, r3, #1
 8009c10:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c12:	f7f9 ff1d 	bl	8003a50 <HAL_GetTick>
 8009c16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009c18:	e008      	b.n	8009c2c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009c1a:	f7f9 ff19 	bl	8003a50 <HAL_GetTick>
 8009c1e:	4602      	mov	r2, r0
 8009c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c22:	1ad3      	subs	r3, r2, r3
 8009c24:	2b02      	cmp	r3, #2
 8009c26:	d901      	bls.n	8009c2c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009c28:	2303      	movs	r3, #3
 8009c2a:	e1ff      	b.n	800a02c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009c2c:	4b3f      	ldr	r3, [pc, #252]	; (8009d2c <HAL_RCC_OscConfig+0x4a4>)
 8009c2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c30:	f003 0302 	and.w	r3, r3, #2
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d1f0      	bne.n	8009c1a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f003 0320 	and.w	r3, r3, #32
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d036      	beq.n	8009cb2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	699b      	ldr	r3, [r3, #24]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d019      	beq.n	8009c80 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009c4c:	4b37      	ldr	r3, [pc, #220]	; (8009d2c <HAL_RCC_OscConfig+0x4a4>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	4a36      	ldr	r2, [pc, #216]	; (8009d2c <HAL_RCC_OscConfig+0x4a4>)
 8009c52:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009c56:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009c58:	f7f9 fefa 	bl	8003a50 <HAL_GetTick>
 8009c5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009c5e:	e008      	b.n	8009c72 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009c60:	f7f9 fef6 	bl	8003a50 <HAL_GetTick>
 8009c64:	4602      	mov	r2, r0
 8009c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c68:	1ad3      	subs	r3, r2, r3
 8009c6a:	2b02      	cmp	r3, #2
 8009c6c:	d901      	bls.n	8009c72 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8009c6e:	2303      	movs	r3, #3
 8009c70:	e1dc      	b.n	800a02c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009c72:	4b2e      	ldr	r3, [pc, #184]	; (8009d2c <HAL_RCC_OscConfig+0x4a4>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d0f0      	beq.n	8009c60 <HAL_RCC_OscConfig+0x3d8>
 8009c7e:	e018      	b.n	8009cb2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009c80:	4b2a      	ldr	r3, [pc, #168]	; (8009d2c <HAL_RCC_OscConfig+0x4a4>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4a29      	ldr	r2, [pc, #164]	; (8009d2c <HAL_RCC_OscConfig+0x4a4>)
 8009c86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c8a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009c8c:	f7f9 fee0 	bl	8003a50 <HAL_GetTick>
 8009c90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009c92:	e008      	b.n	8009ca6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009c94:	f7f9 fedc 	bl	8003a50 <HAL_GetTick>
 8009c98:	4602      	mov	r2, r0
 8009c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9c:	1ad3      	subs	r3, r2, r3
 8009c9e:	2b02      	cmp	r3, #2
 8009ca0:	d901      	bls.n	8009ca6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8009ca2:	2303      	movs	r3, #3
 8009ca4:	e1c2      	b.n	800a02c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009ca6:	4b21      	ldr	r3, [pc, #132]	; (8009d2c <HAL_RCC_OscConfig+0x4a4>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d1f0      	bne.n	8009c94 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f003 0304 	and.w	r3, r3, #4
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	f000 8086 	beq.w	8009dcc <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009cc0:	4b1b      	ldr	r3, [pc, #108]	; (8009d30 <HAL_RCC_OscConfig+0x4a8>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4a1a      	ldr	r2, [pc, #104]	; (8009d30 <HAL_RCC_OscConfig+0x4a8>)
 8009cc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009ccc:	f7f9 fec0 	bl	8003a50 <HAL_GetTick>
 8009cd0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009cd2:	e008      	b.n	8009ce6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009cd4:	f7f9 febc 	bl	8003a50 <HAL_GetTick>
 8009cd8:	4602      	mov	r2, r0
 8009cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cdc:	1ad3      	subs	r3, r2, r3
 8009cde:	2b64      	cmp	r3, #100	; 0x64
 8009ce0:	d901      	bls.n	8009ce6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8009ce2:	2303      	movs	r3, #3
 8009ce4:	e1a2      	b.n	800a02c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009ce6:	4b12      	ldr	r3, [pc, #72]	; (8009d30 <HAL_RCC_OscConfig+0x4a8>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d0f0      	beq.n	8009cd4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	689b      	ldr	r3, [r3, #8]
 8009cf6:	2b01      	cmp	r3, #1
 8009cf8:	d106      	bne.n	8009d08 <HAL_RCC_OscConfig+0x480>
 8009cfa:	4b0c      	ldr	r3, [pc, #48]	; (8009d2c <HAL_RCC_OscConfig+0x4a4>)
 8009cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cfe:	4a0b      	ldr	r2, [pc, #44]	; (8009d2c <HAL_RCC_OscConfig+0x4a4>)
 8009d00:	f043 0301 	orr.w	r3, r3, #1
 8009d04:	6713      	str	r3, [r2, #112]	; 0x70
 8009d06:	e032      	b.n	8009d6e <HAL_RCC_OscConfig+0x4e6>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	689b      	ldr	r3, [r3, #8]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d111      	bne.n	8009d34 <HAL_RCC_OscConfig+0x4ac>
 8009d10:	4b06      	ldr	r3, [pc, #24]	; (8009d2c <HAL_RCC_OscConfig+0x4a4>)
 8009d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d14:	4a05      	ldr	r2, [pc, #20]	; (8009d2c <HAL_RCC_OscConfig+0x4a4>)
 8009d16:	f023 0301 	bic.w	r3, r3, #1
 8009d1a:	6713      	str	r3, [r2, #112]	; 0x70
 8009d1c:	4b03      	ldr	r3, [pc, #12]	; (8009d2c <HAL_RCC_OscConfig+0x4a4>)
 8009d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d20:	4a02      	ldr	r2, [pc, #8]	; (8009d2c <HAL_RCC_OscConfig+0x4a4>)
 8009d22:	f023 0304 	bic.w	r3, r3, #4
 8009d26:	6713      	str	r3, [r2, #112]	; 0x70
 8009d28:	e021      	b.n	8009d6e <HAL_RCC_OscConfig+0x4e6>
 8009d2a:	bf00      	nop
 8009d2c:	58024400 	.word	0x58024400
 8009d30:	58024800 	.word	0x58024800
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	689b      	ldr	r3, [r3, #8]
 8009d38:	2b05      	cmp	r3, #5
 8009d3a:	d10c      	bne.n	8009d56 <HAL_RCC_OscConfig+0x4ce>
 8009d3c:	4b83      	ldr	r3, [pc, #524]	; (8009f4c <HAL_RCC_OscConfig+0x6c4>)
 8009d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d40:	4a82      	ldr	r2, [pc, #520]	; (8009f4c <HAL_RCC_OscConfig+0x6c4>)
 8009d42:	f043 0304 	orr.w	r3, r3, #4
 8009d46:	6713      	str	r3, [r2, #112]	; 0x70
 8009d48:	4b80      	ldr	r3, [pc, #512]	; (8009f4c <HAL_RCC_OscConfig+0x6c4>)
 8009d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d4c:	4a7f      	ldr	r2, [pc, #508]	; (8009f4c <HAL_RCC_OscConfig+0x6c4>)
 8009d4e:	f043 0301 	orr.w	r3, r3, #1
 8009d52:	6713      	str	r3, [r2, #112]	; 0x70
 8009d54:	e00b      	b.n	8009d6e <HAL_RCC_OscConfig+0x4e6>
 8009d56:	4b7d      	ldr	r3, [pc, #500]	; (8009f4c <HAL_RCC_OscConfig+0x6c4>)
 8009d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d5a:	4a7c      	ldr	r2, [pc, #496]	; (8009f4c <HAL_RCC_OscConfig+0x6c4>)
 8009d5c:	f023 0301 	bic.w	r3, r3, #1
 8009d60:	6713      	str	r3, [r2, #112]	; 0x70
 8009d62:	4b7a      	ldr	r3, [pc, #488]	; (8009f4c <HAL_RCC_OscConfig+0x6c4>)
 8009d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d66:	4a79      	ldr	r2, [pc, #484]	; (8009f4c <HAL_RCC_OscConfig+0x6c4>)
 8009d68:	f023 0304 	bic.w	r3, r3, #4
 8009d6c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	689b      	ldr	r3, [r3, #8]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d015      	beq.n	8009da2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d76:	f7f9 fe6b 	bl	8003a50 <HAL_GetTick>
 8009d7a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009d7c:	e00a      	b.n	8009d94 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d7e:	f7f9 fe67 	bl	8003a50 <HAL_GetTick>
 8009d82:	4602      	mov	r2, r0
 8009d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d86:	1ad3      	subs	r3, r2, r3
 8009d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d901      	bls.n	8009d94 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009d90:	2303      	movs	r3, #3
 8009d92:	e14b      	b.n	800a02c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009d94:	4b6d      	ldr	r3, [pc, #436]	; (8009f4c <HAL_RCC_OscConfig+0x6c4>)
 8009d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d98:	f003 0302 	and.w	r3, r3, #2
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d0ee      	beq.n	8009d7e <HAL_RCC_OscConfig+0x4f6>
 8009da0:	e014      	b.n	8009dcc <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009da2:	f7f9 fe55 	bl	8003a50 <HAL_GetTick>
 8009da6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009da8:	e00a      	b.n	8009dc0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009daa:	f7f9 fe51 	bl	8003a50 <HAL_GetTick>
 8009dae:	4602      	mov	r2, r0
 8009db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db2:	1ad3      	subs	r3, r2, r3
 8009db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d901      	bls.n	8009dc0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009dbc:	2303      	movs	r3, #3
 8009dbe:	e135      	b.n	800a02c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009dc0:	4b62      	ldr	r3, [pc, #392]	; (8009f4c <HAL_RCC_OscConfig+0x6c4>)
 8009dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dc4:	f003 0302 	and.w	r3, r3, #2
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d1ee      	bne.n	8009daa <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	f000 812a 	beq.w	800a02a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009dd6:	4b5d      	ldr	r3, [pc, #372]	; (8009f4c <HAL_RCC_OscConfig+0x6c4>)
 8009dd8:	691b      	ldr	r3, [r3, #16]
 8009dda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009dde:	2b18      	cmp	r3, #24
 8009de0:	f000 80ba 	beq.w	8009f58 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009de8:	2b02      	cmp	r3, #2
 8009dea:	f040 8095 	bne.w	8009f18 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009dee:	4b57      	ldr	r3, [pc, #348]	; (8009f4c <HAL_RCC_OscConfig+0x6c4>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a56      	ldr	r2, [pc, #344]	; (8009f4c <HAL_RCC_OscConfig+0x6c4>)
 8009df4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009df8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dfa:	f7f9 fe29 	bl	8003a50 <HAL_GetTick>
 8009dfe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e00:	e008      	b.n	8009e14 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e02:	f7f9 fe25 	bl	8003a50 <HAL_GetTick>
 8009e06:	4602      	mov	r2, r0
 8009e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0a:	1ad3      	subs	r3, r2, r3
 8009e0c:	2b02      	cmp	r3, #2
 8009e0e:	d901      	bls.n	8009e14 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009e10:	2303      	movs	r3, #3
 8009e12:	e10b      	b.n	800a02c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e14:	4b4d      	ldr	r3, [pc, #308]	; (8009f4c <HAL_RCC_OscConfig+0x6c4>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d1f0      	bne.n	8009e02 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009e20:	4b4a      	ldr	r3, [pc, #296]	; (8009f4c <HAL_RCC_OscConfig+0x6c4>)
 8009e22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009e24:	4b4a      	ldr	r3, [pc, #296]	; (8009f50 <HAL_RCC_OscConfig+0x6c8>)
 8009e26:	4013      	ands	r3, r2
 8009e28:	687a      	ldr	r2, [r7, #4]
 8009e2a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009e2c:	687a      	ldr	r2, [r7, #4]
 8009e2e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009e30:	0112      	lsls	r2, r2, #4
 8009e32:	430a      	orrs	r2, r1
 8009e34:	4945      	ldr	r1, [pc, #276]	; (8009f4c <HAL_RCC_OscConfig+0x6c4>)
 8009e36:	4313      	orrs	r3, r2
 8009e38:	628b      	str	r3, [r1, #40]	; 0x28
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e3e:	3b01      	subs	r3, #1
 8009e40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e48:	3b01      	subs	r3, #1
 8009e4a:	025b      	lsls	r3, r3, #9
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	431a      	orrs	r2, r3
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e54:	3b01      	subs	r3, #1
 8009e56:	041b      	lsls	r3, r3, #16
 8009e58:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009e5c:	431a      	orrs	r2, r3
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e62:	3b01      	subs	r3, #1
 8009e64:	061b      	lsls	r3, r3, #24
 8009e66:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009e6a:	4938      	ldr	r1, [pc, #224]	; (8009f4c <HAL_RCC_OscConfig+0x6c4>)
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009e70:	4b36      	ldr	r3, [pc, #216]	; (8009f4c <HAL_RCC_OscConfig+0x6c4>)
 8009e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e74:	4a35      	ldr	r2, [pc, #212]	; (8009f4c <HAL_RCC_OscConfig+0x6c4>)
 8009e76:	f023 0301 	bic.w	r3, r3, #1
 8009e7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009e7c:	4b33      	ldr	r3, [pc, #204]	; (8009f4c <HAL_RCC_OscConfig+0x6c4>)
 8009e7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e80:	4b34      	ldr	r3, [pc, #208]	; (8009f54 <HAL_RCC_OscConfig+0x6cc>)
 8009e82:	4013      	ands	r3, r2
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009e88:	00d2      	lsls	r2, r2, #3
 8009e8a:	4930      	ldr	r1, [pc, #192]	; (8009f4c <HAL_RCC_OscConfig+0x6c4>)
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009e90:	4b2e      	ldr	r3, [pc, #184]	; (8009f4c <HAL_RCC_OscConfig+0x6c4>)
 8009e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e94:	f023 020c 	bic.w	r2, r3, #12
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e9c:	492b      	ldr	r1, [pc, #172]	; (8009f4c <HAL_RCC_OscConfig+0x6c4>)
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009ea2:	4b2a      	ldr	r3, [pc, #168]	; (8009f4c <HAL_RCC_OscConfig+0x6c4>)
 8009ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea6:	f023 0202 	bic.w	r2, r3, #2
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009eae:	4927      	ldr	r1, [pc, #156]	; (8009f4c <HAL_RCC_OscConfig+0x6c4>)
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009eb4:	4b25      	ldr	r3, [pc, #148]	; (8009f4c <HAL_RCC_OscConfig+0x6c4>)
 8009eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb8:	4a24      	ldr	r2, [pc, #144]	; (8009f4c <HAL_RCC_OscConfig+0x6c4>)
 8009eba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ebe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ec0:	4b22      	ldr	r3, [pc, #136]	; (8009f4c <HAL_RCC_OscConfig+0x6c4>)
 8009ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec4:	4a21      	ldr	r2, [pc, #132]	; (8009f4c <HAL_RCC_OscConfig+0x6c4>)
 8009ec6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009eca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009ecc:	4b1f      	ldr	r3, [pc, #124]	; (8009f4c <HAL_RCC_OscConfig+0x6c4>)
 8009ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed0:	4a1e      	ldr	r2, [pc, #120]	; (8009f4c <HAL_RCC_OscConfig+0x6c4>)
 8009ed2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009ed6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009ed8:	4b1c      	ldr	r3, [pc, #112]	; (8009f4c <HAL_RCC_OscConfig+0x6c4>)
 8009eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009edc:	4a1b      	ldr	r2, [pc, #108]	; (8009f4c <HAL_RCC_OscConfig+0x6c4>)
 8009ede:	f043 0301 	orr.w	r3, r3, #1
 8009ee2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009ee4:	4b19      	ldr	r3, [pc, #100]	; (8009f4c <HAL_RCC_OscConfig+0x6c4>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4a18      	ldr	r2, [pc, #96]	; (8009f4c <HAL_RCC_OscConfig+0x6c4>)
 8009eea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009eee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ef0:	f7f9 fdae 	bl	8003a50 <HAL_GetTick>
 8009ef4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009ef6:	e008      	b.n	8009f0a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ef8:	f7f9 fdaa 	bl	8003a50 <HAL_GetTick>
 8009efc:	4602      	mov	r2, r0
 8009efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f00:	1ad3      	subs	r3, r2, r3
 8009f02:	2b02      	cmp	r3, #2
 8009f04:	d901      	bls.n	8009f0a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8009f06:	2303      	movs	r3, #3
 8009f08:	e090      	b.n	800a02c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009f0a:	4b10      	ldr	r3, [pc, #64]	; (8009f4c <HAL_RCC_OscConfig+0x6c4>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d0f0      	beq.n	8009ef8 <HAL_RCC_OscConfig+0x670>
 8009f16:	e088      	b.n	800a02a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f18:	4b0c      	ldr	r3, [pc, #48]	; (8009f4c <HAL_RCC_OscConfig+0x6c4>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4a0b      	ldr	r2, [pc, #44]	; (8009f4c <HAL_RCC_OscConfig+0x6c4>)
 8009f1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009f22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f24:	f7f9 fd94 	bl	8003a50 <HAL_GetTick>
 8009f28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009f2a:	e008      	b.n	8009f3e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f2c:	f7f9 fd90 	bl	8003a50 <HAL_GetTick>
 8009f30:	4602      	mov	r2, r0
 8009f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f34:	1ad3      	subs	r3, r2, r3
 8009f36:	2b02      	cmp	r3, #2
 8009f38:	d901      	bls.n	8009f3e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8009f3a:	2303      	movs	r3, #3
 8009f3c:	e076      	b.n	800a02c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009f3e:	4b03      	ldr	r3, [pc, #12]	; (8009f4c <HAL_RCC_OscConfig+0x6c4>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d1f0      	bne.n	8009f2c <HAL_RCC_OscConfig+0x6a4>
 8009f4a:	e06e      	b.n	800a02a <HAL_RCC_OscConfig+0x7a2>
 8009f4c:	58024400 	.word	0x58024400
 8009f50:	fffffc0c 	.word	0xfffffc0c
 8009f54:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009f58:	4b36      	ldr	r3, [pc, #216]	; (800a034 <HAL_RCC_OscConfig+0x7ac>)
 8009f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f5c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009f5e:	4b35      	ldr	r3, [pc, #212]	; (800a034 <HAL_RCC_OscConfig+0x7ac>)
 8009f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f62:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d031      	beq.n	8009fd0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	f003 0203 	and.w	r2, r3, #3
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f76:	429a      	cmp	r2, r3
 8009f78:	d12a      	bne.n	8009fd0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	091b      	lsrs	r3, r3, #4
 8009f7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d122      	bne.n	8009fd0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f94:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d11a      	bne.n	8009fd0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	0a5b      	lsrs	r3, r3, #9
 8009f9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fa6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d111      	bne.n	8009fd0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	0c1b      	lsrs	r3, r3, #16
 8009fb0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fb8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d108      	bne.n	8009fd0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	0e1b      	lsrs	r3, r3, #24
 8009fc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fca:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d001      	beq.n	8009fd4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	e02b      	b.n	800a02c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009fd4:	4b17      	ldr	r3, [pc, #92]	; (800a034 <HAL_RCC_OscConfig+0x7ac>)
 8009fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fd8:	08db      	lsrs	r3, r3, #3
 8009fda:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009fde:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fe4:	693a      	ldr	r2, [r7, #16]
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	d01f      	beq.n	800a02a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009fea:	4b12      	ldr	r3, [pc, #72]	; (800a034 <HAL_RCC_OscConfig+0x7ac>)
 8009fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fee:	4a11      	ldr	r2, [pc, #68]	; (800a034 <HAL_RCC_OscConfig+0x7ac>)
 8009ff0:	f023 0301 	bic.w	r3, r3, #1
 8009ff4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009ff6:	f7f9 fd2b 	bl	8003a50 <HAL_GetTick>
 8009ffa:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009ffc:	bf00      	nop
 8009ffe:	f7f9 fd27 	bl	8003a50 <HAL_GetTick>
 800a002:	4602      	mov	r2, r0
 800a004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a006:	4293      	cmp	r3, r2
 800a008:	d0f9      	beq.n	8009ffe <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a00a:	4b0a      	ldr	r3, [pc, #40]	; (800a034 <HAL_RCC_OscConfig+0x7ac>)
 800a00c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a00e:	4b0a      	ldr	r3, [pc, #40]	; (800a038 <HAL_RCC_OscConfig+0x7b0>)
 800a010:	4013      	ands	r3, r2
 800a012:	687a      	ldr	r2, [r7, #4]
 800a014:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a016:	00d2      	lsls	r2, r2, #3
 800a018:	4906      	ldr	r1, [pc, #24]	; (800a034 <HAL_RCC_OscConfig+0x7ac>)
 800a01a:	4313      	orrs	r3, r2
 800a01c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a01e:	4b05      	ldr	r3, [pc, #20]	; (800a034 <HAL_RCC_OscConfig+0x7ac>)
 800a020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a022:	4a04      	ldr	r2, [pc, #16]	; (800a034 <HAL_RCC_OscConfig+0x7ac>)
 800a024:	f043 0301 	orr.w	r3, r3, #1
 800a028:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a02a:	2300      	movs	r3, #0
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3730      	adds	r7, #48	; 0x30
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}
 800a034:	58024400 	.word	0x58024400
 800a038:	ffff0007 	.word	0xffff0007

0800a03c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b086      	sub	sp, #24
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d101      	bne.n	800a050 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a04c:	2301      	movs	r3, #1
 800a04e:	e19c      	b.n	800a38a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a050:	4b8a      	ldr	r3, [pc, #552]	; (800a27c <HAL_RCC_ClockConfig+0x240>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f003 030f 	and.w	r3, r3, #15
 800a058:	683a      	ldr	r2, [r7, #0]
 800a05a:	429a      	cmp	r2, r3
 800a05c:	d910      	bls.n	800a080 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a05e:	4b87      	ldr	r3, [pc, #540]	; (800a27c <HAL_RCC_ClockConfig+0x240>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f023 020f 	bic.w	r2, r3, #15
 800a066:	4985      	ldr	r1, [pc, #532]	; (800a27c <HAL_RCC_ClockConfig+0x240>)
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	4313      	orrs	r3, r2
 800a06c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a06e:	4b83      	ldr	r3, [pc, #524]	; (800a27c <HAL_RCC_ClockConfig+0x240>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f003 030f 	and.w	r3, r3, #15
 800a076:	683a      	ldr	r2, [r7, #0]
 800a078:	429a      	cmp	r2, r3
 800a07a:	d001      	beq.n	800a080 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a07c:	2301      	movs	r3, #1
 800a07e:	e184      	b.n	800a38a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f003 0304 	and.w	r3, r3, #4
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d010      	beq.n	800a0ae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	691a      	ldr	r2, [r3, #16]
 800a090:	4b7b      	ldr	r3, [pc, #492]	; (800a280 <HAL_RCC_ClockConfig+0x244>)
 800a092:	699b      	ldr	r3, [r3, #24]
 800a094:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a098:	429a      	cmp	r2, r3
 800a09a:	d908      	bls.n	800a0ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a09c:	4b78      	ldr	r3, [pc, #480]	; (800a280 <HAL_RCC_ClockConfig+0x244>)
 800a09e:	699b      	ldr	r3, [r3, #24]
 800a0a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	691b      	ldr	r3, [r3, #16]
 800a0a8:	4975      	ldr	r1, [pc, #468]	; (800a280 <HAL_RCC_ClockConfig+0x244>)
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f003 0308 	and.w	r3, r3, #8
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d010      	beq.n	800a0dc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	695a      	ldr	r2, [r3, #20]
 800a0be:	4b70      	ldr	r3, [pc, #448]	; (800a280 <HAL_RCC_ClockConfig+0x244>)
 800a0c0:	69db      	ldr	r3, [r3, #28]
 800a0c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d908      	bls.n	800a0dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a0ca:	4b6d      	ldr	r3, [pc, #436]	; (800a280 <HAL_RCC_ClockConfig+0x244>)
 800a0cc:	69db      	ldr	r3, [r3, #28]
 800a0ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	695b      	ldr	r3, [r3, #20]
 800a0d6:	496a      	ldr	r1, [pc, #424]	; (800a280 <HAL_RCC_ClockConfig+0x244>)
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f003 0310 	and.w	r3, r3, #16
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d010      	beq.n	800a10a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	699a      	ldr	r2, [r3, #24]
 800a0ec:	4b64      	ldr	r3, [pc, #400]	; (800a280 <HAL_RCC_ClockConfig+0x244>)
 800a0ee:	69db      	ldr	r3, [r3, #28]
 800a0f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	d908      	bls.n	800a10a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a0f8:	4b61      	ldr	r3, [pc, #388]	; (800a280 <HAL_RCC_ClockConfig+0x244>)
 800a0fa:	69db      	ldr	r3, [r3, #28]
 800a0fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	699b      	ldr	r3, [r3, #24]
 800a104:	495e      	ldr	r1, [pc, #376]	; (800a280 <HAL_RCC_ClockConfig+0x244>)
 800a106:	4313      	orrs	r3, r2
 800a108:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f003 0320 	and.w	r3, r3, #32
 800a112:	2b00      	cmp	r3, #0
 800a114:	d010      	beq.n	800a138 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	69da      	ldr	r2, [r3, #28]
 800a11a:	4b59      	ldr	r3, [pc, #356]	; (800a280 <HAL_RCC_ClockConfig+0x244>)
 800a11c:	6a1b      	ldr	r3, [r3, #32]
 800a11e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a122:	429a      	cmp	r2, r3
 800a124:	d908      	bls.n	800a138 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a126:	4b56      	ldr	r3, [pc, #344]	; (800a280 <HAL_RCC_ClockConfig+0x244>)
 800a128:	6a1b      	ldr	r3, [r3, #32]
 800a12a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	69db      	ldr	r3, [r3, #28]
 800a132:	4953      	ldr	r1, [pc, #332]	; (800a280 <HAL_RCC_ClockConfig+0x244>)
 800a134:	4313      	orrs	r3, r2
 800a136:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f003 0302 	and.w	r3, r3, #2
 800a140:	2b00      	cmp	r3, #0
 800a142:	d010      	beq.n	800a166 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	68da      	ldr	r2, [r3, #12]
 800a148:	4b4d      	ldr	r3, [pc, #308]	; (800a280 <HAL_RCC_ClockConfig+0x244>)
 800a14a:	699b      	ldr	r3, [r3, #24]
 800a14c:	f003 030f 	and.w	r3, r3, #15
 800a150:	429a      	cmp	r2, r3
 800a152:	d908      	bls.n	800a166 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a154:	4b4a      	ldr	r3, [pc, #296]	; (800a280 <HAL_RCC_ClockConfig+0x244>)
 800a156:	699b      	ldr	r3, [r3, #24]
 800a158:	f023 020f 	bic.w	r2, r3, #15
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	68db      	ldr	r3, [r3, #12]
 800a160:	4947      	ldr	r1, [pc, #284]	; (800a280 <HAL_RCC_ClockConfig+0x244>)
 800a162:	4313      	orrs	r3, r2
 800a164:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f003 0301 	and.w	r3, r3, #1
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d055      	beq.n	800a21e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a172:	4b43      	ldr	r3, [pc, #268]	; (800a280 <HAL_RCC_ClockConfig+0x244>)
 800a174:	699b      	ldr	r3, [r3, #24]
 800a176:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	689b      	ldr	r3, [r3, #8]
 800a17e:	4940      	ldr	r1, [pc, #256]	; (800a280 <HAL_RCC_ClockConfig+0x244>)
 800a180:	4313      	orrs	r3, r2
 800a182:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	2b02      	cmp	r3, #2
 800a18a:	d107      	bne.n	800a19c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a18c:	4b3c      	ldr	r3, [pc, #240]	; (800a280 <HAL_RCC_ClockConfig+0x244>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a194:	2b00      	cmp	r3, #0
 800a196:	d121      	bne.n	800a1dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a198:	2301      	movs	r3, #1
 800a19a:	e0f6      	b.n	800a38a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	2b03      	cmp	r3, #3
 800a1a2:	d107      	bne.n	800a1b4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a1a4:	4b36      	ldr	r3, [pc, #216]	; (800a280 <HAL_RCC_ClockConfig+0x244>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d115      	bne.n	800a1dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	e0ea      	b.n	800a38a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	d107      	bne.n	800a1cc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a1bc:	4b30      	ldr	r3, [pc, #192]	; (800a280 <HAL_RCC_ClockConfig+0x244>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d109      	bne.n	800a1dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a1c8:	2301      	movs	r3, #1
 800a1ca:	e0de      	b.n	800a38a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a1cc:	4b2c      	ldr	r3, [pc, #176]	; (800a280 <HAL_RCC_ClockConfig+0x244>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f003 0304 	and.w	r3, r3, #4
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d101      	bne.n	800a1dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a1d8:	2301      	movs	r3, #1
 800a1da:	e0d6      	b.n	800a38a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a1dc:	4b28      	ldr	r3, [pc, #160]	; (800a280 <HAL_RCC_ClockConfig+0x244>)
 800a1de:	691b      	ldr	r3, [r3, #16]
 800a1e0:	f023 0207 	bic.w	r2, r3, #7
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	4925      	ldr	r1, [pc, #148]	; (800a280 <HAL_RCC_ClockConfig+0x244>)
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1ee:	f7f9 fc2f 	bl	8003a50 <HAL_GetTick>
 800a1f2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a1f4:	e00a      	b.n	800a20c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a1f6:	f7f9 fc2b 	bl	8003a50 <HAL_GetTick>
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	1ad3      	subs	r3, r2, r3
 800a200:	f241 3288 	movw	r2, #5000	; 0x1388
 800a204:	4293      	cmp	r3, r2
 800a206:	d901      	bls.n	800a20c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a208:	2303      	movs	r3, #3
 800a20a:	e0be      	b.n	800a38a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a20c:	4b1c      	ldr	r3, [pc, #112]	; (800a280 <HAL_RCC_ClockConfig+0x244>)
 800a20e:	691b      	ldr	r3, [r3, #16]
 800a210:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	685b      	ldr	r3, [r3, #4]
 800a218:	00db      	lsls	r3, r3, #3
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d1eb      	bne.n	800a1f6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f003 0302 	and.w	r3, r3, #2
 800a226:	2b00      	cmp	r3, #0
 800a228:	d010      	beq.n	800a24c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	68da      	ldr	r2, [r3, #12]
 800a22e:	4b14      	ldr	r3, [pc, #80]	; (800a280 <HAL_RCC_ClockConfig+0x244>)
 800a230:	699b      	ldr	r3, [r3, #24]
 800a232:	f003 030f 	and.w	r3, r3, #15
 800a236:	429a      	cmp	r2, r3
 800a238:	d208      	bcs.n	800a24c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a23a:	4b11      	ldr	r3, [pc, #68]	; (800a280 <HAL_RCC_ClockConfig+0x244>)
 800a23c:	699b      	ldr	r3, [r3, #24]
 800a23e:	f023 020f 	bic.w	r2, r3, #15
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	68db      	ldr	r3, [r3, #12]
 800a246:	490e      	ldr	r1, [pc, #56]	; (800a280 <HAL_RCC_ClockConfig+0x244>)
 800a248:	4313      	orrs	r3, r2
 800a24a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a24c:	4b0b      	ldr	r3, [pc, #44]	; (800a27c <HAL_RCC_ClockConfig+0x240>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f003 030f 	and.w	r3, r3, #15
 800a254:	683a      	ldr	r2, [r7, #0]
 800a256:	429a      	cmp	r2, r3
 800a258:	d214      	bcs.n	800a284 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a25a:	4b08      	ldr	r3, [pc, #32]	; (800a27c <HAL_RCC_ClockConfig+0x240>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f023 020f 	bic.w	r2, r3, #15
 800a262:	4906      	ldr	r1, [pc, #24]	; (800a27c <HAL_RCC_ClockConfig+0x240>)
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	4313      	orrs	r3, r2
 800a268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a26a:	4b04      	ldr	r3, [pc, #16]	; (800a27c <HAL_RCC_ClockConfig+0x240>)
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f003 030f 	and.w	r3, r3, #15
 800a272:	683a      	ldr	r2, [r7, #0]
 800a274:	429a      	cmp	r2, r3
 800a276:	d005      	beq.n	800a284 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a278:	2301      	movs	r3, #1
 800a27a:	e086      	b.n	800a38a <HAL_RCC_ClockConfig+0x34e>
 800a27c:	52002000 	.word	0x52002000
 800a280:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f003 0304 	and.w	r3, r3, #4
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d010      	beq.n	800a2b2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	691a      	ldr	r2, [r3, #16]
 800a294:	4b3f      	ldr	r3, [pc, #252]	; (800a394 <HAL_RCC_ClockConfig+0x358>)
 800a296:	699b      	ldr	r3, [r3, #24]
 800a298:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d208      	bcs.n	800a2b2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a2a0:	4b3c      	ldr	r3, [pc, #240]	; (800a394 <HAL_RCC_ClockConfig+0x358>)
 800a2a2:	699b      	ldr	r3, [r3, #24]
 800a2a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	691b      	ldr	r3, [r3, #16]
 800a2ac:	4939      	ldr	r1, [pc, #228]	; (800a394 <HAL_RCC_ClockConfig+0x358>)
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f003 0308 	and.w	r3, r3, #8
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d010      	beq.n	800a2e0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	695a      	ldr	r2, [r3, #20]
 800a2c2:	4b34      	ldr	r3, [pc, #208]	; (800a394 <HAL_RCC_ClockConfig+0x358>)
 800a2c4:	69db      	ldr	r3, [r3, #28]
 800a2c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	d208      	bcs.n	800a2e0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a2ce:	4b31      	ldr	r3, [pc, #196]	; (800a394 <HAL_RCC_ClockConfig+0x358>)
 800a2d0:	69db      	ldr	r3, [r3, #28]
 800a2d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	695b      	ldr	r3, [r3, #20]
 800a2da:	492e      	ldr	r1, [pc, #184]	; (800a394 <HAL_RCC_ClockConfig+0x358>)
 800a2dc:	4313      	orrs	r3, r2
 800a2de:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f003 0310 	and.w	r3, r3, #16
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d010      	beq.n	800a30e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	699a      	ldr	r2, [r3, #24]
 800a2f0:	4b28      	ldr	r3, [pc, #160]	; (800a394 <HAL_RCC_ClockConfig+0x358>)
 800a2f2:	69db      	ldr	r3, [r3, #28]
 800a2f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d208      	bcs.n	800a30e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a2fc:	4b25      	ldr	r3, [pc, #148]	; (800a394 <HAL_RCC_ClockConfig+0x358>)
 800a2fe:	69db      	ldr	r3, [r3, #28]
 800a300:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	699b      	ldr	r3, [r3, #24]
 800a308:	4922      	ldr	r1, [pc, #136]	; (800a394 <HAL_RCC_ClockConfig+0x358>)
 800a30a:	4313      	orrs	r3, r2
 800a30c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f003 0320 	and.w	r3, r3, #32
 800a316:	2b00      	cmp	r3, #0
 800a318:	d010      	beq.n	800a33c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	69da      	ldr	r2, [r3, #28]
 800a31e:	4b1d      	ldr	r3, [pc, #116]	; (800a394 <HAL_RCC_ClockConfig+0x358>)
 800a320:	6a1b      	ldr	r3, [r3, #32]
 800a322:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a326:	429a      	cmp	r2, r3
 800a328:	d208      	bcs.n	800a33c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a32a:	4b1a      	ldr	r3, [pc, #104]	; (800a394 <HAL_RCC_ClockConfig+0x358>)
 800a32c:	6a1b      	ldr	r3, [r3, #32]
 800a32e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	69db      	ldr	r3, [r3, #28]
 800a336:	4917      	ldr	r1, [pc, #92]	; (800a394 <HAL_RCC_ClockConfig+0x358>)
 800a338:	4313      	orrs	r3, r2
 800a33a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a33c:	f000 f89e 	bl	800a47c <HAL_RCC_GetSysClockFreq>
 800a340:	4602      	mov	r2, r0
 800a342:	4b14      	ldr	r3, [pc, #80]	; (800a394 <HAL_RCC_ClockConfig+0x358>)
 800a344:	699b      	ldr	r3, [r3, #24]
 800a346:	0a1b      	lsrs	r3, r3, #8
 800a348:	f003 030f 	and.w	r3, r3, #15
 800a34c:	4912      	ldr	r1, [pc, #72]	; (800a398 <HAL_RCC_ClockConfig+0x35c>)
 800a34e:	5ccb      	ldrb	r3, [r1, r3]
 800a350:	f003 031f 	and.w	r3, r3, #31
 800a354:	fa22 f303 	lsr.w	r3, r2, r3
 800a358:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a35a:	4b0e      	ldr	r3, [pc, #56]	; (800a394 <HAL_RCC_ClockConfig+0x358>)
 800a35c:	699b      	ldr	r3, [r3, #24]
 800a35e:	f003 030f 	and.w	r3, r3, #15
 800a362:	4a0d      	ldr	r2, [pc, #52]	; (800a398 <HAL_RCC_ClockConfig+0x35c>)
 800a364:	5cd3      	ldrb	r3, [r2, r3]
 800a366:	f003 031f 	and.w	r3, r3, #31
 800a36a:	693a      	ldr	r2, [r7, #16]
 800a36c:	fa22 f303 	lsr.w	r3, r2, r3
 800a370:	4a0a      	ldr	r2, [pc, #40]	; (800a39c <HAL_RCC_ClockConfig+0x360>)
 800a372:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a374:	4a0a      	ldr	r2, [pc, #40]	; (800a3a0 <HAL_RCC_ClockConfig+0x364>)
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a37a:	4b0a      	ldr	r3, [pc, #40]	; (800a3a4 <HAL_RCC_ClockConfig+0x368>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4618      	mov	r0, r3
 800a380:	f7f9 fb1c 	bl	80039bc <HAL_InitTick>
 800a384:	4603      	mov	r3, r0
 800a386:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a388:	7bfb      	ldrb	r3, [r7, #15]
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3718      	adds	r7, #24
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}
 800a392:	bf00      	nop
 800a394:	58024400 	.word	0x58024400
 800a398:	08018554 	.word	0x08018554
 800a39c:	24000004 	.word	0x24000004
 800a3a0:	24000000 	.word	0x24000000
 800a3a4:	24000008 	.word	0x24000008

0800a3a8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b08c      	sub	sp, #48	; 0x30
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	60f8      	str	r0, [r7, #12]
 800a3b0:	60b9      	str	r1, [r7, #8]
 800a3b2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d12a      	bne.n	800a410 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800a3ba:	4b2d      	ldr	r3, [pc, #180]	; (800a470 <HAL_RCC_MCOConfig+0xc8>)
 800a3bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a3c0:	4a2b      	ldr	r2, [pc, #172]	; (800a470 <HAL_RCC_MCOConfig+0xc8>)
 800a3c2:	f043 0301 	orr.w	r3, r3, #1
 800a3c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a3ca:	4b29      	ldr	r3, [pc, #164]	; (800a470 <HAL_RCC_MCOConfig+0xc8>)
 800a3cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a3d0:	f003 0301 	and.w	r3, r3, #1
 800a3d4:	61bb      	str	r3, [r7, #24]
 800a3d6:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800a3d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a3dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3de:	2302      	movs	r3, #2
 800a3e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a3e2:	2303      	movs	r3, #3
 800a3e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a3ee:	f107 031c 	add.w	r3, r7, #28
 800a3f2:	4619      	mov	r1, r3
 800a3f4:	481f      	ldr	r0, [pc, #124]	; (800a474 <HAL_RCC_MCOConfig+0xcc>)
 800a3f6:	f7fd fc29 	bl	8007c4c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a3fa:	4b1d      	ldr	r3, [pc, #116]	; (800a470 <HAL_RCC_MCOConfig+0xc8>)
 800a3fc:	691b      	ldr	r3, [r3, #16]
 800a3fe:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800a402:	68b9      	ldr	r1, [r7, #8]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	430b      	orrs	r3, r1
 800a408:	4919      	ldr	r1, [pc, #100]	; (800a470 <HAL_RCC_MCOConfig+0xc8>)
 800a40a:	4313      	orrs	r3, r2
 800a40c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800a40e:	e02a      	b.n	800a466 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800a410:	4b17      	ldr	r3, [pc, #92]	; (800a470 <HAL_RCC_MCOConfig+0xc8>)
 800a412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a416:	4a16      	ldr	r2, [pc, #88]	; (800a470 <HAL_RCC_MCOConfig+0xc8>)
 800a418:	f043 0304 	orr.w	r3, r3, #4
 800a41c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a420:	4b13      	ldr	r3, [pc, #76]	; (800a470 <HAL_RCC_MCOConfig+0xc8>)
 800a422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a426:	f003 0304 	and.w	r3, r3, #4
 800a42a:	617b      	str	r3, [r7, #20]
 800a42c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a42e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a432:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a434:	2302      	movs	r3, #2
 800a436:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a438:	2303      	movs	r3, #3
 800a43a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a43c:	2300      	movs	r3, #0
 800a43e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a440:	2300      	movs	r3, #0
 800a442:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a444:	f107 031c 	add.w	r3, r7, #28
 800a448:	4619      	mov	r1, r3
 800a44a:	480b      	ldr	r0, [pc, #44]	; (800a478 <HAL_RCC_MCOConfig+0xd0>)
 800a44c:	f7fd fbfe 	bl	8007c4c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a450:	4b07      	ldr	r3, [pc, #28]	; (800a470 <HAL_RCC_MCOConfig+0xc8>)
 800a452:	691b      	ldr	r3, [r3, #16]
 800a454:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	01d9      	lsls	r1, r3, #7
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	430b      	orrs	r3, r1
 800a460:	4903      	ldr	r1, [pc, #12]	; (800a470 <HAL_RCC_MCOConfig+0xc8>)
 800a462:	4313      	orrs	r3, r2
 800a464:	610b      	str	r3, [r1, #16]
}
 800a466:	bf00      	nop
 800a468:	3730      	adds	r7, #48	; 0x30
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}
 800a46e:	bf00      	nop
 800a470:	58024400 	.word	0x58024400
 800a474:	58020000 	.word	0x58020000
 800a478:	58020800 	.word	0x58020800

0800a47c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a47c:	b480      	push	{r7}
 800a47e:	b089      	sub	sp, #36	; 0x24
 800a480:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a482:	4bb3      	ldr	r3, [pc, #716]	; (800a750 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a484:	691b      	ldr	r3, [r3, #16]
 800a486:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a48a:	2b18      	cmp	r3, #24
 800a48c:	f200 8155 	bhi.w	800a73a <HAL_RCC_GetSysClockFreq+0x2be>
 800a490:	a201      	add	r2, pc, #4	; (adr r2, 800a498 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a496:	bf00      	nop
 800a498:	0800a4fd 	.word	0x0800a4fd
 800a49c:	0800a73b 	.word	0x0800a73b
 800a4a0:	0800a73b 	.word	0x0800a73b
 800a4a4:	0800a73b 	.word	0x0800a73b
 800a4a8:	0800a73b 	.word	0x0800a73b
 800a4ac:	0800a73b 	.word	0x0800a73b
 800a4b0:	0800a73b 	.word	0x0800a73b
 800a4b4:	0800a73b 	.word	0x0800a73b
 800a4b8:	0800a523 	.word	0x0800a523
 800a4bc:	0800a73b 	.word	0x0800a73b
 800a4c0:	0800a73b 	.word	0x0800a73b
 800a4c4:	0800a73b 	.word	0x0800a73b
 800a4c8:	0800a73b 	.word	0x0800a73b
 800a4cc:	0800a73b 	.word	0x0800a73b
 800a4d0:	0800a73b 	.word	0x0800a73b
 800a4d4:	0800a73b 	.word	0x0800a73b
 800a4d8:	0800a529 	.word	0x0800a529
 800a4dc:	0800a73b 	.word	0x0800a73b
 800a4e0:	0800a73b 	.word	0x0800a73b
 800a4e4:	0800a73b 	.word	0x0800a73b
 800a4e8:	0800a73b 	.word	0x0800a73b
 800a4ec:	0800a73b 	.word	0x0800a73b
 800a4f0:	0800a73b 	.word	0x0800a73b
 800a4f4:	0800a73b 	.word	0x0800a73b
 800a4f8:	0800a52f 	.word	0x0800a52f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4fc:	4b94      	ldr	r3, [pc, #592]	; (800a750 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f003 0320 	and.w	r3, r3, #32
 800a504:	2b00      	cmp	r3, #0
 800a506:	d009      	beq.n	800a51c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a508:	4b91      	ldr	r3, [pc, #580]	; (800a750 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	08db      	lsrs	r3, r3, #3
 800a50e:	f003 0303 	and.w	r3, r3, #3
 800a512:	4a90      	ldr	r2, [pc, #576]	; (800a754 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a514:	fa22 f303 	lsr.w	r3, r2, r3
 800a518:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a51a:	e111      	b.n	800a740 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a51c:	4b8d      	ldr	r3, [pc, #564]	; (800a754 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a51e:	61bb      	str	r3, [r7, #24]
      break;
 800a520:	e10e      	b.n	800a740 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a522:	4b8d      	ldr	r3, [pc, #564]	; (800a758 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a524:	61bb      	str	r3, [r7, #24]
      break;
 800a526:	e10b      	b.n	800a740 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a528:	4b8c      	ldr	r3, [pc, #560]	; (800a75c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a52a:	61bb      	str	r3, [r7, #24]
      break;
 800a52c:	e108      	b.n	800a740 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a52e:	4b88      	ldr	r3, [pc, #544]	; (800a750 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a532:	f003 0303 	and.w	r3, r3, #3
 800a536:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a538:	4b85      	ldr	r3, [pc, #532]	; (800a750 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a53a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a53c:	091b      	lsrs	r3, r3, #4
 800a53e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a542:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a544:	4b82      	ldr	r3, [pc, #520]	; (800a750 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a548:	f003 0301 	and.w	r3, r3, #1
 800a54c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a54e:	4b80      	ldr	r3, [pc, #512]	; (800a750 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a552:	08db      	lsrs	r3, r3, #3
 800a554:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a558:	68fa      	ldr	r2, [r7, #12]
 800a55a:	fb02 f303 	mul.w	r3, r2, r3
 800a55e:	ee07 3a90 	vmov	s15, r3
 800a562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a566:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	f000 80e1 	beq.w	800a734 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	2b02      	cmp	r3, #2
 800a576:	f000 8083 	beq.w	800a680 <HAL_RCC_GetSysClockFreq+0x204>
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	2b02      	cmp	r3, #2
 800a57e:	f200 80a1 	bhi.w	800a6c4 <HAL_RCC_GetSysClockFreq+0x248>
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d003      	beq.n	800a590 <HAL_RCC_GetSysClockFreq+0x114>
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	2b01      	cmp	r3, #1
 800a58c:	d056      	beq.n	800a63c <HAL_RCC_GetSysClockFreq+0x1c0>
 800a58e:	e099      	b.n	800a6c4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a590:	4b6f      	ldr	r3, [pc, #444]	; (800a750 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f003 0320 	and.w	r3, r3, #32
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d02d      	beq.n	800a5f8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a59c:	4b6c      	ldr	r3, [pc, #432]	; (800a750 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	08db      	lsrs	r3, r3, #3
 800a5a2:	f003 0303 	and.w	r3, r3, #3
 800a5a6:	4a6b      	ldr	r2, [pc, #428]	; (800a754 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a5a8:	fa22 f303 	lsr.w	r3, r2, r3
 800a5ac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	ee07 3a90 	vmov	s15, r3
 800a5b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	ee07 3a90 	vmov	s15, r3
 800a5be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5c6:	4b62      	ldr	r3, [pc, #392]	; (800a750 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5ce:	ee07 3a90 	vmov	s15, r3
 800a5d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5d6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a5da:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a760 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a5de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5f2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a5f6:	e087      	b.n	800a708 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	ee07 3a90 	vmov	s15, r3
 800a5fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a602:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a764 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a60a:	4b51      	ldr	r3, [pc, #324]	; (800a750 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a60c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a60e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a612:	ee07 3a90 	vmov	s15, r3
 800a616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a61a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a61e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a760 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a62a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a62e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a632:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a636:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a63a:	e065      	b.n	800a708 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	ee07 3a90 	vmov	s15, r3
 800a642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a646:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a768 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a64a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a64e:	4b40      	ldr	r3, [pc, #256]	; (800a750 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a656:	ee07 3a90 	vmov	s15, r3
 800a65a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a65e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a662:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a760 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a66a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a66e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a67a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a67e:	e043      	b.n	800a708 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	ee07 3a90 	vmov	s15, r3
 800a686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a68a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a76c <HAL_RCC_GetSysClockFreq+0x2f0>
 800a68e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a692:	4b2f      	ldr	r3, [pc, #188]	; (800a750 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a69a:	ee07 3a90 	vmov	s15, r3
 800a69e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6a2:	ed97 6a02 	vldr	s12, [r7, #8]
 800a6a6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a760 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a6aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a6c2:	e021      	b.n	800a708 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	ee07 3a90 	vmov	s15, r3
 800a6ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6ce:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a768 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a6d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6d6:	4b1e      	ldr	r3, [pc, #120]	; (800a750 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6de:	ee07 3a90 	vmov	s15, r3
 800a6e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6e6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a6ea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a760 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a6ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a702:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a706:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a708:	4b11      	ldr	r3, [pc, #68]	; (800a750 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a70a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a70c:	0a5b      	lsrs	r3, r3, #9
 800a70e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a712:	3301      	adds	r3, #1
 800a714:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	ee07 3a90 	vmov	s15, r3
 800a71c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a720:	edd7 6a07 	vldr	s13, [r7, #28]
 800a724:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a728:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a72c:	ee17 3a90 	vmov	r3, s15
 800a730:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a732:	e005      	b.n	800a740 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a734:	2300      	movs	r3, #0
 800a736:	61bb      	str	r3, [r7, #24]
      break;
 800a738:	e002      	b.n	800a740 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a73a:	4b07      	ldr	r3, [pc, #28]	; (800a758 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a73c:	61bb      	str	r3, [r7, #24]
      break;
 800a73e:	bf00      	nop
  }

  return sysclockfreq;
 800a740:	69bb      	ldr	r3, [r7, #24]
}
 800a742:	4618      	mov	r0, r3
 800a744:	3724      	adds	r7, #36	; 0x24
 800a746:	46bd      	mov	sp, r7
 800a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74c:	4770      	bx	lr
 800a74e:	bf00      	nop
 800a750:	58024400 	.word	0x58024400
 800a754:	03d09000 	.word	0x03d09000
 800a758:	003d0900 	.word	0x003d0900
 800a75c:	02faf080 	.word	0x02faf080
 800a760:	46000000 	.word	0x46000000
 800a764:	4c742400 	.word	0x4c742400
 800a768:	4a742400 	.word	0x4a742400
 800a76c:	4c3ebc20 	.word	0x4c3ebc20

0800a770 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b082      	sub	sp, #8
 800a774:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a776:	f7ff fe81 	bl	800a47c <HAL_RCC_GetSysClockFreq>
 800a77a:	4602      	mov	r2, r0
 800a77c:	4b10      	ldr	r3, [pc, #64]	; (800a7c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800a77e:	699b      	ldr	r3, [r3, #24]
 800a780:	0a1b      	lsrs	r3, r3, #8
 800a782:	f003 030f 	and.w	r3, r3, #15
 800a786:	490f      	ldr	r1, [pc, #60]	; (800a7c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800a788:	5ccb      	ldrb	r3, [r1, r3]
 800a78a:	f003 031f 	and.w	r3, r3, #31
 800a78e:	fa22 f303 	lsr.w	r3, r2, r3
 800a792:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a794:	4b0a      	ldr	r3, [pc, #40]	; (800a7c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800a796:	699b      	ldr	r3, [r3, #24]
 800a798:	f003 030f 	and.w	r3, r3, #15
 800a79c:	4a09      	ldr	r2, [pc, #36]	; (800a7c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800a79e:	5cd3      	ldrb	r3, [r2, r3]
 800a7a0:	f003 031f 	and.w	r3, r3, #31
 800a7a4:	687a      	ldr	r2, [r7, #4]
 800a7a6:	fa22 f303 	lsr.w	r3, r2, r3
 800a7aa:	4a07      	ldr	r2, [pc, #28]	; (800a7c8 <HAL_RCC_GetHCLKFreq+0x58>)
 800a7ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a7ae:	4a07      	ldr	r2, [pc, #28]	; (800a7cc <HAL_RCC_GetHCLKFreq+0x5c>)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a7b4:	4b04      	ldr	r3, [pc, #16]	; (800a7c8 <HAL_RCC_GetHCLKFreq+0x58>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3708      	adds	r7, #8
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}
 800a7c0:	58024400 	.word	0x58024400
 800a7c4:	08018554 	.word	0x08018554
 800a7c8:	24000004 	.word	0x24000004
 800a7cc:	24000000 	.word	0x24000000

0800a7d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a7d4:	f7ff ffcc 	bl	800a770 <HAL_RCC_GetHCLKFreq>
 800a7d8:	4602      	mov	r2, r0
 800a7da:	4b06      	ldr	r3, [pc, #24]	; (800a7f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a7dc:	69db      	ldr	r3, [r3, #28]
 800a7de:	091b      	lsrs	r3, r3, #4
 800a7e0:	f003 0307 	and.w	r3, r3, #7
 800a7e4:	4904      	ldr	r1, [pc, #16]	; (800a7f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a7e6:	5ccb      	ldrb	r3, [r1, r3]
 800a7e8:	f003 031f 	and.w	r3, r3, #31
 800a7ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	bd80      	pop	{r7, pc}
 800a7f4:	58024400 	.word	0x58024400
 800a7f8:	08018554 	.word	0x08018554

0800a7fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a800:	f7ff ffb6 	bl	800a770 <HAL_RCC_GetHCLKFreq>
 800a804:	4602      	mov	r2, r0
 800a806:	4b06      	ldr	r3, [pc, #24]	; (800a820 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a808:	69db      	ldr	r3, [r3, #28]
 800a80a:	0a1b      	lsrs	r3, r3, #8
 800a80c:	f003 0307 	and.w	r3, r3, #7
 800a810:	4904      	ldr	r1, [pc, #16]	; (800a824 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a812:	5ccb      	ldrb	r3, [r1, r3]
 800a814:	f003 031f 	and.w	r3, r3, #31
 800a818:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	bd80      	pop	{r7, pc}
 800a820:	58024400 	.word	0x58024400
 800a824:	08018554 	.word	0x08018554

0800a828 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a828:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a82c:	b0c6      	sub	sp, #280	; 0x118
 800a82e:	af00      	add	r7, sp, #0
 800a830:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a834:	2300      	movs	r3, #0
 800a836:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a83a:	2300      	movs	r3, #0
 800a83c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a840:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a844:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a848:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a84c:	2500      	movs	r5, #0
 800a84e:	ea54 0305 	orrs.w	r3, r4, r5
 800a852:	d049      	beq.n	800a8e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a854:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a858:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a85a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a85e:	d02f      	beq.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a860:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a864:	d828      	bhi.n	800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a866:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a86a:	d01a      	beq.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a86c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a870:	d822      	bhi.n	800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a872:	2b00      	cmp	r3, #0
 800a874:	d003      	beq.n	800a87e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a876:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a87a:	d007      	beq.n	800a88c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a87c:	e01c      	b.n	800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a87e:	4bab      	ldr	r3, [pc, #684]	; (800ab2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a882:	4aaa      	ldr	r2, [pc, #680]	; (800ab2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a888:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a88a:	e01a      	b.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a88c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a890:	3308      	adds	r3, #8
 800a892:	2102      	movs	r1, #2
 800a894:	4618      	mov	r0, r3
 800a896:	f002 fa49 	bl	800cd2c <RCCEx_PLL2_Config>
 800a89a:	4603      	mov	r3, r0
 800a89c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a8a0:	e00f      	b.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a8a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8a6:	3328      	adds	r3, #40	; 0x28
 800a8a8:	2102      	movs	r1, #2
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f002 faf0 	bl	800ce90 <RCCEx_PLL3_Config>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a8b6:	e004      	b.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a8be:	e000      	b.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a8c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d10a      	bne.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a8ca:	4b98      	ldr	r3, [pc, #608]	; (800ab2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a8cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8ce:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a8d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8d8:	4a94      	ldr	r2, [pc, #592]	; (800ab2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a8da:	430b      	orrs	r3, r1
 800a8dc:	6513      	str	r3, [r2, #80]	; 0x50
 800a8de:	e003      	b.n	800a8e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a8e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a8e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800a8f4:	f04f 0900 	mov.w	r9, #0
 800a8f8:	ea58 0309 	orrs.w	r3, r8, r9
 800a8fc:	d047      	beq.n	800a98e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a8fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a904:	2b04      	cmp	r3, #4
 800a906:	d82a      	bhi.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a908:	a201      	add	r2, pc, #4	; (adr r2, 800a910 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a90a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a90e:	bf00      	nop
 800a910:	0800a925 	.word	0x0800a925
 800a914:	0800a933 	.word	0x0800a933
 800a918:	0800a949 	.word	0x0800a949
 800a91c:	0800a967 	.word	0x0800a967
 800a920:	0800a967 	.word	0x0800a967
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a924:	4b81      	ldr	r3, [pc, #516]	; (800ab2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a928:	4a80      	ldr	r2, [pc, #512]	; (800ab2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a92a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a92e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a930:	e01a      	b.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a932:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a936:	3308      	adds	r3, #8
 800a938:	2100      	movs	r1, #0
 800a93a:	4618      	mov	r0, r3
 800a93c:	f002 f9f6 	bl	800cd2c <RCCEx_PLL2_Config>
 800a940:	4603      	mov	r3, r0
 800a942:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a946:	e00f      	b.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a948:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a94c:	3328      	adds	r3, #40	; 0x28
 800a94e:	2100      	movs	r1, #0
 800a950:	4618      	mov	r0, r3
 800a952:	f002 fa9d 	bl	800ce90 <RCCEx_PLL3_Config>
 800a956:	4603      	mov	r3, r0
 800a958:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a95c:	e004      	b.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a95e:	2301      	movs	r3, #1
 800a960:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a964:	e000      	b.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a966:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a968:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d10a      	bne.n	800a986 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a970:	4b6e      	ldr	r3, [pc, #440]	; (800ab2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a974:	f023 0107 	bic.w	r1, r3, #7
 800a978:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a97c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a97e:	4a6b      	ldr	r2, [pc, #428]	; (800ab2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a980:	430b      	orrs	r3, r1
 800a982:	6513      	str	r3, [r2, #80]	; 0x50
 800a984:	e003      	b.n	800a98e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a986:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a98a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a98e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a996:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800a99a:	f04f 0b00 	mov.w	fp, #0
 800a99e:	ea5a 030b 	orrs.w	r3, sl, fp
 800a9a2:	d05b      	beq.n	800aa5c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a9a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a9ac:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a9b0:	d03b      	beq.n	800aa2a <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a9b2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a9b6:	d834      	bhi.n	800aa22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a9b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a9bc:	d037      	beq.n	800aa2e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a9be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a9c2:	d82e      	bhi.n	800aa22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a9c4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a9c8:	d033      	beq.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a9ca:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a9ce:	d828      	bhi.n	800aa22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a9d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a9d4:	d01a      	beq.n	800aa0c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800a9d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a9da:	d822      	bhi.n	800aa22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d003      	beq.n	800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800a9e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a9e4:	d007      	beq.n	800a9f6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800a9e6:	e01c      	b.n	800aa22 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9e8:	4b50      	ldr	r3, [pc, #320]	; (800ab2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a9ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ec:	4a4f      	ldr	r2, [pc, #316]	; (800ab2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a9ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a9f4:	e01e      	b.n	800aa34 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a9f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9fa:	3308      	adds	r3, #8
 800a9fc:	2100      	movs	r1, #0
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f002 f994 	bl	800cd2c <RCCEx_PLL2_Config>
 800aa04:	4603      	mov	r3, r0
 800aa06:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800aa0a:	e013      	b.n	800aa34 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aa0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa10:	3328      	adds	r3, #40	; 0x28
 800aa12:	2100      	movs	r1, #0
 800aa14:	4618      	mov	r0, r3
 800aa16:	f002 fa3b 	bl	800ce90 <RCCEx_PLL3_Config>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa20:	e008      	b.n	800aa34 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800aa22:	2301      	movs	r3, #1
 800aa24:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aa28:	e004      	b.n	800aa34 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800aa2a:	bf00      	nop
 800aa2c:	e002      	b.n	800aa34 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800aa2e:	bf00      	nop
 800aa30:	e000      	b.n	800aa34 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800aa32:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d10b      	bne.n	800aa54 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800aa3c:	4b3b      	ldr	r3, [pc, #236]	; (800ab2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa40:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800aa44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aa4c:	4a37      	ldr	r2, [pc, #220]	; (800ab2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa4e:	430b      	orrs	r3, r1
 800aa50:	6593      	str	r3, [r2, #88]	; 0x58
 800aa52:	e003      	b.n	800aa5c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa54:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa58:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800aa5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa64:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800aa68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800aa72:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800aa76:	460b      	mov	r3, r1
 800aa78:	4313      	orrs	r3, r2
 800aa7a:	d05d      	beq.n	800ab38 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800aa7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa80:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aa84:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800aa88:	d03b      	beq.n	800ab02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800aa8a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800aa8e:	d834      	bhi.n	800aafa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aa90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aa94:	d037      	beq.n	800ab06 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800aa96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aa9a:	d82e      	bhi.n	800aafa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aa9c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aaa0:	d033      	beq.n	800ab0a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800aaa2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800aaa6:	d828      	bhi.n	800aafa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aaa8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aaac:	d01a      	beq.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800aaae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aab2:	d822      	bhi.n	800aafa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d003      	beq.n	800aac0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800aab8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800aabc:	d007      	beq.n	800aace <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800aabe:	e01c      	b.n	800aafa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aac0:	4b1a      	ldr	r3, [pc, #104]	; (800ab2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aac4:	4a19      	ldr	r2, [pc, #100]	; (800ab2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aac6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aaca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aacc:	e01e      	b.n	800ab0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aace:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aad2:	3308      	adds	r3, #8
 800aad4:	2100      	movs	r1, #0
 800aad6:	4618      	mov	r0, r3
 800aad8:	f002 f928 	bl	800cd2c <RCCEx_PLL2_Config>
 800aadc:	4603      	mov	r3, r0
 800aade:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800aae2:	e013      	b.n	800ab0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aae8:	3328      	adds	r3, #40	; 0x28
 800aaea:	2100      	movs	r1, #0
 800aaec:	4618      	mov	r0, r3
 800aaee:	f002 f9cf 	bl	800ce90 <RCCEx_PLL3_Config>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aaf8:	e008      	b.n	800ab0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800aafa:	2301      	movs	r3, #1
 800aafc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ab00:	e004      	b.n	800ab0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ab02:	bf00      	nop
 800ab04:	e002      	b.n	800ab0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ab06:	bf00      	nop
 800ab08:	e000      	b.n	800ab0c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ab0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab0c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d10d      	bne.n	800ab30 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ab14:	4b05      	ldr	r3, [pc, #20]	; (800ab2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ab16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab18:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800ab1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab20:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ab24:	4a01      	ldr	r2, [pc, #4]	; (800ab2c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ab26:	430b      	orrs	r3, r1
 800ab28:	6593      	str	r3, [r2, #88]	; 0x58
 800ab2a:	e005      	b.n	800ab38 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800ab2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab30:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab34:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800ab38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab40:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800ab44:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ab48:	2300      	movs	r3, #0
 800ab4a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ab4e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800ab52:	460b      	mov	r3, r1
 800ab54:	4313      	orrs	r3, r2
 800ab56:	d03a      	beq.n	800abce <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800ab58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab5e:	2b30      	cmp	r3, #48	; 0x30
 800ab60:	d01f      	beq.n	800aba2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800ab62:	2b30      	cmp	r3, #48	; 0x30
 800ab64:	d819      	bhi.n	800ab9a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800ab66:	2b20      	cmp	r3, #32
 800ab68:	d00c      	beq.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800ab6a:	2b20      	cmp	r3, #32
 800ab6c:	d815      	bhi.n	800ab9a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d019      	beq.n	800aba6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800ab72:	2b10      	cmp	r3, #16
 800ab74:	d111      	bne.n	800ab9a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab76:	4baa      	ldr	r3, [pc, #680]	; (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ab78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab7a:	4aa9      	ldr	r2, [pc, #676]	; (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ab7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800ab82:	e011      	b.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ab84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab88:	3308      	adds	r3, #8
 800ab8a:	2102      	movs	r1, #2
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f002 f8cd 	bl	800cd2c <RCCEx_PLL2_Config>
 800ab92:	4603      	mov	r3, r0
 800ab94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800ab98:	e006      	b.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aba0:	e002      	b.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800aba2:	bf00      	nop
 800aba4:	e000      	b.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800aba6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aba8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800abac:	2b00      	cmp	r3, #0
 800abae:	d10a      	bne.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800abb0:	4b9b      	ldr	r3, [pc, #620]	; (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800abb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abb4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800abb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abbe:	4a98      	ldr	r2, [pc, #608]	; (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800abc0:	430b      	orrs	r3, r1
 800abc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800abc4:	e003      	b.n	800abce <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abc6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800abca:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800abce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800abda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800abde:	2300      	movs	r3, #0
 800abe0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800abe4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800abe8:	460b      	mov	r3, r1
 800abea:	4313      	orrs	r3, r2
 800abec:	d051      	beq.n	800ac92 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800abee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800abf8:	d035      	beq.n	800ac66 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800abfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800abfe:	d82e      	bhi.n	800ac5e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ac00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ac04:	d031      	beq.n	800ac6a <HAL_RCCEx_PeriphCLKConfig+0x442>
 800ac06:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ac0a:	d828      	bhi.n	800ac5e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ac0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac10:	d01a      	beq.n	800ac48 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800ac12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ac16:	d822      	bhi.n	800ac5e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d003      	beq.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800ac1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac20:	d007      	beq.n	800ac32 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800ac22:	e01c      	b.n	800ac5e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac24:	4b7e      	ldr	r3, [pc, #504]	; (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac28:	4a7d      	ldr	r2, [pc, #500]	; (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ac30:	e01c      	b.n	800ac6c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac36:	3308      	adds	r3, #8
 800ac38:	2100      	movs	r1, #0
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f002 f876 	bl	800cd2c <RCCEx_PLL2_Config>
 800ac40:	4603      	mov	r3, r0
 800ac42:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ac46:	e011      	b.n	800ac6c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ac48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac4c:	3328      	adds	r3, #40	; 0x28
 800ac4e:	2100      	movs	r1, #0
 800ac50:	4618      	mov	r0, r3
 800ac52:	f002 f91d 	bl	800ce90 <RCCEx_PLL3_Config>
 800ac56:	4603      	mov	r3, r0
 800ac58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ac5c:	e006      	b.n	800ac6c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac5e:	2301      	movs	r3, #1
 800ac60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ac64:	e002      	b.n	800ac6c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800ac66:	bf00      	nop
 800ac68:	e000      	b.n	800ac6c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800ac6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac6c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d10a      	bne.n	800ac8a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ac74:	4b6a      	ldr	r3, [pc, #424]	; (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac78:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800ac7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac82:	4a67      	ldr	r2, [pc, #412]	; (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac84:	430b      	orrs	r3, r1
 800ac86:	6513      	str	r3, [r2, #80]	; 0x50
 800ac88:	e003      	b.n	800ac92 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac8a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac8e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ac92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac9a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800ac9e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800aca2:	2300      	movs	r3, #0
 800aca4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aca8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800acac:	460b      	mov	r3, r1
 800acae:	4313      	orrs	r3, r2
 800acb0:	d053      	beq.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800acb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800acbc:	d033      	beq.n	800ad26 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800acbe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800acc2:	d82c      	bhi.n	800ad1e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800acc4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800acc8:	d02f      	beq.n	800ad2a <HAL_RCCEx_PeriphCLKConfig+0x502>
 800acca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800acce:	d826      	bhi.n	800ad1e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800acd0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800acd4:	d02b      	beq.n	800ad2e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800acd6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800acda:	d820      	bhi.n	800ad1e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800acdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ace0:	d012      	beq.n	800ad08 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800ace2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ace6:	d81a      	bhi.n	800ad1e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d022      	beq.n	800ad32 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800acec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acf0:	d115      	bne.n	800ad1e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800acf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acf6:	3308      	adds	r3, #8
 800acf8:	2101      	movs	r1, #1
 800acfa:	4618      	mov	r0, r3
 800acfc:	f002 f816 	bl	800cd2c <RCCEx_PLL2_Config>
 800ad00:	4603      	mov	r3, r0
 800ad02:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ad06:	e015      	b.n	800ad34 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad0c:	3328      	adds	r3, #40	; 0x28
 800ad0e:	2101      	movs	r1, #1
 800ad10:	4618      	mov	r0, r3
 800ad12:	f002 f8bd 	bl	800ce90 <RCCEx_PLL3_Config>
 800ad16:	4603      	mov	r3, r0
 800ad18:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ad1c:	e00a      	b.n	800ad34 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad1e:	2301      	movs	r3, #1
 800ad20:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ad24:	e006      	b.n	800ad34 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ad26:	bf00      	nop
 800ad28:	e004      	b.n	800ad34 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ad2a:	bf00      	nop
 800ad2c:	e002      	b.n	800ad34 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ad2e:	bf00      	nop
 800ad30:	e000      	b.n	800ad34 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ad32:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d10a      	bne.n	800ad52 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ad3c:	4b38      	ldr	r3, [pc, #224]	; (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ad3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad40:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800ad44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad4a:	4a35      	ldr	r2, [pc, #212]	; (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ad4c:	430b      	orrs	r3, r1
 800ad4e:	6513      	str	r3, [r2, #80]	; 0x50
 800ad50:	e003      	b.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad52:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad56:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ad5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad62:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800ad66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ad70:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ad74:	460b      	mov	r3, r1
 800ad76:	4313      	orrs	r3, r2
 800ad78:	d058      	beq.n	800ae2c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800ad7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad7e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ad82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad86:	d033      	beq.n	800adf0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800ad88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad8c:	d82c      	bhi.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ad8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad92:	d02f      	beq.n	800adf4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800ad94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad98:	d826      	bhi.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ad9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ad9e:	d02b      	beq.n	800adf8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800ada0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ada4:	d820      	bhi.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ada6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adaa:	d012      	beq.n	800add2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800adac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800adb0:	d81a      	bhi.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d022      	beq.n	800adfc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800adb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800adba:	d115      	bne.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800adbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adc0:	3308      	adds	r3, #8
 800adc2:	2101      	movs	r1, #1
 800adc4:	4618      	mov	r0, r3
 800adc6:	f001 ffb1 	bl	800cd2c <RCCEx_PLL2_Config>
 800adca:	4603      	mov	r3, r0
 800adcc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800add0:	e015      	b.n	800adfe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800add2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800add6:	3328      	adds	r3, #40	; 0x28
 800add8:	2101      	movs	r1, #1
 800adda:	4618      	mov	r0, r3
 800addc:	f002 f858 	bl	800ce90 <RCCEx_PLL3_Config>
 800ade0:	4603      	mov	r3, r0
 800ade2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ade6:	e00a      	b.n	800adfe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ade8:	2301      	movs	r3, #1
 800adea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800adee:	e006      	b.n	800adfe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800adf0:	bf00      	nop
 800adf2:	e004      	b.n	800adfe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800adf4:	bf00      	nop
 800adf6:	e002      	b.n	800adfe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800adf8:	bf00      	nop
 800adfa:	e000      	b.n	800adfe <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800adfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800adfe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d10e      	bne.n	800ae24 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ae06:	4b06      	ldr	r3, [pc, #24]	; (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ae08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae0a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800ae0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae12:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ae16:	4a02      	ldr	r2, [pc, #8]	; (800ae20 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ae18:	430b      	orrs	r3, r1
 800ae1a:	6593      	str	r3, [r2, #88]	; 0x58
 800ae1c:	e006      	b.n	800ae2c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800ae1e:	bf00      	nop
 800ae20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae24:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae28:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ae2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae34:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800ae38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ae42:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800ae46:	460b      	mov	r3, r1
 800ae48:	4313      	orrs	r3, r2
 800ae4a:	d037      	beq.n	800aebc <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800ae4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae56:	d00e      	beq.n	800ae76 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800ae58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae5c:	d816      	bhi.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d018      	beq.n	800ae94 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800ae62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae66:	d111      	bne.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae68:	4bc4      	ldr	r3, [pc, #784]	; (800b17c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae6c:	4ac3      	ldr	r2, [pc, #780]	; (800b17c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ae74:	e00f      	b.n	800ae96 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae7a:	3308      	adds	r3, #8
 800ae7c:	2101      	movs	r1, #1
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f001 ff54 	bl	800cd2c <RCCEx_PLL2_Config>
 800ae84:	4603      	mov	r3, r0
 800ae86:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800ae8a:	e004      	b.n	800ae96 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ae92:	e000      	b.n	800ae96 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800ae94:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae96:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d10a      	bne.n	800aeb4 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ae9e:	4bb7      	ldr	r3, [pc, #732]	; (800b17c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aea2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800aea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aeac:	4ab3      	ldr	r2, [pc, #716]	; (800b17c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aeae:	430b      	orrs	r3, r1
 800aeb0:	6513      	str	r3, [r2, #80]	; 0x50
 800aeb2:	e003      	b.n	800aebc <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aeb4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aeb8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800aebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800aec8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aecc:	2300      	movs	r3, #0
 800aece:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800aed2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800aed6:	460b      	mov	r3, r1
 800aed8:	4313      	orrs	r3, r2
 800aeda:	d039      	beq.n	800af50 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800aedc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aee2:	2b03      	cmp	r3, #3
 800aee4:	d81c      	bhi.n	800af20 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800aee6:	a201      	add	r2, pc, #4	; (adr r2, 800aeec <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800aee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeec:	0800af29 	.word	0x0800af29
 800aef0:	0800aefd 	.word	0x0800aefd
 800aef4:	0800af0b 	.word	0x0800af0b
 800aef8:	0800af29 	.word	0x0800af29
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aefc:	4b9f      	ldr	r3, [pc, #636]	; (800b17c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aefe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af00:	4a9e      	ldr	r2, [pc, #632]	; (800b17c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800af08:	e00f      	b.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800af0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af0e:	3308      	adds	r3, #8
 800af10:	2102      	movs	r1, #2
 800af12:	4618      	mov	r0, r3
 800af14:	f001 ff0a 	bl	800cd2c <RCCEx_PLL2_Config>
 800af18:	4603      	mov	r3, r0
 800af1a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800af1e:	e004      	b.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800af20:	2301      	movs	r3, #1
 800af22:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800af26:	e000      	b.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800af28:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af2a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d10a      	bne.n	800af48 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800af32:	4b92      	ldr	r3, [pc, #584]	; (800b17c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af36:	f023 0103 	bic.w	r1, r3, #3
 800af3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af40:	4a8e      	ldr	r2, [pc, #568]	; (800b17c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af42:	430b      	orrs	r3, r1
 800af44:	64d3      	str	r3, [r2, #76]	; 0x4c
 800af46:	e003      	b.n	800af50 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af48:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af4c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800af50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af58:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800af5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800af60:	2300      	movs	r3, #0
 800af62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800af66:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800af6a:	460b      	mov	r3, r1
 800af6c:	4313      	orrs	r3, r2
 800af6e:	f000 8099 	beq.w	800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800af72:	4b83      	ldr	r3, [pc, #524]	; (800b180 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	4a82      	ldr	r2, [pc, #520]	; (800b180 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800af78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af7c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800af7e:	f7f8 fd67 	bl	8003a50 <HAL_GetTick>
 800af82:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800af86:	e00b      	b.n	800afa0 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af88:	f7f8 fd62 	bl	8003a50 <HAL_GetTick>
 800af8c:	4602      	mov	r2, r0
 800af8e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800af92:	1ad3      	subs	r3, r2, r3
 800af94:	2b64      	cmp	r3, #100	; 0x64
 800af96:	d903      	bls.n	800afa0 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800af98:	2303      	movs	r3, #3
 800af9a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800af9e:	e005      	b.n	800afac <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800afa0:	4b77      	ldr	r3, [pc, #476]	; (800b180 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d0ed      	beq.n	800af88 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800afac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d173      	bne.n	800b09c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800afb4:	4b71      	ldr	r3, [pc, #452]	; (800b17c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afb6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800afb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afbc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800afc0:	4053      	eors	r3, r2
 800afc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d015      	beq.n	800aff6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800afca:	4b6c      	ldr	r3, [pc, #432]	; (800b17c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800afd2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800afd6:	4b69      	ldr	r3, [pc, #420]	; (800b17c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afda:	4a68      	ldr	r2, [pc, #416]	; (800b17c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800afe0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800afe2:	4b66      	ldr	r3, [pc, #408]	; (800b17c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afe6:	4a65      	ldr	r2, [pc, #404]	; (800b17c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afe8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800afec:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800afee:	4a63      	ldr	r2, [pc, #396]	; (800b17c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aff0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800aff4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800aff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800affa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800affe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b002:	d118      	bne.n	800b036 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b004:	f7f8 fd24 	bl	8003a50 <HAL_GetTick>
 800b008:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b00c:	e00d      	b.n	800b02a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b00e:	f7f8 fd1f 	bl	8003a50 <HAL_GetTick>
 800b012:	4602      	mov	r2, r0
 800b014:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b018:	1ad2      	subs	r2, r2, r3
 800b01a:	f241 3388 	movw	r3, #5000	; 0x1388
 800b01e:	429a      	cmp	r2, r3
 800b020:	d903      	bls.n	800b02a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800b022:	2303      	movs	r3, #3
 800b024:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800b028:	e005      	b.n	800b036 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b02a:	4b54      	ldr	r3, [pc, #336]	; (800b17c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b02c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b02e:	f003 0302 	and.w	r3, r3, #2
 800b032:	2b00      	cmp	r3, #0
 800b034:	d0eb      	beq.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800b036:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d129      	bne.n	800b092 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b03e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b042:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b04a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b04e:	d10e      	bne.n	800b06e <HAL_RCCEx_PeriphCLKConfig+0x846>
 800b050:	4b4a      	ldr	r3, [pc, #296]	; (800b17c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b052:	691b      	ldr	r3, [r3, #16]
 800b054:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b058:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b05c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b060:	091a      	lsrs	r2, r3, #4
 800b062:	4b48      	ldr	r3, [pc, #288]	; (800b184 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800b064:	4013      	ands	r3, r2
 800b066:	4a45      	ldr	r2, [pc, #276]	; (800b17c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b068:	430b      	orrs	r3, r1
 800b06a:	6113      	str	r3, [r2, #16]
 800b06c:	e005      	b.n	800b07a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800b06e:	4b43      	ldr	r3, [pc, #268]	; (800b17c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b070:	691b      	ldr	r3, [r3, #16]
 800b072:	4a42      	ldr	r2, [pc, #264]	; (800b17c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b074:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b078:	6113      	str	r3, [r2, #16]
 800b07a:	4b40      	ldr	r3, [pc, #256]	; (800b17c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b07c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b07e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b082:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b086:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b08a:	4a3c      	ldr	r2, [pc, #240]	; (800b17c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b08c:	430b      	orrs	r3, r1
 800b08e:	6713      	str	r3, [r2, #112]	; 0x70
 800b090:	e008      	b.n	800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b092:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b096:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800b09a:	e003      	b.n	800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b09c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b0a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ac:	f002 0301 	and.w	r3, r2, #1
 800b0b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b0ba:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b0be:	460b      	mov	r3, r1
 800b0c0:	4313      	orrs	r3, r2
 800b0c2:	f000 808f 	beq.w	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b0c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b0cc:	2b28      	cmp	r3, #40	; 0x28
 800b0ce:	d871      	bhi.n	800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800b0d0:	a201      	add	r2, pc, #4	; (adr r2, 800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800b0d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0d6:	bf00      	nop
 800b0d8:	0800b1bd 	.word	0x0800b1bd
 800b0dc:	0800b1b5 	.word	0x0800b1b5
 800b0e0:	0800b1b5 	.word	0x0800b1b5
 800b0e4:	0800b1b5 	.word	0x0800b1b5
 800b0e8:	0800b1b5 	.word	0x0800b1b5
 800b0ec:	0800b1b5 	.word	0x0800b1b5
 800b0f0:	0800b1b5 	.word	0x0800b1b5
 800b0f4:	0800b1b5 	.word	0x0800b1b5
 800b0f8:	0800b189 	.word	0x0800b189
 800b0fc:	0800b1b5 	.word	0x0800b1b5
 800b100:	0800b1b5 	.word	0x0800b1b5
 800b104:	0800b1b5 	.word	0x0800b1b5
 800b108:	0800b1b5 	.word	0x0800b1b5
 800b10c:	0800b1b5 	.word	0x0800b1b5
 800b110:	0800b1b5 	.word	0x0800b1b5
 800b114:	0800b1b5 	.word	0x0800b1b5
 800b118:	0800b19f 	.word	0x0800b19f
 800b11c:	0800b1b5 	.word	0x0800b1b5
 800b120:	0800b1b5 	.word	0x0800b1b5
 800b124:	0800b1b5 	.word	0x0800b1b5
 800b128:	0800b1b5 	.word	0x0800b1b5
 800b12c:	0800b1b5 	.word	0x0800b1b5
 800b130:	0800b1b5 	.word	0x0800b1b5
 800b134:	0800b1b5 	.word	0x0800b1b5
 800b138:	0800b1bd 	.word	0x0800b1bd
 800b13c:	0800b1b5 	.word	0x0800b1b5
 800b140:	0800b1b5 	.word	0x0800b1b5
 800b144:	0800b1b5 	.word	0x0800b1b5
 800b148:	0800b1b5 	.word	0x0800b1b5
 800b14c:	0800b1b5 	.word	0x0800b1b5
 800b150:	0800b1b5 	.word	0x0800b1b5
 800b154:	0800b1b5 	.word	0x0800b1b5
 800b158:	0800b1bd 	.word	0x0800b1bd
 800b15c:	0800b1b5 	.word	0x0800b1b5
 800b160:	0800b1b5 	.word	0x0800b1b5
 800b164:	0800b1b5 	.word	0x0800b1b5
 800b168:	0800b1b5 	.word	0x0800b1b5
 800b16c:	0800b1b5 	.word	0x0800b1b5
 800b170:	0800b1b5 	.word	0x0800b1b5
 800b174:	0800b1b5 	.word	0x0800b1b5
 800b178:	0800b1bd 	.word	0x0800b1bd
 800b17c:	58024400 	.word	0x58024400
 800b180:	58024800 	.word	0x58024800
 800b184:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b188:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b18c:	3308      	adds	r3, #8
 800b18e:	2101      	movs	r1, #1
 800b190:	4618      	mov	r0, r3
 800b192:	f001 fdcb 	bl	800cd2c <RCCEx_PLL2_Config>
 800b196:	4603      	mov	r3, r0
 800b198:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b19c:	e00f      	b.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b19e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1a2:	3328      	adds	r3, #40	; 0x28
 800b1a4:	2101      	movs	r1, #1
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f001 fe72 	bl	800ce90 <RCCEx_PLL3_Config>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b1b2:	e004      	b.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b1ba:	e000      	b.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800b1bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d10a      	bne.n	800b1dc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b1c6:	4bbf      	ldr	r3, [pc, #764]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b1c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1ca:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b1ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b1d4:	4abb      	ldr	r2, [pc, #748]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b1d6:	430b      	orrs	r3, r1
 800b1d8:	6553      	str	r3, [r2, #84]	; 0x54
 800b1da:	e003      	b.n	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b1e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b1e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ec:	f002 0302 	and.w	r3, r2, #2
 800b1f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b1fa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b1fe:	460b      	mov	r3, r1
 800b200:	4313      	orrs	r3, r2
 800b202:	d041      	beq.n	800b288 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b20a:	2b05      	cmp	r3, #5
 800b20c:	d824      	bhi.n	800b258 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800b20e:	a201      	add	r2, pc, #4	; (adr r2, 800b214 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800b210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b214:	0800b261 	.word	0x0800b261
 800b218:	0800b22d 	.word	0x0800b22d
 800b21c:	0800b243 	.word	0x0800b243
 800b220:	0800b261 	.word	0x0800b261
 800b224:	0800b261 	.word	0x0800b261
 800b228:	0800b261 	.word	0x0800b261
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b22c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b230:	3308      	adds	r3, #8
 800b232:	2101      	movs	r1, #1
 800b234:	4618      	mov	r0, r3
 800b236:	f001 fd79 	bl	800cd2c <RCCEx_PLL2_Config>
 800b23a:	4603      	mov	r3, r0
 800b23c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b240:	e00f      	b.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b242:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b246:	3328      	adds	r3, #40	; 0x28
 800b248:	2101      	movs	r1, #1
 800b24a:	4618      	mov	r0, r3
 800b24c:	f001 fe20 	bl	800ce90 <RCCEx_PLL3_Config>
 800b250:	4603      	mov	r3, r0
 800b252:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b256:	e004      	b.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b258:	2301      	movs	r3, #1
 800b25a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b25e:	e000      	b.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800b260:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b262:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b266:	2b00      	cmp	r3, #0
 800b268:	d10a      	bne.n	800b280 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b26a:	4b96      	ldr	r3, [pc, #600]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b26c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b26e:	f023 0107 	bic.w	r1, r3, #7
 800b272:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b278:	4a92      	ldr	r2, [pc, #584]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b27a:	430b      	orrs	r3, r1
 800b27c:	6553      	str	r3, [r2, #84]	; 0x54
 800b27e:	e003      	b.n	800b288 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b280:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b284:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b288:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b290:	f002 0304 	and.w	r3, r2, #4
 800b294:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b298:	2300      	movs	r3, #0
 800b29a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b29e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b2a2:	460b      	mov	r3, r1
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	d044      	beq.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b2a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2b0:	2b05      	cmp	r3, #5
 800b2b2:	d825      	bhi.n	800b300 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800b2b4:	a201      	add	r2, pc, #4	; (adr r2, 800b2bc <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800b2b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ba:	bf00      	nop
 800b2bc:	0800b309 	.word	0x0800b309
 800b2c0:	0800b2d5 	.word	0x0800b2d5
 800b2c4:	0800b2eb 	.word	0x0800b2eb
 800b2c8:	0800b309 	.word	0x0800b309
 800b2cc:	0800b309 	.word	0x0800b309
 800b2d0:	0800b309 	.word	0x0800b309
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b2d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2d8:	3308      	adds	r3, #8
 800b2da:	2101      	movs	r1, #1
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f001 fd25 	bl	800cd2c <RCCEx_PLL2_Config>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b2e8:	e00f      	b.n	800b30a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b2ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2ee:	3328      	adds	r3, #40	; 0x28
 800b2f0:	2101      	movs	r1, #1
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f001 fdcc 	bl	800ce90 <RCCEx_PLL3_Config>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b2fe:	e004      	b.n	800b30a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b300:	2301      	movs	r3, #1
 800b302:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b306:	e000      	b.n	800b30a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800b308:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b30a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d10b      	bne.n	800b32a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b312:	4b6c      	ldr	r3, [pc, #432]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b316:	f023 0107 	bic.w	r1, r3, #7
 800b31a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b31e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b322:	4a68      	ldr	r2, [pc, #416]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b324:	430b      	orrs	r3, r1
 800b326:	6593      	str	r3, [r2, #88]	; 0x58
 800b328:	e003      	b.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b32a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b32e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b332:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b33a:	f002 0320 	and.w	r3, r2, #32
 800b33e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b342:	2300      	movs	r3, #0
 800b344:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b348:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b34c:	460b      	mov	r3, r1
 800b34e:	4313      	orrs	r3, r2
 800b350:	d055      	beq.n	800b3fe <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b352:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b356:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b35a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b35e:	d033      	beq.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800b360:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b364:	d82c      	bhi.n	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b36a:	d02f      	beq.n	800b3cc <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b36c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b370:	d826      	bhi.n	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b372:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b376:	d02b      	beq.n	800b3d0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b378:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b37c:	d820      	bhi.n	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b37e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b382:	d012      	beq.n	800b3aa <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800b384:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b388:	d81a      	bhi.n	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d022      	beq.n	800b3d4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b38e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b392:	d115      	bne.n	800b3c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b394:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b398:	3308      	adds	r3, #8
 800b39a:	2100      	movs	r1, #0
 800b39c:	4618      	mov	r0, r3
 800b39e:	f001 fcc5 	bl	800cd2c <RCCEx_PLL2_Config>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b3a8:	e015      	b.n	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b3aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3ae:	3328      	adds	r3, #40	; 0x28
 800b3b0:	2102      	movs	r1, #2
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f001 fd6c 	bl	800ce90 <RCCEx_PLL3_Config>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b3be:	e00a      	b.n	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b3c6:	e006      	b.n	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b3c8:	bf00      	nop
 800b3ca:	e004      	b.n	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b3cc:	bf00      	nop
 800b3ce:	e002      	b.n	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b3d0:	bf00      	nop
 800b3d2:	e000      	b.n	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b3d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d10b      	bne.n	800b3f6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b3de:	4b39      	ldr	r3, [pc, #228]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b3e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3e2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b3e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b3ee:	4a35      	ldr	r2, [pc, #212]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b3f0:	430b      	orrs	r3, r1
 800b3f2:	6553      	str	r3, [r2, #84]	; 0x54
 800b3f4:	e003      	b.n	800b3fe <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3f6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b3fa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b3fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b406:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b40a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b40e:	2300      	movs	r3, #0
 800b410:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b414:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b418:	460b      	mov	r3, r1
 800b41a:	4313      	orrs	r3, r2
 800b41c:	d058      	beq.n	800b4d0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b41e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b422:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b426:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b42a:	d033      	beq.n	800b494 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800b42c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b430:	d82c      	bhi.n	800b48c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b436:	d02f      	beq.n	800b498 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b43c:	d826      	bhi.n	800b48c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b43e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b442:	d02b      	beq.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b444:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b448:	d820      	bhi.n	800b48c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b44a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b44e:	d012      	beq.n	800b476 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800b450:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b454:	d81a      	bhi.n	800b48c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b456:	2b00      	cmp	r3, #0
 800b458:	d022      	beq.n	800b4a0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b45a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b45e:	d115      	bne.n	800b48c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b460:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b464:	3308      	adds	r3, #8
 800b466:	2100      	movs	r1, #0
 800b468:	4618      	mov	r0, r3
 800b46a:	f001 fc5f 	bl	800cd2c <RCCEx_PLL2_Config>
 800b46e:	4603      	mov	r3, r0
 800b470:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b474:	e015      	b.n	800b4a2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b476:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b47a:	3328      	adds	r3, #40	; 0x28
 800b47c:	2102      	movs	r1, #2
 800b47e:	4618      	mov	r0, r3
 800b480:	f001 fd06 	bl	800ce90 <RCCEx_PLL3_Config>
 800b484:	4603      	mov	r3, r0
 800b486:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b48a:	e00a      	b.n	800b4a2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b48c:	2301      	movs	r3, #1
 800b48e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b492:	e006      	b.n	800b4a2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b494:	bf00      	nop
 800b496:	e004      	b.n	800b4a2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b498:	bf00      	nop
 800b49a:	e002      	b.n	800b4a2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b49c:	bf00      	nop
 800b49e:	e000      	b.n	800b4a2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b4a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4a2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d10e      	bne.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b4aa:	4b06      	ldr	r3, [pc, #24]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b4ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4ae:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b4b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b4ba:	4a02      	ldr	r2, [pc, #8]	; (800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b4bc:	430b      	orrs	r3, r1
 800b4be:	6593      	str	r3, [r2, #88]	; 0x58
 800b4c0:	e006      	b.n	800b4d0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800b4c2:	bf00      	nop
 800b4c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4cc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b4d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b4dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b4e6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b4ea:	460b      	mov	r3, r1
 800b4ec:	4313      	orrs	r3, r2
 800b4ee:	d055      	beq.n	800b59c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b4f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b4f8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b4fc:	d033      	beq.n	800b566 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800b4fe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b502:	d82c      	bhi.n	800b55e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b504:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b508:	d02f      	beq.n	800b56a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b50a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b50e:	d826      	bhi.n	800b55e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b510:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b514:	d02b      	beq.n	800b56e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b516:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b51a:	d820      	bhi.n	800b55e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b51c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b520:	d012      	beq.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800b522:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b526:	d81a      	bhi.n	800b55e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d022      	beq.n	800b572 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b52c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b530:	d115      	bne.n	800b55e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b532:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b536:	3308      	adds	r3, #8
 800b538:	2100      	movs	r1, #0
 800b53a:	4618      	mov	r0, r3
 800b53c:	f001 fbf6 	bl	800cd2c <RCCEx_PLL2_Config>
 800b540:	4603      	mov	r3, r0
 800b542:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b546:	e015      	b.n	800b574 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b548:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b54c:	3328      	adds	r3, #40	; 0x28
 800b54e:	2102      	movs	r1, #2
 800b550:	4618      	mov	r0, r3
 800b552:	f001 fc9d 	bl	800ce90 <RCCEx_PLL3_Config>
 800b556:	4603      	mov	r3, r0
 800b558:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b55c:	e00a      	b.n	800b574 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b55e:	2301      	movs	r3, #1
 800b560:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b564:	e006      	b.n	800b574 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b566:	bf00      	nop
 800b568:	e004      	b.n	800b574 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b56a:	bf00      	nop
 800b56c:	e002      	b.n	800b574 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b56e:	bf00      	nop
 800b570:	e000      	b.n	800b574 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b572:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b574:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d10b      	bne.n	800b594 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b57c:	4ba0      	ldr	r3, [pc, #640]	; (800b800 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b57e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b580:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b584:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b588:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b58c:	4a9c      	ldr	r2, [pc, #624]	; (800b800 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b58e:	430b      	orrs	r3, r1
 800b590:	6593      	str	r3, [r2, #88]	; 0x58
 800b592:	e003      	b.n	800b59c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b594:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b598:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800b59c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5a4:	f002 0308 	and.w	r3, r2, #8
 800b5a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b5b2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b5b6:	460b      	mov	r3, r1
 800b5b8:	4313      	orrs	r3, r2
 800b5ba:	d01e      	beq.n	800b5fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800b5bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5c8:	d10c      	bne.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b5ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5ce:	3328      	adds	r3, #40	; 0x28
 800b5d0:	2102      	movs	r1, #2
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f001 fc5c 	bl	800ce90 <RCCEx_PLL3_Config>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d002      	beq.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800b5de:	2301      	movs	r3, #1
 800b5e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800b5e4:	4b86      	ldr	r3, [pc, #536]	; (800b800 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b5e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5e8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b5ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5f4:	4a82      	ldr	r2, [pc, #520]	; (800b800 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b5f6:	430b      	orrs	r3, r1
 800b5f8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b5fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b602:	f002 0310 	and.w	r3, r2, #16
 800b606:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b60a:	2300      	movs	r3, #0
 800b60c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b610:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b614:	460b      	mov	r3, r1
 800b616:	4313      	orrs	r3, r2
 800b618:	d01e      	beq.n	800b658 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b61a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b61e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b622:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b626:	d10c      	bne.n	800b642 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b628:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b62c:	3328      	adds	r3, #40	; 0x28
 800b62e:	2102      	movs	r1, #2
 800b630:	4618      	mov	r0, r3
 800b632:	f001 fc2d 	bl	800ce90 <RCCEx_PLL3_Config>
 800b636:	4603      	mov	r3, r0
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d002      	beq.n	800b642 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800b63c:	2301      	movs	r3, #1
 800b63e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b642:	4b6f      	ldr	r3, [pc, #444]	; (800b800 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b646:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b64a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b64e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b652:	4a6b      	ldr	r2, [pc, #428]	; (800b800 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b654:	430b      	orrs	r3, r1
 800b656:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b658:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b660:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b664:	67bb      	str	r3, [r7, #120]	; 0x78
 800b666:	2300      	movs	r3, #0
 800b668:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b66a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b66e:	460b      	mov	r3, r1
 800b670:	4313      	orrs	r3, r2
 800b672:	d03e      	beq.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b674:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b678:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b67c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b680:	d022      	beq.n	800b6c8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b682:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b686:	d81b      	bhi.n	800b6c0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d003      	beq.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800b68c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b690:	d00b      	beq.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800b692:	e015      	b.n	800b6c0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b694:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b698:	3308      	adds	r3, #8
 800b69a:	2100      	movs	r1, #0
 800b69c:	4618      	mov	r0, r3
 800b69e:	f001 fb45 	bl	800cd2c <RCCEx_PLL2_Config>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b6a8:	e00f      	b.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b6aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6ae:	3328      	adds	r3, #40	; 0x28
 800b6b0:	2102      	movs	r1, #2
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f001 fbec 	bl	800ce90 <RCCEx_PLL3_Config>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b6be:	e004      	b.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6c0:	2301      	movs	r3, #1
 800b6c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b6c6:	e000      	b.n	800b6ca <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800b6c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d10b      	bne.n	800b6ea <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b6d2:	4b4b      	ldr	r3, [pc, #300]	; (800b800 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b6d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6d6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b6da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b6e2:	4a47      	ldr	r2, [pc, #284]	; (800b800 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b6e4:	430b      	orrs	r3, r1
 800b6e6:	6593      	str	r3, [r2, #88]	; 0x58
 800b6e8:	e003      	b.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6ea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6ee:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b6f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6fa:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b6fe:	673b      	str	r3, [r7, #112]	; 0x70
 800b700:	2300      	movs	r3, #0
 800b702:	677b      	str	r3, [r7, #116]	; 0x74
 800b704:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b708:	460b      	mov	r3, r1
 800b70a:	4313      	orrs	r3, r2
 800b70c:	d03b      	beq.n	800b786 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b70e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b712:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b716:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b71a:	d01f      	beq.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b71c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b720:	d818      	bhi.n	800b754 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800b722:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b726:	d003      	beq.n	800b730 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800b728:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b72c:	d007      	beq.n	800b73e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800b72e:	e011      	b.n	800b754 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b730:	4b33      	ldr	r3, [pc, #204]	; (800b800 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b734:	4a32      	ldr	r2, [pc, #200]	; (800b800 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b736:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b73a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b73c:	e00f      	b.n	800b75e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b73e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b742:	3328      	adds	r3, #40	; 0x28
 800b744:	2101      	movs	r1, #1
 800b746:	4618      	mov	r0, r3
 800b748:	f001 fba2 	bl	800ce90 <RCCEx_PLL3_Config>
 800b74c:	4603      	mov	r3, r0
 800b74e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800b752:	e004      	b.n	800b75e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b754:	2301      	movs	r3, #1
 800b756:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b75a:	e000      	b.n	800b75e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800b75c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b75e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b762:	2b00      	cmp	r3, #0
 800b764:	d10b      	bne.n	800b77e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b766:	4b26      	ldr	r3, [pc, #152]	; (800b800 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b76a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b76e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b772:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b776:	4a22      	ldr	r2, [pc, #136]	; (800b800 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b778:	430b      	orrs	r3, r1
 800b77a:	6553      	str	r3, [r2, #84]	; 0x54
 800b77c:	e003      	b.n	800b786 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b77e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b782:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b786:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b78e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b792:	66bb      	str	r3, [r7, #104]	; 0x68
 800b794:	2300      	movs	r3, #0
 800b796:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b798:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b79c:	460b      	mov	r3, r1
 800b79e:	4313      	orrs	r3, r2
 800b7a0:	d034      	beq.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b7a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d003      	beq.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800b7ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7b0:	d007      	beq.n	800b7c2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800b7b2:	e011      	b.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7b4:	4b12      	ldr	r3, [pc, #72]	; (800b800 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7b8:	4a11      	ldr	r2, [pc, #68]	; (800b800 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b7ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b7c0:	e00e      	b.n	800b7e0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b7c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7c6:	3308      	adds	r3, #8
 800b7c8:	2102      	movs	r1, #2
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f001 faae 	bl	800cd2c <RCCEx_PLL2_Config>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b7d6:	e003      	b.n	800b7e0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800b7d8:	2301      	movs	r3, #1
 800b7da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b7de:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d10d      	bne.n	800b804 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b7e8:	4b05      	ldr	r3, [pc, #20]	; (800b800 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b7ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b7f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7f6:	4a02      	ldr	r2, [pc, #8]	; (800b800 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b7f8:	430b      	orrs	r3, r1
 800b7fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b7fc:	e006      	b.n	800b80c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800b7fe:	bf00      	nop
 800b800:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b804:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b808:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b80c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b814:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800b818:	663b      	str	r3, [r7, #96]	; 0x60
 800b81a:	2300      	movs	r3, #0
 800b81c:	667b      	str	r3, [r7, #100]	; 0x64
 800b81e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800b822:	460b      	mov	r3, r1
 800b824:	4313      	orrs	r3, r2
 800b826:	d00c      	beq.n	800b842 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b82c:	3328      	adds	r3, #40	; 0x28
 800b82e:	2102      	movs	r1, #2
 800b830:	4618      	mov	r0, r3
 800b832:	f001 fb2d 	bl	800ce90 <RCCEx_PLL3_Config>
 800b836:	4603      	mov	r3, r0
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d002      	beq.n	800b842 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800b83c:	2301      	movs	r3, #1
 800b83e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b842:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800b84e:	65bb      	str	r3, [r7, #88]	; 0x58
 800b850:	2300      	movs	r3, #0
 800b852:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b854:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800b858:	460b      	mov	r3, r1
 800b85a:	4313      	orrs	r3, r2
 800b85c:	d036      	beq.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b85e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b862:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b864:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b868:	d018      	beq.n	800b89c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800b86a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b86e:	d811      	bhi.n	800b894 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b870:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b874:	d014      	beq.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800b876:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b87a:	d80b      	bhi.n	800b894 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d011      	beq.n	800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800b880:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b884:	d106      	bne.n	800b894 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b886:	4bb7      	ldr	r3, [pc, #732]	; (800bb64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b88a:	4ab6      	ldr	r2, [pc, #728]	; (800bb64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b88c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b890:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b892:	e008      	b.n	800b8a6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b894:	2301      	movs	r3, #1
 800b896:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b89a:	e004      	b.n	800b8a6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b89c:	bf00      	nop
 800b89e:	e002      	b.n	800b8a6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b8a0:	bf00      	nop
 800b8a2:	e000      	b.n	800b8a6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b8a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8a6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d10a      	bne.n	800b8c4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b8ae:	4bad      	ldr	r3, [pc, #692]	; (800bb64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b8b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8bc:	4aa9      	ldr	r2, [pc, #676]	; (800bb64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8be:	430b      	orrs	r3, r1
 800b8c0:	6553      	str	r3, [r2, #84]	; 0x54
 800b8c2:	e003      	b.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8c8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b8cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800b8d8:	653b      	str	r3, [r7, #80]	; 0x50
 800b8da:	2300      	movs	r3, #0
 800b8dc:	657b      	str	r3, [r7, #84]	; 0x54
 800b8de:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800b8e2:	460b      	mov	r3, r1
 800b8e4:	4313      	orrs	r3, r2
 800b8e6:	d009      	beq.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b8e8:	4b9e      	ldr	r3, [pc, #632]	; (800bb64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8ec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b8f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8f6:	4a9b      	ldr	r2, [pc, #620]	; (800bb64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8f8:	430b      	orrs	r3, r1
 800b8fa:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b8fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b904:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800b908:	64bb      	str	r3, [r7, #72]	; 0x48
 800b90a:	2300      	movs	r3, #0
 800b90c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b90e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800b912:	460b      	mov	r3, r1
 800b914:	4313      	orrs	r3, r2
 800b916:	d009      	beq.n	800b92c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b918:	4b92      	ldr	r3, [pc, #584]	; (800bb64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b91a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b91c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800b920:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b924:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b926:	4a8f      	ldr	r2, [pc, #572]	; (800bb64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b928:	430b      	orrs	r3, r1
 800b92a:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b92c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b930:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b934:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800b938:	643b      	str	r3, [r7, #64]	; 0x40
 800b93a:	2300      	movs	r3, #0
 800b93c:	647b      	str	r3, [r7, #68]	; 0x44
 800b93e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b942:	460b      	mov	r3, r1
 800b944:	4313      	orrs	r3, r2
 800b946:	d00e      	beq.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b948:	4b86      	ldr	r3, [pc, #536]	; (800bb64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b94a:	691b      	ldr	r3, [r3, #16]
 800b94c:	4a85      	ldr	r2, [pc, #532]	; (800bb64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b94e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b952:	6113      	str	r3, [r2, #16]
 800b954:	4b83      	ldr	r3, [pc, #524]	; (800bb64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b956:	6919      	ldr	r1, [r3, #16]
 800b958:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b95c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b960:	4a80      	ldr	r2, [pc, #512]	; (800bb64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b962:	430b      	orrs	r3, r1
 800b964:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b966:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b96e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800b972:	63bb      	str	r3, [r7, #56]	; 0x38
 800b974:	2300      	movs	r3, #0
 800b976:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b978:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b97c:	460b      	mov	r3, r1
 800b97e:	4313      	orrs	r3, r2
 800b980:	d009      	beq.n	800b996 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b982:	4b78      	ldr	r3, [pc, #480]	; (800bb64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b986:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b98a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b98e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b990:	4a74      	ldr	r2, [pc, #464]	; (800bb64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b992:	430b      	orrs	r3, r1
 800b994:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b996:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b99e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800b9a2:	633b      	str	r3, [r7, #48]	; 0x30
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	637b      	str	r3, [r7, #52]	; 0x34
 800b9a8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800b9ac:	460b      	mov	r3, r1
 800b9ae:	4313      	orrs	r3, r2
 800b9b0:	d00a      	beq.n	800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b9b2:	4b6c      	ldr	r3, [pc, #432]	; (800bb64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9b6:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800b9ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9c2:	4a68      	ldr	r2, [pc, #416]	; (800bb64 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9c4:	430b      	orrs	r3, r1
 800b9c6:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b9c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d0:	2100      	movs	r1, #0
 800b9d2:	62b9      	str	r1, [r7, #40]	; 0x28
 800b9d4:	f003 0301 	and.w	r3, r3, #1
 800b9d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b9da:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800b9de:	460b      	mov	r3, r1
 800b9e0:	4313      	orrs	r3, r2
 800b9e2:	d011      	beq.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b9e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9e8:	3308      	adds	r3, #8
 800b9ea:	2100      	movs	r1, #0
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f001 f99d 	bl	800cd2c <RCCEx_PLL2_Config>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b9f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d003      	beq.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba04:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ba08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba10:	2100      	movs	r1, #0
 800ba12:	6239      	str	r1, [r7, #32]
 800ba14:	f003 0302 	and.w	r3, r3, #2
 800ba18:	627b      	str	r3, [r7, #36]	; 0x24
 800ba1a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ba1e:	460b      	mov	r3, r1
 800ba20:	4313      	orrs	r3, r2
 800ba22:	d011      	beq.n	800ba48 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba28:	3308      	adds	r3, #8
 800ba2a:	2101      	movs	r1, #1
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f001 f97d 	bl	800cd2c <RCCEx_PLL2_Config>
 800ba32:	4603      	mov	r3, r0
 800ba34:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ba38:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d003      	beq.n	800ba48 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba44:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ba48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba50:	2100      	movs	r1, #0
 800ba52:	61b9      	str	r1, [r7, #24]
 800ba54:	f003 0304 	and.w	r3, r3, #4
 800ba58:	61fb      	str	r3, [r7, #28]
 800ba5a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ba5e:	460b      	mov	r3, r1
 800ba60:	4313      	orrs	r3, r2
 800ba62:	d011      	beq.n	800ba88 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ba64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba68:	3308      	adds	r3, #8
 800ba6a:	2102      	movs	r1, #2
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f001 f95d 	bl	800cd2c <RCCEx_PLL2_Config>
 800ba72:	4603      	mov	r3, r0
 800ba74:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ba78:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d003      	beq.n	800ba88 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba80:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba84:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ba88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba90:	2100      	movs	r1, #0
 800ba92:	6139      	str	r1, [r7, #16]
 800ba94:	f003 0308 	and.w	r3, r3, #8
 800ba98:	617b      	str	r3, [r7, #20]
 800ba9a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ba9e:	460b      	mov	r3, r1
 800baa0:	4313      	orrs	r3, r2
 800baa2:	d011      	beq.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800baa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baa8:	3328      	adds	r3, #40	; 0x28
 800baaa:	2100      	movs	r1, #0
 800baac:	4618      	mov	r0, r3
 800baae:	f001 f9ef 	bl	800ce90 <RCCEx_PLL3_Config>
 800bab2:	4603      	mov	r3, r0
 800bab4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800bab8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800babc:	2b00      	cmp	r3, #0
 800babe:	d003      	beq.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bac0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bac4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad0:	2100      	movs	r1, #0
 800bad2:	60b9      	str	r1, [r7, #8]
 800bad4:	f003 0310 	and.w	r3, r3, #16
 800bad8:	60fb      	str	r3, [r7, #12]
 800bada:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bade:	460b      	mov	r3, r1
 800bae0:	4313      	orrs	r3, r2
 800bae2:	d011      	beq.n	800bb08 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bae8:	3328      	adds	r3, #40	; 0x28
 800baea:	2101      	movs	r1, #1
 800baec:	4618      	mov	r0, r3
 800baee:	f001 f9cf 	bl	800ce90 <RCCEx_PLL3_Config>
 800baf2:	4603      	mov	r3, r0
 800baf4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800baf8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d003      	beq.n	800bb08 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb04:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bb08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb10:	2100      	movs	r1, #0
 800bb12:	6039      	str	r1, [r7, #0]
 800bb14:	f003 0320 	and.w	r3, r3, #32
 800bb18:	607b      	str	r3, [r7, #4]
 800bb1a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bb1e:	460b      	mov	r3, r1
 800bb20:	4313      	orrs	r3, r2
 800bb22:	d011      	beq.n	800bb48 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bb24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb28:	3328      	adds	r3, #40	; 0x28
 800bb2a:	2102      	movs	r1, #2
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f001 f9af 	bl	800ce90 <RCCEx_PLL3_Config>
 800bb32:	4603      	mov	r3, r0
 800bb34:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bb38:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d003      	beq.n	800bb48 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb44:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800bb48:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d101      	bne.n	800bb54 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800bb50:	2300      	movs	r3, #0
 800bb52:	e000      	b.n	800bb56 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800bb54:	2301      	movs	r3, #1
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800bb5c:	46bd      	mov	sp, r7
 800bb5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bb62:	bf00      	nop
 800bb64:	58024400 	.word	0x58024400

0800bb68 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b090      	sub	sp, #64	; 0x40
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bb72:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb76:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800bb7a:	430b      	orrs	r3, r1
 800bb7c:	f040 8094 	bne.w	800bca8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800bb80:	4b9b      	ldr	r3, [pc, #620]	; (800bdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bb82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb84:	f003 0307 	and.w	r3, r3, #7
 800bb88:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb8c:	2b04      	cmp	r3, #4
 800bb8e:	f200 8087 	bhi.w	800bca0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800bb92:	a201      	add	r2, pc, #4	; (adr r2, 800bb98 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800bb94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb98:	0800bbad 	.word	0x0800bbad
 800bb9c:	0800bbd5 	.word	0x0800bbd5
 800bba0:	0800bbfd 	.word	0x0800bbfd
 800bba4:	0800bc99 	.word	0x0800bc99
 800bba8:	0800bc25 	.word	0x0800bc25
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bbac:	4b90      	ldr	r3, [pc, #576]	; (800bdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bbb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bbb8:	d108      	bne.n	800bbcc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bbba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f000 ff62 	bl	800ca88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bbc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbc8:	f000 bc93 	b.w	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bbcc:	2300      	movs	r3, #0
 800bbce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbd0:	f000 bc8f 	b.w	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bbd4:	4b86      	ldr	r3, [pc, #536]	; (800bdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bbdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bbe0:	d108      	bne.n	800bbf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bbe2:	f107 0318 	add.w	r3, r7, #24
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f000 fca6 	bl	800c538 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bbec:	69bb      	ldr	r3, [r7, #24]
 800bbee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bbf0:	f000 bc7f 	b.w	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbf8:	f000 bc7b 	b.w	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bbfc:	4b7c      	ldr	r3, [pc, #496]	; (800bdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bc04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc08:	d108      	bne.n	800bc1c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc0a:	f107 030c 	add.w	r3, r7, #12
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f000 fde6 	bl	800c7e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc18:	f000 bc6b 	b.w	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc20:	f000 bc67 	b.w	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bc24:	4b72      	ldr	r3, [pc, #456]	; (800bdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc28:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bc2c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bc2e:	4b70      	ldr	r3, [pc, #448]	; (800bdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	f003 0304 	and.w	r3, r3, #4
 800bc36:	2b04      	cmp	r3, #4
 800bc38:	d10c      	bne.n	800bc54 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800bc3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d109      	bne.n	800bc54 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc40:	4b6b      	ldr	r3, [pc, #428]	; (800bdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	08db      	lsrs	r3, r3, #3
 800bc46:	f003 0303 	and.w	r3, r3, #3
 800bc4a:	4a6a      	ldr	r2, [pc, #424]	; (800bdf4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800bc4c:	fa22 f303 	lsr.w	r3, r2, r3
 800bc50:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc52:	e01f      	b.n	800bc94 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bc54:	4b66      	ldr	r3, [pc, #408]	; (800bdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc60:	d106      	bne.n	800bc70 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800bc62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc68:	d102      	bne.n	800bc70 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bc6a:	4b63      	ldr	r3, [pc, #396]	; (800bdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800bc6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc6e:	e011      	b.n	800bc94 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bc70:	4b5f      	ldr	r3, [pc, #380]	; (800bdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc7c:	d106      	bne.n	800bc8c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800bc7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc84:	d102      	bne.n	800bc8c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bc86:	4b5d      	ldr	r3, [pc, #372]	; (800bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bc88:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc8a:	e003      	b.n	800bc94 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bc90:	f000 bc2f 	b.w	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bc94:	f000 bc2d 	b.w	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bc98:	4b59      	ldr	r3, [pc, #356]	; (800be00 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bc9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc9c:	f000 bc29 	b.w	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800bca0:	2300      	movs	r3, #0
 800bca2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bca4:	f000 bc25 	b.w	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800bca8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bcac:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800bcb0:	430b      	orrs	r3, r1
 800bcb2:	f040 80a7 	bne.w	800be04 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800bcb6:	4b4e      	ldr	r3, [pc, #312]	; (800bdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bcb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcba:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800bcbe:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bcc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bcc6:	d054      	beq.n	800bd72 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800bcc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bcce:	f200 808b 	bhi.w	800bde8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bcd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcd4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bcd8:	f000 8083 	beq.w	800bde2 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800bcdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcde:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bce2:	f200 8081 	bhi.w	800bde8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bcec:	d02f      	beq.n	800bd4e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800bcee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bcf4:	d878      	bhi.n	800bde8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bcf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d004      	beq.n	800bd06 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800bcfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcfe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bd02:	d012      	beq.n	800bd2a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800bd04:	e070      	b.n	800bde8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bd06:	4b3a      	ldr	r3, [pc, #232]	; (800bdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd12:	d107      	bne.n	800bd24 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bd14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f000 feb5 	bl	800ca88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bd1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd22:	e3e6      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd24:	2300      	movs	r3, #0
 800bd26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd28:	e3e3      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bd2a:	4b31      	ldr	r3, [pc, #196]	; (800bdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd36:	d107      	bne.n	800bd48 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd38:	f107 0318 	add.w	r3, r7, #24
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	f000 fbfb 	bl	800c538 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bd42:	69bb      	ldr	r3, [r7, #24]
 800bd44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd46:	e3d4      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd4c:	e3d1      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bd4e:	4b28      	ldr	r3, [pc, #160]	; (800bdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bd56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd5a:	d107      	bne.n	800bd6c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd5c:	f107 030c 	add.w	r3, r7, #12
 800bd60:	4618      	mov	r0, r3
 800bd62:	f000 fd3d 	bl	800c7e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd6a:	e3c2      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd70:	e3bf      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bd72:	4b1f      	ldr	r3, [pc, #124]	; (800bdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bd7a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bd7c:	4b1c      	ldr	r3, [pc, #112]	; (800bdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f003 0304 	and.w	r3, r3, #4
 800bd84:	2b04      	cmp	r3, #4
 800bd86:	d10c      	bne.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800bd88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d109      	bne.n	800bda2 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bd8e:	4b18      	ldr	r3, [pc, #96]	; (800bdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	08db      	lsrs	r3, r3, #3
 800bd94:	f003 0303 	and.w	r3, r3, #3
 800bd98:	4a16      	ldr	r2, [pc, #88]	; (800bdf4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800bd9a:	fa22 f303 	lsr.w	r3, r2, r3
 800bd9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bda0:	e01e      	b.n	800bde0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bda2:	4b13      	ldr	r3, [pc, #76]	; (800bdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdae:	d106      	bne.n	800bdbe <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800bdb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bdb6:	d102      	bne.n	800bdbe <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bdb8:	4b0f      	ldr	r3, [pc, #60]	; (800bdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800bdba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdbc:	e010      	b.n	800bde0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bdbe:	4b0c      	ldr	r3, [pc, #48]	; (800bdf0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bdc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bdca:	d106      	bne.n	800bdda <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800bdcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bdd2:	d102      	bne.n	800bdda <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bdd4:	4b09      	ldr	r3, [pc, #36]	; (800bdfc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bdd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdd8:	e002      	b.n	800bde0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bdda:	2300      	movs	r3, #0
 800bddc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bdde:	e388      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bde0:	e387      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bde2:	4b07      	ldr	r3, [pc, #28]	; (800be00 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bde4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bde6:	e384      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bde8:	2300      	movs	r3, #0
 800bdea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdec:	e381      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bdee:	bf00      	nop
 800bdf0:	58024400 	.word	0x58024400
 800bdf4:	03d09000 	.word	0x03d09000
 800bdf8:	003d0900 	.word	0x003d0900
 800bdfc:	02faf080 	.word	0x02faf080
 800be00:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800be04:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be08:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800be0c:	430b      	orrs	r3, r1
 800be0e:	f040 809c 	bne.w	800bf4a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800be12:	4b9e      	ldr	r3, [pc, #632]	; (800c08c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be16:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800be1a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800be1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800be22:	d054      	beq.n	800bece <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800be24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800be2a:	f200 808b 	bhi.w	800bf44 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800be2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be30:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800be34:	f000 8083 	beq.w	800bf3e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800be38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be3a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800be3e:	f200 8081 	bhi.w	800bf44 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800be42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be48:	d02f      	beq.n	800beaa <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800be4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be50:	d878      	bhi.n	800bf44 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800be52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be54:	2b00      	cmp	r3, #0
 800be56:	d004      	beq.n	800be62 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800be58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800be5e:	d012      	beq.n	800be86 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800be60:	e070      	b.n	800bf44 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800be62:	4b8a      	ldr	r3, [pc, #552]	; (800c08c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be6a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be6e:	d107      	bne.n	800be80 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800be70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be74:	4618      	mov	r0, r3
 800be76:	f000 fe07 	bl	800ca88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800be7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be7e:	e338      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be80:	2300      	movs	r3, #0
 800be82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be84:	e335      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800be86:	4b81      	ldr	r3, [pc, #516]	; (800c08c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be92:	d107      	bne.n	800bea4 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be94:	f107 0318 	add.w	r3, r7, #24
 800be98:	4618      	mov	r0, r3
 800be9a:	f000 fb4d 	bl	800c538 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800be9e:	69bb      	ldr	r3, [r7, #24]
 800bea0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bea2:	e326      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bea4:	2300      	movs	r3, #0
 800bea6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bea8:	e323      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800beaa:	4b78      	ldr	r3, [pc, #480]	; (800c08c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800beb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800beb6:	d107      	bne.n	800bec8 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800beb8:	f107 030c 	add.w	r3, r7, #12
 800bebc:	4618      	mov	r0, r3
 800bebe:	f000 fc8f 	bl	800c7e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bec6:	e314      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bec8:	2300      	movs	r3, #0
 800beca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800becc:	e311      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bece:	4b6f      	ldr	r3, [pc, #444]	; (800c08c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bed2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bed6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bed8:	4b6c      	ldr	r3, [pc, #432]	; (800c08c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	f003 0304 	and.w	r3, r3, #4
 800bee0:	2b04      	cmp	r3, #4
 800bee2:	d10c      	bne.n	800befe <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800bee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d109      	bne.n	800befe <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800beea:	4b68      	ldr	r3, [pc, #416]	; (800c08c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	08db      	lsrs	r3, r3, #3
 800bef0:	f003 0303 	and.w	r3, r3, #3
 800bef4:	4a66      	ldr	r2, [pc, #408]	; (800c090 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800bef6:	fa22 f303 	lsr.w	r3, r2, r3
 800befa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800befc:	e01e      	b.n	800bf3c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800befe:	4b63      	ldr	r3, [pc, #396]	; (800c08c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf0a:	d106      	bne.n	800bf1a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800bf0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf12:	d102      	bne.n	800bf1a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bf14:	4b5f      	ldr	r3, [pc, #380]	; (800c094 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800bf16:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf18:	e010      	b.n	800bf3c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bf1a:	4b5c      	ldr	r3, [pc, #368]	; (800c08c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf26:	d106      	bne.n	800bf36 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800bf28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf2e:	d102      	bne.n	800bf36 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bf30:	4b59      	ldr	r3, [pc, #356]	; (800c098 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bf32:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf34:	e002      	b.n	800bf3c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bf36:	2300      	movs	r3, #0
 800bf38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bf3a:	e2da      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bf3c:	e2d9      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bf3e:	4b57      	ldr	r3, [pc, #348]	; (800c09c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bf40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf42:	e2d6      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bf44:	2300      	movs	r3, #0
 800bf46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf48:	e2d3      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800bf4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf4e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800bf52:	430b      	orrs	r3, r1
 800bf54:	f040 80a7 	bne.w	800c0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800bf58:	4b4c      	ldr	r3, [pc, #304]	; (800c08c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf5c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800bf60:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bf62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bf68:	d055      	beq.n	800c016 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800bf6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bf70:	f200 8096 	bhi.w	800c0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bf74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf76:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bf7a:	f000 8084 	beq.w	800c086 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800bf7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf80:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bf84:	f200 808c 	bhi.w	800c0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bf88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf8e:	d030      	beq.n	800bff2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800bf90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf96:	f200 8083 	bhi.w	800c0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bf9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d004      	beq.n	800bfaa <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800bfa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfa6:	d012      	beq.n	800bfce <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800bfa8:	e07a      	b.n	800c0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bfaa:	4b38      	ldr	r3, [pc, #224]	; (800c08c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bfb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bfb6:	d107      	bne.n	800bfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bfb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f000 fd63 	bl	800ca88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bfc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bfc6:	e294      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfcc:	e291      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bfce:	4b2f      	ldr	r3, [pc, #188]	; (800c08c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bfd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bfda:	d107      	bne.n	800bfec <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bfdc:	f107 0318 	add.w	r3, r7, #24
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f000 faa9 	bl	800c538 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bfe6:	69bb      	ldr	r3, [r7, #24]
 800bfe8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bfea:	e282      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bfec:	2300      	movs	r3, #0
 800bfee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bff0:	e27f      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bff2:	4b26      	ldr	r3, [pc, #152]	; (800c08c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bffa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bffe:	d107      	bne.n	800c010 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c000:	f107 030c 	add.w	r3, r7, #12
 800c004:	4618      	mov	r0, r3
 800c006:	f000 fbeb 	bl	800c7e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c00e:	e270      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c010:	2300      	movs	r3, #0
 800c012:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c014:	e26d      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c016:	4b1d      	ldr	r3, [pc, #116]	; (800c08c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c01a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c01e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c020:	4b1a      	ldr	r3, [pc, #104]	; (800c08c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	f003 0304 	and.w	r3, r3, #4
 800c028:	2b04      	cmp	r3, #4
 800c02a:	d10c      	bne.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800c02c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d109      	bne.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c032:	4b16      	ldr	r3, [pc, #88]	; (800c08c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	08db      	lsrs	r3, r3, #3
 800c038:	f003 0303 	and.w	r3, r3, #3
 800c03c:	4a14      	ldr	r2, [pc, #80]	; (800c090 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c03e:	fa22 f303 	lsr.w	r3, r2, r3
 800c042:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c044:	e01e      	b.n	800c084 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c046:	4b11      	ldr	r3, [pc, #68]	; (800c08c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c04e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c052:	d106      	bne.n	800c062 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800c054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c056:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c05a:	d102      	bne.n	800c062 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c05c:	4b0d      	ldr	r3, [pc, #52]	; (800c094 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c05e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c060:	e010      	b.n	800c084 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c062:	4b0a      	ldr	r3, [pc, #40]	; (800c08c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c06a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c06e:	d106      	bne.n	800c07e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800c070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c072:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c076:	d102      	bne.n	800c07e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c078:	4b07      	ldr	r3, [pc, #28]	; (800c098 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c07a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c07c:	e002      	b.n	800c084 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c07e:	2300      	movs	r3, #0
 800c080:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c082:	e236      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c084:	e235      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c086:	4b05      	ldr	r3, [pc, #20]	; (800c09c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c088:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c08a:	e232      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c08c:	58024400 	.word	0x58024400
 800c090:	03d09000 	.word	0x03d09000
 800c094:	003d0900 	.word	0x003d0900
 800c098:	02faf080 	.word	0x02faf080
 800c09c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0a4:	e225      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c0a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0aa:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c0ae:	430b      	orrs	r3, r1
 800c0b0:	f040 8085 	bne.w	800c1be <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c0b4:	4b9c      	ldr	r3, [pc, #624]	; (800c328 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c0b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0b8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c0bc:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c0c4:	d06b      	beq.n	800c19e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800c0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c0cc:	d874      	bhi.n	800c1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c0d4:	d056      	beq.n	800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800c0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c0dc:	d86c      	bhi.n	800c1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c0e4:	d03b      	beq.n	800c15e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800c0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c0ec:	d864      	bhi.n	800c1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c0ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0f4:	d021      	beq.n	800c13a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800c0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0fc:	d85c      	bhi.n	800c1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c100:	2b00      	cmp	r3, #0
 800c102:	d004      	beq.n	800c10e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800c104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c106:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c10a:	d004      	beq.n	800c116 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800c10c:	e054      	b.n	800c1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c10e:	f7fe fb5f 	bl	800a7d0 <HAL_RCC_GetPCLK1Freq>
 800c112:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c114:	e1ed      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c116:	4b84      	ldr	r3, [pc, #528]	; (800c328 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c11e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c122:	d107      	bne.n	800c134 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c124:	f107 0318 	add.w	r3, r7, #24
 800c128:	4618      	mov	r0, r3
 800c12a:	f000 fa05 	bl	800c538 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c12e:	69fb      	ldr	r3, [r7, #28]
 800c130:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c132:	e1de      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c134:	2300      	movs	r3, #0
 800c136:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c138:	e1db      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c13a:	4b7b      	ldr	r3, [pc, #492]	; (800c328 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c142:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c146:	d107      	bne.n	800c158 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c148:	f107 030c 	add.w	r3, r7, #12
 800c14c:	4618      	mov	r0, r3
 800c14e:	f000 fb47 	bl	800c7e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c152:	693b      	ldr	r3, [r7, #16]
 800c154:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c156:	e1cc      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c158:	2300      	movs	r3, #0
 800c15a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c15c:	e1c9      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c15e:	4b72      	ldr	r3, [pc, #456]	; (800c328 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	f003 0304 	and.w	r3, r3, #4
 800c166:	2b04      	cmp	r3, #4
 800c168:	d109      	bne.n	800c17e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c16a:	4b6f      	ldr	r3, [pc, #444]	; (800c328 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	08db      	lsrs	r3, r3, #3
 800c170:	f003 0303 	and.w	r3, r3, #3
 800c174:	4a6d      	ldr	r2, [pc, #436]	; (800c32c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c176:	fa22 f303 	lsr.w	r3, r2, r3
 800c17a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c17c:	e1b9      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c17e:	2300      	movs	r3, #0
 800c180:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c182:	e1b6      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c184:	4b68      	ldr	r3, [pc, #416]	; (800c328 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c18c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c190:	d102      	bne.n	800c198 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800c192:	4b67      	ldr	r3, [pc, #412]	; (800c330 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c194:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c196:	e1ac      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c198:	2300      	movs	r3, #0
 800c19a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c19c:	e1a9      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c19e:	4b62      	ldr	r3, [pc, #392]	; (800c328 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1aa:	d102      	bne.n	800c1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800c1ac:	4b61      	ldr	r3, [pc, #388]	; (800c334 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c1ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1b0:	e19f      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1b6:	e19c      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1bc:	e199      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c1be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1c2:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c1c6:	430b      	orrs	r3, r1
 800c1c8:	d173      	bne.n	800c2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c1ca:	4b57      	ldr	r3, [pc, #348]	; (800c328 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c1cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c1d2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1da:	d02f      	beq.n	800c23c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800c1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1e2:	d863      	bhi.n	800c2ac <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800c1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d004      	beq.n	800c1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800c1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1f0:	d012      	beq.n	800c218 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800c1f2:	e05b      	b.n	800c2ac <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c1f4:	4b4c      	ldr	r3, [pc, #304]	; (800c328 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c1fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c200:	d107      	bne.n	800c212 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c202:	f107 0318 	add.w	r3, r7, #24
 800c206:	4618      	mov	r0, r3
 800c208:	f000 f996 	bl	800c538 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c20c:	69bb      	ldr	r3, [r7, #24]
 800c20e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c210:	e16f      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c212:	2300      	movs	r3, #0
 800c214:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c216:	e16c      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c218:	4b43      	ldr	r3, [pc, #268]	; (800c328 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c220:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c224:	d107      	bne.n	800c236 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c226:	f107 030c 	add.w	r3, r7, #12
 800c22a:	4618      	mov	r0, r3
 800c22c:	f000 fad8 	bl	800c7e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c230:	697b      	ldr	r3, [r7, #20]
 800c232:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c234:	e15d      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c236:	2300      	movs	r3, #0
 800c238:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c23a:	e15a      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c23c:	4b3a      	ldr	r3, [pc, #232]	; (800c328 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c23e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c240:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c244:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c246:	4b38      	ldr	r3, [pc, #224]	; (800c328 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	f003 0304 	and.w	r3, r3, #4
 800c24e:	2b04      	cmp	r3, #4
 800c250:	d10c      	bne.n	800c26c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800c252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c254:	2b00      	cmp	r3, #0
 800c256:	d109      	bne.n	800c26c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c258:	4b33      	ldr	r3, [pc, #204]	; (800c328 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	08db      	lsrs	r3, r3, #3
 800c25e:	f003 0303 	and.w	r3, r3, #3
 800c262:	4a32      	ldr	r2, [pc, #200]	; (800c32c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c264:	fa22 f303 	lsr.w	r3, r2, r3
 800c268:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c26a:	e01e      	b.n	800c2aa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c26c:	4b2e      	ldr	r3, [pc, #184]	; (800c328 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c278:	d106      	bne.n	800c288 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800c27a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c27c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c280:	d102      	bne.n	800c288 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c282:	4b2b      	ldr	r3, [pc, #172]	; (800c330 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c284:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c286:	e010      	b.n	800c2aa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c288:	4b27      	ldr	r3, [pc, #156]	; (800c328 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c290:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c294:	d106      	bne.n	800c2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800c296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c298:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c29c:	d102      	bne.n	800c2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c29e:	4b25      	ldr	r3, [pc, #148]	; (800c334 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c2a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2a2:	e002      	b.n	800c2aa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c2a8:	e123      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c2aa:	e122      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2b0:	e11f      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c2b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2b6:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c2ba:	430b      	orrs	r3, r1
 800c2bc:	d13c      	bne.n	800c338 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c2be:	4b1a      	ldr	r3, [pc, #104]	; (800c328 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c2c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c2c6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d004      	beq.n	800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800c2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2d4:	d012      	beq.n	800c2fc <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800c2d6:	e023      	b.n	800c320 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c2d8:	4b13      	ldr	r3, [pc, #76]	; (800c328 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c2e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c2e4:	d107      	bne.n	800c2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c2e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f000 fbcc 	bl	800ca88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2f4:	e0fd      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2fa:	e0fa      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c2fc:	4b0a      	ldr	r3, [pc, #40]	; (800c328 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c304:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c308:	d107      	bne.n	800c31a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c30a:	f107 0318 	add.w	r3, r7, #24
 800c30e:	4618      	mov	r0, r3
 800c310:	f000 f912 	bl	800c538 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c314:	6a3b      	ldr	r3, [r7, #32]
 800c316:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c318:	e0eb      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c31a:	2300      	movs	r3, #0
 800c31c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c31e:	e0e8      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c320:	2300      	movs	r3, #0
 800c322:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c324:	e0e5      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c326:	bf00      	nop
 800c328:	58024400 	.word	0x58024400
 800c32c:	03d09000 	.word	0x03d09000
 800c330:	003d0900 	.word	0x003d0900
 800c334:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c338:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c33c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c340:	430b      	orrs	r3, r1
 800c342:	f040 8085 	bne.w	800c450 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c346:	4b6d      	ldr	r3, [pc, #436]	; (800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c34a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c34e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c352:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c356:	d06b      	beq.n	800c430 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800c358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c35a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c35e:	d874      	bhi.n	800c44a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c366:	d056      	beq.n	800c416 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800c368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c36a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c36e:	d86c      	bhi.n	800c44a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c372:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c376:	d03b      	beq.n	800c3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800c378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c37a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c37e:	d864      	bhi.n	800c44a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c382:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c386:	d021      	beq.n	800c3cc <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800c388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c38a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c38e:	d85c      	bhi.n	800c44a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c392:	2b00      	cmp	r3, #0
 800c394:	d004      	beq.n	800c3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800c396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c398:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c39c:	d004      	beq.n	800c3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800c39e:	e054      	b.n	800c44a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c3a0:	f000 f8b4 	bl	800c50c <HAL_RCCEx_GetD3PCLK1Freq>
 800c3a4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c3a6:	e0a4      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c3a8:	4b54      	ldr	r3, [pc, #336]	; (800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c3b4:	d107      	bne.n	800c3c6 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3b6:	f107 0318 	add.w	r3, r7, #24
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f000 f8bc 	bl	800c538 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c3c0:	69fb      	ldr	r3, [r7, #28]
 800c3c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3c4:	e095      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3ca:	e092      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c3cc:	4b4b      	ldr	r3, [pc, #300]	; (800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c3d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3d8:	d107      	bne.n	800c3ea <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c3da:	f107 030c 	add.w	r3, r7, #12
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f000 f9fe 	bl	800c7e0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c3e4:	693b      	ldr	r3, [r7, #16]
 800c3e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3e8:	e083      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3ee:	e080      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c3f0:	4b42      	ldr	r3, [pc, #264]	; (800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	f003 0304 	and.w	r3, r3, #4
 800c3f8:	2b04      	cmp	r3, #4
 800c3fa:	d109      	bne.n	800c410 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c3fc:	4b3f      	ldr	r3, [pc, #252]	; (800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	08db      	lsrs	r3, r3, #3
 800c402:	f003 0303 	and.w	r3, r3, #3
 800c406:	4a3e      	ldr	r2, [pc, #248]	; (800c500 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800c408:	fa22 f303 	lsr.w	r3, r2, r3
 800c40c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c40e:	e070      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c410:	2300      	movs	r3, #0
 800c412:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c414:	e06d      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c416:	4b39      	ldr	r3, [pc, #228]	; (800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c41e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c422:	d102      	bne.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800c424:	4b37      	ldr	r3, [pc, #220]	; (800c504 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c426:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c428:	e063      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c42a:	2300      	movs	r3, #0
 800c42c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c42e:	e060      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c430:	4b32      	ldr	r3, [pc, #200]	; (800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c438:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c43c:	d102      	bne.n	800c444 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800c43e:	4b32      	ldr	r3, [pc, #200]	; (800c508 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c440:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c442:	e056      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c444:	2300      	movs	r3, #0
 800c446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c448:	e053      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c44a:	2300      	movs	r3, #0
 800c44c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c44e:	e050      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c450:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c454:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c458:	430b      	orrs	r3, r1
 800c45a:	d148      	bne.n	800c4ee <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c45c:	4b27      	ldr	r3, [pc, #156]	; (800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c45e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c460:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c464:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c468:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c46c:	d02a      	beq.n	800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800c46e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c470:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c474:	d838      	bhi.n	800c4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800c476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d004      	beq.n	800c486 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800c47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c47e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c482:	d00d      	beq.n	800c4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800c484:	e030      	b.n	800c4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c486:	4b1d      	ldr	r3, [pc, #116]	; (800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c48e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c492:	d102      	bne.n	800c49a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800c494:	4b1c      	ldr	r3, [pc, #112]	; (800c508 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c496:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c498:	e02b      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c49a:	2300      	movs	r3, #0
 800c49c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c49e:	e028      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c4a0:	4b16      	ldr	r3, [pc, #88]	; (800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c4ac:	d107      	bne.n	800c4be <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c4ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f000 fae8 	bl	800ca88 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4bc:	e019      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4c2:	e016      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c4c4:	4b0d      	ldr	r3, [pc, #52]	; (800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c4cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c4d0:	d107      	bne.n	800c4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4d2:	f107 0318 	add.w	r3, r7, #24
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f000 f82e 	bl	800c538 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c4dc:	69fb      	ldr	r3, [r7, #28]
 800c4de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4e0:	e007      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4e6:	e004      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4ec:	e001      	b.n	800c4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c4f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	3740      	adds	r7, #64	; 0x40
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd80      	pop	{r7, pc}
 800c4fc:	58024400 	.word	0x58024400
 800c500:	03d09000 	.word	0x03d09000
 800c504:	003d0900 	.word	0x003d0900
 800c508:	02faf080 	.word	0x02faf080

0800c50c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c510:	f7fe f92e 	bl	800a770 <HAL_RCC_GetHCLKFreq>
 800c514:	4602      	mov	r2, r0
 800c516:	4b06      	ldr	r3, [pc, #24]	; (800c530 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c518:	6a1b      	ldr	r3, [r3, #32]
 800c51a:	091b      	lsrs	r3, r3, #4
 800c51c:	f003 0307 	and.w	r3, r3, #7
 800c520:	4904      	ldr	r1, [pc, #16]	; (800c534 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c522:	5ccb      	ldrb	r3, [r1, r3]
 800c524:	f003 031f 	and.w	r3, r3, #31
 800c528:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	bd80      	pop	{r7, pc}
 800c530:	58024400 	.word	0x58024400
 800c534:	08018554 	.word	0x08018554

0800c538 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c538:	b480      	push	{r7}
 800c53a:	b089      	sub	sp, #36	; 0x24
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c540:	4ba1      	ldr	r3, [pc, #644]	; (800c7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c544:	f003 0303 	and.w	r3, r3, #3
 800c548:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c54a:	4b9f      	ldr	r3, [pc, #636]	; (800c7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c54c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c54e:	0b1b      	lsrs	r3, r3, #12
 800c550:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c554:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c556:	4b9c      	ldr	r3, [pc, #624]	; (800c7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c55a:	091b      	lsrs	r3, r3, #4
 800c55c:	f003 0301 	and.w	r3, r3, #1
 800c560:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c562:	4b99      	ldr	r3, [pc, #612]	; (800c7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c566:	08db      	lsrs	r3, r3, #3
 800c568:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c56c:	693a      	ldr	r2, [r7, #16]
 800c56e:	fb02 f303 	mul.w	r3, r2, r3
 800c572:	ee07 3a90 	vmov	s15, r3
 800c576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c57a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	2b00      	cmp	r3, #0
 800c582:	f000 8111 	beq.w	800c7a8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c586:	69bb      	ldr	r3, [r7, #24]
 800c588:	2b02      	cmp	r3, #2
 800c58a:	f000 8083 	beq.w	800c694 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c58e:	69bb      	ldr	r3, [r7, #24]
 800c590:	2b02      	cmp	r3, #2
 800c592:	f200 80a1 	bhi.w	800c6d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c596:	69bb      	ldr	r3, [r7, #24]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d003      	beq.n	800c5a4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c59c:	69bb      	ldr	r3, [r7, #24]
 800c59e:	2b01      	cmp	r3, #1
 800c5a0:	d056      	beq.n	800c650 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c5a2:	e099      	b.n	800c6d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c5a4:	4b88      	ldr	r3, [pc, #544]	; (800c7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	f003 0320 	and.w	r3, r3, #32
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d02d      	beq.n	800c60c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c5b0:	4b85      	ldr	r3, [pc, #532]	; (800c7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	08db      	lsrs	r3, r3, #3
 800c5b6:	f003 0303 	and.w	r3, r3, #3
 800c5ba:	4a84      	ldr	r2, [pc, #528]	; (800c7cc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c5bc:	fa22 f303 	lsr.w	r3, r2, r3
 800c5c0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c5c2:	68bb      	ldr	r3, [r7, #8]
 800c5c4:	ee07 3a90 	vmov	s15, r3
 800c5c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5cc:	697b      	ldr	r3, [r7, #20]
 800c5ce:	ee07 3a90 	vmov	s15, r3
 800c5d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5da:	4b7b      	ldr	r3, [pc, #492]	; (800c7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5e2:	ee07 3a90 	vmov	s15, r3
 800c5e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c7d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c5f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c5fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c602:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c606:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c60a:	e087      	b.n	800c71c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	ee07 3a90 	vmov	s15, r3
 800c612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c616:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c7d4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c61a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c61e:	4b6a      	ldr	r3, [pc, #424]	; (800c7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c626:	ee07 3a90 	vmov	s15, r3
 800c62a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c62e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c632:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c7d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c63a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c63e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c64a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c64e:	e065      	b.n	800c71c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c650:	697b      	ldr	r3, [r7, #20]
 800c652:	ee07 3a90 	vmov	s15, r3
 800c656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c65a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c7d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c65e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c662:	4b59      	ldr	r3, [pc, #356]	; (800c7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c66a:	ee07 3a90 	vmov	s15, r3
 800c66e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c672:	ed97 6a03 	vldr	s12, [r7, #12]
 800c676:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c7d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c67a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c67e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c68a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c68e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c692:	e043      	b.n	800c71c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c694:	697b      	ldr	r3, [r7, #20]
 800c696:	ee07 3a90 	vmov	s15, r3
 800c69a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c69e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c7dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c6a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6a6:	4b48      	ldr	r3, [pc, #288]	; (800c7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6ae:	ee07 3a90 	vmov	s15, r3
 800c6b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c7d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c6be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c6d6:	e021      	b.n	800c71c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	ee07 3a90 	vmov	s15, r3
 800c6de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c7d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c6e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6ea:	4b37      	ldr	r3, [pc, #220]	; (800c7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6f2:	ee07 3a90 	vmov	s15, r3
 800c6f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c7d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c70a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c70e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c712:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c716:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c71a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c71c:	4b2a      	ldr	r3, [pc, #168]	; (800c7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c71e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c720:	0a5b      	lsrs	r3, r3, #9
 800c722:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c726:	ee07 3a90 	vmov	s15, r3
 800c72a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c72e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c732:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c736:	edd7 6a07 	vldr	s13, [r7, #28]
 800c73a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c73e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c742:	ee17 2a90 	vmov	r2, s15
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c74a:	4b1f      	ldr	r3, [pc, #124]	; (800c7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c74c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c74e:	0c1b      	lsrs	r3, r3, #16
 800c750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c754:	ee07 3a90 	vmov	s15, r3
 800c758:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c75c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c760:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c764:	edd7 6a07 	vldr	s13, [r7, #28]
 800c768:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c76c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c770:	ee17 2a90 	vmov	r2, s15
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c778:	4b13      	ldr	r3, [pc, #76]	; (800c7c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c77a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c77c:	0e1b      	lsrs	r3, r3, #24
 800c77e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c782:	ee07 3a90 	vmov	s15, r3
 800c786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c78a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c78e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c792:	edd7 6a07 	vldr	s13, [r7, #28]
 800c796:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c79a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c79e:	ee17 2a90 	vmov	r2, s15
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c7a6:	e008      	b.n	800c7ba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	609a      	str	r2, [r3, #8]
}
 800c7ba:	bf00      	nop
 800c7bc:	3724      	adds	r7, #36	; 0x24
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c4:	4770      	bx	lr
 800c7c6:	bf00      	nop
 800c7c8:	58024400 	.word	0x58024400
 800c7cc:	03d09000 	.word	0x03d09000
 800c7d0:	46000000 	.word	0x46000000
 800c7d4:	4c742400 	.word	0x4c742400
 800c7d8:	4a742400 	.word	0x4a742400
 800c7dc:	4c3ebc20 	.word	0x4c3ebc20

0800c7e0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	b089      	sub	sp, #36	; 0x24
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c7e8:	4ba1      	ldr	r3, [pc, #644]	; (800ca70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7ec:	f003 0303 	and.w	r3, r3, #3
 800c7f0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c7f2:	4b9f      	ldr	r3, [pc, #636]	; (800ca70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7f6:	0d1b      	lsrs	r3, r3, #20
 800c7f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c7fc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c7fe:	4b9c      	ldr	r3, [pc, #624]	; (800ca70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c802:	0a1b      	lsrs	r3, r3, #8
 800c804:	f003 0301 	and.w	r3, r3, #1
 800c808:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c80a:	4b99      	ldr	r3, [pc, #612]	; (800ca70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c80c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c80e:	08db      	lsrs	r3, r3, #3
 800c810:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c814:	693a      	ldr	r2, [r7, #16]
 800c816:	fb02 f303 	mul.w	r3, r2, r3
 800c81a:	ee07 3a90 	vmov	s15, r3
 800c81e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c822:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c826:	697b      	ldr	r3, [r7, #20]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	f000 8111 	beq.w	800ca50 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c82e:	69bb      	ldr	r3, [r7, #24]
 800c830:	2b02      	cmp	r3, #2
 800c832:	f000 8083 	beq.w	800c93c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c836:	69bb      	ldr	r3, [r7, #24]
 800c838:	2b02      	cmp	r3, #2
 800c83a:	f200 80a1 	bhi.w	800c980 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c83e:	69bb      	ldr	r3, [r7, #24]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d003      	beq.n	800c84c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c844:	69bb      	ldr	r3, [r7, #24]
 800c846:	2b01      	cmp	r3, #1
 800c848:	d056      	beq.n	800c8f8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c84a:	e099      	b.n	800c980 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c84c:	4b88      	ldr	r3, [pc, #544]	; (800ca70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f003 0320 	and.w	r3, r3, #32
 800c854:	2b00      	cmp	r3, #0
 800c856:	d02d      	beq.n	800c8b4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c858:	4b85      	ldr	r3, [pc, #532]	; (800ca70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	08db      	lsrs	r3, r3, #3
 800c85e:	f003 0303 	and.w	r3, r3, #3
 800c862:	4a84      	ldr	r2, [pc, #528]	; (800ca74 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c864:	fa22 f303 	lsr.w	r3, r2, r3
 800c868:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	ee07 3a90 	vmov	s15, r3
 800c870:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c874:	697b      	ldr	r3, [r7, #20]
 800c876:	ee07 3a90 	vmov	s15, r3
 800c87a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c87e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c882:	4b7b      	ldr	r3, [pc, #492]	; (800ca70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c88a:	ee07 3a90 	vmov	s15, r3
 800c88e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c892:	ed97 6a03 	vldr	s12, [r7, #12]
 800c896:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ca78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c89a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c89e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c8b2:	e087      	b.n	800c9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c8b4:	697b      	ldr	r3, [r7, #20]
 800c8b6:	ee07 3a90 	vmov	s15, r3
 800c8ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8be:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ca7c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c8c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8c6:	4b6a      	ldr	r3, [pc, #424]	; (800ca70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8ce:	ee07 3a90 	vmov	s15, r3
 800c8d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8da:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ca78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c8de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c8f6:	e065      	b.n	800c9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	ee07 3a90 	vmov	s15, r3
 800c8fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c902:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ca80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c90a:	4b59      	ldr	r3, [pc, #356]	; (800ca70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c90c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c90e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c912:	ee07 3a90 	vmov	s15, r3
 800c916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c91a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c91e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ca78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c92a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c92e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c932:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c936:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c93a:	e043      	b.n	800c9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c93c:	697b      	ldr	r3, [r7, #20]
 800c93e:	ee07 3a90 	vmov	s15, r3
 800c942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c946:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ca84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c94a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c94e:	4b48      	ldr	r3, [pc, #288]	; (800ca70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c956:	ee07 3a90 	vmov	s15, r3
 800c95a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c95e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c962:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ca78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c96a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c96e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c97a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c97e:	e021      	b.n	800c9c4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c980:	697b      	ldr	r3, [r7, #20]
 800c982:	ee07 3a90 	vmov	s15, r3
 800c986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c98a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ca80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c98e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c992:	4b37      	ldr	r3, [pc, #220]	; (800ca70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c99a:	ee07 3a90 	vmov	s15, r3
 800c99e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9a6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ca78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c9aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9c2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c9c4:	4b2a      	ldr	r3, [pc, #168]	; (800ca70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9c8:	0a5b      	lsrs	r3, r3, #9
 800c9ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9ce:	ee07 3a90 	vmov	s15, r3
 800c9d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c9da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c9de:	edd7 6a07 	vldr	s13, [r7, #28]
 800c9e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c9e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c9ea:	ee17 2a90 	vmov	r2, s15
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c9f2:	4b1f      	ldr	r3, [pc, #124]	; (800ca70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9f6:	0c1b      	lsrs	r3, r3, #16
 800c9f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9fc:	ee07 3a90 	vmov	s15, r3
 800ca00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca08:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca0c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca18:	ee17 2a90 	vmov	r2, s15
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ca20:	4b13      	ldr	r3, [pc, #76]	; (800ca70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca24:	0e1b      	lsrs	r3, r3, #24
 800ca26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca2a:	ee07 3a90 	vmov	s15, r3
 800ca2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca36:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca3a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca46:	ee17 2a90 	vmov	r2, s15
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ca4e:	e008      	b.n	800ca62 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2200      	movs	r2, #0
 800ca54:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2200      	movs	r2, #0
 800ca5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2200      	movs	r2, #0
 800ca60:	609a      	str	r2, [r3, #8]
}
 800ca62:	bf00      	nop
 800ca64:	3724      	adds	r7, #36	; 0x24
 800ca66:	46bd      	mov	sp, r7
 800ca68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6c:	4770      	bx	lr
 800ca6e:	bf00      	nop
 800ca70:	58024400 	.word	0x58024400
 800ca74:	03d09000 	.word	0x03d09000
 800ca78:	46000000 	.word	0x46000000
 800ca7c:	4c742400 	.word	0x4c742400
 800ca80:	4a742400 	.word	0x4a742400
 800ca84:	4c3ebc20 	.word	0x4c3ebc20

0800ca88 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b089      	sub	sp, #36	; 0x24
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ca90:	4ba0      	ldr	r3, [pc, #640]	; (800cd14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca94:	f003 0303 	and.w	r3, r3, #3
 800ca98:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800ca9a:	4b9e      	ldr	r3, [pc, #632]	; (800cd14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca9e:	091b      	lsrs	r3, r3, #4
 800caa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800caa4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800caa6:	4b9b      	ldr	r3, [pc, #620]	; (800cd14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800caa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caaa:	f003 0301 	and.w	r3, r3, #1
 800caae:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cab0:	4b98      	ldr	r3, [pc, #608]	; (800cd14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cab4:	08db      	lsrs	r3, r3, #3
 800cab6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800caba:	693a      	ldr	r2, [r7, #16]
 800cabc:	fb02 f303 	mul.w	r3, r2, r3
 800cac0:	ee07 3a90 	vmov	s15, r3
 800cac4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cac8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800cacc:	697b      	ldr	r3, [r7, #20]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	f000 8111 	beq.w	800ccf6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800cad4:	69bb      	ldr	r3, [r7, #24]
 800cad6:	2b02      	cmp	r3, #2
 800cad8:	f000 8083 	beq.w	800cbe2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800cadc:	69bb      	ldr	r3, [r7, #24]
 800cade:	2b02      	cmp	r3, #2
 800cae0:	f200 80a1 	bhi.w	800cc26 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800cae4:	69bb      	ldr	r3, [r7, #24]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d003      	beq.n	800caf2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800caea:	69bb      	ldr	r3, [r7, #24]
 800caec:	2b01      	cmp	r3, #1
 800caee:	d056      	beq.n	800cb9e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800caf0:	e099      	b.n	800cc26 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800caf2:	4b88      	ldr	r3, [pc, #544]	; (800cd14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	f003 0320 	and.w	r3, r3, #32
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d02d      	beq.n	800cb5a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cafe:	4b85      	ldr	r3, [pc, #532]	; (800cd14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	08db      	lsrs	r3, r3, #3
 800cb04:	f003 0303 	and.w	r3, r3, #3
 800cb08:	4a83      	ldr	r2, [pc, #524]	; (800cd18 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800cb0a:	fa22 f303 	lsr.w	r3, r2, r3
 800cb0e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cb10:	68bb      	ldr	r3, [r7, #8]
 800cb12:	ee07 3a90 	vmov	s15, r3
 800cb16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb1a:	697b      	ldr	r3, [r7, #20]
 800cb1c:	ee07 3a90 	vmov	s15, r3
 800cb20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb28:	4b7a      	ldr	r3, [pc, #488]	; (800cd14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb30:	ee07 3a90 	vmov	s15, r3
 800cb34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb38:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb3c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800cd1c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cb40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb50:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb54:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cb58:	e087      	b.n	800cc6a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	ee07 3a90 	vmov	s15, r3
 800cb60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb64:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800cd20 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cb68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb6c:	4b69      	ldr	r3, [pc, #420]	; (800cd14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb74:	ee07 3a90 	vmov	s15, r3
 800cb78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb7c:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb80:	eddf 5a66 	vldr	s11, [pc, #408]	; 800cd1c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cb84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb94:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb98:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb9c:	e065      	b.n	800cc6a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cb9e:	697b      	ldr	r3, [r7, #20]
 800cba0:	ee07 3a90 	vmov	s15, r3
 800cba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cba8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800cd24 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800cbac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbb0:	4b58      	ldr	r3, [pc, #352]	; (800cd14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cbb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbb8:	ee07 3a90 	vmov	s15, r3
 800cbbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbc0:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbc4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800cd1c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cbc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbdc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cbe0:	e043      	b.n	800cc6a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cbe2:	697b      	ldr	r3, [r7, #20]
 800cbe4:	ee07 3a90 	vmov	s15, r3
 800cbe8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbec:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800cd28 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800cbf0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbf4:	4b47      	ldr	r3, [pc, #284]	; (800cd14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cbf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbfc:	ee07 3a90 	vmov	s15, r3
 800cc00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc04:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc08:	eddf 5a44 	vldr	s11, [pc, #272]	; 800cd1c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cc0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc18:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc20:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc24:	e021      	b.n	800cc6a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cc26:	697b      	ldr	r3, [r7, #20]
 800cc28:	ee07 3a90 	vmov	s15, r3
 800cc2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc30:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800cd20 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cc34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc38:	4b36      	ldr	r3, [pc, #216]	; (800cd14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc40:	ee07 3a90 	vmov	s15, r3
 800cc44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc48:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc4c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800cd1c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cc50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc60:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc64:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc68:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800cc6a:	4b2a      	ldr	r3, [pc, #168]	; (800cd14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc6e:	0a5b      	lsrs	r3, r3, #9
 800cc70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc74:	ee07 3a90 	vmov	s15, r3
 800cc78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc80:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc84:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc90:	ee17 2a90 	vmov	r2, s15
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800cc98:	4b1e      	ldr	r3, [pc, #120]	; (800cd14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc9c:	0c1b      	lsrs	r3, r3, #16
 800cc9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cca2:	ee07 3a90 	vmov	s15, r3
 800cca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ccae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ccb2:	edd7 6a07 	vldr	s13, [r7, #28]
 800ccb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ccba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccbe:	ee17 2a90 	vmov	r2, s15
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ccc6:	4b13      	ldr	r3, [pc, #76]	; (800cd14 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ccc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccca:	0e1b      	lsrs	r3, r3, #24
 800cccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ccd0:	ee07 3a90 	vmov	s15, r3
 800ccd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ccdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cce0:	edd7 6a07 	vldr	s13, [r7, #28]
 800cce4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cce8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccec:	ee17 2a90 	vmov	r2, s15
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ccf4:	e008      	b.n	800cd08 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2200      	movs	r2, #0
 800cd00:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2200      	movs	r2, #0
 800cd06:	609a      	str	r2, [r3, #8]
}
 800cd08:	bf00      	nop
 800cd0a:	3724      	adds	r7, #36	; 0x24
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd12:	4770      	bx	lr
 800cd14:	58024400 	.word	0x58024400
 800cd18:	03d09000 	.word	0x03d09000
 800cd1c:	46000000 	.word	0x46000000
 800cd20:	4c742400 	.word	0x4c742400
 800cd24:	4a742400 	.word	0x4a742400
 800cd28:	4c3ebc20 	.word	0x4c3ebc20

0800cd2c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b084      	sub	sp, #16
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
 800cd34:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cd36:	2300      	movs	r3, #0
 800cd38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cd3a:	4b53      	ldr	r3, [pc, #332]	; (800ce88 <RCCEx_PLL2_Config+0x15c>)
 800cd3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd3e:	f003 0303 	and.w	r3, r3, #3
 800cd42:	2b03      	cmp	r3, #3
 800cd44:	d101      	bne.n	800cd4a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cd46:	2301      	movs	r3, #1
 800cd48:	e099      	b.n	800ce7e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cd4a:	4b4f      	ldr	r3, [pc, #316]	; (800ce88 <RCCEx_PLL2_Config+0x15c>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	4a4e      	ldr	r2, [pc, #312]	; (800ce88 <RCCEx_PLL2_Config+0x15c>)
 800cd50:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cd54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cd56:	f7f6 fe7b 	bl	8003a50 <HAL_GetTick>
 800cd5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cd5c:	e008      	b.n	800cd70 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cd5e:	f7f6 fe77 	bl	8003a50 <HAL_GetTick>
 800cd62:	4602      	mov	r2, r0
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	1ad3      	subs	r3, r2, r3
 800cd68:	2b02      	cmp	r3, #2
 800cd6a:	d901      	bls.n	800cd70 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cd6c:	2303      	movs	r3, #3
 800cd6e:	e086      	b.n	800ce7e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cd70:	4b45      	ldr	r3, [pc, #276]	; (800ce88 <RCCEx_PLL2_Config+0x15c>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d1f0      	bne.n	800cd5e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800cd7c:	4b42      	ldr	r3, [pc, #264]	; (800ce88 <RCCEx_PLL2_Config+0x15c>)
 800cd7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd80:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	031b      	lsls	r3, r3, #12
 800cd8a:	493f      	ldr	r1, [pc, #252]	; (800ce88 <RCCEx_PLL2_Config+0x15c>)
 800cd8c:	4313      	orrs	r3, r2
 800cd8e:	628b      	str	r3, [r1, #40]	; 0x28
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	685b      	ldr	r3, [r3, #4]
 800cd94:	3b01      	subs	r3, #1
 800cd96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	689b      	ldr	r3, [r3, #8]
 800cd9e:	3b01      	subs	r3, #1
 800cda0:	025b      	lsls	r3, r3, #9
 800cda2:	b29b      	uxth	r3, r3
 800cda4:	431a      	orrs	r2, r3
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	68db      	ldr	r3, [r3, #12]
 800cdaa:	3b01      	subs	r3, #1
 800cdac:	041b      	lsls	r3, r3, #16
 800cdae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cdb2:	431a      	orrs	r2, r3
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	691b      	ldr	r3, [r3, #16]
 800cdb8:	3b01      	subs	r3, #1
 800cdba:	061b      	lsls	r3, r3, #24
 800cdbc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cdc0:	4931      	ldr	r1, [pc, #196]	; (800ce88 <RCCEx_PLL2_Config+0x15c>)
 800cdc2:	4313      	orrs	r3, r2
 800cdc4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cdc6:	4b30      	ldr	r3, [pc, #192]	; (800ce88 <RCCEx_PLL2_Config+0x15c>)
 800cdc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	695b      	ldr	r3, [r3, #20]
 800cdd2:	492d      	ldr	r1, [pc, #180]	; (800ce88 <RCCEx_PLL2_Config+0x15c>)
 800cdd4:	4313      	orrs	r3, r2
 800cdd6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cdd8:	4b2b      	ldr	r3, [pc, #172]	; (800ce88 <RCCEx_PLL2_Config+0x15c>)
 800cdda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cddc:	f023 0220 	bic.w	r2, r3, #32
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	699b      	ldr	r3, [r3, #24]
 800cde4:	4928      	ldr	r1, [pc, #160]	; (800ce88 <RCCEx_PLL2_Config+0x15c>)
 800cde6:	4313      	orrs	r3, r2
 800cde8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cdea:	4b27      	ldr	r3, [pc, #156]	; (800ce88 <RCCEx_PLL2_Config+0x15c>)
 800cdec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdee:	4a26      	ldr	r2, [pc, #152]	; (800ce88 <RCCEx_PLL2_Config+0x15c>)
 800cdf0:	f023 0310 	bic.w	r3, r3, #16
 800cdf4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cdf6:	4b24      	ldr	r3, [pc, #144]	; (800ce88 <RCCEx_PLL2_Config+0x15c>)
 800cdf8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cdfa:	4b24      	ldr	r3, [pc, #144]	; (800ce8c <RCCEx_PLL2_Config+0x160>)
 800cdfc:	4013      	ands	r3, r2
 800cdfe:	687a      	ldr	r2, [r7, #4]
 800ce00:	69d2      	ldr	r2, [r2, #28]
 800ce02:	00d2      	lsls	r2, r2, #3
 800ce04:	4920      	ldr	r1, [pc, #128]	; (800ce88 <RCCEx_PLL2_Config+0x15c>)
 800ce06:	4313      	orrs	r3, r2
 800ce08:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ce0a:	4b1f      	ldr	r3, [pc, #124]	; (800ce88 <RCCEx_PLL2_Config+0x15c>)
 800ce0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce0e:	4a1e      	ldr	r2, [pc, #120]	; (800ce88 <RCCEx_PLL2_Config+0x15c>)
 800ce10:	f043 0310 	orr.w	r3, r3, #16
 800ce14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ce16:	683b      	ldr	r3, [r7, #0]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d106      	bne.n	800ce2a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ce1c:	4b1a      	ldr	r3, [pc, #104]	; (800ce88 <RCCEx_PLL2_Config+0x15c>)
 800ce1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce20:	4a19      	ldr	r2, [pc, #100]	; (800ce88 <RCCEx_PLL2_Config+0x15c>)
 800ce22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ce26:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ce28:	e00f      	b.n	800ce4a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	2b01      	cmp	r3, #1
 800ce2e:	d106      	bne.n	800ce3e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ce30:	4b15      	ldr	r3, [pc, #84]	; (800ce88 <RCCEx_PLL2_Config+0x15c>)
 800ce32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce34:	4a14      	ldr	r2, [pc, #80]	; (800ce88 <RCCEx_PLL2_Config+0x15c>)
 800ce36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ce3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ce3c:	e005      	b.n	800ce4a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ce3e:	4b12      	ldr	r3, [pc, #72]	; (800ce88 <RCCEx_PLL2_Config+0x15c>)
 800ce40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce42:	4a11      	ldr	r2, [pc, #68]	; (800ce88 <RCCEx_PLL2_Config+0x15c>)
 800ce44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ce48:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ce4a:	4b0f      	ldr	r3, [pc, #60]	; (800ce88 <RCCEx_PLL2_Config+0x15c>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	4a0e      	ldr	r2, [pc, #56]	; (800ce88 <RCCEx_PLL2_Config+0x15c>)
 800ce50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ce54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce56:	f7f6 fdfb 	bl	8003a50 <HAL_GetTick>
 800ce5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ce5c:	e008      	b.n	800ce70 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ce5e:	f7f6 fdf7 	bl	8003a50 <HAL_GetTick>
 800ce62:	4602      	mov	r2, r0
 800ce64:	68bb      	ldr	r3, [r7, #8]
 800ce66:	1ad3      	subs	r3, r2, r3
 800ce68:	2b02      	cmp	r3, #2
 800ce6a:	d901      	bls.n	800ce70 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ce6c:	2303      	movs	r3, #3
 800ce6e:	e006      	b.n	800ce7e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ce70:	4b05      	ldr	r3, [pc, #20]	; (800ce88 <RCCEx_PLL2_Config+0x15c>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d0f0      	beq.n	800ce5e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ce7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce7e:	4618      	mov	r0, r3
 800ce80:	3710      	adds	r7, #16
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd80      	pop	{r7, pc}
 800ce86:	bf00      	nop
 800ce88:	58024400 	.word	0x58024400
 800ce8c:	ffff0007 	.word	0xffff0007

0800ce90 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b084      	sub	sp, #16
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ce9e:	4b53      	ldr	r3, [pc, #332]	; (800cfec <RCCEx_PLL3_Config+0x15c>)
 800cea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cea2:	f003 0303 	and.w	r3, r3, #3
 800cea6:	2b03      	cmp	r3, #3
 800cea8:	d101      	bne.n	800ceae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ceaa:	2301      	movs	r3, #1
 800ceac:	e099      	b.n	800cfe2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ceae:	4b4f      	ldr	r3, [pc, #316]	; (800cfec <RCCEx_PLL3_Config+0x15c>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	4a4e      	ldr	r2, [pc, #312]	; (800cfec <RCCEx_PLL3_Config+0x15c>)
 800ceb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ceb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ceba:	f7f6 fdc9 	bl	8003a50 <HAL_GetTick>
 800cebe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cec0:	e008      	b.n	800ced4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cec2:	f7f6 fdc5 	bl	8003a50 <HAL_GetTick>
 800cec6:	4602      	mov	r2, r0
 800cec8:	68bb      	ldr	r3, [r7, #8]
 800ceca:	1ad3      	subs	r3, r2, r3
 800cecc:	2b02      	cmp	r3, #2
 800cece:	d901      	bls.n	800ced4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ced0:	2303      	movs	r3, #3
 800ced2:	e086      	b.n	800cfe2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ced4:	4b45      	ldr	r3, [pc, #276]	; (800cfec <RCCEx_PLL3_Config+0x15c>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d1f0      	bne.n	800cec2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cee0:	4b42      	ldr	r3, [pc, #264]	; (800cfec <RCCEx_PLL3_Config+0x15c>)
 800cee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cee4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	051b      	lsls	r3, r3, #20
 800ceee:	493f      	ldr	r1, [pc, #252]	; (800cfec <RCCEx_PLL3_Config+0x15c>)
 800cef0:	4313      	orrs	r3, r2
 800cef2:	628b      	str	r3, [r1, #40]	; 0x28
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	685b      	ldr	r3, [r3, #4]
 800cef8:	3b01      	subs	r3, #1
 800cefa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	689b      	ldr	r3, [r3, #8]
 800cf02:	3b01      	subs	r3, #1
 800cf04:	025b      	lsls	r3, r3, #9
 800cf06:	b29b      	uxth	r3, r3
 800cf08:	431a      	orrs	r2, r3
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	68db      	ldr	r3, [r3, #12]
 800cf0e:	3b01      	subs	r3, #1
 800cf10:	041b      	lsls	r3, r3, #16
 800cf12:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cf16:	431a      	orrs	r2, r3
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	691b      	ldr	r3, [r3, #16]
 800cf1c:	3b01      	subs	r3, #1
 800cf1e:	061b      	lsls	r3, r3, #24
 800cf20:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cf24:	4931      	ldr	r1, [pc, #196]	; (800cfec <RCCEx_PLL3_Config+0x15c>)
 800cf26:	4313      	orrs	r3, r2
 800cf28:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cf2a:	4b30      	ldr	r3, [pc, #192]	; (800cfec <RCCEx_PLL3_Config+0x15c>)
 800cf2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf2e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	695b      	ldr	r3, [r3, #20]
 800cf36:	492d      	ldr	r1, [pc, #180]	; (800cfec <RCCEx_PLL3_Config+0x15c>)
 800cf38:	4313      	orrs	r3, r2
 800cf3a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cf3c:	4b2b      	ldr	r3, [pc, #172]	; (800cfec <RCCEx_PLL3_Config+0x15c>)
 800cf3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf40:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	699b      	ldr	r3, [r3, #24]
 800cf48:	4928      	ldr	r1, [pc, #160]	; (800cfec <RCCEx_PLL3_Config+0x15c>)
 800cf4a:	4313      	orrs	r3, r2
 800cf4c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cf4e:	4b27      	ldr	r3, [pc, #156]	; (800cfec <RCCEx_PLL3_Config+0x15c>)
 800cf50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf52:	4a26      	ldr	r2, [pc, #152]	; (800cfec <RCCEx_PLL3_Config+0x15c>)
 800cf54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cf58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cf5a:	4b24      	ldr	r3, [pc, #144]	; (800cfec <RCCEx_PLL3_Config+0x15c>)
 800cf5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf5e:	4b24      	ldr	r3, [pc, #144]	; (800cff0 <RCCEx_PLL3_Config+0x160>)
 800cf60:	4013      	ands	r3, r2
 800cf62:	687a      	ldr	r2, [r7, #4]
 800cf64:	69d2      	ldr	r2, [r2, #28]
 800cf66:	00d2      	lsls	r2, r2, #3
 800cf68:	4920      	ldr	r1, [pc, #128]	; (800cfec <RCCEx_PLL3_Config+0x15c>)
 800cf6a:	4313      	orrs	r3, r2
 800cf6c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cf6e:	4b1f      	ldr	r3, [pc, #124]	; (800cfec <RCCEx_PLL3_Config+0x15c>)
 800cf70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf72:	4a1e      	ldr	r2, [pc, #120]	; (800cfec <RCCEx_PLL3_Config+0x15c>)
 800cf74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cf78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d106      	bne.n	800cf8e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cf80:	4b1a      	ldr	r3, [pc, #104]	; (800cfec <RCCEx_PLL3_Config+0x15c>)
 800cf82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf84:	4a19      	ldr	r2, [pc, #100]	; (800cfec <RCCEx_PLL3_Config+0x15c>)
 800cf86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cf8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cf8c:	e00f      	b.n	800cfae <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cf8e:	683b      	ldr	r3, [r7, #0]
 800cf90:	2b01      	cmp	r3, #1
 800cf92:	d106      	bne.n	800cfa2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cf94:	4b15      	ldr	r3, [pc, #84]	; (800cfec <RCCEx_PLL3_Config+0x15c>)
 800cf96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf98:	4a14      	ldr	r2, [pc, #80]	; (800cfec <RCCEx_PLL3_Config+0x15c>)
 800cf9a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cf9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cfa0:	e005      	b.n	800cfae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cfa2:	4b12      	ldr	r3, [pc, #72]	; (800cfec <RCCEx_PLL3_Config+0x15c>)
 800cfa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfa6:	4a11      	ldr	r2, [pc, #68]	; (800cfec <RCCEx_PLL3_Config+0x15c>)
 800cfa8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cfac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cfae:	4b0f      	ldr	r3, [pc, #60]	; (800cfec <RCCEx_PLL3_Config+0x15c>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	4a0e      	ldr	r2, [pc, #56]	; (800cfec <RCCEx_PLL3_Config+0x15c>)
 800cfb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cfb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cfba:	f7f6 fd49 	bl	8003a50 <HAL_GetTick>
 800cfbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cfc0:	e008      	b.n	800cfd4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cfc2:	f7f6 fd45 	bl	8003a50 <HAL_GetTick>
 800cfc6:	4602      	mov	r2, r0
 800cfc8:	68bb      	ldr	r3, [r7, #8]
 800cfca:	1ad3      	subs	r3, r2, r3
 800cfcc:	2b02      	cmp	r3, #2
 800cfce:	d901      	bls.n	800cfd4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cfd0:	2303      	movs	r3, #3
 800cfd2:	e006      	b.n	800cfe2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cfd4:	4b05      	ldr	r3, [pc, #20]	; (800cfec <RCCEx_PLL3_Config+0x15c>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d0f0      	beq.n	800cfc2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cfe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	3710      	adds	r7, #16
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}
 800cfea:	bf00      	nop
 800cfec:	58024400 	.word	0x58024400
 800cff0:	ffff0007 	.word	0xffff0007

0800cff4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b08a      	sub	sp, #40	; 0x28
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d101      	bne.n	800d006 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d002:	2301      	movs	r3, #1
 800d004:	e075      	b.n	800d0f2 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d00c:	b2db      	uxtb	r3, r3
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d105      	bne.n	800d01e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2200      	movs	r2, #0
 800d016:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d018:	6878      	ldr	r0, [r7, #4]
 800d01a:	f7f5 fe59 	bl	8002cd0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2204      	movs	r2, #4
 800d022:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d026:	6878      	ldr	r0, [r7, #4]
 800d028:	f000 f868 	bl	800d0fc <HAL_SD_InitCard>
 800d02c:	4603      	mov	r3, r0
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d001      	beq.n	800d036 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d032:	2301      	movs	r3, #1
 800d034:	e05d      	b.n	800d0f2 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800d036:	f107 0308 	add.w	r3, r7, #8
 800d03a:	4619      	mov	r1, r3
 800d03c:	6878      	ldr	r0, [r7, #4]
 800d03e:	f000 fdaf 	bl	800dba0 <HAL_SD_GetCardStatus>
 800d042:	4603      	mov	r3, r0
 800d044:	2b00      	cmp	r3, #0
 800d046:	d001      	beq.n	800d04c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800d048:	2301      	movs	r3, #1
 800d04a:	e052      	b.n	800d0f2 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800d04c:	7e3b      	ldrb	r3, [r7, #24]
 800d04e:	b2db      	uxtb	r3, r3
 800d050:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800d052:	7e7b      	ldrb	r3, [r7, #25]
 800d054:	b2db      	uxtb	r3, r3
 800d056:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d05c:	2b01      	cmp	r3, #1
 800d05e:	d10a      	bne.n	800d076 <HAL_SD_Init+0x82>
 800d060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d062:	2b00      	cmp	r3, #0
 800d064:	d102      	bne.n	800d06c <HAL_SD_Init+0x78>
 800d066:	6a3b      	ldr	r3, [r7, #32]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d004      	beq.n	800d076 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d072:	659a      	str	r2, [r3, #88]	; 0x58
 800d074:	e00b      	b.n	800d08e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d07a:	2b01      	cmp	r3, #1
 800d07c:	d104      	bne.n	800d088 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d084:	659a      	str	r2, [r3, #88]	; 0x58
 800d086:	e002      	b.n	800d08e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2200      	movs	r2, #0
 800d08c:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	68db      	ldr	r3, [r3, #12]
 800d092:	4619      	mov	r1, r3
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f000 fe6d 	bl	800dd74 <HAL_SD_ConfigWideBusOperation>
 800d09a:	4603      	mov	r3, r0
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d001      	beq.n	800d0a4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	e026      	b.n	800d0f2 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800d0a4:	f7f6 fcd4 	bl	8003a50 <HAL_GetTick>
 800d0a8:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d0aa:	e011      	b.n	800d0d0 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d0ac:	f7f6 fcd0 	bl	8003a50 <HAL_GetTick>
 800d0b0:	4602      	mov	r2, r0
 800d0b2:	69fb      	ldr	r3, [r7, #28]
 800d0b4:	1ad3      	subs	r3, r2, r3
 800d0b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0ba:	d109      	bne.n	800d0d0 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d0c2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2201      	movs	r2, #1
 800d0c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800d0cc:	2303      	movs	r3, #3
 800d0ce:	e010      	b.n	800d0f2 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f000 ff61 	bl	800df98 <HAL_SD_GetCardState>
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	2b04      	cmp	r3, #4
 800d0da:	d1e7      	bne.n	800d0ac <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2200      	movs	r2, #0
 800d0e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2201      	movs	r2, #1
 800d0ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800d0f0:	2300      	movs	r3, #0
}
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	3728      	adds	r7, #40	; 0x28
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	bd80      	pop	{r7, pc}
	...

0800d0fc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d0fc:	b590      	push	{r4, r7, lr}
 800d0fe:	b08d      	sub	sp, #52	; 0x34
 800d100:	af02      	add	r7, sp, #8
 800d102:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d104:	2300      	movs	r3, #0
 800d106:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d108:	2300      	movs	r3, #0
 800d10a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d10c:	2300      	movs	r3, #0
 800d10e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d110:	2300      	movs	r3, #0
 800d112:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d114:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d118:	f04f 0100 	mov.w	r1, #0
 800d11c:	f7fe fd24 	bl	800bb68 <HAL_RCCEx_GetPeriphCLKFreq>
 800d120:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800d122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d124:	2b00      	cmp	r3, #0
 800d126:	d109      	bne.n	800d13c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2201      	movs	r2, #1
 800d12c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d136:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d138:	2301      	movs	r3, #1
 800d13a:	e070      	b.n	800d21e <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800d13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d13e:	0a1b      	lsrs	r3, r3, #8
 800d140:	4a39      	ldr	r2, [pc, #228]	; (800d228 <HAL_SD_InitCard+0x12c>)
 800d142:	fba2 2303 	umull	r2, r3, r2, r3
 800d146:	091b      	lsrs	r3, r3, #4
 800d148:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681c      	ldr	r4, [r3, #0]
 800d14e:	466a      	mov	r2, sp
 800d150:	f107 0318 	add.w	r3, r7, #24
 800d154:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d158:	e882 0003 	stmia.w	r2, {r0, r1}
 800d15c:	f107 030c 	add.w	r3, r7, #12
 800d160:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d162:	4620      	mov	r0, r4
 800d164:	f004 fec4 	bl	8011ef0 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	4618      	mov	r0, r3
 800d16e:	f004 ff07 	bl	8011f80 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800d172:	69fb      	ldr	r3, [r7, #28]
 800d174:	2b00      	cmp	r3, #0
 800d176:	d005      	beq.n	800d184 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800d178:	69fb      	ldr	r3, [r7, #28]
 800d17a:	005b      	lsls	r3, r3, #1
 800d17c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d17e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d182:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800d184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d186:	2b00      	cmp	r3, #0
 800d188:	d007      	beq.n	800d19a <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800d18a:	4a28      	ldr	r2, [pc, #160]	; (800d22c <HAL_SD_InitCard+0x130>)
 800d18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d18e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d192:	3301      	adds	r3, #1
 800d194:	4618      	mov	r0, r3
 800d196:	f7f6 fc67 	bl	8003a68 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d19a:	6878      	ldr	r0, [r7, #4]
 800d19c:	f000 ffea 	bl	800e174 <SD_PowerON>
 800d1a0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d1a2:	6a3b      	ldr	r3, [r7, #32]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d00b      	beq.n	800d1c0 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	2201      	movs	r2, #1
 800d1ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d1b4:	6a3b      	ldr	r3, [r7, #32]
 800d1b6:	431a      	orrs	r2, r3
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d1bc:	2301      	movs	r3, #1
 800d1be:	e02e      	b.n	800d21e <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d1c0:	6878      	ldr	r0, [r7, #4]
 800d1c2:	f000 ff09 	bl	800dfd8 <SD_InitCard>
 800d1c6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d1c8:	6a3b      	ldr	r3, [r7, #32]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d00b      	beq.n	800d1e6 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2201      	movs	r2, #1
 800d1d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d1da:	6a3b      	ldr	r3, [r7, #32]
 800d1dc:	431a      	orrs	r2, r3
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	e01b      	b.n	800d21e <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f004 ff5c 	bl	80120ac <SDMMC_CmdBlockLength>
 800d1f4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d1f6:	6a3b      	ldr	r3, [r7, #32]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d00f      	beq.n	800d21c <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	4a0b      	ldr	r2, [pc, #44]	; (800d230 <HAL_SD_InitCard+0x134>)
 800d202:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d208:	6a3b      	ldr	r3, [r7, #32]
 800d20a:	431a      	orrs	r2, r3
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2201      	movs	r2, #1
 800d214:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d218:	2301      	movs	r3, #1
 800d21a:	e000      	b.n	800d21e <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800d21c:	2300      	movs	r3, #0
}
 800d21e:	4618      	mov	r0, r3
 800d220:	372c      	adds	r7, #44	; 0x2c
 800d222:	46bd      	mov	sp, r7
 800d224:	bd90      	pop	{r4, r7, pc}
 800d226:	bf00      	nop
 800d228:	014f8b59 	.word	0x014f8b59
 800d22c:	00012110 	.word	0x00012110
 800d230:	1fe00fff 	.word	0x1fe00fff

0800d234 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b08c      	sub	sp, #48	; 0x30
 800d238:	af00      	add	r7, sp, #0
 800d23a:	60f8      	str	r0, [r7, #12]
 800d23c:	60b9      	str	r1, [r7, #8]
 800d23e:	607a      	str	r2, [r7, #4]
 800d240:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d107      	bne.n	800d25c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d250:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d258:	2301      	movs	r3, #1
 800d25a:	e08d      	b.n	800d378 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d262:	b2db      	uxtb	r3, r3
 800d264:	2b01      	cmp	r3, #1
 800d266:	f040 8086 	bne.w	800d376 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	2200      	movs	r2, #0
 800d26e:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	441a      	add	r2, r3
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d27a:	429a      	cmp	r2, r3
 800d27c:	d907      	bls.n	800d28e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d282:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d28a:	2301      	movs	r3, #1
 800d28c:	e074      	b.n	800d378 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	2203      	movs	r2, #3
 800d292:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	2200      	movs	r2, #0
 800d29c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	68ba      	ldr	r2, [r7, #8]
 800d2a2:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	025a      	lsls	r2, r3, #9
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2b0:	2b01      	cmp	r3, #1
 800d2b2:	d002      	beq.n	800d2ba <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800d2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2b6:	025b      	lsls	r3, r3, #9
 800d2b8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d2ba:	f04f 33ff 	mov.w	r3, #4294967295
 800d2be:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	025b      	lsls	r3, r3, #9
 800d2c4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d2c6:	2390      	movs	r3, #144	; 0x90
 800d2c8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d2ca:	2302      	movs	r3, #2
 800d2cc:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	f107 0210 	add.w	r2, r7, #16
 800d2de:	4611      	mov	r1, r2
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f004 feb7 	bl	8012054 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	68da      	ldr	r2, [r3, #12]
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d2f4:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	68ba      	ldr	r2, [r7, #8]
 800d2fc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	2201      	movs	r2, #1
 800d304:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	2b01      	cmp	r3, #1
 800d30a:	d90a      	bls.n	800d322 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	2282      	movs	r2, #130	; 0x82
 800d310:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d318:	4618      	mov	r0, r3
 800d31a:	f004 ff0d 	bl	8012138 <SDMMC_CmdReadMultiBlock>
 800d31e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d320:	e009      	b.n	800d336 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	2281      	movs	r2, #129	; 0x81
 800d326:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d32e:	4618      	mov	r0, r3
 800d330:	f004 fedf 	bl	80120f2 <SDMMC_CmdReadSingleBlock>
 800d334:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d012      	beq.n	800d362 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	4a0f      	ldr	r2, [pc, #60]	; (800d380 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800d342:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d34a:	431a      	orrs	r2, r3
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	2201      	movs	r2, #1
 800d354:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	2200      	movs	r2, #0
 800d35c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d35e:	2301      	movs	r3, #1
 800d360:	e00a      	b.n	800d378 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d370:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800d372:	2300      	movs	r3, #0
 800d374:	e000      	b.n	800d378 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d376:	2302      	movs	r3, #2
  }
}
 800d378:	4618      	mov	r0, r3
 800d37a:	3730      	adds	r7, #48	; 0x30
 800d37c:	46bd      	mov	sp, r7
 800d37e:	bd80      	pop	{r7, pc}
 800d380:	1fe00fff 	.word	0x1fe00fff

0800d384 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b08c      	sub	sp, #48	; 0x30
 800d388:	af00      	add	r7, sp, #0
 800d38a:	60f8      	str	r0, [r7, #12]
 800d38c:	60b9      	str	r1, [r7, #8]
 800d38e:	607a      	str	r2, [r7, #4]
 800d390:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d107      	bne.n	800d3ac <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3a0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	e08d      	b.n	800d4c8 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d3b2:	b2db      	uxtb	r3, r3
 800d3b4:	2b01      	cmp	r3, #1
 800d3b6:	f040 8086 	bne.w	800d4c6 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	2200      	movs	r2, #0
 800d3be:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d3c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	441a      	add	r2, r3
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3ca:	429a      	cmp	r2, r3
 800d3cc:	d907      	bls.n	800d3de <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3d2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d3da:	2301      	movs	r3, #1
 800d3dc:	e074      	b.n	800d4c8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	2203      	movs	r2, #3
 800d3e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	68ba      	ldr	r2, [r7, #8]
 800d3f2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	025a      	lsls	r2, r3, #9
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d400:	2b01      	cmp	r3, #1
 800d402:	d002      	beq.n	800d40a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800d404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d406:	025b      	lsls	r3, r3, #9
 800d408:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d40a:	f04f 33ff 	mov.w	r3, #4294967295
 800d40e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	025b      	lsls	r3, r3, #9
 800d414:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d416:	2390      	movs	r3, #144	; 0x90
 800d418:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d41a:	2300      	movs	r3, #0
 800d41c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d41e:	2300      	movs	r3, #0
 800d420:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d422:	2300      	movs	r3, #0
 800d424:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	f107 0210 	add.w	r2, r7, #16
 800d42e:	4611      	mov	r1, r2
 800d430:	4618      	mov	r0, r3
 800d432:	f004 fe0f 	bl	8012054 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	68da      	ldr	r2, [r3, #12]
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d444:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	68ba      	ldr	r2, [r7, #8]
 800d44c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	2201      	movs	r2, #1
 800d454:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	2b01      	cmp	r3, #1
 800d45a:	d90a      	bls.n	800d472 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	22a0      	movs	r2, #160	; 0xa0
 800d460:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d468:	4618      	mov	r0, r3
 800d46a:	f004 feab 	bl	80121c4 <SDMMC_CmdWriteMultiBlock>
 800d46e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d470:	e009      	b.n	800d486 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	2290      	movs	r2, #144	; 0x90
 800d476:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d47e:	4618      	mov	r0, r3
 800d480:	f004 fe7d 	bl	801217e <SDMMC_CmdWriteSingleBlock>
 800d484:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d012      	beq.n	800d4b2 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	4a0f      	ldr	r2, [pc, #60]	; (800d4d0 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800d492:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d49a:	431a      	orrs	r2, r3
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	2201      	movs	r2, #1
 800d4a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d4ae:	2301      	movs	r3, #1
 800d4b0:	e00a      	b.n	800d4c8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800d4c0:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	e000      	b.n	800d4c8 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d4c6:	2302      	movs	r3, #2
  }
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	3730      	adds	r7, #48	; 0x30
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}
 800d4d0:	1fe00fff 	.word	0x1fe00fff

0800d4d4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b084      	sub	sp, #16
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4e0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d008      	beq.n	800d502 <HAL_SD_IRQHandler+0x2e>
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	f003 0308 	and.w	r3, r3, #8
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d003      	beq.n	800d502 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	f001 f926 	bl	800e74c <SD_Read_IT>
 800d500:	e19a      	b.n	800d838 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	f000 80ac 	beq.w	800d66a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d51a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681a      	ldr	r2, [r3, #0]
 800d526:	4b59      	ldr	r3, [pc, #356]	; (800d68c <HAL_SD_IRQHandler+0x1b8>)
 800d528:	400b      	ands	r3, r1
 800d52a:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d53a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	68da      	ldr	r2, [r3, #12]
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d54a:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	f003 0308 	and.w	r3, r3, #8
 800d552:	2b00      	cmp	r3, #0
 800d554:	d038      	beq.n	800d5c8 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	f003 0302 	and.w	r3, r3, #2
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d104      	bne.n	800d56a <HAL_SD_IRQHandler+0x96>
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	f003 0320 	and.w	r3, r3, #32
 800d566:	2b00      	cmp	r3, #0
 800d568:	d011      	beq.n	800d58e <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	4618      	mov	r0, r3
 800d570:	f004 fe4c 	bl	801220c <SDMMC_CmdStopTransfer>
 800d574:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d576:	68bb      	ldr	r3, [r7, #8]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d008      	beq.n	800d58e <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	431a      	orrs	r2, r3
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d588:	6878      	ldr	r0, [r7, #4]
 800d58a:	f000 f95b 	bl	800d844 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	4a3f      	ldr	r2, [pc, #252]	; (800d690 <HAL_SD_IRQHandler+0x1bc>)
 800d594:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	2201      	movs	r2, #1
 800d59a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	f003 0301 	and.w	r3, r3, #1
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d104      	bne.n	800d5b8 <HAL_SD_IRQHandler+0xe4>
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	f003 0302 	and.w	r3, r3, #2
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d003      	beq.n	800d5c0 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d5b8:	6878      	ldr	r0, [r7, #4]
 800d5ba:	f006 fe4d 	bl	8014258 <HAL_SD_RxCpltCallback>
 800d5be:	e13b      	b.n	800d838 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	f006 fe3f 	bl	8014244 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d5c6:	e137      	b.n	800d838 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	f000 8132 	beq.w	800d838 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	2200      	movs	r2, #0
 800d5da:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	2200      	movs	r2, #0
 800d5ea:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	f003 0302 	and.w	r3, r3, #2
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d104      	bne.n	800d600 <HAL_SD_IRQHandler+0x12c>
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	f003 0320 	and.w	r3, r3, #32
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d011      	beq.n	800d624 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	4618      	mov	r0, r3
 800d606:	f004 fe01 	bl	801220c <SDMMC_CmdStopTransfer>
 800d60a:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d60c:	68bb      	ldr	r3, [r7, #8]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d008      	beq.n	800d624 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d616:	68bb      	ldr	r3, [r7, #8]
 800d618:	431a      	orrs	r2, r3
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	f000 f910 	bl	800d844 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2201      	movs	r2, #1
 800d628:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2200      	movs	r2, #0
 800d630:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	f003 0310 	and.w	r3, r3, #16
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d104      	bne.n	800d646 <HAL_SD_IRQHandler+0x172>
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	f003 0320 	and.w	r3, r3, #32
 800d642:	2b00      	cmp	r3, #0
 800d644:	d002      	beq.n	800d64c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	f006 fdfc 	bl	8014244 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	f003 0301 	and.w	r3, r3, #1
 800d652:	2b00      	cmp	r3, #0
 800d654:	d105      	bne.n	800d662 <HAL_SD_IRQHandler+0x18e>
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	f003 0302 	and.w	r3, r3, #2
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	f000 80eb 	beq.w	800d838 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800d662:	6878      	ldr	r0, [r7, #4]
 800d664:	f006 fdf8 	bl	8014258 <HAL_SD_RxCpltCallback>
}
 800d668:	e0e6      	b.n	800d838 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d674:	2b00      	cmp	r3, #0
 800d676:	d00d      	beq.n	800d694 <HAL_SD_IRQHandler+0x1c0>
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	f003 0308 	and.w	r3, r3, #8
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d008      	beq.n	800d694 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f001 f8a8 	bl	800e7d8 <SD_Write_IT>
 800d688:	e0d6      	b.n	800d838 <HAL_SD_IRQHandler+0x364>
 800d68a:	bf00      	nop
 800d68c:	ffff3ec5 	.word	0xffff3ec5
 800d690:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d69a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	f000 809d 	beq.w	800d7de <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6aa:	f003 0302 	and.w	r3, r3, #2
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d005      	beq.n	800d6be <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6b6:	f043 0202 	orr.w	r2, r3, #2
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6c4:	f003 0308 	and.w	r3, r3, #8
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d005      	beq.n	800d6d8 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6d0:	f043 0208 	orr.w	r2, r3, #8
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6de:	f003 0320 	and.w	r3, r3, #32
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d005      	beq.n	800d6f2 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6ea:	f043 0220 	orr.w	r2, r3, #32
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6f8:	f003 0310 	and.w	r3, r3, #16
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d005      	beq.n	800d70c <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d704:	f043 0210 	orr.w	r2, r3, #16
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	4a4b      	ldr	r2, [pc, #300]	; (800d840 <HAL_SD_IRQHandler+0x36c>)
 800d712:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d722:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	68da      	ldr	r2, [r3, #12]
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d732:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d742:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	68da      	ldr	r2, [r3, #12]
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d752:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	4618      	mov	r0, r3
 800d75a:	f004 fd57 	bl	801220c <SDMMC_CmdStopTransfer>
 800d75e:	4602      	mov	r2, r0
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d764:	431a      	orrs	r2, r3
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	68da      	ldr	r2, [r3, #12]
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d778:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d782:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	f003 0308 	and.w	r3, r3, #8
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d00a      	beq.n	800d7a4 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	2201      	movs	r2, #1
 800d792:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	2200      	movs	r2, #0
 800d79a:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800d79c:	6878      	ldr	r0, [r7, #4]
 800d79e:	f000 f851 	bl	800d844 <HAL_SD_ErrorCallback>
}
 800d7a2:	e049      	b.n	800d838 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d044      	beq.n	800d838 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d040      	beq.n	800d838 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d7c4:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2201      	movs	r2, #1
 800d7d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800d7d6:	6878      	ldr	r0, [r7, #4]
 800d7d8:	f000 f834 	bl	800d844 <HAL_SD_ErrorCallback>
}
 800d7dc:	e02c      	b.n	800d838 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d025      	beq.n	800d838 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7f4:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7fc:	f003 0304 	and.w	r3, r3, #4
 800d800:	2b00      	cmp	r3, #0
 800d802:	d10c      	bne.n	800d81e <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	f003 0320 	and.w	r3, r3, #32
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d003      	beq.n	800d816 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f001 f84a 	bl	800e8a8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800d814:	e010      	b.n	800d838 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800d816:	6878      	ldr	r0, [r7, #4]
 800d818:	f001 f832 	bl	800e880 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800d81c:	e00c      	b.n	800d838 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	f003 0320 	and.w	r3, r3, #32
 800d824:	2b00      	cmp	r3, #0
 800d826:	d003      	beq.n	800d830 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f001 f833 	bl	800e894 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800d82e:	e003      	b.n	800d838 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	f001 f81b 	bl	800e86c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800d836:	e7ff      	b.n	800d838 <HAL_SD_IRQHandler+0x364>
 800d838:	bf00      	nop
 800d83a:	3710      	adds	r7, #16
 800d83c:	46bd      	mov	sp, r7
 800d83e:	bd80      	pop	{r7, pc}
 800d840:	18000f3a 	.word	0x18000f3a

0800d844 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d844:	b480      	push	{r7}
 800d846:	b083      	sub	sp, #12
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d84c:	bf00      	nop
 800d84e:	370c      	adds	r7, #12
 800d850:	46bd      	mov	sp, r7
 800d852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d856:	4770      	bx	lr

0800d858 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d858:	b480      	push	{r7}
 800d85a:	b083      	sub	sp, #12
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
 800d860:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d866:	0f9b      	lsrs	r3, r3, #30
 800d868:	b2da      	uxtb	r2, r3
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d872:	0e9b      	lsrs	r3, r3, #26
 800d874:	b2db      	uxtb	r3, r3
 800d876:	f003 030f 	and.w	r3, r3, #15
 800d87a:	b2da      	uxtb	r2, r3
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d884:	0e1b      	lsrs	r3, r3, #24
 800d886:	b2db      	uxtb	r3, r3
 800d888:	f003 0303 	and.w	r3, r3, #3
 800d88c:	b2da      	uxtb	r2, r3
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d896:	0c1b      	lsrs	r3, r3, #16
 800d898:	b2da      	uxtb	r2, r3
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8a2:	0a1b      	lsrs	r3, r3, #8
 800d8a4:	b2da      	uxtb	r2, r3
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8ae:	b2da      	uxtb	r2, r3
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8b8:	0d1b      	lsrs	r3, r3, #20
 800d8ba:	b29a      	uxth	r2, r3
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8c4:	0c1b      	lsrs	r3, r3, #16
 800d8c6:	b2db      	uxtb	r3, r3
 800d8c8:	f003 030f 	and.w	r3, r3, #15
 800d8cc:	b2da      	uxtb	r2, r3
 800d8ce:	683b      	ldr	r3, [r7, #0]
 800d8d0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8d6:	0bdb      	lsrs	r3, r3, #15
 800d8d8:	b2db      	uxtb	r3, r3
 800d8da:	f003 0301 	and.w	r3, r3, #1
 800d8de:	b2da      	uxtb	r2, r3
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8e8:	0b9b      	lsrs	r3, r3, #14
 800d8ea:	b2db      	uxtb	r3, r3
 800d8ec:	f003 0301 	and.w	r3, r3, #1
 800d8f0:	b2da      	uxtb	r2, r3
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8fa:	0b5b      	lsrs	r3, r3, #13
 800d8fc:	b2db      	uxtb	r3, r3
 800d8fe:	f003 0301 	and.w	r3, r3, #1
 800d902:	b2da      	uxtb	r2, r3
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d90c:	0b1b      	lsrs	r3, r3, #12
 800d90e:	b2db      	uxtb	r3, r3
 800d910:	f003 0301 	and.w	r3, r3, #1
 800d914:	b2da      	uxtb	r2, r3
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	2200      	movs	r2, #0
 800d91e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d924:	2b00      	cmp	r3, #0
 800d926:	d163      	bne.n	800d9f0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d92c:	009a      	lsls	r2, r3, #2
 800d92e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d932:	4013      	ands	r3, r2
 800d934:	687a      	ldr	r2, [r7, #4]
 800d936:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800d938:	0f92      	lsrs	r2, r2, #30
 800d93a:	431a      	orrs	r2, r3
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d944:	0edb      	lsrs	r3, r3, #27
 800d946:	b2db      	uxtb	r3, r3
 800d948:	f003 0307 	and.w	r3, r3, #7
 800d94c:	b2da      	uxtb	r2, r3
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d956:	0e1b      	lsrs	r3, r3, #24
 800d958:	b2db      	uxtb	r3, r3
 800d95a:	f003 0307 	and.w	r3, r3, #7
 800d95e:	b2da      	uxtb	r2, r3
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d968:	0d5b      	lsrs	r3, r3, #21
 800d96a:	b2db      	uxtb	r3, r3
 800d96c:	f003 0307 	and.w	r3, r3, #7
 800d970:	b2da      	uxtb	r2, r3
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d97a:	0c9b      	lsrs	r3, r3, #18
 800d97c:	b2db      	uxtb	r3, r3
 800d97e:	f003 0307 	and.w	r3, r3, #7
 800d982:	b2da      	uxtb	r2, r3
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d98c:	0bdb      	lsrs	r3, r3, #15
 800d98e:	b2db      	uxtb	r3, r3
 800d990:	f003 0307 	and.w	r3, r3, #7
 800d994:	b2da      	uxtb	r2, r3
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	691b      	ldr	r3, [r3, #16]
 800d99e:	1c5a      	adds	r2, r3, #1
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d9a4:	683b      	ldr	r3, [r7, #0]
 800d9a6:	7e1b      	ldrb	r3, [r3, #24]
 800d9a8:	b2db      	uxtb	r3, r3
 800d9aa:	f003 0307 	and.w	r3, r3, #7
 800d9ae:	3302      	adds	r3, #2
 800d9b0:	2201      	movs	r2, #1
 800d9b2:	fa02 f303 	lsl.w	r3, r2, r3
 800d9b6:	687a      	ldr	r2, [r7, #4]
 800d9b8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d9ba:	fb03 f202 	mul.w	r2, r3, r2
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	7a1b      	ldrb	r3, [r3, #8]
 800d9c6:	b2db      	uxtb	r3, r3
 800d9c8:	f003 030f 	and.w	r3, r3, #15
 800d9cc:	2201      	movs	r2, #1
 800d9ce:	409a      	lsls	r2, r3
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d9d8:	687a      	ldr	r2, [r7, #4]
 800d9da:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800d9dc:	0a52      	lsrs	r2, r2, #9
 800d9de:	fb03 f202 	mul.w	r2, r3, r2
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d9ec:	655a      	str	r2, [r3, #84]	; 0x54
 800d9ee:	e031      	b.n	800da54 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9f4:	2b01      	cmp	r3, #1
 800d9f6:	d11d      	bne.n	800da34 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d9fc:	041b      	lsls	r3, r3, #16
 800d9fe:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da06:	0c1b      	lsrs	r3, r3, #16
 800da08:	431a      	orrs	r2, r3
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	691b      	ldr	r3, [r3, #16]
 800da12:	3301      	adds	r3, #1
 800da14:	029a      	lsls	r2, r3, #10
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da28:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	655a      	str	r2, [r3, #84]	; 0x54
 800da32:	e00f      	b.n	800da54 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	4a58      	ldr	r2, [pc, #352]	; (800db9c <HAL_SD_GetCardCSD+0x344>)
 800da3a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da40:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2201      	movs	r2, #1
 800da4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800da50:	2301      	movs	r3, #1
 800da52:	e09d      	b.n	800db90 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da58:	0b9b      	lsrs	r3, r3, #14
 800da5a:	b2db      	uxtb	r3, r3
 800da5c:	f003 0301 	and.w	r3, r3, #1
 800da60:	b2da      	uxtb	r2, r3
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da6a:	09db      	lsrs	r3, r3, #7
 800da6c:	b2db      	uxtb	r3, r3
 800da6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da72:	b2da      	uxtb	r2, r3
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da7c:	b2db      	uxtb	r3, r3
 800da7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da82:	b2da      	uxtb	r2, r3
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da8c:	0fdb      	lsrs	r3, r3, #31
 800da8e:	b2da      	uxtb	r2, r3
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da98:	0f5b      	lsrs	r3, r3, #29
 800da9a:	b2db      	uxtb	r3, r3
 800da9c:	f003 0303 	and.w	r3, r3, #3
 800daa0:	b2da      	uxtb	r2, r3
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800daaa:	0e9b      	lsrs	r3, r3, #26
 800daac:	b2db      	uxtb	r3, r3
 800daae:	f003 0307 	and.w	r3, r3, #7
 800dab2:	b2da      	uxtb	r2, r3
 800dab4:	683b      	ldr	r3, [r7, #0]
 800dab6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dabc:	0d9b      	lsrs	r3, r3, #22
 800dabe:	b2db      	uxtb	r3, r3
 800dac0:	f003 030f 	and.w	r3, r3, #15
 800dac4:	b2da      	uxtb	r2, r3
 800dac6:	683b      	ldr	r3, [r7, #0]
 800dac8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dace:	0d5b      	lsrs	r3, r3, #21
 800dad0:	b2db      	uxtb	r3, r3
 800dad2:	f003 0301 	and.w	r3, r3, #1
 800dad6:	b2da      	uxtb	r2, r3
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800dade:	683b      	ldr	r3, [r7, #0]
 800dae0:	2200      	movs	r2, #0
 800dae2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800daea:	0c1b      	lsrs	r3, r3, #16
 800daec:	b2db      	uxtb	r3, r3
 800daee:	f003 0301 	and.w	r3, r3, #1
 800daf2:	b2da      	uxtb	r2, r3
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dafe:	0bdb      	lsrs	r3, r3, #15
 800db00:	b2db      	uxtb	r3, r3
 800db02:	f003 0301 	and.w	r3, r3, #1
 800db06:	b2da      	uxtb	r2, r3
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db12:	0b9b      	lsrs	r3, r3, #14
 800db14:	b2db      	uxtb	r3, r3
 800db16:	f003 0301 	and.w	r3, r3, #1
 800db1a:	b2da      	uxtb	r2, r3
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db26:	0b5b      	lsrs	r3, r3, #13
 800db28:	b2db      	uxtb	r3, r3
 800db2a:	f003 0301 	and.w	r3, r3, #1
 800db2e:	b2da      	uxtb	r2, r3
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db3a:	0b1b      	lsrs	r3, r3, #12
 800db3c:	b2db      	uxtb	r3, r3
 800db3e:	f003 0301 	and.w	r3, r3, #1
 800db42:	b2da      	uxtb	r2, r3
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db4e:	0a9b      	lsrs	r3, r3, #10
 800db50:	b2db      	uxtb	r3, r3
 800db52:	f003 0303 	and.w	r3, r3, #3
 800db56:	b2da      	uxtb	r2, r3
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db62:	0a1b      	lsrs	r3, r3, #8
 800db64:	b2db      	uxtb	r3, r3
 800db66:	f003 0303 	and.w	r3, r3, #3
 800db6a:	b2da      	uxtb	r2, r3
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db76:	085b      	lsrs	r3, r3, #1
 800db78:	b2db      	uxtb	r3, r3
 800db7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db7e:	b2da      	uxtb	r2, r3
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	2201      	movs	r2, #1
 800db8a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800db8e:	2300      	movs	r3, #0
}
 800db90:	4618      	mov	r0, r3
 800db92:	370c      	adds	r7, #12
 800db94:	46bd      	mov	sp, r7
 800db96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9a:	4770      	bx	lr
 800db9c:	1fe00fff 	.word	0x1fe00fff

0800dba0 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b094      	sub	sp, #80	; 0x50
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
 800dba8:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800dbaa:	2300      	movs	r3, #0
 800dbac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dbb6:	b2db      	uxtb	r3, r3
 800dbb8:	2b03      	cmp	r3, #3
 800dbba:	d101      	bne.n	800dbc0 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800dbbc:	2301      	movs	r3, #1
 800dbbe:	e0a7      	b.n	800dd10 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800dbc0:	f107 0308 	add.w	r3, r7, #8
 800dbc4:	4619      	mov	r1, r3
 800dbc6:	6878      	ldr	r0, [r7, #4]
 800dbc8:	f000 fb62 	bl	800e290 <SD_SendSDStatus>
 800dbcc:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800dbce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d011      	beq.n	800dbf8 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	4a4f      	ldr	r2, [pc, #316]	; (800dd18 <HAL_SD_GetCardStatus+0x178>)
 800dbda:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dbe0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbe2:	431a      	orrs	r2, r3
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2201      	movs	r2, #1
 800dbec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800dbf0:	2301      	movs	r3, #1
 800dbf2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800dbf6:	e070      	b.n	800dcda <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800dbf8:	68bb      	ldr	r3, [r7, #8]
 800dbfa:	099b      	lsrs	r3, r3, #6
 800dbfc:	b2db      	uxtb	r3, r3
 800dbfe:	f003 0303 	and.w	r3, r3, #3
 800dc02:	b2da      	uxtb	r2, r3
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800dc08:	68bb      	ldr	r3, [r7, #8]
 800dc0a:	095b      	lsrs	r3, r3, #5
 800dc0c:	b2db      	uxtb	r3, r3
 800dc0e:	f003 0301 	and.w	r3, r3, #1
 800dc12:	b2da      	uxtb	r2, r3
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800dc18:	68bb      	ldr	r3, [r7, #8]
 800dc1a:	0a1b      	lsrs	r3, r3, #8
 800dc1c:	b29b      	uxth	r3, r3
 800dc1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dc22:	b29a      	uxth	r2, r3
 800dc24:	68bb      	ldr	r3, [r7, #8]
 800dc26:	0e1b      	lsrs	r3, r3, #24
 800dc28:	b29b      	uxth	r3, r3
 800dc2a:	4313      	orrs	r3, r2
 800dc2c:	b29a      	uxth	r2, r3
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	061a      	lsls	r2, r3, #24
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	021b      	lsls	r3, r3, #8
 800dc3a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dc3e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	0a1b      	lsrs	r3, r3, #8
 800dc44:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dc48:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	0e1b      	lsrs	r3, r3, #24
 800dc4e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dc50:	683b      	ldr	r3, [r7, #0]
 800dc52:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800dc54:	693b      	ldr	r3, [r7, #16]
 800dc56:	b2da      	uxtb	r2, r3
 800dc58:	683b      	ldr	r3, [r7, #0]
 800dc5a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800dc5c:	693b      	ldr	r3, [r7, #16]
 800dc5e:	0a1b      	lsrs	r3, r3, #8
 800dc60:	b2da      	uxtb	r2, r3
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800dc66:	693b      	ldr	r3, [r7, #16]
 800dc68:	0d1b      	lsrs	r3, r3, #20
 800dc6a:	b2db      	uxtb	r3, r3
 800dc6c:	f003 030f 	and.w	r3, r3, #15
 800dc70:	b2da      	uxtb	r2, r3
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800dc76:	693b      	ldr	r3, [r7, #16]
 800dc78:	0c1b      	lsrs	r3, r3, #16
 800dc7a:	b29b      	uxth	r3, r3
 800dc7c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dc80:	b29a      	uxth	r2, r3
 800dc82:	697b      	ldr	r3, [r7, #20]
 800dc84:	b29b      	uxth	r3, r3
 800dc86:	b2db      	uxtb	r3, r3
 800dc88:	b29b      	uxth	r3, r3
 800dc8a:	4313      	orrs	r3, r2
 800dc8c:	b29a      	uxth	r2, r3
 800dc8e:	683b      	ldr	r3, [r7, #0]
 800dc90:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800dc92:	697b      	ldr	r3, [r7, #20]
 800dc94:	0a9b      	lsrs	r3, r3, #10
 800dc96:	b2db      	uxtb	r3, r3
 800dc98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dc9c:	b2da      	uxtb	r2, r3
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800dca2:	697b      	ldr	r3, [r7, #20]
 800dca4:	0a1b      	lsrs	r3, r3, #8
 800dca6:	b2db      	uxtb	r3, r3
 800dca8:	f003 0303 	and.w	r3, r3, #3
 800dcac:	b2da      	uxtb	r2, r3
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800dcb2:	697b      	ldr	r3, [r7, #20]
 800dcb4:	091b      	lsrs	r3, r3, #4
 800dcb6:	b2db      	uxtb	r3, r3
 800dcb8:	f003 030f 	and.w	r3, r3, #15
 800dcbc:	b2da      	uxtb	r2, r3
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800dcc2:	697b      	ldr	r3, [r7, #20]
 800dcc4:	b2db      	uxtb	r3, r3
 800dcc6:	f003 030f 	and.w	r3, r3, #15
 800dcca:	b2da      	uxtb	r2, r3
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800dcd0:	69bb      	ldr	r3, [r7, #24]
 800dcd2:	0e1b      	lsrs	r3, r3, #24
 800dcd4:	b2da      	uxtb	r2, r3
 800dcd6:	683b      	ldr	r3, [r7, #0]
 800dcd8:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dce2:	4618      	mov	r0, r3
 800dce4:	f004 f9e2 	bl	80120ac <SDMMC_CmdBlockLength>
 800dce8:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800dcea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d00d      	beq.n	800dd0c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	4a08      	ldr	r2, [pc, #32]	; (800dd18 <HAL_SD_GetCardStatus+0x178>)
 800dcf6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dcfc:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2201      	movs	r2, #1
 800dd02:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800dd06:	2301      	movs	r3, #1
 800dd08:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800dd0c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800dd10:	4618      	mov	r0, r3
 800dd12:	3750      	adds	r7, #80	; 0x50
 800dd14:	46bd      	mov	sp, r7
 800dd16:	bd80      	pop	{r7, pc}
 800dd18:	1fe00fff 	.word	0x1fe00fff

0800dd1c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800dd1c:	b480      	push	{r7}
 800dd1e:	b083      	sub	sp, #12
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
 800dd24:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dd42:	683b      	ldr	r3, [r7, #0]
 800dd44:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800dd66:	2300      	movs	r3, #0
}
 800dd68:	4618      	mov	r0, r3
 800dd6a:	370c      	adds	r7, #12
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd72:	4770      	bx	lr

0800dd74 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800dd74:	b590      	push	{r4, r7, lr}
 800dd76:	b08d      	sub	sp, #52	; 0x34
 800dd78:	af02      	add	r7, sp, #8
 800dd7a:	6078      	str	r0, [r7, #4]
 800dd7c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800dd7e:	2300      	movs	r3, #0
 800dd80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2203      	movs	r2, #3
 800dd88:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd90:	2b03      	cmp	r3, #3
 800dd92:	d02e      	beq.n	800ddf2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800dd94:	683b      	ldr	r3, [r7, #0]
 800dd96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dd9a:	d106      	bne.n	800ddaa <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dda0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	635a      	str	r2, [r3, #52]	; 0x34
 800dda8:	e029      	b.n	800ddfe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ddb0:	d10a      	bne.n	800ddc8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ddb2:	6878      	ldr	r0, [r7, #4]
 800ddb4:	f000 fb64 	bl	800e480 <SD_WideBus_Enable>
 800ddb8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ddbe:	6a3b      	ldr	r3, [r7, #32]
 800ddc0:	431a      	orrs	r2, r3
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	635a      	str	r2, [r3, #52]	; 0x34
 800ddc6:	e01a      	b.n	800ddfe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d10a      	bne.n	800dde4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ddce:	6878      	ldr	r0, [r7, #4]
 800ddd0:	f000 fba1 	bl	800e516 <SD_WideBus_Disable>
 800ddd4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ddda:	6a3b      	ldr	r3, [r7, #32]
 800dddc:	431a      	orrs	r2, r3
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	635a      	str	r2, [r3, #52]	; 0x34
 800dde2:	e00c      	b.n	800ddfe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dde8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	635a      	str	r2, [r3, #52]	; 0x34
 800ddf0:	e005      	b.n	800ddfe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddf6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de02:	2b00      	cmp	r3, #0
 800de04:	d007      	beq.n	800de16 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	4a5f      	ldr	r2, [pc, #380]	; (800df88 <HAL_SD_ConfigWideBusOperation+0x214>)
 800de0c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800de0e:	2301      	movs	r3, #1
 800de10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800de14:	e096      	b.n	800df44 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800de16:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800de1a:	f04f 0100 	mov.w	r1, #0
 800de1e:	f7fd fea3 	bl	800bb68 <HAL_RCCEx_GetPeriphCLKFreq>
 800de22:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800de24:	69fb      	ldr	r3, [r7, #28]
 800de26:	2b00      	cmp	r3, #0
 800de28:	f000 8083 	beq.w	800df32 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	685b      	ldr	r3, [r3, #4]
 800de30:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	689b      	ldr	r3, [r3, #8]
 800de36:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800de38:	683b      	ldr	r3, [r7, #0]
 800de3a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	691b      	ldr	r3, [r3, #16]
 800de40:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	695a      	ldr	r2, [r3, #20]
 800de46:	69fb      	ldr	r3, [r7, #28]
 800de48:	4950      	ldr	r1, [pc, #320]	; (800df8c <HAL_SD_ConfigWideBusOperation+0x218>)
 800de4a:	fba1 1303 	umull	r1, r3, r1, r3
 800de4e:	0e1b      	lsrs	r3, r3, #24
 800de50:	429a      	cmp	r2, r3
 800de52:	d303      	bcc.n	800de5c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	695b      	ldr	r3, [r3, #20]
 800de58:	61bb      	str	r3, [r7, #24]
 800de5a:	e05a      	b.n	800df12 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de64:	d103      	bne.n	800de6e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	695b      	ldr	r3, [r3, #20]
 800de6a:	61bb      	str	r3, [r7, #24]
 800de6c:	e051      	b.n	800df12 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800de72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de76:	d126      	bne.n	800dec6 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	695b      	ldr	r3, [r3, #20]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d10e      	bne.n	800de9e <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800de80:	69fb      	ldr	r3, [r7, #28]
 800de82:	4a43      	ldr	r2, [pc, #268]	; (800df90 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800de84:	4293      	cmp	r3, r2
 800de86:	d906      	bls.n	800de96 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800de88:	69fb      	ldr	r3, [r7, #28]
 800de8a:	4a40      	ldr	r2, [pc, #256]	; (800df8c <HAL_SD_ConfigWideBusOperation+0x218>)
 800de8c:	fba2 2303 	umull	r2, r3, r2, r3
 800de90:	0e5b      	lsrs	r3, r3, #25
 800de92:	61bb      	str	r3, [r7, #24]
 800de94:	e03d      	b.n	800df12 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	695b      	ldr	r3, [r3, #20]
 800de9a:	61bb      	str	r3, [r7, #24]
 800de9c:	e039      	b.n	800df12 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	695b      	ldr	r3, [r3, #20]
 800dea2:	005b      	lsls	r3, r3, #1
 800dea4:	69fa      	ldr	r2, [r7, #28]
 800dea6:	fbb2 f3f3 	udiv	r3, r2, r3
 800deaa:	4a39      	ldr	r2, [pc, #228]	; (800df90 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800deac:	4293      	cmp	r3, r2
 800deae:	d906      	bls.n	800debe <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800deb0:	69fb      	ldr	r3, [r7, #28]
 800deb2:	4a36      	ldr	r2, [pc, #216]	; (800df8c <HAL_SD_ConfigWideBusOperation+0x218>)
 800deb4:	fba2 2303 	umull	r2, r3, r2, r3
 800deb8:	0e5b      	lsrs	r3, r3, #25
 800deba:	61bb      	str	r3, [r7, #24]
 800debc:	e029      	b.n	800df12 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	695b      	ldr	r3, [r3, #20]
 800dec2:	61bb      	str	r3, [r7, #24]
 800dec4:	e025      	b.n	800df12 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	695b      	ldr	r3, [r3, #20]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d10e      	bne.n	800deec <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800dece:	69fb      	ldr	r3, [r7, #28]
 800ded0:	4a30      	ldr	r2, [pc, #192]	; (800df94 <HAL_SD_ConfigWideBusOperation+0x220>)
 800ded2:	4293      	cmp	r3, r2
 800ded4:	d906      	bls.n	800dee4 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ded6:	69fb      	ldr	r3, [r7, #28]
 800ded8:	4a2c      	ldr	r2, [pc, #176]	; (800df8c <HAL_SD_ConfigWideBusOperation+0x218>)
 800deda:	fba2 2303 	umull	r2, r3, r2, r3
 800dede:	0e1b      	lsrs	r3, r3, #24
 800dee0:	61bb      	str	r3, [r7, #24]
 800dee2:	e016      	b.n	800df12 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	695b      	ldr	r3, [r3, #20]
 800dee8:	61bb      	str	r3, [r7, #24]
 800deea:	e012      	b.n	800df12 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	695b      	ldr	r3, [r3, #20]
 800def0:	005b      	lsls	r3, r3, #1
 800def2:	69fa      	ldr	r2, [r7, #28]
 800def4:	fbb2 f3f3 	udiv	r3, r2, r3
 800def8:	4a26      	ldr	r2, [pc, #152]	; (800df94 <HAL_SD_ConfigWideBusOperation+0x220>)
 800defa:	4293      	cmp	r3, r2
 800defc:	d906      	bls.n	800df0c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800defe:	69fb      	ldr	r3, [r7, #28]
 800df00:	4a22      	ldr	r2, [pc, #136]	; (800df8c <HAL_SD_ConfigWideBusOperation+0x218>)
 800df02:	fba2 2303 	umull	r2, r3, r2, r3
 800df06:	0e1b      	lsrs	r3, r3, #24
 800df08:	61bb      	str	r3, [r7, #24]
 800df0a:	e002      	b.n	800df12 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	695b      	ldr	r3, [r3, #20]
 800df10:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681c      	ldr	r4, [r3, #0]
 800df16:	466a      	mov	r2, sp
 800df18:	f107 0314 	add.w	r3, r7, #20
 800df1c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800df20:	e882 0003 	stmia.w	r2, {r0, r1}
 800df24:	f107 0308 	add.w	r3, r7, #8
 800df28:	cb0e      	ldmia	r3, {r1, r2, r3}
 800df2a:	4620      	mov	r0, r4
 800df2c:	f003 ffe0 	bl	8011ef0 <SDMMC_Init>
 800df30:	e008      	b.n	800df44 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df36:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800df3e:	2301      	movs	r3, #1
 800df40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	f44f 7100 	mov.w	r1, #512	; 0x200
 800df4c:	4618      	mov	r0, r3
 800df4e:	f004 f8ad 	bl	80120ac <SDMMC_CmdBlockLength>
 800df52:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800df54:	6a3b      	ldr	r3, [r7, #32]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d00c      	beq.n	800df74 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	4a0a      	ldr	r2, [pc, #40]	; (800df88 <HAL_SD_ConfigWideBusOperation+0x214>)
 800df60:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800df66:	6a3b      	ldr	r3, [r7, #32]
 800df68:	431a      	orrs	r2, r3
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800df6e:	2301      	movs	r3, #1
 800df70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	2201      	movs	r2, #1
 800df78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800df7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800df80:	4618      	mov	r0, r3
 800df82:	372c      	adds	r7, #44	; 0x2c
 800df84:	46bd      	mov	sp, r7
 800df86:	bd90      	pop	{r4, r7, pc}
 800df88:	1fe00fff 	.word	0x1fe00fff
 800df8c:	55e63b89 	.word	0x55e63b89
 800df90:	02faf080 	.word	0x02faf080
 800df94:	017d7840 	.word	0x017d7840

0800df98 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b086      	sub	sp, #24
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800dfa4:	f107 030c 	add.w	r3, r7, #12
 800dfa8:	4619      	mov	r1, r3
 800dfaa:	6878      	ldr	r0, [r7, #4]
 800dfac:	f000 fa40 	bl	800e430 <SD_SendStatus>
 800dfb0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d005      	beq.n	800dfc4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	431a      	orrs	r2, r3
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	0a5b      	lsrs	r3, r3, #9
 800dfc8:	f003 030f 	and.w	r3, r3, #15
 800dfcc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800dfce:	693b      	ldr	r3, [r7, #16]
}
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	3718      	adds	r7, #24
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	bd80      	pop	{r7, pc}

0800dfd8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b090      	sub	sp, #64	; 0x40
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800dfe4:	f7f5 fd34 	bl	8003a50 <HAL_GetTick>
 800dfe8:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	4618      	mov	r0, r3
 800dff0:	f003 ffd7 	bl	8011fa2 <SDMMC_GetPowerState>
 800dff4:	4603      	mov	r3, r0
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d102      	bne.n	800e000 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dffa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800dffe:	e0b5      	b.n	800e16c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e004:	2b03      	cmp	r3, #3
 800e006:	d02e      	beq.n	800e066 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	4618      	mov	r0, r3
 800e00e:	f004 fa22 	bl	8012456 <SDMMC_CmdSendCID>
 800e012:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e016:	2b00      	cmp	r3, #0
 800e018:	d001      	beq.n	800e01e <SD_InitCard+0x46>
    {
      return errorstate;
 800e01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e01c:	e0a6      	b.n	800e16c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	2100      	movs	r1, #0
 800e024:	4618      	mov	r0, r3
 800e026:	f004 f802 	bl	801202e <SDMMC_GetResponse>
 800e02a:	4602      	mov	r2, r0
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	2104      	movs	r1, #4
 800e036:	4618      	mov	r0, r3
 800e038:	f003 fff9 	bl	801202e <SDMMC_GetResponse>
 800e03c:	4602      	mov	r2, r0
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	2108      	movs	r1, #8
 800e048:	4618      	mov	r0, r3
 800e04a:	f003 fff0 	bl	801202e <SDMMC_GetResponse>
 800e04e:	4602      	mov	r2, r0
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	210c      	movs	r1, #12
 800e05a:	4618      	mov	r0, r3
 800e05c:	f003 ffe7 	bl	801202e <SDMMC_GetResponse>
 800e060:	4602      	mov	r2, r0
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e06a:	2b03      	cmp	r3, #3
 800e06c:	d01d      	beq.n	800e0aa <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800e06e:	e019      	b.n	800e0a4 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	f107 020a 	add.w	r2, r7, #10
 800e078:	4611      	mov	r1, r2
 800e07a:	4618      	mov	r0, r3
 800e07c:	f004 fa2a 	bl	80124d4 <SDMMC_CmdSetRelAdd>
 800e080:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800e082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e084:	2b00      	cmp	r3, #0
 800e086:	d001      	beq.n	800e08c <SD_InitCard+0xb4>
      {
        return errorstate;
 800e088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e08a:	e06f      	b.n	800e16c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800e08c:	f7f5 fce0 	bl	8003a50 <HAL_GetTick>
 800e090:	4602      	mov	r2, r0
 800e092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e094:	1ad3      	subs	r3, r2, r3
 800e096:	f241 3287 	movw	r2, #4999	; 0x1387
 800e09a:	4293      	cmp	r3, r2
 800e09c:	d902      	bls.n	800e0a4 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800e09e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e0a2:	e063      	b.n	800e16c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800e0a4:	897b      	ldrh	r3, [r7, #10]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d0e2      	beq.n	800e070 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0ae:	2b03      	cmp	r3, #3
 800e0b0:	d036      	beq.n	800e120 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e0b2:	897b      	ldrh	r3, [r7, #10]
 800e0b4:	461a      	mov	r2, r3
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	681a      	ldr	r2, [r3, #0]
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0c2:	041b      	lsls	r3, r3, #16
 800e0c4:	4619      	mov	r1, r3
 800e0c6:	4610      	mov	r0, r2
 800e0c8:	f004 f9e4 	bl	8012494 <SDMMC_CmdSendCSD>
 800e0cc:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d001      	beq.n	800e0d8 <SD_InitCard+0x100>
    {
      return errorstate;
 800e0d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0d6:	e049      	b.n	800e16c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	2100      	movs	r1, #0
 800e0de:	4618      	mov	r0, r3
 800e0e0:	f003 ffa5 	bl	801202e <SDMMC_GetResponse>
 800e0e4:	4602      	mov	r2, r0
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	2104      	movs	r1, #4
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	f003 ff9c 	bl	801202e <SDMMC_GetResponse>
 800e0f6:	4602      	mov	r2, r0
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	2108      	movs	r1, #8
 800e102:	4618      	mov	r0, r3
 800e104:	f003 ff93 	bl	801202e <SDMMC_GetResponse>
 800e108:	4602      	mov	r2, r0
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	210c      	movs	r1, #12
 800e114:	4618      	mov	r0, r3
 800e116:	f003 ff8a 	bl	801202e <SDMMC_GetResponse>
 800e11a:	4602      	mov	r2, r0
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	2104      	movs	r1, #4
 800e126:	4618      	mov	r0, r3
 800e128:	f003 ff81 	bl	801202e <SDMMC_GetResponse>
 800e12c:	4603      	mov	r3, r0
 800e12e:	0d1a      	lsrs	r2, r3, #20
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e134:	f107 030c 	add.w	r3, r7, #12
 800e138:	4619      	mov	r1, r3
 800e13a:	6878      	ldr	r0, [r7, #4]
 800e13c:	f7ff fb8c 	bl	800d858 <HAL_SD_GetCardCSD>
 800e140:	4603      	mov	r3, r0
 800e142:	2b00      	cmp	r3, #0
 800e144:	d002      	beq.n	800e14c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e146:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e14a:	e00f      	b.n	800e16c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681a      	ldr	r2, [r3, #0]
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e154:	041b      	lsls	r3, r3, #16
 800e156:	4619      	mov	r1, r3
 800e158:	4610      	mov	r0, r2
 800e15a:	f004 f893 	bl	8012284 <SDMMC_CmdSelDesel>
 800e15e:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800e160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e162:	2b00      	cmp	r3, #0
 800e164:	d001      	beq.n	800e16a <SD_InitCard+0x192>
  {
    return errorstate;
 800e166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e168:	e000      	b.n	800e16c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e16a:	2300      	movs	r3, #0
}
 800e16c:	4618      	mov	r0, r3
 800e16e:	3740      	adds	r7, #64	; 0x40
 800e170:	46bd      	mov	sp, r7
 800e172:	bd80      	pop	{r7, pc}

0800e174 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b086      	sub	sp, #24
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e17c:	2300      	movs	r3, #0
 800e17e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800e180:	2300      	movs	r3, #0
 800e182:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800e184:	2300      	movs	r3, #0
 800e186:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	4618      	mov	r0, r3
 800e18e:	f004 f89c 	bl	80122ca <SDMMC_CmdGoIdleState>
 800e192:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d001      	beq.n	800e19e <SD_PowerON+0x2a>
  {
    return errorstate;
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	e072      	b.n	800e284 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f004 f8af 	bl	8012306 <SDMMC_CmdOperCond>
 800e1a8:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e1b0:	d10d      	bne.n	800e1ce <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	4618      	mov	r0, r3
 800e1be:	f004 f884 	bl	80122ca <SDMMC_CmdGoIdleState>
 800e1c2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d004      	beq.n	800e1d4 <SD_PowerON+0x60>
    {
      return errorstate;
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	e05a      	b.n	800e284 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	2201      	movs	r2, #1
 800e1d2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e1d8:	2b01      	cmp	r3, #1
 800e1da:	d137      	bne.n	800e24c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	2100      	movs	r1, #0
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f004 f8af 	bl	8012346 <SDMMC_CmdAppCommand>
 800e1e8:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d02d      	beq.n	800e24c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e1f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e1f4:	e046      	b.n	800e284 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	2100      	movs	r1, #0
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	f004 f8a2 	bl	8012346 <SDMMC_CmdAppCommand>
 800e202:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d001      	beq.n	800e20e <SD_PowerON+0x9a>
    {
      return errorstate;
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	e03a      	b.n	800e284 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	491e      	ldr	r1, [pc, #120]	; (800e28c <SD_PowerON+0x118>)
 800e214:	4618      	mov	r0, r3
 800e216:	f004 f8b9 	bl	801238c <SDMMC_CmdAppOperCommand>
 800e21a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d002      	beq.n	800e228 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e222:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e226:	e02d      	b.n	800e284 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	2100      	movs	r1, #0
 800e22e:	4618      	mov	r0, r3
 800e230:	f003 fefd 	bl	801202e <SDMMC_GetResponse>
 800e234:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e236:	697b      	ldr	r3, [r7, #20]
 800e238:	0fdb      	lsrs	r3, r3, #31
 800e23a:	2b01      	cmp	r3, #1
 800e23c:	d101      	bne.n	800e242 <SD_PowerON+0xce>
 800e23e:	2301      	movs	r3, #1
 800e240:	e000      	b.n	800e244 <SD_PowerON+0xd0>
 800e242:	2300      	movs	r3, #0
 800e244:	613b      	str	r3, [r7, #16]

    count++;
 800e246:	68bb      	ldr	r3, [r7, #8]
 800e248:	3301      	adds	r3, #1
 800e24a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e24c:	68bb      	ldr	r3, [r7, #8]
 800e24e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e252:	4293      	cmp	r3, r2
 800e254:	d802      	bhi.n	800e25c <SD_PowerON+0xe8>
 800e256:	693b      	ldr	r3, [r7, #16]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d0cc      	beq.n	800e1f6 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e262:	4293      	cmp	r3, r2
 800e264:	d902      	bls.n	800e26c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e266:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e26a:	e00b      	b.n	800e284 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	2200      	movs	r2, #0
 800e270:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800e272:	697b      	ldr	r3, [r7, #20]
 800e274:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d002      	beq.n	800e282 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	2201      	movs	r2, #1
 800e280:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800e282:	2300      	movs	r3, #0
}
 800e284:	4618      	mov	r0, r3
 800e286:	3718      	adds	r7, #24
 800e288:	46bd      	mov	sp, r7
 800e28a:	bd80      	pop	{r7, pc}
 800e28c:	c1100000 	.word	0xc1100000

0800e290 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b08c      	sub	sp, #48	; 0x30
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
 800e298:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e29a:	f7f5 fbd9 	bl	8003a50 <HAL_GetTick>
 800e29e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e2a0:	683b      	ldr	r3, [r7, #0]
 800e2a2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	2100      	movs	r1, #0
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	f003 febf 	bl	801202e <SDMMC_GetResponse>
 800e2b0:	4603      	mov	r3, r0
 800e2b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e2b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e2ba:	d102      	bne.n	800e2c2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e2bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e2c0:	e0b0      	b.n	800e424 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	2140      	movs	r1, #64	; 0x40
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	f003 feef 	bl	80120ac <SDMMC_CmdBlockLength>
 800e2ce:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e2d0:	6a3b      	ldr	r3, [r7, #32]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d005      	beq.n	800e2e2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e2de:	6a3b      	ldr	r3, [r7, #32]
 800e2e0:	e0a0      	b.n	800e424 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681a      	ldr	r2, [r3, #0]
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2ea:	041b      	lsls	r3, r3, #16
 800e2ec:	4619      	mov	r1, r3
 800e2ee:	4610      	mov	r0, r2
 800e2f0:	f004 f829 	bl	8012346 <SDMMC_CmdAppCommand>
 800e2f4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e2f6:	6a3b      	ldr	r3, [r7, #32]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d005      	beq.n	800e308 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e304:	6a3b      	ldr	r3, [r7, #32]
 800e306:	e08d      	b.n	800e424 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e308:	f04f 33ff 	mov.w	r3, #4294967295
 800e30c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e30e:	2340      	movs	r3, #64	; 0x40
 800e310:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e312:	2360      	movs	r3, #96	; 0x60
 800e314:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e316:	2302      	movs	r3, #2
 800e318:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e31a:	2300      	movs	r3, #0
 800e31c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e31e:	2301      	movs	r3, #1
 800e320:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	f107 0208 	add.w	r2, r7, #8
 800e32a:	4611      	mov	r1, r2
 800e32c:	4618      	mov	r0, r3
 800e32e:	f003 fe91 	bl	8012054 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	4618      	mov	r0, r3
 800e338:	f004 f911 	bl	801255e <SDMMC_CmdStatusRegister>
 800e33c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e33e:	6a3b      	ldr	r3, [r7, #32]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d02b      	beq.n	800e39c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e34c:	6a3b      	ldr	r3, [r7, #32]
 800e34e:	e069      	b.n	800e424 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e356:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d013      	beq.n	800e386 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800e35e:	2300      	movs	r3, #0
 800e360:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e362:	e00d      	b.n	800e380 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	4618      	mov	r0, r3
 800e36a:	f003 fdeb 	bl	8011f44 <SDMMC_ReadFIFO>
 800e36e:	4602      	mov	r2, r0
 800e370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e372:	601a      	str	r2, [r3, #0]
        pData++;
 800e374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e376:	3304      	adds	r3, #4
 800e378:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800e37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e37c:	3301      	adds	r3, #1
 800e37e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e382:	2b07      	cmp	r3, #7
 800e384:	d9ee      	bls.n	800e364 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e386:	f7f5 fb63 	bl	8003a50 <HAL_GetTick>
 800e38a:	4602      	mov	r2, r0
 800e38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e38e:	1ad3      	subs	r3, r2, r3
 800e390:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e394:	d102      	bne.n	800e39c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e396:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e39a:	e043      	b.n	800e424 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3a2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d0d2      	beq.n	800e350 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3b0:	f003 0308 	and.w	r3, r3, #8
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d001      	beq.n	800e3bc <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e3b8:	2308      	movs	r3, #8
 800e3ba:	e033      	b.n	800e424 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3c2:	f003 0302 	and.w	r3, r3, #2
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d001      	beq.n	800e3ce <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e3ca:	2302      	movs	r3, #2
 800e3cc:	e02a      	b.n	800e424 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3d4:	f003 0320 	and.w	r3, r3, #32
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d017      	beq.n	800e40c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800e3dc:	2320      	movs	r3, #32
 800e3de:	e021      	b.n	800e424 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f003 fdad 	bl	8011f44 <SDMMC_ReadFIFO>
 800e3ea:	4602      	mov	r2, r0
 800e3ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ee:	601a      	str	r2, [r3, #0]
    pData++;
 800e3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3f2:	3304      	adds	r3, #4
 800e3f4:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e3f6:	f7f5 fb2b 	bl	8003a50 <HAL_GetTick>
 800e3fa:	4602      	mov	r2, r0
 800e3fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3fe:	1ad3      	subs	r3, r2, r3
 800e400:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e404:	d102      	bne.n	800e40c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e406:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e40a:	e00b      	b.n	800e424 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e412:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e416:	2b00      	cmp	r3, #0
 800e418:	d1e2      	bne.n	800e3e0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	4a03      	ldr	r2, [pc, #12]	; (800e42c <SD_SendSDStatus+0x19c>)
 800e420:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800e422:	2300      	movs	r3, #0
}
 800e424:	4618      	mov	r0, r3
 800e426:	3730      	adds	r7, #48	; 0x30
 800e428:	46bd      	mov	sp, r7
 800e42a:	bd80      	pop	{r7, pc}
 800e42c:	18000f3a 	.word	0x18000f3a

0800e430 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b084      	sub	sp, #16
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
 800e438:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800e43a:	683b      	ldr	r3, [r7, #0]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d102      	bne.n	800e446 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e440:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e444:	e018      	b.n	800e478 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681a      	ldr	r2, [r3, #0]
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e44e:	041b      	lsls	r3, r3, #16
 800e450:	4619      	mov	r1, r3
 800e452:	4610      	mov	r0, r2
 800e454:	f004 f860 	bl	8012518 <SDMMC_CmdSendStatus>
 800e458:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d001      	beq.n	800e464 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	e009      	b.n	800e478 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	2100      	movs	r1, #0
 800e46a:	4618      	mov	r0, r3
 800e46c:	f003 fddf 	bl	801202e <SDMMC_GetResponse>
 800e470:	4602      	mov	r2, r0
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e476:	2300      	movs	r3, #0
}
 800e478:	4618      	mov	r0, r3
 800e47a:	3710      	adds	r7, #16
 800e47c:	46bd      	mov	sp, r7
 800e47e:	bd80      	pop	{r7, pc}

0800e480 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b086      	sub	sp, #24
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e488:	2300      	movs	r3, #0
 800e48a:	60fb      	str	r3, [r7, #12]
 800e48c:	2300      	movs	r3, #0
 800e48e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	2100      	movs	r1, #0
 800e496:	4618      	mov	r0, r3
 800e498:	f003 fdc9 	bl	801202e <SDMMC_GetResponse>
 800e49c:	4603      	mov	r3, r0
 800e49e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e4a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e4a6:	d102      	bne.n	800e4ae <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e4a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e4ac:	e02f      	b.n	800e50e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e4ae:	f107 030c 	add.w	r3, r7, #12
 800e4b2:	4619      	mov	r1, r3
 800e4b4:	6878      	ldr	r0, [r7, #4]
 800e4b6:	f000 f879 	bl	800e5ac <SD_FindSCR>
 800e4ba:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e4bc:	697b      	ldr	r3, [r7, #20]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d001      	beq.n	800e4c6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e4c2:	697b      	ldr	r3, [r7, #20]
 800e4c4:	e023      	b.n	800e50e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e4c6:	693b      	ldr	r3, [r7, #16]
 800e4c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d01c      	beq.n	800e50a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681a      	ldr	r2, [r3, #0]
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4d8:	041b      	lsls	r3, r3, #16
 800e4da:	4619      	mov	r1, r3
 800e4dc:	4610      	mov	r0, r2
 800e4de:	f003 ff32 	bl	8012346 <SDMMC_CmdAppCommand>
 800e4e2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e4e4:	697b      	ldr	r3, [r7, #20]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d001      	beq.n	800e4ee <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e4ea:	697b      	ldr	r3, [r7, #20]
 800e4ec:	e00f      	b.n	800e50e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	2102      	movs	r1, #2
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	f003 ff69 	bl	80123cc <SDMMC_CmdBusWidth>
 800e4fa:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e4fc:	697b      	ldr	r3, [r7, #20]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d001      	beq.n	800e506 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e502:	697b      	ldr	r3, [r7, #20]
 800e504:	e003      	b.n	800e50e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e506:	2300      	movs	r3, #0
 800e508:	e001      	b.n	800e50e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e50a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e50e:	4618      	mov	r0, r3
 800e510:	3718      	adds	r7, #24
 800e512:	46bd      	mov	sp, r7
 800e514:	bd80      	pop	{r7, pc}

0800e516 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e516:	b580      	push	{r7, lr}
 800e518:	b086      	sub	sp, #24
 800e51a:	af00      	add	r7, sp, #0
 800e51c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e51e:	2300      	movs	r3, #0
 800e520:	60fb      	str	r3, [r7, #12]
 800e522:	2300      	movs	r3, #0
 800e524:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	2100      	movs	r1, #0
 800e52c:	4618      	mov	r0, r3
 800e52e:	f003 fd7e 	bl	801202e <SDMMC_GetResponse>
 800e532:	4603      	mov	r3, r0
 800e534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e538:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e53c:	d102      	bne.n	800e544 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e53e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e542:	e02f      	b.n	800e5a4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e544:	f107 030c 	add.w	r3, r7, #12
 800e548:	4619      	mov	r1, r3
 800e54a:	6878      	ldr	r0, [r7, #4]
 800e54c:	f000 f82e 	bl	800e5ac <SD_FindSCR>
 800e550:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e552:	697b      	ldr	r3, [r7, #20]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d001      	beq.n	800e55c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e558:	697b      	ldr	r3, [r7, #20]
 800e55a:	e023      	b.n	800e5a4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e55c:	693b      	ldr	r3, [r7, #16]
 800e55e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e562:	2b00      	cmp	r3, #0
 800e564:	d01c      	beq.n	800e5a0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681a      	ldr	r2, [r3, #0]
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e56e:	041b      	lsls	r3, r3, #16
 800e570:	4619      	mov	r1, r3
 800e572:	4610      	mov	r0, r2
 800e574:	f003 fee7 	bl	8012346 <SDMMC_CmdAppCommand>
 800e578:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e57a:	697b      	ldr	r3, [r7, #20]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d001      	beq.n	800e584 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e580:	697b      	ldr	r3, [r7, #20]
 800e582:	e00f      	b.n	800e5a4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	2100      	movs	r1, #0
 800e58a:	4618      	mov	r0, r3
 800e58c:	f003 ff1e 	bl	80123cc <SDMMC_CmdBusWidth>
 800e590:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e592:	697b      	ldr	r3, [r7, #20]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d001      	beq.n	800e59c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e598:	697b      	ldr	r3, [r7, #20]
 800e59a:	e003      	b.n	800e5a4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e59c:	2300      	movs	r3, #0
 800e59e:	e001      	b.n	800e5a4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e5a0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	3718      	adds	r7, #24
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	bd80      	pop	{r7, pc}

0800e5ac <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b08e      	sub	sp, #56	; 0x38
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
 800e5b4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e5b6:	f7f5 fa4b 	bl	8003a50 <HAL_GetTick>
 800e5ba:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e5bc:	2300      	movs	r3, #0
 800e5be:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	60bb      	str	r3, [r7, #8]
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e5c8:	683b      	ldr	r3, [r7, #0]
 800e5ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	2108      	movs	r1, #8
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f003 fd6a 	bl	80120ac <SDMMC_CmdBlockLength>
 800e5d8:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e5da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d001      	beq.n	800e5e4 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e5e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5e2:	e0ad      	b.n	800e740 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681a      	ldr	r2, [r3, #0]
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5ec:	041b      	lsls	r3, r3, #16
 800e5ee:	4619      	mov	r1, r3
 800e5f0:	4610      	mov	r0, r2
 800e5f2:	f003 fea8 	bl	8012346 <SDMMC_CmdAppCommand>
 800e5f6:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d001      	beq.n	800e602 <SD_FindSCR+0x56>
  {
    return errorstate;
 800e5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e600:	e09e      	b.n	800e740 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e602:	f04f 33ff 	mov.w	r3, #4294967295
 800e606:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e608:	2308      	movs	r3, #8
 800e60a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800e60c:	2330      	movs	r3, #48	; 0x30
 800e60e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e610:	2302      	movs	r3, #2
 800e612:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e614:	2300      	movs	r3, #0
 800e616:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e618:	2301      	movs	r3, #1
 800e61a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	f107 0210 	add.w	r2, r7, #16
 800e624:	4611      	mov	r1, r2
 800e626:	4618      	mov	r0, r3
 800e628:	f003 fd14 	bl	8012054 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	4618      	mov	r0, r3
 800e632:	f003 feee 	bl	8012412 <SDMMC_CmdSendSCR>
 800e636:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d027      	beq.n	800e68e <SD_FindSCR+0xe2>
  {
    return errorstate;
 800e63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e640:	e07e      	b.n	800e740 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e648:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d113      	bne.n	800e678 <SD_FindSCR+0xcc>
 800e650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e652:	2b00      	cmp	r3, #0
 800e654:	d110      	bne.n	800e678 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	4618      	mov	r0, r3
 800e65c:	f003 fc72 	bl	8011f44 <SDMMC_ReadFIFO>
 800e660:	4603      	mov	r3, r0
 800e662:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	4618      	mov	r0, r3
 800e66a:	f003 fc6b 	bl	8011f44 <SDMMC_ReadFIFO>
 800e66e:	4603      	mov	r3, r0
 800e670:	60fb      	str	r3, [r7, #12]
      index++;
 800e672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e674:	3301      	adds	r3, #1
 800e676:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e678:	f7f5 f9ea 	bl	8003a50 <HAL_GetTick>
 800e67c:	4602      	mov	r2, r0
 800e67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e680:	1ad3      	subs	r3, r2, r3
 800e682:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e686:	d102      	bne.n	800e68e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e688:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e68c:	e058      	b.n	800e740 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e694:	f240 532a 	movw	r3, #1322	; 0x52a
 800e698:	4013      	ands	r3, r2
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d0d1      	beq.n	800e642 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6a4:	f003 0308 	and.w	r3, r3, #8
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d005      	beq.n	800e6b8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	2208      	movs	r2, #8
 800e6b2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e6b4:	2308      	movs	r3, #8
 800e6b6:	e043      	b.n	800e740 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6be:	f003 0302 	and.w	r3, r3, #2
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d005      	beq.n	800e6d2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	2202      	movs	r2, #2
 800e6cc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e6ce:	2302      	movs	r3, #2
 800e6d0:	e036      	b.n	800e740 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6d8:	f003 0320 	and.w	r3, r3, #32
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d005      	beq.n	800e6ec <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	2220      	movs	r2, #32
 800e6e6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e6e8:	2320      	movs	r3, #32
 800e6ea:	e029      	b.n	800e740 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	4a15      	ldr	r2, [pc, #84]	; (800e748 <SD_FindSCR+0x19c>)
 800e6f2:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	061a      	lsls	r2, r3, #24
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	021b      	lsls	r3, r3, #8
 800e6fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e700:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	0a1b      	lsrs	r3, r3, #8
 800e706:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e70a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	0e1b      	lsrs	r3, r3, #24
 800e710:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e714:	601a      	str	r2, [r3, #0]
    scr++;
 800e716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e718:	3304      	adds	r3, #4
 800e71a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e71c:	68bb      	ldr	r3, [r7, #8]
 800e71e:	061a      	lsls	r2, r3, #24
 800e720:	68bb      	ldr	r3, [r7, #8]
 800e722:	021b      	lsls	r3, r3, #8
 800e724:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e728:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e72a:	68bb      	ldr	r3, [r7, #8]
 800e72c:	0a1b      	lsrs	r3, r3, #8
 800e72e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e732:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e734:	68bb      	ldr	r3, [r7, #8]
 800e736:	0e1b      	lsrs	r3, r3, #24
 800e738:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e73c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e73e:	2300      	movs	r3, #0
}
 800e740:	4618      	mov	r0, r3
 800e742:	3738      	adds	r7, #56	; 0x38
 800e744:	46bd      	mov	sp, r7
 800e746:	bd80      	pop	{r7, pc}
 800e748:	18000f3a 	.word	0x18000f3a

0800e74c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b086      	sub	sp, #24
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e758:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e75e:	2b1f      	cmp	r3, #31
 800e760:	d936      	bls.n	800e7d0 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800e762:	2300      	movs	r3, #0
 800e764:	617b      	str	r3, [r7, #20]
 800e766:	e027      	b.n	800e7b8 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	4618      	mov	r0, r3
 800e76e:	f003 fbe9 	bl	8011f44 <SDMMC_ReadFIFO>
 800e772:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	b2da      	uxtb	r2, r3
 800e778:	693b      	ldr	r3, [r7, #16]
 800e77a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e77c:	693b      	ldr	r3, [r7, #16]
 800e77e:	3301      	adds	r3, #1
 800e780:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	0a1b      	lsrs	r3, r3, #8
 800e786:	b2da      	uxtb	r2, r3
 800e788:	693b      	ldr	r3, [r7, #16]
 800e78a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e78c:	693b      	ldr	r3, [r7, #16]
 800e78e:	3301      	adds	r3, #1
 800e790:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	0c1b      	lsrs	r3, r3, #16
 800e796:	b2da      	uxtb	r2, r3
 800e798:	693b      	ldr	r3, [r7, #16]
 800e79a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e79c:	693b      	ldr	r3, [r7, #16]
 800e79e:	3301      	adds	r3, #1
 800e7a0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	0e1b      	lsrs	r3, r3, #24
 800e7a6:	b2da      	uxtb	r2, r3
 800e7a8:	693b      	ldr	r3, [r7, #16]
 800e7aa:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e7ac:	693b      	ldr	r3, [r7, #16]
 800e7ae:	3301      	adds	r3, #1
 800e7b0:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800e7b2:	697b      	ldr	r3, [r7, #20]
 800e7b4:	3301      	adds	r3, #1
 800e7b6:	617b      	str	r3, [r7, #20]
 800e7b8:	697b      	ldr	r3, [r7, #20]
 800e7ba:	2b07      	cmp	r3, #7
 800e7bc:	d9d4      	bls.n	800e768 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	693a      	ldr	r2, [r7, #16]
 800e7c2:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7c8:	f1a3 0220 	sub.w	r2, r3, #32
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800e7d0:	bf00      	nop
 800e7d2:	3718      	adds	r7, #24
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	bd80      	pop	{r7, pc}

0800e7d8 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b086      	sub	sp, #24
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	69db      	ldr	r3, [r3, #28]
 800e7e4:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	6a1b      	ldr	r3, [r3, #32]
 800e7ea:	2b1f      	cmp	r3, #31
 800e7ec:	d93a      	bls.n	800e864 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	617b      	str	r3, [r7, #20]
 800e7f2:	e02b      	b.n	800e84c <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800e7f4:	693b      	ldr	r3, [r7, #16]
 800e7f6:	781b      	ldrb	r3, [r3, #0]
 800e7f8:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e7fa:	693b      	ldr	r3, [r7, #16]
 800e7fc:	3301      	adds	r3, #1
 800e7fe:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e800:	693b      	ldr	r3, [r7, #16]
 800e802:	781b      	ldrb	r3, [r3, #0]
 800e804:	021a      	lsls	r2, r3, #8
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	4313      	orrs	r3, r2
 800e80a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e80c:	693b      	ldr	r3, [r7, #16]
 800e80e:	3301      	adds	r3, #1
 800e810:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e812:	693b      	ldr	r3, [r7, #16]
 800e814:	781b      	ldrb	r3, [r3, #0]
 800e816:	041a      	lsls	r2, r3, #16
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	4313      	orrs	r3, r2
 800e81c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e81e:	693b      	ldr	r3, [r7, #16]
 800e820:	3301      	adds	r3, #1
 800e822:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e824:	693b      	ldr	r3, [r7, #16]
 800e826:	781b      	ldrb	r3, [r3, #0]
 800e828:	061a      	lsls	r2, r3, #24
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	4313      	orrs	r3, r2
 800e82e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e830:	693b      	ldr	r3, [r7, #16]
 800e832:	3301      	adds	r3, #1
 800e834:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	f107 020c 	add.w	r2, r7, #12
 800e83e:	4611      	mov	r1, r2
 800e840:	4618      	mov	r0, r3
 800e842:	f003 fb8c 	bl	8011f5e <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800e846:	697b      	ldr	r3, [r7, #20]
 800e848:	3301      	adds	r3, #1
 800e84a:	617b      	str	r3, [r7, #20]
 800e84c:	697b      	ldr	r3, [r7, #20]
 800e84e:	2b07      	cmp	r3, #7
 800e850:	d9d0      	bls.n	800e7f4 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	693a      	ldr	r2, [r7, #16]
 800e856:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	6a1b      	ldr	r3, [r3, #32]
 800e85c:	f1a3 0220 	sub.w	r2, r3, #32
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	621a      	str	r2, [r3, #32]
  }
}
 800e864:	bf00      	nop
 800e866:	3718      	adds	r7, #24
 800e868:	46bd      	mov	sp, r7
 800e86a:	bd80      	pop	{r7, pc}

0800e86c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e86c:	b480      	push	{r7}
 800e86e:	b083      	sub	sp, #12
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e874:	bf00      	nop
 800e876:	370c      	adds	r7, #12
 800e878:	46bd      	mov	sp, r7
 800e87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87e:	4770      	bx	lr

0800e880 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e880:	b480      	push	{r7}
 800e882:	b083      	sub	sp, #12
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e888:	bf00      	nop
 800e88a:	370c      	adds	r7, #12
 800e88c:	46bd      	mov	sp, r7
 800e88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e892:	4770      	bx	lr

0800e894 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e894:	b480      	push	{r7}
 800e896:	b083      	sub	sp, #12
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e89c:	bf00      	nop
 800e89e:	370c      	adds	r7, #12
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a6:	4770      	bx	lr

0800e8a8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e8a8:	b480      	push	{r7}
 800e8aa:	b083      	sub	sp, #12
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e8b0:	bf00      	nop
 800e8b2:	370c      	adds	r7, #12
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ba:	4770      	bx	lr

0800e8bc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b084      	sub	sp, #16
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d101      	bne.n	800e8ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e8ca:	2301      	movs	r3, #1
 800e8cc:	e10f      	b.n	800eaee <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	2200      	movs	r2, #0
 800e8d2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	4a87      	ldr	r2, [pc, #540]	; (800eaf8 <HAL_SPI_Init+0x23c>)
 800e8da:	4293      	cmp	r3, r2
 800e8dc:	d00f      	beq.n	800e8fe <HAL_SPI_Init+0x42>
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	4a86      	ldr	r2, [pc, #536]	; (800eafc <HAL_SPI_Init+0x240>)
 800e8e4:	4293      	cmp	r3, r2
 800e8e6:	d00a      	beq.n	800e8fe <HAL_SPI_Init+0x42>
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	4a84      	ldr	r2, [pc, #528]	; (800eb00 <HAL_SPI_Init+0x244>)
 800e8ee:	4293      	cmp	r3, r2
 800e8f0:	d005      	beq.n	800e8fe <HAL_SPI_Init+0x42>
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	68db      	ldr	r3, [r3, #12]
 800e8f6:	2b0f      	cmp	r3, #15
 800e8f8:	d901      	bls.n	800e8fe <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e8fa:	2301      	movs	r3, #1
 800e8fc:	e0f7      	b.n	800eaee <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e8fe:	6878      	ldr	r0, [r7, #4]
 800e900:	f000 fd5a 	bl	800f3b8 <SPI_GetPacketSize>
 800e904:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	4a7b      	ldr	r2, [pc, #492]	; (800eaf8 <HAL_SPI_Init+0x23c>)
 800e90c:	4293      	cmp	r3, r2
 800e90e:	d00c      	beq.n	800e92a <HAL_SPI_Init+0x6e>
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	4a79      	ldr	r2, [pc, #484]	; (800eafc <HAL_SPI_Init+0x240>)
 800e916:	4293      	cmp	r3, r2
 800e918:	d007      	beq.n	800e92a <HAL_SPI_Init+0x6e>
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	4a78      	ldr	r2, [pc, #480]	; (800eb00 <HAL_SPI_Init+0x244>)
 800e920:	4293      	cmp	r3, r2
 800e922:	d002      	beq.n	800e92a <HAL_SPI_Init+0x6e>
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	2b08      	cmp	r3, #8
 800e928:	d811      	bhi.n	800e94e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e92e:	4a72      	ldr	r2, [pc, #456]	; (800eaf8 <HAL_SPI_Init+0x23c>)
 800e930:	4293      	cmp	r3, r2
 800e932:	d009      	beq.n	800e948 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	4a70      	ldr	r2, [pc, #448]	; (800eafc <HAL_SPI_Init+0x240>)
 800e93a:	4293      	cmp	r3, r2
 800e93c:	d004      	beq.n	800e948 <HAL_SPI_Init+0x8c>
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	4a6f      	ldr	r2, [pc, #444]	; (800eb00 <HAL_SPI_Init+0x244>)
 800e944:	4293      	cmp	r3, r2
 800e946:	d104      	bne.n	800e952 <HAL_SPI_Init+0x96>
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	2b10      	cmp	r3, #16
 800e94c:	d901      	bls.n	800e952 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e94e:	2301      	movs	r3, #1
 800e950:	e0cd      	b.n	800eaee <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e958:	b2db      	uxtb	r3, r3
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d106      	bne.n	800e96c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	2200      	movs	r2, #0
 800e962:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e966:	6878      	ldr	r0, [r7, #4]
 800e968:	f7f4 fa8a 	bl	8002e80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	2202      	movs	r2, #2
 800e970:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	681a      	ldr	r2, [r3, #0]
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	f022 0201 	bic.w	r2, r2, #1
 800e982:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	689b      	ldr	r3, [r3, #8]
 800e98a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e98e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	699b      	ldr	r3, [r3, #24]
 800e994:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e998:	d119      	bne.n	800e9ce <HAL_SPI_Init+0x112>
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	685b      	ldr	r3, [r3, #4]
 800e99e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e9a2:	d103      	bne.n	800e9ac <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d008      	beq.n	800e9be <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d10c      	bne.n	800e9ce <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e9b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e9bc:	d107      	bne.n	800e9ce <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	681a      	ldr	r2, [r3, #0]
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e9cc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	685b      	ldr	r3, [r3, #4]
 800e9d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d00f      	beq.n	800e9fa <HAL_SPI_Init+0x13e>
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	68db      	ldr	r3, [r3, #12]
 800e9de:	2b06      	cmp	r3, #6
 800e9e0:	d90b      	bls.n	800e9fa <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	430a      	orrs	r2, r1
 800e9f6:	601a      	str	r2, [r3, #0]
 800e9f8:	e007      	b.n	800ea0a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	681a      	ldr	r2, [r3, #0]
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ea08:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	69da      	ldr	r2, [r3, #28]
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea12:	431a      	orrs	r2, r3
 800ea14:	68bb      	ldr	r3, [r7, #8]
 800ea16:	431a      	orrs	r2, r3
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea1c:	ea42 0103 	orr.w	r1, r2, r3
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	68da      	ldr	r2, [r3, #12]
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	430a      	orrs	r2, r1
 800ea2a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea34:	431a      	orrs	r2, r3
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea3a:	431a      	orrs	r2, r3
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	699b      	ldr	r3, [r3, #24]
 800ea40:	431a      	orrs	r2, r3
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	691b      	ldr	r3, [r3, #16]
 800ea46:	431a      	orrs	r2, r3
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	695b      	ldr	r3, [r3, #20]
 800ea4c:	431a      	orrs	r2, r3
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	6a1b      	ldr	r3, [r3, #32]
 800ea52:	431a      	orrs	r2, r3
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	685b      	ldr	r3, [r3, #4]
 800ea58:	431a      	orrs	r2, r3
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea5e:	431a      	orrs	r2, r3
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	689b      	ldr	r3, [r3, #8]
 800ea64:	431a      	orrs	r2, r3
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ea6a:	ea42 0103 	orr.w	r1, r2, r3
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	430a      	orrs	r2, r1
 800ea78:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	685b      	ldr	r3, [r3, #4]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d113      	bne.n	800eaaa <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	689b      	ldr	r3, [r3, #8]
 800ea88:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ea94:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	689b      	ldr	r3, [r3, #8]
 800ea9c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800eaa8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	f022 0201 	bic.w	r2, r2, #1
 800eab8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	685b      	ldr	r3, [r3, #4]
 800eabe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d00a      	beq.n	800eadc <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	68db      	ldr	r3, [r3, #12]
 800eacc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	430a      	orrs	r2, r1
 800eada:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2200      	movs	r2, #0
 800eae0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	2201      	movs	r2, #1
 800eae8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800eaec:	2300      	movs	r3, #0
}
 800eaee:	4618      	mov	r0, r3
 800eaf0:	3710      	adds	r7, #16
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	bd80      	pop	{r7, pc}
 800eaf6:	bf00      	nop
 800eaf8:	40013000 	.word	0x40013000
 800eafc:	40003800 	.word	0x40003800
 800eb00:	40003c00 	.word	0x40003c00

0800eb04 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b08a      	sub	sp, #40	; 0x28
 800eb08:	af02      	add	r7, sp, #8
 800eb0a:	60f8      	str	r0, [r7, #12]
 800eb0c:	60b9      	str	r1, [r7, #8]
 800eb0e:	603b      	str	r3, [r7, #0]
 800eb10:	4613      	mov	r3, r2
 800eb12:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	3320      	adds	r3, #32
 800eb1a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eb26:	2b01      	cmp	r3, #1
 800eb28:	d101      	bne.n	800eb2e <HAL_SPI_Transmit+0x2a>
 800eb2a:	2302      	movs	r3, #2
 800eb2c:	e1e1      	b.n	800eef2 <HAL_SPI_Transmit+0x3ee>
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	2201      	movs	r2, #1
 800eb32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800eb36:	f7f4 ff8b 	bl	8003a50 <HAL_GetTick>
 800eb3a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800eb42:	b2db      	uxtb	r3, r3
 800eb44:	2b01      	cmp	r3, #1
 800eb46:	d007      	beq.n	800eb58 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800eb48:	2302      	movs	r3, #2
 800eb4a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	2200      	movs	r2, #0
 800eb50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800eb54:	7efb      	ldrb	r3, [r7, #27]
 800eb56:	e1cc      	b.n	800eef2 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800eb58:	68bb      	ldr	r3, [r7, #8]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d002      	beq.n	800eb64 <HAL_SPI_Transmit+0x60>
 800eb5e:	88fb      	ldrh	r3, [r7, #6]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d107      	bne.n	800eb74 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800eb64:	2301      	movs	r3, #1
 800eb66:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800eb70:	7efb      	ldrb	r3, [r7, #27]
 800eb72:	e1be      	b.n	800eef2 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	2203      	movs	r2, #3
 800eb78:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	2200      	movs	r2, #0
 800eb80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	68ba      	ldr	r2, [r7, #8]
 800eb88:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	88fa      	ldrh	r2, [r7, #6]
 800eb8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	88fa      	ldrh	r2, [r7, #6]
 800eb96:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	2200      	movs	r2, #0
 800eba4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	2200      	movs	r2, #0
 800ebac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	2200      	movs	r2, #0
 800ebba:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	689b      	ldr	r3, [r3, #8]
 800ebc0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ebc4:	d108      	bne.n	800ebd8 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	681a      	ldr	r2, [r3, #0]
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ebd4:	601a      	str	r2, [r3, #0]
 800ebd6:	e009      	b.n	800ebec <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	68db      	ldr	r3, [r3, #12]
 800ebde:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ebea:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	685a      	ldr	r2, [r3, #4]
 800ebf2:	4b96      	ldr	r3, [pc, #600]	; (800ee4c <HAL_SPI_Transmit+0x348>)
 800ebf4:	4013      	ands	r3, r2
 800ebf6:	88f9      	ldrh	r1, [r7, #6]
 800ebf8:	68fa      	ldr	r2, [r7, #12]
 800ebfa:	6812      	ldr	r2, [r2, #0]
 800ebfc:	430b      	orrs	r3, r1
 800ebfe:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	681a      	ldr	r2, [r3, #0]
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	f042 0201 	orr.w	r2, r2, #1
 800ec0e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	685b      	ldr	r3, [r3, #4]
 800ec14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ec18:	d107      	bne.n	800ec2a <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	681a      	ldr	r2, [r3, #0]
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ec28:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	68db      	ldr	r3, [r3, #12]
 800ec2e:	2b0f      	cmp	r3, #15
 800ec30:	d947      	bls.n	800ecc2 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ec32:	e03f      	b.n	800ecb4 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	695b      	ldr	r3, [r3, #20]
 800ec3a:	f003 0302 	and.w	r3, r3, #2
 800ec3e:	2b02      	cmp	r3, #2
 800ec40:	d114      	bne.n	800ec6c <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	6812      	ldr	r2, [r2, #0]
 800ec4c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec52:	1d1a      	adds	r2, r3, #4
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ec5e:	b29b      	uxth	r3, r3
 800ec60:	3b01      	subs	r3, #1
 800ec62:	b29a      	uxth	r2, r3
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ec6a:	e023      	b.n	800ecb4 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ec6c:	f7f4 fef0 	bl	8003a50 <HAL_GetTick>
 800ec70:	4602      	mov	r2, r0
 800ec72:	697b      	ldr	r3, [r7, #20]
 800ec74:	1ad3      	subs	r3, r2, r3
 800ec76:	683a      	ldr	r2, [r7, #0]
 800ec78:	429a      	cmp	r2, r3
 800ec7a:	d803      	bhi.n	800ec84 <HAL_SPI_Transmit+0x180>
 800ec7c:	683b      	ldr	r3, [r7, #0]
 800ec7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec82:	d102      	bne.n	800ec8a <HAL_SPI_Transmit+0x186>
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d114      	bne.n	800ecb4 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ec8a:	68f8      	ldr	r0, [r7, #12]
 800ec8c:	f000 fac6 	bl	800f21c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	2200      	movs	r2, #0
 800ec94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ec9e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	2201      	movs	r2, #1
 800ecac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ecb0:	2303      	movs	r3, #3
 800ecb2:	e11e      	b.n	800eef2 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ecba:	b29b      	uxth	r3, r3
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d1b9      	bne.n	800ec34 <HAL_SPI_Transmit+0x130>
 800ecc0:	e0f1      	b.n	800eea6 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	68db      	ldr	r3, [r3, #12]
 800ecc6:	2b07      	cmp	r3, #7
 800ecc8:	f240 80e6 	bls.w	800ee98 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800eccc:	e05d      	b.n	800ed8a <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	695b      	ldr	r3, [r3, #20]
 800ecd4:	f003 0302 	and.w	r3, r3, #2
 800ecd8:	2b02      	cmp	r3, #2
 800ecda:	d132      	bne.n	800ed42 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ece2:	b29b      	uxth	r3, r3
 800ece4:	2b01      	cmp	r3, #1
 800ece6:	d918      	bls.n	800ed1a <HAL_SPI_Transmit+0x216>
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d014      	beq.n	800ed1a <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	6812      	ldr	r2, [r2, #0]
 800ecfa:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed00:	1d1a      	adds	r2, r3, #4
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed0c:	b29b      	uxth	r3, r3
 800ed0e:	3b02      	subs	r3, #2
 800ed10:	b29a      	uxth	r2, r3
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ed18:	e037      	b.n	800ed8a <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed1e:	881a      	ldrh	r2, [r3, #0]
 800ed20:	69fb      	ldr	r3, [r7, #28]
 800ed22:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed28:	1c9a      	adds	r2, r3, #2
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed34:	b29b      	uxth	r3, r3
 800ed36:	3b01      	subs	r3, #1
 800ed38:	b29a      	uxth	r2, r3
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ed40:	e023      	b.n	800ed8a <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ed42:	f7f4 fe85 	bl	8003a50 <HAL_GetTick>
 800ed46:	4602      	mov	r2, r0
 800ed48:	697b      	ldr	r3, [r7, #20]
 800ed4a:	1ad3      	subs	r3, r2, r3
 800ed4c:	683a      	ldr	r2, [r7, #0]
 800ed4e:	429a      	cmp	r2, r3
 800ed50:	d803      	bhi.n	800ed5a <HAL_SPI_Transmit+0x256>
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed58:	d102      	bne.n	800ed60 <HAL_SPI_Transmit+0x25c>
 800ed5a:	683b      	ldr	r3, [r7, #0]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d114      	bne.n	800ed8a <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ed60:	68f8      	ldr	r0, [r7, #12]
 800ed62:	f000 fa5b 	bl	800f21c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	2200      	movs	r2, #0
 800ed6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed74:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	2201      	movs	r2, #1
 800ed82:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ed86:	2303      	movs	r3, #3
 800ed88:	e0b3      	b.n	800eef2 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed90:	b29b      	uxth	r3, r3
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d19b      	bne.n	800ecce <HAL_SPI_Transmit+0x1ca>
 800ed96:	e086      	b.n	800eea6 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	695b      	ldr	r3, [r3, #20]
 800ed9e:	f003 0302 	and.w	r3, r3, #2
 800eda2:	2b02      	cmp	r3, #2
 800eda4:	d154      	bne.n	800ee50 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800edac:	b29b      	uxth	r3, r3
 800edae:	2b03      	cmp	r3, #3
 800edb0:	d918      	bls.n	800ede4 <HAL_SPI_Transmit+0x2e0>
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edb6:	2b40      	cmp	r3, #64	; 0x40
 800edb8:	d914      	bls.n	800ede4 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	6812      	ldr	r2, [r2, #0]
 800edc4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800edca:	1d1a      	adds	r2, r3, #4
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800edd6:	b29b      	uxth	r3, r3
 800edd8:	3b04      	subs	r3, #4
 800edda:	b29a      	uxth	r2, r3
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ede2:	e059      	b.n	800ee98 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800edea:	b29b      	uxth	r3, r3
 800edec:	2b01      	cmp	r3, #1
 800edee:	d917      	bls.n	800ee20 <HAL_SPI_Transmit+0x31c>
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d013      	beq.n	800ee20 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800edfc:	881a      	ldrh	r2, [r3, #0]
 800edfe:	69fb      	ldr	r3, [r7, #28]
 800ee00:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee06:	1c9a      	adds	r2, r3, #2
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee12:	b29b      	uxth	r3, r3
 800ee14:	3b02      	subs	r3, #2
 800ee16:	b29a      	uxth	r2, r3
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ee1e:	e03b      	b.n	800ee98 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	3320      	adds	r3, #32
 800ee2a:	7812      	ldrb	r2, [r2, #0]
 800ee2c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee32:	1c5a      	adds	r2, r3, #1
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee3e:	b29b      	uxth	r3, r3
 800ee40:	3b01      	subs	r3, #1
 800ee42:	b29a      	uxth	r2, r3
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ee4a:	e025      	b.n	800ee98 <HAL_SPI_Transmit+0x394>
 800ee4c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ee50:	f7f4 fdfe 	bl	8003a50 <HAL_GetTick>
 800ee54:	4602      	mov	r2, r0
 800ee56:	697b      	ldr	r3, [r7, #20]
 800ee58:	1ad3      	subs	r3, r2, r3
 800ee5a:	683a      	ldr	r2, [r7, #0]
 800ee5c:	429a      	cmp	r2, r3
 800ee5e:	d803      	bhi.n	800ee68 <HAL_SPI_Transmit+0x364>
 800ee60:	683b      	ldr	r3, [r7, #0]
 800ee62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee66:	d102      	bne.n	800ee6e <HAL_SPI_Transmit+0x36a>
 800ee68:	683b      	ldr	r3, [r7, #0]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d114      	bne.n	800ee98 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ee6e:	68f8      	ldr	r0, [r7, #12]
 800ee70:	f000 f9d4 	bl	800f21c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	2200      	movs	r2, #0
 800ee78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee82:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	2201      	movs	r2, #1
 800ee90:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ee94:	2303      	movs	r3, #3
 800ee96:	e02c      	b.n	800eef2 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee9e:	b29b      	uxth	r3, r3
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	f47f af79 	bne.w	800ed98 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800eea6:	697b      	ldr	r3, [r7, #20]
 800eea8:	9300      	str	r3, [sp, #0]
 800eeaa:	683b      	ldr	r3, [r7, #0]
 800eeac:	2200      	movs	r2, #0
 800eeae:	2108      	movs	r1, #8
 800eeb0:	68f8      	ldr	r0, [r7, #12]
 800eeb2:	f000 fa53 	bl	800f35c <SPI_WaitOnFlagUntilTimeout>
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d007      	beq.n	800eecc <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eec2:	f043 0220 	orr.w	r2, r3, #32
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800eecc:	68f8      	ldr	r0, [r7, #12]
 800eece:	f000 f9a5 	bl	800f21c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	2200      	movs	r2, #0
 800eed6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	2201      	movs	r2, #1
 800eede:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d001      	beq.n	800eef0 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800eeec:	2301      	movs	r3, #1
 800eeee:	e000      	b.n	800eef2 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800eef0:	7efb      	ldrb	r3, [r7, #27]
}
 800eef2:	4618      	mov	r0, r3
 800eef4:	3720      	adds	r7, #32
 800eef6:	46bd      	mov	sp, r7
 800eef8:	bd80      	pop	{r7, pc}
 800eefa:	bf00      	nop

0800eefc <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eefc:	b580      	push	{r7, lr}
 800eefe:	b088      	sub	sp, #32
 800ef00:	af00      	add	r7, sp, #0
 800ef02:	60f8      	str	r0, [r7, #12]
 800ef04:	60b9      	str	r1, [r7, #8]
 800ef06:	603b      	str	r3, [r7, #0]
 800ef08:	4613      	mov	r3, r2
 800ef0a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	3330      	adds	r3, #48	; 0x30
 800ef16:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ef1e:	2b01      	cmp	r3, #1
 800ef20:	d101      	bne.n	800ef26 <HAL_SPI_Receive+0x2a>
 800ef22:	2302      	movs	r3, #2
 800ef24:	e173      	b.n	800f20e <HAL_SPI_Receive+0x312>
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	2201      	movs	r2, #1
 800ef2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ef2e:	f7f4 fd8f 	bl	8003a50 <HAL_GetTick>
 800ef32:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ef3a:	b2db      	uxtb	r3, r3
 800ef3c:	2b01      	cmp	r3, #1
 800ef3e:	d007      	beq.n	800ef50 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800ef40:	2302      	movs	r3, #2
 800ef42:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	2200      	movs	r2, #0
 800ef48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ef4c:	7ffb      	ldrb	r3, [r7, #31]
 800ef4e:	e15e      	b.n	800f20e <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ef50:	68bb      	ldr	r3, [r7, #8]
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d002      	beq.n	800ef5c <HAL_SPI_Receive+0x60>
 800ef56:	88fb      	ldrh	r3, [r7, #6]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d107      	bne.n	800ef6c <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800ef5c:	2301      	movs	r3, #1
 800ef5e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	2200      	movs	r2, #0
 800ef64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ef68:	7ffb      	ldrb	r3, [r7, #31]
 800ef6a:	e150      	b.n	800f20e <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	2204      	movs	r2, #4
 800ef70:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	2200      	movs	r2, #0
 800ef78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	68ba      	ldr	r2, [r7, #8]
 800ef80:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	88fa      	ldrh	r2, [r7, #6]
 800ef86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	88fa      	ldrh	r2, [r7, #6]
 800ef8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	2200      	movs	r2, #0
 800ef96:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	2200      	movs	r2, #0
 800efa4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	2200      	movs	r2, #0
 800efac:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	2200      	movs	r2, #0
 800efb2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	689b      	ldr	r3, [r3, #8]
 800efb8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800efbc:	d108      	bne.n	800efd0 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	681a      	ldr	r2, [r3, #0]
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800efcc:	601a      	str	r2, [r3, #0]
 800efce:	e009      	b.n	800efe4 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	68db      	ldr	r3, [r3, #12]
 800efd6:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800efe2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	685a      	ldr	r2, [r3, #4]
 800efea:	4b8b      	ldr	r3, [pc, #556]	; (800f218 <HAL_SPI_Receive+0x31c>)
 800efec:	4013      	ands	r3, r2
 800efee:	88f9      	ldrh	r1, [r7, #6]
 800eff0:	68fa      	ldr	r2, [r7, #12]
 800eff2:	6812      	ldr	r2, [r2, #0]
 800eff4:	430b      	orrs	r3, r1
 800eff6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	681a      	ldr	r2, [r3, #0]
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	f042 0201 	orr.w	r2, r2, #1
 800f006:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	685b      	ldr	r3, [r3, #4]
 800f00c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f010:	d107      	bne.n	800f022 <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	681a      	ldr	r2, [r3, #0]
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f020:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	68db      	ldr	r3, [r3, #12]
 800f026:	2b0f      	cmp	r3, #15
 800f028:	d948      	bls.n	800f0bc <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f02a:	e040      	b.n	800f0ae <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	695a      	ldr	r2, [r3, #20]
 800f032:	f248 0308 	movw	r3, #32776	; 0x8008
 800f036:	4013      	ands	r3, r2
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d014      	beq.n	800f066 <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	681a      	ldr	r2, [r3, #0]
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f044:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f046:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f04c:	1d1a      	adds	r2, r3, #4
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f058:	b29b      	uxth	r3, r3
 800f05a:	3b01      	subs	r3, #1
 800f05c:	b29a      	uxth	r2, r3
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f064:	e023      	b.n	800f0ae <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f066:	f7f4 fcf3 	bl	8003a50 <HAL_GetTick>
 800f06a:	4602      	mov	r2, r0
 800f06c:	697b      	ldr	r3, [r7, #20]
 800f06e:	1ad3      	subs	r3, r2, r3
 800f070:	683a      	ldr	r2, [r7, #0]
 800f072:	429a      	cmp	r2, r3
 800f074:	d803      	bhi.n	800f07e <HAL_SPI_Receive+0x182>
 800f076:	683b      	ldr	r3, [r7, #0]
 800f078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f07c:	d102      	bne.n	800f084 <HAL_SPI_Receive+0x188>
 800f07e:	683b      	ldr	r3, [r7, #0]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d114      	bne.n	800f0ae <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f084:	68f8      	ldr	r0, [r7, #12]
 800f086:	f000 f8c9 	bl	800f21c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	2200      	movs	r2, #0
 800f08e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f098:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	2201      	movs	r2, #1
 800f0a6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f0aa:	2303      	movs	r3, #3
 800f0ac:	e0af      	b.n	800f20e <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f0b4:	b29b      	uxth	r3, r3
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d1b8      	bne.n	800f02c <HAL_SPI_Receive+0x130>
 800f0ba:	e095      	b.n	800f1e8 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	68db      	ldr	r3, [r3, #12]
 800f0c0:	2b07      	cmp	r3, #7
 800f0c2:	f240 808b 	bls.w	800f1dc <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f0c6:	e03f      	b.n	800f148 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	695b      	ldr	r3, [r3, #20]
 800f0ce:	f003 0301 	and.w	r3, r3, #1
 800f0d2:	2b01      	cmp	r3, #1
 800f0d4:	d114      	bne.n	800f100 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0da:	69ba      	ldr	r2, [r7, #24]
 800f0dc:	8812      	ldrh	r2, [r2, #0]
 800f0de:	b292      	uxth	r2, r2
 800f0e0:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0e6:	1c9a      	adds	r2, r3, #2
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f0f2:	b29b      	uxth	r3, r3
 800f0f4:	3b01      	subs	r3, #1
 800f0f6:	b29a      	uxth	r2, r3
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f0fe:	e023      	b.n	800f148 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f100:	f7f4 fca6 	bl	8003a50 <HAL_GetTick>
 800f104:	4602      	mov	r2, r0
 800f106:	697b      	ldr	r3, [r7, #20]
 800f108:	1ad3      	subs	r3, r2, r3
 800f10a:	683a      	ldr	r2, [r7, #0]
 800f10c:	429a      	cmp	r2, r3
 800f10e:	d803      	bhi.n	800f118 <HAL_SPI_Receive+0x21c>
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f116:	d102      	bne.n	800f11e <HAL_SPI_Receive+0x222>
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d114      	bne.n	800f148 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f11e:	68f8      	ldr	r0, [r7, #12]
 800f120:	f000 f87c 	bl	800f21c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	2200      	movs	r2, #0
 800f128:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f132:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	2201      	movs	r2, #1
 800f140:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f144:	2303      	movs	r3, #3
 800f146:	e062      	b.n	800f20e <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f14e:	b29b      	uxth	r3, r3
 800f150:	2b00      	cmp	r3, #0
 800f152:	d1b9      	bne.n	800f0c8 <HAL_SPI_Receive+0x1cc>
 800f154:	e048      	b.n	800f1e8 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	695b      	ldr	r3, [r3, #20]
 800f15c:	f003 0301 	and.w	r3, r3, #1
 800f160:	2b01      	cmp	r3, #1
 800f162:	d117      	bne.n	800f194 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f170:	7812      	ldrb	r2, [r2, #0]
 800f172:	b2d2      	uxtb	r2, r2
 800f174:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f17a:	1c5a      	adds	r2, r3, #1
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f186:	b29b      	uxth	r3, r3
 800f188:	3b01      	subs	r3, #1
 800f18a:	b29a      	uxth	r2, r3
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f192:	e023      	b.n	800f1dc <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f194:	f7f4 fc5c 	bl	8003a50 <HAL_GetTick>
 800f198:	4602      	mov	r2, r0
 800f19a:	697b      	ldr	r3, [r7, #20]
 800f19c:	1ad3      	subs	r3, r2, r3
 800f19e:	683a      	ldr	r2, [r7, #0]
 800f1a0:	429a      	cmp	r2, r3
 800f1a2:	d803      	bhi.n	800f1ac <HAL_SPI_Receive+0x2b0>
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1aa:	d102      	bne.n	800f1b2 <HAL_SPI_Receive+0x2b6>
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d114      	bne.n	800f1dc <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f1b2:	68f8      	ldr	r0, [r7, #12]
 800f1b4:	f000 f832 	bl	800f21c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f1c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	2201      	movs	r2, #1
 800f1d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f1d8:	2303      	movs	r3, #3
 800f1da:	e018      	b.n	800f20e <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f1e2:	b29b      	uxth	r3, r3
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d1b6      	bne.n	800f156 <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f1e8:	68f8      	ldr	r0, [r7, #12]
 800f1ea:	f000 f817 	bl	800f21c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	2201      	movs	r2, #1
 800f1fa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f204:	2b00      	cmp	r3, #0
 800f206:	d001      	beq.n	800f20c <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800f208:	2301      	movs	r3, #1
 800f20a:	e000      	b.n	800f20e <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800f20c:	7ffb      	ldrb	r3, [r7, #31]
}
 800f20e:	4618      	mov	r0, r3
 800f210:	3720      	adds	r7, #32
 800f212:	46bd      	mov	sp, r7
 800f214:	bd80      	pop	{r7, pc}
 800f216:	bf00      	nop
 800f218:	ffff0000 	.word	0xffff0000

0800f21c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800f21c:	b480      	push	{r7}
 800f21e:	b085      	sub	sp, #20
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	695b      	ldr	r3, [r3, #20]
 800f22a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	699a      	ldr	r2, [r3, #24]
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	f042 0208 	orr.w	r2, r2, #8
 800f23a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	699a      	ldr	r2, [r3, #24]
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	f042 0210 	orr.w	r2, r2, #16
 800f24a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	681a      	ldr	r2, [r3, #0]
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	f022 0201 	bic.w	r2, r2, #1
 800f25a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	6919      	ldr	r1, [r3, #16]
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681a      	ldr	r2, [r3, #0]
 800f266:	4b3c      	ldr	r3, [pc, #240]	; (800f358 <SPI_CloseTransfer+0x13c>)
 800f268:	400b      	ands	r3, r1
 800f26a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	689a      	ldr	r2, [r3, #8]
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f27a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f282:	b2db      	uxtb	r3, r3
 800f284:	2b04      	cmp	r3, #4
 800f286:	d014      	beq.n	800f2b2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	f003 0320 	and.w	r3, r3, #32
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d00f      	beq.n	800f2b2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f298:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	699a      	ldr	r2, [r3, #24]
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	f042 0220 	orr.w	r2, r2, #32
 800f2b0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f2b8:	b2db      	uxtb	r3, r3
 800f2ba:	2b03      	cmp	r3, #3
 800f2bc:	d014      	beq.n	800f2e8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d00f      	beq.n	800f2e8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2ce:	f043 0204 	orr.w	r2, r3, #4
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	699a      	ldr	r2, [r3, #24]
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f2e6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d00f      	beq.n	800f312 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2f8:	f043 0201 	orr.w	r2, r3, #1
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	699a      	ldr	r2, [r3, #24]
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f310:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d00f      	beq.n	800f33c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f322:	f043 0208 	orr.w	r2, r3, #8
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	699a      	ldr	r2, [r3, #24]
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f33a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	2200      	movs	r2, #0
 800f340:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	2200      	movs	r2, #0
 800f348:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800f34c:	bf00      	nop
 800f34e:	3714      	adds	r7, #20
 800f350:	46bd      	mov	sp, r7
 800f352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f356:	4770      	bx	lr
 800f358:	fffffc90 	.word	0xfffffc90

0800f35c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800f35c:	b580      	push	{r7, lr}
 800f35e:	b084      	sub	sp, #16
 800f360:	af00      	add	r7, sp, #0
 800f362:	60f8      	str	r0, [r7, #12]
 800f364:	60b9      	str	r1, [r7, #8]
 800f366:	603b      	str	r3, [r7, #0]
 800f368:	4613      	mov	r3, r2
 800f36a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f36c:	e010      	b.n	800f390 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f36e:	f7f4 fb6f 	bl	8003a50 <HAL_GetTick>
 800f372:	4602      	mov	r2, r0
 800f374:	69bb      	ldr	r3, [r7, #24]
 800f376:	1ad3      	subs	r3, r2, r3
 800f378:	683a      	ldr	r2, [r7, #0]
 800f37a:	429a      	cmp	r2, r3
 800f37c:	d803      	bhi.n	800f386 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800f37e:	683b      	ldr	r3, [r7, #0]
 800f380:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f384:	d102      	bne.n	800f38c <SPI_WaitOnFlagUntilTimeout+0x30>
 800f386:	683b      	ldr	r3, [r7, #0]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d101      	bne.n	800f390 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800f38c:	2303      	movs	r3, #3
 800f38e:	e00f      	b.n	800f3b0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	695a      	ldr	r2, [r3, #20]
 800f396:	68bb      	ldr	r3, [r7, #8]
 800f398:	4013      	ands	r3, r2
 800f39a:	68ba      	ldr	r2, [r7, #8]
 800f39c:	429a      	cmp	r2, r3
 800f39e:	bf0c      	ite	eq
 800f3a0:	2301      	moveq	r3, #1
 800f3a2:	2300      	movne	r3, #0
 800f3a4:	b2db      	uxtb	r3, r3
 800f3a6:	461a      	mov	r2, r3
 800f3a8:	79fb      	ldrb	r3, [r7, #7]
 800f3aa:	429a      	cmp	r2, r3
 800f3ac:	d0df      	beq.n	800f36e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800f3ae:	2300      	movs	r3, #0
}
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	3710      	adds	r7, #16
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	bd80      	pop	{r7, pc}

0800f3b8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800f3b8:	b480      	push	{r7}
 800f3ba:	b085      	sub	sp, #20
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3c4:	095b      	lsrs	r3, r3, #5
 800f3c6:	3301      	adds	r3, #1
 800f3c8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	68db      	ldr	r3, [r3, #12]
 800f3ce:	3301      	adds	r3, #1
 800f3d0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f3d2:	68bb      	ldr	r3, [r7, #8]
 800f3d4:	3307      	adds	r3, #7
 800f3d6:	08db      	lsrs	r3, r3, #3
 800f3d8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f3da:	68bb      	ldr	r3, [r7, #8]
 800f3dc:	68fa      	ldr	r2, [r7, #12]
 800f3de:	fb02 f303 	mul.w	r3, r2, r3
}
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	3714      	adds	r7, #20
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ec:	4770      	bx	lr

0800f3ee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f3ee:	b580      	push	{r7, lr}
 800f3f0:	b082      	sub	sp, #8
 800f3f2:	af00      	add	r7, sp, #0
 800f3f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d101      	bne.n	800f400 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f3fc:	2301      	movs	r3, #1
 800f3fe:	e049      	b.n	800f494 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f406:	b2db      	uxtb	r3, r3
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d106      	bne.n	800f41a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	2200      	movs	r2, #0
 800f410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800f414:	6878      	ldr	r0, [r7, #4]
 800f416:	f7f3 ff85 	bl	8003324 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	2202      	movs	r2, #2
 800f41e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	681a      	ldr	r2, [r3, #0]
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	3304      	adds	r3, #4
 800f42a:	4619      	mov	r1, r3
 800f42c:	4610      	mov	r0, r2
 800f42e:	f000 ff29 	bl	8010284 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	2201      	movs	r2, #1
 800f436:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	2201      	movs	r2, #1
 800f43e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	2201      	movs	r2, #1
 800f446:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	2201      	movs	r2, #1
 800f44e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	2201      	movs	r2, #1
 800f456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	2201      	movs	r2, #1
 800f45e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	2201      	movs	r2, #1
 800f466:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	2201      	movs	r2, #1
 800f46e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	2201      	movs	r2, #1
 800f476:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	2201      	movs	r2, #1
 800f47e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	2201      	movs	r2, #1
 800f486:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	2201      	movs	r2, #1
 800f48e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f492:	2300      	movs	r3, #0
}
 800f494:	4618      	mov	r0, r3
 800f496:	3708      	adds	r7, #8
 800f498:	46bd      	mov	sp, r7
 800f49a:	bd80      	pop	{r7, pc}

0800f49c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b082      	sub	sp, #8
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d101      	bne.n	800f4ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f4aa:	2301      	movs	r3, #1
 800f4ac:	e049      	b.n	800f542 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f4b4:	b2db      	uxtb	r3, r3
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d106      	bne.n	800f4c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	2200      	movs	r2, #0
 800f4be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f4c2:	6878      	ldr	r0, [r7, #4]
 800f4c4:	f7f3 fd98 	bl	8002ff8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	2202      	movs	r2, #2
 800f4cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	681a      	ldr	r2, [r3, #0]
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	3304      	adds	r3, #4
 800f4d8:	4619      	mov	r1, r3
 800f4da:	4610      	mov	r0, r2
 800f4dc:	f000 fed2 	bl	8010284 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2201      	movs	r2, #1
 800f4e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	2201      	movs	r2, #1
 800f4ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	2201      	movs	r2, #1
 800f4f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	2201      	movs	r2, #1
 800f4fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	2201      	movs	r2, #1
 800f504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	2201      	movs	r2, #1
 800f50c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	2201      	movs	r2, #1
 800f514:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	2201      	movs	r2, #1
 800f51c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	2201      	movs	r2, #1
 800f524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	2201      	movs	r2, #1
 800f52c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	2201      	movs	r2, #1
 800f534:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	2201      	movs	r2, #1
 800f53c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f540:	2300      	movs	r3, #0
}
 800f542:	4618      	mov	r0, r3
 800f544:	3708      	adds	r7, #8
 800f546:	46bd      	mov	sp, r7
 800f548:	bd80      	pop	{r7, pc}
	...

0800f54c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b084      	sub	sp, #16
 800f550:	af00      	add	r7, sp, #0
 800f552:	6078      	str	r0, [r7, #4]
 800f554:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f556:	683b      	ldr	r3, [r7, #0]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d109      	bne.n	800f570 <HAL_TIM_PWM_Start+0x24>
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f562:	b2db      	uxtb	r3, r3
 800f564:	2b01      	cmp	r3, #1
 800f566:	bf14      	ite	ne
 800f568:	2301      	movne	r3, #1
 800f56a:	2300      	moveq	r3, #0
 800f56c:	b2db      	uxtb	r3, r3
 800f56e:	e03c      	b.n	800f5ea <HAL_TIM_PWM_Start+0x9e>
 800f570:	683b      	ldr	r3, [r7, #0]
 800f572:	2b04      	cmp	r3, #4
 800f574:	d109      	bne.n	800f58a <HAL_TIM_PWM_Start+0x3e>
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f57c:	b2db      	uxtb	r3, r3
 800f57e:	2b01      	cmp	r3, #1
 800f580:	bf14      	ite	ne
 800f582:	2301      	movne	r3, #1
 800f584:	2300      	moveq	r3, #0
 800f586:	b2db      	uxtb	r3, r3
 800f588:	e02f      	b.n	800f5ea <HAL_TIM_PWM_Start+0x9e>
 800f58a:	683b      	ldr	r3, [r7, #0]
 800f58c:	2b08      	cmp	r3, #8
 800f58e:	d109      	bne.n	800f5a4 <HAL_TIM_PWM_Start+0x58>
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f596:	b2db      	uxtb	r3, r3
 800f598:	2b01      	cmp	r3, #1
 800f59a:	bf14      	ite	ne
 800f59c:	2301      	movne	r3, #1
 800f59e:	2300      	moveq	r3, #0
 800f5a0:	b2db      	uxtb	r3, r3
 800f5a2:	e022      	b.n	800f5ea <HAL_TIM_PWM_Start+0x9e>
 800f5a4:	683b      	ldr	r3, [r7, #0]
 800f5a6:	2b0c      	cmp	r3, #12
 800f5a8:	d109      	bne.n	800f5be <HAL_TIM_PWM_Start+0x72>
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f5b0:	b2db      	uxtb	r3, r3
 800f5b2:	2b01      	cmp	r3, #1
 800f5b4:	bf14      	ite	ne
 800f5b6:	2301      	movne	r3, #1
 800f5b8:	2300      	moveq	r3, #0
 800f5ba:	b2db      	uxtb	r3, r3
 800f5bc:	e015      	b.n	800f5ea <HAL_TIM_PWM_Start+0x9e>
 800f5be:	683b      	ldr	r3, [r7, #0]
 800f5c0:	2b10      	cmp	r3, #16
 800f5c2:	d109      	bne.n	800f5d8 <HAL_TIM_PWM_Start+0x8c>
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f5ca:	b2db      	uxtb	r3, r3
 800f5cc:	2b01      	cmp	r3, #1
 800f5ce:	bf14      	ite	ne
 800f5d0:	2301      	movne	r3, #1
 800f5d2:	2300      	moveq	r3, #0
 800f5d4:	b2db      	uxtb	r3, r3
 800f5d6:	e008      	b.n	800f5ea <HAL_TIM_PWM_Start+0x9e>
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f5de:	b2db      	uxtb	r3, r3
 800f5e0:	2b01      	cmp	r3, #1
 800f5e2:	bf14      	ite	ne
 800f5e4:	2301      	movne	r3, #1
 800f5e6:	2300      	moveq	r3, #0
 800f5e8:	b2db      	uxtb	r3, r3
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d001      	beq.n	800f5f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800f5ee:	2301      	movs	r3, #1
 800f5f0:	e0ab      	b.n	800f74a <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d104      	bne.n	800f602 <HAL_TIM_PWM_Start+0xb6>
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	2202      	movs	r2, #2
 800f5fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f600:	e023      	b.n	800f64a <HAL_TIM_PWM_Start+0xfe>
 800f602:	683b      	ldr	r3, [r7, #0]
 800f604:	2b04      	cmp	r3, #4
 800f606:	d104      	bne.n	800f612 <HAL_TIM_PWM_Start+0xc6>
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	2202      	movs	r2, #2
 800f60c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f610:	e01b      	b.n	800f64a <HAL_TIM_PWM_Start+0xfe>
 800f612:	683b      	ldr	r3, [r7, #0]
 800f614:	2b08      	cmp	r3, #8
 800f616:	d104      	bne.n	800f622 <HAL_TIM_PWM_Start+0xd6>
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	2202      	movs	r2, #2
 800f61c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f620:	e013      	b.n	800f64a <HAL_TIM_PWM_Start+0xfe>
 800f622:	683b      	ldr	r3, [r7, #0]
 800f624:	2b0c      	cmp	r3, #12
 800f626:	d104      	bne.n	800f632 <HAL_TIM_PWM_Start+0xe6>
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	2202      	movs	r2, #2
 800f62c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f630:	e00b      	b.n	800f64a <HAL_TIM_PWM_Start+0xfe>
 800f632:	683b      	ldr	r3, [r7, #0]
 800f634:	2b10      	cmp	r3, #16
 800f636:	d104      	bne.n	800f642 <HAL_TIM_PWM_Start+0xf6>
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	2202      	movs	r2, #2
 800f63c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f640:	e003      	b.n	800f64a <HAL_TIM_PWM_Start+0xfe>
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	2202      	movs	r2, #2
 800f646:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	2201      	movs	r2, #1
 800f650:	6839      	ldr	r1, [r7, #0]
 800f652:	4618      	mov	r0, r3
 800f654:	f001 f992 	bl	801097c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	4a3d      	ldr	r2, [pc, #244]	; (800f754 <HAL_TIM_PWM_Start+0x208>)
 800f65e:	4293      	cmp	r3, r2
 800f660:	d013      	beq.n	800f68a <HAL_TIM_PWM_Start+0x13e>
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	4a3c      	ldr	r2, [pc, #240]	; (800f758 <HAL_TIM_PWM_Start+0x20c>)
 800f668:	4293      	cmp	r3, r2
 800f66a:	d00e      	beq.n	800f68a <HAL_TIM_PWM_Start+0x13e>
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	4a3a      	ldr	r2, [pc, #232]	; (800f75c <HAL_TIM_PWM_Start+0x210>)
 800f672:	4293      	cmp	r3, r2
 800f674:	d009      	beq.n	800f68a <HAL_TIM_PWM_Start+0x13e>
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	4a39      	ldr	r2, [pc, #228]	; (800f760 <HAL_TIM_PWM_Start+0x214>)
 800f67c:	4293      	cmp	r3, r2
 800f67e:	d004      	beq.n	800f68a <HAL_TIM_PWM_Start+0x13e>
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	4a37      	ldr	r2, [pc, #220]	; (800f764 <HAL_TIM_PWM_Start+0x218>)
 800f686:	4293      	cmp	r3, r2
 800f688:	d101      	bne.n	800f68e <HAL_TIM_PWM_Start+0x142>
 800f68a:	2301      	movs	r3, #1
 800f68c:	e000      	b.n	800f690 <HAL_TIM_PWM_Start+0x144>
 800f68e:	2300      	movs	r3, #0
 800f690:	2b00      	cmp	r3, #0
 800f692:	d007      	beq.n	800f6a4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f6a2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	4a2a      	ldr	r2, [pc, #168]	; (800f754 <HAL_TIM_PWM_Start+0x208>)
 800f6aa:	4293      	cmp	r3, r2
 800f6ac:	d02c      	beq.n	800f708 <HAL_TIM_PWM_Start+0x1bc>
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f6b6:	d027      	beq.n	800f708 <HAL_TIM_PWM_Start+0x1bc>
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	4a2a      	ldr	r2, [pc, #168]	; (800f768 <HAL_TIM_PWM_Start+0x21c>)
 800f6be:	4293      	cmp	r3, r2
 800f6c0:	d022      	beq.n	800f708 <HAL_TIM_PWM_Start+0x1bc>
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	4a29      	ldr	r2, [pc, #164]	; (800f76c <HAL_TIM_PWM_Start+0x220>)
 800f6c8:	4293      	cmp	r3, r2
 800f6ca:	d01d      	beq.n	800f708 <HAL_TIM_PWM_Start+0x1bc>
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	4a27      	ldr	r2, [pc, #156]	; (800f770 <HAL_TIM_PWM_Start+0x224>)
 800f6d2:	4293      	cmp	r3, r2
 800f6d4:	d018      	beq.n	800f708 <HAL_TIM_PWM_Start+0x1bc>
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	4a1f      	ldr	r2, [pc, #124]	; (800f758 <HAL_TIM_PWM_Start+0x20c>)
 800f6dc:	4293      	cmp	r3, r2
 800f6de:	d013      	beq.n	800f708 <HAL_TIM_PWM_Start+0x1bc>
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	4a23      	ldr	r2, [pc, #140]	; (800f774 <HAL_TIM_PWM_Start+0x228>)
 800f6e6:	4293      	cmp	r3, r2
 800f6e8:	d00e      	beq.n	800f708 <HAL_TIM_PWM_Start+0x1bc>
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	4a1b      	ldr	r2, [pc, #108]	; (800f75c <HAL_TIM_PWM_Start+0x210>)
 800f6f0:	4293      	cmp	r3, r2
 800f6f2:	d009      	beq.n	800f708 <HAL_TIM_PWM_Start+0x1bc>
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	4a1f      	ldr	r2, [pc, #124]	; (800f778 <HAL_TIM_PWM_Start+0x22c>)
 800f6fa:	4293      	cmp	r3, r2
 800f6fc:	d004      	beq.n	800f708 <HAL_TIM_PWM_Start+0x1bc>
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	4a1e      	ldr	r2, [pc, #120]	; (800f77c <HAL_TIM_PWM_Start+0x230>)
 800f704:	4293      	cmp	r3, r2
 800f706:	d115      	bne.n	800f734 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	689a      	ldr	r2, [r3, #8]
 800f70e:	4b1c      	ldr	r3, [pc, #112]	; (800f780 <HAL_TIM_PWM_Start+0x234>)
 800f710:	4013      	ands	r3, r2
 800f712:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	2b06      	cmp	r3, #6
 800f718:	d015      	beq.n	800f746 <HAL_TIM_PWM_Start+0x1fa>
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f720:	d011      	beq.n	800f746 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	681a      	ldr	r2, [r3, #0]
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	f042 0201 	orr.w	r2, r2, #1
 800f730:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f732:	e008      	b.n	800f746 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	681a      	ldr	r2, [r3, #0]
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	f042 0201 	orr.w	r2, r2, #1
 800f742:	601a      	str	r2, [r3, #0]
 800f744:	e000      	b.n	800f748 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f746:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f748:	2300      	movs	r3, #0
}
 800f74a:	4618      	mov	r0, r3
 800f74c:	3710      	adds	r7, #16
 800f74e:	46bd      	mov	sp, r7
 800f750:	bd80      	pop	{r7, pc}
 800f752:	bf00      	nop
 800f754:	40010000 	.word	0x40010000
 800f758:	40010400 	.word	0x40010400
 800f75c:	40014000 	.word	0x40014000
 800f760:	40014400 	.word	0x40014400
 800f764:	40014800 	.word	0x40014800
 800f768:	40000400 	.word	0x40000400
 800f76c:	40000800 	.word	0x40000800
 800f770:	40000c00 	.word	0x40000c00
 800f774:	40001800 	.word	0x40001800
 800f778:	4000e000 	.word	0x4000e000
 800f77c:	4000e400 	.word	0x4000e400
 800f780:	00010007 	.word	0x00010007

0800f784 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800f784:	b580      	push	{r7, lr}
 800f786:	b086      	sub	sp, #24
 800f788:	af00      	add	r7, sp, #0
 800f78a:	60f8      	str	r0, [r7, #12]
 800f78c:	60b9      	str	r1, [r7, #8]
 800f78e:	607a      	str	r2, [r7, #4]
 800f790:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800f792:	2300      	movs	r3, #0
 800f794:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800f796:	68bb      	ldr	r3, [r7, #8]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d109      	bne.n	800f7b0 <HAL_TIM_PWM_Start_DMA+0x2c>
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f7a2:	b2db      	uxtb	r3, r3
 800f7a4:	2b02      	cmp	r3, #2
 800f7a6:	bf0c      	ite	eq
 800f7a8:	2301      	moveq	r3, #1
 800f7aa:	2300      	movne	r3, #0
 800f7ac:	b2db      	uxtb	r3, r3
 800f7ae:	e03c      	b.n	800f82a <HAL_TIM_PWM_Start_DMA+0xa6>
 800f7b0:	68bb      	ldr	r3, [r7, #8]
 800f7b2:	2b04      	cmp	r3, #4
 800f7b4:	d109      	bne.n	800f7ca <HAL_TIM_PWM_Start_DMA+0x46>
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f7bc:	b2db      	uxtb	r3, r3
 800f7be:	2b02      	cmp	r3, #2
 800f7c0:	bf0c      	ite	eq
 800f7c2:	2301      	moveq	r3, #1
 800f7c4:	2300      	movne	r3, #0
 800f7c6:	b2db      	uxtb	r3, r3
 800f7c8:	e02f      	b.n	800f82a <HAL_TIM_PWM_Start_DMA+0xa6>
 800f7ca:	68bb      	ldr	r3, [r7, #8]
 800f7cc:	2b08      	cmp	r3, #8
 800f7ce:	d109      	bne.n	800f7e4 <HAL_TIM_PWM_Start_DMA+0x60>
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f7d6:	b2db      	uxtb	r3, r3
 800f7d8:	2b02      	cmp	r3, #2
 800f7da:	bf0c      	ite	eq
 800f7dc:	2301      	moveq	r3, #1
 800f7de:	2300      	movne	r3, #0
 800f7e0:	b2db      	uxtb	r3, r3
 800f7e2:	e022      	b.n	800f82a <HAL_TIM_PWM_Start_DMA+0xa6>
 800f7e4:	68bb      	ldr	r3, [r7, #8]
 800f7e6:	2b0c      	cmp	r3, #12
 800f7e8:	d109      	bne.n	800f7fe <HAL_TIM_PWM_Start_DMA+0x7a>
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f7f0:	b2db      	uxtb	r3, r3
 800f7f2:	2b02      	cmp	r3, #2
 800f7f4:	bf0c      	ite	eq
 800f7f6:	2301      	moveq	r3, #1
 800f7f8:	2300      	movne	r3, #0
 800f7fa:	b2db      	uxtb	r3, r3
 800f7fc:	e015      	b.n	800f82a <HAL_TIM_PWM_Start_DMA+0xa6>
 800f7fe:	68bb      	ldr	r3, [r7, #8]
 800f800:	2b10      	cmp	r3, #16
 800f802:	d109      	bne.n	800f818 <HAL_TIM_PWM_Start_DMA+0x94>
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f80a:	b2db      	uxtb	r3, r3
 800f80c:	2b02      	cmp	r3, #2
 800f80e:	bf0c      	ite	eq
 800f810:	2301      	moveq	r3, #1
 800f812:	2300      	movne	r3, #0
 800f814:	b2db      	uxtb	r3, r3
 800f816:	e008      	b.n	800f82a <HAL_TIM_PWM_Start_DMA+0xa6>
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f81e:	b2db      	uxtb	r3, r3
 800f820:	2b02      	cmp	r3, #2
 800f822:	bf0c      	ite	eq
 800f824:	2301      	moveq	r3, #1
 800f826:	2300      	movne	r3, #0
 800f828:	b2db      	uxtb	r3, r3
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d001      	beq.n	800f832 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800f82e:	2302      	movs	r3, #2
 800f830:	e1ba      	b.n	800fba8 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800f832:	68bb      	ldr	r3, [r7, #8]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d109      	bne.n	800f84c <HAL_TIM_PWM_Start_DMA+0xc8>
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f83e:	b2db      	uxtb	r3, r3
 800f840:	2b01      	cmp	r3, #1
 800f842:	bf0c      	ite	eq
 800f844:	2301      	moveq	r3, #1
 800f846:	2300      	movne	r3, #0
 800f848:	b2db      	uxtb	r3, r3
 800f84a:	e03c      	b.n	800f8c6 <HAL_TIM_PWM_Start_DMA+0x142>
 800f84c:	68bb      	ldr	r3, [r7, #8]
 800f84e:	2b04      	cmp	r3, #4
 800f850:	d109      	bne.n	800f866 <HAL_TIM_PWM_Start_DMA+0xe2>
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f858:	b2db      	uxtb	r3, r3
 800f85a:	2b01      	cmp	r3, #1
 800f85c:	bf0c      	ite	eq
 800f85e:	2301      	moveq	r3, #1
 800f860:	2300      	movne	r3, #0
 800f862:	b2db      	uxtb	r3, r3
 800f864:	e02f      	b.n	800f8c6 <HAL_TIM_PWM_Start_DMA+0x142>
 800f866:	68bb      	ldr	r3, [r7, #8]
 800f868:	2b08      	cmp	r3, #8
 800f86a:	d109      	bne.n	800f880 <HAL_TIM_PWM_Start_DMA+0xfc>
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f872:	b2db      	uxtb	r3, r3
 800f874:	2b01      	cmp	r3, #1
 800f876:	bf0c      	ite	eq
 800f878:	2301      	moveq	r3, #1
 800f87a:	2300      	movne	r3, #0
 800f87c:	b2db      	uxtb	r3, r3
 800f87e:	e022      	b.n	800f8c6 <HAL_TIM_PWM_Start_DMA+0x142>
 800f880:	68bb      	ldr	r3, [r7, #8]
 800f882:	2b0c      	cmp	r3, #12
 800f884:	d109      	bne.n	800f89a <HAL_TIM_PWM_Start_DMA+0x116>
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f88c:	b2db      	uxtb	r3, r3
 800f88e:	2b01      	cmp	r3, #1
 800f890:	bf0c      	ite	eq
 800f892:	2301      	moveq	r3, #1
 800f894:	2300      	movne	r3, #0
 800f896:	b2db      	uxtb	r3, r3
 800f898:	e015      	b.n	800f8c6 <HAL_TIM_PWM_Start_DMA+0x142>
 800f89a:	68bb      	ldr	r3, [r7, #8]
 800f89c:	2b10      	cmp	r3, #16
 800f89e:	d109      	bne.n	800f8b4 <HAL_TIM_PWM_Start_DMA+0x130>
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f8a6:	b2db      	uxtb	r3, r3
 800f8a8:	2b01      	cmp	r3, #1
 800f8aa:	bf0c      	ite	eq
 800f8ac:	2301      	moveq	r3, #1
 800f8ae:	2300      	movne	r3, #0
 800f8b0:	b2db      	uxtb	r3, r3
 800f8b2:	e008      	b.n	800f8c6 <HAL_TIM_PWM_Start_DMA+0x142>
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f8ba:	b2db      	uxtb	r3, r3
 800f8bc:	2b01      	cmp	r3, #1
 800f8be:	bf0c      	ite	eq
 800f8c0:	2301      	moveq	r3, #1
 800f8c2:	2300      	movne	r3, #0
 800f8c4:	b2db      	uxtb	r3, r3
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d034      	beq.n	800f934 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d002      	beq.n	800f8d6 <HAL_TIM_PWM_Start_DMA+0x152>
 800f8d0:	887b      	ldrh	r3, [r7, #2]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d101      	bne.n	800f8da <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800f8d6:	2301      	movs	r3, #1
 800f8d8:	e166      	b.n	800fba8 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f8da:	68bb      	ldr	r3, [r7, #8]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d104      	bne.n	800f8ea <HAL_TIM_PWM_Start_DMA+0x166>
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	2202      	movs	r2, #2
 800f8e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f8e8:	e026      	b.n	800f938 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f8ea:	68bb      	ldr	r3, [r7, #8]
 800f8ec:	2b04      	cmp	r3, #4
 800f8ee:	d104      	bne.n	800f8fa <HAL_TIM_PWM_Start_DMA+0x176>
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	2202      	movs	r2, #2
 800f8f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f8f8:	e01e      	b.n	800f938 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f8fa:	68bb      	ldr	r3, [r7, #8]
 800f8fc:	2b08      	cmp	r3, #8
 800f8fe:	d104      	bne.n	800f90a <HAL_TIM_PWM_Start_DMA+0x186>
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	2202      	movs	r2, #2
 800f904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f908:	e016      	b.n	800f938 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f90a:	68bb      	ldr	r3, [r7, #8]
 800f90c:	2b0c      	cmp	r3, #12
 800f90e:	d104      	bne.n	800f91a <HAL_TIM_PWM_Start_DMA+0x196>
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	2202      	movs	r2, #2
 800f914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f918:	e00e      	b.n	800f938 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f91a:	68bb      	ldr	r3, [r7, #8]
 800f91c:	2b10      	cmp	r3, #16
 800f91e:	d104      	bne.n	800f92a <HAL_TIM_PWM_Start_DMA+0x1a6>
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	2202      	movs	r2, #2
 800f924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f928:	e006      	b.n	800f938 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	2202      	movs	r2, #2
 800f92e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f932:	e001      	b.n	800f938 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800f934:	2301      	movs	r3, #1
 800f936:	e137      	b.n	800fba8 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800f938:	68bb      	ldr	r3, [r7, #8]
 800f93a:	2b0c      	cmp	r3, #12
 800f93c:	f200 80ae 	bhi.w	800fa9c <HAL_TIM_PWM_Start_DMA+0x318>
 800f940:	a201      	add	r2, pc, #4	; (adr r2, 800f948 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800f942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f946:	bf00      	nop
 800f948:	0800f97d 	.word	0x0800f97d
 800f94c:	0800fa9d 	.word	0x0800fa9d
 800f950:	0800fa9d 	.word	0x0800fa9d
 800f954:	0800fa9d 	.word	0x0800fa9d
 800f958:	0800f9c5 	.word	0x0800f9c5
 800f95c:	0800fa9d 	.word	0x0800fa9d
 800f960:	0800fa9d 	.word	0x0800fa9d
 800f964:	0800fa9d 	.word	0x0800fa9d
 800f968:	0800fa0d 	.word	0x0800fa0d
 800f96c:	0800fa9d 	.word	0x0800fa9d
 800f970:	0800fa9d 	.word	0x0800fa9d
 800f974:	0800fa9d 	.word	0x0800fa9d
 800f978:	0800fa55 	.word	0x0800fa55
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f980:	4a8b      	ldr	r2, [pc, #556]	; (800fbb0 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f982:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f988:	4a8a      	ldr	r2, [pc, #552]	; (800fbb4 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f98a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f990:	4a89      	ldr	r2, [pc, #548]	; (800fbb8 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f992:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f998:	6879      	ldr	r1, [r7, #4]
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	3334      	adds	r3, #52	; 0x34
 800f9a0:	461a      	mov	r2, r3
 800f9a2:	887b      	ldrh	r3, [r7, #2]
 800f9a4:	f7f6 f872 	bl	8005a8c <HAL_DMA_Start_IT>
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d001      	beq.n	800f9b2 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f9ae:	2301      	movs	r3, #1
 800f9b0:	e0fa      	b.n	800fba8 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	68da      	ldr	r2, [r3, #12]
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f9c0:	60da      	str	r2, [r3, #12]
      break;
 800f9c2:	e06e      	b.n	800faa2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9c8:	4a79      	ldr	r2, [pc, #484]	; (800fbb0 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f9ca:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9d0:	4a78      	ldr	r2, [pc, #480]	; (800fbb4 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f9d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9d8:	4a77      	ldr	r2, [pc, #476]	; (800fbb8 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f9da:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800f9e0:	6879      	ldr	r1, [r7, #4]
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	3338      	adds	r3, #56	; 0x38
 800f9e8:	461a      	mov	r2, r3
 800f9ea:	887b      	ldrh	r3, [r7, #2]
 800f9ec:	f7f6 f84e 	bl	8005a8c <HAL_DMA_Start_IT>
 800f9f0:	4603      	mov	r3, r0
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d001      	beq.n	800f9fa <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f9f6:	2301      	movs	r3, #1
 800f9f8:	e0d6      	b.n	800fba8 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	68da      	ldr	r2, [r3, #12]
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800fa08:	60da      	str	r2, [r3, #12]
      break;
 800fa0a:	e04a      	b.n	800faa2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa10:	4a67      	ldr	r2, [pc, #412]	; (800fbb0 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800fa12:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa18:	4a66      	ldr	r2, [pc, #408]	; (800fbb4 <HAL_TIM_PWM_Start_DMA+0x430>)
 800fa1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa20:	4a65      	ldr	r2, [pc, #404]	; (800fbb8 <HAL_TIM_PWM_Start_DMA+0x434>)
 800fa22:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800fa28:	6879      	ldr	r1, [r7, #4]
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	333c      	adds	r3, #60	; 0x3c
 800fa30:	461a      	mov	r2, r3
 800fa32:	887b      	ldrh	r3, [r7, #2]
 800fa34:	f7f6 f82a 	bl	8005a8c <HAL_DMA_Start_IT>
 800fa38:	4603      	mov	r3, r0
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d001      	beq.n	800fa42 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800fa3e:	2301      	movs	r3, #1
 800fa40:	e0b2      	b.n	800fba8 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	68da      	ldr	r2, [r3, #12]
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fa50:	60da      	str	r2, [r3, #12]
      break;
 800fa52:	e026      	b.n	800faa2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa58:	4a55      	ldr	r2, [pc, #340]	; (800fbb0 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800fa5a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa60:	4a54      	ldr	r2, [pc, #336]	; (800fbb4 <HAL_TIM_PWM_Start_DMA+0x430>)
 800fa62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa68:	4a53      	ldr	r2, [pc, #332]	; (800fbb8 <HAL_TIM_PWM_Start_DMA+0x434>)
 800fa6a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800fa70:	6879      	ldr	r1, [r7, #4]
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	3340      	adds	r3, #64	; 0x40
 800fa78:	461a      	mov	r2, r3
 800fa7a:	887b      	ldrh	r3, [r7, #2]
 800fa7c:	f7f6 f806 	bl	8005a8c <HAL_DMA_Start_IT>
 800fa80:	4603      	mov	r3, r0
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d001      	beq.n	800fa8a <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800fa86:	2301      	movs	r3, #1
 800fa88:	e08e      	b.n	800fba8 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	68da      	ldr	r2, [r3, #12]
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800fa98:	60da      	str	r2, [r3, #12]
      break;
 800fa9a:	e002      	b.n	800faa2 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800fa9c:	2301      	movs	r3, #1
 800fa9e:	75fb      	strb	r3, [r7, #23]
      break;
 800faa0:	bf00      	nop
  }

  if (status == HAL_OK)
 800faa2:	7dfb      	ldrb	r3, [r7, #23]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d17e      	bne.n	800fba6 <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	2201      	movs	r2, #1
 800faae:	68b9      	ldr	r1, [r7, #8]
 800fab0:	4618      	mov	r0, r3
 800fab2:	f000 ff63 	bl	801097c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	4a40      	ldr	r2, [pc, #256]	; (800fbbc <HAL_TIM_PWM_Start_DMA+0x438>)
 800fabc:	4293      	cmp	r3, r2
 800fabe:	d013      	beq.n	800fae8 <HAL_TIM_PWM_Start_DMA+0x364>
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	4a3e      	ldr	r2, [pc, #248]	; (800fbc0 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800fac6:	4293      	cmp	r3, r2
 800fac8:	d00e      	beq.n	800fae8 <HAL_TIM_PWM_Start_DMA+0x364>
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	4a3d      	ldr	r2, [pc, #244]	; (800fbc4 <HAL_TIM_PWM_Start_DMA+0x440>)
 800fad0:	4293      	cmp	r3, r2
 800fad2:	d009      	beq.n	800fae8 <HAL_TIM_PWM_Start_DMA+0x364>
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	4a3b      	ldr	r2, [pc, #236]	; (800fbc8 <HAL_TIM_PWM_Start_DMA+0x444>)
 800fada:	4293      	cmp	r3, r2
 800fadc:	d004      	beq.n	800fae8 <HAL_TIM_PWM_Start_DMA+0x364>
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	4a3a      	ldr	r2, [pc, #232]	; (800fbcc <HAL_TIM_PWM_Start_DMA+0x448>)
 800fae4:	4293      	cmp	r3, r2
 800fae6:	d101      	bne.n	800faec <HAL_TIM_PWM_Start_DMA+0x368>
 800fae8:	2301      	movs	r3, #1
 800faea:	e000      	b.n	800faee <HAL_TIM_PWM_Start_DMA+0x36a>
 800faec:	2300      	movs	r3, #0
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d007      	beq.n	800fb02 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fb00:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	4a2d      	ldr	r2, [pc, #180]	; (800fbbc <HAL_TIM_PWM_Start_DMA+0x438>)
 800fb08:	4293      	cmp	r3, r2
 800fb0a:	d02c      	beq.n	800fb66 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fb14:	d027      	beq.n	800fb66 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	4a2d      	ldr	r2, [pc, #180]	; (800fbd0 <HAL_TIM_PWM_Start_DMA+0x44c>)
 800fb1c:	4293      	cmp	r3, r2
 800fb1e:	d022      	beq.n	800fb66 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	4a2b      	ldr	r2, [pc, #172]	; (800fbd4 <HAL_TIM_PWM_Start_DMA+0x450>)
 800fb26:	4293      	cmp	r3, r2
 800fb28:	d01d      	beq.n	800fb66 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	4a2a      	ldr	r2, [pc, #168]	; (800fbd8 <HAL_TIM_PWM_Start_DMA+0x454>)
 800fb30:	4293      	cmp	r3, r2
 800fb32:	d018      	beq.n	800fb66 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	4a21      	ldr	r2, [pc, #132]	; (800fbc0 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800fb3a:	4293      	cmp	r3, r2
 800fb3c:	d013      	beq.n	800fb66 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	4a26      	ldr	r2, [pc, #152]	; (800fbdc <HAL_TIM_PWM_Start_DMA+0x458>)
 800fb44:	4293      	cmp	r3, r2
 800fb46:	d00e      	beq.n	800fb66 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	681b      	ldr	r3, [r3, #0]
 800fb4c:	4a1d      	ldr	r2, [pc, #116]	; (800fbc4 <HAL_TIM_PWM_Start_DMA+0x440>)
 800fb4e:	4293      	cmp	r3, r2
 800fb50:	d009      	beq.n	800fb66 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	4a22      	ldr	r2, [pc, #136]	; (800fbe0 <HAL_TIM_PWM_Start_DMA+0x45c>)
 800fb58:	4293      	cmp	r3, r2
 800fb5a:	d004      	beq.n	800fb66 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	4a20      	ldr	r2, [pc, #128]	; (800fbe4 <HAL_TIM_PWM_Start_DMA+0x460>)
 800fb62:	4293      	cmp	r3, r2
 800fb64:	d115      	bne.n	800fb92 <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	689a      	ldr	r2, [r3, #8]
 800fb6c:	4b1e      	ldr	r3, [pc, #120]	; (800fbe8 <HAL_TIM_PWM_Start_DMA+0x464>)
 800fb6e:	4013      	ands	r3, r2
 800fb70:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fb72:	693b      	ldr	r3, [r7, #16]
 800fb74:	2b06      	cmp	r3, #6
 800fb76:	d015      	beq.n	800fba4 <HAL_TIM_PWM_Start_DMA+0x420>
 800fb78:	693b      	ldr	r3, [r7, #16]
 800fb7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fb7e:	d011      	beq.n	800fba4 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	681a      	ldr	r2, [r3, #0]
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	f042 0201 	orr.w	r2, r2, #1
 800fb8e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fb90:	e008      	b.n	800fba4 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	681a      	ldr	r2, [r3, #0]
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	f042 0201 	orr.w	r2, r2, #1
 800fba0:	601a      	str	r2, [r3, #0]
 800fba2:	e000      	b.n	800fba6 <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fba4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800fba6:	7dfb      	ldrb	r3, [r7, #23]
}
 800fba8:	4618      	mov	r0, r3
 800fbaa:	3718      	adds	r7, #24
 800fbac:	46bd      	mov	sp, r7
 800fbae:	bd80      	pop	{r7, pc}
 800fbb0:	08010173 	.word	0x08010173
 800fbb4:	0801021b 	.word	0x0801021b
 800fbb8:	080100e1 	.word	0x080100e1
 800fbbc:	40010000 	.word	0x40010000
 800fbc0:	40010400 	.word	0x40010400
 800fbc4:	40014000 	.word	0x40014000
 800fbc8:	40014400 	.word	0x40014400
 800fbcc:	40014800 	.word	0x40014800
 800fbd0:	40000400 	.word	0x40000400
 800fbd4:	40000800 	.word	0x40000800
 800fbd8:	40000c00 	.word	0x40000c00
 800fbdc:	40001800 	.word	0x40001800
 800fbe0:	4000e000 	.word	0x4000e000
 800fbe4:	4000e400 	.word	0x4000e400
 800fbe8:	00010007 	.word	0x00010007

0800fbec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b082      	sub	sp, #8
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	691b      	ldr	r3, [r3, #16]
 800fbfa:	f003 0302 	and.w	r3, r3, #2
 800fbfe:	2b02      	cmp	r3, #2
 800fc00:	d122      	bne.n	800fc48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	68db      	ldr	r3, [r3, #12]
 800fc08:	f003 0302 	and.w	r3, r3, #2
 800fc0c:	2b02      	cmp	r3, #2
 800fc0e:	d11b      	bne.n	800fc48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	f06f 0202 	mvn.w	r2, #2
 800fc18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	2201      	movs	r2, #1
 800fc1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	699b      	ldr	r3, [r3, #24]
 800fc26:	f003 0303 	and.w	r3, r3, #3
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d003      	beq.n	800fc36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800fc2e:	6878      	ldr	r0, [r7, #4]
 800fc30:	f000 fa24 	bl	801007c <HAL_TIM_IC_CaptureCallback>
 800fc34:	e005      	b.n	800fc42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fc36:	6878      	ldr	r0, [r7, #4]
 800fc38:	f000 fa16 	bl	8010068 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fc3c:	6878      	ldr	r0, [r7, #4]
 800fc3e:	f000 fa27 	bl	8010090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	2200      	movs	r2, #0
 800fc46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	691b      	ldr	r3, [r3, #16]
 800fc4e:	f003 0304 	and.w	r3, r3, #4
 800fc52:	2b04      	cmp	r3, #4
 800fc54:	d122      	bne.n	800fc9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	68db      	ldr	r3, [r3, #12]
 800fc5c:	f003 0304 	and.w	r3, r3, #4
 800fc60:	2b04      	cmp	r3, #4
 800fc62:	d11b      	bne.n	800fc9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	f06f 0204 	mvn.w	r2, #4
 800fc6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	2202      	movs	r2, #2
 800fc72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	699b      	ldr	r3, [r3, #24]
 800fc7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d003      	beq.n	800fc8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fc82:	6878      	ldr	r0, [r7, #4]
 800fc84:	f000 f9fa 	bl	801007c <HAL_TIM_IC_CaptureCallback>
 800fc88:	e005      	b.n	800fc96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fc8a:	6878      	ldr	r0, [r7, #4]
 800fc8c:	f000 f9ec 	bl	8010068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fc90:	6878      	ldr	r0, [r7, #4]
 800fc92:	f000 f9fd 	bl	8010090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	2200      	movs	r2, #0
 800fc9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	691b      	ldr	r3, [r3, #16]
 800fca2:	f003 0308 	and.w	r3, r3, #8
 800fca6:	2b08      	cmp	r3, #8
 800fca8:	d122      	bne.n	800fcf0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	68db      	ldr	r3, [r3, #12]
 800fcb0:	f003 0308 	and.w	r3, r3, #8
 800fcb4:	2b08      	cmp	r3, #8
 800fcb6:	d11b      	bne.n	800fcf0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	f06f 0208 	mvn.w	r2, #8
 800fcc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	2204      	movs	r2, #4
 800fcc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	69db      	ldr	r3, [r3, #28]
 800fcce:	f003 0303 	and.w	r3, r3, #3
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d003      	beq.n	800fcde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fcd6:	6878      	ldr	r0, [r7, #4]
 800fcd8:	f000 f9d0 	bl	801007c <HAL_TIM_IC_CaptureCallback>
 800fcdc:	e005      	b.n	800fcea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fcde:	6878      	ldr	r0, [r7, #4]
 800fce0:	f000 f9c2 	bl	8010068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fce4:	6878      	ldr	r0, [r7, #4]
 800fce6:	f000 f9d3 	bl	8010090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	2200      	movs	r2, #0
 800fcee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	691b      	ldr	r3, [r3, #16]
 800fcf6:	f003 0310 	and.w	r3, r3, #16
 800fcfa:	2b10      	cmp	r3, #16
 800fcfc:	d122      	bne.n	800fd44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	68db      	ldr	r3, [r3, #12]
 800fd04:	f003 0310 	and.w	r3, r3, #16
 800fd08:	2b10      	cmp	r3, #16
 800fd0a:	d11b      	bne.n	800fd44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	f06f 0210 	mvn.w	r2, #16
 800fd14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	2208      	movs	r2, #8
 800fd1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	69db      	ldr	r3, [r3, #28]
 800fd22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d003      	beq.n	800fd32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fd2a:	6878      	ldr	r0, [r7, #4]
 800fd2c:	f000 f9a6 	bl	801007c <HAL_TIM_IC_CaptureCallback>
 800fd30:	e005      	b.n	800fd3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fd32:	6878      	ldr	r0, [r7, #4]
 800fd34:	f000 f998 	bl	8010068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fd38:	6878      	ldr	r0, [r7, #4]
 800fd3a:	f000 f9a9 	bl	8010090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	2200      	movs	r2, #0
 800fd42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	691b      	ldr	r3, [r3, #16]
 800fd4a:	f003 0301 	and.w	r3, r3, #1
 800fd4e:	2b01      	cmp	r3, #1
 800fd50:	d10e      	bne.n	800fd70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	68db      	ldr	r3, [r3, #12]
 800fd58:	f003 0301 	and.w	r3, r3, #1
 800fd5c:	2b01      	cmp	r3, #1
 800fd5e:	d107      	bne.n	800fd70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	f06f 0201 	mvn.w	r2, #1
 800fd68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fd6a:	6878      	ldr	r0, [r7, #4]
 800fd6c:	f000 f972 	bl	8010054 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	691b      	ldr	r3, [r3, #16]
 800fd76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fd7a:	2b80      	cmp	r3, #128	; 0x80
 800fd7c:	d10e      	bne.n	800fd9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	68db      	ldr	r3, [r3, #12]
 800fd84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fd88:	2b80      	cmp	r3, #128	; 0x80
 800fd8a:	d107      	bne.n	800fd9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800fd94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fd96:	6878      	ldr	r0, [r7, #4]
 800fd98:	f000 febc 	bl	8010b14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	691b      	ldr	r3, [r3, #16]
 800fda2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fda6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fdaa:	d10e      	bne.n	800fdca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	68db      	ldr	r3, [r3, #12]
 800fdb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fdb6:	2b80      	cmp	r3, #128	; 0x80
 800fdb8:	d107      	bne.n	800fdca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800fdc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800fdc4:	6878      	ldr	r0, [r7, #4]
 800fdc6:	f000 feaf 	bl	8010b28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	691b      	ldr	r3, [r3, #16]
 800fdd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fdd4:	2b40      	cmp	r3, #64	; 0x40
 800fdd6:	d10e      	bne.n	800fdf6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	68db      	ldr	r3, [r3, #12]
 800fdde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fde2:	2b40      	cmp	r3, #64	; 0x40
 800fde4:	d107      	bne.n	800fdf6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fdee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fdf0:	6878      	ldr	r0, [r7, #4]
 800fdf2:	f000 f961 	bl	80100b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	691b      	ldr	r3, [r3, #16]
 800fdfc:	f003 0320 	and.w	r3, r3, #32
 800fe00:	2b20      	cmp	r3, #32
 800fe02:	d10e      	bne.n	800fe22 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	68db      	ldr	r3, [r3, #12]
 800fe0a:	f003 0320 	and.w	r3, r3, #32
 800fe0e:	2b20      	cmp	r3, #32
 800fe10:	d107      	bne.n	800fe22 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	f06f 0220 	mvn.w	r2, #32
 800fe1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fe1c:	6878      	ldr	r0, [r7, #4]
 800fe1e:	f000 fe6f 	bl	8010b00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fe22:	bf00      	nop
 800fe24:	3708      	adds	r7, #8
 800fe26:	46bd      	mov	sp, r7
 800fe28:	bd80      	pop	{r7, pc}
	...

0800fe2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b086      	sub	sp, #24
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	60f8      	str	r0, [r7, #12]
 800fe34:	60b9      	str	r1, [r7, #8]
 800fe36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fe38:	2300      	movs	r3, #0
 800fe3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fe42:	2b01      	cmp	r3, #1
 800fe44:	d101      	bne.n	800fe4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800fe46:	2302      	movs	r3, #2
 800fe48:	e0ff      	b.n	801004a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	2201      	movs	r2, #1
 800fe4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	2b14      	cmp	r3, #20
 800fe56:	f200 80f0 	bhi.w	801003a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800fe5a:	a201      	add	r2, pc, #4	; (adr r2, 800fe60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800fe5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe60:	0800feb5 	.word	0x0800feb5
 800fe64:	0801003b 	.word	0x0801003b
 800fe68:	0801003b 	.word	0x0801003b
 800fe6c:	0801003b 	.word	0x0801003b
 800fe70:	0800fef5 	.word	0x0800fef5
 800fe74:	0801003b 	.word	0x0801003b
 800fe78:	0801003b 	.word	0x0801003b
 800fe7c:	0801003b 	.word	0x0801003b
 800fe80:	0800ff37 	.word	0x0800ff37
 800fe84:	0801003b 	.word	0x0801003b
 800fe88:	0801003b 	.word	0x0801003b
 800fe8c:	0801003b 	.word	0x0801003b
 800fe90:	0800ff77 	.word	0x0800ff77
 800fe94:	0801003b 	.word	0x0801003b
 800fe98:	0801003b 	.word	0x0801003b
 800fe9c:	0801003b 	.word	0x0801003b
 800fea0:	0800ffb9 	.word	0x0800ffb9
 800fea4:	0801003b 	.word	0x0801003b
 800fea8:	0801003b 	.word	0x0801003b
 800feac:	0801003b 	.word	0x0801003b
 800feb0:	0800fff9 	.word	0x0800fff9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	68b9      	ldr	r1, [r7, #8]
 800feba:	4618      	mov	r0, r3
 800febc:	f000 fa88 	bl	80103d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	699a      	ldr	r2, [r3, #24]
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	f042 0208 	orr.w	r2, r2, #8
 800fece:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	699a      	ldr	r2, [r3, #24]
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	f022 0204 	bic.w	r2, r2, #4
 800fede:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	6999      	ldr	r1, [r3, #24]
 800fee6:	68bb      	ldr	r3, [r7, #8]
 800fee8:	691a      	ldr	r2, [r3, #16]
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	430a      	orrs	r2, r1
 800fef0:	619a      	str	r2, [r3, #24]
      break;
 800fef2:	e0a5      	b.n	8010040 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	68b9      	ldr	r1, [r7, #8]
 800fefa:	4618      	mov	r0, r3
 800fefc:	f000 faf8 	bl	80104f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	681b      	ldr	r3, [r3, #0]
 800ff04:	699a      	ldr	r2, [r3, #24]
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ff0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	699a      	ldr	r2, [r3, #24]
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ff1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	6999      	ldr	r1, [r3, #24]
 800ff26:	68bb      	ldr	r3, [r7, #8]
 800ff28:	691b      	ldr	r3, [r3, #16]
 800ff2a:	021a      	lsls	r2, r3, #8
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	430a      	orrs	r2, r1
 800ff32:	619a      	str	r2, [r3, #24]
      break;
 800ff34:	e084      	b.n	8010040 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	68b9      	ldr	r1, [r7, #8]
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	f000 fb61 	bl	8010604 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	69da      	ldr	r2, [r3, #28]
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	f042 0208 	orr.w	r2, r2, #8
 800ff50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	69da      	ldr	r2, [r3, #28]
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	f022 0204 	bic.w	r2, r2, #4
 800ff60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	69d9      	ldr	r1, [r3, #28]
 800ff68:	68bb      	ldr	r3, [r7, #8]
 800ff6a:	691a      	ldr	r2, [r3, #16]
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	430a      	orrs	r2, r1
 800ff72:	61da      	str	r2, [r3, #28]
      break;
 800ff74:	e064      	b.n	8010040 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	68b9      	ldr	r1, [r7, #8]
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	f000 fbc9 	bl	8010714 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	69da      	ldr	r2, [r3, #28]
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ff90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	69da      	ldr	r2, [r3, #28]
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ffa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	69d9      	ldr	r1, [r3, #28]
 800ffa8:	68bb      	ldr	r3, [r7, #8]
 800ffaa:	691b      	ldr	r3, [r3, #16]
 800ffac:	021a      	lsls	r2, r3, #8
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	430a      	orrs	r2, r1
 800ffb4:	61da      	str	r2, [r3, #28]
      break;
 800ffb6:	e043      	b.n	8010040 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	68b9      	ldr	r1, [r7, #8]
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	f000 fc12 	bl	80107e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	f042 0208 	orr.w	r2, r2, #8
 800ffd2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	f022 0204 	bic.w	r2, r2, #4
 800ffe2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ffea:	68bb      	ldr	r3, [r7, #8]
 800ffec:	691a      	ldr	r2, [r3, #16]
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	430a      	orrs	r2, r1
 800fff4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fff6:	e023      	b.n	8010040 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	68b9      	ldr	r1, [r7, #8]
 800fffe:	4618      	mov	r0, r3
 8010000:	f000 fc56 	bl	80108b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010012:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010022:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801002a:	68bb      	ldr	r3, [r7, #8]
 801002c:	691b      	ldr	r3, [r3, #16]
 801002e:	021a      	lsls	r2, r3, #8
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	430a      	orrs	r2, r1
 8010036:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010038:	e002      	b.n	8010040 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801003a:	2301      	movs	r3, #1
 801003c:	75fb      	strb	r3, [r7, #23]
      break;
 801003e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	2200      	movs	r2, #0
 8010044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010048:	7dfb      	ldrb	r3, [r7, #23]
}
 801004a:	4618      	mov	r0, r3
 801004c:	3718      	adds	r7, #24
 801004e:	46bd      	mov	sp, r7
 8010050:	bd80      	pop	{r7, pc}
 8010052:	bf00      	nop

08010054 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010054:	b480      	push	{r7}
 8010056:	b083      	sub	sp, #12
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 801005c:	bf00      	nop
 801005e:	370c      	adds	r7, #12
 8010060:	46bd      	mov	sp, r7
 8010062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010066:	4770      	bx	lr

08010068 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010068:	b480      	push	{r7}
 801006a:	b083      	sub	sp, #12
 801006c:	af00      	add	r7, sp, #0
 801006e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010070:	bf00      	nop
 8010072:	370c      	adds	r7, #12
 8010074:	46bd      	mov	sp, r7
 8010076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801007a:	4770      	bx	lr

0801007c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801007c:	b480      	push	{r7}
 801007e:	b083      	sub	sp, #12
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010084:	bf00      	nop
 8010086:	370c      	adds	r7, #12
 8010088:	46bd      	mov	sp, r7
 801008a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801008e:	4770      	bx	lr

08010090 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010090:	b480      	push	{r7}
 8010092:	b083      	sub	sp, #12
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010098:	bf00      	nop
 801009a:	370c      	adds	r7, #12
 801009c:	46bd      	mov	sp, r7
 801009e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a2:	4770      	bx	lr

080100a4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80100a4:	b480      	push	{r7}
 80100a6:	b083      	sub	sp, #12
 80100a8:	af00      	add	r7, sp, #0
 80100aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80100ac:	bf00      	nop
 80100ae:	370c      	adds	r7, #12
 80100b0:	46bd      	mov	sp, r7
 80100b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b6:	4770      	bx	lr

080100b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80100b8:	b480      	push	{r7}
 80100ba:	b083      	sub	sp, #12
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80100c0:	bf00      	nop
 80100c2:	370c      	adds	r7, #12
 80100c4:	46bd      	mov	sp, r7
 80100c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ca:	4770      	bx	lr

080100cc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80100cc:	b480      	push	{r7}
 80100ce:	b083      	sub	sp, #12
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80100d4:	bf00      	nop
 80100d6:	370c      	adds	r7, #12
 80100d8:	46bd      	mov	sp, r7
 80100da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100de:	4770      	bx	lr

080100e0 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80100e0:	b580      	push	{r7, lr}
 80100e2:	b084      	sub	sp, #16
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100ec:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100f2:	687a      	ldr	r2, [r7, #4]
 80100f4:	429a      	cmp	r2, r3
 80100f6:	d107      	bne.n	8010108 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	2201      	movs	r2, #1
 80100fc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	2201      	movs	r2, #1
 8010102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010106:	e02a      	b.n	801015e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801010c:	687a      	ldr	r2, [r7, #4]
 801010e:	429a      	cmp	r2, r3
 8010110:	d107      	bne.n	8010122 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	2202      	movs	r2, #2
 8010116:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	2201      	movs	r2, #1
 801011c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010120:	e01d      	b.n	801015e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010126:	687a      	ldr	r2, [r7, #4]
 8010128:	429a      	cmp	r2, r3
 801012a:	d107      	bne.n	801013c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	2204      	movs	r2, #4
 8010130:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	2201      	movs	r2, #1
 8010136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801013a:	e010      	b.n	801015e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010140:	687a      	ldr	r2, [r7, #4]
 8010142:	429a      	cmp	r2, r3
 8010144:	d107      	bne.n	8010156 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	2208      	movs	r2, #8
 801014a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	2201      	movs	r2, #1
 8010150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010154:	e003      	b.n	801015e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	2201      	movs	r2, #1
 801015a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 801015e:	68f8      	ldr	r0, [r7, #12]
 8010160:	f7ff ffb4 	bl	80100cc <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	2200      	movs	r2, #0
 8010168:	771a      	strb	r2, [r3, #28]
}
 801016a:	bf00      	nop
 801016c:	3710      	adds	r7, #16
 801016e:	46bd      	mov	sp, r7
 8010170:	bd80      	pop	{r7, pc}

08010172 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8010172:	b580      	push	{r7, lr}
 8010174:	b084      	sub	sp, #16
 8010176:	af00      	add	r7, sp, #0
 8010178:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801017e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010184:	687a      	ldr	r2, [r7, #4]
 8010186:	429a      	cmp	r2, r3
 8010188:	d10b      	bne.n	80101a2 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	2201      	movs	r2, #1
 801018e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	69db      	ldr	r3, [r3, #28]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d136      	bne.n	8010206 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	2201      	movs	r2, #1
 801019c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80101a0:	e031      	b.n	8010206 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101a6:	687a      	ldr	r2, [r7, #4]
 80101a8:	429a      	cmp	r2, r3
 80101aa:	d10b      	bne.n	80101c4 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	2202      	movs	r2, #2
 80101b0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	69db      	ldr	r3, [r3, #28]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d125      	bne.n	8010206 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	2201      	movs	r2, #1
 80101be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80101c2:	e020      	b.n	8010206 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101c8:	687a      	ldr	r2, [r7, #4]
 80101ca:	429a      	cmp	r2, r3
 80101cc:	d10b      	bne.n	80101e6 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	2204      	movs	r2, #4
 80101d2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	69db      	ldr	r3, [r3, #28]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d114      	bne.n	8010206 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	2201      	movs	r2, #1
 80101e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80101e4:	e00f      	b.n	8010206 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101ea:	687a      	ldr	r2, [r7, #4]
 80101ec:	429a      	cmp	r2, r3
 80101ee:	d10a      	bne.n	8010206 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	2208      	movs	r2, #8
 80101f4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	69db      	ldr	r3, [r3, #28]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d103      	bne.n	8010206 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	2201      	movs	r2, #1
 8010202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010206:	68f8      	ldr	r0, [r7, #12]
 8010208:	f7ff ff42 	bl	8010090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	2200      	movs	r2, #0
 8010210:	771a      	strb	r2, [r3, #28]
}
 8010212:	bf00      	nop
 8010214:	3710      	adds	r7, #16
 8010216:	46bd      	mov	sp, r7
 8010218:	bd80      	pop	{r7, pc}

0801021a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 801021a:	b580      	push	{r7, lr}
 801021c:	b084      	sub	sp, #16
 801021e:	af00      	add	r7, sp, #0
 8010220:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010226:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801022c:	687a      	ldr	r2, [r7, #4]
 801022e:	429a      	cmp	r2, r3
 8010230:	d103      	bne.n	801023a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	2201      	movs	r2, #1
 8010236:	771a      	strb	r2, [r3, #28]
 8010238:	e019      	b.n	801026e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801023e:	687a      	ldr	r2, [r7, #4]
 8010240:	429a      	cmp	r2, r3
 8010242:	d103      	bne.n	801024c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	2202      	movs	r2, #2
 8010248:	771a      	strb	r2, [r3, #28]
 801024a:	e010      	b.n	801026e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010250:	687a      	ldr	r2, [r7, #4]
 8010252:	429a      	cmp	r2, r3
 8010254:	d103      	bne.n	801025e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	2204      	movs	r2, #4
 801025a:	771a      	strb	r2, [r3, #28]
 801025c:	e007      	b.n	801026e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010262:	687a      	ldr	r2, [r7, #4]
 8010264:	429a      	cmp	r2, r3
 8010266:	d102      	bne.n	801026e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	2208      	movs	r2, #8
 801026c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 801026e:	68f8      	ldr	r0, [r7, #12]
 8010270:	f7ff ff18 	bl	80100a4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	2200      	movs	r2, #0
 8010278:	771a      	strb	r2, [r3, #28]
}
 801027a:	bf00      	nop
 801027c:	3710      	adds	r7, #16
 801027e:	46bd      	mov	sp, r7
 8010280:	bd80      	pop	{r7, pc}
	...

08010284 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010284:	b480      	push	{r7}
 8010286:	b085      	sub	sp, #20
 8010288:	af00      	add	r7, sp, #0
 801028a:	6078      	str	r0, [r7, #4]
 801028c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	4a44      	ldr	r2, [pc, #272]	; (80103a8 <TIM_Base_SetConfig+0x124>)
 8010298:	4293      	cmp	r3, r2
 801029a:	d013      	beq.n	80102c4 <TIM_Base_SetConfig+0x40>
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80102a2:	d00f      	beq.n	80102c4 <TIM_Base_SetConfig+0x40>
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	4a41      	ldr	r2, [pc, #260]	; (80103ac <TIM_Base_SetConfig+0x128>)
 80102a8:	4293      	cmp	r3, r2
 80102aa:	d00b      	beq.n	80102c4 <TIM_Base_SetConfig+0x40>
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	4a40      	ldr	r2, [pc, #256]	; (80103b0 <TIM_Base_SetConfig+0x12c>)
 80102b0:	4293      	cmp	r3, r2
 80102b2:	d007      	beq.n	80102c4 <TIM_Base_SetConfig+0x40>
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	4a3f      	ldr	r2, [pc, #252]	; (80103b4 <TIM_Base_SetConfig+0x130>)
 80102b8:	4293      	cmp	r3, r2
 80102ba:	d003      	beq.n	80102c4 <TIM_Base_SetConfig+0x40>
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	4a3e      	ldr	r2, [pc, #248]	; (80103b8 <TIM_Base_SetConfig+0x134>)
 80102c0:	4293      	cmp	r3, r2
 80102c2:	d108      	bne.n	80102d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80102ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80102cc:	683b      	ldr	r3, [r7, #0]
 80102ce:	685b      	ldr	r3, [r3, #4]
 80102d0:	68fa      	ldr	r2, [r7, #12]
 80102d2:	4313      	orrs	r3, r2
 80102d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	4a33      	ldr	r2, [pc, #204]	; (80103a8 <TIM_Base_SetConfig+0x124>)
 80102da:	4293      	cmp	r3, r2
 80102dc:	d027      	beq.n	801032e <TIM_Base_SetConfig+0xaa>
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80102e4:	d023      	beq.n	801032e <TIM_Base_SetConfig+0xaa>
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	4a30      	ldr	r2, [pc, #192]	; (80103ac <TIM_Base_SetConfig+0x128>)
 80102ea:	4293      	cmp	r3, r2
 80102ec:	d01f      	beq.n	801032e <TIM_Base_SetConfig+0xaa>
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	4a2f      	ldr	r2, [pc, #188]	; (80103b0 <TIM_Base_SetConfig+0x12c>)
 80102f2:	4293      	cmp	r3, r2
 80102f4:	d01b      	beq.n	801032e <TIM_Base_SetConfig+0xaa>
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	4a2e      	ldr	r2, [pc, #184]	; (80103b4 <TIM_Base_SetConfig+0x130>)
 80102fa:	4293      	cmp	r3, r2
 80102fc:	d017      	beq.n	801032e <TIM_Base_SetConfig+0xaa>
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	4a2d      	ldr	r2, [pc, #180]	; (80103b8 <TIM_Base_SetConfig+0x134>)
 8010302:	4293      	cmp	r3, r2
 8010304:	d013      	beq.n	801032e <TIM_Base_SetConfig+0xaa>
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	4a2c      	ldr	r2, [pc, #176]	; (80103bc <TIM_Base_SetConfig+0x138>)
 801030a:	4293      	cmp	r3, r2
 801030c:	d00f      	beq.n	801032e <TIM_Base_SetConfig+0xaa>
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	4a2b      	ldr	r2, [pc, #172]	; (80103c0 <TIM_Base_SetConfig+0x13c>)
 8010312:	4293      	cmp	r3, r2
 8010314:	d00b      	beq.n	801032e <TIM_Base_SetConfig+0xaa>
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	4a2a      	ldr	r2, [pc, #168]	; (80103c4 <TIM_Base_SetConfig+0x140>)
 801031a:	4293      	cmp	r3, r2
 801031c:	d007      	beq.n	801032e <TIM_Base_SetConfig+0xaa>
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	4a29      	ldr	r2, [pc, #164]	; (80103c8 <TIM_Base_SetConfig+0x144>)
 8010322:	4293      	cmp	r3, r2
 8010324:	d003      	beq.n	801032e <TIM_Base_SetConfig+0xaa>
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	4a28      	ldr	r2, [pc, #160]	; (80103cc <TIM_Base_SetConfig+0x148>)
 801032a:	4293      	cmp	r3, r2
 801032c:	d108      	bne.n	8010340 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010334:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010336:	683b      	ldr	r3, [r7, #0]
 8010338:	68db      	ldr	r3, [r3, #12]
 801033a:	68fa      	ldr	r2, [r7, #12]
 801033c:	4313      	orrs	r3, r2
 801033e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010346:	683b      	ldr	r3, [r7, #0]
 8010348:	695b      	ldr	r3, [r3, #20]
 801034a:	4313      	orrs	r3, r2
 801034c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	68fa      	ldr	r2, [r7, #12]
 8010352:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010354:	683b      	ldr	r3, [r7, #0]
 8010356:	689a      	ldr	r2, [r3, #8]
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801035c:	683b      	ldr	r3, [r7, #0]
 801035e:	681a      	ldr	r2, [r3, #0]
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	4a10      	ldr	r2, [pc, #64]	; (80103a8 <TIM_Base_SetConfig+0x124>)
 8010368:	4293      	cmp	r3, r2
 801036a:	d00f      	beq.n	801038c <TIM_Base_SetConfig+0x108>
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	4a12      	ldr	r2, [pc, #72]	; (80103b8 <TIM_Base_SetConfig+0x134>)
 8010370:	4293      	cmp	r3, r2
 8010372:	d00b      	beq.n	801038c <TIM_Base_SetConfig+0x108>
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	4a11      	ldr	r2, [pc, #68]	; (80103bc <TIM_Base_SetConfig+0x138>)
 8010378:	4293      	cmp	r3, r2
 801037a:	d007      	beq.n	801038c <TIM_Base_SetConfig+0x108>
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	4a10      	ldr	r2, [pc, #64]	; (80103c0 <TIM_Base_SetConfig+0x13c>)
 8010380:	4293      	cmp	r3, r2
 8010382:	d003      	beq.n	801038c <TIM_Base_SetConfig+0x108>
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	4a0f      	ldr	r2, [pc, #60]	; (80103c4 <TIM_Base_SetConfig+0x140>)
 8010388:	4293      	cmp	r3, r2
 801038a:	d103      	bne.n	8010394 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801038c:	683b      	ldr	r3, [r7, #0]
 801038e:	691a      	ldr	r2, [r3, #16]
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	2201      	movs	r2, #1
 8010398:	615a      	str	r2, [r3, #20]
}
 801039a:	bf00      	nop
 801039c:	3714      	adds	r7, #20
 801039e:	46bd      	mov	sp, r7
 80103a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a4:	4770      	bx	lr
 80103a6:	bf00      	nop
 80103a8:	40010000 	.word	0x40010000
 80103ac:	40000400 	.word	0x40000400
 80103b0:	40000800 	.word	0x40000800
 80103b4:	40000c00 	.word	0x40000c00
 80103b8:	40010400 	.word	0x40010400
 80103bc:	40014000 	.word	0x40014000
 80103c0:	40014400 	.word	0x40014400
 80103c4:	40014800 	.word	0x40014800
 80103c8:	4000e000 	.word	0x4000e000
 80103cc:	4000e400 	.word	0x4000e400

080103d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80103d0:	b480      	push	{r7}
 80103d2:	b087      	sub	sp, #28
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	6078      	str	r0, [r7, #4]
 80103d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	6a1b      	ldr	r3, [r3, #32]
 80103de:	f023 0201 	bic.w	r2, r3, #1
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	6a1b      	ldr	r3, [r3, #32]
 80103ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	685b      	ldr	r3, [r3, #4]
 80103f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	699b      	ldr	r3, [r3, #24]
 80103f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80103f8:	68fa      	ldr	r2, [r7, #12]
 80103fa:	4b37      	ldr	r3, [pc, #220]	; (80104d8 <TIM_OC1_SetConfig+0x108>)
 80103fc:	4013      	ands	r3, r2
 80103fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	f023 0303 	bic.w	r3, r3, #3
 8010406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010408:	683b      	ldr	r3, [r7, #0]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	68fa      	ldr	r2, [r7, #12]
 801040e:	4313      	orrs	r3, r2
 8010410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010412:	697b      	ldr	r3, [r7, #20]
 8010414:	f023 0302 	bic.w	r3, r3, #2
 8010418:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801041a:	683b      	ldr	r3, [r7, #0]
 801041c:	689b      	ldr	r3, [r3, #8]
 801041e:	697a      	ldr	r2, [r7, #20]
 8010420:	4313      	orrs	r3, r2
 8010422:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	4a2d      	ldr	r2, [pc, #180]	; (80104dc <TIM_OC1_SetConfig+0x10c>)
 8010428:	4293      	cmp	r3, r2
 801042a:	d00f      	beq.n	801044c <TIM_OC1_SetConfig+0x7c>
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	4a2c      	ldr	r2, [pc, #176]	; (80104e0 <TIM_OC1_SetConfig+0x110>)
 8010430:	4293      	cmp	r3, r2
 8010432:	d00b      	beq.n	801044c <TIM_OC1_SetConfig+0x7c>
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	4a2b      	ldr	r2, [pc, #172]	; (80104e4 <TIM_OC1_SetConfig+0x114>)
 8010438:	4293      	cmp	r3, r2
 801043a:	d007      	beq.n	801044c <TIM_OC1_SetConfig+0x7c>
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	4a2a      	ldr	r2, [pc, #168]	; (80104e8 <TIM_OC1_SetConfig+0x118>)
 8010440:	4293      	cmp	r3, r2
 8010442:	d003      	beq.n	801044c <TIM_OC1_SetConfig+0x7c>
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	4a29      	ldr	r2, [pc, #164]	; (80104ec <TIM_OC1_SetConfig+0x11c>)
 8010448:	4293      	cmp	r3, r2
 801044a:	d10c      	bne.n	8010466 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801044c:	697b      	ldr	r3, [r7, #20]
 801044e:	f023 0308 	bic.w	r3, r3, #8
 8010452:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010454:	683b      	ldr	r3, [r7, #0]
 8010456:	68db      	ldr	r3, [r3, #12]
 8010458:	697a      	ldr	r2, [r7, #20]
 801045a:	4313      	orrs	r3, r2
 801045c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801045e:	697b      	ldr	r3, [r7, #20]
 8010460:	f023 0304 	bic.w	r3, r3, #4
 8010464:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	4a1c      	ldr	r2, [pc, #112]	; (80104dc <TIM_OC1_SetConfig+0x10c>)
 801046a:	4293      	cmp	r3, r2
 801046c:	d00f      	beq.n	801048e <TIM_OC1_SetConfig+0xbe>
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	4a1b      	ldr	r2, [pc, #108]	; (80104e0 <TIM_OC1_SetConfig+0x110>)
 8010472:	4293      	cmp	r3, r2
 8010474:	d00b      	beq.n	801048e <TIM_OC1_SetConfig+0xbe>
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	4a1a      	ldr	r2, [pc, #104]	; (80104e4 <TIM_OC1_SetConfig+0x114>)
 801047a:	4293      	cmp	r3, r2
 801047c:	d007      	beq.n	801048e <TIM_OC1_SetConfig+0xbe>
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	4a19      	ldr	r2, [pc, #100]	; (80104e8 <TIM_OC1_SetConfig+0x118>)
 8010482:	4293      	cmp	r3, r2
 8010484:	d003      	beq.n	801048e <TIM_OC1_SetConfig+0xbe>
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	4a18      	ldr	r2, [pc, #96]	; (80104ec <TIM_OC1_SetConfig+0x11c>)
 801048a:	4293      	cmp	r3, r2
 801048c:	d111      	bne.n	80104b2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801048e:	693b      	ldr	r3, [r7, #16]
 8010490:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010494:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010496:	693b      	ldr	r3, [r7, #16]
 8010498:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801049c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801049e:	683b      	ldr	r3, [r7, #0]
 80104a0:	695b      	ldr	r3, [r3, #20]
 80104a2:	693a      	ldr	r2, [r7, #16]
 80104a4:	4313      	orrs	r3, r2
 80104a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80104a8:	683b      	ldr	r3, [r7, #0]
 80104aa:	699b      	ldr	r3, [r3, #24]
 80104ac:	693a      	ldr	r2, [r7, #16]
 80104ae:	4313      	orrs	r3, r2
 80104b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	693a      	ldr	r2, [r7, #16]
 80104b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	68fa      	ldr	r2, [r7, #12]
 80104bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80104be:	683b      	ldr	r3, [r7, #0]
 80104c0:	685a      	ldr	r2, [r3, #4]
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	697a      	ldr	r2, [r7, #20]
 80104ca:	621a      	str	r2, [r3, #32]
}
 80104cc:	bf00      	nop
 80104ce:	371c      	adds	r7, #28
 80104d0:	46bd      	mov	sp, r7
 80104d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d6:	4770      	bx	lr
 80104d8:	fffeff8f 	.word	0xfffeff8f
 80104dc:	40010000 	.word	0x40010000
 80104e0:	40010400 	.word	0x40010400
 80104e4:	40014000 	.word	0x40014000
 80104e8:	40014400 	.word	0x40014400
 80104ec:	40014800 	.word	0x40014800

080104f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80104f0:	b480      	push	{r7}
 80104f2:	b087      	sub	sp, #28
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
 80104f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	6a1b      	ldr	r3, [r3, #32]
 80104fe:	f023 0210 	bic.w	r2, r3, #16
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	6a1b      	ldr	r3, [r3, #32]
 801050a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	685b      	ldr	r3, [r3, #4]
 8010510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	699b      	ldr	r3, [r3, #24]
 8010516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010518:	68fa      	ldr	r2, [r7, #12]
 801051a:	4b34      	ldr	r3, [pc, #208]	; (80105ec <TIM_OC2_SetConfig+0xfc>)
 801051c:	4013      	ands	r3, r2
 801051e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010526:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010528:	683b      	ldr	r3, [r7, #0]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	021b      	lsls	r3, r3, #8
 801052e:	68fa      	ldr	r2, [r7, #12]
 8010530:	4313      	orrs	r3, r2
 8010532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010534:	697b      	ldr	r3, [r7, #20]
 8010536:	f023 0320 	bic.w	r3, r3, #32
 801053a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801053c:	683b      	ldr	r3, [r7, #0]
 801053e:	689b      	ldr	r3, [r3, #8]
 8010540:	011b      	lsls	r3, r3, #4
 8010542:	697a      	ldr	r2, [r7, #20]
 8010544:	4313      	orrs	r3, r2
 8010546:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	4a29      	ldr	r2, [pc, #164]	; (80105f0 <TIM_OC2_SetConfig+0x100>)
 801054c:	4293      	cmp	r3, r2
 801054e:	d003      	beq.n	8010558 <TIM_OC2_SetConfig+0x68>
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	4a28      	ldr	r2, [pc, #160]	; (80105f4 <TIM_OC2_SetConfig+0x104>)
 8010554:	4293      	cmp	r3, r2
 8010556:	d10d      	bne.n	8010574 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010558:	697b      	ldr	r3, [r7, #20]
 801055a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801055e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010560:	683b      	ldr	r3, [r7, #0]
 8010562:	68db      	ldr	r3, [r3, #12]
 8010564:	011b      	lsls	r3, r3, #4
 8010566:	697a      	ldr	r2, [r7, #20]
 8010568:	4313      	orrs	r3, r2
 801056a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801056c:	697b      	ldr	r3, [r7, #20]
 801056e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010572:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	4a1e      	ldr	r2, [pc, #120]	; (80105f0 <TIM_OC2_SetConfig+0x100>)
 8010578:	4293      	cmp	r3, r2
 801057a:	d00f      	beq.n	801059c <TIM_OC2_SetConfig+0xac>
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	4a1d      	ldr	r2, [pc, #116]	; (80105f4 <TIM_OC2_SetConfig+0x104>)
 8010580:	4293      	cmp	r3, r2
 8010582:	d00b      	beq.n	801059c <TIM_OC2_SetConfig+0xac>
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	4a1c      	ldr	r2, [pc, #112]	; (80105f8 <TIM_OC2_SetConfig+0x108>)
 8010588:	4293      	cmp	r3, r2
 801058a:	d007      	beq.n	801059c <TIM_OC2_SetConfig+0xac>
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	4a1b      	ldr	r2, [pc, #108]	; (80105fc <TIM_OC2_SetConfig+0x10c>)
 8010590:	4293      	cmp	r3, r2
 8010592:	d003      	beq.n	801059c <TIM_OC2_SetConfig+0xac>
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	4a1a      	ldr	r2, [pc, #104]	; (8010600 <TIM_OC2_SetConfig+0x110>)
 8010598:	4293      	cmp	r3, r2
 801059a:	d113      	bne.n	80105c4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801059c:	693b      	ldr	r3, [r7, #16]
 801059e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80105a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80105a4:	693b      	ldr	r3, [r7, #16]
 80105a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80105aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80105ac:	683b      	ldr	r3, [r7, #0]
 80105ae:	695b      	ldr	r3, [r3, #20]
 80105b0:	009b      	lsls	r3, r3, #2
 80105b2:	693a      	ldr	r2, [r7, #16]
 80105b4:	4313      	orrs	r3, r2
 80105b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80105b8:	683b      	ldr	r3, [r7, #0]
 80105ba:	699b      	ldr	r3, [r3, #24]
 80105bc:	009b      	lsls	r3, r3, #2
 80105be:	693a      	ldr	r2, [r7, #16]
 80105c0:	4313      	orrs	r3, r2
 80105c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	693a      	ldr	r2, [r7, #16]
 80105c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	68fa      	ldr	r2, [r7, #12]
 80105ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80105d0:	683b      	ldr	r3, [r7, #0]
 80105d2:	685a      	ldr	r2, [r3, #4]
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	697a      	ldr	r2, [r7, #20]
 80105dc:	621a      	str	r2, [r3, #32]
}
 80105de:	bf00      	nop
 80105e0:	371c      	adds	r7, #28
 80105e2:	46bd      	mov	sp, r7
 80105e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e8:	4770      	bx	lr
 80105ea:	bf00      	nop
 80105ec:	feff8fff 	.word	0xfeff8fff
 80105f0:	40010000 	.word	0x40010000
 80105f4:	40010400 	.word	0x40010400
 80105f8:	40014000 	.word	0x40014000
 80105fc:	40014400 	.word	0x40014400
 8010600:	40014800 	.word	0x40014800

08010604 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010604:	b480      	push	{r7}
 8010606:	b087      	sub	sp, #28
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]
 801060c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	6a1b      	ldr	r3, [r3, #32]
 8010612:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	6a1b      	ldr	r3, [r3, #32]
 801061e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	685b      	ldr	r3, [r3, #4]
 8010624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	69db      	ldr	r3, [r3, #28]
 801062a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801062c:	68fa      	ldr	r2, [r7, #12]
 801062e:	4b33      	ldr	r3, [pc, #204]	; (80106fc <TIM_OC3_SetConfig+0xf8>)
 8010630:	4013      	ands	r3, r2
 8010632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	f023 0303 	bic.w	r3, r3, #3
 801063a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801063c:	683b      	ldr	r3, [r7, #0]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	68fa      	ldr	r2, [r7, #12]
 8010642:	4313      	orrs	r3, r2
 8010644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010646:	697b      	ldr	r3, [r7, #20]
 8010648:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801064c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801064e:	683b      	ldr	r3, [r7, #0]
 8010650:	689b      	ldr	r3, [r3, #8]
 8010652:	021b      	lsls	r3, r3, #8
 8010654:	697a      	ldr	r2, [r7, #20]
 8010656:	4313      	orrs	r3, r2
 8010658:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	4a28      	ldr	r2, [pc, #160]	; (8010700 <TIM_OC3_SetConfig+0xfc>)
 801065e:	4293      	cmp	r3, r2
 8010660:	d003      	beq.n	801066a <TIM_OC3_SetConfig+0x66>
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	4a27      	ldr	r2, [pc, #156]	; (8010704 <TIM_OC3_SetConfig+0x100>)
 8010666:	4293      	cmp	r3, r2
 8010668:	d10d      	bne.n	8010686 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801066a:	697b      	ldr	r3, [r7, #20]
 801066c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010670:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010672:	683b      	ldr	r3, [r7, #0]
 8010674:	68db      	ldr	r3, [r3, #12]
 8010676:	021b      	lsls	r3, r3, #8
 8010678:	697a      	ldr	r2, [r7, #20]
 801067a:	4313      	orrs	r3, r2
 801067c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801067e:	697b      	ldr	r3, [r7, #20]
 8010680:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010684:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	4a1d      	ldr	r2, [pc, #116]	; (8010700 <TIM_OC3_SetConfig+0xfc>)
 801068a:	4293      	cmp	r3, r2
 801068c:	d00f      	beq.n	80106ae <TIM_OC3_SetConfig+0xaa>
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	4a1c      	ldr	r2, [pc, #112]	; (8010704 <TIM_OC3_SetConfig+0x100>)
 8010692:	4293      	cmp	r3, r2
 8010694:	d00b      	beq.n	80106ae <TIM_OC3_SetConfig+0xaa>
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	4a1b      	ldr	r2, [pc, #108]	; (8010708 <TIM_OC3_SetConfig+0x104>)
 801069a:	4293      	cmp	r3, r2
 801069c:	d007      	beq.n	80106ae <TIM_OC3_SetConfig+0xaa>
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	4a1a      	ldr	r2, [pc, #104]	; (801070c <TIM_OC3_SetConfig+0x108>)
 80106a2:	4293      	cmp	r3, r2
 80106a4:	d003      	beq.n	80106ae <TIM_OC3_SetConfig+0xaa>
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	4a19      	ldr	r2, [pc, #100]	; (8010710 <TIM_OC3_SetConfig+0x10c>)
 80106aa:	4293      	cmp	r3, r2
 80106ac:	d113      	bne.n	80106d6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80106ae:	693b      	ldr	r3, [r7, #16]
 80106b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80106b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80106b6:	693b      	ldr	r3, [r7, #16]
 80106b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80106bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80106be:	683b      	ldr	r3, [r7, #0]
 80106c0:	695b      	ldr	r3, [r3, #20]
 80106c2:	011b      	lsls	r3, r3, #4
 80106c4:	693a      	ldr	r2, [r7, #16]
 80106c6:	4313      	orrs	r3, r2
 80106c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80106ca:	683b      	ldr	r3, [r7, #0]
 80106cc:	699b      	ldr	r3, [r3, #24]
 80106ce:	011b      	lsls	r3, r3, #4
 80106d0:	693a      	ldr	r2, [r7, #16]
 80106d2:	4313      	orrs	r3, r2
 80106d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	693a      	ldr	r2, [r7, #16]
 80106da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	68fa      	ldr	r2, [r7, #12]
 80106e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80106e2:	683b      	ldr	r3, [r7, #0]
 80106e4:	685a      	ldr	r2, [r3, #4]
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	697a      	ldr	r2, [r7, #20]
 80106ee:	621a      	str	r2, [r3, #32]
}
 80106f0:	bf00      	nop
 80106f2:	371c      	adds	r7, #28
 80106f4:	46bd      	mov	sp, r7
 80106f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fa:	4770      	bx	lr
 80106fc:	fffeff8f 	.word	0xfffeff8f
 8010700:	40010000 	.word	0x40010000
 8010704:	40010400 	.word	0x40010400
 8010708:	40014000 	.word	0x40014000
 801070c:	40014400 	.word	0x40014400
 8010710:	40014800 	.word	0x40014800

08010714 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010714:	b480      	push	{r7}
 8010716:	b087      	sub	sp, #28
 8010718:	af00      	add	r7, sp, #0
 801071a:	6078      	str	r0, [r7, #4]
 801071c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	6a1b      	ldr	r3, [r3, #32]
 8010722:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	6a1b      	ldr	r3, [r3, #32]
 801072e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	685b      	ldr	r3, [r3, #4]
 8010734:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	69db      	ldr	r3, [r3, #28]
 801073a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801073c:	68fa      	ldr	r2, [r7, #12]
 801073e:	4b24      	ldr	r3, [pc, #144]	; (80107d0 <TIM_OC4_SetConfig+0xbc>)
 8010740:	4013      	ands	r3, r2
 8010742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801074a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801074c:	683b      	ldr	r3, [r7, #0]
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	021b      	lsls	r3, r3, #8
 8010752:	68fa      	ldr	r2, [r7, #12]
 8010754:	4313      	orrs	r3, r2
 8010756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010758:	693b      	ldr	r3, [r7, #16]
 801075a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801075e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010760:	683b      	ldr	r3, [r7, #0]
 8010762:	689b      	ldr	r3, [r3, #8]
 8010764:	031b      	lsls	r3, r3, #12
 8010766:	693a      	ldr	r2, [r7, #16]
 8010768:	4313      	orrs	r3, r2
 801076a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	4a19      	ldr	r2, [pc, #100]	; (80107d4 <TIM_OC4_SetConfig+0xc0>)
 8010770:	4293      	cmp	r3, r2
 8010772:	d00f      	beq.n	8010794 <TIM_OC4_SetConfig+0x80>
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	4a18      	ldr	r2, [pc, #96]	; (80107d8 <TIM_OC4_SetConfig+0xc4>)
 8010778:	4293      	cmp	r3, r2
 801077a:	d00b      	beq.n	8010794 <TIM_OC4_SetConfig+0x80>
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	4a17      	ldr	r2, [pc, #92]	; (80107dc <TIM_OC4_SetConfig+0xc8>)
 8010780:	4293      	cmp	r3, r2
 8010782:	d007      	beq.n	8010794 <TIM_OC4_SetConfig+0x80>
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	4a16      	ldr	r2, [pc, #88]	; (80107e0 <TIM_OC4_SetConfig+0xcc>)
 8010788:	4293      	cmp	r3, r2
 801078a:	d003      	beq.n	8010794 <TIM_OC4_SetConfig+0x80>
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	4a15      	ldr	r2, [pc, #84]	; (80107e4 <TIM_OC4_SetConfig+0xd0>)
 8010790:	4293      	cmp	r3, r2
 8010792:	d109      	bne.n	80107a8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010794:	697b      	ldr	r3, [r7, #20]
 8010796:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801079a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801079c:	683b      	ldr	r3, [r7, #0]
 801079e:	695b      	ldr	r3, [r3, #20]
 80107a0:	019b      	lsls	r3, r3, #6
 80107a2:	697a      	ldr	r2, [r7, #20]
 80107a4:	4313      	orrs	r3, r2
 80107a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	697a      	ldr	r2, [r7, #20]
 80107ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	68fa      	ldr	r2, [r7, #12]
 80107b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80107b4:	683b      	ldr	r3, [r7, #0]
 80107b6:	685a      	ldr	r2, [r3, #4]
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	693a      	ldr	r2, [r7, #16]
 80107c0:	621a      	str	r2, [r3, #32]
}
 80107c2:	bf00      	nop
 80107c4:	371c      	adds	r7, #28
 80107c6:	46bd      	mov	sp, r7
 80107c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107cc:	4770      	bx	lr
 80107ce:	bf00      	nop
 80107d0:	feff8fff 	.word	0xfeff8fff
 80107d4:	40010000 	.word	0x40010000
 80107d8:	40010400 	.word	0x40010400
 80107dc:	40014000 	.word	0x40014000
 80107e0:	40014400 	.word	0x40014400
 80107e4:	40014800 	.word	0x40014800

080107e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80107e8:	b480      	push	{r7}
 80107ea:	b087      	sub	sp, #28
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
 80107f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	6a1b      	ldr	r3, [r3, #32]
 80107f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	6a1b      	ldr	r3, [r3, #32]
 8010802:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	685b      	ldr	r3, [r3, #4]
 8010808:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801080e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010810:	68fa      	ldr	r2, [r7, #12]
 8010812:	4b21      	ldr	r3, [pc, #132]	; (8010898 <TIM_OC5_SetConfig+0xb0>)
 8010814:	4013      	ands	r3, r2
 8010816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010818:	683b      	ldr	r3, [r7, #0]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	68fa      	ldr	r2, [r7, #12]
 801081e:	4313      	orrs	r3, r2
 8010820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010822:	693b      	ldr	r3, [r7, #16]
 8010824:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010828:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801082a:	683b      	ldr	r3, [r7, #0]
 801082c:	689b      	ldr	r3, [r3, #8]
 801082e:	041b      	lsls	r3, r3, #16
 8010830:	693a      	ldr	r2, [r7, #16]
 8010832:	4313      	orrs	r3, r2
 8010834:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	4a18      	ldr	r2, [pc, #96]	; (801089c <TIM_OC5_SetConfig+0xb4>)
 801083a:	4293      	cmp	r3, r2
 801083c:	d00f      	beq.n	801085e <TIM_OC5_SetConfig+0x76>
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	4a17      	ldr	r2, [pc, #92]	; (80108a0 <TIM_OC5_SetConfig+0xb8>)
 8010842:	4293      	cmp	r3, r2
 8010844:	d00b      	beq.n	801085e <TIM_OC5_SetConfig+0x76>
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	4a16      	ldr	r2, [pc, #88]	; (80108a4 <TIM_OC5_SetConfig+0xbc>)
 801084a:	4293      	cmp	r3, r2
 801084c:	d007      	beq.n	801085e <TIM_OC5_SetConfig+0x76>
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	4a15      	ldr	r2, [pc, #84]	; (80108a8 <TIM_OC5_SetConfig+0xc0>)
 8010852:	4293      	cmp	r3, r2
 8010854:	d003      	beq.n	801085e <TIM_OC5_SetConfig+0x76>
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	4a14      	ldr	r2, [pc, #80]	; (80108ac <TIM_OC5_SetConfig+0xc4>)
 801085a:	4293      	cmp	r3, r2
 801085c:	d109      	bne.n	8010872 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801085e:	697b      	ldr	r3, [r7, #20]
 8010860:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010864:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8010866:	683b      	ldr	r3, [r7, #0]
 8010868:	695b      	ldr	r3, [r3, #20]
 801086a:	021b      	lsls	r3, r3, #8
 801086c:	697a      	ldr	r2, [r7, #20]
 801086e:	4313      	orrs	r3, r2
 8010870:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	697a      	ldr	r2, [r7, #20]
 8010876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	68fa      	ldr	r2, [r7, #12]
 801087c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801087e:	683b      	ldr	r3, [r7, #0]
 8010880:	685a      	ldr	r2, [r3, #4]
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	693a      	ldr	r2, [r7, #16]
 801088a:	621a      	str	r2, [r3, #32]
}
 801088c:	bf00      	nop
 801088e:	371c      	adds	r7, #28
 8010890:	46bd      	mov	sp, r7
 8010892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010896:	4770      	bx	lr
 8010898:	fffeff8f 	.word	0xfffeff8f
 801089c:	40010000 	.word	0x40010000
 80108a0:	40010400 	.word	0x40010400
 80108a4:	40014000 	.word	0x40014000
 80108a8:	40014400 	.word	0x40014400
 80108ac:	40014800 	.word	0x40014800

080108b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80108b0:	b480      	push	{r7}
 80108b2:	b087      	sub	sp, #28
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	6078      	str	r0, [r7, #4]
 80108b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	6a1b      	ldr	r3, [r3, #32]
 80108be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	6a1b      	ldr	r3, [r3, #32]
 80108ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	685b      	ldr	r3, [r3, #4]
 80108d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80108d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80108d8:	68fa      	ldr	r2, [r7, #12]
 80108da:	4b22      	ldr	r3, [pc, #136]	; (8010964 <TIM_OC6_SetConfig+0xb4>)
 80108dc:	4013      	ands	r3, r2
 80108de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80108e0:	683b      	ldr	r3, [r7, #0]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	021b      	lsls	r3, r3, #8
 80108e6:	68fa      	ldr	r2, [r7, #12]
 80108e8:	4313      	orrs	r3, r2
 80108ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80108ec:	693b      	ldr	r3, [r7, #16]
 80108ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80108f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80108f4:	683b      	ldr	r3, [r7, #0]
 80108f6:	689b      	ldr	r3, [r3, #8]
 80108f8:	051b      	lsls	r3, r3, #20
 80108fa:	693a      	ldr	r2, [r7, #16]
 80108fc:	4313      	orrs	r3, r2
 80108fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	4a19      	ldr	r2, [pc, #100]	; (8010968 <TIM_OC6_SetConfig+0xb8>)
 8010904:	4293      	cmp	r3, r2
 8010906:	d00f      	beq.n	8010928 <TIM_OC6_SetConfig+0x78>
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	4a18      	ldr	r2, [pc, #96]	; (801096c <TIM_OC6_SetConfig+0xbc>)
 801090c:	4293      	cmp	r3, r2
 801090e:	d00b      	beq.n	8010928 <TIM_OC6_SetConfig+0x78>
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	4a17      	ldr	r2, [pc, #92]	; (8010970 <TIM_OC6_SetConfig+0xc0>)
 8010914:	4293      	cmp	r3, r2
 8010916:	d007      	beq.n	8010928 <TIM_OC6_SetConfig+0x78>
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	4a16      	ldr	r2, [pc, #88]	; (8010974 <TIM_OC6_SetConfig+0xc4>)
 801091c:	4293      	cmp	r3, r2
 801091e:	d003      	beq.n	8010928 <TIM_OC6_SetConfig+0x78>
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	4a15      	ldr	r2, [pc, #84]	; (8010978 <TIM_OC6_SetConfig+0xc8>)
 8010924:	4293      	cmp	r3, r2
 8010926:	d109      	bne.n	801093c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010928:	697b      	ldr	r3, [r7, #20]
 801092a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801092e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010930:	683b      	ldr	r3, [r7, #0]
 8010932:	695b      	ldr	r3, [r3, #20]
 8010934:	029b      	lsls	r3, r3, #10
 8010936:	697a      	ldr	r2, [r7, #20]
 8010938:	4313      	orrs	r3, r2
 801093a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	697a      	ldr	r2, [r7, #20]
 8010940:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	68fa      	ldr	r2, [r7, #12]
 8010946:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010948:	683b      	ldr	r3, [r7, #0]
 801094a:	685a      	ldr	r2, [r3, #4]
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	693a      	ldr	r2, [r7, #16]
 8010954:	621a      	str	r2, [r3, #32]
}
 8010956:	bf00      	nop
 8010958:	371c      	adds	r7, #28
 801095a:	46bd      	mov	sp, r7
 801095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010960:	4770      	bx	lr
 8010962:	bf00      	nop
 8010964:	feff8fff 	.word	0xfeff8fff
 8010968:	40010000 	.word	0x40010000
 801096c:	40010400 	.word	0x40010400
 8010970:	40014000 	.word	0x40014000
 8010974:	40014400 	.word	0x40014400
 8010978:	40014800 	.word	0x40014800

0801097c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801097c:	b480      	push	{r7}
 801097e:	b087      	sub	sp, #28
 8010980:	af00      	add	r7, sp, #0
 8010982:	60f8      	str	r0, [r7, #12]
 8010984:	60b9      	str	r1, [r7, #8]
 8010986:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010988:	68bb      	ldr	r3, [r7, #8]
 801098a:	f003 031f 	and.w	r3, r3, #31
 801098e:	2201      	movs	r2, #1
 8010990:	fa02 f303 	lsl.w	r3, r2, r3
 8010994:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	6a1a      	ldr	r2, [r3, #32]
 801099a:	697b      	ldr	r3, [r7, #20]
 801099c:	43db      	mvns	r3, r3
 801099e:	401a      	ands	r2, r3
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	6a1a      	ldr	r2, [r3, #32]
 80109a8:	68bb      	ldr	r3, [r7, #8]
 80109aa:	f003 031f 	and.w	r3, r3, #31
 80109ae:	6879      	ldr	r1, [r7, #4]
 80109b0:	fa01 f303 	lsl.w	r3, r1, r3
 80109b4:	431a      	orrs	r2, r3
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	621a      	str	r2, [r3, #32]
}
 80109ba:	bf00      	nop
 80109bc:	371c      	adds	r7, #28
 80109be:	46bd      	mov	sp, r7
 80109c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c4:	4770      	bx	lr
	...

080109c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80109c8:	b480      	push	{r7}
 80109ca:	b085      	sub	sp, #20
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
 80109d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80109d8:	2b01      	cmp	r3, #1
 80109da:	d101      	bne.n	80109e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80109dc:	2302      	movs	r3, #2
 80109de:	e077      	b.n	8010ad0 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	2201      	movs	r2, #1
 80109e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	2202      	movs	r2, #2
 80109ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	685b      	ldr	r3, [r3, #4]
 80109f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	689b      	ldr	r3, [r3, #8]
 80109fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	4a35      	ldr	r2, [pc, #212]	; (8010adc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010a06:	4293      	cmp	r3, r2
 8010a08:	d004      	beq.n	8010a14 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	4a34      	ldr	r2, [pc, #208]	; (8010ae0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010a10:	4293      	cmp	r3, r2
 8010a12:	d108      	bne.n	8010a26 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010a1a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010a1c:	683b      	ldr	r3, [r7, #0]
 8010a1e:	685b      	ldr	r3, [r3, #4]
 8010a20:	68fa      	ldr	r2, [r7, #12]
 8010a22:	4313      	orrs	r3, r2
 8010a24:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010a2c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010a2e:	683b      	ldr	r3, [r7, #0]
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	68fa      	ldr	r2, [r7, #12]
 8010a34:	4313      	orrs	r3, r2
 8010a36:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	68fa      	ldr	r2, [r7, #12]
 8010a3e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	681b      	ldr	r3, [r3, #0]
 8010a44:	4a25      	ldr	r2, [pc, #148]	; (8010adc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010a46:	4293      	cmp	r3, r2
 8010a48:	d02c      	beq.n	8010aa4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010a52:	d027      	beq.n	8010aa4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	4a22      	ldr	r2, [pc, #136]	; (8010ae4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8010a5a:	4293      	cmp	r3, r2
 8010a5c:	d022      	beq.n	8010aa4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	4a21      	ldr	r2, [pc, #132]	; (8010ae8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8010a64:	4293      	cmp	r3, r2
 8010a66:	d01d      	beq.n	8010aa4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	4a1f      	ldr	r2, [pc, #124]	; (8010aec <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8010a6e:	4293      	cmp	r3, r2
 8010a70:	d018      	beq.n	8010aa4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	4a1a      	ldr	r2, [pc, #104]	; (8010ae0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010a78:	4293      	cmp	r3, r2
 8010a7a:	d013      	beq.n	8010aa4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	4a1b      	ldr	r2, [pc, #108]	; (8010af0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8010a82:	4293      	cmp	r3, r2
 8010a84:	d00e      	beq.n	8010aa4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	4a1a      	ldr	r2, [pc, #104]	; (8010af4 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8010a8c:	4293      	cmp	r3, r2
 8010a8e:	d009      	beq.n	8010aa4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	4a18      	ldr	r2, [pc, #96]	; (8010af8 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8010a96:	4293      	cmp	r3, r2
 8010a98:	d004      	beq.n	8010aa4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	4a17      	ldr	r2, [pc, #92]	; (8010afc <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8010aa0:	4293      	cmp	r3, r2
 8010aa2:	d10c      	bne.n	8010abe <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010aa4:	68bb      	ldr	r3, [r7, #8]
 8010aa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010aaa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010aac:	683b      	ldr	r3, [r7, #0]
 8010aae:	689b      	ldr	r3, [r3, #8]
 8010ab0:	68ba      	ldr	r2, [r7, #8]
 8010ab2:	4313      	orrs	r3, r2
 8010ab4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	68ba      	ldr	r2, [r7, #8]
 8010abc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	2201      	movs	r2, #1
 8010ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	2200      	movs	r2, #0
 8010aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010ace:	2300      	movs	r3, #0
}
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	3714      	adds	r7, #20
 8010ad4:	46bd      	mov	sp, r7
 8010ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ada:	4770      	bx	lr
 8010adc:	40010000 	.word	0x40010000
 8010ae0:	40010400 	.word	0x40010400
 8010ae4:	40000400 	.word	0x40000400
 8010ae8:	40000800 	.word	0x40000800
 8010aec:	40000c00 	.word	0x40000c00
 8010af0:	40001800 	.word	0x40001800
 8010af4:	40014000 	.word	0x40014000
 8010af8:	4000e000 	.word	0x4000e000
 8010afc:	4000e400 	.word	0x4000e400

08010b00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010b00:	b480      	push	{r7}
 8010b02:	b083      	sub	sp, #12
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010b08:	bf00      	nop
 8010b0a:	370c      	adds	r7, #12
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b12:	4770      	bx	lr

08010b14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010b14:	b480      	push	{r7}
 8010b16:	b083      	sub	sp, #12
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010b1c:	bf00      	nop
 8010b1e:	370c      	adds	r7, #12
 8010b20:	46bd      	mov	sp, r7
 8010b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b26:	4770      	bx	lr

08010b28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010b28:	b480      	push	{r7}
 8010b2a:	b083      	sub	sp, #12
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010b30:	bf00      	nop
 8010b32:	370c      	adds	r7, #12
 8010b34:	46bd      	mov	sp, r7
 8010b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b3a:	4770      	bx	lr

08010b3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b082      	sub	sp, #8
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d101      	bne.n	8010b4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010b4a:	2301      	movs	r3, #1
 8010b4c:	e042      	b.n	8010bd4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d106      	bne.n	8010b66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	2200      	movs	r2, #0
 8010b5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010b60:	6878      	ldr	r0, [r7, #4]
 8010b62:	f7f2 fcc5 	bl	80034f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	2224      	movs	r2, #36	; 0x24
 8010b6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	681a      	ldr	r2, [r3, #0]
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	f022 0201 	bic.w	r2, r2, #1
 8010b7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010b7e:	6878      	ldr	r0, [r7, #4]
 8010b80:	f000 f82c 	bl	8010bdc <UART_SetConfig>
 8010b84:	4603      	mov	r3, r0
 8010b86:	2b01      	cmp	r3, #1
 8010b88:	d101      	bne.n	8010b8e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8010b8a:	2301      	movs	r3, #1
 8010b8c:	e022      	b.n	8010bd4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d002      	beq.n	8010b9c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8010b96:	6878      	ldr	r0, [r7, #4]
 8010b98:	f000 fe8c 	bl	80118b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	685a      	ldr	r2, [r3, #4]
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010baa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	689a      	ldr	r2, [r3, #8]
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010bba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	681a      	ldr	r2, [r3, #0]
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	f042 0201 	orr.w	r2, r2, #1
 8010bca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010bcc:	6878      	ldr	r0, [r7, #4]
 8010bce:	f000 ff13 	bl	80119f8 <UART_CheckIdleState>
 8010bd2:	4603      	mov	r3, r0
}
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	3708      	adds	r7, #8
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	bd80      	pop	{r7, pc}

08010bdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010be0:	b092      	sub	sp, #72	; 0x48
 8010be2:	af00      	add	r7, sp, #0
 8010be4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010be6:	2300      	movs	r3, #0
 8010be8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010bec:	697b      	ldr	r3, [r7, #20]
 8010bee:	689a      	ldr	r2, [r3, #8]
 8010bf0:	697b      	ldr	r3, [r7, #20]
 8010bf2:	691b      	ldr	r3, [r3, #16]
 8010bf4:	431a      	orrs	r2, r3
 8010bf6:	697b      	ldr	r3, [r7, #20]
 8010bf8:	695b      	ldr	r3, [r3, #20]
 8010bfa:	431a      	orrs	r2, r3
 8010bfc:	697b      	ldr	r3, [r7, #20]
 8010bfe:	69db      	ldr	r3, [r3, #28]
 8010c00:	4313      	orrs	r3, r2
 8010c02:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010c04:	697b      	ldr	r3, [r7, #20]
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	681a      	ldr	r2, [r3, #0]
 8010c0a:	4bbe      	ldr	r3, [pc, #760]	; (8010f04 <UART_SetConfig+0x328>)
 8010c0c:	4013      	ands	r3, r2
 8010c0e:	697a      	ldr	r2, [r7, #20]
 8010c10:	6812      	ldr	r2, [r2, #0]
 8010c12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010c14:	430b      	orrs	r3, r1
 8010c16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010c18:	697b      	ldr	r3, [r7, #20]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	685b      	ldr	r3, [r3, #4]
 8010c1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010c22:	697b      	ldr	r3, [r7, #20]
 8010c24:	68da      	ldr	r2, [r3, #12]
 8010c26:	697b      	ldr	r3, [r7, #20]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	430a      	orrs	r2, r1
 8010c2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010c2e:	697b      	ldr	r3, [r7, #20]
 8010c30:	699b      	ldr	r3, [r3, #24]
 8010c32:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010c34:	697b      	ldr	r3, [r7, #20]
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	4ab3      	ldr	r2, [pc, #716]	; (8010f08 <UART_SetConfig+0x32c>)
 8010c3a:	4293      	cmp	r3, r2
 8010c3c:	d004      	beq.n	8010c48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010c3e:	697b      	ldr	r3, [r7, #20]
 8010c40:	6a1b      	ldr	r3, [r3, #32]
 8010c42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010c44:	4313      	orrs	r3, r2
 8010c46:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010c48:	697b      	ldr	r3, [r7, #20]
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	689a      	ldr	r2, [r3, #8]
 8010c4e:	4baf      	ldr	r3, [pc, #700]	; (8010f0c <UART_SetConfig+0x330>)
 8010c50:	4013      	ands	r3, r2
 8010c52:	697a      	ldr	r2, [r7, #20]
 8010c54:	6812      	ldr	r2, [r2, #0]
 8010c56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010c58:	430b      	orrs	r3, r1
 8010c5a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010c5c:	697b      	ldr	r3, [r7, #20]
 8010c5e:	681b      	ldr	r3, [r3, #0]
 8010c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c62:	f023 010f 	bic.w	r1, r3, #15
 8010c66:	697b      	ldr	r3, [r7, #20]
 8010c68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010c6a:	697b      	ldr	r3, [r7, #20]
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	430a      	orrs	r2, r1
 8010c70:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010c72:	697b      	ldr	r3, [r7, #20]
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	4aa6      	ldr	r2, [pc, #664]	; (8010f10 <UART_SetConfig+0x334>)
 8010c78:	4293      	cmp	r3, r2
 8010c7a:	d177      	bne.n	8010d6c <UART_SetConfig+0x190>
 8010c7c:	4ba5      	ldr	r3, [pc, #660]	; (8010f14 <UART_SetConfig+0x338>)
 8010c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010c84:	2b28      	cmp	r3, #40	; 0x28
 8010c86:	d86d      	bhi.n	8010d64 <UART_SetConfig+0x188>
 8010c88:	a201      	add	r2, pc, #4	; (adr r2, 8010c90 <UART_SetConfig+0xb4>)
 8010c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c8e:	bf00      	nop
 8010c90:	08010d35 	.word	0x08010d35
 8010c94:	08010d65 	.word	0x08010d65
 8010c98:	08010d65 	.word	0x08010d65
 8010c9c:	08010d65 	.word	0x08010d65
 8010ca0:	08010d65 	.word	0x08010d65
 8010ca4:	08010d65 	.word	0x08010d65
 8010ca8:	08010d65 	.word	0x08010d65
 8010cac:	08010d65 	.word	0x08010d65
 8010cb0:	08010d3d 	.word	0x08010d3d
 8010cb4:	08010d65 	.word	0x08010d65
 8010cb8:	08010d65 	.word	0x08010d65
 8010cbc:	08010d65 	.word	0x08010d65
 8010cc0:	08010d65 	.word	0x08010d65
 8010cc4:	08010d65 	.word	0x08010d65
 8010cc8:	08010d65 	.word	0x08010d65
 8010ccc:	08010d65 	.word	0x08010d65
 8010cd0:	08010d45 	.word	0x08010d45
 8010cd4:	08010d65 	.word	0x08010d65
 8010cd8:	08010d65 	.word	0x08010d65
 8010cdc:	08010d65 	.word	0x08010d65
 8010ce0:	08010d65 	.word	0x08010d65
 8010ce4:	08010d65 	.word	0x08010d65
 8010ce8:	08010d65 	.word	0x08010d65
 8010cec:	08010d65 	.word	0x08010d65
 8010cf0:	08010d4d 	.word	0x08010d4d
 8010cf4:	08010d65 	.word	0x08010d65
 8010cf8:	08010d65 	.word	0x08010d65
 8010cfc:	08010d65 	.word	0x08010d65
 8010d00:	08010d65 	.word	0x08010d65
 8010d04:	08010d65 	.word	0x08010d65
 8010d08:	08010d65 	.word	0x08010d65
 8010d0c:	08010d65 	.word	0x08010d65
 8010d10:	08010d55 	.word	0x08010d55
 8010d14:	08010d65 	.word	0x08010d65
 8010d18:	08010d65 	.word	0x08010d65
 8010d1c:	08010d65 	.word	0x08010d65
 8010d20:	08010d65 	.word	0x08010d65
 8010d24:	08010d65 	.word	0x08010d65
 8010d28:	08010d65 	.word	0x08010d65
 8010d2c:	08010d65 	.word	0x08010d65
 8010d30:	08010d5d 	.word	0x08010d5d
 8010d34:	2301      	movs	r3, #1
 8010d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d3a:	e326      	b.n	801138a <UART_SetConfig+0x7ae>
 8010d3c:	2304      	movs	r3, #4
 8010d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d42:	e322      	b.n	801138a <UART_SetConfig+0x7ae>
 8010d44:	2308      	movs	r3, #8
 8010d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d4a:	e31e      	b.n	801138a <UART_SetConfig+0x7ae>
 8010d4c:	2310      	movs	r3, #16
 8010d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d52:	e31a      	b.n	801138a <UART_SetConfig+0x7ae>
 8010d54:	2320      	movs	r3, #32
 8010d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d5a:	e316      	b.n	801138a <UART_SetConfig+0x7ae>
 8010d5c:	2340      	movs	r3, #64	; 0x40
 8010d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d62:	e312      	b.n	801138a <UART_SetConfig+0x7ae>
 8010d64:	2380      	movs	r3, #128	; 0x80
 8010d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d6a:	e30e      	b.n	801138a <UART_SetConfig+0x7ae>
 8010d6c:	697b      	ldr	r3, [r7, #20]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	4a69      	ldr	r2, [pc, #420]	; (8010f18 <UART_SetConfig+0x33c>)
 8010d72:	4293      	cmp	r3, r2
 8010d74:	d130      	bne.n	8010dd8 <UART_SetConfig+0x1fc>
 8010d76:	4b67      	ldr	r3, [pc, #412]	; (8010f14 <UART_SetConfig+0x338>)
 8010d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d7a:	f003 0307 	and.w	r3, r3, #7
 8010d7e:	2b05      	cmp	r3, #5
 8010d80:	d826      	bhi.n	8010dd0 <UART_SetConfig+0x1f4>
 8010d82:	a201      	add	r2, pc, #4	; (adr r2, 8010d88 <UART_SetConfig+0x1ac>)
 8010d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d88:	08010da1 	.word	0x08010da1
 8010d8c:	08010da9 	.word	0x08010da9
 8010d90:	08010db1 	.word	0x08010db1
 8010d94:	08010db9 	.word	0x08010db9
 8010d98:	08010dc1 	.word	0x08010dc1
 8010d9c:	08010dc9 	.word	0x08010dc9
 8010da0:	2300      	movs	r3, #0
 8010da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010da6:	e2f0      	b.n	801138a <UART_SetConfig+0x7ae>
 8010da8:	2304      	movs	r3, #4
 8010daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dae:	e2ec      	b.n	801138a <UART_SetConfig+0x7ae>
 8010db0:	2308      	movs	r3, #8
 8010db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010db6:	e2e8      	b.n	801138a <UART_SetConfig+0x7ae>
 8010db8:	2310      	movs	r3, #16
 8010dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dbe:	e2e4      	b.n	801138a <UART_SetConfig+0x7ae>
 8010dc0:	2320      	movs	r3, #32
 8010dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dc6:	e2e0      	b.n	801138a <UART_SetConfig+0x7ae>
 8010dc8:	2340      	movs	r3, #64	; 0x40
 8010dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dce:	e2dc      	b.n	801138a <UART_SetConfig+0x7ae>
 8010dd0:	2380      	movs	r3, #128	; 0x80
 8010dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dd6:	e2d8      	b.n	801138a <UART_SetConfig+0x7ae>
 8010dd8:	697b      	ldr	r3, [r7, #20]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	4a4f      	ldr	r2, [pc, #316]	; (8010f1c <UART_SetConfig+0x340>)
 8010dde:	4293      	cmp	r3, r2
 8010de0:	d130      	bne.n	8010e44 <UART_SetConfig+0x268>
 8010de2:	4b4c      	ldr	r3, [pc, #304]	; (8010f14 <UART_SetConfig+0x338>)
 8010de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010de6:	f003 0307 	and.w	r3, r3, #7
 8010dea:	2b05      	cmp	r3, #5
 8010dec:	d826      	bhi.n	8010e3c <UART_SetConfig+0x260>
 8010dee:	a201      	add	r2, pc, #4	; (adr r2, 8010df4 <UART_SetConfig+0x218>)
 8010df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010df4:	08010e0d 	.word	0x08010e0d
 8010df8:	08010e15 	.word	0x08010e15
 8010dfc:	08010e1d 	.word	0x08010e1d
 8010e00:	08010e25 	.word	0x08010e25
 8010e04:	08010e2d 	.word	0x08010e2d
 8010e08:	08010e35 	.word	0x08010e35
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e12:	e2ba      	b.n	801138a <UART_SetConfig+0x7ae>
 8010e14:	2304      	movs	r3, #4
 8010e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e1a:	e2b6      	b.n	801138a <UART_SetConfig+0x7ae>
 8010e1c:	2308      	movs	r3, #8
 8010e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e22:	e2b2      	b.n	801138a <UART_SetConfig+0x7ae>
 8010e24:	2310      	movs	r3, #16
 8010e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e2a:	e2ae      	b.n	801138a <UART_SetConfig+0x7ae>
 8010e2c:	2320      	movs	r3, #32
 8010e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e32:	e2aa      	b.n	801138a <UART_SetConfig+0x7ae>
 8010e34:	2340      	movs	r3, #64	; 0x40
 8010e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e3a:	e2a6      	b.n	801138a <UART_SetConfig+0x7ae>
 8010e3c:	2380      	movs	r3, #128	; 0x80
 8010e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e42:	e2a2      	b.n	801138a <UART_SetConfig+0x7ae>
 8010e44:	697b      	ldr	r3, [r7, #20]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	4a35      	ldr	r2, [pc, #212]	; (8010f20 <UART_SetConfig+0x344>)
 8010e4a:	4293      	cmp	r3, r2
 8010e4c:	d130      	bne.n	8010eb0 <UART_SetConfig+0x2d4>
 8010e4e:	4b31      	ldr	r3, [pc, #196]	; (8010f14 <UART_SetConfig+0x338>)
 8010e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e52:	f003 0307 	and.w	r3, r3, #7
 8010e56:	2b05      	cmp	r3, #5
 8010e58:	d826      	bhi.n	8010ea8 <UART_SetConfig+0x2cc>
 8010e5a:	a201      	add	r2, pc, #4	; (adr r2, 8010e60 <UART_SetConfig+0x284>)
 8010e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e60:	08010e79 	.word	0x08010e79
 8010e64:	08010e81 	.word	0x08010e81
 8010e68:	08010e89 	.word	0x08010e89
 8010e6c:	08010e91 	.word	0x08010e91
 8010e70:	08010e99 	.word	0x08010e99
 8010e74:	08010ea1 	.word	0x08010ea1
 8010e78:	2300      	movs	r3, #0
 8010e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e7e:	e284      	b.n	801138a <UART_SetConfig+0x7ae>
 8010e80:	2304      	movs	r3, #4
 8010e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e86:	e280      	b.n	801138a <UART_SetConfig+0x7ae>
 8010e88:	2308      	movs	r3, #8
 8010e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e8e:	e27c      	b.n	801138a <UART_SetConfig+0x7ae>
 8010e90:	2310      	movs	r3, #16
 8010e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e96:	e278      	b.n	801138a <UART_SetConfig+0x7ae>
 8010e98:	2320      	movs	r3, #32
 8010e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e9e:	e274      	b.n	801138a <UART_SetConfig+0x7ae>
 8010ea0:	2340      	movs	r3, #64	; 0x40
 8010ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ea6:	e270      	b.n	801138a <UART_SetConfig+0x7ae>
 8010ea8:	2380      	movs	r3, #128	; 0x80
 8010eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eae:	e26c      	b.n	801138a <UART_SetConfig+0x7ae>
 8010eb0:	697b      	ldr	r3, [r7, #20]
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	4a1b      	ldr	r2, [pc, #108]	; (8010f24 <UART_SetConfig+0x348>)
 8010eb6:	4293      	cmp	r3, r2
 8010eb8:	d142      	bne.n	8010f40 <UART_SetConfig+0x364>
 8010eba:	4b16      	ldr	r3, [pc, #88]	; (8010f14 <UART_SetConfig+0x338>)
 8010ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ebe:	f003 0307 	and.w	r3, r3, #7
 8010ec2:	2b05      	cmp	r3, #5
 8010ec4:	d838      	bhi.n	8010f38 <UART_SetConfig+0x35c>
 8010ec6:	a201      	add	r2, pc, #4	; (adr r2, 8010ecc <UART_SetConfig+0x2f0>)
 8010ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ecc:	08010ee5 	.word	0x08010ee5
 8010ed0:	08010eed 	.word	0x08010eed
 8010ed4:	08010ef5 	.word	0x08010ef5
 8010ed8:	08010efd 	.word	0x08010efd
 8010edc:	08010f29 	.word	0x08010f29
 8010ee0:	08010f31 	.word	0x08010f31
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eea:	e24e      	b.n	801138a <UART_SetConfig+0x7ae>
 8010eec:	2304      	movs	r3, #4
 8010eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ef2:	e24a      	b.n	801138a <UART_SetConfig+0x7ae>
 8010ef4:	2308      	movs	r3, #8
 8010ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010efa:	e246      	b.n	801138a <UART_SetConfig+0x7ae>
 8010efc:	2310      	movs	r3, #16
 8010efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f02:	e242      	b.n	801138a <UART_SetConfig+0x7ae>
 8010f04:	cfff69f3 	.word	0xcfff69f3
 8010f08:	58000c00 	.word	0x58000c00
 8010f0c:	11fff4ff 	.word	0x11fff4ff
 8010f10:	40011000 	.word	0x40011000
 8010f14:	58024400 	.word	0x58024400
 8010f18:	40004400 	.word	0x40004400
 8010f1c:	40004800 	.word	0x40004800
 8010f20:	40004c00 	.word	0x40004c00
 8010f24:	40005000 	.word	0x40005000
 8010f28:	2320      	movs	r3, #32
 8010f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f2e:	e22c      	b.n	801138a <UART_SetConfig+0x7ae>
 8010f30:	2340      	movs	r3, #64	; 0x40
 8010f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f36:	e228      	b.n	801138a <UART_SetConfig+0x7ae>
 8010f38:	2380      	movs	r3, #128	; 0x80
 8010f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f3e:	e224      	b.n	801138a <UART_SetConfig+0x7ae>
 8010f40:	697b      	ldr	r3, [r7, #20]
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	4ab1      	ldr	r2, [pc, #708]	; (801120c <UART_SetConfig+0x630>)
 8010f46:	4293      	cmp	r3, r2
 8010f48:	d176      	bne.n	8011038 <UART_SetConfig+0x45c>
 8010f4a:	4bb1      	ldr	r3, [pc, #708]	; (8011210 <UART_SetConfig+0x634>)
 8010f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010f52:	2b28      	cmp	r3, #40	; 0x28
 8010f54:	d86c      	bhi.n	8011030 <UART_SetConfig+0x454>
 8010f56:	a201      	add	r2, pc, #4	; (adr r2, 8010f5c <UART_SetConfig+0x380>)
 8010f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f5c:	08011001 	.word	0x08011001
 8010f60:	08011031 	.word	0x08011031
 8010f64:	08011031 	.word	0x08011031
 8010f68:	08011031 	.word	0x08011031
 8010f6c:	08011031 	.word	0x08011031
 8010f70:	08011031 	.word	0x08011031
 8010f74:	08011031 	.word	0x08011031
 8010f78:	08011031 	.word	0x08011031
 8010f7c:	08011009 	.word	0x08011009
 8010f80:	08011031 	.word	0x08011031
 8010f84:	08011031 	.word	0x08011031
 8010f88:	08011031 	.word	0x08011031
 8010f8c:	08011031 	.word	0x08011031
 8010f90:	08011031 	.word	0x08011031
 8010f94:	08011031 	.word	0x08011031
 8010f98:	08011031 	.word	0x08011031
 8010f9c:	08011011 	.word	0x08011011
 8010fa0:	08011031 	.word	0x08011031
 8010fa4:	08011031 	.word	0x08011031
 8010fa8:	08011031 	.word	0x08011031
 8010fac:	08011031 	.word	0x08011031
 8010fb0:	08011031 	.word	0x08011031
 8010fb4:	08011031 	.word	0x08011031
 8010fb8:	08011031 	.word	0x08011031
 8010fbc:	08011019 	.word	0x08011019
 8010fc0:	08011031 	.word	0x08011031
 8010fc4:	08011031 	.word	0x08011031
 8010fc8:	08011031 	.word	0x08011031
 8010fcc:	08011031 	.word	0x08011031
 8010fd0:	08011031 	.word	0x08011031
 8010fd4:	08011031 	.word	0x08011031
 8010fd8:	08011031 	.word	0x08011031
 8010fdc:	08011021 	.word	0x08011021
 8010fe0:	08011031 	.word	0x08011031
 8010fe4:	08011031 	.word	0x08011031
 8010fe8:	08011031 	.word	0x08011031
 8010fec:	08011031 	.word	0x08011031
 8010ff0:	08011031 	.word	0x08011031
 8010ff4:	08011031 	.word	0x08011031
 8010ff8:	08011031 	.word	0x08011031
 8010ffc:	08011029 	.word	0x08011029
 8011000:	2301      	movs	r3, #1
 8011002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011006:	e1c0      	b.n	801138a <UART_SetConfig+0x7ae>
 8011008:	2304      	movs	r3, #4
 801100a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801100e:	e1bc      	b.n	801138a <UART_SetConfig+0x7ae>
 8011010:	2308      	movs	r3, #8
 8011012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011016:	e1b8      	b.n	801138a <UART_SetConfig+0x7ae>
 8011018:	2310      	movs	r3, #16
 801101a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801101e:	e1b4      	b.n	801138a <UART_SetConfig+0x7ae>
 8011020:	2320      	movs	r3, #32
 8011022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011026:	e1b0      	b.n	801138a <UART_SetConfig+0x7ae>
 8011028:	2340      	movs	r3, #64	; 0x40
 801102a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801102e:	e1ac      	b.n	801138a <UART_SetConfig+0x7ae>
 8011030:	2380      	movs	r3, #128	; 0x80
 8011032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011036:	e1a8      	b.n	801138a <UART_SetConfig+0x7ae>
 8011038:	697b      	ldr	r3, [r7, #20]
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	4a75      	ldr	r2, [pc, #468]	; (8011214 <UART_SetConfig+0x638>)
 801103e:	4293      	cmp	r3, r2
 8011040:	d130      	bne.n	80110a4 <UART_SetConfig+0x4c8>
 8011042:	4b73      	ldr	r3, [pc, #460]	; (8011210 <UART_SetConfig+0x634>)
 8011044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011046:	f003 0307 	and.w	r3, r3, #7
 801104a:	2b05      	cmp	r3, #5
 801104c:	d826      	bhi.n	801109c <UART_SetConfig+0x4c0>
 801104e:	a201      	add	r2, pc, #4	; (adr r2, 8011054 <UART_SetConfig+0x478>)
 8011050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011054:	0801106d 	.word	0x0801106d
 8011058:	08011075 	.word	0x08011075
 801105c:	0801107d 	.word	0x0801107d
 8011060:	08011085 	.word	0x08011085
 8011064:	0801108d 	.word	0x0801108d
 8011068:	08011095 	.word	0x08011095
 801106c:	2300      	movs	r3, #0
 801106e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011072:	e18a      	b.n	801138a <UART_SetConfig+0x7ae>
 8011074:	2304      	movs	r3, #4
 8011076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801107a:	e186      	b.n	801138a <UART_SetConfig+0x7ae>
 801107c:	2308      	movs	r3, #8
 801107e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011082:	e182      	b.n	801138a <UART_SetConfig+0x7ae>
 8011084:	2310      	movs	r3, #16
 8011086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801108a:	e17e      	b.n	801138a <UART_SetConfig+0x7ae>
 801108c:	2320      	movs	r3, #32
 801108e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011092:	e17a      	b.n	801138a <UART_SetConfig+0x7ae>
 8011094:	2340      	movs	r3, #64	; 0x40
 8011096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801109a:	e176      	b.n	801138a <UART_SetConfig+0x7ae>
 801109c:	2380      	movs	r3, #128	; 0x80
 801109e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110a2:	e172      	b.n	801138a <UART_SetConfig+0x7ae>
 80110a4:	697b      	ldr	r3, [r7, #20]
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	4a5b      	ldr	r2, [pc, #364]	; (8011218 <UART_SetConfig+0x63c>)
 80110aa:	4293      	cmp	r3, r2
 80110ac:	d130      	bne.n	8011110 <UART_SetConfig+0x534>
 80110ae:	4b58      	ldr	r3, [pc, #352]	; (8011210 <UART_SetConfig+0x634>)
 80110b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80110b2:	f003 0307 	and.w	r3, r3, #7
 80110b6:	2b05      	cmp	r3, #5
 80110b8:	d826      	bhi.n	8011108 <UART_SetConfig+0x52c>
 80110ba:	a201      	add	r2, pc, #4	; (adr r2, 80110c0 <UART_SetConfig+0x4e4>)
 80110bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110c0:	080110d9 	.word	0x080110d9
 80110c4:	080110e1 	.word	0x080110e1
 80110c8:	080110e9 	.word	0x080110e9
 80110cc:	080110f1 	.word	0x080110f1
 80110d0:	080110f9 	.word	0x080110f9
 80110d4:	08011101 	.word	0x08011101
 80110d8:	2300      	movs	r3, #0
 80110da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110de:	e154      	b.n	801138a <UART_SetConfig+0x7ae>
 80110e0:	2304      	movs	r3, #4
 80110e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110e6:	e150      	b.n	801138a <UART_SetConfig+0x7ae>
 80110e8:	2308      	movs	r3, #8
 80110ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110ee:	e14c      	b.n	801138a <UART_SetConfig+0x7ae>
 80110f0:	2310      	movs	r3, #16
 80110f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110f6:	e148      	b.n	801138a <UART_SetConfig+0x7ae>
 80110f8:	2320      	movs	r3, #32
 80110fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80110fe:	e144      	b.n	801138a <UART_SetConfig+0x7ae>
 8011100:	2340      	movs	r3, #64	; 0x40
 8011102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011106:	e140      	b.n	801138a <UART_SetConfig+0x7ae>
 8011108:	2380      	movs	r3, #128	; 0x80
 801110a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801110e:	e13c      	b.n	801138a <UART_SetConfig+0x7ae>
 8011110:	697b      	ldr	r3, [r7, #20]
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	4a41      	ldr	r2, [pc, #260]	; (801121c <UART_SetConfig+0x640>)
 8011116:	4293      	cmp	r3, r2
 8011118:	f040 8082 	bne.w	8011220 <UART_SetConfig+0x644>
 801111c:	4b3c      	ldr	r3, [pc, #240]	; (8011210 <UART_SetConfig+0x634>)
 801111e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011120:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011124:	2b28      	cmp	r3, #40	; 0x28
 8011126:	d86d      	bhi.n	8011204 <UART_SetConfig+0x628>
 8011128:	a201      	add	r2, pc, #4	; (adr r2, 8011130 <UART_SetConfig+0x554>)
 801112a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801112e:	bf00      	nop
 8011130:	080111d5 	.word	0x080111d5
 8011134:	08011205 	.word	0x08011205
 8011138:	08011205 	.word	0x08011205
 801113c:	08011205 	.word	0x08011205
 8011140:	08011205 	.word	0x08011205
 8011144:	08011205 	.word	0x08011205
 8011148:	08011205 	.word	0x08011205
 801114c:	08011205 	.word	0x08011205
 8011150:	080111dd 	.word	0x080111dd
 8011154:	08011205 	.word	0x08011205
 8011158:	08011205 	.word	0x08011205
 801115c:	08011205 	.word	0x08011205
 8011160:	08011205 	.word	0x08011205
 8011164:	08011205 	.word	0x08011205
 8011168:	08011205 	.word	0x08011205
 801116c:	08011205 	.word	0x08011205
 8011170:	080111e5 	.word	0x080111e5
 8011174:	08011205 	.word	0x08011205
 8011178:	08011205 	.word	0x08011205
 801117c:	08011205 	.word	0x08011205
 8011180:	08011205 	.word	0x08011205
 8011184:	08011205 	.word	0x08011205
 8011188:	08011205 	.word	0x08011205
 801118c:	08011205 	.word	0x08011205
 8011190:	080111ed 	.word	0x080111ed
 8011194:	08011205 	.word	0x08011205
 8011198:	08011205 	.word	0x08011205
 801119c:	08011205 	.word	0x08011205
 80111a0:	08011205 	.word	0x08011205
 80111a4:	08011205 	.word	0x08011205
 80111a8:	08011205 	.word	0x08011205
 80111ac:	08011205 	.word	0x08011205
 80111b0:	080111f5 	.word	0x080111f5
 80111b4:	08011205 	.word	0x08011205
 80111b8:	08011205 	.word	0x08011205
 80111bc:	08011205 	.word	0x08011205
 80111c0:	08011205 	.word	0x08011205
 80111c4:	08011205 	.word	0x08011205
 80111c8:	08011205 	.word	0x08011205
 80111cc:	08011205 	.word	0x08011205
 80111d0:	080111fd 	.word	0x080111fd
 80111d4:	2301      	movs	r3, #1
 80111d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111da:	e0d6      	b.n	801138a <UART_SetConfig+0x7ae>
 80111dc:	2304      	movs	r3, #4
 80111de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111e2:	e0d2      	b.n	801138a <UART_SetConfig+0x7ae>
 80111e4:	2308      	movs	r3, #8
 80111e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111ea:	e0ce      	b.n	801138a <UART_SetConfig+0x7ae>
 80111ec:	2310      	movs	r3, #16
 80111ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111f2:	e0ca      	b.n	801138a <UART_SetConfig+0x7ae>
 80111f4:	2320      	movs	r3, #32
 80111f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111fa:	e0c6      	b.n	801138a <UART_SetConfig+0x7ae>
 80111fc:	2340      	movs	r3, #64	; 0x40
 80111fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011202:	e0c2      	b.n	801138a <UART_SetConfig+0x7ae>
 8011204:	2380      	movs	r3, #128	; 0x80
 8011206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801120a:	e0be      	b.n	801138a <UART_SetConfig+0x7ae>
 801120c:	40011400 	.word	0x40011400
 8011210:	58024400 	.word	0x58024400
 8011214:	40007800 	.word	0x40007800
 8011218:	40007c00 	.word	0x40007c00
 801121c:	40011800 	.word	0x40011800
 8011220:	697b      	ldr	r3, [r7, #20]
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	4aad      	ldr	r2, [pc, #692]	; (80114dc <UART_SetConfig+0x900>)
 8011226:	4293      	cmp	r3, r2
 8011228:	d176      	bne.n	8011318 <UART_SetConfig+0x73c>
 801122a:	4bad      	ldr	r3, [pc, #692]	; (80114e0 <UART_SetConfig+0x904>)
 801122c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801122e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011232:	2b28      	cmp	r3, #40	; 0x28
 8011234:	d86c      	bhi.n	8011310 <UART_SetConfig+0x734>
 8011236:	a201      	add	r2, pc, #4	; (adr r2, 801123c <UART_SetConfig+0x660>)
 8011238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801123c:	080112e1 	.word	0x080112e1
 8011240:	08011311 	.word	0x08011311
 8011244:	08011311 	.word	0x08011311
 8011248:	08011311 	.word	0x08011311
 801124c:	08011311 	.word	0x08011311
 8011250:	08011311 	.word	0x08011311
 8011254:	08011311 	.word	0x08011311
 8011258:	08011311 	.word	0x08011311
 801125c:	080112e9 	.word	0x080112e9
 8011260:	08011311 	.word	0x08011311
 8011264:	08011311 	.word	0x08011311
 8011268:	08011311 	.word	0x08011311
 801126c:	08011311 	.word	0x08011311
 8011270:	08011311 	.word	0x08011311
 8011274:	08011311 	.word	0x08011311
 8011278:	08011311 	.word	0x08011311
 801127c:	080112f1 	.word	0x080112f1
 8011280:	08011311 	.word	0x08011311
 8011284:	08011311 	.word	0x08011311
 8011288:	08011311 	.word	0x08011311
 801128c:	08011311 	.word	0x08011311
 8011290:	08011311 	.word	0x08011311
 8011294:	08011311 	.word	0x08011311
 8011298:	08011311 	.word	0x08011311
 801129c:	080112f9 	.word	0x080112f9
 80112a0:	08011311 	.word	0x08011311
 80112a4:	08011311 	.word	0x08011311
 80112a8:	08011311 	.word	0x08011311
 80112ac:	08011311 	.word	0x08011311
 80112b0:	08011311 	.word	0x08011311
 80112b4:	08011311 	.word	0x08011311
 80112b8:	08011311 	.word	0x08011311
 80112bc:	08011301 	.word	0x08011301
 80112c0:	08011311 	.word	0x08011311
 80112c4:	08011311 	.word	0x08011311
 80112c8:	08011311 	.word	0x08011311
 80112cc:	08011311 	.word	0x08011311
 80112d0:	08011311 	.word	0x08011311
 80112d4:	08011311 	.word	0x08011311
 80112d8:	08011311 	.word	0x08011311
 80112dc:	08011309 	.word	0x08011309
 80112e0:	2301      	movs	r3, #1
 80112e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112e6:	e050      	b.n	801138a <UART_SetConfig+0x7ae>
 80112e8:	2304      	movs	r3, #4
 80112ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112ee:	e04c      	b.n	801138a <UART_SetConfig+0x7ae>
 80112f0:	2308      	movs	r3, #8
 80112f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112f6:	e048      	b.n	801138a <UART_SetConfig+0x7ae>
 80112f8:	2310      	movs	r3, #16
 80112fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80112fe:	e044      	b.n	801138a <UART_SetConfig+0x7ae>
 8011300:	2320      	movs	r3, #32
 8011302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011306:	e040      	b.n	801138a <UART_SetConfig+0x7ae>
 8011308:	2340      	movs	r3, #64	; 0x40
 801130a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801130e:	e03c      	b.n	801138a <UART_SetConfig+0x7ae>
 8011310:	2380      	movs	r3, #128	; 0x80
 8011312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011316:	e038      	b.n	801138a <UART_SetConfig+0x7ae>
 8011318:	697b      	ldr	r3, [r7, #20]
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	4a71      	ldr	r2, [pc, #452]	; (80114e4 <UART_SetConfig+0x908>)
 801131e:	4293      	cmp	r3, r2
 8011320:	d130      	bne.n	8011384 <UART_SetConfig+0x7a8>
 8011322:	4b6f      	ldr	r3, [pc, #444]	; (80114e0 <UART_SetConfig+0x904>)
 8011324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011326:	f003 0307 	and.w	r3, r3, #7
 801132a:	2b05      	cmp	r3, #5
 801132c:	d826      	bhi.n	801137c <UART_SetConfig+0x7a0>
 801132e:	a201      	add	r2, pc, #4	; (adr r2, 8011334 <UART_SetConfig+0x758>)
 8011330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011334:	0801134d 	.word	0x0801134d
 8011338:	08011355 	.word	0x08011355
 801133c:	0801135d 	.word	0x0801135d
 8011340:	08011365 	.word	0x08011365
 8011344:	0801136d 	.word	0x0801136d
 8011348:	08011375 	.word	0x08011375
 801134c:	2302      	movs	r3, #2
 801134e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011352:	e01a      	b.n	801138a <UART_SetConfig+0x7ae>
 8011354:	2304      	movs	r3, #4
 8011356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801135a:	e016      	b.n	801138a <UART_SetConfig+0x7ae>
 801135c:	2308      	movs	r3, #8
 801135e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011362:	e012      	b.n	801138a <UART_SetConfig+0x7ae>
 8011364:	2310      	movs	r3, #16
 8011366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801136a:	e00e      	b.n	801138a <UART_SetConfig+0x7ae>
 801136c:	2320      	movs	r3, #32
 801136e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011372:	e00a      	b.n	801138a <UART_SetConfig+0x7ae>
 8011374:	2340      	movs	r3, #64	; 0x40
 8011376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801137a:	e006      	b.n	801138a <UART_SetConfig+0x7ae>
 801137c:	2380      	movs	r3, #128	; 0x80
 801137e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011382:	e002      	b.n	801138a <UART_SetConfig+0x7ae>
 8011384:	2380      	movs	r3, #128	; 0x80
 8011386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801138a:	697b      	ldr	r3, [r7, #20]
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	4a55      	ldr	r2, [pc, #340]	; (80114e4 <UART_SetConfig+0x908>)
 8011390:	4293      	cmp	r3, r2
 8011392:	f040 80f8 	bne.w	8011586 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011396:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801139a:	2b20      	cmp	r3, #32
 801139c:	dc46      	bgt.n	801142c <UART_SetConfig+0x850>
 801139e:	2b02      	cmp	r3, #2
 80113a0:	db75      	blt.n	801148e <UART_SetConfig+0x8b2>
 80113a2:	3b02      	subs	r3, #2
 80113a4:	2b1e      	cmp	r3, #30
 80113a6:	d872      	bhi.n	801148e <UART_SetConfig+0x8b2>
 80113a8:	a201      	add	r2, pc, #4	; (adr r2, 80113b0 <UART_SetConfig+0x7d4>)
 80113aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113ae:	bf00      	nop
 80113b0:	08011433 	.word	0x08011433
 80113b4:	0801148f 	.word	0x0801148f
 80113b8:	0801143b 	.word	0x0801143b
 80113bc:	0801148f 	.word	0x0801148f
 80113c0:	0801148f 	.word	0x0801148f
 80113c4:	0801148f 	.word	0x0801148f
 80113c8:	0801144b 	.word	0x0801144b
 80113cc:	0801148f 	.word	0x0801148f
 80113d0:	0801148f 	.word	0x0801148f
 80113d4:	0801148f 	.word	0x0801148f
 80113d8:	0801148f 	.word	0x0801148f
 80113dc:	0801148f 	.word	0x0801148f
 80113e0:	0801148f 	.word	0x0801148f
 80113e4:	0801148f 	.word	0x0801148f
 80113e8:	0801145b 	.word	0x0801145b
 80113ec:	0801148f 	.word	0x0801148f
 80113f0:	0801148f 	.word	0x0801148f
 80113f4:	0801148f 	.word	0x0801148f
 80113f8:	0801148f 	.word	0x0801148f
 80113fc:	0801148f 	.word	0x0801148f
 8011400:	0801148f 	.word	0x0801148f
 8011404:	0801148f 	.word	0x0801148f
 8011408:	0801148f 	.word	0x0801148f
 801140c:	0801148f 	.word	0x0801148f
 8011410:	0801148f 	.word	0x0801148f
 8011414:	0801148f 	.word	0x0801148f
 8011418:	0801148f 	.word	0x0801148f
 801141c:	0801148f 	.word	0x0801148f
 8011420:	0801148f 	.word	0x0801148f
 8011424:	0801148f 	.word	0x0801148f
 8011428:	08011481 	.word	0x08011481
 801142c:	2b40      	cmp	r3, #64	; 0x40
 801142e:	d02a      	beq.n	8011486 <UART_SetConfig+0x8aa>
 8011430:	e02d      	b.n	801148e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8011432:	f7fb f86b 	bl	800c50c <HAL_RCCEx_GetD3PCLK1Freq>
 8011436:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011438:	e02f      	b.n	801149a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801143a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801143e:	4618      	mov	r0, r3
 8011440:	f7fb f87a 	bl	800c538 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011448:	e027      	b.n	801149a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801144a:	f107 0318 	add.w	r3, r7, #24
 801144e:	4618      	mov	r0, r3
 8011450:	f7fb f9c6 	bl	800c7e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011454:	69fb      	ldr	r3, [r7, #28]
 8011456:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011458:	e01f      	b.n	801149a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801145a:	4b21      	ldr	r3, [pc, #132]	; (80114e0 <UART_SetConfig+0x904>)
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	f003 0320 	and.w	r3, r3, #32
 8011462:	2b00      	cmp	r3, #0
 8011464:	d009      	beq.n	801147a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011466:	4b1e      	ldr	r3, [pc, #120]	; (80114e0 <UART_SetConfig+0x904>)
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	08db      	lsrs	r3, r3, #3
 801146c:	f003 0303 	and.w	r3, r3, #3
 8011470:	4a1d      	ldr	r2, [pc, #116]	; (80114e8 <UART_SetConfig+0x90c>)
 8011472:	fa22 f303 	lsr.w	r3, r2, r3
 8011476:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011478:	e00f      	b.n	801149a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801147a:	4b1b      	ldr	r3, [pc, #108]	; (80114e8 <UART_SetConfig+0x90c>)
 801147c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801147e:	e00c      	b.n	801149a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011480:	4b1a      	ldr	r3, [pc, #104]	; (80114ec <UART_SetConfig+0x910>)
 8011482:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011484:	e009      	b.n	801149a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801148a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801148c:	e005      	b.n	801149a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801148e:	2300      	movs	r3, #0
 8011490:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011492:	2301      	movs	r3, #1
 8011494:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011498:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801149a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801149c:	2b00      	cmp	r3, #0
 801149e:	f000 81ee 	beq.w	801187e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80114a2:	697b      	ldr	r3, [r7, #20]
 80114a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114a6:	4a12      	ldr	r2, [pc, #72]	; (80114f0 <UART_SetConfig+0x914>)
 80114a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80114ac:	461a      	mov	r2, r3
 80114ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80114b4:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80114b6:	697b      	ldr	r3, [r7, #20]
 80114b8:	685a      	ldr	r2, [r3, #4]
 80114ba:	4613      	mov	r3, r2
 80114bc:	005b      	lsls	r3, r3, #1
 80114be:	4413      	add	r3, r2
 80114c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80114c2:	429a      	cmp	r2, r3
 80114c4:	d305      	bcc.n	80114d2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80114c6:	697b      	ldr	r3, [r7, #20]
 80114c8:	685b      	ldr	r3, [r3, #4]
 80114ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80114cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80114ce:	429a      	cmp	r2, r3
 80114d0:	d910      	bls.n	80114f4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80114d2:	2301      	movs	r3, #1
 80114d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80114d8:	e1d1      	b.n	801187e <UART_SetConfig+0xca2>
 80114da:	bf00      	nop
 80114dc:	40011c00 	.word	0x40011c00
 80114e0:	58024400 	.word	0x58024400
 80114e4:	58000c00 	.word	0x58000c00
 80114e8:	03d09000 	.word	0x03d09000
 80114ec:	003d0900 	.word	0x003d0900
 80114f0:	0801856c 	.word	0x0801856c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80114f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114f6:	2200      	movs	r2, #0
 80114f8:	60bb      	str	r3, [r7, #8]
 80114fa:	60fa      	str	r2, [r7, #12]
 80114fc:	697b      	ldr	r3, [r7, #20]
 80114fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011500:	4ac0      	ldr	r2, [pc, #768]	; (8011804 <UART_SetConfig+0xc28>)
 8011502:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011506:	b29b      	uxth	r3, r3
 8011508:	2200      	movs	r2, #0
 801150a:	603b      	str	r3, [r7, #0]
 801150c:	607a      	str	r2, [r7, #4]
 801150e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011512:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011516:	f7ee ff63 	bl	80003e0 <__aeabi_uldivmod>
 801151a:	4602      	mov	r2, r0
 801151c:	460b      	mov	r3, r1
 801151e:	4610      	mov	r0, r2
 8011520:	4619      	mov	r1, r3
 8011522:	f04f 0200 	mov.w	r2, #0
 8011526:	f04f 0300 	mov.w	r3, #0
 801152a:	020b      	lsls	r3, r1, #8
 801152c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011530:	0202      	lsls	r2, r0, #8
 8011532:	6979      	ldr	r1, [r7, #20]
 8011534:	6849      	ldr	r1, [r1, #4]
 8011536:	0849      	lsrs	r1, r1, #1
 8011538:	2000      	movs	r0, #0
 801153a:	460c      	mov	r4, r1
 801153c:	4605      	mov	r5, r0
 801153e:	eb12 0804 	adds.w	r8, r2, r4
 8011542:	eb43 0905 	adc.w	r9, r3, r5
 8011546:	697b      	ldr	r3, [r7, #20]
 8011548:	685b      	ldr	r3, [r3, #4]
 801154a:	2200      	movs	r2, #0
 801154c:	469a      	mov	sl, r3
 801154e:	4693      	mov	fp, r2
 8011550:	4652      	mov	r2, sl
 8011552:	465b      	mov	r3, fp
 8011554:	4640      	mov	r0, r8
 8011556:	4649      	mov	r1, r9
 8011558:	f7ee ff42 	bl	80003e0 <__aeabi_uldivmod>
 801155c:	4602      	mov	r2, r0
 801155e:	460b      	mov	r3, r1
 8011560:	4613      	mov	r3, r2
 8011562:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011566:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801156a:	d308      	bcc.n	801157e <UART_SetConfig+0x9a2>
 801156c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801156e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011572:	d204      	bcs.n	801157e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8011574:	697b      	ldr	r3, [r7, #20]
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801157a:	60da      	str	r2, [r3, #12]
 801157c:	e17f      	b.n	801187e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 801157e:	2301      	movs	r3, #1
 8011580:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011584:	e17b      	b.n	801187e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011586:	697b      	ldr	r3, [r7, #20]
 8011588:	69db      	ldr	r3, [r3, #28]
 801158a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801158e:	f040 80bd 	bne.w	801170c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8011592:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011596:	2b20      	cmp	r3, #32
 8011598:	dc48      	bgt.n	801162c <UART_SetConfig+0xa50>
 801159a:	2b00      	cmp	r3, #0
 801159c:	db7b      	blt.n	8011696 <UART_SetConfig+0xaba>
 801159e:	2b20      	cmp	r3, #32
 80115a0:	d879      	bhi.n	8011696 <UART_SetConfig+0xaba>
 80115a2:	a201      	add	r2, pc, #4	; (adr r2, 80115a8 <UART_SetConfig+0x9cc>)
 80115a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115a8:	08011633 	.word	0x08011633
 80115ac:	0801163b 	.word	0x0801163b
 80115b0:	08011697 	.word	0x08011697
 80115b4:	08011697 	.word	0x08011697
 80115b8:	08011643 	.word	0x08011643
 80115bc:	08011697 	.word	0x08011697
 80115c0:	08011697 	.word	0x08011697
 80115c4:	08011697 	.word	0x08011697
 80115c8:	08011653 	.word	0x08011653
 80115cc:	08011697 	.word	0x08011697
 80115d0:	08011697 	.word	0x08011697
 80115d4:	08011697 	.word	0x08011697
 80115d8:	08011697 	.word	0x08011697
 80115dc:	08011697 	.word	0x08011697
 80115e0:	08011697 	.word	0x08011697
 80115e4:	08011697 	.word	0x08011697
 80115e8:	08011663 	.word	0x08011663
 80115ec:	08011697 	.word	0x08011697
 80115f0:	08011697 	.word	0x08011697
 80115f4:	08011697 	.word	0x08011697
 80115f8:	08011697 	.word	0x08011697
 80115fc:	08011697 	.word	0x08011697
 8011600:	08011697 	.word	0x08011697
 8011604:	08011697 	.word	0x08011697
 8011608:	08011697 	.word	0x08011697
 801160c:	08011697 	.word	0x08011697
 8011610:	08011697 	.word	0x08011697
 8011614:	08011697 	.word	0x08011697
 8011618:	08011697 	.word	0x08011697
 801161c:	08011697 	.word	0x08011697
 8011620:	08011697 	.word	0x08011697
 8011624:	08011697 	.word	0x08011697
 8011628:	08011689 	.word	0x08011689
 801162c:	2b40      	cmp	r3, #64	; 0x40
 801162e:	d02e      	beq.n	801168e <UART_SetConfig+0xab2>
 8011630:	e031      	b.n	8011696 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011632:	f7f9 f8cd 	bl	800a7d0 <HAL_RCC_GetPCLK1Freq>
 8011636:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011638:	e033      	b.n	80116a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801163a:	f7f9 f8df 	bl	800a7fc <HAL_RCC_GetPCLK2Freq>
 801163e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011640:	e02f      	b.n	80116a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011646:	4618      	mov	r0, r3
 8011648:	f7fa ff76 	bl	800c538 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801164c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801164e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011650:	e027      	b.n	80116a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011652:	f107 0318 	add.w	r3, r7, #24
 8011656:	4618      	mov	r0, r3
 8011658:	f7fb f8c2 	bl	800c7e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801165c:	69fb      	ldr	r3, [r7, #28]
 801165e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011660:	e01f      	b.n	80116a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011662:	4b69      	ldr	r3, [pc, #420]	; (8011808 <UART_SetConfig+0xc2c>)
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	f003 0320 	and.w	r3, r3, #32
 801166a:	2b00      	cmp	r3, #0
 801166c:	d009      	beq.n	8011682 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801166e:	4b66      	ldr	r3, [pc, #408]	; (8011808 <UART_SetConfig+0xc2c>)
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	08db      	lsrs	r3, r3, #3
 8011674:	f003 0303 	and.w	r3, r3, #3
 8011678:	4a64      	ldr	r2, [pc, #400]	; (801180c <UART_SetConfig+0xc30>)
 801167a:	fa22 f303 	lsr.w	r3, r2, r3
 801167e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011680:	e00f      	b.n	80116a2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8011682:	4b62      	ldr	r3, [pc, #392]	; (801180c <UART_SetConfig+0xc30>)
 8011684:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011686:	e00c      	b.n	80116a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011688:	4b61      	ldr	r3, [pc, #388]	; (8011810 <UART_SetConfig+0xc34>)
 801168a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801168c:	e009      	b.n	80116a2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801168e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011692:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011694:	e005      	b.n	80116a2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8011696:	2300      	movs	r3, #0
 8011698:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801169a:	2301      	movs	r3, #1
 801169c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80116a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80116a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	f000 80ea 	beq.w	801187e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80116aa:	697b      	ldr	r3, [r7, #20]
 80116ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116ae:	4a55      	ldr	r2, [pc, #340]	; (8011804 <UART_SetConfig+0xc28>)
 80116b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80116b4:	461a      	mov	r2, r3
 80116b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80116bc:	005a      	lsls	r2, r3, #1
 80116be:	697b      	ldr	r3, [r7, #20]
 80116c0:	685b      	ldr	r3, [r3, #4]
 80116c2:	085b      	lsrs	r3, r3, #1
 80116c4:	441a      	add	r2, r3
 80116c6:	697b      	ldr	r3, [r7, #20]
 80116c8:	685b      	ldr	r3, [r3, #4]
 80116ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80116ce:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80116d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116d2:	2b0f      	cmp	r3, #15
 80116d4:	d916      	bls.n	8011704 <UART_SetConfig+0xb28>
 80116d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80116dc:	d212      	bcs.n	8011704 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80116de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116e0:	b29b      	uxth	r3, r3
 80116e2:	f023 030f 	bic.w	r3, r3, #15
 80116e6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80116e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116ea:	085b      	lsrs	r3, r3, #1
 80116ec:	b29b      	uxth	r3, r3
 80116ee:	f003 0307 	and.w	r3, r3, #7
 80116f2:	b29a      	uxth	r2, r3
 80116f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80116f6:	4313      	orrs	r3, r2
 80116f8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80116fa:	697b      	ldr	r3, [r7, #20]
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011700:	60da      	str	r2, [r3, #12]
 8011702:	e0bc      	b.n	801187e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011704:	2301      	movs	r3, #1
 8011706:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801170a:	e0b8      	b.n	801187e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 801170c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011710:	2b20      	cmp	r3, #32
 8011712:	dc4b      	bgt.n	80117ac <UART_SetConfig+0xbd0>
 8011714:	2b00      	cmp	r3, #0
 8011716:	f2c0 8087 	blt.w	8011828 <UART_SetConfig+0xc4c>
 801171a:	2b20      	cmp	r3, #32
 801171c:	f200 8084 	bhi.w	8011828 <UART_SetConfig+0xc4c>
 8011720:	a201      	add	r2, pc, #4	; (adr r2, 8011728 <UART_SetConfig+0xb4c>)
 8011722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011726:	bf00      	nop
 8011728:	080117b3 	.word	0x080117b3
 801172c:	080117bb 	.word	0x080117bb
 8011730:	08011829 	.word	0x08011829
 8011734:	08011829 	.word	0x08011829
 8011738:	080117c3 	.word	0x080117c3
 801173c:	08011829 	.word	0x08011829
 8011740:	08011829 	.word	0x08011829
 8011744:	08011829 	.word	0x08011829
 8011748:	080117d3 	.word	0x080117d3
 801174c:	08011829 	.word	0x08011829
 8011750:	08011829 	.word	0x08011829
 8011754:	08011829 	.word	0x08011829
 8011758:	08011829 	.word	0x08011829
 801175c:	08011829 	.word	0x08011829
 8011760:	08011829 	.word	0x08011829
 8011764:	08011829 	.word	0x08011829
 8011768:	080117e3 	.word	0x080117e3
 801176c:	08011829 	.word	0x08011829
 8011770:	08011829 	.word	0x08011829
 8011774:	08011829 	.word	0x08011829
 8011778:	08011829 	.word	0x08011829
 801177c:	08011829 	.word	0x08011829
 8011780:	08011829 	.word	0x08011829
 8011784:	08011829 	.word	0x08011829
 8011788:	08011829 	.word	0x08011829
 801178c:	08011829 	.word	0x08011829
 8011790:	08011829 	.word	0x08011829
 8011794:	08011829 	.word	0x08011829
 8011798:	08011829 	.word	0x08011829
 801179c:	08011829 	.word	0x08011829
 80117a0:	08011829 	.word	0x08011829
 80117a4:	08011829 	.word	0x08011829
 80117a8:	0801181b 	.word	0x0801181b
 80117ac:	2b40      	cmp	r3, #64	; 0x40
 80117ae:	d037      	beq.n	8011820 <UART_SetConfig+0xc44>
 80117b0:	e03a      	b.n	8011828 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80117b2:	f7f9 f80d 	bl	800a7d0 <HAL_RCC_GetPCLK1Freq>
 80117b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80117b8:	e03c      	b.n	8011834 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80117ba:	f7f9 f81f 	bl	800a7fc <HAL_RCC_GetPCLK2Freq>
 80117be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80117c0:	e038      	b.n	8011834 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80117c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80117c6:	4618      	mov	r0, r3
 80117c8:	f7fa feb6 	bl	800c538 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80117cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80117d0:	e030      	b.n	8011834 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80117d2:	f107 0318 	add.w	r3, r7, #24
 80117d6:	4618      	mov	r0, r3
 80117d8:	f7fb f802 	bl	800c7e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80117dc:	69fb      	ldr	r3, [r7, #28]
 80117de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80117e0:	e028      	b.n	8011834 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80117e2:	4b09      	ldr	r3, [pc, #36]	; (8011808 <UART_SetConfig+0xc2c>)
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	f003 0320 	and.w	r3, r3, #32
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d012      	beq.n	8011814 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80117ee:	4b06      	ldr	r3, [pc, #24]	; (8011808 <UART_SetConfig+0xc2c>)
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	08db      	lsrs	r3, r3, #3
 80117f4:	f003 0303 	and.w	r3, r3, #3
 80117f8:	4a04      	ldr	r2, [pc, #16]	; (801180c <UART_SetConfig+0xc30>)
 80117fa:	fa22 f303 	lsr.w	r3, r2, r3
 80117fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011800:	e018      	b.n	8011834 <UART_SetConfig+0xc58>
 8011802:	bf00      	nop
 8011804:	0801856c 	.word	0x0801856c
 8011808:	58024400 	.word	0x58024400
 801180c:	03d09000 	.word	0x03d09000
 8011810:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8011814:	4b24      	ldr	r3, [pc, #144]	; (80118a8 <UART_SetConfig+0xccc>)
 8011816:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011818:	e00c      	b.n	8011834 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801181a:	4b24      	ldr	r3, [pc, #144]	; (80118ac <UART_SetConfig+0xcd0>)
 801181c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801181e:	e009      	b.n	8011834 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011820:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011824:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011826:	e005      	b.n	8011834 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8011828:	2300      	movs	r3, #0
 801182a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801182c:	2301      	movs	r3, #1
 801182e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011832:	bf00      	nop
    }

    if (pclk != 0U)
 8011834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011836:	2b00      	cmp	r3, #0
 8011838:	d021      	beq.n	801187e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801183a:	697b      	ldr	r3, [r7, #20]
 801183c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801183e:	4a1c      	ldr	r2, [pc, #112]	; (80118b0 <UART_SetConfig+0xcd4>)
 8011840:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011844:	461a      	mov	r2, r3
 8011846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011848:	fbb3 f2f2 	udiv	r2, r3, r2
 801184c:	697b      	ldr	r3, [r7, #20]
 801184e:	685b      	ldr	r3, [r3, #4]
 8011850:	085b      	lsrs	r3, r3, #1
 8011852:	441a      	add	r2, r3
 8011854:	697b      	ldr	r3, [r7, #20]
 8011856:	685b      	ldr	r3, [r3, #4]
 8011858:	fbb2 f3f3 	udiv	r3, r2, r3
 801185c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801185e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011860:	2b0f      	cmp	r3, #15
 8011862:	d909      	bls.n	8011878 <UART_SetConfig+0xc9c>
 8011864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801186a:	d205      	bcs.n	8011878 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801186c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801186e:	b29a      	uxth	r2, r3
 8011870:	697b      	ldr	r3, [r7, #20]
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	60da      	str	r2, [r3, #12]
 8011876:	e002      	b.n	801187e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011878:	2301      	movs	r3, #1
 801187a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801187e:	697b      	ldr	r3, [r7, #20]
 8011880:	2201      	movs	r2, #1
 8011882:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011886:	697b      	ldr	r3, [r7, #20]
 8011888:	2201      	movs	r2, #1
 801188a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801188e:	697b      	ldr	r3, [r7, #20]
 8011890:	2200      	movs	r2, #0
 8011892:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8011894:	697b      	ldr	r3, [r7, #20]
 8011896:	2200      	movs	r2, #0
 8011898:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 801189a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 801189e:	4618      	mov	r0, r3
 80118a0:	3748      	adds	r7, #72	; 0x48
 80118a2:	46bd      	mov	sp, r7
 80118a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80118a8:	03d09000 	.word	0x03d09000
 80118ac:	003d0900 	.word	0x003d0900
 80118b0:	0801856c 	.word	0x0801856c

080118b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80118b4:	b480      	push	{r7}
 80118b6:	b083      	sub	sp, #12
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118c0:	f003 0301 	and.w	r3, r3, #1
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d00a      	beq.n	80118de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	685b      	ldr	r3, [r3, #4]
 80118ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	430a      	orrs	r2, r1
 80118dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118e2:	f003 0302 	and.w	r3, r3, #2
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d00a      	beq.n	8011900 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	685b      	ldr	r3, [r3, #4]
 80118f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	430a      	orrs	r2, r1
 80118fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011904:	f003 0304 	and.w	r3, r3, #4
 8011908:	2b00      	cmp	r3, #0
 801190a:	d00a      	beq.n	8011922 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	685b      	ldr	r3, [r3, #4]
 8011912:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	430a      	orrs	r2, r1
 8011920:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011926:	f003 0308 	and.w	r3, r3, #8
 801192a:	2b00      	cmp	r3, #0
 801192c:	d00a      	beq.n	8011944 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	685b      	ldr	r3, [r3, #4]
 8011934:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	430a      	orrs	r2, r1
 8011942:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011948:	f003 0310 	and.w	r3, r3, #16
 801194c:	2b00      	cmp	r3, #0
 801194e:	d00a      	beq.n	8011966 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	689b      	ldr	r3, [r3, #8]
 8011956:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	430a      	orrs	r2, r1
 8011964:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801196a:	f003 0320 	and.w	r3, r3, #32
 801196e:	2b00      	cmp	r3, #0
 8011970:	d00a      	beq.n	8011988 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	689b      	ldr	r3, [r3, #8]
 8011978:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	430a      	orrs	r2, r1
 8011986:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801198c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011990:	2b00      	cmp	r3, #0
 8011992:	d01a      	beq.n	80119ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	685b      	ldr	r3, [r3, #4]
 801199a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	430a      	orrs	r2, r1
 80119a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80119ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80119b2:	d10a      	bne.n	80119ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	681b      	ldr	r3, [r3, #0]
 80119b8:	685b      	ldr	r3, [r3, #4]
 80119ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	430a      	orrs	r2, r1
 80119c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d00a      	beq.n	80119ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	681b      	ldr	r3, [r3, #0]
 80119da:	685b      	ldr	r3, [r3, #4]
 80119dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	430a      	orrs	r2, r1
 80119ea:	605a      	str	r2, [r3, #4]
  }
}
 80119ec:	bf00      	nop
 80119ee:	370c      	adds	r7, #12
 80119f0:	46bd      	mov	sp, r7
 80119f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f6:	4770      	bx	lr

080119f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80119f8:	b580      	push	{r7, lr}
 80119fa:	b098      	sub	sp, #96	; 0x60
 80119fc:	af02      	add	r7, sp, #8
 80119fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	2200      	movs	r2, #0
 8011a04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011a08:	f7f2 f822 	bl	8003a50 <HAL_GetTick>
 8011a0c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	f003 0308 	and.w	r3, r3, #8
 8011a18:	2b08      	cmp	r3, #8
 8011a1a:	d12f      	bne.n	8011a7c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011a1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011a20:	9300      	str	r3, [sp, #0]
 8011a22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a24:	2200      	movs	r2, #0
 8011a26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011a2a:	6878      	ldr	r0, [r7, #4]
 8011a2c:	f000 f88e 	bl	8011b4c <UART_WaitOnFlagUntilTimeout>
 8011a30:	4603      	mov	r3, r0
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d022      	beq.n	8011a7c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a3e:	e853 3f00 	ldrex	r3, [r3]
 8011a42:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011a4a:	653b      	str	r3, [r7, #80]	; 0x50
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	461a      	mov	r2, r3
 8011a52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a54:	647b      	str	r3, [r7, #68]	; 0x44
 8011a56:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a58:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011a5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011a5c:	e841 2300 	strex	r3, r2, [r1]
 8011a60:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d1e6      	bne.n	8011a36 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	2220      	movs	r2, #32
 8011a6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	2200      	movs	r2, #0
 8011a74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011a78:	2303      	movs	r3, #3
 8011a7a:	e063      	b.n	8011b44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	f003 0304 	and.w	r3, r3, #4
 8011a86:	2b04      	cmp	r3, #4
 8011a88:	d149      	bne.n	8011b1e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011a8a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011a8e:	9300      	str	r3, [sp, #0]
 8011a90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011a92:	2200      	movs	r2, #0
 8011a94:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011a98:	6878      	ldr	r0, [r7, #4]
 8011a9a:	f000 f857 	bl	8011b4c <UART_WaitOnFlagUntilTimeout>
 8011a9e:	4603      	mov	r3, r0
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d03c      	beq.n	8011b1e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011aac:	e853 3f00 	ldrex	r3, [r3]
 8011ab0:	623b      	str	r3, [r7, #32]
   return(result);
 8011ab2:	6a3b      	ldr	r3, [r7, #32]
 8011ab4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011ab8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	461a      	mov	r2, r3
 8011ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ac2:	633b      	str	r3, [r7, #48]	; 0x30
 8011ac4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ac6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011ac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011aca:	e841 2300 	strex	r3, r2, [r1]
 8011ace:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d1e6      	bne.n	8011aa4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	3308      	adds	r3, #8
 8011adc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ade:	693b      	ldr	r3, [r7, #16]
 8011ae0:	e853 3f00 	ldrex	r3, [r3]
 8011ae4:	60fb      	str	r3, [r7, #12]
   return(result);
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	f023 0301 	bic.w	r3, r3, #1
 8011aec:	64bb      	str	r3, [r7, #72]	; 0x48
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	3308      	adds	r3, #8
 8011af4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011af6:	61fa      	str	r2, [r7, #28]
 8011af8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011afa:	69b9      	ldr	r1, [r7, #24]
 8011afc:	69fa      	ldr	r2, [r7, #28]
 8011afe:	e841 2300 	strex	r3, r2, [r1]
 8011b02:	617b      	str	r3, [r7, #20]
   return(result);
 8011b04:	697b      	ldr	r3, [r7, #20]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d1e5      	bne.n	8011ad6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	2220      	movs	r2, #32
 8011b0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	2200      	movs	r2, #0
 8011b16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011b1a:	2303      	movs	r3, #3
 8011b1c:	e012      	b.n	8011b44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	2220      	movs	r2, #32
 8011b22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	2220      	movs	r2, #32
 8011b2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	2200      	movs	r2, #0
 8011b32:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	2200      	movs	r2, #0
 8011b38:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	2200      	movs	r2, #0
 8011b3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011b42:	2300      	movs	r3, #0
}
 8011b44:	4618      	mov	r0, r3
 8011b46:	3758      	adds	r7, #88	; 0x58
 8011b48:	46bd      	mov	sp, r7
 8011b4a:	bd80      	pop	{r7, pc}

08011b4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011b4c:	b580      	push	{r7, lr}
 8011b4e:	b084      	sub	sp, #16
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	60f8      	str	r0, [r7, #12]
 8011b54:	60b9      	str	r1, [r7, #8]
 8011b56:	603b      	str	r3, [r7, #0]
 8011b58:	4613      	mov	r3, r2
 8011b5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011b5c:	e049      	b.n	8011bf2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8011b5e:	69bb      	ldr	r3, [r7, #24]
 8011b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b64:	d045      	beq.n	8011bf2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011b66:	f7f1 ff73 	bl	8003a50 <HAL_GetTick>
 8011b6a:	4602      	mov	r2, r0
 8011b6c:	683b      	ldr	r3, [r7, #0]
 8011b6e:	1ad3      	subs	r3, r2, r3
 8011b70:	69ba      	ldr	r2, [r7, #24]
 8011b72:	429a      	cmp	r2, r3
 8011b74:	d302      	bcc.n	8011b7c <UART_WaitOnFlagUntilTimeout+0x30>
 8011b76:	69bb      	ldr	r3, [r7, #24]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d101      	bne.n	8011b80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011b7c:	2303      	movs	r3, #3
 8011b7e:	e048      	b.n	8011c12 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	f003 0304 	and.w	r3, r3, #4
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d031      	beq.n	8011bf2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	69db      	ldr	r3, [r3, #28]
 8011b94:	f003 0308 	and.w	r3, r3, #8
 8011b98:	2b08      	cmp	r3, #8
 8011b9a:	d110      	bne.n	8011bbe <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	2208      	movs	r2, #8
 8011ba2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8011ba4:	68f8      	ldr	r0, [r7, #12]
 8011ba6:	f000 f839 	bl	8011c1c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011baa:	68fb      	ldr	r3, [r7, #12]
 8011bac:	2208      	movs	r2, #8
 8011bae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	2200      	movs	r2, #0
 8011bb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8011bba:	2301      	movs	r3, #1
 8011bbc:	e029      	b.n	8011c12 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	69db      	ldr	r3, [r3, #28]
 8011bc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011bc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011bcc:	d111      	bne.n	8011bf2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011bd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011bd8:	68f8      	ldr	r0, [r7, #12]
 8011bda:	f000 f81f 	bl	8011c1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011bde:	68fb      	ldr	r3, [r7, #12]
 8011be0:	2220      	movs	r2, #32
 8011be2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	2200      	movs	r2, #0
 8011bea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011bee:	2303      	movs	r3, #3
 8011bf0:	e00f      	b.n	8011c12 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	69da      	ldr	r2, [r3, #28]
 8011bf8:	68bb      	ldr	r3, [r7, #8]
 8011bfa:	4013      	ands	r3, r2
 8011bfc:	68ba      	ldr	r2, [r7, #8]
 8011bfe:	429a      	cmp	r2, r3
 8011c00:	bf0c      	ite	eq
 8011c02:	2301      	moveq	r3, #1
 8011c04:	2300      	movne	r3, #0
 8011c06:	b2db      	uxtb	r3, r3
 8011c08:	461a      	mov	r2, r3
 8011c0a:	79fb      	ldrb	r3, [r7, #7]
 8011c0c:	429a      	cmp	r2, r3
 8011c0e:	d0a6      	beq.n	8011b5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011c10:	2300      	movs	r3, #0
}
 8011c12:	4618      	mov	r0, r3
 8011c14:	3710      	adds	r7, #16
 8011c16:	46bd      	mov	sp, r7
 8011c18:	bd80      	pop	{r7, pc}
	...

08011c1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011c1c:	b480      	push	{r7}
 8011c1e:	b095      	sub	sp, #84	; 0x54
 8011c20:	af00      	add	r7, sp, #0
 8011c22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c2c:	e853 3f00 	ldrex	r3, [r3]
 8011c30:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011c38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	461a      	mov	r2, r3
 8011c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c42:	643b      	str	r3, [r7, #64]	; 0x40
 8011c44:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c46:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011c48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011c4a:	e841 2300 	strex	r3, r2, [r1]
 8011c4e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d1e6      	bne.n	8011c24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	3308      	adds	r3, #8
 8011c5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c5e:	6a3b      	ldr	r3, [r7, #32]
 8011c60:	e853 3f00 	ldrex	r3, [r3]
 8011c64:	61fb      	str	r3, [r7, #28]
   return(result);
 8011c66:	69fa      	ldr	r2, [r7, #28]
 8011c68:	4b1e      	ldr	r3, [pc, #120]	; (8011ce4 <UART_EndRxTransfer+0xc8>)
 8011c6a:	4013      	ands	r3, r2
 8011c6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	3308      	adds	r3, #8
 8011c74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011c76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011c78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011c7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011c7e:	e841 2300 	strex	r3, r2, [r1]
 8011c82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d1e5      	bne.n	8011c56 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c8e:	2b01      	cmp	r3, #1
 8011c90:	d118      	bne.n	8011cc4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	e853 3f00 	ldrex	r3, [r3]
 8011c9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8011ca0:	68bb      	ldr	r3, [r7, #8]
 8011ca2:	f023 0310 	bic.w	r3, r3, #16
 8011ca6:	647b      	str	r3, [r7, #68]	; 0x44
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	461a      	mov	r2, r3
 8011cae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011cb0:	61bb      	str	r3, [r7, #24]
 8011cb2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cb4:	6979      	ldr	r1, [r7, #20]
 8011cb6:	69ba      	ldr	r2, [r7, #24]
 8011cb8:	e841 2300 	strex	r3, r2, [r1]
 8011cbc:	613b      	str	r3, [r7, #16]
   return(result);
 8011cbe:	693b      	ldr	r3, [r7, #16]
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d1e6      	bne.n	8011c92 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	2220      	movs	r2, #32
 8011cc8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	2200      	movs	r2, #0
 8011cd0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	2200      	movs	r2, #0
 8011cd6:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011cd8:	bf00      	nop
 8011cda:	3754      	adds	r7, #84	; 0x54
 8011cdc:	46bd      	mov	sp, r7
 8011cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce2:	4770      	bx	lr
 8011ce4:	effffffe 	.word	0xeffffffe

08011ce8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011ce8:	b480      	push	{r7}
 8011cea:	b085      	sub	sp, #20
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011cf6:	2b01      	cmp	r3, #1
 8011cf8:	d101      	bne.n	8011cfe <HAL_UARTEx_DisableFifoMode+0x16>
 8011cfa:	2302      	movs	r3, #2
 8011cfc:	e027      	b.n	8011d4e <HAL_UARTEx_DisableFifoMode+0x66>
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	2201      	movs	r2, #1
 8011d02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	2224      	movs	r2, #36	; 0x24
 8011d0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	681a      	ldr	r2, [r3, #0]
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	f022 0201 	bic.w	r2, r2, #1
 8011d24:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011d2c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	2200      	movs	r2, #0
 8011d32:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	68fa      	ldr	r2, [r7, #12]
 8011d3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	2220      	movs	r2, #32
 8011d40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	2200      	movs	r2, #0
 8011d48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011d4c:	2300      	movs	r3, #0
}
 8011d4e:	4618      	mov	r0, r3
 8011d50:	3714      	adds	r7, #20
 8011d52:	46bd      	mov	sp, r7
 8011d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d58:	4770      	bx	lr

08011d5a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011d5a:	b580      	push	{r7, lr}
 8011d5c:	b084      	sub	sp, #16
 8011d5e:	af00      	add	r7, sp, #0
 8011d60:	6078      	str	r0, [r7, #4]
 8011d62:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011d6a:	2b01      	cmp	r3, #1
 8011d6c:	d101      	bne.n	8011d72 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011d6e:	2302      	movs	r3, #2
 8011d70:	e02d      	b.n	8011dce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	2201      	movs	r2, #1
 8011d76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	2224      	movs	r2, #36	; 0x24
 8011d7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	681a      	ldr	r2, [r3, #0]
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	f022 0201 	bic.w	r2, r2, #1
 8011d98:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	689b      	ldr	r3, [r3, #8]
 8011da0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	683a      	ldr	r2, [r7, #0]
 8011daa:	430a      	orrs	r2, r1
 8011dac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011dae:	6878      	ldr	r0, [r7, #4]
 8011db0:	f000 f850 	bl	8011e54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	68fa      	ldr	r2, [r7, #12]
 8011dba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	2220      	movs	r2, #32
 8011dc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	2200      	movs	r2, #0
 8011dc8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011dcc:	2300      	movs	r3, #0
}
 8011dce:	4618      	mov	r0, r3
 8011dd0:	3710      	adds	r7, #16
 8011dd2:	46bd      	mov	sp, r7
 8011dd4:	bd80      	pop	{r7, pc}

08011dd6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011dd6:	b580      	push	{r7, lr}
 8011dd8:	b084      	sub	sp, #16
 8011dda:	af00      	add	r7, sp, #0
 8011ddc:	6078      	str	r0, [r7, #4]
 8011dde:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011de6:	2b01      	cmp	r3, #1
 8011de8:	d101      	bne.n	8011dee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011dea:	2302      	movs	r3, #2
 8011dec:	e02d      	b.n	8011e4a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	2201      	movs	r2, #1
 8011df2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	2224      	movs	r2, #36	; 0x24
 8011dfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	681a      	ldr	r2, [r3, #0]
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	f022 0201 	bic.w	r2, r2, #1
 8011e14:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	689b      	ldr	r3, [r3, #8]
 8011e1c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	681b      	ldr	r3, [r3, #0]
 8011e24:	683a      	ldr	r2, [r7, #0]
 8011e26:	430a      	orrs	r2, r1
 8011e28:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011e2a:	6878      	ldr	r0, [r7, #4]
 8011e2c:	f000 f812 	bl	8011e54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	68fa      	ldr	r2, [r7, #12]
 8011e36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	2220      	movs	r2, #32
 8011e3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	2200      	movs	r2, #0
 8011e44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011e48:	2300      	movs	r3, #0
}
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	3710      	adds	r7, #16
 8011e4e:	46bd      	mov	sp, r7
 8011e50:	bd80      	pop	{r7, pc}
	...

08011e54 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011e54:	b480      	push	{r7}
 8011e56:	b085      	sub	sp, #20
 8011e58:	af00      	add	r7, sp, #0
 8011e5a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d108      	bne.n	8011e76 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	2201      	movs	r2, #1
 8011e68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	2201      	movs	r2, #1
 8011e70:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011e74:	e031      	b.n	8011eda <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011e76:	2310      	movs	r3, #16
 8011e78:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011e7a:	2310      	movs	r3, #16
 8011e7c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	689b      	ldr	r3, [r3, #8]
 8011e84:	0e5b      	lsrs	r3, r3, #25
 8011e86:	b2db      	uxtb	r3, r3
 8011e88:	f003 0307 	and.w	r3, r3, #7
 8011e8c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	689b      	ldr	r3, [r3, #8]
 8011e94:	0f5b      	lsrs	r3, r3, #29
 8011e96:	b2db      	uxtb	r3, r3
 8011e98:	f003 0307 	and.w	r3, r3, #7
 8011e9c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011e9e:	7bbb      	ldrb	r3, [r7, #14]
 8011ea0:	7b3a      	ldrb	r2, [r7, #12]
 8011ea2:	4911      	ldr	r1, [pc, #68]	; (8011ee8 <UARTEx_SetNbDataToProcess+0x94>)
 8011ea4:	5c8a      	ldrb	r2, [r1, r2]
 8011ea6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011eaa:	7b3a      	ldrb	r2, [r7, #12]
 8011eac:	490f      	ldr	r1, [pc, #60]	; (8011eec <UARTEx_SetNbDataToProcess+0x98>)
 8011eae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011eb0:	fb93 f3f2 	sdiv	r3, r3, r2
 8011eb4:	b29a      	uxth	r2, r3
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011ebc:	7bfb      	ldrb	r3, [r7, #15]
 8011ebe:	7b7a      	ldrb	r2, [r7, #13]
 8011ec0:	4909      	ldr	r1, [pc, #36]	; (8011ee8 <UARTEx_SetNbDataToProcess+0x94>)
 8011ec2:	5c8a      	ldrb	r2, [r1, r2]
 8011ec4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011ec8:	7b7a      	ldrb	r2, [r7, #13]
 8011eca:	4908      	ldr	r1, [pc, #32]	; (8011eec <UARTEx_SetNbDataToProcess+0x98>)
 8011ecc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011ece:	fb93 f3f2 	sdiv	r3, r3, r2
 8011ed2:	b29a      	uxth	r2, r3
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011eda:	bf00      	nop
 8011edc:	3714      	adds	r7, #20
 8011ede:	46bd      	mov	sp, r7
 8011ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ee4:	4770      	bx	lr
 8011ee6:	bf00      	nop
 8011ee8:	08018584 	.word	0x08018584
 8011eec:	0801858c 	.word	0x0801858c

08011ef0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8011ef0:	b084      	sub	sp, #16
 8011ef2:	b480      	push	{r7}
 8011ef4:	b085      	sub	sp, #20
 8011ef6:	af00      	add	r7, sp, #0
 8011ef8:	6078      	str	r0, [r7, #4]
 8011efa:	f107 001c 	add.w	r0, r7, #28
 8011efe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8011f02:	2300      	movs	r3, #0
 8011f04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8011f06:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8011f08:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8011f0a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8011f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8011f0e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8011f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8011f12:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8011f16:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8011f18:	68fa      	ldr	r2, [r7, #12]
 8011f1a:	4313      	orrs	r3, r2
 8011f1c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	685a      	ldr	r2, [r3, #4]
 8011f22:	4b07      	ldr	r3, [pc, #28]	; (8011f40 <SDMMC_Init+0x50>)
 8011f24:	4013      	ands	r3, r2
 8011f26:	68fa      	ldr	r2, [r7, #12]
 8011f28:	431a      	orrs	r2, r3
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8011f2e:	2300      	movs	r3, #0
}
 8011f30:	4618      	mov	r0, r3
 8011f32:	3714      	adds	r7, #20
 8011f34:	46bd      	mov	sp, r7
 8011f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f3a:	b004      	add	sp, #16
 8011f3c:	4770      	bx	lr
 8011f3e:	bf00      	nop
 8011f40:	ffc02c00 	.word	0xffc02c00

08011f44 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8011f44:	b480      	push	{r7}
 8011f46:	b083      	sub	sp, #12
 8011f48:	af00      	add	r7, sp, #0
 8011f4a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8011f52:	4618      	mov	r0, r3
 8011f54:	370c      	adds	r7, #12
 8011f56:	46bd      	mov	sp, r7
 8011f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f5c:	4770      	bx	lr

08011f5e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8011f5e:	b480      	push	{r7}
 8011f60:	b083      	sub	sp, #12
 8011f62:	af00      	add	r7, sp, #0
 8011f64:	6078      	str	r0, [r7, #4]
 8011f66:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8011f68:	683b      	ldr	r3, [r7, #0]
 8011f6a:	681a      	ldr	r2, [r3, #0]
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011f72:	2300      	movs	r3, #0
}
 8011f74:	4618      	mov	r0, r3
 8011f76:	370c      	adds	r7, #12
 8011f78:	46bd      	mov	sp, r7
 8011f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f7e:	4770      	bx	lr

08011f80 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8011f80:	b480      	push	{r7}
 8011f82:	b083      	sub	sp, #12
 8011f84:	af00      	add	r7, sp, #0
 8011f86:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	f043 0203 	orr.w	r2, r3, #3
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8011f94:	2300      	movs	r3, #0
}
 8011f96:	4618      	mov	r0, r3
 8011f98:	370c      	adds	r7, #12
 8011f9a:	46bd      	mov	sp, r7
 8011f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa0:	4770      	bx	lr

08011fa2 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8011fa2:	b480      	push	{r7}
 8011fa4:	b083      	sub	sp, #12
 8011fa6:	af00      	add	r7, sp, #0
 8011fa8:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	f003 0303 	and.w	r3, r3, #3
}
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	370c      	adds	r7, #12
 8011fb6:	46bd      	mov	sp, r7
 8011fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fbc:	4770      	bx	lr
	...

08011fc0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8011fc0:	b480      	push	{r7}
 8011fc2:	b085      	sub	sp, #20
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	6078      	str	r0, [r7, #4]
 8011fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011fca:	2300      	movs	r3, #0
 8011fcc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8011fce:	683b      	ldr	r3, [r7, #0]
 8011fd0:	681a      	ldr	r2, [r3, #0]
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011fd6:	683b      	ldr	r3, [r7, #0]
 8011fd8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8011fda:	683b      	ldr	r3, [r7, #0]
 8011fdc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011fde:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8011fe0:	683b      	ldr	r3, [r7, #0]
 8011fe2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8011fe4:	431a      	orrs	r2, r3
                       Command->CPSM);
 8011fe6:	683b      	ldr	r3, [r7, #0]
 8011fe8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8011fea:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011fec:	68fa      	ldr	r2, [r7, #12]
 8011fee:	4313      	orrs	r3, r2
 8011ff0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	68da      	ldr	r2, [r3, #12]
 8011ff6:	4b06      	ldr	r3, [pc, #24]	; (8012010 <SDMMC_SendCommand+0x50>)
 8011ff8:	4013      	ands	r3, r2
 8011ffa:	68fa      	ldr	r2, [r7, #12]
 8011ffc:	431a      	orrs	r2, r3
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012002:	2300      	movs	r3, #0
}
 8012004:	4618      	mov	r0, r3
 8012006:	3714      	adds	r7, #20
 8012008:	46bd      	mov	sp, r7
 801200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801200e:	4770      	bx	lr
 8012010:	fffee0c0 	.word	0xfffee0c0

08012014 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8012014:	b480      	push	{r7}
 8012016:	b083      	sub	sp, #12
 8012018:	af00      	add	r7, sp, #0
 801201a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	691b      	ldr	r3, [r3, #16]
 8012020:	b2db      	uxtb	r3, r3
}
 8012022:	4618      	mov	r0, r3
 8012024:	370c      	adds	r7, #12
 8012026:	46bd      	mov	sp, r7
 8012028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801202c:	4770      	bx	lr

0801202e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 801202e:	b480      	push	{r7}
 8012030:	b085      	sub	sp, #20
 8012032:	af00      	add	r7, sp, #0
 8012034:	6078      	str	r0, [r7, #4]
 8012036:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	3314      	adds	r3, #20
 801203c:	461a      	mov	r2, r3
 801203e:	683b      	ldr	r3, [r7, #0]
 8012040:	4413      	add	r3, r2
 8012042:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	681b      	ldr	r3, [r3, #0]
}
 8012048:	4618      	mov	r0, r3
 801204a:	3714      	adds	r7, #20
 801204c:	46bd      	mov	sp, r7
 801204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012052:	4770      	bx	lr

08012054 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8012054:	b480      	push	{r7}
 8012056:	b085      	sub	sp, #20
 8012058:	af00      	add	r7, sp, #0
 801205a:	6078      	str	r0, [r7, #4]
 801205c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801205e:	2300      	movs	r3, #0
 8012060:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8012062:	683b      	ldr	r3, [r7, #0]
 8012064:	681a      	ldr	r2, [r3, #0]
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 801206a:	683b      	ldr	r3, [r7, #0]
 801206c:	685a      	ldr	r2, [r3, #4]
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012072:	683b      	ldr	r3, [r7, #0]
 8012074:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8012076:	683b      	ldr	r3, [r7, #0]
 8012078:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801207a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 801207c:	683b      	ldr	r3, [r7, #0]
 801207e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8012080:	431a      	orrs	r2, r3
                       Data->DPSM);
 8012082:	683b      	ldr	r3, [r7, #0]
 8012084:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8012086:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012088:	68fa      	ldr	r2, [r7, #12]
 801208a:	4313      	orrs	r3, r2
 801208c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012092:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	431a      	orrs	r2, r3
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801209e:	2300      	movs	r3, #0

}
 80120a0:	4618      	mov	r0, r3
 80120a2:	3714      	adds	r7, #20
 80120a4:	46bd      	mov	sp, r7
 80120a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120aa:	4770      	bx	lr

080120ac <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80120ac:	b580      	push	{r7, lr}
 80120ae:	b088      	sub	sp, #32
 80120b0:	af00      	add	r7, sp, #0
 80120b2:	6078      	str	r0, [r7, #4]
 80120b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80120b6:	683b      	ldr	r3, [r7, #0]
 80120b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80120ba:	2310      	movs	r3, #16
 80120bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80120be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80120c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80120c4:	2300      	movs	r3, #0
 80120c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80120c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80120cc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80120ce:	f107 0308 	add.w	r3, r7, #8
 80120d2:	4619      	mov	r1, r3
 80120d4:	6878      	ldr	r0, [r7, #4]
 80120d6:	f7ff ff73 	bl	8011fc0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80120da:	f241 3288 	movw	r2, #5000	; 0x1388
 80120de:	2110      	movs	r1, #16
 80120e0:	6878      	ldr	r0, [r7, #4]
 80120e2:	f000 fa5f 	bl	80125a4 <SDMMC_GetCmdResp1>
 80120e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80120e8:	69fb      	ldr	r3, [r7, #28]
}
 80120ea:	4618      	mov	r0, r3
 80120ec:	3720      	adds	r7, #32
 80120ee:	46bd      	mov	sp, r7
 80120f0:	bd80      	pop	{r7, pc}

080120f2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80120f2:	b580      	push	{r7, lr}
 80120f4:	b088      	sub	sp, #32
 80120f6:	af00      	add	r7, sp, #0
 80120f8:	6078      	str	r0, [r7, #4]
 80120fa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80120fc:	683b      	ldr	r3, [r7, #0]
 80120fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8012100:	2311      	movs	r3, #17
 8012102:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012104:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012108:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801210a:	2300      	movs	r3, #0
 801210c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801210e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012112:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012114:	f107 0308 	add.w	r3, r7, #8
 8012118:	4619      	mov	r1, r3
 801211a:	6878      	ldr	r0, [r7, #4]
 801211c:	f7ff ff50 	bl	8011fc0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012120:	f241 3288 	movw	r2, #5000	; 0x1388
 8012124:	2111      	movs	r1, #17
 8012126:	6878      	ldr	r0, [r7, #4]
 8012128:	f000 fa3c 	bl	80125a4 <SDMMC_GetCmdResp1>
 801212c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801212e:	69fb      	ldr	r3, [r7, #28]
}
 8012130:	4618      	mov	r0, r3
 8012132:	3720      	adds	r7, #32
 8012134:	46bd      	mov	sp, r7
 8012136:	bd80      	pop	{r7, pc}

08012138 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012138:	b580      	push	{r7, lr}
 801213a:	b088      	sub	sp, #32
 801213c:	af00      	add	r7, sp, #0
 801213e:	6078      	str	r0, [r7, #4]
 8012140:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012142:	683b      	ldr	r3, [r7, #0]
 8012144:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8012146:	2312      	movs	r3, #18
 8012148:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801214a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801214e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012150:	2300      	movs	r3, #0
 8012152:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012154:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012158:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801215a:	f107 0308 	add.w	r3, r7, #8
 801215e:	4619      	mov	r1, r3
 8012160:	6878      	ldr	r0, [r7, #4]
 8012162:	f7ff ff2d 	bl	8011fc0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012166:	f241 3288 	movw	r2, #5000	; 0x1388
 801216a:	2112      	movs	r1, #18
 801216c:	6878      	ldr	r0, [r7, #4]
 801216e:	f000 fa19 	bl	80125a4 <SDMMC_GetCmdResp1>
 8012172:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012174:	69fb      	ldr	r3, [r7, #28]
}
 8012176:	4618      	mov	r0, r3
 8012178:	3720      	adds	r7, #32
 801217a:	46bd      	mov	sp, r7
 801217c:	bd80      	pop	{r7, pc}

0801217e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801217e:	b580      	push	{r7, lr}
 8012180:	b088      	sub	sp, #32
 8012182:	af00      	add	r7, sp, #0
 8012184:	6078      	str	r0, [r7, #4]
 8012186:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012188:	683b      	ldr	r3, [r7, #0]
 801218a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 801218c:	2318      	movs	r3, #24
 801218e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012190:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012194:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012196:	2300      	movs	r3, #0
 8012198:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801219a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801219e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80121a0:	f107 0308 	add.w	r3, r7, #8
 80121a4:	4619      	mov	r1, r3
 80121a6:	6878      	ldr	r0, [r7, #4]
 80121a8:	f7ff ff0a 	bl	8011fc0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80121ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80121b0:	2118      	movs	r1, #24
 80121b2:	6878      	ldr	r0, [r7, #4]
 80121b4:	f000 f9f6 	bl	80125a4 <SDMMC_GetCmdResp1>
 80121b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80121ba:	69fb      	ldr	r3, [r7, #28]
}
 80121bc:	4618      	mov	r0, r3
 80121be:	3720      	adds	r7, #32
 80121c0:	46bd      	mov	sp, r7
 80121c2:	bd80      	pop	{r7, pc}

080121c4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80121c4:	b580      	push	{r7, lr}
 80121c6:	b088      	sub	sp, #32
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	6078      	str	r0, [r7, #4]
 80121cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80121ce:	683b      	ldr	r3, [r7, #0]
 80121d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80121d2:	2319      	movs	r3, #25
 80121d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80121d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80121da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80121dc:	2300      	movs	r3, #0
 80121de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80121e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80121e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80121e6:	f107 0308 	add.w	r3, r7, #8
 80121ea:	4619      	mov	r1, r3
 80121ec:	6878      	ldr	r0, [r7, #4]
 80121ee:	f7ff fee7 	bl	8011fc0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80121f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80121f6:	2119      	movs	r1, #25
 80121f8:	6878      	ldr	r0, [r7, #4]
 80121fa:	f000 f9d3 	bl	80125a4 <SDMMC_GetCmdResp1>
 80121fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012200:	69fb      	ldr	r3, [r7, #28]
}
 8012202:	4618      	mov	r0, r3
 8012204:	3720      	adds	r7, #32
 8012206:	46bd      	mov	sp, r7
 8012208:	bd80      	pop	{r7, pc}
	...

0801220c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 801220c:	b580      	push	{r7, lr}
 801220e:	b088      	sub	sp, #32
 8012210:	af00      	add	r7, sp, #0
 8012212:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8012214:	2300      	movs	r3, #0
 8012216:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8012218:	230c      	movs	r3, #12
 801221a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801221c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012220:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012222:	2300      	movs	r3, #0
 8012224:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012226:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801222a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	68db      	ldr	r3, [r3, #12]
 8012230:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	68db      	ldr	r3, [r3, #12]
 801223c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012244:	f107 0308 	add.w	r3, r7, #8
 8012248:	4619      	mov	r1, r3
 801224a:	6878      	ldr	r0, [r7, #4]
 801224c:	f7ff feb8 	bl	8011fc0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8012250:	4a0b      	ldr	r2, [pc, #44]	; (8012280 <SDMMC_CmdStopTransfer+0x74>)
 8012252:	210c      	movs	r1, #12
 8012254:	6878      	ldr	r0, [r7, #4]
 8012256:	f000 f9a5 	bl	80125a4 <SDMMC_GetCmdResp1>
 801225a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	68db      	ldr	r3, [r3, #12]
 8012260:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012268:	69fb      	ldr	r3, [r7, #28]
 801226a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801226e:	d101      	bne.n	8012274 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8012270:	2300      	movs	r3, #0
 8012272:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8012274:	69fb      	ldr	r3, [r7, #28]
}
 8012276:	4618      	mov	r0, r3
 8012278:	3720      	adds	r7, #32
 801227a:	46bd      	mov	sp, r7
 801227c:	bd80      	pop	{r7, pc}
 801227e:	bf00      	nop
 8012280:	05f5e100 	.word	0x05f5e100

08012284 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8012284:	b580      	push	{r7, lr}
 8012286:	b088      	sub	sp, #32
 8012288:	af00      	add	r7, sp, #0
 801228a:	6078      	str	r0, [r7, #4]
 801228c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801228e:	683b      	ldr	r3, [r7, #0]
 8012290:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8012292:	2307      	movs	r3, #7
 8012294:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012296:	f44f 7380 	mov.w	r3, #256	; 0x100
 801229a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801229c:	2300      	movs	r3, #0
 801229e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80122a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80122a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80122a6:	f107 0308 	add.w	r3, r7, #8
 80122aa:	4619      	mov	r1, r3
 80122ac:	6878      	ldr	r0, [r7, #4]
 80122ae:	f7ff fe87 	bl	8011fc0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80122b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80122b6:	2107      	movs	r1, #7
 80122b8:	6878      	ldr	r0, [r7, #4]
 80122ba:	f000 f973 	bl	80125a4 <SDMMC_GetCmdResp1>
 80122be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80122c0:	69fb      	ldr	r3, [r7, #28]
}
 80122c2:	4618      	mov	r0, r3
 80122c4:	3720      	adds	r7, #32
 80122c6:	46bd      	mov	sp, r7
 80122c8:	bd80      	pop	{r7, pc}

080122ca <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80122ca:	b580      	push	{r7, lr}
 80122cc:	b088      	sub	sp, #32
 80122ce:	af00      	add	r7, sp, #0
 80122d0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80122d2:	2300      	movs	r3, #0
 80122d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80122d6:	2300      	movs	r3, #0
 80122d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80122da:	2300      	movs	r3, #0
 80122dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80122de:	2300      	movs	r3, #0
 80122e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80122e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80122e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80122e8:	f107 0308 	add.w	r3, r7, #8
 80122ec:	4619      	mov	r1, r3
 80122ee:	6878      	ldr	r0, [r7, #4]
 80122f0:	f7ff fe66 	bl	8011fc0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80122f4:	6878      	ldr	r0, [r7, #4]
 80122f6:	f000 fb97 	bl	8012a28 <SDMMC_GetCmdError>
 80122fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80122fc:	69fb      	ldr	r3, [r7, #28]
}
 80122fe:	4618      	mov	r0, r3
 8012300:	3720      	adds	r7, #32
 8012302:	46bd      	mov	sp, r7
 8012304:	bd80      	pop	{r7, pc}

08012306 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8012306:	b580      	push	{r7, lr}
 8012308:	b088      	sub	sp, #32
 801230a:	af00      	add	r7, sp, #0
 801230c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801230e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8012312:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8012314:	2308      	movs	r3, #8
 8012316:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012318:	f44f 7380 	mov.w	r3, #256	; 0x100
 801231c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801231e:	2300      	movs	r3, #0
 8012320:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012322:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012326:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012328:	f107 0308 	add.w	r3, r7, #8
 801232c:	4619      	mov	r1, r3
 801232e:	6878      	ldr	r0, [r7, #4]
 8012330:	f7ff fe46 	bl	8011fc0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8012334:	6878      	ldr	r0, [r7, #4]
 8012336:	f000 fb29 	bl	801298c <SDMMC_GetCmdResp7>
 801233a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801233c:	69fb      	ldr	r3, [r7, #28]
}
 801233e:	4618      	mov	r0, r3
 8012340:	3720      	adds	r7, #32
 8012342:	46bd      	mov	sp, r7
 8012344:	bd80      	pop	{r7, pc}

08012346 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012346:	b580      	push	{r7, lr}
 8012348:	b088      	sub	sp, #32
 801234a:	af00      	add	r7, sp, #0
 801234c:	6078      	str	r0, [r7, #4]
 801234e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8012350:	683b      	ldr	r3, [r7, #0]
 8012352:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8012354:	2337      	movs	r3, #55	; 0x37
 8012356:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012358:	f44f 7380 	mov.w	r3, #256	; 0x100
 801235c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801235e:	2300      	movs	r3, #0
 8012360:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012362:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012366:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012368:	f107 0308 	add.w	r3, r7, #8
 801236c:	4619      	mov	r1, r3
 801236e:	6878      	ldr	r0, [r7, #4]
 8012370:	f7ff fe26 	bl	8011fc0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8012374:	f241 3288 	movw	r2, #5000	; 0x1388
 8012378:	2137      	movs	r1, #55	; 0x37
 801237a:	6878      	ldr	r0, [r7, #4]
 801237c:	f000 f912 	bl	80125a4 <SDMMC_GetCmdResp1>
 8012380:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012382:	69fb      	ldr	r3, [r7, #28]
}
 8012384:	4618      	mov	r0, r3
 8012386:	3720      	adds	r7, #32
 8012388:	46bd      	mov	sp, r7
 801238a:	bd80      	pop	{r7, pc}

0801238c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801238c:	b580      	push	{r7, lr}
 801238e:	b088      	sub	sp, #32
 8012390:	af00      	add	r7, sp, #0
 8012392:	6078      	str	r0, [r7, #4]
 8012394:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8012396:	683b      	ldr	r3, [r7, #0]
 8012398:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801239a:	2329      	movs	r3, #41	; 0x29
 801239c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801239e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80123a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80123a4:	2300      	movs	r3, #0
 80123a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80123a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80123ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80123ae:	f107 0308 	add.w	r3, r7, #8
 80123b2:	4619      	mov	r1, r3
 80123b4:	6878      	ldr	r0, [r7, #4]
 80123b6:	f7ff fe03 	bl	8011fc0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80123ba:	6878      	ldr	r0, [r7, #4]
 80123bc:	f000 fa2e 	bl	801281c <SDMMC_GetCmdResp3>
 80123c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80123c2:	69fb      	ldr	r3, [r7, #28]
}
 80123c4:	4618      	mov	r0, r3
 80123c6:	3720      	adds	r7, #32
 80123c8:	46bd      	mov	sp, r7
 80123ca:	bd80      	pop	{r7, pc}

080123cc <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80123cc:	b580      	push	{r7, lr}
 80123ce:	b088      	sub	sp, #32
 80123d0:	af00      	add	r7, sp, #0
 80123d2:	6078      	str	r0, [r7, #4]
 80123d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80123d6:	683b      	ldr	r3, [r7, #0]
 80123d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80123da:	2306      	movs	r3, #6
 80123dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80123de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80123e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80123e4:	2300      	movs	r3, #0
 80123e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80123e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80123ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80123ee:	f107 0308 	add.w	r3, r7, #8
 80123f2:	4619      	mov	r1, r3
 80123f4:	6878      	ldr	r0, [r7, #4]
 80123f6:	f7ff fde3 	bl	8011fc0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80123fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80123fe:	2106      	movs	r1, #6
 8012400:	6878      	ldr	r0, [r7, #4]
 8012402:	f000 f8cf 	bl	80125a4 <SDMMC_GetCmdResp1>
 8012406:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012408:	69fb      	ldr	r3, [r7, #28]
}
 801240a:	4618      	mov	r0, r3
 801240c:	3720      	adds	r7, #32
 801240e:	46bd      	mov	sp, r7
 8012410:	bd80      	pop	{r7, pc}

08012412 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8012412:	b580      	push	{r7, lr}
 8012414:	b088      	sub	sp, #32
 8012416:	af00      	add	r7, sp, #0
 8012418:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801241a:	2300      	movs	r3, #0
 801241c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801241e:	2333      	movs	r3, #51	; 0x33
 8012420:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012422:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012426:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012428:	2300      	movs	r3, #0
 801242a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801242c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012430:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012432:	f107 0308 	add.w	r3, r7, #8
 8012436:	4619      	mov	r1, r3
 8012438:	6878      	ldr	r0, [r7, #4]
 801243a:	f7ff fdc1 	bl	8011fc0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 801243e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012442:	2133      	movs	r1, #51	; 0x33
 8012444:	6878      	ldr	r0, [r7, #4]
 8012446:	f000 f8ad 	bl	80125a4 <SDMMC_GetCmdResp1>
 801244a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801244c:	69fb      	ldr	r3, [r7, #28]
}
 801244e:	4618      	mov	r0, r3
 8012450:	3720      	adds	r7, #32
 8012452:	46bd      	mov	sp, r7
 8012454:	bd80      	pop	{r7, pc}

08012456 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8012456:	b580      	push	{r7, lr}
 8012458:	b088      	sub	sp, #32
 801245a:	af00      	add	r7, sp, #0
 801245c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 801245e:	2300      	movs	r3, #0
 8012460:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8012462:	2302      	movs	r3, #2
 8012464:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012466:	f44f 7340 	mov.w	r3, #768	; 0x300
 801246a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801246c:	2300      	movs	r3, #0
 801246e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012470:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012474:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012476:	f107 0308 	add.w	r3, r7, #8
 801247a:	4619      	mov	r1, r3
 801247c:	6878      	ldr	r0, [r7, #4]
 801247e:	f7ff fd9f 	bl	8011fc0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012482:	6878      	ldr	r0, [r7, #4]
 8012484:	f000 f980 	bl	8012788 <SDMMC_GetCmdResp2>
 8012488:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801248a:	69fb      	ldr	r3, [r7, #28]
}
 801248c:	4618      	mov	r0, r3
 801248e:	3720      	adds	r7, #32
 8012490:	46bd      	mov	sp, r7
 8012492:	bd80      	pop	{r7, pc}

08012494 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012494:	b580      	push	{r7, lr}
 8012496:	b088      	sub	sp, #32
 8012498:	af00      	add	r7, sp, #0
 801249a:	6078      	str	r0, [r7, #4]
 801249c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801249e:	683b      	ldr	r3, [r7, #0]
 80124a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80124a2:	2309      	movs	r3, #9
 80124a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80124a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80124aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80124ac:	2300      	movs	r3, #0
 80124ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80124b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80124b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80124b6:	f107 0308 	add.w	r3, r7, #8
 80124ba:	4619      	mov	r1, r3
 80124bc:	6878      	ldr	r0, [r7, #4]
 80124be:	f7ff fd7f 	bl	8011fc0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80124c2:	6878      	ldr	r0, [r7, #4]
 80124c4:	f000 f960 	bl	8012788 <SDMMC_GetCmdResp2>
 80124c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80124ca:	69fb      	ldr	r3, [r7, #28]
}
 80124cc:	4618      	mov	r0, r3
 80124ce:	3720      	adds	r7, #32
 80124d0:	46bd      	mov	sp, r7
 80124d2:	bd80      	pop	{r7, pc}

080124d4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b088      	sub	sp, #32
 80124d8:	af00      	add	r7, sp, #0
 80124da:	6078      	str	r0, [r7, #4]
 80124dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80124de:	2300      	movs	r3, #0
 80124e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80124e2:	2303      	movs	r3, #3
 80124e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80124e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80124ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80124ec:	2300      	movs	r3, #0
 80124ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80124f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80124f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80124f6:	f107 0308 	add.w	r3, r7, #8
 80124fa:	4619      	mov	r1, r3
 80124fc:	6878      	ldr	r0, [r7, #4]
 80124fe:	f7ff fd5f 	bl	8011fc0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8012502:	683a      	ldr	r2, [r7, #0]
 8012504:	2103      	movs	r1, #3
 8012506:	6878      	ldr	r0, [r7, #4]
 8012508:	f000 f9c8 	bl	801289c <SDMMC_GetCmdResp6>
 801250c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801250e:	69fb      	ldr	r3, [r7, #28]
}
 8012510:	4618      	mov	r0, r3
 8012512:	3720      	adds	r7, #32
 8012514:	46bd      	mov	sp, r7
 8012516:	bd80      	pop	{r7, pc}

08012518 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012518:	b580      	push	{r7, lr}
 801251a:	b088      	sub	sp, #32
 801251c:	af00      	add	r7, sp, #0
 801251e:	6078      	str	r0, [r7, #4]
 8012520:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8012522:	683b      	ldr	r3, [r7, #0]
 8012524:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8012526:	230d      	movs	r3, #13
 8012528:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801252a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801252e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012530:	2300      	movs	r3, #0
 8012532:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012534:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012538:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801253a:	f107 0308 	add.w	r3, r7, #8
 801253e:	4619      	mov	r1, r3
 8012540:	6878      	ldr	r0, [r7, #4]
 8012542:	f7ff fd3d 	bl	8011fc0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8012546:	f241 3288 	movw	r2, #5000	; 0x1388
 801254a:	210d      	movs	r1, #13
 801254c:	6878      	ldr	r0, [r7, #4]
 801254e:	f000 f829 	bl	80125a4 <SDMMC_GetCmdResp1>
 8012552:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012554:	69fb      	ldr	r3, [r7, #28]
}
 8012556:	4618      	mov	r0, r3
 8012558:	3720      	adds	r7, #32
 801255a:	46bd      	mov	sp, r7
 801255c:	bd80      	pop	{r7, pc}

0801255e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 801255e:	b580      	push	{r7, lr}
 8012560:	b088      	sub	sp, #32
 8012562:	af00      	add	r7, sp, #0
 8012564:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012566:	2300      	movs	r3, #0
 8012568:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 801256a:	230d      	movs	r3, #13
 801256c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801256e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012572:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012574:	2300      	movs	r3, #0
 8012576:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012578:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801257c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801257e:	f107 0308 	add.w	r3, r7, #8
 8012582:	4619      	mov	r1, r3
 8012584:	6878      	ldr	r0, [r7, #4]
 8012586:	f7ff fd1b 	bl	8011fc0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 801258a:	f241 3288 	movw	r2, #5000	; 0x1388
 801258e:	210d      	movs	r1, #13
 8012590:	6878      	ldr	r0, [r7, #4]
 8012592:	f000 f807 	bl	80125a4 <SDMMC_GetCmdResp1>
 8012596:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012598:	69fb      	ldr	r3, [r7, #28]
}
 801259a:	4618      	mov	r0, r3
 801259c:	3720      	adds	r7, #32
 801259e:	46bd      	mov	sp, r7
 80125a0:	bd80      	pop	{r7, pc}
	...

080125a4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80125a4:	b580      	push	{r7, lr}
 80125a6:	b088      	sub	sp, #32
 80125a8:	af00      	add	r7, sp, #0
 80125aa:	60f8      	str	r0, [r7, #12]
 80125ac:	460b      	mov	r3, r1
 80125ae:	607a      	str	r2, [r7, #4]
 80125b0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80125b2:	4b70      	ldr	r3, [pc, #448]	; (8012774 <SDMMC_GetCmdResp1+0x1d0>)
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	4a70      	ldr	r2, [pc, #448]	; (8012778 <SDMMC_GetCmdResp1+0x1d4>)
 80125b8:	fba2 2303 	umull	r2, r3, r2, r3
 80125bc:	0a5a      	lsrs	r2, r3, #9
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	fb02 f303 	mul.w	r3, r2, r3
 80125c4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80125c6:	69fb      	ldr	r3, [r7, #28]
 80125c8:	1e5a      	subs	r2, r3, #1
 80125ca:	61fa      	str	r2, [r7, #28]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d102      	bne.n	80125d6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80125d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80125d4:	e0c9      	b.n	801276a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125da:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80125dc:	69ba      	ldr	r2, [r7, #24]
 80125de:	4b67      	ldr	r3, [pc, #412]	; (801277c <SDMMC_GetCmdResp1+0x1d8>)
 80125e0:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d0ef      	beq.n	80125c6 <SDMMC_GetCmdResp1+0x22>
 80125e6:	69bb      	ldr	r3, [r7, #24]
 80125e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d1ea      	bne.n	80125c6 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80125f4:	f003 0304 	and.w	r3, r3, #4
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d004      	beq.n	8012606 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80125fc:	68fb      	ldr	r3, [r7, #12]
 80125fe:	2204      	movs	r2, #4
 8012600:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012602:	2304      	movs	r3, #4
 8012604:	e0b1      	b.n	801276a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801260a:	f003 0301 	and.w	r3, r3, #1
 801260e:	2b00      	cmp	r3, #0
 8012610:	d004      	beq.n	801261c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	2201      	movs	r2, #1
 8012616:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012618:	2301      	movs	r3, #1
 801261a:	e0a6      	b.n	801276a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801261c:	68fb      	ldr	r3, [r7, #12]
 801261e:	4a58      	ldr	r2, [pc, #352]	; (8012780 <SDMMC_GetCmdResp1+0x1dc>)
 8012620:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012622:	68f8      	ldr	r0, [r7, #12]
 8012624:	f7ff fcf6 	bl	8012014 <SDMMC_GetCommandResponse>
 8012628:	4603      	mov	r3, r0
 801262a:	461a      	mov	r2, r3
 801262c:	7afb      	ldrb	r3, [r7, #11]
 801262e:	4293      	cmp	r3, r2
 8012630:	d001      	beq.n	8012636 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012632:	2301      	movs	r3, #1
 8012634:	e099      	b.n	801276a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012636:	2100      	movs	r1, #0
 8012638:	68f8      	ldr	r0, [r7, #12]
 801263a:	f7ff fcf8 	bl	801202e <SDMMC_GetResponse>
 801263e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012640:	697a      	ldr	r2, [r7, #20]
 8012642:	4b50      	ldr	r3, [pc, #320]	; (8012784 <SDMMC_GetCmdResp1+0x1e0>)
 8012644:	4013      	ands	r3, r2
 8012646:	2b00      	cmp	r3, #0
 8012648:	d101      	bne.n	801264e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801264a:	2300      	movs	r3, #0
 801264c:	e08d      	b.n	801276a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801264e:	697b      	ldr	r3, [r7, #20]
 8012650:	2b00      	cmp	r3, #0
 8012652:	da02      	bge.n	801265a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012654:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012658:	e087      	b.n	801276a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801265a:	697b      	ldr	r3, [r7, #20]
 801265c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012660:	2b00      	cmp	r3, #0
 8012662:	d001      	beq.n	8012668 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012664:	2340      	movs	r3, #64	; 0x40
 8012666:	e080      	b.n	801276a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012668:	697b      	ldr	r3, [r7, #20]
 801266a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801266e:	2b00      	cmp	r3, #0
 8012670:	d001      	beq.n	8012676 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8012672:	2380      	movs	r3, #128	; 0x80
 8012674:	e079      	b.n	801276a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012676:	697b      	ldr	r3, [r7, #20]
 8012678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801267c:	2b00      	cmp	r3, #0
 801267e:	d002      	beq.n	8012686 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012680:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012684:	e071      	b.n	801276a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012686:	697b      	ldr	r3, [r7, #20]
 8012688:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801268c:	2b00      	cmp	r3, #0
 801268e:	d002      	beq.n	8012696 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012690:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012694:	e069      	b.n	801276a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012696:	697b      	ldr	r3, [r7, #20]
 8012698:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801269c:	2b00      	cmp	r3, #0
 801269e:	d002      	beq.n	80126a6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80126a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80126a4:	e061      	b.n	801276a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80126a6:	697b      	ldr	r3, [r7, #20]
 80126a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d002      	beq.n	80126b6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80126b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80126b4:	e059      	b.n	801276a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80126b6:	697b      	ldr	r3, [r7, #20]
 80126b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d002      	beq.n	80126c6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80126c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80126c4:	e051      	b.n	801276a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80126c6:	697b      	ldr	r3, [r7, #20]
 80126c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d002      	beq.n	80126d6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80126d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80126d4:	e049      	b.n	801276a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80126d6:	697b      	ldr	r3, [r7, #20]
 80126d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d002      	beq.n	80126e6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80126e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80126e4:	e041      	b.n	801276a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80126e6:	697b      	ldr	r3, [r7, #20]
 80126e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d002      	beq.n	80126f6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80126f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80126f4:	e039      	b.n	801276a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80126f6:	697b      	ldr	r3, [r7, #20]
 80126f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d002      	beq.n	8012706 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8012700:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012704:	e031      	b.n	801276a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8012706:	697b      	ldr	r3, [r7, #20]
 8012708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801270c:	2b00      	cmp	r3, #0
 801270e:	d002      	beq.n	8012716 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8012710:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012714:	e029      	b.n	801276a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8012716:	697b      	ldr	r3, [r7, #20]
 8012718:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801271c:	2b00      	cmp	r3, #0
 801271e:	d002      	beq.n	8012726 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012720:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012724:	e021      	b.n	801276a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8012726:	697b      	ldr	r3, [r7, #20]
 8012728:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801272c:	2b00      	cmp	r3, #0
 801272e:	d002      	beq.n	8012736 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012730:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012734:	e019      	b.n	801276a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8012736:	697b      	ldr	r3, [r7, #20]
 8012738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801273c:	2b00      	cmp	r3, #0
 801273e:	d002      	beq.n	8012746 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012740:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012744:	e011      	b.n	801276a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8012746:	697b      	ldr	r3, [r7, #20]
 8012748:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801274c:	2b00      	cmp	r3, #0
 801274e:	d002      	beq.n	8012756 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8012750:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012754:	e009      	b.n	801276a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8012756:	697b      	ldr	r3, [r7, #20]
 8012758:	f003 0308 	and.w	r3, r3, #8
 801275c:	2b00      	cmp	r3, #0
 801275e:	d002      	beq.n	8012766 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8012760:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8012764:	e001      	b.n	801276a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012766:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801276a:	4618      	mov	r0, r3
 801276c:	3720      	adds	r7, #32
 801276e:	46bd      	mov	sp, r7
 8012770:	bd80      	pop	{r7, pc}
 8012772:	bf00      	nop
 8012774:	24000000 	.word	0x24000000
 8012778:	10624dd3 	.word	0x10624dd3
 801277c:	00200045 	.word	0x00200045
 8012780:	002000c5 	.word	0x002000c5
 8012784:	fdffe008 	.word	0xfdffe008

08012788 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8012788:	b480      	push	{r7}
 801278a:	b085      	sub	sp, #20
 801278c:	af00      	add	r7, sp, #0
 801278e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012790:	4b1f      	ldr	r3, [pc, #124]	; (8012810 <SDMMC_GetCmdResp2+0x88>)
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	4a1f      	ldr	r2, [pc, #124]	; (8012814 <SDMMC_GetCmdResp2+0x8c>)
 8012796:	fba2 2303 	umull	r2, r3, r2, r3
 801279a:	0a5b      	lsrs	r3, r3, #9
 801279c:	f241 3288 	movw	r2, #5000	; 0x1388
 80127a0:	fb02 f303 	mul.w	r3, r2, r3
 80127a4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	1e5a      	subs	r2, r3, #1
 80127aa:	60fa      	str	r2, [r7, #12]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d102      	bne.n	80127b6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80127b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80127b4:	e026      	b.n	8012804 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127ba:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80127bc:	68bb      	ldr	r3, [r7, #8]
 80127be:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d0ef      	beq.n	80127a6 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80127c6:	68bb      	ldr	r3, [r7, #8]
 80127c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d1ea      	bne.n	80127a6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127d4:	f003 0304 	and.w	r3, r3, #4
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d004      	beq.n	80127e6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	2204      	movs	r2, #4
 80127e0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80127e2:	2304      	movs	r3, #4
 80127e4:	e00e      	b.n	8012804 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80127ea:	f003 0301 	and.w	r3, r3, #1
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d004      	beq.n	80127fc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	2201      	movs	r2, #1
 80127f6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80127f8:	2301      	movs	r3, #1
 80127fa:	e003      	b.n	8012804 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	4a06      	ldr	r2, [pc, #24]	; (8012818 <SDMMC_GetCmdResp2+0x90>)
 8012800:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012802:	2300      	movs	r3, #0
}
 8012804:	4618      	mov	r0, r3
 8012806:	3714      	adds	r7, #20
 8012808:	46bd      	mov	sp, r7
 801280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801280e:	4770      	bx	lr
 8012810:	24000000 	.word	0x24000000
 8012814:	10624dd3 	.word	0x10624dd3
 8012818:	002000c5 	.word	0x002000c5

0801281c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 801281c:	b480      	push	{r7}
 801281e:	b085      	sub	sp, #20
 8012820:	af00      	add	r7, sp, #0
 8012822:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012824:	4b1a      	ldr	r3, [pc, #104]	; (8012890 <SDMMC_GetCmdResp3+0x74>)
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	4a1a      	ldr	r2, [pc, #104]	; (8012894 <SDMMC_GetCmdResp3+0x78>)
 801282a:	fba2 2303 	umull	r2, r3, r2, r3
 801282e:	0a5b      	lsrs	r3, r3, #9
 8012830:	f241 3288 	movw	r2, #5000	; 0x1388
 8012834:	fb02 f303 	mul.w	r3, r2, r3
 8012838:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	1e5a      	subs	r2, r3, #1
 801283e:	60fa      	str	r2, [r7, #12]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d102      	bne.n	801284a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012844:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012848:	e01b      	b.n	8012882 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801284e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012850:	68bb      	ldr	r3, [r7, #8]
 8012852:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012856:	2b00      	cmp	r3, #0
 8012858:	d0ef      	beq.n	801283a <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801285a:	68bb      	ldr	r3, [r7, #8]
 801285c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012860:	2b00      	cmp	r3, #0
 8012862:	d1ea      	bne.n	801283a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012868:	f003 0304 	and.w	r3, r3, #4
 801286c:	2b00      	cmp	r3, #0
 801286e:	d004      	beq.n	801287a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	2204      	movs	r2, #4
 8012874:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012876:	2304      	movs	r3, #4
 8012878:	e003      	b.n	8012882 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	4a06      	ldr	r2, [pc, #24]	; (8012898 <SDMMC_GetCmdResp3+0x7c>)
 801287e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012880:	2300      	movs	r3, #0
}
 8012882:	4618      	mov	r0, r3
 8012884:	3714      	adds	r7, #20
 8012886:	46bd      	mov	sp, r7
 8012888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801288c:	4770      	bx	lr
 801288e:	bf00      	nop
 8012890:	24000000 	.word	0x24000000
 8012894:	10624dd3 	.word	0x10624dd3
 8012898:	002000c5 	.word	0x002000c5

0801289c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 801289c:	b580      	push	{r7, lr}
 801289e:	b088      	sub	sp, #32
 80128a0:	af00      	add	r7, sp, #0
 80128a2:	60f8      	str	r0, [r7, #12]
 80128a4:	460b      	mov	r3, r1
 80128a6:	607a      	str	r2, [r7, #4]
 80128a8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80128aa:	4b35      	ldr	r3, [pc, #212]	; (8012980 <SDMMC_GetCmdResp6+0xe4>)
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	4a35      	ldr	r2, [pc, #212]	; (8012984 <SDMMC_GetCmdResp6+0xe8>)
 80128b0:	fba2 2303 	umull	r2, r3, r2, r3
 80128b4:	0a5b      	lsrs	r3, r3, #9
 80128b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80128ba:	fb02 f303 	mul.w	r3, r2, r3
 80128be:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80128c0:	69fb      	ldr	r3, [r7, #28]
 80128c2:	1e5a      	subs	r2, r3, #1
 80128c4:	61fa      	str	r2, [r7, #28]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d102      	bne.n	80128d0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80128ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80128ce:	e052      	b.n	8012976 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128d4:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80128d6:	69bb      	ldr	r3, [r7, #24]
 80128d8:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d0ef      	beq.n	80128c0 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80128e0:	69bb      	ldr	r3, [r7, #24]
 80128e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d1ea      	bne.n	80128c0 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128ee:	f003 0304 	and.w	r3, r3, #4
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d004      	beq.n	8012900 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	2204      	movs	r2, #4
 80128fa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80128fc:	2304      	movs	r3, #4
 80128fe:	e03a      	b.n	8012976 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012904:	f003 0301 	and.w	r3, r3, #1
 8012908:	2b00      	cmp	r3, #0
 801290a:	d004      	beq.n	8012916 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801290c:	68fb      	ldr	r3, [r7, #12]
 801290e:	2201      	movs	r2, #1
 8012910:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012912:	2301      	movs	r3, #1
 8012914:	e02f      	b.n	8012976 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012916:	68f8      	ldr	r0, [r7, #12]
 8012918:	f7ff fb7c 	bl	8012014 <SDMMC_GetCommandResponse>
 801291c:	4603      	mov	r3, r0
 801291e:	461a      	mov	r2, r3
 8012920:	7afb      	ldrb	r3, [r7, #11]
 8012922:	4293      	cmp	r3, r2
 8012924:	d001      	beq.n	801292a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012926:	2301      	movs	r3, #1
 8012928:	e025      	b.n	8012976 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	4a16      	ldr	r2, [pc, #88]	; (8012988 <SDMMC_GetCmdResp6+0xec>)
 801292e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012930:	2100      	movs	r1, #0
 8012932:	68f8      	ldr	r0, [r7, #12]
 8012934:	f7ff fb7b 	bl	801202e <SDMMC_GetResponse>
 8012938:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 801293a:	697b      	ldr	r3, [r7, #20]
 801293c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8012940:	2b00      	cmp	r3, #0
 8012942:	d106      	bne.n	8012952 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8012944:	697b      	ldr	r3, [r7, #20]
 8012946:	0c1b      	lsrs	r3, r3, #16
 8012948:	b29a      	uxth	r2, r3
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 801294e:	2300      	movs	r3, #0
 8012950:	e011      	b.n	8012976 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8012952:	697b      	ldr	r3, [r7, #20]
 8012954:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012958:	2b00      	cmp	r3, #0
 801295a:	d002      	beq.n	8012962 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801295c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012960:	e009      	b.n	8012976 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8012962:	697b      	ldr	r3, [r7, #20]
 8012964:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012968:	2b00      	cmp	r3, #0
 801296a:	d002      	beq.n	8012972 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801296c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012970:	e001      	b.n	8012976 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012972:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012976:	4618      	mov	r0, r3
 8012978:	3720      	adds	r7, #32
 801297a:	46bd      	mov	sp, r7
 801297c:	bd80      	pop	{r7, pc}
 801297e:	bf00      	nop
 8012980:	24000000 	.word	0x24000000
 8012984:	10624dd3 	.word	0x10624dd3
 8012988:	002000c5 	.word	0x002000c5

0801298c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 801298c:	b480      	push	{r7}
 801298e:	b085      	sub	sp, #20
 8012990:	af00      	add	r7, sp, #0
 8012992:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012994:	4b22      	ldr	r3, [pc, #136]	; (8012a20 <SDMMC_GetCmdResp7+0x94>)
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	4a22      	ldr	r2, [pc, #136]	; (8012a24 <SDMMC_GetCmdResp7+0x98>)
 801299a:	fba2 2303 	umull	r2, r3, r2, r3
 801299e:	0a5b      	lsrs	r3, r3, #9
 80129a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80129a4:	fb02 f303 	mul.w	r3, r2, r3
 80129a8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	1e5a      	subs	r2, r3, #1
 80129ae:	60fa      	str	r2, [r7, #12]
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d102      	bne.n	80129ba <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80129b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80129b8:	e02c      	b.n	8012a14 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129be:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80129c0:	68bb      	ldr	r3, [r7, #8]
 80129c2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d0ef      	beq.n	80129aa <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80129ca:	68bb      	ldr	r3, [r7, #8]
 80129cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d1ea      	bne.n	80129aa <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129d8:	f003 0304 	and.w	r3, r3, #4
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d004      	beq.n	80129ea <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	2204      	movs	r2, #4
 80129e4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80129e6:	2304      	movs	r3, #4
 80129e8:	e014      	b.n	8012a14 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129ee:	f003 0301 	and.w	r3, r3, #1
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d004      	beq.n	8012a00 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	2201      	movs	r2, #1
 80129fa:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80129fc:	2301      	movs	r3, #1
 80129fe:	e009      	b.n	8012a14 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d002      	beq.n	8012a12 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	2240      	movs	r2, #64	; 0x40
 8012a10:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012a12:	2300      	movs	r3, #0

}
 8012a14:	4618      	mov	r0, r3
 8012a16:	3714      	adds	r7, #20
 8012a18:	46bd      	mov	sp, r7
 8012a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a1e:	4770      	bx	lr
 8012a20:	24000000 	.word	0x24000000
 8012a24:	10624dd3 	.word	0x10624dd3

08012a28 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8012a28:	b480      	push	{r7}
 8012a2a:	b085      	sub	sp, #20
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012a30:	4b11      	ldr	r3, [pc, #68]	; (8012a78 <SDMMC_GetCmdError+0x50>)
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	4a11      	ldr	r2, [pc, #68]	; (8012a7c <SDMMC_GetCmdError+0x54>)
 8012a36:	fba2 2303 	umull	r2, r3, r2, r3
 8012a3a:	0a5b      	lsrs	r3, r3, #9
 8012a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012a40:	fb02 f303 	mul.w	r3, r2, r3
 8012a44:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012a46:	68fb      	ldr	r3, [r7, #12]
 8012a48:	1e5a      	subs	r2, r3, #1
 8012a4a:	60fa      	str	r2, [r7, #12]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d102      	bne.n	8012a56 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012a50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012a54:	e009      	b.n	8012a6a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d0f1      	beq.n	8012a46 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	4a06      	ldr	r2, [pc, #24]	; (8012a80 <SDMMC_GetCmdError+0x58>)
 8012a66:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8012a68:	2300      	movs	r3, #0
}
 8012a6a:	4618      	mov	r0, r3
 8012a6c:	3714      	adds	r7, #20
 8012a6e:	46bd      	mov	sp, r7
 8012a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a74:	4770      	bx	lr
 8012a76:	bf00      	nop
 8012a78:	24000000 	.word	0x24000000
 8012a7c:	10624dd3 	.word	0x10624dd3
 8012a80:	002000c5 	.word	0x002000c5

08012a84 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012a84:	b084      	sub	sp, #16
 8012a86:	b580      	push	{r7, lr}
 8012a88:	b084      	sub	sp, #16
 8012a8a:	af00      	add	r7, sp, #0
 8012a8c:	6078      	str	r0, [r7, #4]
 8012a8e:	f107 001c 	add.w	r0, r7, #28
 8012a92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a98:	2b01      	cmp	r3, #1
 8012a9a:	d120      	bne.n	8012ade <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012aa0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	68da      	ldr	r2, [r3, #12]
 8012aac:	4b2a      	ldr	r3, [pc, #168]	; (8012b58 <USB_CoreInit+0xd4>)
 8012aae:	4013      	ands	r3, r2
 8012ab0:	687a      	ldr	r2, [r7, #4]
 8012ab2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	68db      	ldr	r3, [r3, #12]
 8012ab8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8012ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ac2:	2b01      	cmp	r3, #1
 8012ac4:	d105      	bne.n	8012ad2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	68db      	ldr	r3, [r3, #12]
 8012aca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012ad2:	6878      	ldr	r0, [r7, #4]
 8012ad4:	f001 faf8 	bl	80140c8 <USB_CoreReset>
 8012ad8:	4603      	mov	r3, r0
 8012ada:	73fb      	strb	r3, [r7, #15]
 8012adc:	e01a      	b.n	8012b14 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	68db      	ldr	r3, [r3, #12]
 8012ae2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012aea:	6878      	ldr	r0, [r7, #4]
 8012aec:	f001 faec 	bl	80140c8 <USB_CoreReset>
 8012af0:	4603      	mov	r3, r0
 8012af2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8012af4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d106      	bne.n	8012b08 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012afe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	639a      	str	r2, [r3, #56]	; 0x38
 8012b06:	e005      	b.n	8012b14 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8012b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b16:	2b01      	cmp	r3, #1
 8012b18:	d116      	bne.n	8012b48 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012b1e:	b29a      	uxth	r2, r3
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012b28:	4b0c      	ldr	r3, [pc, #48]	; (8012b5c <USB_CoreInit+0xd8>)
 8012b2a:	4313      	orrs	r3, r2
 8012b2c:	687a      	ldr	r2, [r7, #4]
 8012b2e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	689b      	ldr	r3, [r3, #8]
 8012b34:	f043 0206 	orr.w	r2, r3, #6
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	689b      	ldr	r3, [r3, #8]
 8012b40:	f043 0220 	orr.w	r2, r3, #32
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8012b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	3710      	adds	r7, #16
 8012b4e:	46bd      	mov	sp, r7
 8012b50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012b54:	b004      	add	sp, #16
 8012b56:	4770      	bx	lr
 8012b58:	ffbdffbf 	.word	0xffbdffbf
 8012b5c:	03ee0000 	.word	0x03ee0000

08012b60 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8012b60:	b480      	push	{r7}
 8012b62:	b087      	sub	sp, #28
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	60f8      	str	r0, [r7, #12]
 8012b68:	60b9      	str	r1, [r7, #8]
 8012b6a:	4613      	mov	r3, r2
 8012b6c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8012b6e:	79fb      	ldrb	r3, [r7, #7]
 8012b70:	2b02      	cmp	r3, #2
 8012b72:	d165      	bne.n	8012c40 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8012b74:	68bb      	ldr	r3, [r7, #8]
 8012b76:	4a41      	ldr	r2, [pc, #260]	; (8012c7c <USB_SetTurnaroundTime+0x11c>)
 8012b78:	4293      	cmp	r3, r2
 8012b7a:	d906      	bls.n	8012b8a <USB_SetTurnaroundTime+0x2a>
 8012b7c:	68bb      	ldr	r3, [r7, #8]
 8012b7e:	4a40      	ldr	r2, [pc, #256]	; (8012c80 <USB_SetTurnaroundTime+0x120>)
 8012b80:	4293      	cmp	r3, r2
 8012b82:	d202      	bcs.n	8012b8a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8012b84:	230f      	movs	r3, #15
 8012b86:	617b      	str	r3, [r7, #20]
 8012b88:	e062      	b.n	8012c50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8012b8a:	68bb      	ldr	r3, [r7, #8]
 8012b8c:	4a3c      	ldr	r2, [pc, #240]	; (8012c80 <USB_SetTurnaroundTime+0x120>)
 8012b8e:	4293      	cmp	r3, r2
 8012b90:	d306      	bcc.n	8012ba0 <USB_SetTurnaroundTime+0x40>
 8012b92:	68bb      	ldr	r3, [r7, #8]
 8012b94:	4a3b      	ldr	r2, [pc, #236]	; (8012c84 <USB_SetTurnaroundTime+0x124>)
 8012b96:	4293      	cmp	r3, r2
 8012b98:	d202      	bcs.n	8012ba0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8012b9a:	230e      	movs	r3, #14
 8012b9c:	617b      	str	r3, [r7, #20]
 8012b9e:	e057      	b.n	8012c50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8012ba0:	68bb      	ldr	r3, [r7, #8]
 8012ba2:	4a38      	ldr	r2, [pc, #224]	; (8012c84 <USB_SetTurnaroundTime+0x124>)
 8012ba4:	4293      	cmp	r3, r2
 8012ba6:	d306      	bcc.n	8012bb6 <USB_SetTurnaroundTime+0x56>
 8012ba8:	68bb      	ldr	r3, [r7, #8]
 8012baa:	4a37      	ldr	r2, [pc, #220]	; (8012c88 <USB_SetTurnaroundTime+0x128>)
 8012bac:	4293      	cmp	r3, r2
 8012bae:	d202      	bcs.n	8012bb6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8012bb0:	230d      	movs	r3, #13
 8012bb2:	617b      	str	r3, [r7, #20]
 8012bb4:	e04c      	b.n	8012c50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8012bb6:	68bb      	ldr	r3, [r7, #8]
 8012bb8:	4a33      	ldr	r2, [pc, #204]	; (8012c88 <USB_SetTurnaroundTime+0x128>)
 8012bba:	4293      	cmp	r3, r2
 8012bbc:	d306      	bcc.n	8012bcc <USB_SetTurnaroundTime+0x6c>
 8012bbe:	68bb      	ldr	r3, [r7, #8]
 8012bc0:	4a32      	ldr	r2, [pc, #200]	; (8012c8c <USB_SetTurnaroundTime+0x12c>)
 8012bc2:	4293      	cmp	r3, r2
 8012bc4:	d802      	bhi.n	8012bcc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8012bc6:	230c      	movs	r3, #12
 8012bc8:	617b      	str	r3, [r7, #20]
 8012bca:	e041      	b.n	8012c50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8012bcc:	68bb      	ldr	r3, [r7, #8]
 8012bce:	4a2f      	ldr	r2, [pc, #188]	; (8012c8c <USB_SetTurnaroundTime+0x12c>)
 8012bd0:	4293      	cmp	r3, r2
 8012bd2:	d906      	bls.n	8012be2 <USB_SetTurnaroundTime+0x82>
 8012bd4:	68bb      	ldr	r3, [r7, #8]
 8012bd6:	4a2e      	ldr	r2, [pc, #184]	; (8012c90 <USB_SetTurnaroundTime+0x130>)
 8012bd8:	4293      	cmp	r3, r2
 8012bda:	d802      	bhi.n	8012be2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8012bdc:	230b      	movs	r3, #11
 8012bde:	617b      	str	r3, [r7, #20]
 8012be0:	e036      	b.n	8012c50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8012be2:	68bb      	ldr	r3, [r7, #8]
 8012be4:	4a2a      	ldr	r2, [pc, #168]	; (8012c90 <USB_SetTurnaroundTime+0x130>)
 8012be6:	4293      	cmp	r3, r2
 8012be8:	d906      	bls.n	8012bf8 <USB_SetTurnaroundTime+0x98>
 8012bea:	68bb      	ldr	r3, [r7, #8]
 8012bec:	4a29      	ldr	r2, [pc, #164]	; (8012c94 <USB_SetTurnaroundTime+0x134>)
 8012bee:	4293      	cmp	r3, r2
 8012bf0:	d802      	bhi.n	8012bf8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8012bf2:	230a      	movs	r3, #10
 8012bf4:	617b      	str	r3, [r7, #20]
 8012bf6:	e02b      	b.n	8012c50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8012bf8:	68bb      	ldr	r3, [r7, #8]
 8012bfa:	4a26      	ldr	r2, [pc, #152]	; (8012c94 <USB_SetTurnaroundTime+0x134>)
 8012bfc:	4293      	cmp	r3, r2
 8012bfe:	d906      	bls.n	8012c0e <USB_SetTurnaroundTime+0xae>
 8012c00:	68bb      	ldr	r3, [r7, #8]
 8012c02:	4a25      	ldr	r2, [pc, #148]	; (8012c98 <USB_SetTurnaroundTime+0x138>)
 8012c04:	4293      	cmp	r3, r2
 8012c06:	d202      	bcs.n	8012c0e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8012c08:	2309      	movs	r3, #9
 8012c0a:	617b      	str	r3, [r7, #20]
 8012c0c:	e020      	b.n	8012c50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8012c0e:	68bb      	ldr	r3, [r7, #8]
 8012c10:	4a21      	ldr	r2, [pc, #132]	; (8012c98 <USB_SetTurnaroundTime+0x138>)
 8012c12:	4293      	cmp	r3, r2
 8012c14:	d306      	bcc.n	8012c24 <USB_SetTurnaroundTime+0xc4>
 8012c16:	68bb      	ldr	r3, [r7, #8]
 8012c18:	4a20      	ldr	r2, [pc, #128]	; (8012c9c <USB_SetTurnaroundTime+0x13c>)
 8012c1a:	4293      	cmp	r3, r2
 8012c1c:	d802      	bhi.n	8012c24 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8012c1e:	2308      	movs	r3, #8
 8012c20:	617b      	str	r3, [r7, #20]
 8012c22:	e015      	b.n	8012c50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8012c24:	68bb      	ldr	r3, [r7, #8]
 8012c26:	4a1d      	ldr	r2, [pc, #116]	; (8012c9c <USB_SetTurnaroundTime+0x13c>)
 8012c28:	4293      	cmp	r3, r2
 8012c2a:	d906      	bls.n	8012c3a <USB_SetTurnaroundTime+0xda>
 8012c2c:	68bb      	ldr	r3, [r7, #8]
 8012c2e:	4a1c      	ldr	r2, [pc, #112]	; (8012ca0 <USB_SetTurnaroundTime+0x140>)
 8012c30:	4293      	cmp	r3, r2
 8012c32:	d202      	bcs.n	8012c3a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8012c34:	2307      	movs	r3, #7
 8012c36:	617b      	str	r3, [r7, #20]
 8012c38:	e00a      	b.n	8012c50 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8012c3a:	2306      	movs	r3, #6
 8012c3c:	617b      	str	r3, [r7, #20]
 8012c3e:	e007      	b.n	8012c50 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8012c40:	79fb      	ldrb	r3, [r7, #7]
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d102      	bne.n	8012c4c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8012c46:	2309      	movs	r3, #9
 8012c48:	617b      	str	r3, [r7, #20]
 8012c4a:	e001      	b.n	8012c50 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8012c4c:	2309      	movs	r3, #9
 8012c4e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	68db      	ldr	r3, [r3, #12]
 8012c54:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	68da      	ldr	r2, [r3, #12]
 8012c60:	697b      	ldr	r3, [r7, #20]
 8012c62:	029b      	lsls	r3, r3, #10
 8012c64:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8012c68:	431a      	orrs	r2, r3
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012c6e:	2300      	movs	r3, #0
}
 8012c70:	4618      	mov	r0, r3
 8012c72:	371c      	adds	r7, #28
 8012c74:	46bd      	mov	sp, r7
 8012c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c7a:	4770      	bx	lr
 8012c7c:	00d8acbf 	.word	0x00d8acbf
 8012c80:	00e4e1c0 	.word	0x00e4e1c0
 8012c84:	00f42400 	.word	0x00f42400
 8012c88:	01067380 	.word	0x01067380
 8012c8c:	011a499f 	.word	0x011a499f
 8012c90:	01312cff 	.word	0x01312cff
 8012c94:	014ca43f 	.word	0x014ca43f
 8012c98:	016e3600 	.word	0x016e3600
 8012c9c:	01a6ab1f 	.word	0x01a6ab1f
 8012ca0:	01e84800 	.word	0x01e84800

08012ca4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012ca4:	b480      	push	{r7}
 8012ca6:	b083      	sub	sp, #12
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	689b      	ldr	r3, [r3, #8]
 8012cb0:	f043 0201 	orr.w	r2, r3, #1
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012cb8:	2300      	movs	r3, #0
}
 8012cba:	4618      	mov	r0, r3
 8012cbc:	370c      	adds	r7, #12
 8012cbe:	46bd      	mov	sp, r7
 8012cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cc4:	4770      	bx	lr

08012cc6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012cc6:	b480      	push	{r7}
 8012cc8:	b083      	sub	sp, #12
 8012cca:	af00      	add	r7, sp, #0
 8012ccc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	689b      	ldr	r3, [r3, #8]
 8012cd2:	f023 0201 	bic.w	r2, r3, #1
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012cda:	2300      	movs	r3, #0
}
 8012cdc:	4618      	mov	r0, r3
 8012cde:	370c      	adds	r7, #12
 8012ce0:	46bd      	mov	sp, r7
 8012ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce6:	4770      	bx	lr

08012ce8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8012ce8:	b580      	push	{r7, lr}
 8012cea:	b084      	sub	sp, #16
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	6078      	str	r0, [r7, #4]
 8012cf0:	460b      	mov	r3, r1
 8012cf2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8012cf4:	2300      	movs	r3, #0
 8012cf6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	68db      	ldr	r3, [r3, #12]
 8012cfc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012d04:	78fb      	ldrb	r3, [r7, #3]
 8012d06:	2b01      	cmp	r3, #1
 8012d08:	d115      	bne.n	8012d36 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	68db      	ldr	r3, [r3, #12]
 8012d0e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012d16:	2001      	movs	r0, #1
 8012d18:	f7f0 fea6 	bl	8003a68 <HAL_Delay>
      ms++;
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	3301      	adds	r3, #1
 8012d20:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8012d22:	6878      	ldr	r0, [r7, #4]
 8012d24:	f001 f93f 	bl	8013fa6 <USB_GetMode>
 8012d28:	4603      	mov	r3, r0
 8012d2a:	2b01      	cmp	r3, #1
 8012d2c:	d01e      	beq.n	8012d6c <USB_SetCurrentMode+0x84>
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	2b31      	cmp	r3, #49	; 0x31
 8012d32:	d9f0      	bls.n	8012d16 <USB_SetCurrentMode+0x2e>
 8012d34:	e01a      	b.n	8012d6c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8012d36:	78fb      	ldrb	r3, [r7, #3]
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d115      	bne.n	8012d68 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	68db      	ldr	r3, [r3, #12]
 8012d40:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012d48:	2001      	movs	r0, #1
 8012d4a:	f7f0 fe8d 	bl	8003a68 <HAL_Delay>
      ms++;
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	3301      	adds	r3, #1
 8012d52:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8012d54:	6878      	ldr	r0, [r7, #4]
 8012d56:	f001 f926 	bl	8013fa6 <USB_GetMode>
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d005      	beq.n	8012d6c <USB_SetCurrentMode+0x84>
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	2b31      	cmp	r3, #49	; 0x31
 8012d64:	d9f0      	bls.n	8012d48 <USB_SetCurrentMode+0x60>
 8012d66:	e001      	b.n	8012d6c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8012d68:	2301      	movs	r3, #1
 8012d6a:	e005      	b.n	8012d78 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	2b32      	cmp	r3, #50	; 0x32
 8012d70:	d101      	bne.n	8012d76 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8012d72:	2301      	movs	r3, #1
 8012d74:	e000      	b.n	8012d78 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8012d76:	2300      	movs	r3, #0
}
 8012d78:	4618      	mov	r0, r3
 8012d7a:	3710      	adds	r7, #16
 8012d7c:	46bd      	mov	sp, r7
 8012d7e:	bd80      	pop	{r7, pc}

08012d80 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012d80:	b084      	sub	sp, #16
 8012d82:	b580      	push	{r7, lr}
 8012d84:	b086      	sub	sp, #24
 8012d86:	af00      	add	r7, sp, #0
 8012d88:	6078      	str	r0, [r7, #4]
 8012d8a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8012d8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8012d92:	2300      	movs	r3, #0
 8012d94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8012d9a:	2300      	movs	r3, #0
 8012d9c:	613b      	str	r3, [r7, #16]
 8012d9e:	e009      	b.n	8012db4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8012da0:	687a      	ldr	r2, [r7, #4]
 8012da2:	693b      	ldr	r3, [r7, #16]
 8012da4:	3340      	adds	r3, #64	; 0x40
 8012da6:	009b      	lsls	r3, r3, #2
 8012da8:	4413      	add	r3, r2
 8012daa:	2200      	movs	r2, #0
 8012dac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8012dae:	693b      	ldr	r3, [r7, #16]
 8012db0:	3301      	adds	r3, #1
 8012db2:	613b      	str	r3, [r7, #16]
 8012db4:	693b      	ldr	r3, [r7, #16]
 8012db6:	2b0e      	cmp	r3, #14
 8012db8:	d9f2      	bls.n	8012da0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8012dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d11c      	bne.n	8012dfa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012dc6:	685b      	ldr	r3, [r3, #4]
 8012dc8:	68fa      	ldr	r2, [r7, #12]
 8012dca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012dce:	f043 0302 	orr.w	r3, r3, #2
 8012dd2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012dd8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	601a      	str	r2, [r3, #0]
 8012df8:	e005      	b.n	8012e06 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012dfe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012e0c:	461a      	mov	r2, r3
 8012e0e:	2300      	movs	r3, #0
 8012e10:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e18:	4619      	mov	r1, r3
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e20:	461a      	mov	r2, r3
 8012e22:	680b      	ldr	r3, [r1, #0]
 8012e24:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e28:	2b01      	cmp	r3, #1
 8012e2a:	d10c      	bne.n	8012e46 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8012e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d104      	bne.n	8012e3c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8012e32:	2100      	movs	r1, #0
 8012e34:	6878      	ldr	r0, [r7, #4]
 8012e36:	f000 f965 	bl	8013104 <USB_SetDevSpeed>
 8012e3a:	e008      	b.n	8012e4e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8012e3c:	2101      	movs	r1, #1
 8012e3e:	6878      	ldr	r0, [r7, #4]
 8012e40:	f000 f960 	bl	8013104 <USB_SetDevSpeed>
 8012e44:	e003      	b.n	8012e4e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8012e46:	2103      	movs	r1, #3
 8012e48:	6878      	ldr	r0, [r7, #4]
 8012e4a:	f000 f95b 	bl	8013104 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8012e4e:	2110      	movs	r1, #16
 8012e50:	6878      	ldr	r0, [r7, #4]
 8012e52:	f000 f8f3 	bl	801303c <USB_FlushTxFifo>
 8012e56:	4603      	mov	r3, r0
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d001      	beq.n	8012e60 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8012e5c:	2301      	movs	r3, #1
 8012e5e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012e60:	6878      	ldr	r0, [r7, #4]
 8012e62:	f000 f91f 	bl	80130a4 <USB_FlushRxFifo>
 8012e66:	4603      	mov	r3, r0
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d001      	beq.n	8012e70 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8012e6c:	2301      	movs	r3, #1
 8012e6e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e76:	461a      	mov	r2, r3
 8012e78:	2300      	movs	r3, #0
 8012e7a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e82:	461a      	mov	r2, r3
 8012e84:	2300      	movs	r3, #0
 8012e86:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e8e:	461a      	mov	r2, r3
 8012e90:	2300      	movs	r3, #0
 8012e92:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012e94:	2300      	movs	r3, #0
 8012e96:	613b      	str	r3, [r7, #16]
 8012e98:	e043      	b.n	8012f22 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012e9a:	693b      	ldr	r3, [r7, #16]
 8012e9c:	015a      	lsls	r2, r3, #5
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	4413      	add	r3, r2
 8012ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ea6:	681b      	ldr	r3, [r3, #0]
 8012ea8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012eac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012eb0:	d118      	bne.n	8012ee4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8012eb2:	693b      	ldr	r3, [r7, #16]
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d10a      	bne.n	8012ece <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8012eb8:	693b      	ldr	r3, [r7, #16]
 8012eba:	015a      	lsls	r2, r3, #5
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	4413      	add	r3, r2
 8012ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ec4:	461a      	mov	r2, r3
 8012ec6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012eca:	6013      	str	r3, [r2, #0]
 8012ecc:	e013      	b.n	8012ef6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8012ece:	693b      	ldr	r3, [r7, #16]
 8012ed0:	015a      	lsls	r2, r3, #5
 8012ed2:	68fb      	ldr	r3, [r7, #12]
 8012ed4:	4413      	add	r3, r2
 8012ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012eda:	461a      	mov	r2, r3
 8012edc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012ee0:	6013      	str	r3, [r2, #0]
 8012ee2:	e008      	b.n	8012ef6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8012ee4:	693b      	ldr	r3, [r7, #16]
 8012ee6:	015a      	lsls	r2, r3, #5
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	4413      	add	r3, r2
 8012eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ef0:	461a      	mov	r2, r3
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8012ef6:	693b      	ldr	r3, [r7, #16]
 8012ef8:	015a      	lsls	r2, r3, #5
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	4413      	add	r3, r2
 8012efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f02:	461a      	mov	r2, r3
 8012f04:	2300      	movs	r3, #0
 8012f06:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8012f08:	693b      	ldr	r3, [r7, #16]
 8012f0a:	015a      	lsls	r2, r3, #5
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	4413      	add	r3, r2
 8012f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f14:	461a      	mov	r2, r3
 8012f16:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012f1a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012f1c:	693b      	ldr	r3, [r7, #16]
 8012f1e:	3301      	adds	r3, #1
 8012f20:	613b      	str	r3, [r7, #16]
 8012f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f24:	693a      	ldr	r2, [r7, #16]
 8012f26:	429a      	cmp	r2, r3
 8012f28:	d3b7      	bcc.n	8012e9a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012f2a:	2300      	movs	r3, #0
 8012f2c:	613b      	str	r3, [r7, #16]
 8012f2e:	e043      	b.n	8012fb8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012f30:	693b      	ldr	r3, [r7, #16]
 8012f32:	015a      	lsls	r2, r3, #5
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	4413      	add	r3, r2
 8012f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012f42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012f46:	d118      	bne.n	8012f7a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8012f48:	693b      	ldr	r3, [r7, #16]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d10a      	bne.n	8012f64 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8012f4e:	693b      	ldr	r3, [r7, #16]
 8012f50:	015a      	lsls	r2, r3, #5
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	4413      	add	r3, r2
 8012f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f5a:	461a      	mov	r2, r3
 8012f5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012f60:	6013      	str	r3, [r2, #0]
 8012f62:	e013      	b.n	8012f8c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8012f64:	693b      	ldr	r3, [r7, #16]
 8012f66:	015a      	lsls	r2, r3, #5
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	4413      	add	r3, r2
 8012f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f70:	461a      	mov	r2, r3
 8012f72:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012f76:	6013      	str	r3, [r2, #0]
 8012f78:	e008      	b.n	8012f8c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8012f7a:	693b      	ldr	r3, [r7, #16]
 8012f7c:	015a      	lsls	r2, r3, #5
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	4413      	add	r3, r2
 8012f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f86:	461a      	mov	r2, r3
 8012f88:	2300      	movs	r3, #0
 8012f8a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012f8c:	693b      	ldr	r3, [r7, #16]
 8012f8e:	015a      	lsls	r2, r3, #5
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	4413      	add	r3, r2
 8012f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f98:	461a      	mov	r2, r3
 8012f9a:	2300      	movs	r3, #0
 8012f9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8012f9e:	693b      	ldr	r3, [r7, #16]
 8012fa0:	015a      	lsls	r2, r3, #5
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	4413      	add	r3, r2
 8012fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012faa:	461a      	mov	r2, r3
 8012fac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012fb0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012fb2:	693b      	ldr	r3, [r7, #16]
 8012fb4:	3301      	adds	r3, #1
 8012fb6:	613b      	str	r3, [r7, #16]
 8012fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fba:	693a      	ldr	r2, [r7, #16]
 8012fbc:	429a      	cmp	r2, r3
 8012fbe:	d3b7      	bcc.n	8012f30 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fc6:	691b      	ldr	r3, [r3, #16]
 8012fc8:	68fa      	ldr	r2, [r7, #12]
 8012fca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012fce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012fd2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	2200      	movs	r2, #0
 8012fd8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8012fe0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8012fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d105      	bne.n	8012ff4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	699b      	ldr	r3, [r3, #24]
 8012fec:	f043 0210 	orr.w	r2, r3, #16
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	699a      	ldr	r2, [r3, #24]
 8012ff8:	4b0e      	ldr	r3, [pc, #56]	; (8013034 <USB_DevInit+0x2b4>)
 8012ffa:	4313      	orrs	r3, r2
 8012ffc:	687a      	ldr	r2, [r7, #4]
 8012ffe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8013000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013002:	2b00      	cmp	r3, #0
 8013004:	d005      	beq.n	8013012 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	699b      	ldr	r3, [r3, #24]
 801300a:	f043 0208 	orr.w	r2, r3, #8
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8013012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013014:	2b01      	cmp	r3, #1
 8013016:	d105      	bne.n	8013024 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	699a      	ldr	r2, [r3, #24]
 801301c:	4b06      	ldr	r3, [pc, #24]	; (8013038 <USB_DevInit+0x2b8>)
 801301e:	4313      	orrs	r3, r2
 8013020:	687a      	ldr	r2, [r7, #4]
 8013022:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8013024:	7dfb      	ldrb	r3, [r7, #23]
}
 8013026:	4618      	mov	r0, r3
 8013028:	3718      	adds	r7, #24
 801302a:	46bd      	mov	sp, r7
 801302c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013030:	b004      	add	sp, #16
 8013032:	4770      	bx	lr
 8013034:	803c3800 	.word	0x803c3800
 8013038:	40000004 	.word	0x40000004

0801303c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801303c:	b480      	push	{r7}
 801303e:	b085      	sub	sp, #20
 8013040:	af00      	add	r7, sp, #0
 8013042:	6078      	str	r0, [r7, #4]
 8013044:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013046:	2300      	movs	r3, #0
 8013048:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	3301      	adds	r3, #1
 801304e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	4a13      	ldr	r2, [pc, #76]	; (80130a0 <USB_FlushTxFifo+0x64>)
 8013054:	4293      	cmp	r3, r2
 8013056:	d901      	bls.n	801305c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8013058:	2303      	movs	r3, #3
 801305a:	e01b      	b.n	8013094 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	691b      	ldr	r3, [r3, #16]
 8013060:	2b00      	cmp	r3, #0
 8013062:	daf2      	bge.n	801304a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8013064:	2300      	movs	r3, #0
 8013066:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8013068:	683b      	ldr	r3, [r7, #0]
 801306a:	019b      	lsls	r3, r3, #6
 801306c:	f043 0220 	orr.w	r2, r3, #32
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	3301      	adds	r3, #1
 8013078:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	4a08      	ldr	r2, [pc, #32]	; (80130a0 <USB_FlushTxFifo+0x64>)
 801307e:	4293      	cmp	r3, r2
 8013080:	d901      	bls.n	8013086 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8013082:	2303      	movs	r3, #3
 8013084:	e006      	b.n	8013094 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	691b      	ldr	r3, [r3, #16]
 801308a:	f003 0320 	and.w	r3, r3, #32
 801308e:	2b20      	cmp	r3, #32
 8013090:	d0f0      	beq.n	8013074 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8013092:	2300      	movs	r3, #0
}
 8013094:	4618      	mov	r0, r3
 8013096:	3714      	adds	r7, #20
 8013098:	46bd      	mov	sp, r7
 801309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801309e:	4770      	bx	lr
 80130a0:	00030d40 	.word	0x00030d40

080130a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80130a4:	b480      	push	{r7}
 80130a6:	b085      	sub	sp, #20
 80130a8:	af00      	add	r7, sp, #0
 80130aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80130ac:	2300      	movs	r3, #0
 80130ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	3301      	adds	r3, #1
 80130b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	4a11      	ldr	r2, [pc, #68]	; (8013100 <USB_FlushRxFifo+0x5c>)
 80130ba:	4293      	cmp	r3, r2
 80130bc:	d901      	bls.n	80130c2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80130be:	2303      	movs	r3, #3
 80130c0:	e018      	b.n	80130f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	691b      	ldr	r3, [r3, #16]
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	daf2      	bge.n	80130b0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80130ca:	2300      	movs	r3, #0
 80130cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	2210      	movs	r2, #16
 80130d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	3301      	adds	r3, #1
 80130d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	4a08      	ldr	r2, [pc, #32]	; (8013100 <USB_FlushRxFifo+0x5c>)
 80130de:	4293      	cmp	r3, r2
 80130e0:	d901      	bls.n	80130e6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80130e2:	2303      	movs	r3, #3
 80130e4:	e006      	b.n	80130f4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	691b      	ldr	r3, [r3, #16]
 80130ea:	f003 0310 	and.w	r3, r3, #16
 80130ee:	2b10      	cmp	r3, #16
 80130f0:	d0f0      	beq.n	80130d4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80130f2:	2300      	movs	r3, #0
}
 80130f4:	4618      	mov	r0, r3
 80130f6:	3714      	adds	r7, #20
 80130f8:	46bd      	mov	sp, r7
 80130fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130fe:	4770      	bx	lr
 8013100:	00030d40 	.word	0x00030d40

08013104 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8013104:	b480      	push	{r7}
 8013106:	b085      	sub	sp, #20
 8013108:	af00      	add	r7, sp, #0
 801310a:	6078      	str	r0, [r7, #4]
 801310c:	460b      	mov	r3, r1
 801310e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801311a:	681a      	ldr	r2, [r3, #0]
 801311c:	78fb      	ldrb	r3, [r7, #3]
 801311e:	68f9      	ldr	r1, [r7, #12]
 8013120:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013124:	4313      	orrs	r3, r2
 8013126:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8013128:	2300      	movs	r3, #0
}
 801312a:	4618      	mov	r0, r3
 801312c:	3714      	adds	r7, #20
 801312e:	46bd      	mov	sp, r7
 8013130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013134:	4770      	bx	lr

08013136 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8013136:	b480      	push	{r7}
 8013138:	b087      	sub	sp, #28
 801313a:	af00      	add	r7, sp, #0
 801313c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8013142:	693b      	ldr	r3, [r7, #16]
 8013144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013148:	689b      	ldr	r3, [r3, #8]
 801314a:	f003 0306 	and.w	r3, r3, #6
 801314e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	2b00      	cmp	r3, #0
 8013154:	d102      	bne.n	801315c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8013156:	2300      	movs	r3, #0
 8013158:	75fb      	strb	r3, [r7, #23]
 801315a:	e00a      	b.n	8013172 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	2b02      	cmp	r3, #2
 8013160:	d002      	beq.n	8013168 <USB_GetDevSpeed+0x32>
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	2b06      	cmp	r3, #6
 8013166:	d102      	bne.n	801316e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8013168:	2302      	movs	r3, #2
 801316a:	75fb      	strb	r3, [r7, #23]
 801316c:	e001      	b.n	8013172 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801316e:	230f      	movs	r3, #15
 8013170:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8013172:	7dfb      	ldrb	r3, [r7, #23]
}
 8013174:	4618      	mov	r0, r3
 8013176:	371c      	adds	r7, #28
 8013178:	46bd      	mov	sp, r7
 801317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801317e:	4770      	bx	lr

08013180 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013180:	b480      	push	{r7}
 8013182:	b085      	sub	sp, #20
 8013184:	af00      	add	r7, sp, #0
 8013186:	6078      	str	r0, [r7, #4]
 8013188:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801318e:	683b      	ldr	r3, [r7, #0]
 8013190:	781b      	ldrb	r3, [r3, #0]
 8013192:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013194:	683b      	ldr	r3, [r7, #0]
 8013196:	785b      	ldrb	r3, [r3, #1]
 8013198:	2b01      	cmp	r3, #1
 801319a:	d139      	bne.n	8013210 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80131a2:	69da      	ldr	r2, [r3, #28]
 80131a4:	683b      	ldr	r3, [r7, #0]
 80131a6:	781b      	ldrb	r3, [r3, #0]
 80131a8:	f003 030f 	and.w	r3, r3, #15
 80131ac:	2101      	movs	r1, #1
 80131ae:	fa01 f303 	lsl.w	r3, r1, r3
 80131b2:	b29b      	uxth	r3, r3
 80131b4:	68f9      	ldr	r1, [r7, #12]
 80131b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80131ba:	4313      	orrs	r3, r2
 80131bc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80131be:	68bb      	ldr	r3, [r7, #8]
 80131c0:	015a      	lsls	r2, r3, #5
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	4413      	add	r3, r2
 80131c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d153      	bne.n	801327c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80131d4:	68bb      	ldr	r3, [r7, #8]
 80131d6:	015a      	lsls	r2, r3, #5
 80131d8:	68fb      	ldr	r3, [r7, #12]
 80131da:	4413      	add	r3, r2
 80131dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131e0:	681a      	ldr	r2, [r3, #0]
 80131e2:	683b      	ldr	r3, [r7, #0]
 80131e4:	689b      	ldr	r3, [r3, #8]
 80131e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80131ea:	683b      	ldr	r3, [r7, #0]
 80131ec:	791b      	ldrb	r3, [r3, #4]
 80131ee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80131f0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80131f2:	68bb      	ldr	r3, [r7, #8]
 80131f4:	059b      	lsls	r3, r3, #22
 80131f6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80131f8:	431a      	orrs	r2, r3
 80131fa:	68bb      	ldr	r3, [r7, #8]
 80131fc:	0159      	lsls	r1, r3, #5
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	440b      	add	r3, r1
 8013202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013206:	4619      	mov	r1, r3
 8013208:	4b20      	ldr	r3, [pc, #128]	; (801328c <USB_ActivateEndpoint+0x10c>)
 801320a:	4313      	orrs	r3, r2
 801320c:	600b      	str	r3, [r1, #0]
 801320e:	e035      	b.n	801327c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013216:	69da      	ldr	r2, [r3, #28]
 8013218:	683b      	ldr	r3, [r7, #0]
 801321a:	781b      	ldrb	r3, [r3, #0]
 801321c:	f003 030f 	and.w	r3, r3, #15
 8013220:	2101      	movs	r1, #1
 8013222:	fa01 f303 	lsl.w	r3, r1, r3
 8013226:	041b      	lsls	r3, r3, #16
 8013228:	68f9      	ldr	r1, [r7, #12]
 801322a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801322e:	4313      	orrs	r3, r2
 8013230:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8013232:	68bb      	ldr	r3, [r7, #8]
 8013234:	015a      	lsls	r2, r3, #5
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	4413      	add	r3, r2
 801323a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013244:	2b00      	cmp	r3, #0
 8013246:	d119      	bne.n	801327c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013248:	68bb      	ldr	r3, [r7, #8]
 801324a:	015a      	lsls	r2, r3, #5
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	4413      	add	r3, r2
 8013250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013254:	681a      	ldr	r2, [r3, #0]
 8013256:	683b      	ldr	r3, [r7, #0]
 8013258:	689b      	ldr	r3, [r3, #8]
 801325a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801325e:	683b      	ldr	r3, [r7, #0]
 8013260:	791b      	ldrb	r3, [r3, #4]
 8013262:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013264:	430b      	orrs	r3, r1
 8013266:	431a      	orrs	r2, r3
 8013268:	68bb      	ldr	r3, [r7, #8]
 801326a:	0159      	lsls	r1, r3, #5
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	440b      	add	r3, r1
 8013270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013274:	4619      	mov	r1, r3
 8013276:	4b05      	ldr	r3, [pc, #20]	; (801328c <USB_ActivateEndpoint+0x10c>)
 8013278:	4313      	orrs	r3, r2
 801327a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801327c:	2300      	movs	r3, #0
}
 801327e:	4618      	mov	r0, r3
 8013280:	3714      	adds	r7, #20
 8013282:	46bd      	mov	sp, r7
 8013284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013288:	4770      	bx	lr
 801328a:	bf00      	nop
 801328c:	10008000 	.word	0x10008000

08013290 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013290:	b480      	push	{r7}
 8013292:	b085      	sub	sp, #20
 8013294:	af00      	add	r7, sp, #0
 8013296:	6078      	str	r0, [r7, #4]
 8013298:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801329e:	683b      	ldr	r3, [r7, #0]
 80132a0:	781b      	ldrb	r3, [r3, #0]
 80132a2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80132a4:	683b      	ldr	r3, [r7, #0]
 80132a6:	785b      	ldrb	r3, [r3, #1]
 80132a8:	2b01      	cmp	r3, #1
 80132aa:	d161      	bne.n	8013370 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80132ac:	68bb      	ldr	r3, [r7, #8]
 80132ae:	015a      	lsls	r2, r3, #5
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	4413      	add	r3, r2
 80132b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80132be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80132c2:	d11f      	bne.n	8013304 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80132c4:	68bb      	ldr	r3, [r7, #8]
 80132c6:	015a      	lsls	r2, r3, #5
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	4413      	add	r3, r2
 80132cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	68ba      	ldr	r2, [r7, #8]
 80132d4:	0151      	lsls	r1, r2, #5
 80132d6:	68fa      	ldr	r2, [r7, #12]
 80132d8:	440a      	add	r2, r1
 80132da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80132de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80132e2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80132e4:	68bb      	ldr	r3, [r7, #8]
 80132e6:	015a      	lsls	r2, r3, #5
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	4413      	add	r3, r2
 80132ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	68ba      	ldr	r2, [r7, #8]
 80132f4:	0151      	lsls	r1, r2, #5
 80132f6:	68fa      	ldr	r2, [r7, #12]
 80132f8:	440a      	add	r2, r1
 80132fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80132fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013302:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013304:	68fb      	ldr	r3, [r7, #12]
 8013306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801330a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801330c:	683b      	ldr	r3, [r7, #0]
 801330e:	781b      	ldrb	r3, [r3, #0]
 8013310:	f003 030f 	and.w	r3, r3, #15
 8013314:	2101      	movs	r1, #1
 8013316:	fa01 f303 	lsl.w	r3, r1, r3
 801331a:	b29b      	uxth	r3, r3
 801331c:	43db      	mvns	r3, r3
 801331e:	68f9      	ldr	r1, [r7, #12]
 8013320:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013324:	4013      	ands	r3, r2
 8013326:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801332e:	69da      	ldr	r2, [r3, #28]
 8013330:	683b      	ldr	r3, [r7, #0]
 8013332:	781b      	ldrb	r3, [r3, #0]
 8013334:	f003 030f 	and.w	r3, r3, #15
 8013338:	2101      	movs	r1, #1
 801333a:	fa01 f303 	lsl.w	r3, r1, r3
 801333e:	b29b      	uxth	r3, r3
 8013340:	43db      	mvns	r3, r3
 8013342:	68f9      	ldr	r1, [r7, #12]
 8013344:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013348:	4013      	ands	r3, r2
 801334a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801334c:	68bb      	ldr	r3, [r7, #8]
 801334e:	015a      	lsls	r2, r3, #5
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	4413      	add	r3, r2
 8013354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013358:	681a      	ldr	r2, [r3, #0]
 801335a:	68bb      	ldr	r3, [r7, #8]
 801335c:	0159      	lsls	r1, r3, #5
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	440b      	add	r3, r1
 8013362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013366:	4619      	mov	r1, r3
 8013368:	4b35      	ldr	r3, [pc, #212]	; (8013440 <USB_DeactivateEndpoint+0x1b0>)
 801336a:	4013      	ands	r3, r2
 801336c:	600b      	str	r3, [r1, #0]
 801336e:	e060      	b.n	8013432 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013370:	68bb      	ldr	r3, [r7, #8]
 8013372:	015a      	lsls	r2, r3, #5
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	4413      	add	r3, r2
 8013378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801337c:	681b      	ldr	r3, [r3, #0]
 801337e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013382:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013386:	d11f      	bne.n	80133c8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8013388:	68bb      	ldr	r3, [r7, #8]
 801338a:	015a      	lsls	r2, r3, #5
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	4413      	add	r3, r2
 8013390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013394:	681b      	ldr	r3, [r3, #0]
 8013396:	68ba      	ldr	r2, [r7, #8]
 8013398:	0151      	lsls	r1, r2, #5
 801339a:	68fa      	ldr	r2, [r7, #12]
 801339c:	440a      	add	r2, r1
 801339e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80133a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80133a6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80133a8:	68bb      	ldr	r3, [r7, #8]
 80133aa:	015a      	lsls	r2, r3, #5
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	4413      	add	r3, r2
 80133b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133b4:	681b      	ldr	r3, [r3, #0]
 80133b6:	68ba      	ldr	r2, [r7, #8]
 80133b8:	0151      	lsls	r1, r2, #5
 80133ba:	68fa      	ldr	r2, [r7, #12]
 80133bc:	440a      	add	r2, r1
 80133be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80133c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80133c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80133ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80133d0:	683b      	ldr	r3, [r7, #0]
 80133d2:	781b      	ldrb	r3, [r3, #0]
 80133d4:	f003 030f 	and.w	r3, r3, #15
 80133d8:	2101      	movs	r1, #1
 80133da:	fa01 f303 	lsl.w	r3, r1, r3
 80133de:	041b      	lsls	r3, r3, #16
 80133e0:	43db      	mvns	r3, r3
 80133e2:	68f9      	ldr	r1, [r7, #12]
 80133e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80133e8:	4013      	ands	r3, r2
 80133ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80133ec:	68fb      	ldr	r3, [r7, #12]
 80133ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80133f2:	69da      	ldr	r2, [r3, #28]
 80133f4:	683b      	ldr	r3, [r7, #0]
 80133f6:	781b      	ldrb	r3, [r3, #0]
 80133f8:	f003 030f 	and.w	r3, r3, #15
 80133fc:	2101      	movs	r1, #1
 80133fe:	fa01 f303 	lsl.w	r3, r1, r3
 8013402:	041b      	lsls	r3, r3, #16
 8013404:	43db      	mvns	r3, r3
 8013406:	68f9      	ldr	r1, [r7, #12]
 8013408:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801340c:	4013      	ands	r3, r2
 801340e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013410:	68bb      	ldr	r3, [r7, #8]
 8013412:	015a      	lsls	r2, r3, #5
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	4413      	add	r3, r2
 8013418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801341c:	681a      	ldr	r2, [r3, #0]
 801341e:	68bb      	ldr	r3, [r7, #8]
 8013420:	0159      	lsls	r1, r3, #5
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	440b      	add	r3, r1
 8013426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801342a:	4619      	mov	r1, r3
 801342c:	4b05      	ldr	r3, [pc, #20]	; (8013444 <USB_DeactivateEndpoint+0x1b4>)
 801342e:	4013      	ands	r3, r2
 8013430:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8013432:	2300      	movs	r3, #0
}
 8013434:	4618      	mov	r0, r3
 8013436:	3714      	adds	r7, #20
 8013438:	46bd      	mov	sp, r7
 801343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801343e:	4770      	bx	lr
 8013440:	ec337800 	.word	0xec337800
 8013444:	eff37800 	.word	0xeff37800

08013448 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8013448:	b580      	push	{r7, lr}
 801344a:	b08a      	sub	sp, #40	; 0x28
 801344c:	af02      	add	r7, sp, #8
 801344e:	60f8      	str	r0, [r7, #12]
 8013450:	60b9      	str	r1, [r7, #8]
 8013452:	4613      	mov	r3, r2
 8013454:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801345a:	68bb      	ldr	r3, [r7, #8]
 801345c:	781b      	ldrb	r3, [r3, #0]
 801345e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013460:	68bb      	ldr	r3, [r7, #8]
 8013462:	785b      	ldrb	r3, [r3, #1]
 8013464:	2b01      	cmp	r3, #1
 8013466:	f040 8181 	bne.w	801376c <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801346a:	68bb      	ldr	r3, [r7, #8]
 801346c:	691b      	ldr	r3, [r3, #16]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d132      	bne.n	80134d8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013472:	69bb      	ldr	r3, [r7, #24]
 8013474:	015a      	lsls	r2, r3, #5
 8013476:	69fb      	ldr	r3, [r7, #28]
 8013478:	4413      	add	r3, r2
 801347a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801347e:	691a      	ldr	r2, [r3, #16]
 8013480:	69bb      	ldr	r3, [r7, #24]
 8013482:	0159      	lsls	r1, r3, #5
 8013484:	69fb      	ldr	r3, [r7, #28]
 8013486:	440b      	add	r3, r1
 8013488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801348c:	4619      	mov	r1, r3
 801348e:	4ba5      	ldr	r3, [pc, #660]	; (8013724 <USB_EPStartXfer+0x2dc>)
 8013490:	4013      	ands	r3, r2
 8013492:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013494:	69bb      	ldr	r3, [r7, #24]
 8013496:	015a      	lsls	r2, r3, #5
 8013498:	69fb      	ldr	r3, [r7, #28]
 801349a:	4413      	add	r3, r2
 801349c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134a0:	691b      	ldr	r3, [r3, #16]
 80134a2:	69ba      	ldr	r2, [r7, #24]
 80134a4:	0151      	lsls	r1, r2, #5
 80134a6:	69fa      	ldr	r2, [r7, #28]
 80134a8:	440a      	add	r2, r1
 80134aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80134ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80134b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80134b4:	69bb      	ldr	r3, [r7, #24]
 80134b6:	015a      	lsls	r2, r3, #5
 80134b8:	69fb      	ldr	r3, [r7, #28]
 80134ba:	4413      	add	r3, r2
 80134bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134c0:	691a      	ldr	r2, [r3, #16]
 80134c2:	69bb      	ldr	r3, [r7, #24]
 80134c4:	0159      	lsls	r1, r3, #5
 80134c6:	69fb      	ldr	r3, [r7, #28]
 80134c8:	440b      	add	r3, r1
 80134ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134ce:	4619      	mov	r1, r3
 80134d0:	4b95      	ldr	r3, [pc, #596]	; (8013728 <USB_EPStartXfer+0x2e0>)
 80134d2:	4013      	ands	r3, r2
 80134d4:	610b      	str	r3, [r1, #16]
 80134d6:	e092      	b.n	80135fe <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80134d8:	69bb      	ldr	r3, [r7, #24]
 80134da:	015a      	lsls	r2, r3, #5
 80134dc:	69fb      	ldr	r3, [r7, #28]
 80134de:	4413      	add	r3, r2
 80134e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134e4:	691a      	ldr	r2, [r3, #16]
 80134e6:	69bb      	ldr	r3, [r7, #24]
 80134e8:	0159      	lsls	r1, r3, #5
 80134ea:	69fb      	ldr	r3, [r7, #28]
 80134ec:	440b      	add	r3, r1
 80134ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134f2:	4619      	mov	r1, r3
 80134f4:	4b8c      	ldr	r3, [pc, #560]	; (8013728 <USB_EPStartXfer+0x2e0>)
 80134f6:	4013      	ands	r3, r2
 80134f8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80134fa:	69bb      	ldr	r3, [r7, #24]
 80134fc:	015a      	lsls	r2, r3, #5
 80134fe:	69fb      	ldr	r3, [r7, #28]
 8013500:	4413      	add	r3, r2
 8013502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013506:	691a      	ldr	r2, [r3, #16]
 8013508:	69bb      	ldr	r3, [r7, #24]
 801350a:	0159      	lsls	r1, r3, #5
 801350c:	69fb      	ldr	r3, [r7, #28]
 801350e:	440b      	add	r3, r1
 8013510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013514:	4619      	mov	r1, r3
 8013516:	4b83      	ldr	r3, [pc, #524]	; (8013724 <USB_EPStartXfer+0x2dc>)
 8013518:	4013      	ands	r3, r2
 801351a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 801351c:	69bb      	ldr	r3, [r7, #24]
 801351e:	2b00      	cmp	r3, #0
 8013520:	d11a      	bne.n	8013558 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8013522:	68bb      	ldr	r3, [r7, #8]
 8013524:	691a      	ldr	r2, [r3, #16]
 8013526:	68bb      	ldr	r3, [r7, #8]
 8013528:	689b      	ldr	r3, [r3, #8]
 801352a:	429a      	cmp	r2, r3
 801352c:	d903      	bls.n	8013536 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 801352e:	68bb      	ldr	r3, [r7, #8]
 8013530:	689a      	ldr	r2, [r3, #8]
 8013532:	68bb      	ldr	r3, [r7, #8]
 8013534:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013536:	69bb      	ldr	r3, [r7, #24]
 8013538:	015a      	lsls	r2, r3, #5
 801353a:	69fb      	ldr	r3, [r7, #28]
 801353c:	4413      	add	r3, r2
 801353e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013542:	691b      	ldr	r3, [r3, #16]
 8013544:	69ba      	ldr	r2, [r7, #24]
 8013546:	0151      	lsls	r1, r2, #5
 8013548:	69fa      	ldr	r2, [r7, #28]
 801354a:	440a      	add	r2, r1
 801354c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013550:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013554:	6113      	str	r3, [r2, #16]
 8013556:	e01b      	b.n	8013590 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013558:	69bb      	ldr	r3, [r7, #24]
 801355a:	015a      	lsls	r2, r3, #5
 801355c:	69fb      	ldr	r3, [r7, #28]
 801355e:	4413      	add	r3, r2
 8013560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013564:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8013566:	68bb      	ldr	r3, [r7, #8]
 8013568:	6919      	ldr	r1, [r3, #16]
 801356a:	68bb      	ldr	r3, [r7, #8]
 801356c:	689b      	ldr	r3, [r3, #8]
 801356e:	440b      	add	r3, r1
 8013570:	1e59      	subs	r1, r3, #1
 8013572:	68bb      	ldr	r3, [r7, #8]
 8013574:	689b      	ldr	r3, [r3, #8]
 8013576:	fbb1 f3f3 	udiv	r3, r1, r3
 801357a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801357c:	4b6b      	ldr	r3, [pc, #428]	; (801372c <USB_EPStartXfer+0x2e4>)
 801357e:	400b      	ands	r3, r1
 8013580:	69b9      	ldr	r1, [r7, #24]
 8013582:	0148      	lsls	r0, r1, #5
 8013584:	69f9      	ldr	r1, [r7, #28]
 8013586:	4401      	add	r1, r0
 8013588:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801358c:	4313      	orrs	r3, r2
 801358e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013590:	69bb      	ldr	r3, [r7, #24]
 8013592:	015a      	lsls	r2, r3, #5
 8013594:	69fb      	ldr	r3, [r7, #28]
 8013596:	4413      	add	r3, r2
 8013598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801359c:	691a      	ldr	r2, [r3, #16]
 801359e:	68bb      	ldr	r3, [r7, #8]
 80135a0:	691b      	ldr	r3, [r3, #16]
 80135a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80135a6:	69b9      	ldr	r1, [r7, #24]
 80135a8:	0148      	lsls	r0, r1, #5
 80135aa:	69f9      	ldr	r1, [r7, #28]
 80135ac:	4401      	add	r1, r0
 80135ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80135b2:	4313      	orrs	r3, r2
 80135b4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80135b6:	68bb      	ldr	r3, [r7, #8]
 80135b8:	791b      	ldrb	r3, [r3, #4]
 80135ba:	2b01      	cmp	r3, #1
 80135bc:	d11f      	bne.n	80135fe <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80135be:	69bb      	ldr	r3, [r7, #24]
 80135c0:	015a      	lsls	r2, r3, #5
 80135c2:	69fb      	ldr	r3, [r7, #28]
 80135c4:	4413      	add	r3, r2
 80135c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135ca:	691b      	ldr	r3, [r3, #16]
 80135cc:	69ba      	ldr	r2, [r7, #24]
 80135ce:	0151      	lsls	r1, r2, #5
 80135d0:	69fa      	ldr	r2, [r7, #28]
 80135d2:	440a      	add	r2, r1
 80135d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80135d8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80135dc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80135de:	69bb      	ldr	r3, [r7, #24]
 80135e0:	015a      	lsls	r2, r3, #5
 80135e2:	69fb      	ldr	r3, [r7, #28]
 80135e4:	4413      	add	r3, r2
 80135e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135ea:	691b      	ldr	r3, [r3, #16]
 80135ec:	69ba      	ldr	r2, [r7, #24]
 80135ee:	0151      	lsls	r1, r2, #5
 80135f0:	69fa      	ldr	r2, [r7, #28]
 80135f2:	440a      	add	r2, r1
 80135f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80135f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80135fc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80135fe:	79fb      	ldrb	r3, [r7, #7]
 8013600:	2b01      	cmp	r3, #1
 8013602:	d14b      	bne.n	801369c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8013604:	68bb      	ldr	r3, [r7, #8]
 8013606:	69db      	ldr	r3, [r3, #28]
 8013608:	2b00      	cmp	r3, #0
 801360a:	d009      	beq.n	8013620 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801360c:	69bb      	ldr	r3, [r7, #24]
 801360e:	015a      	lsls	r2, r3, #5
 8013610:	69fb      	ldr	r3, [r7, #28]
 8013612:	4413      	add	r3, r2
 8013614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013618:	461a      	mov	r2, r3
 801361a:	68bb      	ldr	r3, [r7, #8]
 801361c:	69db      	ldr	r3, [r3, #28]
 801361e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8013620:	68bb      	ldr	r3, [r7, #8]
 8013622:	791b      	ldrb	r3, [r3, #4]
 8013624:	2b01      	cmp	r3, #1
 8013626:	d128      	bne.n	801367a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013628:	69fb      	ldr	r3, [r7, #28]
 801362a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801362e:	689b      	ldr	r3, [r3, #8]
 8013630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013634:	2b00      	cmp	r3, #0
 8013636:	d110      	bne.n	801365a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013638:	69bb      	ldr	r3, [r7, #24]
 801363a:	015a      	lsls	r2, r3, #5
 801363c:	69fb      	ldr	r3, [r7, #28]
 801363e:	4413      	add	r3, r2
 8013640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013644:	681b      	ldr	r3, [r3, #0]
 8013646:	69ba      	ldr	r2, [r7, #24]
 8013648:	0151      	lsls	r1, r2, #5
 801364a:	69fa      	ldr	r2, [r7, #28]
 801364c:	440a      	add	r2, r1
 801364e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013652:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013656:	6013      	str	r3, [r2, #0]
 8013658:	e00f      	b.n	801367a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801365a:	69bb      	ldr	r3, [r7, #24]
 801365c:	015a      	lsls	r2, r3, #5
 801365e:	69fb      	ldr	r3, [r7, #28]
 8013660:	4413      	add	r3, r2
 8013662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	69ba      	ldr	r2, [r7, #24]
 801366a:	0151      	lsls	r1, r2, #5
 801366c:	69fa      	ldr	r2, [r7, #28]
 801366e:	440a      	add	r2, r1
 8013670:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013678:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801367a:	69bb      	ldr	r3, [r7, #24]
 801367c:	015a      	lsls	r2, r3, #5
 801367e:	69fb      	ldr	r3, [r7, #28]
 8013680:	4413      	add	r3, r2
 8013682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	69ba      	ldr	r2, [r7, #24]
 801368a:	0151      	lsls	r1, r2, #5
 801368c:	69fa      	ldr	r2, [r7, #28]
 801368e:	440a      	add	r2, r1
 8013690:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013694:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013698:	6013      	str	r3, [r2, #0]
 801369a:	e16a      	b.n	8013972 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801369c:	69bb      	ldr	r3, [r7, #24]
 801369e:	015a      	lsls	r2, r3, #5
 80136a0:	69fb      	ldr	r3, [r7, #28]
 80136a2:	4413      	add	r3, r2
 80136a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	69ba      	ldr	r2, [r7, #24]
 80136ac:	0151      	lsls	r1, r2, #5
 80136ae:	69fa      	ldr	r2, [r7, #28]
 80136b0:	440a      	add	r2, r1
 80136b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80136b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80136ba:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80136bc:	68bb      	ldr	r3, [r7, #8]
 80136be:	791b      	ldrb	r3, [r3, #4]
 80136c0:	2b01      	cmp	r3, #1
 80136c2:	d015      	beq.n	80136f0 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80136c4:	68bb      	ldr	r3, [r7, #8]
 80136c6:	691b      	ldr	r3, [r3, #16]
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	f000 8152 	beq.w	8013972 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80136ce:	69fb      	ldr	r3, [r7, #28]
 80136d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80136d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80136d6:	68bb      	ldr	r3, [r7, #8]
 80136d8:	781b      	ldrb	r3, [r3, #0]
 80136da:	f003 030f 	and.w	r3, r3, #15
 80136de:	2101      	movs	r1, #1
 80136e0:	fa01 f303 	lsl.w	r3, r1, r3
 80136e4:	69f9      	ldr	r1, [r7, #28]
 80136e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80136ea:	4313      	orrs	r3, r2
 80136ec:	634b      	str	r3, [r1, #52]	; 0x34
 80136ee:	e140      	b.n	8013972 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80136f0:	69fb      	ldr	r3, [r7, #28]
 80136f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80136f6:	689b      	ldr	r3, [r3, #8]
 80136f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d117      	bne.n	8013730 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013700:	69bb      	ldr	r3, [r7, #24]
 8013702:	015a      	lsls	r2, r3, #5
 8013704:	69fb      	ldr	r3, [r7, #28]
 8013706:	4413      	add	r3, r2
 8013708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	69ba      	ldr	r2, [r7, #24]
 8013710:	0151      	lsls	r1, r2, #5
 8013712:	69fa      	ldr	r2, [r7, #28]
 8013714:	440a      	add	r2, r1
 8013716:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801371a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801371e:	6013      	str	r3, [r2, #0]
 8013720:	e016      	b.n	8013750 <USB_EPStartXfer+0x308>
 8013722:	bf00      	nop
 8013724:	e007ffff 	.word	0xe007ffff
 8013728:	fff80000 	.word	0xfff80000
 801372c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013730:	69bb      	ldr	r3, [r7, #24]
 8013732:	015a      	lsls	r2, r3, #5
 8013734:	69fb      	ldr	r3, [r7, #28]
 8013736:	4413      	add	r3, r2
 8013738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801373c:	681b      	ldr	r3, [r3, #0]
 801373e:	69ba      	ldr	r2, [r7, #24]
 8013740:	0151      	lsls	r1, r2, #5
 8013742:	69fa      	ldr	r2, [r7, #28]
 8013744:	440a      	add	r2, r1
 8013746:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801374a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801374e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8013750:	68bb      	ldr	r3, [r7, #8]
 8013752:	68d9      	ldr	r1, [r3, #12]
 8013754:	68bb      	ldr	r3, [r7, #8]
 8013756:	781a      	ldrb	r2, [r3, #0]
 8013758:	68bb      	ldr	r3, [r7, #8]
 801375a:	691b      	ldr	r3, [r3, #16]
 801375c:	b298      	uxth	r0, r3
 801375e:	79fb      	ldrb	r3, [r7, #7]
 8013760:	9300      	str	r3, [sp, #0]
 8013762:	4603      	mov	r3, r0
 8013764:	68f8      	ldr	r0, [r7, #12]
 8013766:	f000 f9b9 	bl	8013adc <USB_WritePacket>
 801376a:	e102      	b.n	8013972 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801376c:	69bb      	ldr	r3, [r7, #24]
 801376e:	015a      	lsls	r2, r3, #5
 8013770:	69fb      	ldr	r3, [r7, #28]
 8013772:	4413      	add	r3, r2
 8013774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013778:	691a      	ldr	r2, [r3, #16]
 801377a:	69bb      	ldr	r3, [r7, #24]
 801377c:	0159      	lsls	r1, r3, #5
 801377e:	69fb      	ldr	r3, [r7, #28]
 8013780:	440b      	add	r3, r1
 8013782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013786:	4619      	mov	r1, r3
 8013788:	4b7c      	ldr	r3, [pc, #496]	; (801397c <USB_EPStartXfer+0x534>)
 801378a:	4013      	ands	r3, r2
 801378c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801378e:	69bb      	ldr	r3, [r7, #24]
 8013790:	015a      	lsls	r2, r3, #5
 8013792:	69fb      	ldr	r3, [r7, #28]
 8013794:	4413      	add	r3, r2
 8013796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801379a:	691a      	ldr	r2, [r3, #16]
 801379c:	69bb      	ldr	r3, [r7, #24]
 801379e:	0159      	lsls	r1, r3, #5
 80137a0:	69fb      	ldr	r3, [r7, #28]
 80137a2:	440b      	add	r3, r1
 80137a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137a8:	4619      	mov	r1, r3
 80137aa:	4b75      	ldr	r3, [pc, #468]	; (8013980 <USB_EPStartXfer+0x538>)
 80137ac:	4013      	ands	r3, r2
 80137ae:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80137b0:	69bb      	ldr	r3, [r7, #24]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d12f      	bne.n	8013816 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 80137b6:	68bb      	ldr	r3, [r7, #8]
 80137b8:	691b      	ldr	r3, [r3, #16]
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d003      	beq.n	80137c6 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 80137be:	68bb      	ldr	r3, [r7, #8]
 80137c0:	689a      	ldr	r2, [r3, #8]
 80137c2:	68bb      	ldr	r3, [r7, #8]
 80137c4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80137c6:	68bb      	ldr	r3, [r7, #8]
 80137c8:	689a      	ldr	r2, [r3, #8]
 80137ca:	68bb      	ldr	r3, [r7, #8]
 80137cc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80137ce:	69bb      	ldr	r3, [r7, #24]
 80137d0:	015a      	lsls	r2, r3, #5
 80137d2:	69fb      	ldr	r3, [r7, #28]
 80137d4:	4413      	add	r3, r2
 80137d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137da:	691a      	ldr	r2, [r3, #16]
 80137dc:	68bb      	ldr	r3, [r7, #8]
 80137de:	6a1b      	ldr	r3, [r3, #32]
 80137e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80137e4:	69b9      	ldr	r1, [r7, #24]
 80137e6:	0148      	lsls	r0, r1, #5
 80137e8:	69f9      	ldr	r1, [r7, #28]
 80137ea:	4401      	add	r1, r0
 80137ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80137f0:	4313      	orrs	r3, r2
 80137f2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80137f4:	69bb      	ldr	r3, [r7, #24]
 80137f6:	015a      	lsls	r2, r3, #5
 80137f8:	69fb      	ldr	r3, [r7, #28]
 80137fa:	4413      	add	r3, r2
 80137fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013800:	691b      	ldr	r3, [r3, #16]
 8013802:	69ba      	ldr	r2, [r7, #24]
 8013804:	0151      	lsls	r1, r2, #5
 8013806:	69fa      	ldr	r2, [r7, #28]
 8013808:	440a      	add	r2, r1
 801380a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801380e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013812:	6113      	str	r3, [r2, #16]
 8013814:	e05f      	b.n	80138d6 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8013816:	68bb      	ldr	r3, [r7, #8]
 8013818:	691b      	ldr	r3, [r3, #16]
 801381a:	2b00      	cmp	r3, #0
 801381c:	d123      	bne.n	8013866 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801381e:	69bb      	ldr	r3, [r7, #24]
 8013820:	015a      	lsls	r2, r3, #5
 8013822:	69fb      	ldr	r3, [r7, #28]
 8013824:	4413      	add	r3, r2
 8013826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801382a:	691a      	ldr	r2, [r3, #16]
 801382c:	68bb      	ldr	r3, [r7, #8]
 801382e:	689b      	ldr	r3, [r3, #8]
 8013830:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013834:	69b9      	ldr	r1, [r7, #24]
 8013836:	0148      	lsls	r0, r1, #5
 8013838:	69f9      	ldr	r1, [r7, #28]
 801383a:	4401      	add	r1, r0
 801383c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013840:	4313      	orrs	r3, r2
 8013842:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013844:	69bb      	ldr	r3, [r7, #24]
 8013846:	015a      	lsls	r2, r3, #5
 8013848:	69fb      	ldr	r3, [r7, #28]
 801384a:	4413      	add	r3, r2
 801384c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013850:	691b      	ldr	r3, [r3, #16]
 8013852:	69ba      	ldr	r2, [r7, #24]
 8013854:	0151      	lsls	r1, r2, #5
 8013856:	69fa      	ldr	r2, [r7, #28]
 8013858:	440a      	add	r2, r1
 801385a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801385e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013862:	6113      	str	r3, [r2, #16]
 8013864:	e037      	b.n	80138d6 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8013866:	68bb      	ldr	r3, [r7, #8]
 8013868:	691a      	ldr	r2, [r3, #16]
 801386a:	68bb      	ldr	r3, [r7, #8]
 801386c:	689b      	ldr	r3, [r3, #8]
 801386e:	4413      	add	r3, r2
 8013870:	1e5a      	subs	r2, r3, #1
 8013872:	68bb      	ldr	r3, [r7, #8]
 8013874:	689b      	ldr	r3, [r3, #8]
 8013876:	fbb2 f3f3 	udiv	r3, r2, r3
 801387a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 801387c:	68bb      	ldr	r3, [r7, #8]
 801387e:	689b      	ldr	r3, [r3, #8]
 8013880:	8afa      	ldrh	r2, [r7, #22]
 8013882:	fb03 f202 	mul.w	r2, r3, r2
 8013886:	68bb      	ldr	r3, [r7, #8]
 8013888:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801388a:	69bb      	ldr	r3, [r7, #24]
 801388c:	015a      	lsls	r2, r3, #5
 801388e:	69fb      	ldr	r3, [r7, #28]
 8013890:	4413      	add	r3, r2
 8013892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013896:	691a      	ldr	r2, [r3, #16]
 8013898:	8afb      	ldrh	r3, [r7, #22]
 801389a:	04d9      	lsls	r1, r3, #19
 801389c:	4b39      	ldr	r3, [pc, #228]	; (8013984 <USB_EPStartXfer+0x53c>)
 801389e:	400b      	ands	r3, r1
 80138a0:	69b9      	ldr	r1, [r7, #24]
 80138a2:	0148      	lsls	r0, r1, #5
 80138a4:	69f9      	ldr	r1, [r7, #28]
 80138a6:	4401      	add	r1, r0
 80138a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80138ac:	4313      	orrs	r3, r2
 80138ae:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80138b0:	69bb      	ldr	r3, [r7, #24]
 80138b2:	015a      	lsls	r2, r3, #5
 80138b4:	69fb      	ldr	r3, [r7, #28]
 80138b6:	4413      	add	r3, r2
 80138b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138bc:	691a      	ldr	r2, [r3, #16]
 80138be:	68bb      	ldr	r3, [r7, #8]
 80138c0:	6a1b      	ldr	r3, [r3, #32]
 80138c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80138c6:	69b9      	ldr	r1, [r7, #24]
 80138c8:	0148      	lsls	r0, r1, #5
 80138ca:	69f9      	ldr	r1, [r7, #28]
 80138cc:	4401      	add	r1, r0
 80138ce:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80138d2:	4313      	orrs	r3, r2
 80138d4:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80138d6:	79fb      	ldrb	r3, [r7, #7]
 80138d8:	2b01      	cmp	r3, #1
 80138da:	d10d      	bne.n	80138f8 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80138dc:	68bb      	ldr	r3, [r7, #8]
 80138de:	68db      	ldr	r3, [r3, #12]
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d009      	beq.n	80138f8 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80138e4:	68bb      	ldr	r3, [r7, #8]
 80138e6:	68d9      	ldr	r1, [r3, #12]
 80138e8:	69bb      	ldr	r3, [r7, #24]
 80138ea:	015a      	lsls	r2, r3, #5
 80138ec:	69fb      	ldr	r3, [r7, #28]
 80138ee:	4413      	add	r3, r2
 80138f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138f4:	460a      	mov	r2, r1
 80138f6:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80138f8:	68bb      	ldr	r3, [r7, #8]
 80138fa:	791b      	ldrb	r3, [r3, #4]
 80138fc:	2b01      	cmp	r3, #1
 80138fe:	d128      	bne.n	8013952 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013900:	69fb      	ldr	r3, [r7, #28]
 8013902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013906:	689b      	ldr	r3, [r3, #8]
 8013908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801390c:	2b00      	cmp	r3, #0
 801390e:	d110      	bne.n	8013932 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8013910:	69bb      	ldr	r3, [r7, #24]
 8013912:	015a      	lsls	r2, r3, #5
 8013914:	69fb      	ldr	r3, [r7, #28]
 8013916:	4413      	add	r3, r2
 8013918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	69ba      	ldr	r2, [r7, #24]
 8013920:	0151      	lsls	r1, r2, #5
 8013922:	69fa      	ldr	r2, [r7, #28]
 8013924:	440a      	add	r2, r1
 8013926:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801392a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801392e:	6013      	str	r3, [r2, #0]
 8013930:	e00f      	b.n	8013952 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8013932:	69bb      	ldr	r3, [r7, #24]
 8013934:	015a      	lsls	r2, r3, #5
 8013936:	69fb      	ldr	r3, [r7, #28]
 8013938:	4413      	add	r3, r2
 801393a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801393e:	681b      	ldr	r3, [r3, #0]
 8013940:	69ba      	ldr	r2, [r7, #24]
 8013942:	0151      	lsls	r1, r2, #5
 8013944:	69fa      	ldr	r2, [r7, #28]
 8013946:	440a      	add	r2, r1
 8013948:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801394c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013950:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013952:	69bb      	ldr	r3, [r7, #24]
 8013954:	015a      	lsls	r2, r3, #5
 8013956:	69fb      	ldr	r3, [r7, #28]
 8013958:	4413      	add	r3, r2
 801395a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	69ba      	ldr	r2, [r7, #24]
 8013962:	0151      	lsls	r1, r2, #5
 8013964:	69fa      	ldr	r2, [r7, #28]
 8013966:	440a      	add	r2, r1
 8013968:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801396c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013970:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013972:	2300      	movs	r3, #0
}
 8013974:	4618      	mov	r0, r3
 8013976:	3720      	adds	r7, #32
 8013978:	46bd      	mov	sp, r7
 801397a:	bd80      	pop	{r7, pc}
 801397c:	fff80000 	.word	0xfff80000
 8013980:	e007ffff 	.word	0xe007ffff
 8013984:	1ff80000 	.word	0x1ff80000

08013988 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013988:	b480      	push	{r7}
 801398a:	b087      	sub	sp, #28
 801398c:	af00      	add	r7, sp, #0
 801398e:	6078      	str	r0, [r7, #4]
 8013990:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013992:	2300      	movs	r3, #0
 8013994:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8013996:	2300      	movs	r3, #0
 8013998:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801399e:	683b      	ldr	r3, [r7, #0]
 80139a0:	785b      	ldrb	r3, [r3, #1]
 80139a2:	2b01      	cmp	r3, #1
 80139a4:	d14a      	bne.n	8013a3c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80139a6:	683b      	ldr	r3, [r7, #0]
 80139a8:	781b      	ldrb	r3, [r3, #0]
 80139aa:	015a      	lsls	r2, r3, #5
 80139ac:	693b      	ldr	r3, [r7, #16]
 80139ae:	4413      	add	r3, r2
 80139b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139b4:	681b      	ldr	r3, [r3, #0]
 80139b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80139ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80139be:	f040 8086 	bne.w	8013ace <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80139c2:	683b      	ldr	r3, [r7, #0]
 80139c4:	781b      	ldrb	r3, [r3, #0]
 80139c6:	015a      	lsls	r2, r3, #5
 80139c8:	693b      	ldr	r3, [r7, #16]
 80139ca:	4413      	add	r3, r2
 80139cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	683a      	ldr	r2, [r7, #0]
 80139d4:	7812      	ldrb	r2, [r2, #0]
 80139d6:	0151      	lsls	r1, r2, #5
 80139d8:	693a      	ldr	r2, [r7, #16]
 80139da:	440a      	add	r2, r1
 80139dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80139e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80139e4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80139e6:	683b      	ldr	r3, [r7, #0]
 80139e8:	781b      	ldrb	r3, [r3, #0]
 80139ea:	015a      	lsls	r2, r3, #5
 80139ec:	693b      	ldr	r3, [r7, #16]
 80139ee:	4413      	add	r3, r2
 80139f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	683a      	ldr	r2, [r7, #0]
 80139f8:	7812      	ldrb	r2, [r2, #0]
 80139fa:	0151      	lsls	r1, r2, #5
 80139fc:	693a      	ldr	r2, [r7, #16]
 80139fe:	440a      	add	r2, r1
 8013a00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013a04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013a08:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	3301      	adds	r3, #1
 8013a0e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	f242 7210 	movw	r2, #10000	; 0x2710
 8013a16:	4293      	cmp	r3, r2
 8013a18:	d902      	bls.n	8013a20 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8013a1a:	2301      	movs	r3, #1
 8013a1c:	75fb      	strb	r3, [r7, #23]
          break;
 8013a1e:	e056      	b.n	8013ace <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8013a20:	683b      	ldr	r3, [r7, #0]
 8013a22:	781b      	ldrb	r3, [r3, #0]
 8013a24:	015a      	lsls	r2, r3, #5
 8013a26:	693b      	ldr	r3, [r7, #16]
 8013a28:	4413      	add	r3, r2
 8013a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013a34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013a38:	d0e7      	beq.n	8013a0a <USB_EPStopXfer+0x82>
 8013a3a:	e048      	b.n	8013ace <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013a3c:	683b      	ldr	r3, [r7, #0]
 8013a3e:	781b      	ldrb	r3, [r3, #0]
 8013a40:	015a      	lsls	r2, r3, #5
 8013a42:	693b      	ldr	r3, [r7, #16]
 8013a44:	4413      	add	r3, r2
 8013a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a4a:	681b      	ldr	r3, [r3, #0]
 8013a4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013a50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013a54:	d13b      	bne.n	8013ace <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8013a56:	683b      	ldr	r3, [r7, #0]
 8013a58:	781b      	ldrb	r3, [r3, #0]
 8013a5a:	015a      	lsls	r2, r3, #5
 8013a5c:	693b      	ldr	r3, [r7, #16]
 8013a5e:	4413      	add	r3, r2
 8013a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	683a      	ldr	r2, [r7, #0]
 8013a68:	7812      	ldrb	r2, [r2, #0]
 8013a6a:	0151      	lsls	r1, r2, #5
 8013a6c:	693a      	ldr	r2, [r7, #16]
 8013a6e:	440a      	add	r2, r1
 8013a70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013a74:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013a78:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8013a7a:	683b      	ldr	r3, [r7, #0]
 8013a7c:	781b      	ldrb	r3, [r3, #0]
 8013a7e:	015a      	lsls	r2, r3, #5
 8013a80:	693b      	ldr	r3, [r7, #16]
 8013a82:	4413      	add	r3, r2
 8013a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	683a      	ldr	r2, [r7, #0]
 8013a8c:	7812      	ldrb	r2, [r2, #0]
 8013a8e:	0151      	lsls	r1, r2, #5
 8013a90:	693a      	ldr	r2, [r7, #16]
 8013a92:	440a      	add	r2, r1
 8013a94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013a98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013a9c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	3301      	adds	r3, #1
 8013aa2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013aa4:	68fb      	ldr	r3, [r7, #12]
 8013aa6:	f242 7210 	movw	r2, #10000	; 0x2710
 8013aaa:	4293      	cmp	r3, r2
 8013aac:	d902      	bls.n	8013ab4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8013aae:	2301      	movs	r3, #1
 8013ab0:	75fb      	strb	r3, [r7, #23]
          break;
 8013ab2:	e00c      	b.n	8013ace <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8013ab4:	683b      	ldr	r3, [r7, #0]
 8013ab6:	781b      	ldrb	r3, [r3, #0]
 8013ab8:	015a      	lsls	r2, r3, #5
 8013aba:	693b      	ldr	r3, [r7, #16]
 8013abc:	4413      	add	r3, r2
 8013abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ac2:	681b      	ldr	r3, [r3, #0]
 8013ac4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013ac8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013acc:	d0e7      	beq.n	8013a9e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8013ace:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	371c      	adds	r7, #28
 8013ad4:	46bd      	mov	sp, r7
 8013ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ada:	4770      	bx	lr

08013adc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8013adc:	b480      	push	{r7}
 8013ade:	b089      	sub	sp, #36	; 0x24
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	60f8      	str	r0, [r7, #12]
 8013ae4:	60b9      	str	r1, [r7, #8]
 8013ae6:	4611      	mov	r1, r2
 8013ae8:	461a      	mov	r2, r3
 8013aea:	460b      	mov	r3, r1
 8013aec:	71fb      	strb	r3, [r7, #7]
 8013aee:	4613      	mov	r3, r2
 8013af0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8013af6:	68bb      	ldr	r3, [r7, #8]
 8013af8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8013afa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d123      	bne.n	8013b4a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8013b02:	88bb      	ldrh	r3, [r7, #4]
 8013b04:	3303      	adds	r3, #3
 8013b06:	089b      	lsrs	r3, r3, #2
 8013b08:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8013b0a:	2300      	movs	r3, #0
 8013b0c:	61bb      	str	r3, [r7, #24]
 8013b0e:	e018      	b.n	8013b42 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013b10:	79fb      	ldrb	r3, [r7, #7]
 8013b12:	031a      	lsls	r2, r3, #12
 8013b14:	697b      	ldr	r3, [r7, #20]
 8013b16:	4413      	add	r3, r2
 8013b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013b1c:	461a      	mov	r2, r3
 8013b1e:	69fb      	ldr	r3, [r7, #28]
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	6013      	str	r3, [r2, #0]
      pSrc++;
 8013b24:	69fb      	ldr	r3, [r7, #28]
 8013b26:	3301      	adds	r3, #1
 8013b28:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013b2a:	69fb      	ldr	r3, [r7, #28]
 8013b2c:	3301      	adds	r3, #1
 8013b2e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013b30:	69fb      	ldr	r3, [r7, #28]
 8013b32:	3301      	adds	r3, #1
 8013b34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013b36:	69fb      	ldr	r3, [r7, #28]
 8013b38:	3301      	adds	r3, #1
 8013b3a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8013b3c:	69bb      	ldr	r3, [r7, #24]
 8013b3e:	3301      	adds	r3, #1
 8013b40:	61bb      	str	r3, [r7, #24]
 8013b42:	69ba      	ldr	r2, [r7, #24]
 8013b44:	693b      	ldr	r3, [r7, #16]
 8013b46:	429a      	cmp	r2, r3
 8013b48:	d3e2      	bcc.n	8013b10 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8013b4a:	2300      	movs	r3, #0
}
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	3724      	adds	r7, #36	; 0x24
 8013b50:	46bd      	mov	sp, r7
 8013b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b56:	4770      	bx	lr

08013b58 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8013b58:	b480      	push	{r7}
 8013b5a:	b08b      	sub	sp, #44	; 0x2c
 8013b5c:	af00      	add	r7, sp, #0
 8013b5e:	60f8      	str	r0, [r7, #12]
 8013b60:	60b9      	str	r1, [r7, #8]
 8013b62:	4613      	mov	r3, r2
 8013b64:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b66:	68fb      	ldr	r3, [r7, #12]
 8013b68:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8013b6a:	68bb      	ldr	r3, [r7, #8]
 8013b6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8013b6e:	88fb      	ldrh	r3, [r7, #6]
 8013b70:	089b      	lsrs	r3, r3, #2
 8013b72:	b29b      	uxth	r3, r3
 8013b74:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8013b76:	88fb      	ldrh	r3, [r7, #6]
 8013b78:	f003 0303 	and.w	r3, r3, #3
 8013b7c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8013b7e:	2300      	movs	r3, #0
 8013b80:	623b      	str	r3, [r7, #32]
 8013b82:	e014      	b.n	8013bae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013b84:	69bb      	ldr	r3, [r7, #24]
 8013b86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013b8a:	681a      	ldr	r2, [r3, #0]
 8013b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b8e:	601a      	str	r2, [r3, #0]
    pDest++;
 8013b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b92:	3301      	adds	r3, #1
 8013b94:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b98:	3301      	adds	r3, #1
 8013b9a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b9e:	3301      	adds	r3, #1
 8013ba0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ba4:	3301      	adds	r3, #1
 8013ba6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8013ba8:	6a3b      	ldr	r3, [r7, #32]
 8013baa:	3301      	adds	r3, #1
 8013bac:	623b      	str	r3, [r7, #32]
 8013bae:	6a3a      	ldr	r2, [r7, #32]
 8013bb0:	697b      	ldr	r3, [r7, #20]
 8013bb2:	429a      	cmp	r2, r3
 8013bb4:	d3e6      	bcc.n	8013b84 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8013bb6:	8bfb      	ldrh	r3, [r7, #30]
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d01e      	beq.n	8013bfa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8013bbc:	2300      	movs	r3, #0
 8013bbe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013bc0:	69bb      	ldr	r3, [r7, #24]
 8013bc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013bc6:	461a      	mov	r2, r3
 8013bc8:	f107 0310 	add.w	r3, r7, #16
 8013bcc:	6812      	ldr	r2, [r2, #0]
 8013bce:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8013bd0:	693a      	ldr	r2, [r7, #16]
 8013bd2:	6a3b      	ldr	r3, [r7, #32]
 8013bd4:	b2db      	uxtb	r3, r3
 8013bd6:	00db      	lsls	r3, r3, #3
 8013bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8013bdc:	b2da      	uxtb	r2, r3
 8013bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013be0:	701a      	strb	r2, [r3, #0]
      i++;
 8013be2:	6a3b      	ldr	r3, [r7, #32]
 8013be4:	3301      	adds	r3, #1
 8013be6:	623b      	str	r3, [r7, #32]
      pDest++;
 8013be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bea:	3301      	adds	r3, #1
 8013bec:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8013bee:	8bfb      	ldrh	r3, [r7, #30]
 8013bf0:	3b01      	subs	r3, #1
 8013bf2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8013bf4:	8bfb      	ldrh	r3, [r7, #30]
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d1ea      	bne.n	8013bd0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8013bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	372c      	adds	r7, #44	; 0x2c
 8013c00:	46bd      	mov	sp, r7
 8013c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c06:	4770      	bx	lr

08013c08 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013c08:	b480      	push	{r7}
 8013c0a:	b085      	sub	sp, #20
 8013c0c:	af00      	add	r7, sp, #0
 8013c0e:	6078      	str	r0, [r7, #4]
 8013c10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013c16:	683b      	ldr	r3, [r7, #0]
 8013c18:	781b      	ldrb	r3, [r3, #0]
 8013c1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013c1c:	683b      	ldr	r3, [r7, #0]
 8013c1e:	785b      	ldrb	r3, [r3, #1]
 8013c20:	2b01      	cmp	r3, #1
 8013c22:	d12c      	bne.n	8013c7e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013c24:	68bb      	ldr	r3, [r7, #8]
 8013c26:	015a      	lsls	r2, r3, #5
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	4413      	add	r3, r2
 8013c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c30:	681b      	ldr	r3, [r3, #0]
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	db12      	blt.n	8013c5c <USB_EPSetStall+0x54>
 8013c36:	68bb      	ldr	r3, [r7, #8]
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d00f      	beq.n	8013c5c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8013c3c:	68bb      	ldr	r3, [r7, #8]
 8013c3e:	015a      	lsls	r2, r3, #5
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	4413      	add	r3, r2
 8013c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	68ba      	ldr	r2, [r7, #8]
 8013c4c:	0151      	lsls	r1, r2, #5
 8013c4e:	68fa      	ldr	r2, [r7, #12]
 8013c50:	440a      	add	r2, r1
 8013c52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013c56:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013c5a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013c5c:	68bb      	ldr	r3, [r7, #8]
 8013c5e:	015a      	lsls	r2, r3, #5
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	4413      	add	r3, r2
 8013c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	68ba      	ldr	r2, [r7, #8]
 8013c6c:	0151      	lsls	r1, r2, #5
 8013c6e:	68fa      	ldr	r2, [r7, #12]
 8013c70:	440a      	add	r2, r1
 8013c72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013c76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013c7a:	6013      	str	r3, [r2, #0]
 8013c7c:	e02b      	b.n	8013cd6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013c7e:	68bb      	ldr	r3, [r7, #8]
 8013c80:	015a      	lsls	r2, r3, #5
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	4413      	add	r3, r2
 8013c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	db12      	blt.n	8013cb6 <USB_EPSetStall+0xae>
 8013c90:	68bb      	ldr	r3, [r7, #8]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d00f      	beq.n	8013cb6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8013c96:	68bb      	ldr	r3, [r7, #8]
 8013c98:	015a      	lsls	r2, r3, #5
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	4413      	add	r3, r2
 8013c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	68ba      	ldr	r2, [r7, #8]
 8013ca6:	0151      	lsls	r1, r2, #5
 8013ca8:	68fa      	ldr	r2, [r7, #12]
 8013caa:	440a      	add	r2, r1
 8013cac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013cb0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013cb4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8013cb6:	68bb      	ldr	r3, [r7, #8]
 8013cb8:	015a      	lsls	r2, r3, #5
 8013cba:	68fb      	ldr	r3, [r7, #12]
 8013cbc:	4413      	add	r3, r2
 8013cbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	68ba      	ldr	r2, [r7, #8]
 8013cc6:	0151      	lsls	r1, r2, #5
 8013cc8:	68fa      	ldr	r2, [r7, #12]
 8013cca:	440a      	add	r2, r1
 8013ccc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013cd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013cd4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013cd6:	2300      	movs	r3, #0
}
 8013cd8:	4618      	mov	r0, r3
 8013cda:	3714      	adds	r7, #20
 8013cdc:	46bd      	mov	sp, r7
 8013cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ce2:	4770      	bx	lr

08013ce4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013ce4:	b480      	push	{r7}
 8013ce6:	b085      	sub	sp, #20
 8013ce8:	af00      	add	r7, sp, #0
 8013cea:	6078      	str	r0, [r7, #4]
 8013cec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013cf2:	683b      	ldr	r3, [r7, #0]
 8013cf4:	781b      	ldrb	r3, [r3, #0]
 8013cf6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013cf8:	683b      	ldr	r3, [r7, #0]
 8013cfa:	785b      	ldrb	r3, [r3, #1]
 8013cfc:	2b01      	cmp	r3, #1
 8013cfe:	d128      	bne.n	8013d52 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8013d00:	68bb      	ldr	r3, [r7, #8]
 8013d02:	015a      	lsls	r2, r3, #5
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	4413      	add	r3, r2
 8013d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	68ba      	ldr	r2, [r7, #8]
 8013d10:	0151      	lsls	r1, r2, #5
 8013d12:	68fa      	ldr	r2, [r7, #12]
 8013d14:	440a      	add	r2, r1
 8013d16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013d1e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013d20:	683b      	ldr	r3, [r7, #0]
 8013d22:	791b      	ldrb	r3, [r3, #4]
 8013d24:	2b03      	cmp	r3, #3
 8013d26:	d003      	beq.n	8013d30 <USB_EPClearStall+0x4c>
 8013d28:	683b      	ldr	r3, [r7, #0]
 8013d2a:	791b      	ldrb	r3, [r3, #4]
 8013d2c:	2b02      	cmp	r3, #2
 8013d2e:	d138      	bne.n	8013da2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013d30:	68bb      	ldr	r3, [r7, #8]
 8013d32:	015a      	lsls	r2, r3, #5
 8013d34:	68fb      	ldr	r3, [r7, #12]
 8013d36:	4413      	add	r3, r2
 8013d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	68ba      	ldr	r2, [r7, #8]
 8013d40:	0151      	lsls	r1, r2, #5
 8013d42:	68fa      	ldr	r2, [r7, #12]
 8013d44:	440a      	add	r2, r1
 8013d46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013d4e:	6013      	str	r3, [r2, #0]
 8013d50:	e027      	b.n	8013da2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8013d52:	68bb      	ldr	r3, [r7, #8]
 8013d54:	015a      	lsls	r2, r3, #5
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	4413      	add	r3, r2
 8013d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	68ba      	ldr	r2, [r7, #8]
 8013d62:	0151      	lsls	r1, r2, #5
 8013d64:	68fa      	ldr	r2, [r7, #12]
 8013d66:	440a      	add	r2, r1
 8013d68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013d6c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013d70:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013d72:	683b      	ldr	r3, [r7, #0]
 8013d74:	791b      	ldrb	r3, [r3, #4]
 8013d76:	2b03      	cmp	r3, #3
 8013d78:	d003      	beq.n	8013d82 <USB_EPClearStall+0x9e>
 8013d7a:	683b      	ldr	r3, [r7, #0]
 8013d7c:	791b      	ldrb	r3, [r3, #4]
 8013d7e:	2b02      	cmp	r3, #2
 8013d80:	d10f      	bne.n	8013da2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013d82:	68bb      	ldr	r3, [r7, #8]
 8013d84:	015a      	lsls	r2, r3, #5
 8013d86:	68fb      	ldr	r3, [r7, #12]
 8013d88:	4413      	add	r3, r2
 8013d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	68ba      	ldr	r2, [r7, #8]
 8013d92:	0151      	lsls	r1, r2, #5
 8013d94:	68fa      	ldr	r2, [r7, #12]
 8013d96:	440a      	add	r2, r1
 8013d98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013d9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013da0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8013da2:	2300      	movs	r3, #0
}
 8013da4:	4618      	mov	r0, r3
 8013da6:	3714      	adds	r7, #20
 8013da8:	46bd      	mov	sp, r7
 8013daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dae:	4770      	bx	lr

08013db0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8013db0:	b480      	push	{r7}
 8013db2:	b085      	sub	sp, #20
 8013db4:	af00      	add	r7, sp, #0
 8013db6:	6078      	str	r0, [r7, #4]
 8013db8:	460b      	mov	r3, r1
 8013dba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013dc6:	681b      	ldr	r3, [r3, #0]
 8013dc8:	68fa      	ldr	r2, [r7, #12]
 8013dca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013dce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8013dd2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013dda:	681a      	ldr	r2, [r3, #0]
 8013ddc:	78fb      	ldrb	r3, [r7, #3]
 8013dde:	011b      	lsls	r3, r3, #4
 8013de0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8013de4:	68f9      	ldr	r1, [r7, #12]
 8013de6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013dea:	4313      	orrs	r3, r2
 8013dec:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8013dee:	2300      	movs	r3, #0
}
 8013df0:	4618      	mov	r0, r3
 8013df2:	3714      	adds	r7, #20
 8013df4:	46bd      	mov	sp, r7
 8013df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dfa:	4770      	bx	lr

08013dfc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013dfc:	b480      	push	{r7}
 8013dfe:	b085      	sub	sp, #20
 8013e00:	af00      	add	r7, sp, #0
 8013e02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	68fa      	ldr	r2, [r7, #12]
 8013e12:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013e16:	f023 0303 	bic.w	r3, r3, #3
 8013e1a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e22:	685b      	ldr	r3, [r3, #4]
 8013e24:	68fa      	ldr	r2, [r7, #12]
 8013e26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013e2a:	f023 0302 	bic.w	r3, r3, #2
 8013e2e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013e30:	2300      	movs	r3, #0
}
 8013e32:	4618      	mov	r0, r3
 8013e34:	3714      	adds	r7, #20
 8013e36:	46bd      	mov	sp, r7
 8013e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e3c:	4770      	bx	lr

08013e3e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013e3e:	b480      	push	{r7}
 8013e40:	b085      	sub	sp, #20
 8013e42:	af00      	add	r7, sp, #0
 8013e44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013e50:	681b      	ldr	r3, [r3, #0]
 8013e52:	68fa      	ldr	r2, [r7, #12]
 8013e54:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013e58:	f023 0303 	bic.w	r3, r3, #3
 8013e5c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e64:	685b      	ldr	r3, [r3, #4]
 8013e66:	68fa      	ldr	r2, [r7, #12]
 8013e68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013e6c:	f043 0302 	orr.w	r3, r3, #2
 8013e70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013e72:	2300      	movs	r3, #0
}
 8013e74:	4618      	mov	r0, r3
 8013e76:	3714      	adds	r7, #20
 8013e78:	46bd      	mov	sp, r7
 8013e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e7e:	4770      	bx	lr

08013e80 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8013e80:	b480      	push	{r7}
 8013e82:	b085      	sub	sp, #20
 8013e84:	af00      	add	r7, sp, #0
 8013e86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	695b      	ldr	r3, [r3, #20]
 8013e8c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	699b      	ldr	r3, [r3, #24]
 8013e92:	68fa      	ldr	r2, [r7, #12]
 8013e94:	4013      	ands	r3, r2
 8013e96:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013e98:	68fb      	ldr	r3, [r7, #12]
}
 8013e9a:	4618      	mov	r0, r3
 8013e9c:	3714      	adds	r7, #20
 8013e9e:	46bd      	mov	sp, r7
 8013ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea4:	4770      	bx	lr

08013ea6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013ea6:	b480      	push	{r7}
 8013ea8:	b085      	sub	sp, #20
 8013eaa:	af00      	add	r7, sp, #0
 8013eac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013eb8:	699b      	ldr	r3, [r3, #24]
 8013eba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ec2:	69db      	ldr	r3, [r3, #28]
 8013ec4:	68ba      	ldr	r2, [r7, #8]
 8013ec6:	4013      	ands	r3, r2
 8013ec8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8013eca:	68bb      	ldr	r3, [r7, #8]
 8013ecc:	0c1b      	lsrs	r3, r3, #16
}
 8013ece:	4618      	mov	r0, r3
 8013ed0:	3714      	adds	r7, #20
 8013ed2:	46bd      	mov	sp, r7
 8013ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ed8:	4770      	bx	lr

08013eda <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013eda:	b480      	push	{r7}
 8013edc:	b085      	sub	sp, #20
 8013ede:	af00      	add	r7, sp, #0
 8013ee0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013ee6:	68fb      	ldr	r3, [r7, #12]
 8013ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013eec:	699b      	ldr	r3, [r3, #24]
 8013eee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ef6:	69db      	ldr	r3, [r3, #28]
 8013ef8:	68ba      	ldr	r2, [r7, #8]
 8013efa:	4013      	ands	r3, r2
 8013efc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8013efe:	68bb      	ldr	r3, [r7, #8]
 8013f00:	b29b      	uxth	r3, r3
}
 8013f02:	4618      	mov	r0, r3
 8013f04:	3714      	adds	r7, #20
 8013f06:	46bd      	mov	sp, r7
 8013f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f0c:	4770      	bx	lr

08013f0e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013f0e:	b480      	push	{r7}
 8013f10:	b085      	sub	sp, #20
 8013f12:	af00      	add	r7, sp, #0
 8013f14:	6078      	str	r0, [r7, #4]
 8013f16:	460b      	mov	r3, r1
 8013f18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8013f1e:	78fb      	ldrb	r3, [r7, #3]
 8013f20:	015a      	lsls	r2, r3, #5
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	4413      	add	r3, r2
 8013f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f2a:	689b      	ldr	r3, [r3, #8]
 8013f2c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f34:	695b      	ldr	r3, [r3, #20]
 8013f36:	68ba      	ldr	r2, [r7, #8]
 8013f38:	4013      	ands	r3, r2
 8013f3a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013f3c:	68bb      	ldr	r3, [r7, #8]
}
 8013f3e:	4618      	mov	r0, r3
 8013f40:	3714      	adds	r7, #20
 8013f42:	46bd      	mov	sp, r7
 8013f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f48:	4770      	bx	lr

08013f4a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013f4a:	b480      	push	{r7}
 8013f4c:	b087      	sub	sp, #28
 8013f4e:	af00      	add	r7, sp, #0
 8013f50:	6078      	str	r0, [r7, #4]
 8013f52:	460b      	mov	r3, r1
 8013f54:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8013f5a:	697b      	ldr	r3, [r7, #20]
 8013f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f60:	691b      	ldr	r3, [r3, #16]
 8013f62:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8013f64:	697b      	ldr	r3, [r7, #20]
 8013f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013f6c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8013f6e:	78fb      	ldrb	r3, [r7, #3]
 8013f70:	f003 030f 	and.w	r3, r3, #15
 8013f74:	68fa      	ldr	r2, [r7, #12]
 8013f76:	fa22 f303 	lsr.w	r3, r2, r3
 8013f7a:	01db      	lsls	r3, r3, #7
 8013f7c:	b2db      	uxtb	r3, r3
 8013f7e:	693a      	ldr	r2, [r7, #16]
 8013f80:	4313      	orrs	r3, r2
 8013f82:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013f84:	78fb      	ldrb	r3, [r7, #3]
 8013f86:	015a      	lsls	r2, r3, #5
 8013f88:	697b      	ldr	r3, [r7, #20]
 8013f8a:	4413      	add	r3, r2
 8013f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f90:	689b      	ldr	r3, [r3, #8]
 8013f92:	693a      	ldr	r2, [r7, #16]
 8013f94:	4013      	ands	r3, r2
 8013f96:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013f98:	68bb      	ldr	r3, [r7, #8]
}
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	371c      	adds	r7, #28
 8013f9e:	46bd      	mov	sp, r7
 8013fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fa4:	4770      	bx	lr

08013fa6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013fa6:	b480      	push	{r7}
 8013fa8:	b083      	sub	sp, #12
 8013faa:	af00      	add	r7, sp, #0
 8013fac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	695b      	ldr	r3, [r3, #20]
 8013fb2:	f003 0301 	and.w	r3, r3, #1
}
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	370c      	adds	r7, #12
 8013fba:	46bd      	mov	sp, r7
 8013fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc0:	4770      	bx	lr
	...

08013fc4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8013fc4:	b480      	push	{r7}
 8013fc6:	b085      	sub	sp, #20
 8013fc8:	af00      	add	r7, sp, #0
 8013fca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fd6:	681a      	ldr	r2, [r3, #0]
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fde:	4619      	mov	r1, r3
 8013fe0:	4b09      	ldr	r3, [pc, #36]	; (8014008 <USB_ActivateSetup+0x44>)
 8013fe2:	4013      	ands	r3, r2
 8013fe4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013fec:	685b      	ldr	r3, [r3, #4]
 8013fee:	68fa      	ldr	r2, [r7, #12]
 8013ff0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013ff8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013ffa:	2300      	movs	r3, #0
}
 8013ffc:	4618      	mov	r0, r3
 8013ffe:	3714      	adds	r7, #20
 8014000:	46bd      	mov	sp, r7
 8014002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014006:	4770      	bx	lr
 8014008:	fffff800 	.word	0xfffff800

0801400c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 801400c:	b480      	push	{r7}
 801400e:	b087      	sub	sp, #28
 8014010:	af00      	add	r7, sp, #0
 8014012:	60f8      	str	r0, [r7, #12]
 8014014:	460b      	mov	r3, r1
 8014016:	607a      	str	r2, [r7, #4]
 8014018:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	333c      	adds	r3, #60	; 0x3c
 8014022:	3304      	adds	r3, #4
 8014024:	681b      	ldr	r3, [r3, #0]
 8014026:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8014028:	693b      	ldr	r3, [r7, #16]
 801402a:	4a26      	ldr	r2, [pc, #152]	; (80140c4 <USB_EP0_OutStart+0xb8>)
 801402c:	4293      	cmp	r3, r2
 801402e:	d90a      	bls.n	8014046 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014030:	697b      	ldr	r3, [r7, #20]
 8014032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014036:	681b      	ldr	r3, [r3, #0]
 8014038:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801403c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014040:	d101      	bne.n	8014046 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8014042:	2300      	movs	r3, #0
 8014044:	e037      	b.n	80140b6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8014046:	697b      	ldr	r3, [r7, #20]
 8014048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801404c:	461a      	mov	r2, r3
 801404e:	2300      	movs	r3, #0
 8014050:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014052:	697b      	ldr	r3, [r7, #20]
 8014054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014058:	691b      	ldr	r3, [r3, #16]
 801405a:	697a      	ldr	r2, [r7, #20]
 801405c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014060:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014064:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8014066:	697b      	ldr	r3, [r7, #20]
 8014068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801406c:	691b      	ldr	r3, [r3, #16]
 801406e:	697a      	ldr	r2, [r7, #20]
 8014070:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014074:	f043 0318 	orr.w	r3, r3, #24
 8014078:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801407a:	697b      	ldr	r3, [r7, #20]
 801407c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014080:	691b      	ldr	r3, [r3, #16]
 8014082:	697a      	ldr	r2, [r7, #20]
 8014084:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014088:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801408c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801408e:	7afb      	ldrb	r3, [r7, #11]
 8014090:	2b01      	cmp	r3, #1
 8014092:	d10f      	bne.n	80140b4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8014094:	697b      	ldr	r3, [r7, #20]
 8014096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801409a:	461a      	mov	r2, r3
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80140a0:	697b      	ldr	r3, [r7, #20]
 80140a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140a6:	681b      	ldr	r3, [r3, #0]
 80140a8:	697a      	ldr	r2, [r7, #20]
 80140aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80140ae:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80140b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80140b4:	2300      	movs	r3, #0
}
 80140b6:	4618      	mov	r0, r3
 80140b8:	371c      	adds	r7, #28
 80140ba:	46bd      	mov	sp, r7
 80140bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140c0:	4770      	bx	lr
 80140c2:	bf00      	nop
 80140c4:	4f54300a 	.word	0x4f54300a

080140c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80140c8:	b480      	push	{r7}
 80140ca:	b085      	sub	sp, #20
 80140cc:	af00      	add	r7, sp, #0
 80140ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80140d0:	2300      	movs	r3, #0
 80140d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80140d4:	68fb      	ldr	r3, [r7, #12]
 80140d6:	3301      	adds	r3, #1
 80140d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	4a13      	ldr	r2, [pc, #76]	; (801412c <USB_CoreReset+0x64>)
 80140de:	4293      	cmp	r3, r2
 80140e0:	d901      	bls.n	80140e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80140e2:	2303      	movs	r3, #3
 80140e4:	e01b      	b.n	801411e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	691b      	ldr	r3, [r3, #16]
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	daf2      	bge.n	80140d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80140ee:	2300      	movs	r3, #0
 80140f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	691b      	ldr	r3, [r3, #16]
 80140f6:	f043 0201 	orr.w	r2, r3, #1
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	3301      	adds	r3, #1
 8014102:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014104:	68fb      	ldr	r3, [r7, #12]
 8014106:	4a09      	ldr	r2, [pc, #36]	; (801412c <USB_CoreReset+0x64>)
 8014108:	4293      	cmp	r3, r2
 801410a:	d901      	bls.n	8014110 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801410c:	2303      	movs	r3, #3
 801410e:	e006      	b.n	801411e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	691b      	ldr	r3, [r3, #16]
 8014114:	f003 0301 	and.w	r3, r3, #1
 8014118:	2b01      	cmp	r3, #1
 801411a:	d0f0      	beq.n	80140fe <USB_CoreReset+0x36>

  return HAL_OK;
 801411c:	2300      	movs	r3, #0
}
 801411e:	4618      	mov	r0, r3
 8014120:	3714      	adds	r7, #20
 8014122:	46bd      	mov	sp, r7
 8014124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014128:	4770      	bx	lr
 801412a:	bf00      	nop
 801412c:	00030d40 	.word	0x00030d40

08014130 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8014130:	b580      	push	{r7, lr}
 8014132:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8014134:	4904      	ldr	r1, [pc, #16]	; (8014148 <MX_FATFS_Init+0x18>)
 8014136:	4805      	ldr	r0, [pc, #20]	; (801414c <MX_FATFS_Init+0x1c>)
 8014138:	f002 fa56 	bl	80165e8 <FATFS_LinkDriver>
 801413c:	4603      	mov	r3, r0
 801413e:	461a      	mov	r2, r3
 8014140:	4b03      	ldr	r3, [pc, #12]	; (8014150 <MX_FATFS_Init+0x20>)
 8014142:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8014144:	bf00      	nop
 8014146:	bd80      	pop	{r7, pc}
 8014148:	240015d8 	.word	0x240015d8
 801414c:	08018594 	.word	0x08018594
 8014150:	240015d4 	.word	0x240015d4

08014154 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8014154:	b580      	push	{r7, lr}
 8014156:	b082      	sub	sp, #8
 8014158:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801415a:	2300      	movs	r3, #0
 801415c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801415e:	f000 f885 	bl	801426c <BSP_SD_IsDetected>
 8014162:	4603      	mov	r3, r0
 8014164:	2b01      	cmp	r3, #1
 8014166:	d001      	beq.n	801416c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8014168:	2302      	movs	r3, #2
 801416a:	e012      	b.n	8014192 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 801416c:	480b      	ldr	r0, [pc, #44]	; (801419c <BSP_SD_Init+0x48>)
 801416e:	f7f8 ff41 	bl	800cff4 <HAL_SD_Init>
 8014172:	4603      	mov	r3, r0
 8014174:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8014176:	79fb      	ldrb	r3, [r7, #7]
 8014178:	2b00      	cmp	r3, #0
 801417a:	d109      	bne.n	8014190 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 801417c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8014180:	4806      	ldr	r0, [pc, #24]	; (801419c <BSP_SD_Init+0x48>)
 8014182:	f7f9 fdf7 	bl	800dd74 <HAL_SD_ConfigWideBusOperation>
 8014186:	4603      	mov	r3, r0
 8014188:	2b00      	cmp	r3, #0
 801418a:	d001      	beq.n	8014190 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 801418c:	2301      	movs	r3, #1
 801418e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8014190:	79fb      	ldrb	r3, [r7, #7]
}
 8014192:	4618      	mov	r0, r3
 8014194:	3708      	adds	r7, #8
 8014196:	46bd      	mov	sp, r7
 8014198:	bd80      	pop	{r7, pc}
 801419a:	bf00      	nop
 801419c:	24000ebc 	.word	0x24000ebc

080141a0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80141a0:	b580      	push	{r7, lr}
 80141a2:	b086      	sub	sp, #24
 80141a4:	af00      	add	r7, sp, #0
 80141a6:	60f8      	str	r0, [r7, #12]
 80141a8:	60b9      	str	r1, [r7, #8]
 80141aa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80141ac:	2300      	movs	r3, #0
 80141ae:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	68ba      	ldr	r2, [r7, #8]
 80141b4:	68f9      	ldr	r1, [r7, #12]
 80141b6:	4806      	ldr	r0, [pc, #24]	; (80141d0 <BSP_SD_ReadBlocks_DMA+0x30>)
 80141b8:	f7f9 f83c 	bl	800d234 <HAL_SD_ReadBlocks_DMA>
 80141bc:	4603      	mov	r3, r0
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d001      	beq.n	80141c6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80141c2:	2301      	movs	r3, #1
 80141c4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80141c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80141c8:	4618      	mov	r0, r3
 80141ca:	3718      	adds	r7, #24
 80141cc:	46bd      	mov	sp, r7
 80141ce:	bd80      	pop	{r7, pc}
 80141d0:	24000ebc 	.word	0x24000ebc

080141d4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80141d4:	b580      	push	{r7, lr}
 80141d6:	b086      	sub	sp, #24
 80141d8:	af00      	add	r7, sp, #0
 80141da:	60f8      	str	r0, [r7, #12]
 80141dc:	60b9      	str	r1, [r7, #8]
 80141de:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80141e0:	2300      	movs	r3, #0
 80141e2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	68ba      	ldr	r2, [r7, #8]
 80141e8:	68f9      	ldr	r1, [r7, #12]
 80141ea:	4806      	ldr	r0, [pc, #24]	; (8014204 <BSP_SD_WriteBlocks_DMA+0x30>)
 80141ec:	f7f9 f8ca 	bl	800d384 <HAL_SD_WriteBlocks_DMA>
 80141f0:	4603      	mov	r3, r0
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d001      	beq.n	80141fa <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80141f6:	2301      	movs	r3, #1
 80141f8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80141fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80141fc:	4618      	mov	r0, r3
 80141fe:	3718      	adds	r7, #24
 8014200:	46bd      	mov	sp, r7
 8014202:	bd80      	pop	{r7, pc}
 8014204:	24000ebc 	.word	0x24000ebc

08014208 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8014208:	b580      	push	{r7, lr}
 801420a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801420c:	4805      	ldr	r0, [pc, #20]	; (8014224 <BSP_SD_GetCardState+0x1c>)
 801420e:	f7f9 fec3 	bl	800df98 <HAL_SD_GetCardState>
 8014212:	4603      	mov	r3, r0
 8014214:	2b04      	cmp	r3, #4
 8014216:	bf14      	ite	ne
 8014218:	2301      	movne	r3, #1
 801421a:	2300      	moveq	r3, #0
 801421c:	b2db      	uxtb	r3, r3
}
 801421e:	4618      	mov	r0, r3
 8014220:	bd80      	pop	{r7, pc}
 8014222:	bf00      	nop
 8014224:	24000ebc 	.word	0x24000ebc

08014228 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8014228:	b580      	push	{r7, lr}
 801422a:	b082      	sub	sp, #8
 801422c:	af00      	add	r7, sp, #0
 801422e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 8014230:	6879      	ldr	r1, [r7, #4]
 8014232:	4803      	ldr	r0, [pc, #12]	; (8014240 <BSP_SD_GetCardInfo+0x18>)
 8014234:	f7f9 fd72 	bl	800dd1c <HAL_SD_GetCardInfo>
}
 8014238:	bf00      	nop
 801423a:	3708      	adds	r7, #8
 801423c:	46bd      	mov	sp, r7
 801423e:	bd80      	pop	{r7, pc}
 8014240:	24000ebc 	.word	0x24000ebc

08014244 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8014244:	b580      	push	{r7, lr}
 8014246:	b082      	sub	sp, #8
 8014248:	af00      	add	r7, sp, #0
 801424a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 801424c:	f000 f9a0 	bl	8014590 <BSP_SD_WriteCpltCallback>
}
 8014250:	bf00      	nop
 8014252:	3708      	adds	r7, #8
 8014254:	46bd      	mov	sp, r7
 8014256:	bd80      	pop	{r7, pc}

08014258 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8014258:	b580      	push	{r7, lr}
 801425a:	b082      	sub	sp, #8
 801425c:	af00      	add	r7, sp, #0
 801425e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8014260:	f000 f9a2 	bl	80145a8 <BSP_SD_ReadCpltCallback>
}
 8014264:	bf00      	nop
 8014266:	3708      	adds	r7, #8
 8014268:	46bd      	mov	sp, r7
 801426a:	bd80      	pop	{r7, pc}

0801426c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 801426c:	b580      	push	{r7, lr}
 801426e:	b082      	sub	sp, #8
 8014270:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8014272:	2301      	movs	r3, #1
 8014274:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8014276:	f000 f80b 	bl	8014290 <BSP_PlatformIsDetected>
 801427a:	4603      	mov	r3, r0
 801427c:	2b00      	cmp	r3, #0
 801427e:	d101      	bne.n	8014284 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8014280:	2300      	movs	r3, #0
 8014282:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8014284:	79fb      	ldrb	r3, [r7, #7]
 8014286:	b2db      	uxtb	r3, r3
}
 8014288:	4618      	mov	r0, r3
 801428a:	3708      	adds	r7, #8
 801428c:	46bd      	mov	sp, r7
 801428e:	bd80      	pop	{r7, pc}

08014290 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8014290:	b580      	push	{r7, lr}
 8014292:	b082      	sub	sp, #8
 8014294:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8014296:	2301      	movs	r3, #1
 8014298:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801429a:	2104      	movs	r1, #4
 801429c:	4806      	ldr	r0, [pc, #24]	; (80142b8 <BSP_PlatformIsDetected+0x28>)
 801429e:	f7f3 fe7d 	bl	8007f9c <HAL_GPIO_ReadPin>
 80142a2:	4603      	mov	r3, r0
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d001      	beq.n	80142ac <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80142a8:	2300      	movs	r3, #0
 80142aa:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80142ac:	79fb      	ldrb	r3, [r7, #7]
}
 80142ae:	4618      	mov	r0, r3
 80142b0:	3708      	adds	r7, #8
 80142b2:	46bd      	mov	sp, r7
 80142b4:	bd80      	pop	{r7, pc}
 80142b6:	bf00      	nop
 80142b8:	58020400 	.word	0x58020400

080142bc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80142bc:	b580      	push	{r7, lr}
 80142be:	b084      	sub	sp, #16
 80142c0:	af00      	add	r7, sp, #0
 80142c2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80142c4:	f7ef fbc4 	bl	8003a50 <HAL_GetTick>
 80142c8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80142ca:	e006      	b.n	80142da <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80142cc:	f7ff ff9c 	bl	8014208 <BSP_SD_GetCardState>
 80142d0:	4603      	mov	r3, r0
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d101      	bne.n	80142da <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80142d6:	2300      	movs	r3, #0
 80142d8:	e009      	b.n	80142ee <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80142da:	f7ef fbb9 	bl	8003a50 <HAL_GetTick>
 80142de:	4602      	mov	r2, r0
 80142e0:	68fb      	ldr	r3, [r7, #12]
 80142e2:	1ad3      	subs	r3, r2, r3
 80142e4:	687a      	ldr	r2, [r7, #4]
 80142e6:	429a      	cmp	r2, r3
 80142e8:	d8f0      	bhi.n	80142cc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80142ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80142ee:	4618      	mov	r0, r3
 80142f0:	3710      	adds	r7, #16
 80142f2:	46bd      	mov	sp, r7
 80142f4:	bd80      	pop	{r7, pc}
	...

080142f8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80142f8:	b580      	push	{r7, lr}
 80142fa:	b082      	sub	sp, #8
 80142fc:	af00      	add	r7, sp, #0
 80142fe:	4603      	mov	r3, r0
 8014300:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8014302:	4b0b      	ldr	r3, [pc, #44]	; (8014330 <SD_CheckStatus+0x38>)
 8014304:	2201      	movs	r2, #1
 8014306:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8014308:	f7ff ff7e 	bl	8014208 <BSP_SD_GetCardState>
 801430c:	4603      	mov	r3, r0
 801430e:	2b00      	cmp	r3, #0
 8014310:	d107      	bne.n	8014322 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8014312:	4b07      	ldr	r3, [pc, #28]	; (8014330 <SD_CheckStatus+0x38>)
 8014314:	781b      	ldrb	r3, [r3, #0]
 8014316:	b2db      	uxtb	r3, r3
 8014318:	f023 0301 	bic.w	r3, r3, #1
 801431c:	b2da      	uxtb	r2, r3
 801431e:	4b04      	ldr	r3, [pc, #16]	; (8014330 <SD_CheckStatus+0x38>)
 8014320:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8014322:	4b03      	ldr	r3, [pc, #12]	; (8014330 <SD_CheckStatus+0x38>)
 8014324:	781b      	ldrb	r3, [r3, #0]
 8014326:	b2db      	uxtb	r3, r3
}
 8014328:	4618      	mov	r0, r3
 801432a:	3708      	adds	r7, #8
 801432c:	46bd      	mov	sp, r7
 801432e:	bd80      	pop	{r7, pc}
 8014330:	2400000d 	.word	0x2400000d

08014334 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8014334:	b580      	push	{r7, lr}
 8014336:	b082      	sub	sp, #8
 8014338:	af00      	add	r7, sp, #0
 801433a:	4603      	mov	r3, r0
 801433c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801433e:	f7ff ff09 	bl	8014154 <BSP_SD_Init>
 8014342:	4603      	mov	r3, r0
 8014344:	2b00      	cmp	r3, #0
 8014346:	d107      	bne.n	8014358 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8014348:	79fb      	ldrb	r3, [r7, #7]
 801434a:	4618      	mov	r0, r3
 801434c:	f7ff ffd4 	bl	80142f8 <SD_CheckStatus>
 8014350:	4603      	mov	r3, r0
 8014352:	461a      	mov	r2, r3
 8014354:	4b04      	ldr	r3, [pc, #16]	; (8014368 <SD_initialize+0x34>)
 8014356:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8014358:	4b03      	ldr	r3, [pc, #12]	; (8014368 <SD_initialize+0x34>)
 801435a:	781b      	ldrb	r3, [r3, #0]
 801435c:	b2db      	uxtb	r3, r3
}
 801435e:	4618      	mov	r0, r3
 8014360:	3708      	adds	r7, #8
 8014362:	46bd      	mov	sp, r7
 8014364:	bd80      	pop	{r7, pc}
 8014366:	bf00      	nop
 8014368:	2400000d 	.word	0x2400000d

0801436c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801436c:	b580      	push	{r7, lr}
 801436e:	b082      	sub	sp, #8
 8014370:	af00      	add	r7, sp, #0
 8014372:	4603      	mov	r3, r0
 8014374:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8014376:	79fb      	ldrb	r3, [r7, #7]
 8014378:	4618      	mov	r0, r3
 801437a:	f7ff ffbd 	bl	80142f8 <SD_CheckStatus>
 801437e:	4603      	mov	r3, r0
}
 8014380:	4618      	mov	r0, r3
 8014382:	3708      	adds	r7, #8
 8014384:	46bd      	mov	sp, r7
 8014386:	bd80      	pop	{r7, pc}

08014388 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8014388:	b580      	push	{r7, lr}
 801438a:	b086      	sub	sp, #24
 801438c:	af00      	add	r7, sp, #0
 801438e:	60b9      	str	r1, [r7, #8]
 8014390:	607a      	str	r2, [r7, #4]
 8014392:	603b      	str	r3, [r7, #0]
 8014394:	4603      	mov	r3, r0
 8014396:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014398:	2301      	movs	r3, #1
 801439a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801439c:	f247 5030 	movw	r0, #30000	; 0x7530
 80143a0:	f7ff ff8c 	bl	80142bc <SD_CheckStatusWithTimeout>
 80143a4:	4603      	mov	r3, r0
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	da01      	bge.n	80143ae <SD_read+0x26>
  {
    return res;
 80143aa:	7dfb      	ldrb	r3, [r7, #23]
 80143ac:	e03b      	b.n	8014426 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80143ae:	683a      	ldr	r2, [r7, #0]
 80143b0:	6879      	ldr	r1, [r7, #4]
 80143b2:	68b8      	ldr	r0, [r7, #8]
 80143b4:	f7ff fef4 	bl	80141a0 <BSP_SD_ReadBlocks_DMA>
 80143b8:	4603      	mov	r3, r0
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d132      	bne.n	8014424 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80143be:	4b1c      	ldr	r3, [pc, #112]	; (8014430 <SD_read+0xa8>)
 80143c0:	2200      	movs	r2, #0
 80143c2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80143c4:	f7ef fb44 	bl	8003a50 <HAL_GetTick>
 80143c8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80143ca:	bf00      	nop
 80143cc:	4b18      	ldr	r3, [pc, #96]	; (8014430 <SD_read+0xa8>)
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d108      	bne.n	80143e6 <SD_read+0x5e>
 80143d4:	f7ef fb3c 	bl	8003a50 <HAL_GetTick>
 80143d8:	4602      	mov	r2, r0
 80143da:	693b      	ldr	r3, [r7, #16]
 80143dc:	1ad3      	subs	r3, r2, r3
 80143de:	f247 522f 	movw	r2, #29999	; 0x752f
 80143e2:	4293      	cmp	r3, r2
 80143e4:	d9f2      	bls.n	80143cc <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80143e6:	4b12      	ldr	r3, [pc, #72]	; (8014430 <SD_read+0xa8>)
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d102      	bne.n	80143f4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80143ee:	2301      	movs	r3, #1
 80143f0:	75fb      	strb	r3, [r7, #23]
 80143f2:	e017      	b.n	8014424 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80143f4:	4b0e      	ldr	r3, [pc, #56]	; (8014430 <SD_read+0xa8>)
 80143f6:	2200      	movs	r2, #0
 80143f8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80143fa:	f7ef fb29 	bl	8003a50 <HAL_GetTick>
 80143fe:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014400:	e007      	b.n	8014412 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014402:	f7ff ff01 	bl	8014208 <BSP_SD_GetCardState>
 8014406:	4603      	mov	r3, r0
 8014408:	2b00      	cmp	r3, #0
 801440a:	d102      	bne.n	8014412 <SD_read+0x8a>
          {
            res = RES_OK;
 801440c:	2300      	movs	r3, #0
 801440e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8014410:	e008      	b.n	8014424 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014412:	f7ef fb1d 	bl	8003a50 <HAL_GetTick>
 8014416:	4602      	mov	r2, r0
 8014418:	693b      	ldr	r3, [r7, #16]
 801441a:	1ad3      	subs	r3, r2, r3
 801441c:	f247 522f 	movw	r2, #29999	; 0x752f
 8014420:	4293      	cmp	r3, r2
 8014422:	d9ee      	bls.n	8014402 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8014424:	7dfb      	ldrb	r3, [r7, #23]
}
 8014426:	4618      	mov	r0, r3
 8014428:	3718      	adds	r7, #24
 801442a:	46bd      	mov	sp, r7
 801442c:	bd80      	pop	{r7, pc}
 801442e:	bf00      	nop
 8014430:	240015e0 	.word	0x240015e0

08014434 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8014434:	b580      	push	{r7, lr}
 8014436:	b086      	sub	sp, #24
 8014438:	af00      	add	r7, sp, #0
 801443a:	60b9      	str	r1, [r7, #8]
 801443c:	607a      	str	r2, [r7, #4]
 801443e:	603b      	str	r3, [r7, #0]
 8014440:	4603      	mov	r3, r0
 8014442:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014444:	2301      	movs	r3, #1
 8014446:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8014448:	4b24      	ldr	r3, [pc, #144]	; (80144dc <SD_write+0xa8>)
 801444a:	2200      	movs	r2, #0
 801444c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801444e:	f247 5030 	movw	r0, #30000	; 0x7530
 8014452:	f7ff ff33 	bl	80142bc <SD_CheckStatusWithTimeout>
 8014456:	4603      	mov	r3, r0
 8014458:	2b00      	cmp	r3, #0
 801445a:	da01      	bge.n	8014460 <SD_write+0x2c>
  {
    return res;
 801445c:	7dfb      	ldrb	r3, [r7, #23]
 801445e:	e038      	b.n	80144d2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8014460:	683a      	ldr	r2, [r7, #0]
 8014462:	6879      	ldr	r1, [r7, #4]
 8014464:	68b8      	ldr	r0, [r7, #8]
 8014466:	f7ff feb5 	bl	80141d4 <BSP_SD_WriteBlocks_DMA>
 801446a:	4603      	mov	r3, r0
 801446c:	2b00      	cmp	r3, #0
 801446e:	d12f      	bne.n	80144d0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8014470:	f7ef faee 	bl	8003a50 <HAL_GetTick>
 8014474:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8014476:	bf00      	nop
 8014478:	4b18      	ldr	r3, [pc, #96]	; (80144dc <SD_write+0xa8>)
 801447a:	681b      	ldr	r3, [r3, #0]
 801447c:	2b00      	cmp	r3, #0
 801447e:	d108      	bne.n	8014492 <SD_write+0x5e>
 8014480:	f7ef fae6 	bl	8003a50 <HAL_GetTick>
 8014484:	4602      	mov	r2, r0
 8014486:	693b      	ldr	r3, [r7, #16]
 8014488:	1ad3      	subs	r3, r2, r3
 801448a:	f247 522f 	movw	r2, #29999	; 0x752f
 801448e:	4293      	cmp	r3, r2
 8014490:	d9f2      	bls.n	8014478 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8014492:	4b12      	ldr	r3, [pc, #72]	; (80144dc <SD_write+0xa8>)
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	2b00      	cmp	r3, #0
 8014498:	d102      	bne.n	80144a0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 801449a:	2301      	movs	r3, #1
 801449c:	75fb      	strb	r3, [r7, #23]
 801449e:	e017      	b.n	80144d0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80144a0:	4b0e      	ldr	r3, [pc, #56]	; (80144dc <SD_write+0xa8>)
 80144a2:	2200      	movs	r2, #0
 80144a4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80144a6:	f7ef fad3 	bl	8003a50 <HAL_GetTick>
 80144aa:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80144ac:	e007      	b.n	80144be <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80144ae:	f7ff feab 	bl	8014208 <BSP_SD_GetCardState>
 80144b2:	4603      	mov	r3, r0
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d102      	bne.n	80144be <SD_write+0x8a>
          {
            res = RES_OK;
 80144b8:	2300      	movs	r3, #0
 80144ba:	75fb      	strb	r3, [r7, #23]
            break;
 80144bc:	e008      	b.n	80144d0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80144be:	f7ef fac7 	bl	8003a50 <HAL_GetTick>
 80144c2:	4602      	mov	r2, r0
 80144c4:	693b      	ldr	r3, [r7, #16]
 80144c6:	1ad3      	subs	r3, r2, r3
 80144c8:	f247 522f 	movw	r2, #29999	; 0x752f
 80144cc:	4293      	cmp	r3, r2
 80144ce:	d9ee      	bls.n	80144ae <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80144d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80144d2:	4618      	mov	r0, r3
 80144d4:	3718      	adds	r7, #24
 80144d6:	46bd      	mov	sp, r7
 80144d8:	bd80      	pop	{r7, pc}
 80144da:	bf00      	nop
 80144dc:	240015dc 	.word	0x240015dc

080144e0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80144e0:	b580      	push	{r7, lr}
 80144e2:	b08c      	sub	sp, #48	; 0x30
 80144e4:	af00      	add	r7, sp, #0
 80144e6:	4603      	mov	r3, r0
 80144e8:	603a      	str	r2, [r7, #0]
 80144ea:	71fb      	strb	r3, [r7, #7]
 80144ec:	460b      	mov	r3, r1
 80144ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80144f0:	2301      	movs	r3, #1
 80144f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80144f6:	4b25      	ldr	r3, [pc, #148]	; (801458c <SD_ioctl+0xac>)
 80144f8:	781b      	ldrb	r3, [r3, #0]
 80144fa:	b2db      	uxtb	r3, r3
 80144fc:	f003 0301 	and.w	r3, r3, #1
 8014500:	2b00      	cmp	r3, #0
 8014502:	d001      	beq.n	8014508 <SD_ioctl+0x28>
 8014504:	2303      	movs	r3, #3
 8014506:	e03c      	b.n	8014582 <SD_ioctl+0xa2>

  switch (cmd)
 8014508:	79bb      	ldrb	r3, [r7, #6]
 801450a:	2b03      	cmp	r3, #3
 801450c:	d834      	bhi.n	8014578 <SD_ioctl+0x98>
 801450e:	a201      	add	r2, pc, #4	; (adr r2, 8014514 <SD_ioctl+0x34>)
 8014510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014514:	08014525 	.word	0x08014525
 8014518:	0801452d 	.word	0x0801452d
 801451c:	08014545 	.word	0x08014545
 8014520:	0801455f 	.word	0x0801455f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8014524:	2300      	movs	r3, #0
 8014526:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801452a:	e028      	b.n	801457e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 801452c:	f107 0308 	add.w	r3, r7, #8
 8014530:	4618      	mov	r0, r3
 8014532:	f7ff fe79 	bl	8014228 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8014536:	6a3a      	ldr	r2, [r7, #32]
 8014538:	683b      	ldr	r3, [r7, #0]
 801453a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801453c:	2300      	movs	r3, #0
 801453e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014542:	e01c      	b.n	801457e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014544:	f107 0308 	add.w	r3, r7, #8
 8014548:	4618      	mov	r0, r3
 801454a:	f7ff fe6d 	bl	8014228 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014550:	b29a      	uxth	r2, r3
 8014552:	683b      	ldr	r3, [r7, #0]
 8014554:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8014556:	2300      	movs	r3, #0
 8014558:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801455c:	e00f      	b.n	801457e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801455e:	f107 0308 	add.w	r3, r7, #8
 8014562:	4618      	mov	r0, r3
 8014564:	f7ff fe60 	bl	8014228 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8014568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801456a:	0a5a      	lsrs	r2, r3, #9
 801456c:	683b      	ldr	r3, [r7, #0]
 801456e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014570:	2300      	movs	r3, #0
 8014572:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014576:	e002      	b.n	801457e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8014578:	2304      	movs	r3, #4
 801457a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801457e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8014582:	4618      	mov	r0, r3
 8014584:	3730      	adds	r7, #48	; 0x30
 8014586:	46bd      	mov	sp, r7
 8014588:	bd80      	pop	{r7, pc}
 801458a:	bf00      	nop
 801458c:	2400000d 	.word	0x2400000d

08014590 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8014590:	b480      	push	{r7}
 8014592:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8014594:	4b03      	ldr	r3, [pc, #12]	; (80145a4 <BSP_SD_WriteCpltCallback+0x14>)
 8014596:	2201      	movs	r2, #1
 8014598:	601a      	str	r2, [r3, #0]
}
 801459a:	bf00      	nop
 801459c:	46bd      	mov	sp, r7
 801459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145a2:	4770      	bx	lr
 80145a4:	240015dc 	.word	0x240015dc

080145a8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80145a8:	b480      	push	{r7}
 80145aa:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80145ac:	4b03      	ldr	r3, [pc, #12]	; (80145bc <BSP_SD_ReadCpltCallback+0x14>)
 80145ae:	2201      	movs	r2, #1
 80145b0:	601a      	str	r2, [r3, #0]
}
 80145b2:	bf00      	nop
 80145b4:	46bd      	mov	sp, r7
 80145b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ba:	4770      	bx	lr
 80145bc:	240015e0 	.word	0x240015e0

080145c0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80145c0:	b580      	push	{r7, lr}
 80145c2:	b084      	sub	sp, #16
 80145c4:	af00      	add	r7, sp, #0
 80145c6:	6078      	str	r0, [r7, #4]
 80145c8:	460b      	mov	r3, r1
 80145ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80145cc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80145d0:	f002 fd00 	bl	8016fd4 <USBD_static_malloc>
 80145d4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80145d6:	68fb      	ldr	r3, [r7, #12]
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d109      	bne.n	80145f0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	32b0      	adds	r2, #176	; 0xb0
 80145e6:	2100      	movs	r1, #0
 80145e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80145ec:	2302      	movs	r3, #2
 80145ee:	e0d4      	b.n	801479a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80145f0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80145f4:	2100      	movs	r1, #0
 80145f6:	68f8      	ldr	r0, [r7, #12]
 80145f8:	f002 fd7e 	bl	80170f8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	32b0      	adds	r2, #176	; 0xb0
 8014606:	68f9      	ldr	r1, [r7, #12]
 8014608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	32b0      	adds	r2, #176	; 0xb0
 8014616:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	7c1b      	ldrb	r3, [r3, #16]
 8014624:	2b00      	cmp	r3, #0
 8014626:	d138      	bne.n	801469a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014628:	4b5e      	ldr	r3, [pc, #376]	; (80147a4 <USBD_CDC_Init+0x1e4>)
 801462a:	7819      	ldrb	r1, [r3, #0]
 801462c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014630:	2202      	movs	r2, #2
 8014632:	6878      	ldr	r0, [r7, #4]
 8014634:	f002 fbab 	bl	8016d8e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014638:	4b5a      	ldr	r3, [pc, #360]	; (80147a4 <USBD_CDC_Init+0x1e4>)
 801463a:	781b      	ldrb	r3, [r3, #0]
 801463c:	f003 020f 	and.w	r2, r3, #15
 8014640:	6879      	ldr	r1, [r7, #4]
 8014642:	4613      	mov	r3, r2
 8014644:	009b      	lsls	r3, r3, #2
 8014646:	4413      	add	r3, r2
 8014648:	009b      	lsls	r3, r3, #2
 801464a:	440b      	add	r3, r1
 801464c:	3324      	adds	r3, #36	; 0x24
 801464e:	2201      	movs	r2, #1
 8014650:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014652:	4b55      	ldr	r3, [pc, #340]	; (80147a8 <USBD_CDC_Init+0x1e8>)
 8014654:	7819      	ldrb	r1, [r3, #0]
 8014656:	f44f 7300 	mov.w	r3, #512	; 0x200
 801465a:	2202      	movs	r2, #2
 801465c:	6878      	ldr	r0, [r7, #4]
 801465e:	f002 fb96 	bl	8016d8e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014662:	4b51      	ldr	r3, [pc, #324]	; (80147a8 <USBD_CDC_Init+0x1e8>)
 8014664:	781b      	ldrb	r3, [r3, #0]
 8014666:	f003 020f 	and.w	r2, r3, #15
 801466a:	6879      	ldr	r1, [r7, #4]
 801466c:	4613      	mov	r3, r2
 801466e:	009b      	lsls	r3, r3, #2
 8014670:	4413      	add	r3, r2
 8014672:	009b      	lsls	r3, r3, #2
 8014674:	440b      	add	r3, r1
 8014676:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801467a:	2201      	movs	r2, #1
 801467c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801467e:	4b4b      	ldr	r3, [pc, #300]	; (80147ac <USBD_CDC_Init+0x1ec>)
 8014680:	781b      	ldrb	r3, [r3, #0]
 8014682:	f003 020f 	and.w	r2, r3, #15
 8014686:	6879      	ldr	r1, [r7, #4]
 8014688:	4613      	mov	r3, r2
 801468a:	009b      	lsls	r3, r3, #2
 801468c:	4413      	add	r3, r2
 801468e:	009b      	lsls	r3, r3, #2
 8014690:	440b      	add	r3, r1
 8014692:	3326      	adds	r3, #38	; 0x26
 8014694:	2210      	movs	r2, #16
 8014696:	801a      	strh	r2, [r3, #0]
 8014698:	e035      	b.n	8014706 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801469a:	4b42      	ldr	r3, [pc, #264]	; (80147a4 <USBD_CDC_Init+0x1e4>)
 801469c:	7819      	ldrb	r1, [r3, #0]
 801469e:	2340      	movs	r3, #64	; 0x40
 80146a0:	2202      	movs	r2, #2
 80146a2:	6878      	ldr	r0, [r7, #4]
 80146a4:	f002 fb73 	bl	8016d8e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80146a8:	4b3e      	ldr	r3, [pc, #248]	; (80147a4 <USBD_CDC_Init+0x1e4>)
 80146aa:	781b      	ldrb	r3, [r3, #0]
 80146ac:	f003 020f 	and.w	r2, r3, #15
 80146b0:	6879      	ldr	r1, [r7, #4]
 80146b2:	4613      	mov	r3, r2
 80146b4:	009b      	lsls	r3, r3, #2
 80146b6:	4413      	add	r3, r2
 80146b8:	009b      	lsls	r3, r3, #2
 80146ba:	440b      	add	r3, r1
 80146bc:	3324      	adds	r3, #36	; 0x24
 80146be:	2201      	movs	r2, #1
 80146c0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80146c2:	4b39      	ldr	r3, [pc, #228]	; (80147a8 <USBD_CDC_Init+0x1e8>)
 80146c4:	7819      	ldrb	r1, [r3, #0]
 80146c6:	2340      	movs	r3, #64	; 0x40
 80146c8:	2202      	movs	r2, #2
 80146ca:	6878      	ldr	r0, [r7, #4]
 80146cc:	f002 fb5f 	bl	8016d8e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80146d0:	4b35      	ldr	r3, [pc, #212]	; (80147a8 <USBD_CDC_Init+0x1e8>)
 80146d2:	781b      	ldrb	r3, [r3, #0]
 80146d4:	f003 020f 	and.w	r2, r3, #15
 80146d8:	6879      	ldr	r1, [r7, #4]
 80146da:	4613      	mov	r3, r2
 80146dc:	009b      	lsls	r3, r3, #2
 80146de:	4413      	add	r3, r2
 80146e0:	009b      	lsls	r3, r3, #2
 80146e2:	440b      	add	r3, r1
 80146e4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80146e8:	2201      	movs	r2, #1
 80146ea:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80146ec:	4b2f      	ldr	r3, [pc, #188]	; (80147ac <USBD_CDC_Init+0x1ec>)
 80146ee:	781b      	ldrb	r3, [r3, #0]
 80146f0:	f003 020f 	and.w	r2, r3, #15
 80146f4:	6879      	ldr	r1, [r7, #4]
 80146f6:	4613      	mov	r3, r2
 80146f8:	009b      	lsls	r3, r3, #2
 80146fa:	4413      	add	r3, r2
 80146fc:	009b      	lsls	r3, r3, #2
 80146fe:	440b      	add	r3, r1
 8014700:	3326      	adds	r3, #38	; 0x26
 8014702:	2210      	movs	r2, #16
 8014704:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014706:	4b29      	ldr	r3, [pc, #164]	; (80147ac <USBD_CDC_Init+0x1ec>)
 8014708:	7819      	ldrb	r1, [r3, #0]
 801470a:	2308      	movs	r3, #8
 801470c:	2203      	movs	r2, #3
 801470e:	6878      	ldr	r0, [r7, #4]
 8014710:	f002 fb3d 	bl	8016d8e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8014714:	4b25      	ldr	r3, [pc, #148]	; (80147ac <USBD_CDC_Init+0x1ec>)
 8014716:	781b      	ldrb	r3, [r3, #0]
 8014718:	f003 020f 	and.w	r2, r3, #15
 801471c:	6879      	ldr	r1, [r7, #4]
 801471e:	4613      	mov	r3, r2
 8014720:	009b      	lsls	r3, r3, #2
 8014722:	4413      	add	r3, r2
 8014724:	009b      	lsls	r3, r3, #2
 8014726:	440b      	add	r3, r1
 8014728:	3324      	adds	r3, #36	; 0x24
 801472a:	2201      	movs	r2, #1
 801472c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801472e:	68fb      	ldr	r3, [r7, #12]
 8014730:	2200      	movs	r2, #0
 8014732:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801473c:	687a      	ldr	r2, [r7, #4]
 801473e:	33b0      	adds	r3, #176	; 0xb0
 8014740:	009b      	lsls	r3, r3, #2
 8014742:	4413      	add	r3, r2
 8014744:	685b      	ldr	r3, [r3, #4]
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	2200      	movs	r2, #0
 801474e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8014752:	68fb      	ldr	r3, [r7, #12]
 8014754:	2200      	movs	r2, #0
 8014756:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8014760:	2b00      	cmp	r3, #0
 8014762:	d101      	bne.n	8014768 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8014764:	2302      	movs	r3, #2
 8014766:	e018      	b.n	801479a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	7c1b      	ldrb	r3, [r3, #16]
 801476c:	2b00      	cmp	r3, #0
 801476e:	d10a      	bne.n	8014786 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014770:	4b0d      	ldr	r3, [pc, #52]	; (80147a8 <USBD_CDC_Init+0x1e8>)
 8014772:	7819      	ldrb	r1, [r3, #0]
 8014774:	68fb      	ldr	r3, [r7, #12]
 8014776:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801477a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801477e:	6878      	ldr	r0, [r7, #4]
 8014780:	f002 fbf4 	bl	8016f6c <USBD_LL_PrepareReceive>
 8014784:	e008      	b.n	8014798 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014786:	4b08      	ldr	r3, [pc, #32]	; (80147a8 <USBD_CDC_Init+0x1e8>)
 8014788:	7819      	ldrb	r1, [r3, #0]
 801478a:	68fb      	ldr	r3, [r7, #12]
 801478c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014790:	2340      	movs	r3, #64	; 0x40
 8014792:	6878      	ldr	r0, [r7, #4]
 8014794:	f002 fbea 	bl	8016f6c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014798:	2300      	movs	r3, #0
}
 801479a:	4618      	mov	r0, r3
 801479c:	3710      	adds	r7, #16
 801479e:	46bd      	mov	sp, r7
 80147a0:	bd80      	pop	{r7, pc}
 80147a2:	bf00      	nop
 80147a4:	24000097 	.word	0x24000097
 80147a8:	24000098 	.word	0x24000098
 80147ac:	24000099 	.word	0x24000099

080147b0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80147b0:	b580      	push	{r7, lr}
 80147b2:	b082      	sub	sp, #8
 80147b4:	af00      	add	r7, sp, #0
 80147b6:	6078      	str	r0, [r7, #4]
 80147b8:	460b      	mov	r3, r1
 80147ba:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80147bc:	4b3a      	ldr	r3, [pc, #232]	; (80148a8 <USBD_CDC_DeInit+0xf8>)
 80147be:	781b      	ldrb	r3, [r3, #0]
 80147c0:	4619      	mov	r1, r3
 80147c2:	6878      	ldr	r0, [r7, #4]
 80147c4:	f002 fb09 	bl	8016dda <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80147c8:	4b37      	ldr	r3, [pc, #220]	; (80148a8 <USBD_CDC_DeInit+0xf8>)
 80147ca:	781b      	ldrb	r3, [r3, #0]
 80147cc:	f003 020f 	and.w	r2, r3, #15
 80147d0:	6879      	ldr	r1, [r7, #4]
 80147d2:	4613      	mov	r3, r2
 80147d4:	009b      	lsls	r3, r3, #2
 80147d6:	4413      	add	r3, r2
 80147d8:	009b      	lsls	r3, r3, #2
 80147da:	440b      	add	r3, r1
 80147dc:	3324      	adds	r3, #36	; 0x24
 80147de:	2200      	movs	r2, #0
 80147e0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80147e2:	4b32      	ldr	r3, [pc, #200]	; (80148ac <USBD_CDC_DeInit+0xfc>)
 80147e4:	781b      	ldrb	r3, [r3, #0]
 80147e6:	4619      	mov	r1, r3
 80147e8:	6878      	ldr	r0, [r7, #4]
 80147ea:	f002 faf6 	bl	8016dda <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80147ee:	4b2f      	ldr	r3, [pc, #188]	; (80148ac <USBD_CDC_DeInit+0xfc>)
 80147f0:	781b      	ldrb	r3, [r3, #0]
 80147f2:	f003 020f 	and.w	r2, r3, #15
 80147f6:	6879      	ldr	r1, [r7, #4]
 80147f8:	4613      	mov	r3, r2
 80147fa:	009b      	lsls	r3, r3, #2
 80147fc:	4413      	add	r3, r2
 80147fe:	009b      	lsls	r3, r3, #2
 8014800:	440b      	add	r3, r1
 8014802:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014806:	2200      	movs	r2, #0
 8014808:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801480a:	4b29      	ldr	r3, [pc, #164]	; (80148b0 <USBD_CDC_DeInit+0x100>)
 801480c:	781b      	ldrb	r3, [r3, #0]
 801480e:	4619      	mov	r1, r3
 8014810:	6878      	ldr	r0, [r7, #4]
 8014812:	f002 fae2 	bl	8016dda <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8014816:	4b26      	ldr	r3, [pc, #152]	; (80148b0 <USBD_CDC_DeInit+0x100>)
 8014818:	781b      	ldrb	r3, [r3, #0]
 801481a:	f003 020f 	and.w	r2, r3, #15
 801481e:	6879      	ldr	r1, [r7, #4]
 8014820:	4613      	mov	r3, r2
 8014822:	009b      	lsls	r3, r3, #2
 8014824:	4413      	add	r3, r2
 8014826:	009b      	lsls	r3, r3, #2
 8014828:	440b      	add	r3, r1
 801482a:	3324      	adds	r3, #36	; 0x24
 801482c:	2200      	movs	r2, #0
 801482e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8014830:	4b1f      	ldr	r3, [pc, #124]	; (80148b0 <USBD_CDC_DeInit+0x100>)
 8014832:	781b      	ldrb	r3, [r3, #0]
 8014834:	f003 020f 	and.w	r2, r3, #15
 8014838:	6879      	ldr	r1, [r7, #4]
 801483a:	4613      	mov	r3, r2
 801483c:	009b      	lsls	r3, r3, #2
 801483e:	4413      	add	r3, r2
 8014840:	009b      	lsls	r3, r3, #2
 8014842:	440b      	add	r3, r1
 8014844:	3326      	adds	r3, #38	; 0x26
 8014846:	2200      	movs	r2, #0
 8014848:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	32b0      	adds	r2, #176	; 0xb0
 8014854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014858:	2b00      	cmp	r3, #0
 801485a:	d01f      	beq.n	801489c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014862:	687a      	ldr	r2, [r7, #4]
 8014864:	33b0      	adds	r3, #176	; 0xb0
 8014866:	009b      	lsls	r3, r3, #2
 8014868:	4413      	add	r3, r2
 801486a:	685b      	ldr	r3, [r3, #4]
 801486c:	685b      	ldr	r3, [r3, #4]
 801486e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	32b0      	adds	r2, #176	; 0xb0
 801487a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801487e:	4618      	mov	r0, r3
 8014880:	f002 fbb6 	bl	8016ff0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	32b0      	adds	r2, #176	; 0xb0
 801488e:	2100      	movs	r1, #0
 8014890:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	2200      	movs	r2, #0
 8014898:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801489c:	2300      	movs	r3, #0
}
 801489e:	4618      	mov	r0, r3
 80148a0:	3708      	adds	r7, #8
 80148a2:	46bd      	mov	sp, r7
 80148a4:	bd80      	pop	{r7, pc}
 80148a6:	bf00      	nop
 80148a8:	24000097 	.word	0x24000097
 80148ac:	24000098 	.word	0x24000098
 80148b0:	24000099 	.word	0x24000099

080148b4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80148b4:	b580      	push	{r7, lr}
 80148b6:	b086      	sub	sp, #24
 80148b8:	af00      	add	r7, sp, #0
 80148ba:	6078      	str	r0, [r7, #4]
 80148bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	32b0      	adds	r2, #176	; 0xb0
 80148c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80148cc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80148ce:	2300      	movs	r3, #0
 80148d0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80148d2:	2300      	movs	r3, #0
 80148d4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80148d6:	2300      	movs	r3, #0
 80148d8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80148da:	693b      	ldr	r3, [r7, #16]
 80148dc:	2b00      	cmp	r3, #0
 80148de:	d101      	bne.n	80148e4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80148e0:	2303      	movs	r3, #3
 80148e2:	e0bf      	b.n	8014a64 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80148e4:	683b      	ldr	r3, [r7, #0]
 80148e6:	781b      	ldrb	r3, [r3, #0]
 80148e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d050      	beq.n	8014992 <USBD_CDC_Setup+0xde>
 80148f0:	2b20      	cmp	r3, #32
 80148f2:	f040 80af 	bne.w	8014a54 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80148f6:	683b      	ldr	r3, [r7, #0]
 80148f8:	88db      	ldrh	r3, [r3, #6]
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d03a      	beq.n	8014974 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80148fe:	683b      	ldr	r3, [r7, #0]
 8014900:	781b      	ldrb	r3, [r3, #0]
 8014902:	b25b      	sxtb	r3, r3
 8014904:	2b00      	cmp	r3, #0
 8014906:	da1b      	bge.n	8014940 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801490e:	687a      	ldr	r2, [r7, #4]
 8014910:	33b0      	adds	r3, #176	; 0xb0
 8014912:	009b      	lsls	r3, r3, #2
 8014914:	4413      	add	r3, r2
 8014916:	685b      	ldr	r3, [r3, #4]
 8014918:	689b      	ldr	r3, [r3, #8]
 801491a:	683a      	ldr	r2, [r7, #0]
 801491c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801491e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014920:	683a      	ldr	r2, [r7, #0]
 8014922:	88d2      	ldrh	r2, [r2, #6]
 8014924:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8014926:	683b      	ldr	r3, [r7, #0]
 8014928:	88db      	ldrh	r3, [r3, #6]
 801492a:	2b07      	cmp	r3, #7
 801492c:	bf28      	it	cs
 801492e:	2307      	movcs	r3, #7
 8014930:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8014932:	693b      	ldr	r3, [r7, #16]
 8014934:	89fa      	ldrh	r2, [r7, #14]
 8014936:	4619      	mov	r1, r3
 8014938:	6878      	ldr	r0, [r7, #4]
 801493a:	f001 fd89 	bl	8016450 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 801493e:	e090      	b.n	8014a62 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8014940:	683b      	ldr	r3, [r7, #0]
 8014942:	785a      	ldrb	r2, [r3, #1]
 8014944:	693b      	ldr	r3, [r7, #16]
 8014946:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 801494a:	683b      	ldr	r3, [r7, #0]
 801494c:	88db      	ldrh	r3, [r3, #6]
 801494e:	2b3f      	cmp	r3, #63	; 0x3f
 8014950:	d803      	bhi.n	801495a <USBD_CDC_Setup+0xa6>
 8014952:	683b      	ldr	r3, [r7, #0]
 8014954:	88db      	ldrh	r3, [r3, #6]
 8014956:	b2da      	uxtb	r2, r3
 8014958:	e000      	b.n	801495c <USBD_CDC_Setup+0xa8>
 801495a:	2240      	movs	r2, #64	; 0x40
 801495c:	693b      	ldr	r3, [r7, #16]
 801495e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8014962:	6939      	ldr	r1, [r7, #16]
 8014964:	693b      	ldr	r3, [r7, #16]
 8014966:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 801496a:	461a      	mov	r2, r3
 801496c:	6878      	ldr	r0, [r7, #4]
 801496e:	f001 fd9b 	bl	80164a8 <USBD_CtlPrepareRx>
      break;
 8014972:	e076      	b.n	8014a62 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801497a:	687a      	ldr	r2, [r7, #4]
 801497c:	33b0      	adds	r3, #176	; 0xb0
 801497e:	009b      	lsls	r3, r3, #2
 8014980:	4413      	add	r3, r2
 8014982:	685b      	ldr	r3, [r3, #4]
 8014984:	689b      	ldr	r3, [r3, #8]
 8014986:	683a      	ldr	r2, [r7, #0]
 8014988:	7850      	ldrb	r0, [r2, #1]
 801498a:	2200      	movs	r2, #0
 801498c:	6839      	ldr	r1, [r7, #0]
 801498e:	4798      	blx	r3
      break;
 8014990:	e067      	b.n	8014a62 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014992:	683b      	ldr	r3, [r7, #0]
 8014994:	785b      	ldrb	r3, [r3, #1]
 8014996:	2b0b      	cmp	r3, #11
 8014998:	d851      	bhi.n	8014a3e <USBD_CDC_Setup+0x18a>
 801499a:	a201      	add	r2, pc, #4	; (adr r2, 80149a0 <USBD_CDC_Setup+0xec>)
 801499c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149a0:	080149d1 	.word	0x080149d1
 80149a4:	08014a4d 	.word	0x08014a4d
 80149a8:	08014a3f 	.word	0x08014a3f
 80149ac:	08014a3f 	.word	0x08014a3f
 80149b0:	08014a3f 	.word	0x08014a3f
 80149b4:	08014a3f 	.word	0x08014a3f
 80149b8:	08014a3f 	.word	0x08014a3f
 80149bc:	08014a3f 	.word	0x08014a3f
 80149c0:	08014a3f 	.word	0x08014a3f
 80149c4:	08014a3f 	.word	0x08014a3f
 80149c8:	080149fb 	.word	0x080149fb
 80149cc:	08014a25 	.word	0x08014a25
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80149d6:	b2db      	uxtb	r3, r3
 80149d8:	2b03      	cmp	r3, #3
 80149da:	d107      	bne.n	80149ec <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80149dc:	f107 030a 	add.w	r3, r7, #10
 80149e0:	2202      	movs	r2, #2
 80149e2:	4619      	mov	r1, r3
 80149e4:	6878      	ldr	r0, [r7, #4]
 80149e6:	f001 fd33 	bl	8016450 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80149ea:	e032      	b.n	8014a52 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80149ec:	6839      	ldr	r1, [r7, #0]
 80149ee:	6878      	ldr	r0, [r7, #4]
 80149f0:	f001 fcbd 	bl	801636e <USBD_CtlError>
            ret = USBD_FAIL;
 80149f4:	2303      	movs	r3, #3
 80149f6:	75fb      	strb	r3, [r7, #23]
          break;
 80149f8:	e02b      	b.n	8014a52 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a00:	b2db      	uxtb	r3, r3
 8014a02:	2b03      	cmp	r3, #3
 8014a04:	d107      	bne.n	8014a16 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8014a06:	f107 030d 	add.w	r3, r7, #13
 8014a0a:	2201      	movs	r2, #1
 8014a0c:	4619      	mov	r1, r3
 8014a0e:	6878      	ldr	r0, [r7, #4]
 8014a10:	f001 fd1e 	bl	8016450 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014a14:	e01d      	b.n	8014a52 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014a16:	6839      	ldr	r1, [r7, #0]
 8014a18:	6878      	ldr	r0, [r7, #4]
 8014a1a:	f001 fca8 	bl	801636e <USBD_CtlError>
            ret = USBD_FAIL;
 8014a1e:	2303      	movs	r3, #3
 8014a20:	75fb      	strb	r3, [r7, #23]
          break;
 8014a22:	e016      	b.n	8014a52 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a2a:	b2db      	uxtb	r3, r3
 8014a2c:	2b03      	cmp	r3, #3
 8014a2e:	d00f      	beq.n	8014a50 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8014a30:	6839      	ldr	r1, [r7, #0]
 8014a32:	6878      	ldr	r0, [r7, #4]
 8014a34:	f001 fc9b 	bl	801636e <USBD_CtlError>
            ret = USBD_FAIL;
 8014a38:	2303      	movs	r3, #3
 8014a3a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8014a3c:	e008      	b.n	8014a50 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8014a3e:	6839      	ldr	r1, [r7, #0]
 8014a40:	6878      	ldr	r0, [r7, #4]
 8014a42:	f001 fc94 	bl	801636e <USBD_CtlError>
          ret = USBD_FAIL;
 8014a46:	2303      	movs	r3, #3
 8014a48:	75fb      	strb	r3, [r7, #23]
          break;
 8014a4a:	e002      	b.n	8014a52 <USBD_CDC_Setup+0x19e>
          break;
 8014a4c:	bf00      	nop
 8014a4e:	e008      	b.n	8014a62 <USBD_CDC_Setup+0x1ae>
          break;
 8014a50:	bf00      	nop
      }
      break;
 8014a52:	e006      	b.n	8014a62 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8014a54:	6839      	ldr	r1, [r7, #0]
 8014a56:	6878      	ldr	r0, [r7, #4]
 8014a58:	f001 fc89 	bl	801636e <USBD_CtlError>
      ret = USBD_FAIL;
 8014a5c:	2303      	movs	r3, #3
 8014a5e:	75fb      	strb	r3, [r7, #23]
      break;
 8014a60:	bf00      	nop
  }

  return (uint8_t)ret;
 8014a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a64:	4618      	mov	r0, r3
 8014a66:	3718      	adds	r7, #24
 8014a68:	46bd      	mov	sp, r7
 8014a6a:	bd80      	pop	{r7, pc}

08014a6c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014a6c:	b580      	push	{r7, lr}
 8014a6e:	b084      	sub	sp, #16
 8014a70:	af00      	add	r7, sp, #0
 8014a72:	6078      	str	r0, [r7, #4]
 8014a74:	460b      	mov	r3, r1
 8014a76:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8014a7e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	32b0      	adds	r2, #176	; 0xb0
 8014a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d101      	bne.n	8014a96 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8014a92:	2303      	movs	r3, #3
 8014a94:	e065      	b.n	8014b62 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	32b0      	adds	r2, #176	; 0xb0
 8014aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014aa4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014aa6:	78fb      	ldrb	r3, [r7, #3]
 8014aa8:	f003 020f 	and.w	r2, r3, #15
 8014aac:	6879      	ldr	r1, [r7, #4]
 8014aae:	4613      	mov	r3, r2
 8014ab0:	009b      	lsls	r3, r3, #2
 8014ab2:	4413      	add	r3, r2
 8014ab4:	009b      	lsls	r3, r3, #2
 8014ab6:	440b      	add	r3, r1
 8014ab8:	3318      	adds	r3, #24
 8014aba:	681b      	ldr	r3, [r3, #0]
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	d02f      	beq.n	8014b20 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8014ac0:	78fb      	ldrb	r3, [r7, #3]
 8014ac2:	f003 020f 	and.w	r2, r3, #15
 8014ac6:	6879      	ldr	r1, [r7, #4]
 8014ac8:	4613      	mov	r3, r2
 8014aca:	009b      	lsls	r3, r3, #2
 8014acc:	4413      	add	r3, r2
 8014ace:	009b      	lsls	r3, r3, #2
 8014ad0:	440b      	add	r3, r1
 8014ad2:	3318      	adds	r3, #24
 8014ad4:	681a      	ldr	r2, [r3, #0]
 8014ad6:	78fb      	ldrb	r3, [r7, #3]
 8014ad8:	f003 010f 	and.w	r1, r3, #15
 8014adc:	68f8      	ldr	r0, [r7, #12]
 8014ade:	460b      	mov	r3, r1
 8014ae0:	00db      	lsls	r3, r3, #3
 8014ae2:	440b      	add	r3, r1
 8014ae4:	009b      	lsls	r3, r3, #2
 8014ae6:	4403      	add	r3, r0
 8014ae8:	3344      	adds	r3, #68	; 0x44
 8014aea:	681b      	ldr	r3, [r3, #0]
 8014aec:	fbb2 f1f3 	udiv	r1, r2, r3
 8014af0:	fb01 f303 	mul.w	r3, r1, r3
 8014af4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d112      	bne.n	8014b20 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8014afa:	78fb      	ldrb	r3, [r7, #3]
 8014afc:	f003 020f 	and.w	r2, r3, #15
 8014b00:	6879      	ldr	r1, [r7, #4]
 8014b02:	4613      	mov	r3, r2
 8014b04:	009b      	lsls	r3, r3, #2
 8014b06:	4413      	add	r3, r2
 8014b08:	009b      	lsls	r3, r3, #2
 8014b0a:	440b      	add	r3, r1
 8014b0c:	3318      	adds	r3, #24
 8014b0e:	2200      	movs	r2, #0
 8014b10:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8014b12:	78f9      	ldrb	r1, [r7, #3]
 8014b14:	2300      	movs	r3, #0
 8014b16:	2200      	movs	r2, #0
 8014b18:	6878      	ldr	r0, [r7, #4]
 8014b1a:	f002 fa06 	bl	8016f2a <USBD_LL_Transmit>
 8014b1e:	e01f      	b.n	8014b60 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8014b20:	68bb      	ldr	r3, [r7, #8]
 8014b22:	2200      	movs	r2, #0
 8014b24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014b2e:	687a      	ldr	r2, [r7, #4]
 8014b30:	33b0      	adds	r3, #176	; 0xb0
 8014b32:	009b      	lsls	r3, r3, #2
 8014b34:	4413      	add	r3, r2
 8014b36:	685b      	ldr	r3, [r3, #4]
 8014b38:	691b      	ldr	r3, [r3, #16]
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	d010      	beq.n	8014b60 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014b44:	687a      	ldr	r2, [r7, #4]
 8014b46:	33b0      	adds	r3, #176	; 0xb0
 8014b48:	009b      	lsls	r3, r3, #2
 8014b4a:	4413      	add	r3, r2
 8014b4c:	685b      	ldr	r3, [r3, #4]
 8014b4e:	691b      	ldr	r3, [r3, #16]
 8014b50:	68ba      	ldr	r2, [r7, #8]
 8014b52:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8014b56:	68ba      	ldr	r2, [r7, #8]
 8014b58:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8014b5c:	78fa      	ldrb	r2, [r7, #3]
 8014b5e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8014b60:	2300      	movs	r3, #0
}
 8014b62:	4618      	mov	r0, r3
 8014b64:	3710      	adds	r7, #16
 8014b66:	46bd      	mov	sp, r7
 8014b68:	bd80      	pop	{r7, pc}

08014b6a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014b6a:	b580      	push	{r7, lr}
 8014b6c:	b084      	sub	sp, #16
 8014b6e:	af00      	add	r7, sp, #0
 8014b70:	6078      	str	r0, [r7, #4]
 8014b72:	460b      	mov	r3, r1
 8014b74:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	32b0      	adds	r2, #176	; 0xb0
 8014b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b84:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	32b0      	adds	r2, #176	; 0xb0
 8014b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d101      	bne.n	8014b9c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8014b98:	2303      	movs	r3, #3
 8014b9a:	e01a      	b.n	8014bd2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014b9c:	78fb      	ldrb	r3, [r7, #3]
 8014b9e:	4619      	mov	r1, r3
 8014ba0:	6878      	ldr	r0, [r7, #4]
 8014ba2:	f002 fa04 	bl	8016fae <USBD_LL_GetRxDataSize>
 8014ba6:	4602      	mov	r2, r0
 8014ba8:	68fb      	ldr	r3, [r7, #12]
 8014baa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014bb4:	687a      	ldr	r2, [r7, #4]
 8014bb6:	33b0      	adds	r3, #176	; 0xb0
 8014bb8:	009b      	lsls	r3, r3, #2
 8014bba:	4413      	add	r3, r2
 8014bbc:	685b      	ldr	r3, [r3, #4]
 8014bbe:	68db      	ldr	r3, [r3, #12]
 8014bc0:	68fa      	ldr	r2, [r7, #12]
 8014bc2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8014bc6:	68fa      	ldr	r2, [r7, #12]
 8014bc8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8014bcc:	4611      	mov	r1, r2
 8014bce:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8014bd0:	2300      	movs	r3, #0
}
 8014bd2:	4618      	mov	r0, r3
 8014bd4:	3710      	adds	r7, #16
 8014bd6:	46bd      	mov	sp, r7
 8014bd8:	bd80      	pop	{r7, pc}

08014bda <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8014bda:	b580      	push	{r7, lr}
 8014bdc:	b084      	sub	sp, #16
 8014bde:	af00      	add	r7, sp, #0
 8014be0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	32b0      	adds	r2, #176	; 0xb0
 8014bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014bf0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d101      	bne.n	8014bfc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014bf8:	2303      	movs	r3, #3
 8014bfa:	e025      	b.n	8014c48 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014c02:	687a      	ldr	r2, [r7, #4]
 8014c04:	33b0      	adds	r3, #176	; 0xb0
 8014c06:	009b      	lsls	r3, r3, #2
 8014c08:	4413      	add	r3, r2
 8014c0a:	685b      	ldr	r3, [r3, #4]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d01a      	beq.n	8014c46 <USBD_CDC_EP0_RxReady+0x6c>
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8014c16:	2bff      	cmp	r3, #255	; 0xff
 8014c18:	d015      	beq.n	8014c46 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014c20:	687a      	ldr	r2, [r7, #4]
 8014c22:	33b0      	adds	r3, #176	; 0xb0
 8014c24:	009b      	lsls	r3, r3, #2
 8014c26:	4413      	add	r3, r2
 8014c28:	685b      	ldr	r3, [r3, #4]
 8014c2a:	689b      	ldr	r3, [r3, #8]
 8014c2c:	68fa      	ldr	r2, [r7, #12]
 8014c2e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8014c32:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8014c34:	68fa      	ldr	r2, [r7, #12]
 8014c36:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014c3a:	b292      	uxth	r2, r2
 8014c3c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	22ff      	movs	r2, #255	; 0xff
 8014c42:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8014c46:	2300      	movs	r3, #0
}
 8014c48:	4618      	mov	r0, r3
 8014c4a:	3710      	adds	r7, #16
 8014c4c:	46bd      	mov	sp, r7
 8014c4e:	bd80      	pop	{r7, pc}

08014c50 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014c50:	b580      	push	{r7, lr}
 8014c52:	b086      	sub	sp, #24
 8014c54:	af00      	add	r7, sp, #0
 8014c56:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014c58:	2182      	movs	r1, #130	; 0x82
 8014c5a:	4818      	ldr	r0, [pc, #96]	; (8014cbc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014c5c:	f000 fd4f 	bl	80156fe <USBD_GetEpDesc>
 8014c60:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014c62:	2101      	movs	r1, #1
 8014c64:	4815      	ldr	r0, [pc, #84]	; (8014cbc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014c66:	f000 fd4a 	bl	80156fe <USBD_GetEpDesc>
 8014c6a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014c6c:	2181      	movs	r1, #129	; 0x81
 8014c6e:	4813      	ldr	r0, [pc, #76]	; (8014cbc <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014c70:	f000 fd45 	bl	80156fe <USBD_GetEpDesc>
 8014c74:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014c76:	697b      	ldr	r3, [r7, #20]
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d002      	beq.n	8014c82 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014c7c:	697b      	ldr	r3, [r7, #20]
 8014c7e:	2210      	movs	r2, #16
 8014c80:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014c82:	693b      	ldr	r3, [r7, #16]
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d006      	beq.n	8014c96 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014c88:	693b      	ldr	r3, [r7, #16]
 8014c8a:	2200      	movs	r2, #0
 8014c8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014c90:	711a      	strb	r2, [r3, #4]
 8014c92:	2200      	movs	r2, #0
 8014c94:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d006      	beq.n	8014caa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	2200      	movs	r2, #0
 8014ca0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014ca4:	711a      	strb	r2, [r3, #4]
 8014ca6:	2200      	movs	r2, #0
 8014ca8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	2243      	movs	r2, #67	; 0x43
 8014cae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014cb0:	4b02      	ldr	r3, [pc, #8]	; (8014cbc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8014cb2:	4618      	mov	r0, r3
 8014cb4:	3718      	adds	r7, #24
 8014cb6:	46bd      	mov	sp, r7
 8014cb8:	bd80      	pop	{r7, pc}
 8014cba:	bf00      	nop
 8014cbc:	24000054 	.word	0x24000054

08014cc0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8014cc0:	b580      	push	{r7, lr}
 8014cc2:	b086      	sub	sp, #24
 8014cc4:	af00      	add	r7, sp, #0
 8014cc6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014cc8:	2182      	movs	r1, #130	; 0x82
 8014cca:	4818      	ldr	r0, [pc, #96]	; (8014d2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014ccc:	f000 fd17 	bl	80156fe <USBD_GetEpDesc>
 8014cd0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014cd2:	2101      	movs	r1, #1
 8014cd4:	4815      	ldr	r0, [pc, #84]	; (8014d2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014cd6:	f000 fd12 	bl	80156fe <USBD_GetEpDesc>
 8014cda:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014cdc:	2181      	movs	r1, #129	; 0x81
 8014cde:	4813      	ldr	r0, [pc, #76]	; (8014d2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014ce0:	f000 fd0d 	bl	80156fe <USBD_GetEpDesc>
 8014ce4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014ce6:	697b      	ldr	r3, [r7, #20]
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d002      	beq.n	8014cf2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8014cec:	697b      	ldr	r3, [r7, #20]
 8014cee:	2210      	movs	r2, #16
 8014cf0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014cf2:	693b      	ldr	r3, [r7, #16]
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d006      	beq.n	8014d06 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014cf8:	693b      	ldr	r3, [r7, #16]
 8014cfa:	2200      	movs	r2, #0
 8014cfc:	711a      	strb	r2, [r3, #4]
 8014cfe:	2200      	movs	r2, #0
 8014d00:	f042 0202 	orr.w	r2, r2, #2
 8014d04:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014d06:	68fb      	ldr	r3, [r7, #12]
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d006      	beq.n	8014d1a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	2200      	movs	r2, #0
 8014d10:	711a      	strb	r2, [r3, #4]
 8014d12:	2200      	movs	r2, #0
 8014d14:	f042 0202 	orr.w	r2, r2, #2
 8014d18:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	2243      	movs	r2, #67	; 0x43
 8014d1e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014d20:	4b02      	ldr	r3, [pc, #8]	; (8014d2c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8014d22:	4618      	mov	r0, r3
 8014d24:	3718      	adds	r7, #24
 8014d26:	46bd      	mov	sp, r7
 8014d28:	bd80      	pop	{r7, pc}
 8014d2a:	bf00      	nop
 8014d2c:	24000054 	.word	0x24000054

08014d30 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014d30:	b580      	push	{r7, lr}
 8014d32:	b086      	sub	sp, #24
 8014d34:	af00      	add	r7, sp, #0
 8014d36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014d38:	2182      	movs	r1, #130	; 0x82
 8014d3a:	4818      	ldr	r0, [pc, #96]	; (8014d9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014d3c:	f000 fcdf 	bl	80156fe <USBD_GetEpDesc>
 8014d40:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014d42:	2101      	movs	r1, #1
 8014d44:	4815      	ldr	r0, [pc, #84]	; (8014d9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014d46:	f000 fcda 	bl	80156fe <USBD_GetEpDesc>
 8014d4a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014d4c:	2181      	movs	r1, #129	; 0x81
 8014d4e:	4813      	ldr	r0, [pc, #76]	; (8014d9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014d50:	f000 fcd5 	bl	80156fe <USBD_GetEpDesc>
 8014d54:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014d56:	697b      	ldr	r3, [r7, #20]
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d002      	beq.n	8014d62 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014d5c:	697b      	ldr	r3, [r7, #20]
 8014d5e:	2210      	movs	r2, #16
 8014d60:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014d62:	693b      	ldr	r3, [r7, #16]
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d006      	beq.n	8014d76 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014d68:	693b      	ldr	r3, [r7, #16]
 8014d6a:	2200      	movs	r2, #0
 8014d6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014d70:	711a      	strb	r2, [r3, #4]
 8014d72:	2200      	movs	r2, #0
 8014d74:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	d006      	beq.n	8014d8a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014d7c:	68fb      	ldr	r3, [r7, #12]
 8014d7e:	2200      	movs	r2, #0
 8014d80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014d84:	711a      	strb	r2, [r3, #4]
 8014d86:	2200      	movs	r2, #0
 8014d88:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	2243      	movs	r2, #67	; 0x43
 8014d8e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014d90:	4b02      	ldr	r3, [pc, #8]	; (8014d9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8014d92:	4618      	mov	r0, r3
 8014d94:	3718      	adds	r7, #24
 8014d96:	46bd      	mov	sp, r7
 8014d98:	bd80      	pop	{r7, pc}
 8014d9a:	bf00      	nop
 8014d9c:	24000054 	.word	0x24000054

08014da0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014da0:	b480      	push	{r7}
 8014da2:	b083      	sub	sp, #12
 8014da4:	af00      	add	r7, sp, #0
 8014da6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	220a      	movs	r2, #10
 8014dac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8014dae:	4b03      	ldr	r3, [pc, #12]	; (8014dbc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8014db0:	4618      	mov	r0, r3
 8014db2:	370c      	adds	r7, #12
 8014db4:	46bd      	mov	sp, r7
 8014db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dba:	4770      	bx	lr
 8014dbc:	24000010 	.word	0x24000010

08014dc0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8014dc0:	b480      	push	{r7}
 8014dc2:	b083      	sub	sp, #12
 8014dc4:	af00      	add	r7, sp, #0
 8014dc6:	6078      	str	r0, [r7, #4]
 8014dc8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8014dca:	683b      	ldr	r3, [r7, #0]
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	d101      	bne.n	8014dd4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8014dd0:	2303      	movs	r3, #3
 8014dd2:	e009      	b.n	8014de8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014dda:	687a      	ldr	r2, [r7, #4]
 8014ddc:	33b0      	adds	r3, #176	; 0xb0
 8014dde:	009b      	lsls	r3, r3, #2
 8014de0:	4413      	add	r3, r2
 8014de2:	683a      	ldr	r2, [r7, #0]
 8014de4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8014de6:	2300      	movs	r3, #0
}
 8014de8:	4618      	mov	r0, r3
 8014dea:	370c      	adds	r7, #12
 8014dec:	46bd      	mov	sp, r7
 8014dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014df2:	4770      	bx	lr

08014df4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8014df4:	b480      	push	{r7}
 8014df6:	b087      	sub	sp, #28
 8014df8:	af00      	add	r7, sp, #0
 8014dfa:	60f8      	str	r0, [r7, #12]
 8014dfc:	60b9      	str	r1, [r7, #8]
 8014dfe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014e00:	68fb      	ldr	r3, [r7, #12]
 8014e02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e06:	68fb      	ldr	r3, [r7, #12]
 8014e08:	32b0      	adds	r2, #176	; 0xb0
 8014e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e0e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014e10:	697b      	ldr	r3, [r7, #20]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d101      	bne.n	8014e1a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014e16:	2303      	movs	r3, #3
 8014e18:	e008      	b.n	8014e2c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8014e1a:	697b      	ldr	r3, [r7, #20]
 8014e1c:	68ba      	ldr	r2, [r7, #8]
 8014e1e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8014e22:	697b      	ldr	r3, [r7, #20]
 8014e24:	687a      	ldr	r2, [r7, #4]
 8014e26:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8014e2a:	2300      	movs	r3, #0
}
 8014e2c:	4618      	mov	r0, r3
 8014e2e:	371c      	adds	r7, #28
 8014e30:	46bd      	mov	sp, r7
 8014e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e36:	4770      	bx	lr

08014e38 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8014e38:	b480      	push	{r7}
 8014e3a:	b085      	sub	sp, #20
 8014e3c:	af00      	add	r7, sp, #0
 8014e3e:	6078      	str	r0, [r7, #4]
 8014e40:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	32b0      	adds	r2, #176	; 0xb0
 8014e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e50:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014e52:	68fb      	ldr	r3, [r7, #12]
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d101      	bne.n	8014e5c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8014e58:	2303      	movs	r3, #3
 8014e5a:	e004      	b.n	8014e66 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8014e5c:	68fb      	ldr	r3, [r7, #12]
 8014e5e:	683a      	ldr	r2, [r7, #0]
 8014e60:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8014e64:	2300      	movs	r3, #0
}
 8014e66:	4618      	mov	r0, r3
 8014e68:	3714      	adds	r7, #20
 8014e6a:	46bd      	mov	sp, r7
 8014e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e70:	4770      	bx	lr
	...

08014e74 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8014e74:	b580      	push	{r7, lr}
 8014e76:	b084      	sub	sp, #16
 8014e78:	af00      	add	r7, sp, #0
 8014e7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	32b0      	adds	r2, #176	; 0xb0
 8014e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e8a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8014e8c:	2301      	movs	r3, #1
 8014e8e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014e90:	68bb      	ldr	r3, [r7, #8]
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d101      	bne.n	8014e9a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014e96:	2303      	movs	r3, #3
 8014e98:	e025      	b.n	8014ee6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8014e9a:	68bb      	ldr	r3, [r7, #8]
 8014e9c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d11f      	bne.n	8014ee4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8014ea4:	68bb      	ldr	r3, [r7, #8]
 8014ea6:	2201      	movs	r2, #1
 8014ea8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8014eac:	4b10      	ldr	r3, [pc, #64]	; (8014ef0 <USBD_CDC_TransmitPacket+0x7c>)
 8014eae:	781b      	ldrb	r3, [r3, #0]
 8014eb0:	f003 020f 	and.w	r2, r3, #15
 8014eb4:	68bb      	ldr	r3, [r7, #8]
 8014eb6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8014eba:	6878      	ldr	r0, [r7, #4]
 8014ebc:	4613      	mov	r3, r2
 8014ebe:	009b      	lsls	r3, r3, #2
 8014ec0:	4413      	add	r3, r2
 8014ec2:	009b      	lsls	r3, r3, #2
 8014ec4:	4403      	add	r3, r0
 8014ec6:	3318      	adds	r3, #24
 8014ec8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8014eca:	4b09      	ldr	r3, [pc, #36]	; (8014ef0 <USBD_CDC_TransmitPacket+0x7c>)
 8014ecc:	7819      	ldrb	r1, [r3, #0]
 8014ece:	68bb      	ldr	r3, [r7, #8]
 8014ed0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8014ed4:	68bb      	ldr	r3, [r7, #8]
 8014ed6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014eda:	6878      	ldr	r0, [r7, #4]
 8014edc:	f002 f825 	bl	8016f2a <USBD_LL_Transmit>

    ret = USBD_OK;
 8014ee0:	2300      	movs	r3, #0
 8014ee2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8014ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ee6:	4618      	mov	r0, r3
 8014ee8:	3710      	adds	r7, #16
 8014eea:	46bd      	mov	sp, r7
 8014eec:	bd80      	pop	{r7, pc}
 8014eee:	bf00      	nop
 8014ef0:	24000097 	.word	0x24000097

08014ef4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8014ef4:	b580      	push	{r7, lr}
 8014ef6:	b084      	sub	sp, #16
 8014ef8:	af00      	add	r7, sp, #0
 8014efa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	32b0      	adds	r2, #176	; 0xb0
 8014f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f0a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	32b0      	adds	r2, #176	; 0xb0
 8014f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d101      	bne.n	8014f22 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8014f1e:	2303      	movs	r3, #3
 8014f20:	e018      	b.n	8014f54 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	7c1b      	ldrb	r3, [r3, #16]
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d10a      	bne.n	8014f40 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014f2a:	4b0c      	ldr	r3, [pc, #48]	; (8014f5c <USBD_CDC_ReceivePacket+0x68>)
 8014f2c:	7819      	ldrb	r1, [r3, #0]
 8014f2e:	68fb      	ldr	r3, [r7, #12]
 8014f30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014f34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014f38:	6878      	ldr	r0, [r7, #4]
 8014f3a:	f002 f817 	bl	8016f6c <USBD_LL_PrepareReceive>
 8014f3e:	e008      	b.n	8014f52 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014f40:	4b06      	ldr	r3, [pc, #24]	; (8014f5c <USBD_CDC_ReceivePacket+0x68>)
 8014f42:	7819      	ldrb	r1, [r3, #0]
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014f4a:	2340      	movs	r3, #64	; 0x40
 8014f4c:	6878      	ldr	r0, [r7, #4]
 8014f4e:	f002 f80d 	bl	8016f6c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014f52:	2300      	movs	r3, #0
}
 8014f54:	4618      	mov	r0, r3
 8014f56:	3710      	adds	r7, #16
 8014f58:	46bd      	mov	sp, r7
 8014f5a:	bd80      	pop	{r7, pc}
 8014f5c:	24000098 	.word	0x24000098

08014f60 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8014f60:	b580      	push	{r7, lr}
 8014f62:	b086      	sub	sp, #24
 8014f64:	af00      	add	r7, sp, #0
 8014f66:	60f8      	str	r0, [r7, #12]
 8014f68:	60b9      	str	r1, [r7, #8]
 8014f6a:	4613      	mov	r3, r2
 8014f6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014f6e:	68fb      	ldr	r3, [r7, #12]
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d101      	bne.n	8014f78 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014f74:	2303      	movs	r3, #3
 8014f76:	e01f      	b.n	8014fb8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8014f78:	68fb      	ldr	r3, [r7, #12]
 8014f7a:	2200      	movs	r2, #0
 8014f7c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	2200      	movs	r2, #0
 8014f84:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	2200      	movs	r2, #0
 8014f8c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014f90:	68bb      	ldr	r3, [r7, #8]
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d003      	beq.n	8014f9e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8014f96:	68fb      	ldr	r3, [r7, #12]
 8014f98:	68ba      	ldr	r2, [r7, #8]
 8014f9a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014f9e:	68fb      	ldr	r3, [r7, #12]
 8014fa0:	2201      	movs	r2, #1
 8014fa2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8014fa6:	68fb      	ldr	r3, [r7, #12]
 8014fa8:	79fa      	ldrb	r2, [r7, #7]
 8014faa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014fac:	68f8      	ldr	r0, [r7, #12]
 8014fae:	f001 fe81 	bl	8016cb4 <USBD_LL_Init>
 8014fb2:	4603      	mov	r3, r0
 8014fb4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8014fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8014fb8:	4618      	mov	r0, r3
 8014fba:	3718      	adds	r7, #24
 8014fbc:	46bd      	mov	sp, r7
 8014fbe:	bd80      	pop	{r7, pc}

08014fc0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014fc0:	b580      	push	{r7, lr}
 8014fc2:	b084      	sub	sp, #16
 8014fc4:	af00      	add	r7, sp, #0
 8014fc6:	6078      	str	r0, [r7, #4]
 8014fc8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014fca:	2300      	movs	r3, #0
 8014fcc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8014fce:	683b      	ldr	r3, [r7, #0]
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d101      	bne.n	8014fd8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014fd4:	2303      	movs	r3, #3
 8014fd6:	e025      	b.n	8015024 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	683a      	ldr	r2, [r7, #0]
 8014fdc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	32ae      	adds	r2, #174	; 0xae
 8014fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d00f      	beq.n	8015014 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	32ae      	adds	r2, #174	; 0xae
 8014ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015004:	f107 020e 	add.w	r2, r7, #14
 8015008:	4610      	mov	r0, r2
 801500a:	4798      	blx	r3
 801500c:	4602      	mov	r2, r0
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801501a:	1c5a      	adds	r2, r3, #1
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8015022:	2300      	movs	r3, #0
}
 8015024:	4618      	mov	r0, r3
 8015026:	3710      	adds	r7, #16
 8015028:	46bd      	mov	sp, r7
 801502a:	bd80      	pop	{r7, pc}

0801502c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801502c:	b580      	push	{r7, lr}
 801502e:	b082      	sub	sp, #8
 8015030:	af00      	add	r7, sp, #0
 8015032:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8015034:	6878      	ldr	r0, [r7, #4]
 8015036:	f001 fe8f 	bl	8016d58 <USBD_LL_Start>
 801503a:	4603      	mov	r3, r0
}
 801503c:	4618      	mov	r0, r3
 801503e:	3708      	adds	r7, #8
 8015040:	46bd      	mov	sp, r7
 8015042:	bd80      	pop	{r7, pc}

08015044 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8015044:	b480      	push	{r7}
 8015046:	b083      	sub	sp, #12
 8015048:	af00      	add	r7, sp, #0
 801504a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801504c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801504e:	4618      	mov	r0, r3
 8015050:	370c      	adds	r7, #12
 8015052:	46bd      	mov	sp, r7
 8015054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015058:	4770      	bx	lr

0801505a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801505a:	b580      	push	{r7, lr}
 801505c:	b084      	sub	sp, #16
 801505e:	af00      	add	r7, sp, #0
 8015060:	6078      	str	r0, [r7, #4]
 8015062:	460b      	mov	r3, r1
 8015064:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015066:	2300      	movs	r3, #0
 8015068:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015070:	2b00      	cmp	r3, #0
 8015072:	d009      	beq.n	8015088 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	78fa      	ldrb	r2, [r7, #3]
 801507e:	4611      	mov	r1, r2
 8015080:	6878      	ldr	r0, [r7, #4]
 8015082:	4798      	blx	r3
 8015084:	4603      	mov	r3, r0
 8015086:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015088:	7bfb      	ldrb	r3, [r7, #15]
}
 801508a:	4618      	mov	r0, r3
 801508c:	3710      	adds	r7, #16
 801508e:	46bd      	mov	sp, r7
 8015090:	bd80      	pop	{r7, pc}

08015092 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015092:	b580      	push	{r7, lr}
 8015094:	b084      	sub	sp, #16
 8015096:	af00      	add	r7, sp, #0
 8015098:	6078      	str	r0, [r7, #4]
 801509a:	460b      	mov	r3, r1
 801509c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801509e:	2300      	movs	r3, #0
 80150a0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80150a8:	685b      	ldr	r3, [r3, #4]
 80150aa:	78fa      	ldrb	r2, [r7, #3]
 80150ac:	4611      	mov	r1, r2
 80150ae:	6878      	ldr	r0, [r7, #4]
 80150b0:	4798      	blx	r3
 80150b2:	4603      	mov	r3, r0
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	d001      	beq.n	80150bc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80150b8:	2303      	movs	r3, #3
 80150ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80150bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80150be:	4618      	mov	r0, r3
 80150c0:	3710      	adds	r7, #16
 80150c2:	46bd      	mov	sp, r7
 80150c4:	bd80      	pop	{r7, pc}

080150c6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80150c6:	b580      	push	{r7, lr}
 80150c8:	b084      	sub	sp, #16
 80150ca:	af00      	add	r7, sp, #0
 80150cc:	6078      	str	r0, [r7, #4]
 80150ce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80150d6:	6839      	ldr	r1, [r7, #0]
 80150d8:	4618      	mov	r0, r3
 80150da:	f001 f90e 	bl	80162fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	2201      	movs	r2, #1
 80150e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80150ec:	461a      	mov	r2, r3
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80150fa:	f003 031f 	and.w	r3, r3, #31
 80150fe:	2b02      	cmp	r3, #2
 8015100:	d01a      	beq.n	8015138 <USBD_LL_SetupStage+0x72>
 8015102:	2b02      	cmp	r3, #2
 8015104:	d822      	bhi.n	801514c <USBD_LL_SetupStage+0x86>
 8015106:	2b00      	cmp	r3, #0
 8015108:	d002      	beq.n	8015110 <USBD_LL_SetupStage+0x4a>
 801510a:	2b01      	cmp	r3, #1
 801510c:	d00a      	beq.n	8015124 <USBD_LL_SetupStage+0x5e>
 801510e:	e01d      	b.n	801514c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015116:	4619      	mov	r1, r3
 8015118:	6878      	ldr	r0, [r7, #4]
 801511a:	f000 fb65 	bl	80157e8 <USBD_StdDevReq>
 801511e:	4603      	mov	r3, r0
 8015120:	73fb      	strb	r3, [r7, #15]
      break;
 8015122:	e020      	b.n	8015166 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801512a:	4619      	mov	r1, r3
 801512c:	6878      	ldr	r0, [r7, #4]
 801512e:	f000 fbcd 	bl	80158cc <USBD_StdItfReq>
 8015132:	4603      	mov	r3, r0
 8015134:	73fb      	strb	r3, [r7, #15]
      break;
 8015136:	e016      	b.n	8015166 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801513e:	4619      	mov	r1, r3
 8015140:	6878      	ldr	r0, [r7, #4]
 8015142:	f000 fc2f 	bl	80159a4 <USBD_StdEPReq>
 8015146:	4603      	mov	r3, r0
 8015148:	73fb      	strb	r3, [r7, #15]
      break;
 801514a:	e00c      	b.n	8015166 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015152:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015156:	b2db      	uxtb	r3, r3
 8015158:	4619      	mov	r1, r3
 801515a:	6878      	ldr	r0, [r7, #4]
 801515c:	f001 fe5c 	bl	8016e18 <USBD_LL_StallEP>
 8015160:	4603      	mov	r3, r0
 8015162:	73fb      	strb	r3, [r7, #15]
      break;
 8015164:	bf00      	nop
  }

  return ret;
 8015166:	7bfb      	ldrb	r3, [r7, #15]
}
 8015168:	4618      	mov	r0, r3
 801516a:	3710      	adds	r7, #16
 801516c:	46bd      	mov	sp, r7
 801516e:	bd80      	pop	{r7, pc}

08015170 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015170:	b580      	push	{r7, lr}
 8015172:	b086      	sub	sp, #24
 8015174:	af00      	add	r7, sp, #0
 8015176:	60f8      	str	r0, [r7, #12]
 8015178:	460b      	mov	r3, r1
 801517a:	607a      	str	r2, [r7, #4]
 801517c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801517e:	2300      	movs	r3, #0
 8015180:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8015182:	7afb      	ldrb	r3, [r7, #11]
 8015184:	2b00      	cmp	r3, #0
 8015186:	d16e      	bne.n	8015266 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8015188:	68fb      	ldr	r3, [r7, #12]
 801518a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801518e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015196:	2b03      	cmp	r3, #3
 8015198:	f040 8098 	bne.w	80152cc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 801519c:	693b      	ldr	r3, [r7, #16]
 801519e:	689a      	ldr	r2, [r3, #8]
 80151a0:	693b      	ldr	r3, [r7, #16]
 80151a2:	68db      	ldr	r3, [r3, #12]
 80151a4:	429a      	cmp	r2, r3
 80151a6:	d913      	bls.n	80151d0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80151a8:	693b      	ldr	r3, [r7, #16]
 80151aa:	689a      	ldr	r2, [r3, #8]
 80151ac:	693b      	ldr	r3, [r7, #16]
 80151ae:	68db      	ldr	r3, [r3, #12]
 80151b0:	1ad2      	subs	r2, r2, r3
 80151b2:	693b      	ldr	r3, [r7, #16]
 80151b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80151b6:	693b      	ldr	r3, [r7, #16]
 80151b8:	68da      	ldr	r2, [r3, #12]
 80151ba:	693b      	ldr	r3, [r7, #16]
 80151bc:	689b      	ldr	r3, [r3, #8]
 80151be:	4293      	cmp	r3, r2
 80151c0:	bf28      	it	cs
 80151c2:	4613      	movcs	r3, r2
 80151c4:	461a      	mov	r2, r3
 80151c6:	6879      	ldr	r1, [r7, #4]
 80151c8:	68f8      	ldr	r0, [r7, #12]
 80151ca:	f001 f98a 	bl	80164e2 <USBD_CtlContinueRx>
 80151ce:	e07d      	b.n	80152cc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80151d0:	68fb      	ldr	r3, [r7, #12]
 80151d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80151d6:	f003 031f 	and.w	r3, r3, #31
 80151da:	2b02      	cmp	r3, #2
 80151dc:	d014      	beq.n	8015208 <USBD_LL_DataOutStage+0x98>
 80151de:	2b02      	cmp	r3, #2
 80151e0:	d81d      	bhi.n	801521e <USBD_LL_DataOutStage+0xae>
 80151e2:	2b00      	cmp	r3, #0
 80151e4:	d002      	beq.n	80151ec <USBD_LL_DataOutStage+0x7c>
 80151e6:	2b01      	cmp	r3, #1
 80151e8:	d003      	beq.n	80151f2 <USBD_LL_DataOutStage+0x82>
 80151ea:	e018      	b.n	801521e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80151ec:	2300      	movs	r3, #0
 80151ee:	75bb      	strb	r3, [r7, #22]
            break;
 80151f0:	e018      	b.n	8015224 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80151f8:	b2db      	uxtb	r3, r3
 80151fa:	4619      	mov	r1, r3
 80151fc:	68f8      	ldr	r0, [r7, #12]
 80151fe:	f000 fa64 	bl	80156ca <USBD_CoreFindIF>
 8015202:	4603      	mov	r3, r0
 8015204:	75bb      	strb	r3, [r7, #22]
            break;
 8015206:	e00d      	b.n	8015224 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8015208:	68fb      	ldr	r3, [r7, #12]
 801520a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801520e:	b2db      	uxtb	r3, r3
 8015210:	4619      	mov	r1, r3
 8015212:	68f8      	ldr	r0, [r7, #12]
 8015214:	f000 fa66 	bl	80156e4 <USBD_CoreFindEP>
 8015218:	4603      	mov	r3, r0
 801521a:	75bb      	strb	r3, [r7, #22]
            break;
 801521c:	e002      	b.n	8015224 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801521e:	2300      	movs	r3, #0
 8015220:	75bb      	strb	r3, [r7, #22]
            break;
 8015222:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8015224:	7dbb      	ldrb	r3, [r7, #22]
 8015226:	2b00      	cmp	r3, #0
 8015228:	d119      	bne.n	801525e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801522a:	68fb      	ldr	r3, [r7, #12]
 801522c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015230:	b2db      	uxtb	r3, r3
 8015232:	2b03      	cmp	r3, #3
 8015234:	d113      	bne.n	801525e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8015236:	7dba      	ldrb	r2, [r7, #22]
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	32ae      	adds	r2, #174	; 0xae
 801523c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015240:	691b      	ldr	r3, [r3, #16]
 8015242:	2b00      	cmp	r3, #0
 8015244:	d00b      	beq.n	801525e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8015246:	7dba      	ldrb	r2, [r7, #22]
 8015248:	68fb      	ldr	r3, [r7, #12]
 801524a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801524e:	7dba      	ldrb	r2, [r7, #22]
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	32ae      	adds	r2, #174	; 0xae
 8015254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015258:	691b      	ldr	r3, [r3, #16]
 801525a:	68f8      	ldr	r0, [r7, #12]
 801525c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801525e:	68f8      	ldr	r0, [r7, #12]
 8015260:	f001 f950 	bl	8016504 <USBD_CtlSendStatus>
 8015264:	e032      	b.n	80152cc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8015266:	7afb      	ldrb	r3, [r7, #11]
 8015268:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801526c:	b2db      	uxtb	r3, r3
 801526e:	4619      	mov	r1, r3
 8015270:	68f8      	ldr	r0, [r7, #12]
 8015272:	f000 fa37 	bl	80156e4 <USBD_CoreFindEP>
 8015276:	4603      	mov	r3, r0
 8015278:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801527a:	7dbb      	ldrb	r3, [r7, #22]
 801527c:	2bff      	cmp	r3, #255	; 0xff
 801527e:	d025      	beq.n	80152cc <USBD_LL_DataOutStage+0x15c>
 8015280:	7dbb      	ldrb	r3, [r7, #22]
 8015282:	2b00      	cmp	r3, #0
 8015284:	d122      	bne.n	80152cc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801528c:	b2db      	uxtb	r3, r3
 801528e:	2b03      	cmp	r3, #3
 8015290:	d117      	bne.n	80152c2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8015292:	7dba      	ldrb	r2, [r7, #22]
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	32ae      	adds	r2, #174	; 0xae
 8015298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801529c:	699b      	ldr	r3, [r3, #24]
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d00f      	beq.n	80152c2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80152a2:	7dba      	ldrb	r2, [r7, #22]
 80152a4:	68fb      	ldr	r3, [r7, #12]
 80152a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80152aa:	7dba      	ldrb	r2, [r7, #22]
 80152ac:	68fb      	ldr	r3, [r7, #12]
 80152ae:	32ae      	adds	r2, #174	; 0xae
 80152b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152b4:	699b      	ldr	r3, [r3, #24]
 80152b6:	7afa      	ldrb	r2, [r7, #11]
 80152b8:	4611      	mov	r1, r2
 80152ba:	68f8      	ldr	r0, [r7, #12]
 80152bc:	4798      	blx	r3
 80152be:	4603      	mov	r3, r0
 80152c0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80152c2:	7dfb      	ldrb	r3, [r7, #23]
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d001      	beq.n	80152cc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80152c8:	7dfb      	ldrb	r3, [r7, #23]
 80152ca:	e000      	b.n	80152ce <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80152cc:	2300      	movs	r3, #0
}
 80152ce:	4618      	mov	r0, r3
 80152d0:	3718      	adds	r7, #24
 80152d2:	46bd      	mov	sp, r7
 80152d4:	bd80      	pop	{r7, pc}

080152d6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80152d6:	b580      	push	{r7, lr}
 80152d8:	b086      	sub	sp, #24
 80152da:	af00      	add	r7, sp, #0
 80152dc:	60f8      	str	r0, [r7, #12]
 80152de:	460b      	mov	r3, r1
 80152e0:	607a      	str	r2, [r7, #4]
 80152e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80152e4:	7afb      	ldrb	r3, [r7, #11]
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d16f      	bne.n	80153ca <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80152ea:	68fb      	ldr	r3, [r7, #12]
 80152ec:	3314      	adds	r3, #20
 80152ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80152f0:	68fb      	ldr	r3, [r7, #12]
 80152f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80152f6:	2b02      	cmp	r3, #2
 80152f8:	d15a      	bne.n	80153b0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80152fa:	693b      	ldr	r3, [r7, #16]
 80152fc:	689a      	ldr	r2, [r3, #8]
 80152fe:	693b      	ldr	r3, [r7, #16]
 8015300:	68db      	ldr	r3, [r3, #12]
 8015302:	429a      	cmp	r2, r3
 8015304:	d914      	bls.n	8015330 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8015306:	693b      	ldr	r3, [r7, #16]
 8015308:	689a      	ldr	r2, [r3, #8]
 801530a:	693b      	ldr	r3, [r7, #16]
 801530c:	68db      	ldr	r3, [r3, #12]
 801530e:	1ad2      	subs	r2, r2, r3
 8015310:	693b      	ldr	r3, [r7, #16]
 8015312:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015314:	693b      	ldr	r3, [r7, #16]
 8015316:	689b      	ldr	r3, [r3, #8]
 8015318:	461a      	mov	r2, r3
 801531a:	6879      	ldr	r1, [r7, #4]
 801531c:	68f8      	ldr	r0, [r7, #12]
 801531e:	f001 f8b2 	bl	8016486 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015322:	2300      	movs	r3, #0
 8015324:	2200      	movs	r2, #0
 8015326:	2100      	movs	r1, #0
 8015328:	68f8      	ldr	r0, [r7, #12]
 801532a:	f001 fe1f 	bl	8016f6c <USBD_LL_PrepareReceive>
 801532e:	e03f      	b.n	80153b0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8015330:	693b      	ldr	r3, [r7, #16]
 8015332:	68da      	ldr	r2, [r3, #12]
 8015334:	693b      	ldr	r3, [r7, #16]
 8015336:	689b      	ldr	r3, [r3, #8]
 8015338:	429a      	cmp	r2, r3
 801533a:	d11c      	bne.n	8015376 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801533c:	693b      	ldr	r3, [r7, #16]
 801533e:	685a      	ldr	r2, [r3, #4]
 8015340:	693b      	ldr	r3, [r7, #16]
 8015342:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8015344:	429a      	cmp	r2, r3
 8015346:	d316      	bcc.n	8015376 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8015348:	693b      	ldr	r3, [r7, #16]
 801534a:	685a      	ldr	r2, [r3, #4]
 801534c:	68fb      	ldr	r3, [r7, #12]
 801534e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8015352:	429a      	cmp	r2, r3
 8015354:	d20f      	bcs.n	8015376 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015356:	2200      	movs	r2, #0
 8015358:	2100      	movs	r1, #0
 801535a:	68f8      	ldr	r0, [r7, #12]
 801535c:	f001 f893 	bl	8016486 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8015360:	68fb      	ldr	r3, [r7, #12]
 8015362:	2200      	movs	r2, #0
 8015364:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015368:	2300      	movs	r3, #0
 801536a:	2200      	movs	r2, #0
 801536c:	2100      	movs	r1, #0
 801536e:	68f8      	ldr	r0, [r7, #12]
 8015370:	f001 fdfc 	bl	8016f6c <USBD_LL_PrepareReceive>
 8015374:	e01c      	b.n	80153b0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015376:	68fb      	ldr	r3, [r7, #12]
 8015378:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801537c:	b2db      	uxtb	r3, r3
 801537e:	2b03      	cmp	r3, #3
 8015380:	d10f      	bne.n	80153a2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8015382:	68fb      	ldr	r3, [r7, #12]
 8015384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015388:	68db      	ldr	r3, [r3, #12]
 801538a:	2b00      	cmp	r3, #0
 801538c:	d009      	beq.n	80153a2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801538e:	68fb      	ldr	r3, [r7, #12]
 8015390:	2200      	movs	r2, #0
 8015392:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801539c:	68db      	ldr	r3, [r3, #12]
 801539e:	68f8      	ldr	r0, [r7, #12]
 80153a0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80153a2:	2180      	movs	r1, #128	; 0x80
 80153a4:	68f8      	ldr	r0, [r7, #12]
 80153a6:	f001 fd37 	bl	8016e18 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80153aa:	68f8      	ldr	r0, [r7, #12]
 80153ac:	f001 f8bd 	bl	801652a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80153b0:	68fb      	ldr	r3, [r7, #12]
 80153b2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d03a      	beq.n	8015430 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80153ba:	68f8      	ldr	r0, [r7, #12]
 80153bc:	f7ff fe42 	bl	8015044 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80153c0:	68fb      	ldr	r3, [r7, #12]
 80153c2:	2200      	movs	r2, #0
 80153c4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80153c8:	e032      	b.n	8015430 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80153ca:	7afb      	ldrb	r3, [r7, #11]
 80153cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80153d0:	b2db      	uxtb	r3, r3
 80153d2:	4619      	mov	r1, r3
 80153d4:	68f8      	ldr	r0, [r7, #12]
 80153d6:	f000 f985 	bl	80156e4 <USBD_CoreFindEP>
 80153da:	4603      	mov	r3, r0
 80153dc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80153de:	7dfb      	ldrb	r3, [r7, #23]
 80153e0:	2bff      	cmp	r3, #255	; 0xff
 80153e2:	d025      	beq.n	8015430 <USBD_LL_DataInStage+0x15a>
 80153e4:	7dfb      	ldrb	r3, [r7, #23]
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d122      	bne.n	8015430 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80153ea:	68fb      	ldr	r3, [r7, #12]
 80153ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80153f0:	b2db      	uxtb	r3, r3
 80153f2:	2b03      	cmp	r3, #3
 80153f4:	d11c      	bne.n	8015430 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80153f6:	7dfa      	ldrb	r2, [r7, #23]
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	32ae      	adds	r2, #174	; 0xae
 80153fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015400:	695b      	ldr	r3, [r3, #20]
 8015402:	2b00      	cmp	r3, #0
 8015404:	d014      	beq.n	8015430 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8015406:	7dfa      	ldrb	r2, [r7, #23]
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801540e:	7dfa      	ldrb	r2, [r7, #23]
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	32ae      	adds	r2, #174	; 0xae
 8015414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015418:	695b      	ldr	r3, [r3, #20]
 801541a:	7afa      	ldrb	r2, [r7, #11]
 801541c:	4611      	mov	r1, r2
 801541e:	68f8      	ldr	r0, [r7, #12]
 8015420:	4798      	blx	r3
 8015422:	4603      	mov	r3, r0
 8015424:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8015426:	7dbb      	ldrb	r3, [r7, #22]
 8015428:	2b00      	cmp	r3, #0
 801542a:	d001      	beq.n	8015430 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 801542c:	7dbb      	ldrb	r3, [r7, #22]
 801542e:	e000      	b.n	8015432 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8015430:	2300      	movs	r3, #0
}
 8015432:	4618      	mov	r0, r3
 8015434:	3718      	adds	r7, #24
 8015436:	46bd      	mov	sp, r7
 8015438:	bd80      	pop	{r7, pc}

0801543a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801543a:	b580      	push	{r7, lr}
 801543c:	b084      	sub	sp, #16
 801543e:	af00      	add	r7, sp, #0
 8015440:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8015442:	2300      	movs	r3, #0
 8015444:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	2201      	movs	r2, #1
 801544a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	2200      	movs	r2, #0
 8015452:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	2200      	movs	r2, #0
 801545a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	2200      	movs	r2, #0
 8015460:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	2200      	movs	r2, #0
 8015468:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015472:	2b00      	cmp	r3, #0
 8015474:	d014      	beq.n	80154a0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801547c:	685b      	ldr	r3, [r3, #4]
 801547e:	2b00      	cmp	r3, #0
 8015480:	d00e      	beq.n	80154a0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015488:	685b      	ldr	r3, [r3, #4]
 801548a:	687a      	ldr	r2, [r7, #4]
 801548c:	6852      	ldr	r2, [r2, #4]
 801548e:	b2d2      	uxtb	r2, r2
 8015490:	4611      	mov	r1, r2
 8015492:	6878      	ldr	r0, [r7, #4]
 8015494:	4798      	blx	r3
 8015496:	4603      	mov	r3, r0
 8015498:	2b00      	cmp	r3, #0
 801549a:	d001      	beq.n	80154a0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 801549c:	2303      	movs	r3, #3
 801549e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80154a0:	2340      	movs	r3, #64	; 0x40
 80154a2:	2200      	movs	r2, #0
 80154a4:	2100      	movs	r1, #0
 80154a6:	6878      	ldr	r0, [r7, #4]
 80154a8:	f001 fc71 	bl	8016d8e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	2201      	movs	r2, #1
 80154b0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	2240      	movs	r2, #64	; 0x40
 80154b8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80154bc:	2340      	movs	r3, #64	; 0x40
 80154be:	2200      	movs	r2, #0
 80154c0:	2180      	movs	r1, #128	; 0x80
 80154c2:	6878      	ldr	r0, [r7, #4]
 80154c4:	f001 fc63 	bl	8016d8e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	2201      	movs	r2, #1
 80154cc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	2240      	movs	r2, #64	; 0x40
 80154d2:	621a      	str	r2, [r3, #32]

  return ret;
 80154d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80154d6:	4618      	mov	r0, r3
 80154d8:	3710      	adds	r7, #16
 80154da:	46bd      	mov	sp, r7
 80154dc:	bd80      	pop	{r7, pc}

080154de <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80154de:	b480      	push	{r7}
 80154e0:	b083      	sub	sp, #12
 80154e2:	af00      	add	r7, sp, #0
 80154e4:	6078      	str	r0, [r7, #4]
 80154e6:	460b      	mov	r3, r1
 80154e8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	78fa      	ldrb	r2, [r7, #3]
 80154ee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80154f0:	2300      	movs	r3, #0
}
 80154f2:	4618      	mov	r0, r3
 80154f4:	370c      	adds	r7, #12
 80154f6:	46bd      	mov	sp, r7
 80154f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154fc:	4770      	bx	lr

080154fe <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80154fe:	b480      	push	{r7}
 8015500:	b083      	sub	sp, #12
 8015502:	af00      	add	r7, sp, #0
 8015504:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801550c:	b2db      	uxtb	r3, r3
 801550e:	2b04      	cmp	r3, #4
 8015510:	d006      	beq.n	8015520 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015518:	b2da      	uxtb	r2, r3
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	2204      	movs	r2, #4
 8015524:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8015528:	2300      	movs	r3, #0
}
 801552a:	4618      	mov	r0, r3
 801552c:	370c      	adds	r7, #12
 801552e:	46bd      	mov	sp, r7
 8015530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015534:	4770      	bx	lr

08015536 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015536:	b480      	push	{r7}
 8015538:	b083      	sub	sp, #12
 801553a:	af00      	add	r7, sp, #0
 801553c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015544:	b2db      	uxtb	r3, r3
 8015546:	2b04      	cmp	r3, #4
 8015548:	d106      	bne.n	8015558 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8015550:	b2da      	uxtb	r2, r3
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8015558:	2300      	movs	r3, #0
}
 801555a:	4618      	mov	r0, r3
 801555c:	370c      	adds	r7, #12
 801555e:	46bd      	mov	sp, r7
 8015560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015564:	4770      	bx	lr

08015566 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8015566:	b580      	push	{r7, lr}
 8015568:	b082      	sub	sp, #8
 801556a:	af00      	add	r7, sp, #0
 801556c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015574:	b2db      	uxtb	r3, r3
 8015576:	2b03      	cmp	r3, #3
 8015578:	d110      	bne.n	801559c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015580:	2b00      	cmp	r3, #0
 8015582:	d00b      	beq.n	801559c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801558a:	69db      	ldr	r3, [r3, #28]
 801558c:	2b00      	cmp	r3, #0
 801558e:	d005      	beq.n	801559c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015596:	69db      	ldr	r3, [r3, #28]
 8015598:	6878      	ldr	r0, [r7, #4]
 801559a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 801559c:	2300      	movs	r3, #0
}
 801559e:	4618      	mov	r0, r3
 80155a0:	3708      	adds	r7, #8
 80155a2:	46bd      	mov	sp, r7
 80155a4:	bd80      	pop	{r7, pc}

080155a6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80155a6:	b580      	push	{r7, lr}
 80155a8:	b082      	sub	sp, #8
 80155aa:	af00      	add	r7, sp, #0
 80155ac:	6078      	str	r0, [r7, #4]
 80155ae:	460b      	mov	r3, r1
 80155b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	32ae      	adds	r2, #174	; 0xae
 80155bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d101      	bne.n	80155c8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80155c4:	2303      	movs	r3, #3
 80155c6:	e01c      	b.n	8015602 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80155ce:	b2db      	uxtb	r3, r3
 80155d0:	2b03      	cmp	r3, #3
 80155d2:	d115      	bne.n	8015600 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	32ae      	adds	r2, #174	; 0xae
 80155de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155e2:	6a1b      	ldr	r3, [r3, #32]
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d00b      	beq.n	8015600 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	32ae      	adds	r2, #174	; 0xae
 80155f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155f6:	6a1b      	ldr	r3, [r3, #32]
 80155f8:	78fa      	ldrb	r2, [r7, #3]
 80155fa:	4611      	mov	r1, r2
 80155fc:	6878      	ldr	r0, [r7, #4]
 80155fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015600:	2300      	movs	r3, #0
}
 8015602:	4618      	mov	r0, r3
 8015604:	3708      	adds	r7, #8
 8015606:	46bd      	mov	sp, r7
 8015608:	bd80      	pop	{r7, pc}

0801560a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801560a:	b580      	push	{r7, lr}
 801560c:	b082      	sub	sp, #8
 801560e:	af00      	add	r7, sp, #0
 8015610:	6078      	str	r0, [r7, #4]
 8015612:	460b      	mov	r3, r1
 8015614:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	32ae      	adds	r2, #174	; 0xae
 8015620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015624:	2b00      	cmp	r3, #0
 8015626:	d101      	bne.n	801562c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8015628:	2303      	movs	r3, #3
 801562a:	e01c      	b.n	8015666 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015632:	b2db      	uxtb	r3, r3
 8015634:	2b03      	cmp	r3, #3
 8015636:	d115      	bne.n	8015664 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	32ae      	adds	r2, #174	; 0xae
 8015642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015648:	2b00      	cmp	r3, #0
 801564a:	d00b      	beq.n	8015664 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	32ae      	adds	r2, #174	; 0xae
 8015656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801565c:	78fa      	ldrb	r2, [r7, #3]
 801565e:	4611      	mov	r1, r2
 8015660:	6878      	ldr	r0, [r7, #4]
 8015662:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015664:	2300      	movs	r3, #0
}
 8015666:	4618      	mov	r0, r3
 8015668:	3708      	adds	r7, #8
 801566a:	46bd      	mov	sp, r7
 801566c:	bd80      	pop	{r7, pc}

0801566e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801566e:	b480      	push	{r7}
 8015670:	b083      	sub	sp, #12
 8015672:	af00      	add	r7, sp, #0
 8015674:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015676:	2300      	movs	r3, #0
}
 8015678:	4618      	mov	r0, r3
 801567a:	370c      	adds	r7, #12
 801567c:	46bd      	mov	sp, r7
 801567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015682:	4770      	bx	lr

08015684 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8015684:	b580      	push	{r7, lr}
 8015686:	b084      	sub	sp, #16
 8015688:	af00      	add	r7, sp, #0
 801568a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 801568c:	2300      	movs	r3, #0
 801568e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	2201      	movs	r2, #1
 8015694:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d00e      	beq.n	80156c0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80156a8:	685b      	ldr	r3, [r3, #4]
 80156aa:	687a      	ldr	r2, [r7, #4]
 80156ac:	6852      	ldr	r2, [r2, #4]
 80156ae:	b2d2      	uxtb	r2, r2
 80156b0:	4611      	mov	r1, r2
 80156b2:	6878      	ldr	r0, [r7, #4]
 80156b4:	4798      	blx	r3
 80156b6:	4603      	mov	r3, r0
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d001      	beq.n	80156c0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80156bc:	2303      	movs	r3, #3
 80156be:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80156c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80156c2:	4618      	mov	r0, r3
 80156c4:	3710      	adds	r7, #16
 80156c6:	46bd      	mov	sp, r7
 80156c8:	bd80      	pop	{r7, pc}

080156ca <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80156ca:	b480      	push	{r7}
 80156cc:	b083      	sub	sp, #12
 80156ce:	af00      	add	r7, sp, #0
 80156d0:	6078      	str	r0, [r7, #4]
 80156d2:	460b      	mov	r3, r1
 80156d4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80156d6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80156d8:	4618      	mov	r0, r3
 80156da:	370c      	adds	r7, #12
 80156dc:	46bd      	mov	sp, r7
 80156de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156e2:	4770      	bx	lr

080156e4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80156e4:	b480      	push	{r7}
 80156e6:	b083      	sub	sp, #12
 80156e8:	af00      	add	r7, sp, #0
 80156ea:	6078      	str	r0, [r7, #4]
 80156ec:	460b      	mov	r3, r1
 80156ee:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80156f0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80156f2:	4618      	mov	r0, r3
 80156f4:	370c      	adds	r7, #12
 80156f6:	46bd      	mov	sp, r7
 80156f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156fc:	4770      	bx	lr

080156fe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80156fe:	b580      	push	{r7, lr}
 8015700:	b086      	sub	sp, #24
 8015702:	af00      	add	r7, sp, #0
 8015704:	6078      	str	r0, [r7, #4]
 8015706:	460b      	mov	r3, r1
 8015708:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8015712:	2300      	movs	r3, #0
 8015714:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8015716:	68fb      	ldr	r3, [r7, #12]
 8015718:	885b      	ldrh	r3, [r3, #2]
 801571a:	b29a      	uxth	r2, r3
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	781b      	ldrb	r3, [r3, #0]
 8015720:	b29b      	uxth	r3, r3
 8015722:	429a      	cmp	r2, r3
 8015724:	d920      	bls.n	8015768 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8015726:	68fb      	ldr	r3, [r7, #12]
 8015728:	781b      	ldrb	r3, [r3, #0]
 801572a:	b29b      	uxth	r3, r3
 801572c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801572e:	e013      	b.n	8015758 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8015730:	f107 030a 	add.w	r3, r7, #10
 8015734:	4619      	mov	r1, r3
 8015736:	6978      	ldr	r0, [r7, #20]
 8015738:	f000 f81b 	bl	8015772 <USBD_GetNextDesc>
 801573c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801573e:	697b      	ldr	r3, [r7, #20]
 8015740:	785b      	ldrb	r3, [r3, #1]
 8015742:	2b05      	cmp	r3, #5
 8015744:	d108      	bne.n	8015758 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8015746:	697b      	ldr	r3, [r7, #20]
 8015748:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801574a:	693b      	ldr	r3, [r7, #16]
 801574c:	789b      	ldrb	r3, [r3, #2]
 801574e:	78fa      	ldrb	r2, [r7, #3]
 8015750:	429a      	cmp	r2, r3
 8015752:	d008      	beq.n	8015766 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8015754:	2300      	movs	r3, #0
 8015756:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8015758:	68fb      	ldr	r3, [r7, #12]
 801575a:	885b      	ldrh	r3, [r3, #2]
 801575c:	b29a      	uxth	r2, r3
 801575e:	897b      	ldrh	r3, [r7, #10]
 8015760:	429a      	cmp	r2, r3
 8015762:	d8e5      	bhi.n	8015730 <USBD_GetEpDesc+0x32>
 8015764:	e000      	b.n	8015768 <USBD_GetEpDesc+0x6a>
          break;
 8015766:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8015768:	693b      	ldr	r3, [r7, #16]
}
 801576a:	4618      	mov	r0, r3
 801576c:	3718      	adds	r7, #24
 801576e:	46bd      	mov	sp, r7
 8015770:	bd80      	pop	{r7, pc}

08015772 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8015772:	b480      	push	{r7}
 8015774:	b085      	sub	sp, #20
 8015776:	af00      	add	r7, sp, #0
 8015778:	6078      	str	r0, [r7, #4]
 801577a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8015780:	683b      	ldr	r3, [r7, #0]
 8015782:	881a      	ldrh	r2, [r3, #0]
 8015784:	68fb      	ldr	r3, [r7, #12]
 8015786:	781b      	ldrb	r3, [r3, #0]
 8015788:	b29b      	uxth	r3, r3
 801578a:	4413      	add	r3, r2
 801578c:	b29a      	uxth	r2, r3
 801578e:	683b      	ldr	r3, [r7, #0]
 8015790:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8015792:	68fb      	ldr	r3, [r7, #12]
 8015794:	781b      	ldrb	r3, [r3, #0]
 8015796:	461a      	mov	r2, r3
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	4413      	add	r3, r2
 801579c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801579e:	68fb      	ldr	r3, [r7, #12]
}
 80157a0:	4618      	mov	r0, r3
 80157a2:	3714      	adds	r7, #20
 80157a4:	46bd      	mov	sp, r7
 80157a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157aa:	4770      	bx	lr

080157ac <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80157ac:	b480      	push	{r7}
 80157ae:	b087      	sub	sp, #28
 80157b0:	af00      	add	r7, sp, #0
 80157b2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80157b8:	697b      	ldr	r3, [r7, #20]
 80157ba:	781b      	ldrb	r3, [r3, #0]
 80157bc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80157be:	697b      	ldr	r3, [r7, #20]
 80157c0:	3301      	adds	r3, #1
 80157c2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80157c4:	697b      	ldr	r3, [r7, #20]
 80157c6:	781b      	ldrb	r3, [r3, #0]
 80157c8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80157ca:	8a3b      	ldrh	r3, [r7, #16]
 80157cc:	021b      	lsls	r3, r3, #8
 80157ce:	b21a      	sxth	r2, r3
 80157d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80157d4:	4313      	orrs	r3, r2
 80157d6:	b21b      	sxth	r3, r3
 80157d8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80157da:	89fb      	ldrh	r3, [r7, #14]
}
 80157dc:	4618      	mov	r0, r3
 80157de:	371c      	adds	r7, #28
 80157e0:	46bd      	mov	sp, r7
 80157e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157e6:	4770      	bx	lr

080157e8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80157e8:	b580      	push	{r7, lr}
 80157ea:	b084      	sub	sp, #16
 80157ec:	af00      	add	r7, sp, #0
 80157ee:	6078      	str	r0, [r7, #4]
 80157f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80157f2:	2300      	movs	r3, #0
 80157f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80157f6:	683b      	ldr	r3, [r7, #0]
 80157f8:	781b      	ldrb	r3, [r3, #0]
 80157fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80157fe:	2b40      	cmp	r3, #64	; 0x40
 8015800:	d005      	beq.n	801580e <USBD_StdDevReq+0x26>
 8015802:	2b40      	cmp	r3, #64	; 0x40
 8015804:	d857      	bhi.n	80158b6 <USBD_StdDevReq+0xce>
 8015806:	2b00      	cmp	r3, #0
 8015808:	d00f      	beq.n	801582a <USBD_StdDevReq+0x42>
 801580a:	2b20      	cmp	r3, #32
 801580c:	d153      	bne.n	80158b6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	32ae      	adds	r2, #174	; 0xae
 8015818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801581c:	689b      	ldr	r3, [r3, #8]
 801581e:	6839      	ldr	r1, [r7, #0]
 8015820:	6878      	ldr	r0, [r7, #4]
 8015822:	4798      	blx	r3
 8015824:	4603      	mov	r3, r0
 8015826:	73fb      	strb	r3, [r7, #15]
      break;
 8015828:	e04a      	b.n	80158c0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801582a:	683b      	ldr	r3, [r7, #0]
 801582c:	785b      	ldrb	r3, [r3, #1]
 801582e:	2b09      	cmp	r3, #9
 8015830:	d83b      	bhi.n	80158aa <USBD_StdDevReq+0xc2>
 8015832:	a201      	add	r2, pc, #4	; (adr r2, 8015838 <USBD_StdDevReq+0x50>)
 8015834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015838:	0801588d 	.word	0x0801588d
 801583c:	080158a1 	.word	0x080158a1
 8015840:	080158ab 	.word	0x080158ab
 8015844:	08015897 	.word	0x08015897
 8015848:	080158ab 	.word	0x080158ab
 801584c:	0801586b 	.word	0x0801586b
 8015850:	08015861 	.word	0x08015861
 8015854:	080158ab 	.word	0x080158ab
 8015858:	08015883 	.word	0x08015883
 801585c:	08015875 	.word	0x08015875
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015860:	6839      	ldr	r1, [r7, #0]
 8015862:	6878      	ldr	r0, [r7, #4]
 8015864:	f000 fa3c 	bl	8015ce0 <USBD_GetDescriptor>
          break;
 8015868:	e024      	b.n	80158b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801586a:	6839      	ldr	r1, [r7, #0]
 801586c:	6878      	ldr	r0, [r7, #4]
 801586e:	f000 fba1 	bl	8015fb4 <USBD_SetAddress>
          break;
 8015872:	e01f      	b.n	80158b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8015874:	6839      	ldr	r1, [r7, #0]
 8015876:	6878      	ldr	r0, [r7, #4]
 8015878:	f000 fbe0 	bl	801603c <USBD_SetConfig>
 801587c:	4603      	mov	r3, r0
 801587e:	73fb      	strb	r3, [r7, #15]
          break;
 8015880:	e018      	b.n	80158b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8015882:	6839      	ldr	r1, [r7, #0]
 8015884:	6878      	ldr	r0, [r7, #4]
 8015886:	f000 fc83 	bl	8016190 <USBD_GetConfig>
          break;
 801588a:	e013      	b.n	80158b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801588c:	6839      	ldr	r1, [r7, #0]
 801588e:	6878      	ldr	r0, [r7, #4]
 8015890:	f000 fcb4 	bl	80161fc <USBD_GetStatus>
          break;
 8015894:	e00e      	b.n	80158b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8015896:	6839      	ldr	r1, [r7, #0]
 8015898:	6878      	ldr	r0, [r7, #4]
 801589a:	f000 fce3 	bl	8016264 <USBD_SetFeature>
          break;
 801589e:	e009      	b.n	80158b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80158a0:	6839      	ldr	r1, [r7, #0]
 80158a2:	6878      	ldr	r0, [r7, #4]
 80158a4:	f000 fd07 	bl	80162b6 <USBD_ClrFeature>
          break;
 80158a8:	e004      	b.n	80158b4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80158aa:	6839      	ldr	r1, [r7, #0]
 80158ac:	6878      	ldr	r0, [r7, #4]
 80158ae:	f000 fd5e 	bl	801636e <USBD_CtlError>
          break;
 80158b2:	bf00      	nop
      }
      break;
 80158b4:	e004      	b.n	80158c0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80158b6:	6839      	ldr	r1, [r7, #0]
 80158b8:	6878      	ldr	r0, [r7, #4]
 80158ba:	f000 fd58 	bl	801636e <USBD_CtlError>
      break;
 80158be:	bf00      	nop
  }

  return ret;
 80158c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80158c2:	4618      	mov	r0, r3
 80158c4:	3710      	adds	r7, #16
 80158c6:	46bd      	mov	sp, r7
 80158c8:	bd80      	pop	{r7, pc}
 80158ca:	bf00      	nop

080158cc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80158cc:	b580      	push	{r7, lr}
 80158ce:	b084      	sub	sp, #16
 80158d0:	af00      	add	r7, sp, #0
 80158d2:	6078      	str	r0, [r7, #4]
 80158d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80158d6:	2300      	movs	r3, #0
 80158d8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80158da:	683b      	ldr	r3, [r7, #0]
 80158dc:	781b      	ldrb	r3, [r3, #0]
 80158de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80158e2:	2b40      	cmp	r3, #64	; 0x40
 80158e4:	d005      	beq.n	80158f2 <USBD_StdItfReq+0x26>
 80158e6:	2b40      	cmp	r3, #64	; 0x40
 80158e8:	d852      	bhi.n	8015990 <USBD_StdItfReq+0xc4>
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d001      	beq.n	80158f2 <USBD_StdItfReq+0x26>
 80158ee:	2b20      	cmp	r3, #32
 80158f0:	d14e      	bne.n	8015990 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80158f8:	b2db      	uxtb	r3, r3
 80158fa:	3b01      	subs	r3, #1
 80158fc:	2b02      	cmp	r3, #2
 80158fe:	d840      	bhi.n	8015982 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015900:	683b      	ldr	r3, [r7, #0]
 8015902:	889b      	ldrh	r3, [r3, #4]
 8015904:	b2db      	uxtb	r3, r3
 8015906:	2b01      	cmp	r3, #1
 8015908:	d836      	bhi.n	8015978 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801590a:	683b      	ldr	r3, [r7, #0]
 801590c:	889b      	ldrh	r3, [r3, #4]
 801590e:	b2db      	uxtb	r3, r3
 8015910:	4619      	mov	r1, r3
 8015912:	6878      	ldr	r0, [r7, #4]
 8015914:	f7ff fed9 	bl	80156ca <USBD_CoreFindIF>
 8015918:	4603      	mov	r3, r0
 801591a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801591c:	7bbb      	ldrb	r3, [r7, #14]
 801591e:	2bff      	cmp	r3, #255	; 0xff
 8015920:	d01d      	beq.n	801595e <USBD_StdItfReq+0x92>
 8015922:	7bbb      	ldrb	r3, [r7, #14]
 8015924:	2b00      	cmp	r3, #0
 8015926:	d11a      	bne.n	801595e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8015928:	7bba      	ldrb	r2, [r7, #14]
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	32ae      	adds	r2, #174	; 0xae
 801592e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015932:	689b      	ldr	r3, [r3, #8]
 8015934:	2b00      	cmp	r3, #0
 8015936:	d00f      	beq.n	8015958 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8015938:	7bba      	ldrb	r2, [r7, #14]
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015940:	7bba      	ldrb	r2, [r7, #14]
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	32ae      	adds	r2, #174	; 0xae
 8015946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801594a:	689b      	ldr	r3, [r3, #8]
 801594c:	6839      	ldr	r1, [r7, #0]
 801594e:	6878      	ldr	r0, [r7, #4]
 8015950:	4798      	blx	r3
 8015952:	4603      	mov	r3, r0
 8015954:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015956:	e004      	b.n	8015962 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8015958:	2303      	movs	r3, #3
 801595a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801595c:	e001      	b.n	8015962 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801595e:	2303      	movs	r3, #3
 8015960:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8015962:	683b      	ldr	r3, [r7, #0]
 8015964:	88db      	ldrh	r3, [r3, #6]
 8015966:	2b00      	cmp	r3, #0
 8015968:	d110      	bne.n	801598c <USBD_StdItfReq+0xc0>
 801596a:	7bfb      	ldrb	r3, [r7, #15]
 801596c:	2b00      	cmp	r3, #0
 801596e:	d10d      	bne.n	801598c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8015970:	6878      	ldr	r0, [r7, #4]
 8015972:	f000 fdc7 	bl	8016504 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8015976:	e009      	b.n	801598c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8015978:	6839      	ldr	r1, [r7, #0]
 801597a:	6878      	ldr	r0, [r7, #4]
 801597c:	f000 fcf7 	bl	801636e <USBD_CtlError>
          break;
 8015980:	e004      	b.n	801598c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8015982:	6839      	ldr	r1, [r7, #0]
 8015984:	6878      	ldr	r0, [r7, #4]
 8015986:	f000 fcf2 	bl	801636e <USBD_CtlError>
          break;
 801598a:	e000      	b.n	801598e <USBD_StdItfReq+0xc2>
          break;
 801598c:	bf00      	nop
      }
      break;
 801598e:	e004      	b.n	801599a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8015990:	6839      	ldr	r1, [r7, #0]
 8015992:	6878      	ldr	r0, [r7, #4]
 8015994:	f000 fceb 	bl	801636e <USBD_CtlError>
      break;
 8015998:	bf00      	nop
  }

  return ret;
 801599a:	7bfb      	ldrb	r3, [r7, #15]
}
 801599c:	4618      	mov	r0, r3
 801599e:	3710      	adds	r7, #16
 80159a0:	46bd      	mov	sp, r7
 80159a2:	bd80      	pop	{r7, pc}

080159a4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80159a4:	b580      	push	{r7, lr}
 80159a6:	b084      	sub	sp, #16
 80159a8:	af00      	add	r7, sp, #0
 80159aa:	6078      	str	r0, [r7, #4]
 80159ac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80159ae:	2300      	movs	r3, #0
 80159b0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80159b2:	683b      	ldr	r3, [r7, #0]
 80159b4:	889b      	ldrh	r3, [r3, #4]
 80159b6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80159b8:	683b      	ldr	r3, [r7, #0]
 80159ba:	781b      	ldrb	r3, [r3, #0]
 80159bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80159c0:	2b40      	cmp	r3, #64	; 0x40
 80159c2:	d007      	beq.n	80159d4 <USBD_StdEPReq+0x30>
 80159c4:	2b40      	cmp	r3, #64	; 0x40
 80159c6:	f200 817f 	bhi.w	8015cc8 <USBD_StdEPReq+0x324>
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d02a      	beq.n	8015a24 <USBD_StdEPReq+0x80>
 80159ce:	2b20      	cmp	r3, #32
 80159d0:	f040 817a 	bne.w	8015cc8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80159d4:	7bbb      	ldrb	r3, [r7, #14]
 80159d6:	4619      	mov	r1, r3
 80159d8:	6878      	ldr	r0, [r7, #4]
 80159da:	f7ff fe83 	bl	80156e4 <USBD_CoreFindEP>
 80159de:	4603      	mov	r3, r0
 80159e0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80159e2:	7b7b      	ldrb	r3, [r7, #13]
 80159e4:	2bff      	cmp	r3, #255	; 0xff
 80159e6:	f000 8174 	beq.w	8015cd2 <USBD_StdEPReq+0x32e>
 80159ea:	7b7b      	ldrb	r3, [r7, #13]
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	f040 8170 	bne.w	8015cd2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80159f2:	7b7a      	ldrb	r2, [r7, #13]
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80159fa:	7b7a      	ldrb	r2, [r7, #13]
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	32ae      	adds	r2, #174	; 0xae
 8015a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a04:	689b      	ldr	r3, [r3, #8]
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	f000 8163 	beq.w	8015cd2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8015a0c:	7b7a      	ldrb	r2, [r7, #13]
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	32ae      	adds	r2, #174	; 0xae
 8015a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a16:	689b      	ldr	r3, [r3, #8]
 8015a18:	6839      	ldr	r1, [r7, #0]
 8015a1a:	6878      	ldr	r0, [r7, #4]
 8015a1c:	4798      	blx	r3
 8015a1e:	4603      	mov	r3, r0
 8015a20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8015a22:	e156      	b.n	8015cd2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015a24:	683b      	ldr	r3, [r7, #0]
 8015a26:	785b      	ldrb	r3, [r3, #1]
 8015a28:	2b03      	cmp	r3, #3
 8015a2a:	d008      	beq.n	8015a3e <USBD_StdEPReq+0x9a>
 8015a2c:	2b03      	cmp	r3, #3
 8015a2e:	f300 8145 	bgt.w	8015cbc <USBD_StdEPReq+0x318>
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	f000 809b 	beq.w	8015b6e <USBD_StdEPReq+0x1ca>
 8015a38:	2b01      	cmp	r3, #1
 8015a3a:	d03c      	beq.n	8015ab6 <USBD_StdEPReq+0x112>
 8015a3c:	e13e      	b.n	8015cbc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a44:	b2db      	uxtb	r3, r3
 8015a46:	2b02      	cmp	r3, #2
 8015a48:	d002      	beq.n	8015a50 <USBD_StdEPReq+0xac>
 8015a4a:	2b03      	cmp	r3, #3
 8015a4c:	d016      	beq.n	8015a7c <USBD_StdEPReq+0xd8>
 8015a4e:	e02c      	b.n	8015aaa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015a50:	7bbb      	ldrb	r3, [r7, #14]
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d00d      	beq.n	8015a72 <USBD_StdEPReq+0xce>
 8015a56:	7bbb      	ldrb	r3, [r7, #14]
 8015a58:	2b80      	cmp	r3, #128	; 0x80
 8015a5a:	d00a      	beq.n	8015a72 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015a5c:	7bbb      	ldrb	r3, [r7, #14]
 8015a5e:	4619      	mov	r1, r3
 8015a60:	6878      	ldr	r0, [r7, #4]
 8015a62:	f001 f9d9 	bl	8016e18 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015a66:	2180      	movs	r1, #128	; 0x80
 8015a68:	6878      	ldr	r0, [r7, #4]
 8015a6a:	f001 f9d5 	bl	8016e18 <USBD_LL_StallEP>
 8015a6e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015a70:	e020      	b.n	8015ab4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8015a72:	6839      	ldr	r1, [r7, #0]
 8015a74:	6878      	ldr	r0, [r7, #4]
 8015a76:	f000 fc7a 	bl	801636e <USBD_CtlError>
              break;
 8015a7a:	e01b      	b.n	8015ab4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015a7c:	683b      	ldr	r3, [r7, #0]
 8015a7e:	885b      	ldrh	r3, [r3, #2]
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d10e      	bne.n	8015aa2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015a84:	7bbb      	ldrb	r3, [r7, #14]
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	d00b      	beq.n	8015aa2 <USBD_StdEPReq+0xfe>
 8015a8a:	7bbb      	ldrb	r3, [r7, #14]
 8015a8c:	2b80      	cmp	r3, #128	; 0x80
 8015a8e:	d008      	beq.n	8015aa2 <USBD_StdEPReq+0xfe>
 8015a90:	683b      	ldr	r3, [r7, #0]
 8015a92:	88db      	ldrh	r3, [r3, #6]
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d104      	bne.n	8015aa2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8015a98:	7bbb      	ldrb	r3, [r7, #14]
 8015a9a:	4619      	mov	r1, r3
 8015a9c:	6878      	ldr	r0, [r7, #4]
 8015a9e:	f001 f9bb 	bl	8016e18 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8015aa2:	6878      	ldr	r0, [r7, #4]
 8015aa4:	f000 fd2e 	bl	8016504 <USBD_CtlSendStatus>

              break;
 8015aa8:	e004      	b.n	8015ab4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8015aaa:	6839      	ldr	r1, [r7, #0]
 8015aac:	6878      	ldr	r0, [r7, #4]
 8015aae:	f000 fc5e 	bl	801636e <USBD_CtlError>
              break;
 8015ab2:	bf00      	nop
          }
          break;
 8015ab4:	e107      	b.n	8015cc6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015abc:	b2db      	uxtb	r3, r3
 8015abe:	2b02      	cmp	r3, #2
 8015ac0:	d002      	beq.n	8015ac8 <USBD_StdEPReq+0x124>
 8015ac2:	2b03      	cmp	r3, #3
 8015ac4:	d016      	beq.n	8015af4 <USBD_StdEPReq+0x150>
 8015ac6:	e04b      	b.n	8015b60 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015ac8:	7bbb      	ldrb	r3, [r7, #14]
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d00d      	beq.n	8015aea <USBD_StdEPReq+0x146>
 8015ace:	7bbb      	ldrb	r3, [r7, #14]
 8015ad0:	2b80      	cmp	r3, #128	; 0x80
 8015ad2:	d00a      	beq.n	8015aea <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015ad4:	7bbb      	ldrb	r3, [r7, #14]
 8015ad6:	4619      	mov	r1, r3
 8015ad8:	6878      	ldr	r0, [r7, #4]
 8015ada:	f001 f99d 	bl	8016e18 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015ade:	2180      	movs	r1, #128	; 0x80
 8015ae0:	6878      	ldr	r0, [r7, #4]
 8015ae2:	f001 f999 	bl	8016e18 <USBD_LL_StallEP>
 8015ae6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015ae8:	e040      	b.n	8015b6c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8015aea:	6839      	ldr	r1, [r7, #0]
 8015aec:	6878      	ldr	r0, [r7, #4]
 8015aee:	f000 fc3e 	bl	801636e <USBD_CtlError>
              break;
 8015af2:	e03b      	b.n	8015b6c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015af4:	683b      	ldr	r3, [r7, #0]
 8015af6:	885b      	ldrh	r3, [r3, #2]
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d136      	bne.n	8015b6a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015afc:	7bbb      	ldrb	r3, [r7, #14]
 8015afe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d004      	beq.n	8015b10 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015b06:	7bbb      	ldrb	r3, [r7, #14]
 8015b08:	4619      	mov	r1, r3
 8015b0a:	6878      	ldr	r0, [r7, #4]
 8015b0c:	f001 f9a3 	bl	8016e56 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8015b10:	6878      	ldr	r0, [r7, #4]
 8015b12:	f000 fcf7 	bl	8016504 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8015b16:	7bbb      	ldrb	r3, [r7, #14]
 8015b18:	4619      	mov	r1, r3
 8015b1a:	6878      	ldr	r0, [r7, #4]
 8015b1c:	f7ff fde2 	bl	80156e4 <USBD_CoreFindEP>
 8015b20:	4603      	mov	r3, r0
 8015b22:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015b24:	7b7b      	ldrb	r3, [r7, #13]
 8015b26:	2bff      	cmp	r3, #255	; 0xff
 8015b28:	d01f      	beq.n	8015b6a <USBD_StdEPReq+0x1c6>
 8015b2a:	7b7b      	ldrb	r3, [r7, #13]
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	d11c      	bne.n	8015b6a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8015b30:	7b7a      	ldrb	r2, [r7, #13]
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8015b38:	7b7a      	ldrb	r2, [r7, #13]
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	32ae      	adds	r2, #174	; 0xae
 8015b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b42:	689b      	ldr	r3, [r3, #8]
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d010      	beq.n	8015b6a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015b48:	7b7a      	ldrb	r2, [r7, #13]
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	32ae      	adds	r2, #174	; 0xae
 8015b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b52:	689b      	ldr	r3, [r3, #8]
 8015b54:	6839      	ldr	r1, [r7, #0]
 8015b56:	6878      	ldr	r0, [r7, #4]
 8015b58:	4798      	blx	r3
 8015b5a:	4603      	mov	r3, r0
 8015b5c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8015b5e:	e004      	b.n	8015b6a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8015b60:	6839      	ldr	r1, [r7, #0]
 8015b62:	6878      	ldr	r0, [r7, #4]
 8015b64:	f000 fc03 	bl	801636e <USBD_CtlError>
              break;
 8015b68:	e000      	b.n	8015b6c <USBD_StdEPReq+0x1c8>
              break;
 8015b6a:	bf00      	nop
          }
          break;
 8015b6c:	e0ab      	b.n	8015cc6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015b74:	b2db      	uxtb	r3, r3
 8015b76:	2b02      	cmp	r3, #2
 8015b78:	d002      	beq.n	8015b80 <USBD_StdEPReq+0x1dc>
 8015b7a:	2b03      	cmp	r3, #3
 8015b7c:	d032      	beq.n	8015be4 <USBD_StdEPReq+0x240>
 8015b7e:	e097      	b.n	8015cb0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015b80:	7bbb      	ldrb	r3, [r7, #14]
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	d007      	beq.n	8015b96 <USBD_StdEPReq+0x1f2>
 8015b86:	7bbb      	ldrb	r3, [r7, #14]
 8015b88:	2b80      	cmp	r3, #128	; 0x80
 8015b8a:	d004      	beq.n	8015b96 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8015b8c:	6839      	ldr	r1, [r7, #0]
 8015b8e:	6878      	ldr	r0, [r7, #4]
 8015b90:	f000 fbed 	bl	801636e <USBD_CtlError>
                break;
 8015b94:	e091      	b.n	8015cba <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015b96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	da0b      	bge.n	8015bb6 <USBD_StdEPReq+0x212>
 8015b9e:	7bbb      	ldrb	r3, [r7, #14]
 8015ba0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015ba4:	4613      	mov	r3, r2
 8015ba6:	009b      	lsls	r3, r3, #2
 8015ba8:	4413      	add	r3, r2
 8015baa:	009b      	lsls	r3, r3, #2
 8015bac:	3310      	adds	r3, #16
 8015bae:	687a      	ldr	r2, [r7, #4]
 8015bb0:	4413      	add	r3, r2
 8015bb2:	3304      	adds	r3, #4
 8015bb4:	e00b      	b.n	8015bce <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015bb6:	7bbb      	ldrb	r3, [r7, #14]
 8015bb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015bbc:	4613      	mov	r3, r2
 8015bbe:	009b      	lsls	r3, r3, #2
 8015bc0:	4413      	add	r3, r2
 8015bc2:	009b      	lsls	r3, r3, #2
 8015bc4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015bc8:	687a      	ldr	r2, [r7, #4]
 8015bca:	4413      	add	r3, r2
 8015bcc:	3304      	adds	r3, #4
 8015bce:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015bd0:	68bb      	ldr	r3, [r7, #8]
 8015bd2:	2200      	movs	r2, #0
 8015bd4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015bd6:	68bb      	ldr	r3, [r7, #8]
 8015bd8:	2202      	movs	r2, #2
 8015bda:	4619      	mov	r1, r3
 8015bdc:	6878      	ldr	r0, [r7, #4]
 8015bde:	f000 fc37 	bl	8016450 <USBD_CtlSendData>
              break;
 8015be2:	e06a      	b.n	8015cba <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015be4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	da11      	bge.n	8015c10 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015bec:	7bbb      	ldrb	r3, [r7, #14]
 8015bee:	f003 020f 	and.w	r2, r3, #15
 8015bf2:	6879      	ldr	r1, [r7, #4]
 8015bf4:	4613      	mov	r3, r2
 8015bf6:	009b      	lsls	r3, r3, #2
 8015bf8:	4413      	add	r3, r2
 8015bfa:	009b      	lsls	r3, r3, #2
 8015bfc:	440b      	add	r3, r1
 8015bfe:	3324      	adds	r3, #36	; 0x24
 8015c00:	881b      	ldrh	r3, [r3, #0]
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d117      	bne.n	8015c36 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015c06:	6839      	ldr	r1, [r7, #0]
 8015c08:	6878      	ldr	r0, [r7, #4]
 8015c0a:	f000 fbb0 	bl	801636e <USBD_CtlError>
                  break;
 8015c0e:	e054      	b.n	8015cba <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015c10:	7bbb      	ldrb	r3, [r7, #14]
 8015c12:	f003 020f 	and.w	r2, r3, #15
 8015c16:	6879      	ldr	r1, [r7, #4]
 8015c18:	4613      	mov	r3, r2
 8015c1a:	009b      	lsls	r3, r3, #2
 8015c1c:	4413      	add	r3, r2
 8015c1e:	009b      	lsls	r3, r3, #2
 8015c20:	440b      	add	r3, r1
 8015c22:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015c26:	881b      	ldrh	r3, [r3, #0]
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	d104      	bne.n	8015c36 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015c2c:	6839      	ldr	r1, [r7, #0]
 8015c2e:	6878      	ldr	r0, [r7, #4]
 8015c30:	f000 fb9d 	bl	801636e <USBD_CtlError>
                  break;
 8015c34:	e041      	b.n	8015cba <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015c36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015c3a:	2b00      	cmp	r3, #0
 8015c3c:	da0b      	bge.n	8015c56 <USBD_StdEPReq+0x2b2>
 8015c3e:	7bbb      	ldrb	r3, [r7, #14]
 8015c40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015c44:	4613      	mov	r3, r2
 8015c46:	009b      	lsls	r3, r3, #2
 8015c48:	4413      	add	r3, r2
 8015c4a:	009b      	lsls	r3, r3, #2
 8015c4c:	3310      	adds	r3, #16
 8015c4e:	687a      	ldr	r2, [r7, #4]
 8015c50:	4413      	add	r3, r2
 8015c52:	3304      	adds	r3, #4
 8015c54:	e00b      	b.n	8015c6e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015c56:	7bbb      	ldrb	r3, [r7, #14]
 8015c58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015c5c:	4613      	mov	r3, r2
 8015c5e:	009b      	lsls	r3, r3, #2
 8015c60:	4413      	add	r3, r2
 8015c62:	009b      	lsls	r3, r3, #2
 8015c64:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015c68:	687a      	ldr	r2, [r7, #4]
 8015c6a:	4413      	add	r3, r2
 8015c6c:	3304      	adds	r3, #4
 8015c6e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015c70:	7bbb      	ldrb	r3, [r7, #14]
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d002      	beq.n	8015c7c <USBD_StdEPReq+0x2d8>
 8015c76:	7bbb      	ldrb	r3, [r7, #14]
 8015c78:	2b80      	cmp	r3, #128	; 0x80
 8015c7a:	d103      	bne.n	8015c84 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8015c7c:	68bb      	ldr	r3, [r7, #8]
 8015c7e:	2200      	movs	r2, #0
 8015c80:	601a      	str	r2, [r3, #0]
 8015c82:	e00e      	b.n	8015ca2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015c84:	7bbb      	ldrb	r3, [r7, #14]
 8015c86:	4619      	mov	r1, r3
 8015c88:	6878      	ldr	r0, [r7, #4]
 8015c8a:	f001 f903 	bl	8016e94 <USBD_LL_IsStallEP>
 8015c8e:	4603      	mov	r3, r0
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d003      	beq.n	8015c9c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8015c94:	68bb      	ldr	r3, [r7, #8]
 8015c96:	2201      	movs	r2, #1
 8015c98:	601a      	str	r2, [r3, #0]
 8015c9a:	e002      	b.n	8015ca2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8015c9c:	68bb      	ldr	r3, [r7, #8]
 8015c9e:	2200      	movs	r2, #0
 8015ca0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015ca2:	68bb      	ldr	r3, [r7, #8]
 8015ca4:	2202      	movs	r2, #2
 8015ca6:	4619      	mov	r1, r3
 8015ca8:	6878      	ldr	r0, [r7, #4]
 8015caa:	f000 fbd1 	bl	8016450 <USBD_CtlSendData>
              break;
 8015cae:	e004      	b.n	8015cba <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8015cb0:	6839      	ldr	r1, [r7, #0]
 8015cb2:	6878      	ldr	r0, [r7, #4]
 8015cb4:	f000 fb5b 	bl	801636e <USBD_CtlError>
              break;
 8015cb8:	bf00      	nop
          }
          break;
 8015cba:	e004      	b.n	8015cc6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8015cbc:	6839      	ldr	r1, [r7, #0]
 8015cbe:	6878      	ldr	r0, [r7, #4]
 8015cc0:	f000 fb55 	bl	801636e <USBD_CtlError>
          break;
 8015cc4:	bf00      	nop
      }
      break;
 8015cc6:	e005      	b.n	8015cd4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8015cc8:	6839      	ldr	r1, [r7, #0]
 8015cca:	6878      	ldr	r0, [r7, #4]
 8015ccc:	f000 fb4f 	bl	801636e <USBD_CtlError>
      break;
 8015cd0:	e000      	b.n	8015cd4 <USBD_StdEPReq+0x330>
      break;
 8015cd2:	bf00      	nop
  }

  return ret;
 8015cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8015cd6:	4618      	mov	r0, r3
 8015cd8:	3710      	adds	r7, #16
 8015cda:	46bd      	mov	sp, r7
 8015cdc:	bd80      	pop	{r7, pc}
	...

08015ce0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015ce0:	b580      	push	{r7, lr}
 8015ce2:	b084      	sub	sp, #16
 8015ce4:	af00      	add	r7, sp, #0
 8015ce6:	6078      	str	r0, [r7, #4]
 8015ce8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015cea:	2300      	movs	r3, #0
 8015cec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015cee:	2300      	movs	r3, #0
 8015cf0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015cf2:	2300      	movs	r3, #0
 8015cf4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015cf6:	683b      	ldr	r3, [r7, #0]
 8015cf8:	885b      	ldrh	r3, [r3, #2]
 8015cfa:	0a1b      	lsrs	r3, r3, #8
 8015cfc:	b29b      	uxth	r3, r3
 8015cfe:	3b01      	subs	r3, #1
 8015d00:	2b06      	cmp	r3, #6
 8015d02:	f200 8128 	bhi.w	8015f56 <USBD_GetDescriptor+0x276>
 8015d06:	a201      	add	r2, pc, #4	; (adr r2, 8015d0c <USBD_GetDescriptor+0x2c>)
 8015d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d0c:	08015d29 	.word	0x08015d29
 8015d10:	08015d41 	.word	0x08015d41
 8015d14:	08015d81 	.word	0x08015d81
 8015d18:	08015f57 	.word	0x08015f57
 8015d1c:	08015f57 	.word	0x08015f57
 8015d20:	08015ef7 	.word	0x08015ef7
 8015d24:	08015f23 	.word	0x08015f23
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d2e:	681b      	ldr	r3, [r3, #0]
 8015d30:	687a      	ldr	r2, [r7, #4]
 8015d32:	7c12      	ldrb	r2, [r2, #16]
 8015d34:	f107 0108 	add.w	r1, r7, #8
 8015d38:	4610      	mov	r0, r2
 8015d3a:	4798      	blx	r3
 8015d3c:	60f8      	str	r0, [r7, #12]
      break;
 8015d3e:	e112      	b.n	8015f66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	7c1b      	ldrb	r3, [r3, #16]
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	d10d      	bne.n	8015d64 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015d50:	f107 0208 	add.w	r2, r7, #8
 8015d54:	4610      	mov	r0, r2
 8015d56:	4798      	blx	r3
 8015d58:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015d5a:	68fb      	ldr	r3, [r7, #12]
 8015d5c:	3301      	adds	r3, #1
 8015d5e:	2202      	movs	r2, #2
 8015d60:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8015d62:	e100      	b.n	8015f66 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d6c:	f107 0208 	add.w	r2, r7, #8
 8015d70:	4610      	mov	r0, r2
 8015d72:	4798      	blx	r3
 8015d74:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015d76:	68fb      	ldr	r3, [r7, #12]
 8015d78:	3301      	adds	r3, #1
 8015d7a:	2202      	movs	r2, #2
 8015d7c:	701a      	strb	r2, [r3, #0]
      break;
 8015d7e:	e0f2      	b.n	8015f66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015d80:	683b      	ldr	r3, [r7, #0]
 8015d82:	885b      	ldrh	r3, [r3, #2]
 8015d84:	b2db      	uxtb	r3, r3
 8015d86:	2b05      	cmp	r3, #5
 8015d88:	f200 80ac 	bhi.w	8015ee4 <USBD_GetDescriptor+0x204>
 8015d8c:	a201      	add	r2, pc, #4	; (adr r2, 8015d94 <USBD_GetDescriptor+0xb4>)
 8015d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d92:	bf00      	nop
 8015d94:	08015dad 	.word	0x08015dad
 8015d98:	08015de1 	.word	0x08015de1
 8015d9c:	08015e15 	.word	0x08015e15
 8015da0:	08015e49 	.word	0x08015e49
 8015da4:	08015e7d 	.word	0x08015e7d
 8015da8:	08015eb1 	.word	0x08015eb1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015db2:	685b      	ldr	r3, [r3, #4]
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d00b      	beq.n	8015dd0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015dbe:	685b      	ldr	r3, [r3, #4]
 8015dc0:	687a      	ldr	r2, [r7, #4]
 8015dc2:	7c12      	ldrb	r2, [r2, #16]
 8015dc4:	f107 0108 	add.w	r1, r7, #8
 8015dc8:	4610      	mov	r0, r2
 8015dca:	4798      	blx	r3
 8015dcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015dce:	e091      	b.n	8015ef4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015dd0:	6839      	ldr	r1, [r7, #0]
 8015dd2:	6878      	ldr	r0, [r7, #4]
 8015dd4:	f000 facb 	bl	801636e <USBD_CtlError>
            err++;
 8015dd8:	7afb      	ldrb	r3, [r7, #11]
 8015dda:	3301      	adds	r3, #1
 8015ddc:	72fb      	strb	r3, [r7, #11]
          break;
 8015dde:	e089      	b.n	8015ef4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015de6:	689b      	ldr	r3, [r3, #8]
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d00b      	beq.n	8015e04 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015df2:	689b      	ldr	r3, [r3, #8]
 8015df4:	687a      	ldr	r2, [r7, #4]
 8015df6:	7c12      	ldrb	r2, [r2, #16]
 8015df8:	f107 0108 	add.w	r1, r7, #8
 8015dfc:	4610      	mov	r0, r2
 8015dfe:	4798      	blx	r3
 8015e00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e02:	e077      	b.n	8015ef4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015e04:	6839      	ldr	r1, [r7, #0]
 8015e06:	6878      	ldr	r0, [r7, #4]
 8015e08:	f000 fab1 	bl	801636e <USBD_CtlError>
            err++;
 8015e0c:	7afb      	ldrb	r3, [r7, #11]
 8015e0e:	3301      	adds	r3, #1
 8015e10:	72fb      	strb	r3, [r7, #11]
          break;
 8015e12:	e06f      	b.n	8015ef4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e1a:	68db      	ldr	r3, [r3, #12]
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d00b      	beq.n	8015e38 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e26:	68db      	ldr	r3, [r3, #12]
 8015e28:	687a      	ldr	r2, [r7, #4]
 8015e2a:	7c12      	ldrb	r2, [r2, #16]
 8015e2c:	f107 0108 	add.w	r1, r7, #8
 8015e30:	4610      	mov	r0, r2
 8015e32:	4798      	blx	r3
 8015e34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e36:	e05d      	b.n	8015ef4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015e38:	6839      	ldr	r1, [r7, #0]
 8015e3a:	6878      	ldr	r0, [r7, #4]
 8015e3c:	f000 fa97 	bl	801636e <USBD_CtlError>
            err++;
 8015e40:	7afb      	ldrb	r3, [r7, #11]
 8015e42:	3301      	adds	r3, #1
 8015e44:	72fb      	strb	r3, [r7, #11]
          break;
 8015e46:	e055      	b.n	8015ef4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e4e:	691b      	ldr	r3, [r3, #16]
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d00b      	beq.n	8015e6c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e5a:	691b      	ldr	r3, [r3, #16]
 8015e5c:	687a      	ldr	r2, [r7, #4]
 8015e5e:	7c12      	ldrb	r2, [r2, #16]
 8015e60:	f107 0108 	add.w	r1, r7, #8
 8015e64:	4610      	mov	r0, r2
 8015e66:	4798      	blx	r3
 8015e68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e6a:	e043      	b.n	8015ef4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015e6c:	6839      	ldr	r1, [r7, #0]
 8015e6e:	6878      	ldr	r0, [r7, #4]
 8015e70:	f000 fa7d 	bl	801636e <USBD_CtlError>
            err++;
 8015e74:	7afb      	ldrb	r3, [r7, #11]
 8015e76:	3301      	adds	r3, #1
 8015e78:	72fb      	strb	r3, [r7, #11]
          break;
 8015e7a:	e03b      	b.n	8015ef4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e82:	695b      	ldr	r3, [r3, #20]
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d00b      	beq.n	8015ea0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015e8e:	695b      	ldr	r3, [r3, #20]
 8015e90:	687a      	ldr	r2, [r7, #4]
 8015e92:	7c12      	ldrb	r2, [r2, #16]
 8015e94:	f107 0108 	add.w	r1, r7, #8
 8015e98:	4610      	mov	r0, r2
 8015e9a:	4798      	blx	r3
 8015e9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015e9e:	e029      	b.n	8015ef4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015ea0:	6839      	ldr	r1, [r7, #0]
 8015ea2:	6878      	ldr	r0, [r7, #4]
 8015ea4:	f000 fa63 	bl	801636e <USBD_CtlError>
            err++;
 8015ea8:	7afb      	ldrb	r3, [r7, #11]
 8015eaa:	3301      	adds	r3, #1
 8015eac:	72fb      	strb	r3, [r7, #11]
          break;
 8015eae:	e021      	b.n	8015ef4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015eb6:	699b      	ldr	r3, [r3, #24]
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d00b      	beq.n	8015ed4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015ec2:	699b      	ldr	r3, [r3, #24]
 8015ec4:	687a      	ldr	r2, [r7, #4]
 8015ec6:	7c12      	ldrb	r2, [r2, #16]
 8015ec8:	f107 0108 	add.w	r1, r7, #8
 8015ecc:	4610      	mov	r0, r2
 8015ece:	4798      	blx	r3
 8015ed0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015ed2:	e00f      	b.n	8015ef4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015ed4:	6839      	ldr	r1, [r7, #0]
 8015ed6:	6878      	ldr	r0, [r7, #4]
 8015ed8:	f000 fa49 	bl	801636e <USBD_CtlError>
            err++;
 8015edc:	7afb      	ldrb	r3, [r7, #11]
 8015ede:	3301      	adds	r3, #1
 8015ee0:	72fb      	strb	r3, [r7, #11]
          break;
 8015ee2:	e007      	b.n	8015ef4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015ee4:	6839      	ldr	r1, [r7, #0]
 8015ee6:	6878      	ldr	r0, [r7, #4]
 8015ee8:	f000 fa41 	bl	801636e <USBD_CtlError>
          err++;
 8015eec:	7afb      	ldrb	r3, [r7, #11]
 8015eee:	3301      	adds	r3, #1
 8015ef0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8015ef2:	bf00      	nop
      }
      break;
 8015ef4:	e037      	b.n	8015f66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	7c1b      	ldrb	r3, [r3, #16]
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d109      	bne.n	8015f12 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015f06:	f107 0208 	add.w	r2, r7, #8
 8015f0a:	4610      	mov	r0, r2
 8015f0c:	4798      	blx	r3
 8015f0e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015f10:	e029      	b.n	8015f66 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015f12:	6839      	ldr	r1, [r7, #0]
 8015f14:	6878      	ldr	r0, [r7, #4]
 8015f16:	f000 fa2a 	bl	801636e <USBD_CtlError>
        err++;
 8015f1a:	7afb      	ldrb	r3, [r7, #11]
 8015f1c:	3301      	adds	r3, #1
 8015f1e:	72fb      	strb	r3, [r7, #11]
      break;
 8015f20:	e021      	b.n	8015f66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	7c1b      	ldrb	r3, [r3, #16]
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d10d      	bne.n	8015f46 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f32:	f107 0208 	add.w	r2, r7, #8
 8015f36:	4610      	mov	r0, r2
 8015f38:	4798      	blx	r3
 8015f3a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015f3c:	68fb      	ldr	r3, [r7, #12]
 8015f3e:	3301      	adds	r3, #1
 8015f40:	2207      	movs	r2, #7
 8015f42:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015f44:	e00f      	b.n	8015f66 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015f46:	6839      	ldr	r1, [r7, #0]
 8015f48:	6878      	ldr	r0, [r7, #4]
 8015f4a:	f000 fa10 	bl	801636e <USBD_CtlError>
        err++;
 8015f4e:	7afb      	ldrb	r3, [r7, #11]
 8015f50:	3301      	adds	r3, #1
 8015f52:	72fb      	strb	r3, [r7, #11]
      break;
 8015f54:	e007      	b.n	8015f66 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8015f56:	6839      	ldr	r1, [r7, #0]
 8015f58:	6878      	ldr	r0, [r7, #4]
 8015f5a:	f000 fa08 	bl	801636e <USBD_CtlError>
      err++;
 8015f5e:	7afb      	ldrb	r3, [r7, #11]
 8015f60:	3301      	adds	r3, #1
 8015f62:	72fb      	strb	r3, [r7, #11]
      break;
 8015f64:	bf00      	nop
  }

  if (err != 0U)
 8015f66:	7afb      	ldrb	r3, [r7, #11]
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d11e      	bne.n	8015faa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8015f6c:	683b      	ldr	r3, [r7, #0]
 8015f6e:	88db      	ldrh	r3, [r3, #6]
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	d016      	beq.n	8015fa2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8015f74:	893b      	ldrh	r3, [r7, #8]
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d00e      	beq.n	8015f98 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8015f7a:	683b      	ldr	r3, [r7, #0]
 8015f7c:	88da      	ldrh	r2, [r3, #6]
 8015f7e:	893b      	ldrh	r3, [r7, #8]
 8015f80:	4293      	cmp	r3, r2
 8015f82:	bf28      	it	cs
 8015f84:	4613      	movcs	r3, r2
 8015f86:	b29b      	uxth	r3, r3
 8015f88:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8015f8a:	893b      	ldrh	r3, [r7, #8]
 8015f8c:	461a      	mov	r2, r3
 8015f8e:	68f9      	ldr	r1, [r7, #12]
 8015f90:	6878      	ldr	r0, [r7, #4]
 8015f92:	f000 fa5d 	bl	8016450 <USBD_CtlSendData>
 8015f96:	e009      	b.n	8015fac <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015f98:	6839      	ldr	r1, [r7, #0]
 8015f9a:	6878      	ldr	r0, [r7, #4]
 8015f9c:	f000 f9e7 	bl	801636e <USBD_CtlError>
 8015fa0:	e004      	b.n	8015fac <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8015fa2:	6878      	ldr	r0, [r7, #4]
 8015fa4:	f000 faae 	bl	8016504 <USBD_CtlSendStatus>
 8015fa8:	e000      	b.n	8015fac <USBD_GetDescriptor+0x2cc>
    return;
 8015faa:	bf00      	nop
  }
}
 8015fac:	3710      	adds	r7, #16
 8015fae:	46bd      	mov	sp, r7
 8015fb0:	bd80      	pop	{r7, pc}
 8015fb2:	bf00      	nop

08015fb4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015fb4:	b580      	push	{r7, lr}
 8015fb6:	b084      	sub	sp, #16
 8015fb8:	af00      	add	r7, sp, #0
 8015fba:	6078      	str	r0, [r7, #4]
 8015fbc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015fbe:	683b      	ldr	r3, [r7, #0]
 8015fc0:	889b      	ldrh	r3, [r3, #4]
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d131      	bne.n	801602a <USBD_SetAddress+0x76>
 8015fc6:	683b      	ldr	r3, [r7, #0]
 8015fc8:	88db      	ldrh	r3, [r3, #6]
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	d12d      	bne.n	801602a <USBD_SetAddress+0x76>
 8015fce:	683b      	ldr	r3, [r7, #0]
 8015fd0:	885b      	ldrh	r3, [r3, #2]
 8015fd2:	2b7f      	cmp	r3, #127	; 0x7f
 8015fd4:	d829      	bhi.n	801602a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015fd6:	683b      	ldr	r3, [r7, #0]
 8015fd8:	885b      	ldrh	r3, [r3, #2]
 8015fda:	b2db      	uxtb	r3, r3
 8015fdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015fe0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015fe8:	b2db      	uxtb	r3, r3
 8015fea:	2b03      	cmp	r3, #3
 8015fec:	d104      	bne.n	8015ff8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8015fee:	6839      	ldr	r1, [r7, #0]
 8015ff0:	6878      	ldr	r0, [r7, #4]
 8015ff2:	f000 f9bc 	bl	801636e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015ff6:	e01d      	b.n	8016034 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	7bfa      	ldrb	r2, [r7, #15]
 8015ffc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016000:	7bfb      	ldrb	r3, [r7, #15]
 8016002:	4619      	mov	r1, r3
 8016004:	6878      	ldr	r0, [r7, #4]
 8016006:	f000 ff71 	bl	8016eec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801600a:	6878      	ldr	r0, [r7, #4]
 801600c:	f000 fa7a 	bl	8016504 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8016010:	7bfb      	ldrb	r3, [r7, #15]
 8016012:	2b00      	cmp	r3, #0
 8016014:	d004      	beq.n	8016020 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	2202      	movs	r2, #2
 801601a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801601e:	e009      	b.n	8016034 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	2201      	movs	r2, #1
 8016024:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016028:	e004      	b.n	8016034 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801602a:	6839      	ldr	r1, [r7, #0]
 801602c:	6878      	ldr	r0, [r7, #4]
 801602e:	f000 f99e 	bl	801636e <USBD_CtlError>
  }
}
 8016032:	bf00      	nop
 8016034:	bf00      	nop
 8016036:	3710      	adds	r7, #16
 8016038:	46bd      	mov	sp, r7
 801603a:	bd80      	pop	{r7, pc}

0801603c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801603c:	b580      	push	{r7, lr}
 801603e:	b084      	sub	sp, #16
 8016040:	af00      	add	r7, sp, #0
 8016042:	6078      	str	r0, [r7, #4]
 8016044:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016046:	2300      	movs	r3, #0
 8016048:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801604a:	683b      	ldr	r3, [r7, #0]
 801604c:	885b      	ldrh	r3, [r3, #2]
 801604e:	b2da      	uxtb	r2, r3
 8016050:	4b4e      	ldr	r3, [pc, #312]	; (801618c <USBD_SetConfig+0x150>)
 8016052:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8016054:	4b4d      	ldr	r3, [pc, #308]	; (801618c <USBD_SetConfig+0x150>)
 8016056:	781b      	ldrb	r3, [r3, #0]
 8016058:	2b01      	cmp	r3, #1
 801605a:	d905      	bls.n	8016068 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801605c:	6839      	ldr	r1, [r7, #0]
 801605e:	6878      	ldr	r0, [r7, #4]
 8016060:	f000 f985 	bl	801636e <USBD_CtlError>
    return USBD_FAIL;
 8016064:	2303      	movs	r3, #3
 8016066:	e08c      	b.n	8016182 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801606e:	b2db      	uxtb	r3, r3
 8016070:	2b02      	cmp	r3, #2
 8016072:	d002      	beq.n	801607a <USBD_SetConfig+0x3e>
 8016074:	2b03      	cmp	r3, #3
 8016076:	d029      	beq.n	80160cc <USBD_SetConfig+0x90>
 8016078:	e075      	b.n	8016166 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801607a:	4b44      	ldr	r3, [pc, #272]	; (801618c <USBD_SetConfig+0x150>)
 801607c:	781b      	ldrb	r3, [r3, #0]
 801607e:	2b00      	cmp	r3, #0
 8016080:	d020      	beq.n	80160c4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8016082:	4b42      	ldr	r3, [pc, #264]	; (801618c <USBD_SetConfig+0x150>)
 8016084:	781b      	ldrb	r3, [r3, #0]
 8016086:	461a      	mov	r2, r3
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801608c:	4b3f      	ldr	r3, [pc, #252]	; (801618c <USBD_SetConfig+0x150>)
 801608e:	781b      	ldrb	r3, [r3, #0]
 8016090:	4619      	mov	r1, r3
 8016092:	6878      	ldr	r0, [r7, #4]
 8016094:	f7fe ffe1 	bl	801505a <USBD_SetClassConfig>
 8016098:	4603      	mov	r3, r0
 801609a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801609c:	7bfb      	ldrb	r3, [r7, #15]
 801609e:	2b00      	cmp	r3, #0
 80160a0:	d008      	beq.n	80160b4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80160a2:	6839      	ldr	r1, [r7, #0]
 80160a4:	6878      	ldr	r0, [r7, #4]
 80160a6:	f000 f962 	bl	801636e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	2202      	movs	r2, #2
 80160ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80160b2:	e065      	b.n	8016180 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80160b4:	6878      	ldr	r0, [r7, #4]
 80160b6:	f000 fa25 	bl	8016504 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	2203      	movs	r2, #3
 80160be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80160c2:	e05d      	b.n	8016180 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80160c4:	6878      	ldr	r0, [r7, #4]
 80160c6:	f000 fa1d 	bl	8016504 <USBD_CtlSendStatus>
      break;
 80160ca:	e059      	b.n	8016180 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80160cc:	4b2f      	ldr	r3, [pc, #188]	; (801618c <USBD_SetConfig+0x150>)
 80160ce:	781b      	ldrb	r3, [r3, #0]
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d112      	bne.n	80160fa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	2202      	movs	r2, #2
 80160d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80160dc:	4b2b      	ldr	r3, [pc, #172]	; (801618c <USBD_SetConfig+0x150>)
 80160de:	781b      	ldrb	r3, [r3, #0]
 80160e0:	461a      	mov	r2, r3
 80160e2:	687b      	ldr	r3, [r7, #4]
 80160e4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80160e6:	4b29      	ldr	r3, [pc, #164]	; (801618c <USBD_SetConfig+0x150>)
 80160e8:	781b      	ldrb	r3, [r3, #0]
 80160ea:	4619      	mov	r1, r3
 80160ec:	6878      	ldr	r0, [r7, #4]
 80160ee:	f7fe ffd0 	bl	8015092 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80160f2:	6878      	ldr	r0, [r7, #4]
 80160f4:	f000 fa06 	bl	8016504 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80160f8:	e042      	b.n	8016180 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80160fa:	4b24      	ldr	r3, [pc, #144]	; (801618c <USBD_SetConfig+0x150>)
 80160fc:	781b      	ldrb	r3, [r3, #0]
 80160fe:	461a      	mov	r2, r3
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	685b      	ldr	r3, [r3, #4]
 8016104:	429a      	cmp	r2, r3
 8016106:	d02a      	beq.n	801615e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	685b      	ldr	r3, [r3, #4]
 801610c:	b2db      	uxtb	r3, r3
 801610e:	4619      	mov	r1, r3
 8016110:	6878      	ldr	r0, [r7, #4]
 8016112:	f7fe ffbe 	bl	8015092 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8016116:	4b1d      	ldr	r3, [pc, #116]	; (801618c <USBD_SetConfig+0x150>)
 8016118:	781b      	ldrb	r3, [r3, #0]
 801611a:	461a      	mov	r2, r3
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016120:	4b1a      	ldr	r3, [pc, #104]	; (801618c <USBD_SetConfig+0x150>)
 8016122:	781b      	ldrb	r3, [r3, #0]
 8016124:	4619      	mov	r1, r3
 8016126:	6878      	ldr	r0, [r7, #4]
 8016128:	f7fe ff97 	bl	801505a <USBD_SetClassConfig>
 801612c:	4603      	mov	r3, r0
 801612e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8016130:	7bfb      	ldrb	r3, [r7, #15]
 8016132:	2b00      	cmp	r3, #0
 8016134:	d00f      	beq.n	8016156 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8016136:	6839      	ldr	r1, [r7, #0]
 8016138:	6878      	ldr	r0, [r7, #4]
 801613a:	f000 f918 	bl	801636e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	685b      	ldr	r3, [r3, #4]
 8016142:	b2db      	uxtb	r3, r3
 8016144:	4619      	mov	r1, r3
 8016146:	6878      	ldr	r0, [r7, #4]
 8016148:	f7fe ffa3 	bl	8015092 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	2202      	movs	r2, #2
 8016150:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016154:	e014      	b.n	8016180 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016156:	6878      	ldr	r0, [r7, #4]
 8016158:	f000 f9d4 	bl	8016504 <USBD_CtlSendStatus>
      break;
 801615c:	e010      	b.n	8016180 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801615e:	6878      	ldr	r0, [r7, #4]
 8016160:	f000 f9d0 	bl	8016504 <USBD_CtlSendStatus>
      break;
 8016164:	e00c      	b.n	8016180 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8016166:	6839      	ldr	r1, [r7, #0]
 8016168:	6878      	ldr	r0, [r7, #4]
 801616a:	f000 f900 	bl	801636e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801616e:	4b07      	ldr	r3, [pc, #28]	; (801618c <USBD_SetConfig+0x150>)
 8016170:	781b      	ldrb	r3, [r3, #0]
 8016172:	4619      	mov	r1, r3
 8016174:	6878      	ldr	r0, [r7, #4]
 8016176:	f7fe ff8c 	bl	8015092 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801617a:	2303      	movs	r3, #3
 801617c:	73fb      	strb	r3, [r7, #15]
      break;
 801617e:	bf00      	nop
  }

  return ret;
 8016180:	7bfb      	ldrb	r3, [r7, #15]
}
 8016182:	4618      	mov	r0, r3
 8016184:	3710      	adds	r7, #16
 8016186:	46bd      	mov	sp, r7
 8016188:	bd80      	pop	{r7, pc}
 801618a:	bf00      	nop
 801618c:	240015e4 	.word	0x240015e4

08016190 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016190:	b580      	push	{r7, lr}
 8016192:	b082      	sub	sp, #8
 8016194:	af00      	add	r7, sp, #0
 8016196:	6078      	str	r0, [r7, #4]
 8016198:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801619a:	683b      	ldr	r3, [r7, #0]
 801619c:	88db      	ldrh	r3, [r3, #6]
 801619e:	2b01      	cmp	r3, #1
 80161a0:	d004      	beq.n	80161ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80161a2:	6839      	ldr	r1, [r7, #0]
 80161a4:	6878      	ldr	r0, [r7, #4]
 80161a6:	f000 f8e2 	bl	801636e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80161aa:	e023      	b.n	80161f4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80161b2:	b2db      	uxtb	r3, r3
 80161b4:	2b02      	cmp	r3, #2
 80161b6:	dc02      	bgt.n	80161be <USBD_GetConfig+0x2e>
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	dc03      	bgt.n	80161c4 <USBD_GetConfig+0x34>
 80161bc:	e015      	b.n	80161ea <USBD_GetConfig+0x5a>
 80161be:	2b03      	cmp	r3, #3
 80161c0:	d00b      	beq.n	80161da <USBD_GetConfig+0x4a>
 80161c2:	e012      	b.n	80161ea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	2200      	movs	r2, #0
 80161c8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	3308      	adds	r3, #8
 80161ce:	2201      	movs	r2, #1
 80161d0:	4619      	mov	r1, r3
 80161d2:	6878      	ldr	r0, [r7, #4]
 80161d4:	f000 f93c 	bl	8016450 <USBD_CtlSendData>
        break;
 80161d8:	e00c      	b.n	80161f4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	3304      	adds	r3, #4
 80161de:	2201      	movs	r2, #1
 80161e0:	4619      	mov	r1, r3
 80161e2:	6878      	ldr	r0, [r7, #4]
 80161e4:	f000 f934 	bl	8016450 <USBD_CtlSendData>
        break;
 80161e8:	e004      	b.n	80161f4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80161ea:	6839      	ldr	r1, [r7, #0]
 80161ec:	6878      	ldr	r0, [r7, #4]
 80161ee:	f000 f8be 	bl	801636e <USBD_CtlError>
        break;
 80161f2:	bf00      	nop
}
 80161f4:	bf00      	nop
 80161f6:	3708      	adds	r7, #8
 80161f8:	46bd      	mov	sp, r7
 80161fa:	bd80      	pop	{r7, pc}

080161fc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80161fc:	b580      	push	{r7, lr}
 80161fe:	b082      	sub	sp, #8
 8016200:	af00      	add	r7, sp, #0
 8016202:	6078      	str	r0, [r7, #4]
 8016204:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801620c:	b2db      	uxtb	r3, r3
 801620e:	3b01      	subs	r3, #1
 8016210:	2b02      	cmp	r3, #2
 8016212:	d81e      	bhi.n	8016252 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8016214:	683b      	ldr	r3, [r7, #0]
 8016216:	88db      	ldrh	r3, [r3, #6]
 8016218:	2b02      	cmp	r3, #2
 801621a:	d004      	beq.n	8016226 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801621c:	6839      	ldr	r1, [r7, #0]
 801621e:	6878      	ldr	r0, [r7, #4]
 8016220:	f000 f8a5 	bl	801636e <USBD_CtlError>
        break;
 8016224:	e01a      	b.n	801625c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	2201      	movs	r2, #1
 801622a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8016232:	2b00      	cmp	r3, #0
 8016234:	d005      	beq.n	8016242 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	68db      	ldr	r3, [r3, #12]
 801623a:	f043 0202 	orr.w	r2, r3, #2
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8016242:	687b      	ldr	r3, [r7, #4]
 8016244:	330c      	adds	r3, #12
 8016246:	2202      	movs	r2, #2
 8016248:	4619      	mov	r1, r3
 801624a:	6878      	ldr	r0, [r7, #4]
 801624c:	f000 f900 	bl	8016450 <USBD_CtlSendData>
      break;
 8016250:	e004      	b.n	801625c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8016252:	6839      	ldr	r1, [r7, #0]
 8016254:	6878      	ldr	r0, [r7, #4]
 8016256:	f000 f88a 	bl	801636e <USBD_CtlError>
      break;
 801625a:	bf00      	nop
  }
}
 801625c:	bf00      	nop
 801625e:	3708      	adds	r7, #8
 8016260:	46bd      	mov	sp, r7
 8016262:	bd80      	pop	{r7, pc}

08016264 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016264:	b580      	push	{r7, lr}
 8016266:	b082      	sub	sp, #8
 8016268:	af00      	add	r7, sp, #0
 801626a:	6078      	str	r0, [r7, #4]
 801626c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801626e:	683b      	ldr	r3, [r7, #0]
 8016270:	885b      	ldrh	r3, [r3, #2]
 8016272:	2b01      	cmp	r3, #1
 8016274:	d107      	bne.n	8016286 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	2201      	movs	r2, #1
 801627a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801627e:	6878      	ldr	r0, [r7, #4]
 8016280:	f000 f940 	bl	8016504 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8016284:	e013      	b.n	80162ae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8016286:	683b      	ldr	r3, [r7, #0]
 8016288:	885b      	ldrh	r3, [r3, #2]
 801628a:	2b02      	cmp	r3, #2
 801628c:	d10b      	bne.n	80162a6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801628e:	683b      	ldr	r3, [r7, #0]
 8016290:	889b      	ldrh	r3, [r3, #4]
 8016292:	0a1b      	lsrs	r3, r3, #8
 8016294:	b29b      	uxth	r3, r3
 8016296:	b2da      	uxtb	r2, r3
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801629e:	6878      	ldr	r0, [r7, #4]
 80162a0:	f000 f930 	bl	8016504 <USBD_CtlSendStatus>
}
 80162a4:	e003      	b.n	80162ae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80162a6:	6839      	ldr	r1, [r7, #0]
 80162a8:	6878      	ldr	r0, [r7, #4]
 80162aa:	f000 f860 	bl	801636e <USBD_CtlError>
}
 80162ae:	bf00      	nop
 80162b0:	3708      	adds	r7, #8
 80162b2:	46bd      	mov	sp, r7
 80162b4:	bd80      	pop	{r7, pc}

080162b6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80162b6:	b580      	push	{r7, lr}
 80162b8:	b082      	sub	sp, #8
 80162ba:	af00      	add	r7, sp, #0
 80162bc:	6078      	str	r0, [r7, #4]
 80162be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80162c6:	b2db      	uxtb	r3, r3
 80162c8:	3b01      	subs	r3, #1
 80162ca:	2b02      	cmp	r3, #2
 80162cc:	d80b      	bhi.n	80162e6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80162ce:	683b      	ldr	r3, [r7, #0]
 80162d0:	885b      	ldrh	r3, [r3, #2]
 80162d2:	2b01      	cmp	r3, #1
 80162d4:	d10c      	bne.n	80162f0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	2200      	movs	r2, #0
 80162da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80162de:	6878      	ldr	r0, [r7, #4]
 80162e0:	f000 f910 	bl	8016504 <USBD_CtlSendStatus>
      }
      break;
 80162e4:	e004      	b.n	80162f0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80162e6:	6839      	ldr	r1, [r7, #0]
 80162e8:	6878      	ldr	r0, [r7, #4]
 80162ea:	f000 f840 	bl	801636e <USBD_CtlError>
      break;
 80162ee:	e000      	b.n	80162f2 <USBD_ClrFeature+0x3c>
      break;
 80162f0:	bf00      	nop
  }
}
 80162f2:	bf00      	nop
 80162f4:	3708      	adds	r7, #8
 80162f6:	46bd      	mov	sp, r7
 80162f8:	bd80      	pop	{r7, pc}

080162fa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80162fa:	b580      	push	{r7, lr}
 80162fc:	b084      	sub	sp, #16
 80162fe:	af00      	add	r7, sp, #0
 8016300:	6078      	str	r0, [r7, #4]
 8016302:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8016304:	683b      	ldr	r3, [r7, #0]
 8016306:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8016308:	68fb      	ldr	r3, [r7, #12]
 801630a:	781a      	ldrb	r2, [r3, #0]
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8016310:	68fb      	ldr	r3, [r7, #12]
 8016312:	3301      	adds	r3, #1
 8016314:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8016316:	68fb      	ldr	r3, [r7, #12]
 8016318:	781a      	ldrb	r2, [r3, #0]
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801631e:	68fb      	ldr	r3, [r7, #12]
 8016320:	3301      	adds	r3, #1
 8016322:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8016324:	68f8      	ldr	r0, [r7, #12]
 8016326:	f7ff fa41 	bl	80157ac <SWAPBYTE>
 801632a:	4603      	mov	r3, r0
 801632c:	461a      	mov	r2, r3
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8016332:	68fb      	ldr	r3, [r7, #12]
 8016334:	3301      	adds	r3, #1
 8016336:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	3301      	adds	r3, #1
 801633c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801633e:	68f8      	ldr	r0, [r7, #12]
 8016340:	f7ff fa34 	bl	80157ac <SWAPBYTE>
 8016344:	4603      	mov	r3, r0
 8016346:	461a      	mov	r2, r3
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801634c:	68fb      	ldr	r3, [r7, #12]
 801634e:	3301      	adds	r3, #1
 8016350:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016352:	68fb      	ldr	r3, [r7, #12]
 8016354:	3301      	adds	r3, #1
 8016356:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8016358:	68f8      	ldr	r0, [r7, #12]
 801635a:	f7ff fa27 	bl	80157ac <SWAPBYTE>
 801635e:	4603      	mov	r3, r0
 8016360:	461a      	mov	r2, r3
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	80da      	strh	r2, [r3, #6]
}
 8016366:	bf00      	nop
 8016368:	3710      	adds	r7, #16
 801636a:	46bd      	mov	sp, r7
 801636c:	bd80      	pop	{r7, pc}

0801636e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801636e:	b580      	push	{r7, lr}
 8016370:	b082      	sub	sp, #8
 8016372:	af00      	add	r7, sp, #0
 8016374:	6078      	str	r0, [r7, #4]
 8016376:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016378:	2180      	movs	r1, #128	; 0x80
 801637a:	6878      	ldr	r0, [r7, #4]
 801637c:	f000 fd4c 	bl	8016e18 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016380:	2100      	movs	r1, #0
 8016382:	6878      	ldr	r0, [r7, #4]
 8016384:	f000 fd48 	bl	8016e18 <USBD_LL_StallEP>
}
 8016388:	bf00      	nop
 801638a:	3708      	adds	r7, #8
 801638c:	46bd      	mov	sp, r7
 801638e:	bd80      	pop	{r7, pc}

08016390 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016390:	b580      	push	{r7, lr}
 8016392:	b086      	sub	sp, #24
 8016394:	af00      	add	r7, sp, #0
 8016396:	60f8      	str	r0, [r7, #12]
 8016398:	60b9      	str	r1, [r7, #8]
 801639a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801639c:	2300      	movs	r3, #0
 801639e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80163a0:	68fb      	ldr	r3, [r7, #12]
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d036      	beq.n	8016414 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80163a6:	68fb      	ldr	r3, [r7, #12]
 80163a8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80163aa:	6938      	ldr	r0, [r7, #16]
 80163ac:	f000 f836 	bl	801641c <USBD_GetLen>
 80163b0:	4603      	mov	r3, r0
 80163b2:	3301      	adds	r3, #1
 80163b4:	b29b      	uxth	r3, r3
 80163b6:	005b      	lsls	r3, r3, #1
 80163b8:	b29a      	uxth	r2, r3
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80163be:	7dfb      	ldrb	r3, [r7, #23]
 80163c0:	68ba      	ldr	r2, [r7, #8]
 80163c2:	4413      	add	r3, r2
 80163c4:	687a      	ldr	r2, [r7, #4]
 80163c6:	7812      	ldrb	r2, [r2, #0]
 80163c8:	701a      	strb	r2, [r3, #0]
  idx++;
 80163ca:	7dfb      	ldrb	r3, [r7, #23]
 80163cc:	3301      	adds	r3, #1
 80163ce:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80163d0:	7dfb      	ldrb	r3, [r7, #23]
 80163d2:	68ba      	ldr	r2, [r7, #8]
 80163d4:	4413      	add	r3, r2
 80163d6:	2203      	movs	r2, #3
 80163d8:	701a      	strb	r2, [r3, #0]
  idx++;
 80163da:	7dfb      	ldrb	r3, [r7, #23]
 80163dc:	3301      	adds	r3, #1
 80163de:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80163e0:	e013      	b.n	801640a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80163e2:	7dfb      	ldrb	r3, [r7, #23]
 80163e4:	68ba      	ldr	r2, [r7, #8]
 80163e6:	4413      	add	r3, r2
 80163e8:	693a      	ldr	r2, [r7, #16]
 80163ea:	7812      	ldrb	r2, [r2, #0]
 80163ec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80163ee:	693b      	ldr	r3, [r7, #16]
 80163f0:	3301      	adds	r3, #1
 80163f2:	613b      	str	r3, [r7, #16]
    idx++;
 80163f4:	7dfb      	ldrb	r3, [r7, #23]
 80163f6:	3301      	adds	r3, #1
 80163f8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80163fa:	7dfb      	ldrb	r3, [r7, #23]
 80163fc:	68ba      	ldr	r2, [r7, #8]
 80163fe:	4413      	add	r3, r2
 8016400:	2200      	movs	r2, #0
 8016402:	701a      	strb	r2, [r3, #0]
    idx++;
 8016404:	7dfb      	ldrb	r3, [r7, #23]
 8016406:	3301      	adds	r3, #1
 8016408:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801640a:	693b      	ldr	r3, [r7, #16]
 801640c:	781b      	ldrb	r3, [r3, #0]
 801640e:	2b00      	cmp	r3, #0
 8016410:	d1e7      	bne.n	80163e2 <USBD_GetString+0x52>
 8016412:	e000      	b.n	8016416 <USBD_GetString+0x86>
    return;
 8016414:	bf00      	nop
  }
}
 8016416:	3718      	adds	r7, #24
 8016418:	46bd      	mov	sp, r7
 801641a:	bd80      	pop	{r7, pc}

0801641c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801641c:	b480      	push	{r7}
 801641e:	b085      	sub	sp, #20
 8016420:	af00      	add	r7, sp, #0
 8016422:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016424:	2300      	movs	r3, #0
 8016426:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801642c:	e005      	b.n	801643a <USBD_GetLen+0x1e>
  {
    len++;
 801642e:	7bfb      	ldrb	r3, [r7, #15]
 8016430:	3301      	adds	r3, #1
 8016432:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8016434:	68bb      	ldr	r3, [r7, #8]
 8016436:	3301      	adds	r3, #1
 8016438:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801643a:	68bb      	ldr	r3, [r7, #8]
 801643c:	781b      	ldrb	r3, [r3, #0]
 801643e:	2b00      	cmp	r3, #0
 8016440:	d1f5      	bne.n	801642e <USBD_GetLen+0x12>
  }

  return len;
 8016442:	7bfb      	ldrb	r3, [r7, #15]
}
 8016444:	4618      	mov	r0, r3
 8016446:	3714      	adds	r7, #20
 8016448:	46bd      	mov	sp, r7
 801644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801644e:	4770      	bx	lr

08016450 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8016450:	b580      	push	{r7, lr}
 8016452:	b084      	sub	sp, #16
 8016454:	af00      	add	r7, sp, #0
 8016456:	60f8      	str	r0, [r7, #12]
 8016458:	60b9      	str	r1, [r7, #8]
 801645a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801645c:	68fb      	ldr	r3, [r7, #12]
 801645e:	2202      	movs	r2, #2
 8016460:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8016464:	68fb      	ldr	r3, [r7, #12]
 8016466:	687a      	ldr	r2, [r7, #4]
 8016468:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801646a:	68fb      	ldr	r3, [r7, #12]
 801646c:	687a      	ldr	r2, [r7, #4]
 801646e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	68ba      	ldr	r2, [r7, #8]
 8016474:	2100      	movs	r1, #0
 8016476:	68f8      	ldr	r0, [r7, #12]
 8016478:	f000 fd57 	bl	8016f2a <USBD_LL_Transmit>

  return USBD_OK;
 801647c:	2300      	movs	r3, #0
}
 801647e:	4618      	mov	r0, r3
 8016480:	3710      	adds	r7, #16
 8016482:	46bd      	mov	sp, r7
 8016484:	bd80      	pop	{r7, pc}

08016486 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8016486:	b580      	push	{r7, lr}
 8016488:	b084      	sub	sp, #16
 801648a:	af00      	add	r7, sp, #0
 801648c:	60f8      	str	r0, [r7, #12]
 801648e:	60b9      	str	r1, [r7, #8]
 8016490:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	68ba      	ldr	r2, [r7, #8]
 8016496:	2100      	movs	r1, #0
 8016498:	68f8      	ldr	r0, [r7, #12]
 801649a:	f000 fd46 	bl	8016f2a <USBD_LL_Transmit>

  return USBD_OK;
 801649e:	2300      	movs	r3, #0
}
 80164a0:	4618      	mov	r0, r3
 80164a2:	3710      	adds	r7, #16
 80164a4:	46bd      	mov	sp, r7
 80164a6:	bd80      	pop	{r7, pc}

080164a8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80164a8:	b580      	push	{r7, lr}
 80164aa:	b084      	sub	sp, #16
 80164ac:	af00      	add	r7, sp, #0
 80164ae:	60f8      	str	r0, [r7, #12]
 80164b0:	60b9      	str	r1, [r7, #8]
 80164b2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80164b4:	68fb      	ldr	r3, [r7, #12]
 80164b6:	2203      	movs	r2, #3
 80164b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80164bc:	68fb      	ldr	r3, [r7, #12]
 80164be:	687a      	ldr	r2, [r7, #4]
 80164c0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80164c4:	68fb      	ldr	r3, [r7, #12]
 80164c6:	687a      	ldr	r2, [r7, #4]
 80164c8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	68ba      	ldr	r2, [r7, #8]
 80164d0:	2100      	movs	r1, #0
 80164d2:	68f8      	ldr	r0, [r7, #12]
 80164d4:	f000 fd4a 	bl	8016f6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80164d8:	2300      	movs	r3, #0
}
 80164da:	4618      	mov	r0, r3
 80164dc:	3710      	adds	r7, #16
 80164de:	46bd      	mov	sp, r7
 80164e0:	bd80      	pop	{r7, pc}

080164e2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80164e2:	b580      	push	{r7, lr}
 80164e4:	b084      	sub	sp, #16
 80164e6:	af00      	add	r7, sp, #0
 80164e8:	60f8      	str	r0, [r7, #12]
 80164ea:	60b9      	str	r1, [r7, #8]
 80164ec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	68ba      	ldr	r2, [r7, #8]
 80164f2:	2100      	movs	r1, #0
 80164f4:	68f8      	ldr	r0, [r7, #12]
 80164f6:	f000 fd39 	bl	8016f6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80164fa:	2300      	movs	r3, #0
}
 80164fc:	4618      	mov	r0, r3
 80164fe:	3710      	adds	r7, #16
 8016500:	46bd      	mov	sp, r7
 8016502:	bd80      	pop	{r7, pc}

08016504 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016504:	b580      	push	{r7, lr}
 8016506:	b082      	sub	sp, #8
 8016508:	af00      	add	r7, sp, #0
 801650a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	2204      	movs	r2, #4
 8016510:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016514:	2300      	movs	r3, #0
 8016516:	2200      	movs	r2, #0
 8016518:	2100      	movs	r1, #0
 801651a:	6878      	ldr	r0, [r7, #4]
 801651c:	f000 fd05 	bl	8016f2a <USBD_LL_Transmit>

  return USBD_OK;
 8016520:	2300      	movs	r3, #0
}
 8016522:	4618      	mov	r0, r3
 8016524:	3708      	adds	r7, #8
 8016526:	46bd      	mov	sp, r7
 8016528:	bd80      	pop	{r7, pc}

0801652a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801652a:	b580      	push	{r7, lr}
 801652c:	b082      	sub	sp, #8
 801652e:	af00      	add	r7, sp, #0
 8016530:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	2205      	movs	r2, #5
 8016536:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801653a:	2300      	movs	r3, #0
 801653c:	2200      	movs	r2, #0
 801653e:	2100      	movs	r1, #0
 8016540:	6878      	ldr	r0, [r7, #4]
 8016542:	f000 fd13 	bl	8016f6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016546:	2300      	movs	r3, #0
}
 8016548:	4618      	mov	r0, r3
 801654a:	3708      	adds	r7, #8
 801654c:	46bd      	mov	sp, r7
 801654e:	bd80      	pop	{r7, pc}

08016550 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8016550:	b480      	push	{r7}
 8016552:	b087      	sub	sp, #28
 8016554:	af00      	add	r7, sp, #0
 8016556:	60f8      	str	r0, [r7, #12]
 8016558:	60b9      	str	r1, [r7, #8]
 801655a:	4613      	mov	r3, r2
 801655c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801655e:	2301      	movs	r3, #1
 8016560:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8016562:	2300      	movs	r3, #0
 8016564:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8016566:	4b1f      	ldr	r3, [pc, #124]	; (80165e4 <FATFS_LinkDriverEx+0x94>)
 8016568:	7a5b      	ldrb	r3, [r3, #9]
 801656a:	b2db      	uxtb	r3, r3
 801656c:	2b00      	cmp	r3, #0
 801656e:	d131      	bne.n	80165d4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8016570:	4b1c      	ldr	r3, [pc, #112]	; (80165e4 <FATFS_LinkDriverEx+0x94>)
 8016572:	7a5b      	ldrb	r3, [r3, #9]
 8016574:	b2db      	uxtb	r3, r3
 8016576:	461a      	mov	r2, r3
 8016578:	4b1a      	ldr	r3, [pc, #104]	; (80165e4 <FATFS_LinkDriverEx+0x94>)
 801657a:	2100      	movs	r1, #0
 801657c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801657e:	4b19      	ldr	r3, [pc, #100]	; (80165e4 <FATFS_LinkDriverEx+0x94>)
 8016580:	7a5b      	ldrb	r3, [r3, #9]
 8016582:	b2db      	uxtb	r3, r3
 8016584:	4a17      	ldr	r2, [pc, #92]	; (80165e4 <FATFS_LinkDriverEx+0x94>)
 8016586:	009b      	lsls	r3, r3, #2
 8016588:	4413      	add	r3, r2
 801658a:	68fa      	ldr	r2, [r7, #12]
 801658c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801658e:	4b15      	ldr	r3, [pc, #84]	; (80165e4 <FATFS_LinkDriverEx+0x94>)
 8016590:	7a5b      	ldrb	r3, [r3, #9]
 8016592:	b2db      	uxtb	r3, r3
 8016594:	461a      	mov	r2, r3
 8016596:	4b13      	ldr	r3, [pc, #76]	; (80165e4 <FATFS_LinkDriverEx+0x94>)
 8016598:	4413      	add	r3, r2
 801659a:	79fa      	ldrb	r2, [r7, #7]
 801659c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801659e:	4b11      	ldr	r3, [pc, #68]	; (80165e4 <FATFS_LinkDriverEx+0x94>)
 80165a0:	7a5b      	ldrb	r3, [r3, #9]
 80165a2:	b2db      	uxtb	r3, r3
 80165a4:	1c5a      	adds	r2, r3, #1
 80165a6:	b2d1      	uxtb	r1, r2
 80165a8:	4a0e      	ldr	r2, [pc, #56]	; (80165e4 <FATFS_LinkDriverEx+0x94>)
 80165aa:	7251      	strb	r1, [r2, #9]
 80165ac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80165ae:	7dbb      	ldrb	r3, [r7, #22]
 80165b0:	3330      	adds	r3, #48	; 0x30
 80165b2:	b2da      	uxtb	r2, r3
 80165b4:	68bb      	ldr	r3, [r7, #8]
 80165b6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80165b8:	68bb      	ldr	r3, [r7, #8]
 80165ba:	3301      	adds	r3, #1
 80165bc:	223a      	movs	r2, #58	; 0x3a
 80165be:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80165c0:	68bb      	ldr	r3, [r7, #8]
 80165c2:	3302      	adds	r3, #2
 80165c4:	222f      	movs	r2, #47	; 0x2f
 80165c6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80165c8:	68bb      	ldr	r3, [r7, #8]
 80165ca:	3303      	adds	r3, #3
 80165cc:	2200      	movs	r2, #0
 80165ce:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80165d0:	2300      	movs	r3, #0
 80165d2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80165d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80165d6:	4618      	mov	r0, r3
 80165d8:	371c      	adds	r7, #28
 80165da:	46bd      	mov	sp, r7
 80165dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165e0:	4770      	bx	lr
 80165e2:	bf00      	nop
 80165e4:	240015e8 	.word	0x240015e8

080165e8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80165e8:	b580      	push	{r7, lr}
 80165ea:	b082      	sub	sp, #8
 80165ec:	af00      	add	r7, sp, #0
 80165ee:	6078      	str	r0, [r7, #4]
 80165f0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80165f2:	2200      	movs	r2, #0
 80165f4:	6839      	ldr	r1, [r7, #0]
 80165f6:	6878      	ldr	r0, [r7, #4]
 80165f8:	f7ff ffaa 	bl	8016550 <FATFS_LinkDriverEx>
 80165fc:	4603      	mov	r3, r0
}
 80165fe:	4618      	mov	r0, r3
 8016600:	3708      	adds	r7, #8
 8016602:	46bd      	mov	sp, r7
 8016604:	bd80      	pop	{r7, pc}
	...

08016608 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016608:	b580      	push	{r7, lr}
 801660a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 801660c:	2201      	movs	r2, #1
 801660e:	4913      	ldr	r1, [pc, #76]	; (801665c <MX_USB_DEVICE_Init+0x54>)
 8016610:	4813      	ldr	r0, [pc, #76]	; (8016660 <MX_USB_DEVICE_Init+0x58>)
 8016612:	f7fe fca5 	bl	8014f60 <USBD_Init>
 8016616:	4603      	mov	r3, r0
 8016618:	2b00      	cmp	r3, #0
 801661a:	d001      	beq.n	8016620 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801661c:	f7ec f986 	bl	800292c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8016620:	4910      	ldr	r1, [pc, #64]	; (8016664 <MX_USB_DEVICE_Init+0x5c>)
 8016622:	480f      	ldr	r0, [pc, #60]	; (8016660 <MX_USB_DEVICE_Init+0x58>)
 8016624:	f7fe fccc 	bl	8014fc0 <USBD_RegisterClass>
 8016628:	4603      	mov	r3, r0
 801662a:	2b00      	cmp	r3, #0
 801662c:	d001      	beq.n	8016632 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801662e:	f7ec f97d 	bl	800292c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8016632:	490d      	ldr	r1, [pc, #52]	; (8016668 <MX_USB_DEVICE_Init+0x60>)
 8016634:	480a      	ldr	r0, [pc, #40]	; (8016660 <MX_USB_DEVICE_Init+0x58>)
 8016636:	f7fe fbc3 	bl	8014dc0 <USBD_CDC_RegisterInterface>
 801663a:	4603      	mov	r3, r0
 801663c:	2b00      	cmp	r3, #0
 801663e:	d001      	beq.n	8016644 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016640:	f7ec f974 	bl	800292c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8016644:	4806      	ldr	r0, [pc, #24]	; (8016660 <MX_USB_DEVICE_Init+0x58>)
 8016646:	f7fe fcf1 	bl	801502c <USBD_Start>
 801664a:	4603      	mov	r3, r0
 801664c:	2b00      	cmp	r3, #0
 801664e:	d001      	beq.n	8016654 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016650:	f7ec f96c 	bl	800292c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8016654:	f7f3 f908 	bl	8009868 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016658:	bf00      	nop
 801665a:	bd80      	pop	{r7, pc}
 801665c:	240000b0 	.word	0x240000b0
 8016660:	240015f4 	.word	0x240015f4
 8016664:	2400001c 	.word	0x2400001c
 8016668:	2400009c 	.word	0x2400009c

0801666c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 801666c:	b580      	push	{r7, lr}
 801666e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8016670:	2200      	movs	r2, #0
 8016672:	4905      	ldr	r1, [pc, #20]	; (8016688 <CDC_Init_HS+0x1c>)
 8016674:	4805      	ldr	r0, [pc, #20]	; (801668c <CDC_Init_HS+0x20>)
 8016676:	f7fe fbbd 	bl	8014df4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 801667a:	4905      	ldr	r1, [pc, #20]	; (8016690 <CDC_Init_HS+0x24>)
 801667c:	4803      	ldr	r0, [pc, #12]	; (801668c <CDC_Init_HS+0x20>)
 801667e:	f7fe fbdb 	bl	8014e38 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016682:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8016684:	4618      	mov	r0, r3
 8016686:	bd80      	pop	{r7, pc}
 8016688:	240020d0 	.word	0x240020d0
 801668c:	240015f4 	.word	0x240015f4
 8016690:	240018d0 	.word	0x240018d0

08016694 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8016694:	b480      	push	{r7}
 8016696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8016698:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 801669a:	4618      	mov	r0, r3
 801669c:	46bd      	mov	sp, r7
 801669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166a2:	4770      	bx	lr

080166a4 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80166a4:	b480      	push	{r7}
 80166a6:	b083      	sub	sp, #12
 80166a8:	af00      	add	r7, sp, #0
 80166aa:	4603      	mov	r3, r0
 80166ac:	6039      	str	r1, [r7, #0]
 80166ae:	71fb      	strb	r3, [r7, #7]
 80166b0:	4613      	mov	r3, r2
 80166b2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 80166b4:	79fb      	ldrb	r3, [r7, #7]
 80166b6:	2b23      	cmp	r3, #35	; 0x23
 80166b8:	d84a      	bhi.n	8016750 <CDC_Control_HS+0xac>
 80166ba:	a201      	add	r2, pc, #4	; (adr r2, 80166c0 <CDC_Control_HS+0x1c>)
 80166bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80166c0:	08016751 	.word	0x08016751
 80166c4:	08016751 	.word	0x08016751
 80166c8:	08016751 	.word	0x08016751
 80166cc:	08016751 	.word	0x08016751
 80166d0:	08016751 	.word	0x08016751
 80166d4:	08016751 	.word	0x08016751
 80166d8:	08016751 	.word	0x08016751
 80166dc:	08016751 	.word	0x08016751
 80166e0:	08016751 	.word	0x08016751
 80166e4:	08016751 	.word	0x08016751
 80166e8:	08016751 	.word	0x08016751
 80166ec:	08016751 	.word	0x08016751
 80166f0:	08016751 	.word	0x08016751
 80166f4:	08016751 	.word	0x08016751
 80166f8:	08016751 	.word	0x08016751
 80166fc:	08016751 	.word	0x08016751
 8016700:	08016751 	.word	0x08016751
 8016704:	08016751 	.word	0x08016751
 8016708:	08016751 	.word	0x08016751
 801670c:	08016751 	.word	0x08016751
 8016710:	08016751 	.word	0x08016751
 8016714:	08016751 	.word	0x08016751
 8016718:	08016751 	.word	0x08016751
 801671c:	08016751 	.word	0x08016751
 8016720:	08016751 	.word	0x08016751
 8016724:	08016751 	.word	0x08016751
 8016728:	08016751 	.word	0x08016751
 801672c:	08016751 	.word	0x08016751
 8016730:	08016751 	.word	0x08016751
 8016734:	08016751 	.word	0x08016751
 8016738:	08016751 	.word	0x08016751
 801673c:	08016751 	.word	0x08016751
 8016740:	08016751 	.word	0x08016751
 8016744:	08016751 	.word	0x08016751
 8016748:	08016751 	.word	0x08016751
 801674c:	08016751 	.word	0x08016751
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016750:	bf00      	nop
  }

  return (USBD_OK);
 8016752:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8016754:	4618      	mov	r0, r3
 8016756:	370c      	adds	r7, #12
 8016758:	46bd      	mov	sp, r7
 801675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801675e:	4770      	bx	lr

08016760 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8016760:	b580      	push	{r7, lr}
 8016762:	b084      	sub	sp, #16
 8016764:	af00      	add	r7, sp, #0
 8016766:	6078      	str	r0, [r7, #4]
 8016768:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 801676a:	6879      	ldr	r1, [r7, #4]
 801676c:	480e      	ldr	r0, [pc, #56]	; (80167a8 <CDC_Receive_HS+0x48>)
 801676e:	f7fe fb63 	bl	8014e38 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8016772:	480d      	ldr	r0, [pc, #52]	; (80167a8 <CDC_Receive_HS+0x48>)
 8016774:	f7fe fbbe 	bl	8014ef4 <USBD_CDC_ReceivePacket>

  extern uint8_t usbDataBuffer[usbBufferLen];
  extern uint32_t usbBytesReady;

  uint32_t cpyLen = *Len;
 8016778:	683b      	ldr	r3, [r7, #0]
 801677a:	681b      	ldr	r3, [r3, #0]
 801677c:	60fb      	str	r3, [r7, #12]
  /*char debug[250];
  sprintf(debug, "cpyLen: %d\n", cpyLen);
  CDC_Transmit_HS(debug, strlen(debug));*/

  memcpy(usbDataBuffer + usbBytesReady, Buf, cpyLen);
 801677e:	4b0b      	ldr	r3, [pc, #44]	; (80167ac <CDC_Receive_HS+0x4c>)
 8016780:	681b      	ldr	r3, [r3, #0]
 8016782:	4a0b      	ldr	r2, [pc, #44]	; (80167b0 <CDC_Receive_HS+0x50>)
 8016784:	4413      	add	r3, r2
 8016786:	68fa      	ldr	r2, [r7, #12]
 8016788:	6879      	ldr	r1, [r7, #4]
 801678a:	4618      	mov	r0, r3
 801678c:	f000 fcf0 	bl	8017170 <memcpy>
  usbBytesReady += cpyLen;
 8016790:	4b06      	ldr	r3, [pc, #24]	; (80167ac <CDC_Receive_HS+0x4c>)
 8016792:	681a      	ldr	r2, [r3, #0]
 8016794:	68fb      	ldr	r3, [r7, #12]
 8016796:	4413      	add	r3, r2
 8016798:	4a04      	ldr	r2, [pc, #16]	; (80167ac <CDC_Receive_HS+0x4c>)
 801679a:	6013      	str	r3, [r2, #0]
  
  return (USBD_OK);
 801679c:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 801679e:	4618      	mov	r0, r3
 80167a0:	3710      	adds	r7, #16
 80167a2:	46bd      	mov	sp, r7
 80167a4:	bd80      	pop	{r7, pc}
 80167a6:	bf00      	nop
 80167a8:	240015f4 	.word	0x240015f4
 80167ac:	2400026c 	.word	0x2400026c
 80167b0:	2400016c 	.word	0x2400016c

080167b4 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 80167b4:	b580      	push	{r7, lr}
 80167b6:	b084      	sub	sp, #16
 80167b8:	af00      	add	r7, sp, #0
 80167ba:	6078      	str	r0, [r7, #4]
 80167bc:	460b      	mov	r3, r1
 80167be:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80167c0:	2300      	movs	r3, #0
 80167c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 80167c4:	4b0d      	ldr	r3, [pc, #52]	; (80167fc <CDC_Transmit_HS+0x48>)
 80167c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80167ca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80167cc:	68bb      	ldr	r3, [r7, #8]
 80167ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	d001      	beq.n	80167da <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 80167d6:	2301      	movs	r3, #1
 80167d8:	e00b      	b.n	80167f2 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 80167da:	887b      	ldrh	r3, [r7, #2]
 80167dc:	461a      	mov	r2, r3
 80167de:	6879      	ldr	r1, [r7, #4]
 80167e0:	4806      	ldr	r0, [pc, #24]	; (80167fc <CDC_Transmit_HS+0x48>)
 80167e2:	f7fe fb07 	bl	8014df4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 80167e6:	4805      	ldr	r0, [pc, #20]	; (80167fc <CDC_Transmit_HS+0x48>)
 80167e8:	f7fe fb44 	bl	8014e74 <USBD_CDC_TransmitPacket>
 80167ec:	4603      	mov	r3, r0
 80167ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 80167f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80167f2:	4618      	mov	r0, r3
 80167f4:	3710      	adds	r7, #16
 80167f6:	46bd      	mov	sp, r7
 80167f8:	bd80      	pop	{r7, pc}
 80167fa:	bf00      	nop
 80167fc:	240015f4 	.word	0x240015f4

08016800 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8016800:	b480      	push	{r7}
 8016802:	b087      	sub	sp, #28
 8016804:	af00      	add	r7, sp, #0
 8016806:	60f8      	str	r0, [r7, #12]
 8016808:	60b9      	str	r1, [r7, #8]
 801680a:	4613      	mov	r3, r2
 801680c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801680e:	2300      	movs	r3, #0
 8016810:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8016812:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016816:	4618      	mov	r0, r3
 8016818:	371c      	adds	r7, #28
 801681a:	46bd      	mov	sp, r7
 801681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016820:	4770      	bx	lr
	...

08016824 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016824:	b480      	push	{r7}
 8016826:	b083      	sub	sp, #12
 8016828:	af00      	add	r7, sp, #0
 801682a:	4603      	mov	r3, r0
 801682c:	6039      	str	r1, [r7, #0]
 801682e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8016830:	683b      	ldr	r3, [r7, #0]
 8016832:	2212      	movs	r2, #18
 8016834:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8016836:	4b03      	ldr	r3, [pc, #12]	; (8016844 <USBD_HS_DeviceDescriptor+0x20>)
}
 8016838:	4618      	mov	r0, r3
 801683a:	370c      	adds	r7, #12
 801683c:	46bd      	mov	sp, r7
 801683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016842:	4770      	bx	lr
 8016844:	240000cc 	.word	0x240000cc

08016848 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016848:	b480      	push	{r7}
 801684a:	b083      	sub	sp, #12
 801684c:	af00      	add	r7, sp, #0
 801684e:	4603      	mov	r3, r0
 8016850:	6039      	str	r1, [r7, #0]
 8016852:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016854:	683b      	ldr	r3, [r7, #0]
 8016856:	2204      	movs	r2, #4
 8016858:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801685a:	4b03      	ldr	r3, [pc, #12]	; (8016868 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 801685c:	4618      	mov	r0, r3
 801685e:	370c      	adds	r7, #12
 8016860:	46bd      	mov	sp, r7
 8016862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016866:	4770      	bx	lr
 8016868:	240000e0 	.word	0x240000e0

0801686c <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801686c:	b580      	push	{r7, lr}
 801686e:	b082      	sub	sp, #8
 8016870:	af00      	add	r7, sp, #0
 8016872:	4603      	mov	r3, r0
 8016874:	6039      	str	r1, [r7, #0]
 8016876:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016878:	79fb      	ldrb	r3, [r7, #7]
 801687a:	2b00      	cmp	r3, #0
 801687c:	d105      	bne.n	801688a <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801687e:	683a      	ldr	r2, [r7, #0]
 8016880:	4907      	ldr	r1, [pc, #28]	; (80168a0 <USBD_HS_ProductStrDescriptor+0x34>)
 8016882:	4808      	ldr	r0, [pc, #32]	; (80168a4 <USBD_HS_ProductStrDescriptor+0x38>)
 8016884:	f7ff fd84 	bl	8016390 <USBD_GetString>
 8016888:	e004      	b.n	8016894 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801688a:	683a      	ldr	r2, [r7, #0]
 801688c:	4904      	ldr	r1, [pc, #16]	; (80168a0 <USBD_HS_ProductStrDescriptor+0x34>)
 801688e:	4805      	ldr	r0, [pc, #20]	; (80168a4 <USBD_HS_ProductStrDescriptor+0x38>)
 8016890:	f7ff fd7e 	bl	8016390 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016894:	4b02      	ldr	r3, [pc, #8]	; (80168a0 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8016896:	4618      	mov	r0, r3
 8016898:	3708      	adds	r7, #8
 801689a:	46bd      	mov	sp, r7
 801689c:	bd80      	pop	{r7, pc}
 801689e:	bf00      	nop
 80168a0:	240028d0 	.word	0x240028d0
 80168a4:	0801849c 	.word	0x0801849c

080168a8 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80168a8:	b580      	push	{r7, lr}
 80168aa:	b082      	sub	sp, #8
 80168ac:	af00      	add	r7, sp, #0
 80168ae:	4603      	mov	r3, r0
 80168b0:	6039      	str	r1, [r7, #0]
 80168b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80168b4:	683a      	ldr	r2, [r7, #0]
 80168b6:	4904      	ldr	r1, [pc, #16]	; (80168c8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 80168b8:	4804      	ldr	r0, [pc, #16]	; (80168cc <USBD_HS_ManufacturerStrDescriptor+0x24>)
 80168ba:	f7ff fd69 	bl	8016390 <USBD_GetString>
  return USBD_StrDesc;
 80168be:	4b02      	ldr	r3, [pc, #8]	; (80168c8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 80168c0:	4618      	mov	r0, r3
 80168c2:	3708      	adds	r7, #8
 80168c4:	46bd      	mov	sp, r7
 80168c6:	bd80      	pop	{r7, pc}
 80168c8:	240028d0 	.word	0x240028d0
 80168cc:	080184b8 	.word	0x080184b8

080168d0 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80168d0:	b580      	push	{r7, lr}
 80168d2:	b082      	sub	sp, #8
 80168d4:	af00      	add	r7, sp, #0
 80168d6:	4603      	mov	r3, r0
 80168d8:	6039      	str	r1, [r7, #0]
 80168da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80168dc:	683b      	ldr	r3, [r7, #0]
 80168de:	221a      	movs	r2, #26
 80168e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80168e2:	f000 f843 	bl	801696c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80168e6:	4b02      	ldr	r3, [pc, #8]	; (80168f0 <USBD_HS_SerialStrDescriptor+0x20>)
}
 80168e8:	4618      	mov	r0, r3
 80168ea:	3708      	adds	r7, #8
 80168ec:	46bd      	mov	sp, r7
 80168ee:	bd80      	pop	{r7, pc}
 80168f0:	240000e4 	.word	0x240000e4

080168f4 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80168f4:	b580      	push	{r7, lr}
 80168f6:	b082      	sub	sp, #8
 80168f8:	af00      	add	r7, sp, #0
 80168fa:	4603      	mov	r3, r0
 80168fc:	6039      	str	r1, [r7, #0]
 80168fe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016900:	79fb      	ldrb	r3, [r7, #7]
 8016902:	2b00      	cmp	r3, #0
 8016904:	d105      	bne.n	8016912 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8016906:	683a      	ldr	r2, [r7, #0]
 8016908:	4907      	ldr	r1, [pc, #28]	; (8016928 <USBD_HS_ConfigStrDescriptor+0x34>)
 801690a:	4808      	ldr	r0, [pc, #32]	; (801692c <USBD_HS_ConfigStrDescriptor+0x38>)
 801690c:	f7ff fd40 	bl	8016390 <USBD_GetString>
 8016910:	e004      	b.n	801691c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8016912:	683a      	ldr	r2, [r7, #0]
 8016914:	4904      	ldr	r1, [pc, #16]	; (8016928 <USBD_HS_ConfigStrDescriptor+0x34>)
 8016916:	4805      	ldr	r0, [pc, #20]	; (801692c <USBD_HS_ConfigStrDescriptor+0x38>)
 8016918:	f7ff fd3a 	bl	8016390 <USBD_GetString>
  }
  return USBD_StrDesc;
 801691c:	4b02      	ldr	r3, [pc, #8]	; (8016928 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801691e:	4618      	mov	r0, r3
 8016920:	3708      	adds	r7, #8
 8016922:	46bd      	mov	sp, r7
 8016924:	bd80      	pop	{r7, pc}
 8016926:	bf00      	nop
 8016928:	240028d0 	.word	0x240028d0
 801692c:	080184bc 	.word	0x080184bc

08016930 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016930:	b580      	push	{r7, lr}
 8016932:	b082      	sub	sp, #8
 8016934:	af00      	add	r7, sp, #0
 8016936:	4603      	mov	r3, r0
 8016938:	6039      	str	r1, [r7, #0]
 801693a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801693c:	79fb      	ldrb	r3, [r7, #7]
 801693e:	2b00      	cmp	r3, #0
 8016940:	d105      	bne.n	801694e <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8016942:	683a      	ldr	r2, [r7, #0]
 8016944:	4907      	ldr	r1, [pc, #28]	; (8016964 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8016946:	4808      	ldr	r0, [pc, #32]	; (8016968 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8016948:	f7ff fd22 	bl	8016390 <USBD_GetString>
 801694c:	e004      	b.n	8016958 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801694e:	683a      	ldr	r2, [r7, #0]
 8016950:	4904      	ldr	r1, [pc, #16]	; (8016964 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8016952:	4805      	ldr	r0, [pc, #20]	; (8016968 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8016954:	f7ff fd1c 	bl	8016390 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016958:	4b02      	ldr	r3, [pc, #8]	; (8016964 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 801695a:	4618      	mov	r0, r3
 801695c:	3708      	adds	r7, #8
 801695e:	46bd      	mov	sp, r7
 8016960:	bd80      	pop	{r7, pc}
 8016962:	bf00      	nop
 8016964:	240028d0 	.word	0x240028d0
 8016968:	080184c8 	.word	0x080184c8

0801696c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801696c:	b580      	push	{r7, lr}
 801696e:	b084      	sub	sp, #16
 8016970:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016972:	4b0f      	ldr	r3, [pc, #60]	; (80169b0 <Get_SerialNum+0x44>)
 8016974:	681b      	ldr	r3, [r3, #0]
 8016976:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016978:	4b0e      	ldr	r3, [pc, #56]	; (80169b4 <Get_SerialNum+0x48>)
 801697a:	681b      	ldr	r3, [r3, #0]
 801697c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801697e:	4b0e      	ldr	r3, [pc, #56]	; (80169b8 <Get_SerialNum+0x4c>)
 8016980:	681b      	ldr	r3, [r3, #0]
 8016982:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016984:	68fa      	ldr	r2, [r7, #12]
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	4413      	add	r3, r2
 801698a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801698c:	68fb      	ldr	r3, [r7, #12]
 801698e:	2b00      	cmp	r3, #0
 8016990:	d009      	beq.n	80169a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016992:	2208      	movs	r2, #8
 8016994:	4909      	ldr	r1, [pc, #36]	; (80169bc <Get_SerialNum+0x50>)
 8016996:	68f8      	ldr	r0, [r7, #12]
 8016998:	f000 f814 	bl	80169c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801699c:	2204      	movs	r2, #4
 801699e:	4908      	ldr	r1, [pc, #32]	; (80169c0 <Get_SerialNum+0x54>)
 80169a0:	68b8      	ldr	r0, [r7, #8]
 80169a2:	f000 f80f 	bl	80169c4 <IntToUnicode>
  }
}
 80169a6:	bf00      	nop
 80169a8:	3710      	adds	r7, #16
 80169aa:	46bd      	mov	sp, r7
 80169ac:	bd80      	pop	{r7, pc}
 80169ae:	bf00      	nop
 80169b0:	1ff1e800 	.word	0x1ff1e800
 80169b4:	1ff1e804 	.word	0x1ff1e804
 80169b8:	1ff1e808 	.word	0x1ff1e808
 80169bc:	240000e6 	.word	0x240000e6
 80169c0:	240000f6 	.word	0x240000f6

080169c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80169c4:	b480      	push	{r7}
 80169c6:	b087      	sub	sp, #28
 80169c8:	af00      	add	r7, sp, #0
 80169ca:	60f8      	str	r0, [r7, #12]
 80169cc:	60b9      	str	r1, [r7, #8]
 80169ce:	4613      	mov	r3, r2
 80169d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80169d2:	2300      	movs	r3, #0
 80169d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80169d6:	2300      	movs	r3, #0
 80169d8:	75fb      	strb	r3, [r7, #23]
 80169da:	e027      	b.n	8016a2c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80169dc:	68fb      	ldr	r3, [r7, #12]
 80169de:	0f1b      	lsrs	r3, r3, #28
 80169e0:	2b09      	cmp	r3, #9
 80169e2:	d80b      	bhi.n	80169fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80169e4:	68fb      	ldr	r3, [r7, #12]
 80169e6:	0f1b      	lsrs	r3, r3, #28
 80169e8:	b2da      	uxtb	r2, r3
 80169ea:	7dfb      	ldrb	r3, [r7, #23]
 80169ec:	005b      	lsls	r3, r3, #1
 80169ee:	4619      	mov	r1, r3
 80169f0:	68bb      	ldr	r3, [r7, #8]
 80169f2:	440b      	add	r3, r1
 80169f4:	3230      	adds	r2, #48	; 0x30
 80169f6:	b2d2      	uxtb	r2, r2
 80169f8:	701a      	strb	r2, [r3, #0]
 80169fa:	e00a      	b.n	8016a12 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80169fc:	68fb      	ldr	r3, [r7, #12]
 80169fe:	0f1b      	lsrs	r3, r3, #28
 8016a00:	b2da      	uxtb	r2, r3
 8016a02:	7dfb      	ldrb	r3, [r7, #23]
 8016a04:	005b      	lsls	r3, r3, #1
 8016a06:	4619      	mov	r1, r3
 8016a08:	68bb      	ldr	r3, [r7, #8]
 8016a0a:	440b      	add	r3, r1
 8016a0c:	3237      	adds	r2, #55	; 0x37
 8016a0e:	b2d2      	uxtb	r2, r2
 8016a10:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016a12:	68fb      	ldr	r3, [r7, #12]
 8016a14:	011b      	lsls	r3, r3, #4
 8016a16:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016a18:	7dfb      	ldrb	r3, [r7, #23]
 8016a1a:	005b      	lsls	r3, r3, #1
 8016a1c:	3301      	adds	r3, #1
 8016a1e:	68ba      	ldr	r2, [r7, #8]
 8016a20:	4413      	add	r3, r2
 8016a22:	2200      	movs	r2, #0
 8016a24:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016a26:	7dfb      	ldrb	r3, [r7, #23]
 8016a28:	3301      	adds	r3, #1
 8016a2a:	75fb      	strb	r3, [r7, #23]
 8016a2c:	7dfa      	ldrb	r2, [r7, #23]
 8016a2e:	79fb      	ldrb	r3, [r7, #7]
 8016a30:	429a      	cmp	r2, r3
 8016a32:	d3d3      	bcc.n	80169dc <IntToUnicode+0x18>
  }
}
 8016a34:	bf00      	nop
 8016a36:	bf00      	nop
 8016a38:	371c      	adds	r7, #28
 8016a3a:	46bd      	mov	sp, r7
 8016a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a40:	4770      	bx	lr
	...

08016a44 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016a44:	b580      	push	{r7, lr}
 8016a46:	b0b2      	sub	sp, #200	; 0xc8
 8016a48:	af00      	add	r7, sp, #0
 8016a4a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8016a4c:	f107 0310 	add.w	r3, r7, #16
 8016a50:	22b8      	movs	r2, #184	; 0xb8
 8016a52:	2100      	movs	r1, #0
 8016a54:	4618      	mov	r0, r3
 8016a56:	f000 fb4f 	bl	80170f8 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	681b      	ldr	r3, [r3, #0]
 8016a5e:	4a1a      	ldr	r2, [pc, #104]	; (8016ac8 <HAL_PCD_MspInit+0x84>)
 8016a60:	4293      	cmp	r3, r2
 8016a62:	d12c      	bne.n	8016abe <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8016a64:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8016a68:	f04f 0300 	mov.w	r3, #0
 8016a6c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8016a70:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8016a74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8016a78:	f107 0310 	add.w	r3, r7, #16
 8016a7c:	4618      	mov	r0, r3
 8016a7e:	f7f3 fed3 	bl	800a828 <HAL_RCCEx_PeriphCLKConfig>
 8016a82:	4603      	mov	r3, r0
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d001      	beq.n	8016a8c <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8016a88:	f7eb ff50 	bl	800292c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8016a8c:	f7f2 feec 	bl	8009868 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8016a90:	4b0e      	ldr	r3, [pc, #56]	; (8016acc <HAL_PCD_MspInit+0x88>)
 8016a92:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016a96:	4a0d      	ldr	r2, [pc, #52]	; (8016acc <HAL_PCD_MspInit+0x88>)
 8016a98:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8016a9c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8016aa0:	4b0a      	ldr	r3, [pc, #40]	; (8016acc <HAL_PCD_MspInit+0x88>)
 8016aa2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016aaa:	60fb      	str	r3, [r7, #12]
 8016aac:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8016aae:	2200      	movs	r2, #0
 8016ab0:	2100      	movs	r1, #0
 8016ab2:	204d      	movs	r0, #77	; 0x4d
 8016ab4:	f7ee fc5d 	bl	8005372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8016ab8:	204d      	movs	r0, #77	; 0x4d
 8016aba:	f7ee fc74 	bl	80053a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8016abe:	bf00      	nop
 8016ac0:	37c8      	adds	r7, #200	; 0xc8
 8016ac2:	46bd      	mov	sp, r7
 8016ac4:	bd80      	pop	{r7, pc}
 8016ac6:	bf00      	nop
 8016ac8:	40040000 	.word	0x40040000
 8016acc:	58024400 	.word	0x58024400

08016ad0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ad0:	b580      	push	{r7, lr}
 8016ad2:	b082      	sub	sp, #8
 8016ad4:	af00      	add	r7, sp, #0
 8016ad6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8016ae4:	4619      	mov	r1, r3
 8016ae6:	4610      	mov	r0, r2
 8016ae8:	f7fe faed 	bl	80150c6 <USBD_LL_SetupStage>
}
 8016aec:	bf00      	nop
 8016aee:	3708      	adds	r7, #8
 8016af0:	46bd      	mov	sp, r7
 8016af2:	bd80      	pop	{r7, pc}

08016af4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016af4:	b580      	push	{r7, lr}
 8016af6:	b082      	sub	sp, #8
 8016af8:	af00      	add	r7, sp, #0
 8016afa:	6078      	str	r0, [r7, #4]
 8016afc:	460b      	mov	r3, r1
 8016afe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016b06:	78fa      	ldrb	r2, [r7, #3]
 8016b08:	6879      	ldr	r1, [r7, #4]
 8016b0a:	4613      	mov	r3, r2
 8016b0c:	00db      	lsls	r3, r3, #3
 8016b0e:	4413      	add	r3, r2
 8016b10:	009b      	lsls	r3, r3, #2
 8016b12:	440b      	add	r3, r1
 8016b14:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8016b18:	681a      	ldr	r2, [r3, #0]
 8016b1a:	78fb      	ldrb	r3, [r7, #3]
 8016b1c:	4619      	mov	r1, r3
 8016b1e:	f7fe fb27 	bl	8015170 <USBD_LL_DataOutStage>
}
 8016b22:	bf00      	nop
 8016b24:	3708      	adds	r7, #8
 8016b26:	46bd      	mov	sp, r7
 8016b28:	bd80      	pop	{r7, pc}

08016b2a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b2a:	b580      	push	{r7, lr}
 8016b2c:	b082      	sub	sp, #8
 8016b2e:	af00      	add	r7, sp, #0
 8016b30:	6078      	str	r0, [r7, #4]
 8016b32:	460b      	mov	r3, r1
 8016b34:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016b3c:	78fa      	ldrb	r2, [r7, #3]
 8016b3e:	6879      	ldr	r1, [r7, #4]
 8016b40:	4613      	mov	r3, r2
 8016b42:	00db      	lsls	r3, r3, #3
 8016b44:	4413      	add	r3, r2
 8016b46:	009b      	lsls	r3, r3, #2
 8016b48:	440b      	add	r3, r1
 8016b4a:	3348      	adds	r3, #72	; 0x48
 8016b4c:	681a      	ldr	r2, [r3, #0]
 8016b4e:	78fb      	ldrb	r3, [r7, #3]
 8016b50:	4619      	mov	r1, r3
 8016b52:	f7fe fbc0 	bl	80152d6 <USBD_LL_DataInStage>
}
 8016b56:	bf00      	nop
 8016b58:	3708      	adds	r7, #8
 8016b5a:	46bd      	mov	sp, r7
 8016b5c:	bd80      	pop	{r7, pc}

08016b5e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b5e:	b580      	push	{r7, lr}
 8016b60:	b082      	sub	sp, #8
 8016b62:	af00      	add	r7, sp, #0
 8016b64:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016b6c:	4618      	mov	r0, r3
 8016b6e:	f7fe fcfa 	bl	8015566 <USBD_LL_SOF>
}
 8016b72:	bf00      	nop
 8016b74:	3708      	adds	r7, #8
 8016b76:	46bd      	mov	sp, r7
 8016b78:	bd80      	pop	{r7, pc}

08016b7a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016b7a:	b580      	push	{r7, lr}
 8016b7c:	b084      	sub	sp, #16
 8016b7e:	af00      	add	r7, sp, #0
 8016b80:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016b82:	2301      	movs	r3, #1
 8016b84:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	691b      	ldr	r3, [r3, #16]
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	d102      	bne.n	8016b94 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8016b8e:	2300      	movs	r3, #0
 8016b90:	73fb      	strb	r3, [r7, #15]
 8016b92:	e008      	b.n	8016ba6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	691b      	ldr	r3, [r3, #16]
 8016b98:	2b02      	cmp	r3, #2
 8016b9a:	d102      	bne.n	8016ba2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016b9c:	2301      	movs	r3, #1
 8016b9e:	73fb      	strb	r3, [r7, #15]
 8016ba0:	e001      	b.n	8016ba6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8016ba2:	f7eb fec3 	bl	800292c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016bac:	7bfa      	ldrb	r2, [r7, #15]
 8016bae:	4611      	mov	r1, r2
 8016bb0:	4618      	mov	r0, r3
 8016bb2:	f7fe fc94 	bl	80154de <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016bbc:	4618      	mov	r0, r3
 8016bbe:	f7fe fc3c 	bl	801543a <USBD_LL_Reset>
}
 8016bc2:	bf00      	nop
 8016bc4:	3710      	adds	r7, #16
 8016bc6:	46bd      	mov	sp, r7
 8016bc8:	bd80      	pop	{r7, pc}
	...

08016bcc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016bcc:	b580      	push	{r7, lr}
 8016bce:	b082      	sub	sp, #8
 8016bd0:	af00      	add	r7, sp, #0
 8016bd2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016bda:	4618      	mov	r0, r3
 8016bdc:	f7fe fc8f 	bl	80154fe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	681b      	ldr	r3, [r3, #0]
 8016be4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016be8:	681b      	ldr	r3, [r3, #0]
 8016bea:	687a      	ldr	r2, [r7, #4]
 8016bec:	6812      	ldr	r2, [r2, #0]
 8016bee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016bf2:	f043 0301 	orr.w	r3, r3, #1
 8016bf6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	6a1b      	ldr	r3, [r3, #32]
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	d005      	beq.n	8016c0c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016c00:	4b04      	ldr	r3, [pc, #16]	; (8016c14 <HAL_PCD_SuspendCallback+0x48>)
 8016c02:	691b      	ldr	r3, [r3, #16]
 8016c04:	4a03      	ldr	r2, [pc, #12]	; (8016c14 <HAL_PCD_SuspendCallback+0x48>)
 8016c06:	f043 0306 	orr.w	r3, r3, #6
 8016c0a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016c0c:	bf00      	nop
 8016c0e:	3708      	adds	r7, #8
 8016c10:	46bd      	mov	sp, r7
 8016c12:	bd80      	pop	{r7, pc}
 8016c14:	e000ed00 	.word	0xe000ed00

08016c18 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c18:	b580      	push	{r7, lr}
 8016c1a:	b082      	sub	sp, #8
 8016c1c:	af00      	add	r7, sp, #0
 8016c1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016c26:	4618      	mov	r0, r3
 8016c28:	f7fe fc85 	bl	8015536 <USBD_LL_Resume>
}
 8016c2c:	bf00      	nop
 8016c2e:	3708      	adds	r7, #8
 8016c30:	46bd      	mov	sp, r7
 8016c32:	bd80      	pop	{r7, pc}

08016c34 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c34:	b580      	push	{r7, lr}
 8016c36:	b082      	sub	sp, #8
 8016c38:	af00      	add	r7, sp, #0
 8016c3a:	6078      	str	r0, [r7, #4]
 8016c3c:	460b      	mov	r3, r1
 8016c3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016c46:	78fa      	ldrb	r2, [r7, #3]
 8016c48:	4611      	mov	r1, r2
 8016c4a:	4618      	mov	r0, r3
 8016c4c:	f7fe fcdd 	bl	801560a <USBD_LL_IsoOUTIncomplete>
}
 8016c50:	bf00      	nop
 8016c52:	3708      	adds	r7, #8
 8016c54:	46bd      	mov	sp, r7
 8016c56:	bd80      	pop	{r7, pc}

08016c58 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c58:	b580      	push	{r7, lr}
 8016c5a:	b082      	sub	sp, #8
 8016c5c:	af00      	add	r7, sp, #0
 8016c5e:	6078      	str	r0, [r7, #4]
 8016c60:	460b      	mov	r3, r1
 8016c62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016c6a:	78fa      	ldrb	r2, [r7, #3]
 8016c6c:	4611      	mov	r1, r2
 8016c6e:	4618      	mov	r0, r3
 8016c70:	f7fe fc99 	bl	80155a6 <USBD_LL_IsoINIncomplete>
}
 8016c74:	bf00      	nop
 8016c76:	3708      	adds	r7, #8
 8016c78:	46bd      	mov	sp, r7
 8016c7a:	bd80      	pop	{r7, pc}

08016c7c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c7c:	b580      	push	{r7, lr}
 8016c7e:	b082      	sub	sp, #8
 8016c80:	af00      	add	r7, sp, #0
 8016c82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016c8a:	4618      	mov	r0, r3
 8016c8c:	f7fe fcef 	bl	801566e <USBD_LL_DevConnected>
}
 8016c90:	bf00      	nop
 8016c92:	3708      	adds	r7, #8
 8016c94:	46bd      	mov	sp, r7
 8016c96:	bd80      	pop	{r7, pc}

08016c98 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016c98:	b580      	push	{r7, lr}
 8016c9a:	b082      	sub	sp, #8
 8016c9c:	af00      	add	r7, sp, #0
 8016c9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016ca6:	4618      	mov	r0, r3
 8016ca8:	f7fe fcec 	bl	8015684 <USBD_LL_DevDisconnected>
}
 8016cac:	bf00      	nop
 8016cae:	3708      	adds	r7, #8
 8016cb0:	46bd      	mov	sp, r7
 8016cb2:	bd80      	pop	{r7, pc}

08016cb4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016cb4:	b580      	push	{r7, lr}
 8016cb6:	b082      	sub	sp, #8
 8016cb8:	af00      	add	r7, sp, #0
 8016cba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	781b      	ldrb	r3, [r3, #0]
 8016cc0:	2b01      	cmp	r3, #1
 8016cc2:	d140      	bne.n	8016d46 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8016cc4:	4a22      	ldr	r2, [pc, #136]	; (8016d50 <USBD_LL_Init+0x9c>)
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	4a20      	ldr	r2, [pc, #128]	; (8016d50 <USBD_LL_Init+0x9c>)
 8016cd0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8016cd4:	4b1e      	ldr	r3, [pc, #120]	; (8016d50 <USBD_LL_Init+0x9c>)
 8016cd6:	4a1f      	ldr	r2, [pc, #124]	; (8016d54 <USBD_LL_Init+0xa0>)
 8016cd8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8016cda:	4b1d      	ldr	r3, [pc, #116]	; (8016d50 <USBD_LL_Init+0x9c>)
 8016cdc:	2209      	movs	r2, #9
 8016cde:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8016ce0:	4b1b      	ldr	r3, [pc, #108]	; (8016d50 <USBD_LL_Init+0x9c>)
 8016ce2:	2202      	movs	r2, #2
 8016ce4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8016ce6:	4b1a      	ldr	r3, [pc, #104]	; (8016d50 <USBD_LL_Init+0x9c>)
 8016ce8:	2200      	movs	r2, #0
 8016cea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8016cec:	4b18      	ldr	r3, [pc, #96]	; (8016d50 <USBD_LL_Init+0x9c>)
 8016cee:	2202      	movs	r2, #2
 8016cf0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8016cf2:	4b17      	ldr	r3, [pc, #92]	; (8016d50 <USBD_LL_Init+0x9c>)
 8016cf4:	2200      	movs	r2, #0
 8016cf6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8016cf8:	4b15      	ldr	r3, [pc, #84]	; (8016d50 <USBD_LL_Init+0x9c>)
 8016cfa:	2200      	movs	r2, #0
 8016cfc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8016cfe:	4b14      	ldr	r3, [pc, #80]	; (8016d50 <USBD_LL_Init+0x9c>)
 8016d00:	2200      	movs	r2, #0
 8016d02:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8016d04:	4b12      	ldr	r3, [pc, #72]	; (8016d50 <USBD_LL_Init+0x9c>)
 8016d06:	2200      	movs	r2, #0
 8016d08:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8016d0a:	4b11      	ldr	r3, [pc, #68]	; (8016d50 <USBD_LL_Init+0x9c>)
 8016d0c:	2200      	movs	r2, #0
 8016d0e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8016d10:	4b0f      	ldr	r3, [pc, #60]	; (8016d50 <USBD_LL_Init+0x9c>)
 8016d12:	2200      	movs	r2, #0
 8016d14:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8016d16:	480e      	ldr	r0, [pc, #56]	; (8016d50 <USBD_LL_Init+0x9c>)
 8016d18:	f7f1 fab3 	bl	8008282 <HAL_PCD_Init>
 8016d1c:	4603      	mov	r3, r0
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d001      	beq.n	8016d26 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8016d22:	f7eb fe03 	bl	800292c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8016d26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8016d2a:	4809      	ldr	r0, [pc, #36]	; (8016d50 <USBD_LL_Init+0x9c>)
 8016d2c:	f7f2 fd21 	bl	8009772 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8016d30:	2280      	movs	r2, #128	; 0x80
 8016d32:	2100      	movs	r1, #0
 8016d34:	4806      	ldr	r0, [pc, #24]	; (8016d50 <USBD_LL_Init+0x9c>)
 8016d36:	f7f2 fcd5 	bl	80096e4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8016d3a:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8016d3e:	2101      	movs	r1, #1
 8016d40:	4803      	ldr	r0, [pc, #12]	; (8016d50 <USBD_LL_Init+0x9c>)
 8016d42:	f7f2 fccf 	bl	80096e4 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8016d46:	2300      	movs	r3, #0
}
 8016d48:	4618      	mov	r0, r3
 8016d4a:	3708      	adds	r7, #8
 8016d4c:	46bd      	mov	sp, r7
 8016d4e:	bd80      	pop	{r7, pc}
 8016d50:	24002ad0 	.word	0x24002ad0
 8016d54:	40040000 	.word	0x40040000

08016d58 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016d58:	b580      	push	{r7, lr}
 8016d5a:	b084      	sub	sp, #16
 8016d5c:	af00      	add	r7, sp, #0
 8016d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d60:	2300      	movs	r3, #0
 8016d62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d64:	2300      	movs	r3, #0
 8016d66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016d6e:	4618      	mov	r0, r3
 8016d70:	f7f1 fbab 	bl	80084ca <HAL_PCD_Start>
 8016d74:	4603      	mov	r3, r0
 8016d76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d78:	7bfb      	ldrb	r3, [r7, #15]
 8016d7a:	4618      	mov	r0, r3
 8016d7c:	f000 f942 	bl	8017004 <USBD_Get_USB_Status>
 8016d80:	4603      	mov	r3, r0
 8016d82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016d84:	7bbb      	ldrb	r3, [r7, #14]
}
 8016d86:	4618      	mov	r0, r3
 8016d88:	3710      	adds	r7, #16
 8016d8a:	46bd      	mov	sp, r7
 8016d8c:	bd80      	pop	{r7, pc}

08016d8e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016d8e:	b580      	push	{r7, lr}
 8016d90:	b084      	sub	sp, #16
 8016d92:	af00      	add	r7, sp, #0
 8016d94:	6078      	str	r0, [r7, #4]
 8016d96:	4608      	mov	r0, r1
 8016d98:	4611      	mov	r1, r2
 8016d9a:	461a      	mov	r2, r3
 8016d9c:	4603      	mov	r3, r0
 8016d9e:	70fb      	strb	r3, [r7, #3]
 8016da0:	460b      	mov	r3, r1
 8016da2:	70bb      	strb	r3, [r7, #2]
 8016da4:	4613      	mov	r3, r2
 8016da6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016da8:	2300      	movs	r3, #0
 8016daa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016dac:	2300      	movs	r3, #0
 8016dae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016db6:	78bb      	ldrb	r3, [r7, #2]
 8016db8:	883a      	ldrh	r2, [r7, #0]
 8016dba:	78f9      	ldrb	r1, [r7, #3]
 8016dbc:	f7f2 f8ab 	bl	8008f16 <HAL_PCD_EP_Open>
 8016dc0:	4603      	mov	r3, r0
 8016dc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016dc4:	7bfb      	ldrb	r3, [r7, #15]
 8016dc6:	4618      	mov	r0, r3
 8016dc8:	f000 f91c 	bl	8017004 <USBD_Get_USB_Status>
 8016dcc:	4603      	mov	r3, r0
 8016dce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016dd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8016dd2:	4618      	mov	r0, r3
 8016dd4:	3710      	adds	r7, #16
 8016dd6:	46bd      	mov	sp, r7
 8016dd8:	bd80      	pop	{r7, pc}

08016dda <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016dda:	b580      	push	{r7, lr}
 8016ddc:	b084      	sub	sp, #16
 8016dde:	af00      	add	r7, sp, #0
 8016de0:	6078      	str	r0, [r7, #4]
 8016de2:	460b      	mov	r3, r1
 8016de4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016de6:	2300      	movs	r3, #0
 8016de8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016dea:	2300      	movs	r3, #0
 8016dec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016df4:	78fa      	ldrb	r2, [r7, #3]
 8016df6:	4611      	mov	r1, r2
 8016df8:	4618      	mov	r0, r3
 8016dfa:	f7f2 f8f4 	bl	8008fe6 <HAL_PCD_EP_Close>
 8016dfe:	4603      	mov	r3, r0
 8016e00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016e02:	7bfb      	ldrb	r3, [r7, #15]
 8016e04:	4618      	mov	r0, r3
 8016e06:	f000 f8fd 	bl	8017004 <USBD_Get_USB_Status>
 8016e0a:	4603      	mov	r3, r0
 8016e0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016e0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8016e10:	4618      	mov	r0, r3
 8016e12:	3710      	adds	r7, #16
 8016e14:	46bd      	mov	sp, r7
 8016e16:	bd80      	pop	{r7, pc}

08016e18 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016e18:	b580      	push	{r7, lr}
 8016e1a:	b084      	sub	sp, #16
 8016e1c:	af00      	add	r7, sp, #0
 8016e1e:	6078      	str	r0, [r7, #4]
 8016e20:	460b      	mov	r3, r1
 8016e22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e24:	2300      	movs	r3, #0
 8016e26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e28:	2300      	movs	r3, #0
 8016e2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016e32:	78fa      	ldrb	r2, [r7, #3]
 8016e34:	4611      	mov	r1, r2
 8016e36:	4618      	mov	r0, r3
 8016e38:	f7f2 f9ae 	bl	8009198 <HAL_PCD_EP_SetStall>
 8016e3c:	4603      	mov	r3, r0
 8016e3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016e40:	7bfb      	ldrb	r3, [r7, #15]
 8016e42:	4618      	mov	r0, r3
 8016e44:	f000 f8de 	bl	8017004 <USBD_Get_USB_Status>
 8016e48:	4603      	mov	r3, r0
 8016e4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016e4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8016e4e:	4618      	mov	r0, r3
 8016e50:	3710      	adds	r7, #16
 8016e52:	46bd      	mov	sp, r7
 8016e54:	bd80      	pop	{r7, pc}

08016e56 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016e56:	b580      	push	{r7, lr}
 8016e58:	b084      	sub	sp, #16
 8016e5a:	af00      	add	r7, sp, #0
 8016e5c:	6078      	str	r0, [r7, #4]
 8016e5e:	460b      	mov	r3, r1
 8016e60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016e62:	2300      	movs	r3, #0
 8016e64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e66:	2300      	movs	r3, #0
 8016e68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016e70:	78fa      	ldrb	r2, [r7, #3]
 8016e72:	4611      	mov	r1, r2
 8016e74:	4618      	mov	r0, r3
 8016e76:	f7f2 f9f3 	bl	8009260 <HAL_PCD_EP_ClrStall>
 8016e7a:	4603      	mov	r3, r0
 8016e7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016e7e:	7bfb      	ldrb	r3, [r7, #15]
 8016e80:	4618      	mov	r0, r3
 8016e82:	f000 f8bf 	bl	8017004 <USBD_Get_USB_Status>
 8016e86:	4603      	mov	r3, r0
 8016e88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016e8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8016e8c:	4618      	mov	r0, r3
 8016e8e:	3710      	adds	r7, #16
 8016e90:	46bd      	mov	sp, r7
 8016e92:	bd80      	pop	{r7, pc}

08016e94 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016e94:	b480      	push	{r7}
 8016e96:	b085      	sub	sp, #20
 8016e98:	af00      	add	r7, sp, #0
 8016e9a:	6078      	str	r0, [r7, #4]
 8016e9c:	460b      	mov	r3, r1
 8016e9e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016ea6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016ea8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016eac:	2b00      	cmp	r3, #0
 8016eae:	da0b      	bge.n	8016ec8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016eb0:	78fb      	ldrb	r3, [r7, #3]
 8016eb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016eb6:	68f9      	ldr	r1, [r7, #12]
 8016eb8:	4613      	mov	r3, r2
 8016eba:	00db      	lsls	r3, r3, #3
 8016ebc:	4413      	add	r3, r2
 8016ebe:	009b      	lsls	r3, r3, #2
 8016ec0:	440b      	add	r3, r1
 8016ec2:	333e      	adds	r3, #62	; 0x3e
 8016ec4:	781b      	ldrb	r3, [r3, #0]
 8016ec6:	e00b      	b.n	8016ee0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016ec8:	78fb      	ldrb	r3, [r7, #3]
 8016eca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016ece:	68f9      	ldr	r1, [r7, #12]
 8016ed0:	4613      	mov	r3, r2
 8016ed2:	00db      	lsls	r3, r3, #3
 8016ed4:	4413      	add	r3, r2
 8016ed6:	009b      	lsls	r3, r3, #2
 8016ed8:	440b      	add	r3, r1
 8016eda:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8016ede:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016ee0:	4618      	mov	r0, r3
 8016ee2:	3714      	adds	r7, #20
 8016ee4:	46bd      	mov	sp, r7
 8016ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eea:	4770      	bx	lr

08016eec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016eec:	b580      	push	{r7, lr}
 8016eee:	b084      	sub	sp, #16
 8016ef0:	af00      	add	r7, sp, #0
 8016ef2:	6078      	str	r0, [r7, #4]
 8016ef4:	460b      	mov	r3, r1
 8016ef6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ef8:	2300      	movs	r3, #0
 8016efa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016efc:	2300      	movs	r3, #0
 8016efe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016f06:	78fa      	ldrb	r2, [r7, #3]
 8016f08:	4611      	mov	r1, r2
 8016f0a:	4618      	mov	r0, r3
 8016f0c:	f7f1 ffde 	bl	8008ecc <HAL_PCD_SetAddress>
 8016f10:	4603      	mov	r3, r0
 8016f12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016f14:	7bfb      	ldrb	r3, [r7, #15]
 8016f16:	4618      	mov	r0, r3
 8016f18:	f000 f874 	bl	8017004 <USBD_Get_USB_Status>
 8016f1c:	4603      	mov	r3, r0
 8016f1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016f20:	7bbb      	ldrb	r3, [r7, #14]
}
 8016f22:	4618      	mov	r0, r3
 8016f24:	3710      	adds	r7, #16
 8016f26:	46bd      	mov	sp, r7
 8016f28:	bd80      	pop	{r7, pc}

08016f2a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016f2a:	b580      	push	{r7, lr}
 8016f2c:	b086      	sub	sp, #24
 8016f2e:	af00      	add	r7, sp, #0
 8016f30:	60f8      	str	r0, [r7, #12]
 8016f32:	607a      	str	r2, [r7, #4]
 8016f34:	603b      	str	r3, [r7, #0]
 8016f36:	460b      	mov	r3, r1
 8016f38:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016f3a:	2300      	movs	r3, #0
 8016f3c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016f3e:	2300      	movs	r3, #0
 8016f40:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016f42:	68fb      	ldr	r3, [r7, #12]
 8016f44:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016f48:	7af9      	ldrb	r1, [r7, #11]
 8016f4a:	683b      	ldr	r3, [r7, #0]
 8016f4c:	687a      	ldr	r2, [r7, #4]
 8016f4e:	f7f2 f8e8 	bl	8009122 <HAL_PCD_EP_Transmit>
 8016f52:	4603      	mov	r3, r0
 8016f54:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016f56:	7dfb      	ldrb	r3, [r7, #23]
 8016f58:	4618      	mov	r0, r3
 8016f5a:	f000 f853 	bl	8017004 <USBD_Get_USB_Status>
 8016f5e:	4603      	mov	r3, r0
 8016f60:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016f62:	7dbb      	ldrb	r3, [r7, #22]
}
 8016f64:	4618      	mov	r0, r3
 8016f66:	3718      	adds	r7, #24
 8016f68:	46bd      	mov	sp, r7
 8016f6a:	bd80      	pop	{r7, pc}

08016f6c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016f6c:	b580      	push	{r7, lr}
 8016f6e:	b086      	sub	sp, #24
 8016f70:	af00      	add	r7, sp, #0
 8016f72:	60f8      	str	r0, [r7, #12]
 8016f74:	607a      	str	r2, [r7, #4]
 8016f76:	603b      	str	r3, [r7, #0]
 8016f78:	460b      	mov	r3, r1
 8016f7a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016f7c:	2300      	movs	r3, #0
 8016f7e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016f80:	2300      	movs	r3, #0
 8016f82:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016f84:	68fb      	ldr	r3, [r7, #12]
 8016f86:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016f8a:	7af9      	ldrb	r1, [r7, #11]
 8016f8c:	683b      	ldr	r3, [r7, #0]
 8016f8e:	687a      	ldr	r2, [r7, #4]
 8016f90:	f7f2 f873 	bl	800907a <HAL_PCD_EP_Receive>
 8016f94:	4603      	mov	r3, r0
 8016f96:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016f98:	7dfb      	ldrb	r3, [r7, #23]
 8016f9a:	4618      	mov	r0, r3
 8016f9c:	f000 f832 	bl	8017004 <USBD_Get_USB_Status>
 8016fa0:	4603      	mov	r3, r0
 8016fa2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016fa4:	7dbb      	ldrb	r3, [r7, #22]
}
 8016fa6:	4618      	mov	r0, r3
 8016fa8:	3718      	adds	r7, #24
 8016faa:	46bd      	mov	sp, r7
 8016fac:	bd80      	pop	{r7, pc}

08016fae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016fae:	b580      	push	{r7, lr}
 8016fb0:	b082      	sub	sp, #8
 8016fb2:	af00      	add	r7, sp, #0
 8016fb4:	6078      	str	r0, [r7, #4]
 8016fb6:	460b      	mov	r3, r1
 8016fb8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016fc0:	78fa      	ldrb	r2, [r7, #3]
 8016fc2:	4611      	mov	r1, r2
 8016fc4:	4618      	mov	r0, r3
 8016fc6:	f7f2 f894 	bl	80090f2 <HAL_PCD_EP_GetRxCount>
 8016fca:	4603      	mov	r3, r0
}
 8016fcc:	4618      	mov	r0, r3
 8016fce:	3708      	adds	r7, #8
 8016fd0:	46bd      	mov	sp, r7
 8016fd2:	bd80      	pop	{r7, pc}

08016fd4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016fd4:	b480      	push	{r7}
 8016fd6:	b083      	sub	sp, #12
 8016fd8:	af00      	add	r7, sp, #0
 8016fda:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016fdc:	4b03      	ldr	r3, [pc, #12]	; (8016fec <USBD_static_malloc+0x18>)
}
 8016fde:	4618      	mov	r0, r3
 8016fe0:	370c      	adds	r7, #12
 8016fe2:	46bd      	mov	sp, r7
 8016fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fe8:	4770      	bx	lr
 8016fea:	bf00      	nop
 8016fec:	24002fdc 	.word	0x24002fdc

08016ff0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016ff0:	b480      	push	{r7}
 8016ff2:	b083      	sub	sp, #12
 8016ff4:	af00      	add	r7, sp, #0
 8016ff6:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8016ff8:	bf00      	nop
 8016ffa:	370c      	adds	r7, #12
 8016ffc:	46bd      	mov	sp, r7
 8016ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017002:	4770      	bx	lr

08017004 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017004:	b480      	push	{r7}
 8017006:	b085      	sub	sp, #20
 8017008:	af00      	add	r7, sp, #0
 801700a:	4603      	mov	r3, r0
 801700c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801700e:	2300      	movs	r3, #0
 8017010:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017012:	79fb      	ldrb	r3, [r7, #7]
 8017014:	2b03      	cmp	r3, #3
 8017016:	d817      	bhi.n	8017048 <USBD_Get_USB_Status+0x44>
 8017018:	a201      	add	r2, pc, #4	; (adr r2, 8017020 <USBD_Get_USB_Status+0x1c>)
 801701a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801701e:	bf00      	nop
 8017020:	08017031 	.word	0x08017031
 8017024:	08017037 	.word	0x08017037
 8017028:	0801703d 	.word	0x0801703d
 801702c:	08017043 	.word	0x08017043
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017030:	2300      	movs	r3, #0
 8017032:	73fb      	strb	r3, [r7, #15]
    break;
 8017034:	e00b      	b.n	801704e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017036:	2303      	movs	r3, #3
 8017038:	73fb      	strb	r3, [r7, #15]
    break;
 801703a:	e008      	b.n	801704e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801703c:	2301      	movs	r3, #1
 801703e:	73fb      	strb	r3, [r7, #15]
    break;
 8017040:	e005      	b.n	801704e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017042:	2303      	movs	r3, #3
 8017044:	73fb      	strb	r3, [r7, #15]
    break;
 8017046:	e002      	b.n	801704e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8017048:	2303      	movs	r3, #3
 801704a:	73fb      	strb	r3, [r7, #15]
    break;
 801704c:	bf00      	nop
  }
  return usb_status;
 801704e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017050:	4618      	mov	r0, r3
 8017052:	3714      	adds	r7, #20
 8017054:	46bd      	mov	sp, r7
 8017056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801705a:	4770      	bx	lr

0801705c <siprintf>:
 801705c:	b40e      	push	{r1, r2, r3}
 801705e:	b500      	push	{lr}
 8017060:	b09c      	sub	sp, #112	; 0x70
 8017062:	ab1d      	add	r3, sp, #116	; 0x74
 8017064:	9002      	str	r0, [sp, #8]
 8017066:	9006      	str	r0, [sp, #24]
 8017068:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801706c:	4809      	ldr	r0, [pc, #36]	; (8017094 <siprintf+0x38>)
 801706e:	9107      	str	r1, [sp, #28]
 8017070:	9104      	str	r1, [sp, #16]
 8017072:	4909      	ldr	r1, [pc, #36]	; (8017098 <siprintf+0x3c>)
 8017074:	f853 2b04 	ldr.w	r2, [r3], #4
 8017078:	9105      	str	r1, [sp, #20]
 801707a:	6800      	ldr	r0, [r0, #0]
 801707c:	9301      	str	r3, [sp, #4]
 801707e:	a902      	add	r1, sp, #8
 8017080:	f000 f9d6 	bl	8017430 <_svfiprintf_r>
 8017084:	9b02      	ldr	r3, [sp, #8]
 8017086:	2200      	movs	r2, #0
 8017088:	701a      	strb	r2, [r3, #0]
 801708a:	b01c      	add	sp, #112	; 0x70
 801708c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017090:	b003      	add	sp, #12
 8017092:	4770      	bx	lr
 8017094:	2400014c 	.word	0x2400014c
 8017098:	ffff0208 	.word	0xffff0208

0801709c <siscanf>:
 801709c:	b40e      	push	{r1, r2, r3}
 801709e:	b510      	push	{r4, lr}
 80170a0:	b09f      	sub	sp, #124	; 0x7c
 80170a2:	ac21      	add	r4, sp, #132	; 0x84
 80170a4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80170a8:	f854 2b04 	ldr.w	r2, [r4], #4
 80170ac:	9201      	str	r2, [sp, #4]
 80170ae:	f8ad 101c 	strh.w	r1, [sp, #28]
 80170b2:	9004      	str	r0, [sp, #16]
 80170b4:	9008      	str	r0, [sp, #32]
 80170b6:	f7e9 f935 	bl	8000324 <strlen>
 80170ba:	4b0c      	ldr	r3, [pc, #48]	; (80170ec <siscanf+0x50>)
 80170bc:	9005      	str	r0, [sp, #20]
 80170be:	9009      	str	r0, [sp, #36]	; 0x24
 80170c0:	930d      	str	r3, [sp, #52]	; 0x34
 80170c2:	480b      	ldr	r0, [pc, #44]	; (80170f0 <siscanf+0x54>)
 80170c4:	9a01      	ldr	r2, [sp, #4]
 80170c6:	6800      	ldr	r0, [r0, #0]
 80170c8:	9403      	str	r4, [sp, #12]
 80170ca:	2300      	movs	r3, #0
 80170cc:	9311      	str	r3, [sp, #68]	; 0x44
 80170ce:	9316      	str	r3, [sp, #88]	; 0x58
 80170d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80170d4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80170d8:	a904      	add	r1, sp, #16
 80170da:	4623      	mov	r3, r4
 80170dc:	f000 fb00 	bl	80176e0 <__ssvfiscanf_r>
 80170e0:	b01f      	add	sp, #124	; 0x7c
 80170e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80170e6:	b003      	add	sp, #12
 80170e8:	4770      	bx	lr
 80170ea:	bf00      	nop
 80170ec:	080170f5 	.word	0x080170f5
 80170f0:	2400014c 	.word	0x2400014c

080170f4 <__seofread>:
 80170f4:	2000      	movs	r0, #0
 80170f6:	4770      	bx	lr

080170f8 <memset>:
 80170f8:	4402      	add	r2, r0
 80170fa:	4603      	mov	r3, r0
 80170fc:	4293      	cmp	r3, r2
 80170fe:	d100      	bne.n	8017102 <memset+0xa>
 8017100:	4770      	bx	lr
 8017102:	f803 1b01 	strb.w	r1, [r3], #1
 8017106:	e7f9      	b.n	80170fc <memset+0x4>

08017108 <__errno>:
 8017108:	4b01      	ldr	r3, [pc, #4]	; (8017110 <__errno+0x8>)
 801710a:	6818      	ldr	r0, [r3, #0]
 801710c:	4770      	bx	lr
 801710e:	bf00      	nop
 8017110:	2400014c 	.word	0x2400014c

08017114 <__libc_init_array>:
 8017114:	b570      	push	{r4, r5, r6, lr}
 8017116:	4d0d      	ldr	r5, [pc, #52]	; (801714c <__libc_init_array+0x38>)
 8017118:	4c0d      	ldr	r4, [pc, #52]	; (8017150 <__libc_init_array+0x3c>)
 801711a:	1b64      	subs	r4, r4, r5
 801711c:	10a4      	asrs	r4, r4, #2
 801711e:	2600      	movs	r6, #0
 8017120:	42a6      	cmp	r6, r4
 8017122:	d109      	bne.n	8017138 <__libc_init_array+0x24>
 8017124:	4d0b      	ldr	r5, [pc, #44]	; (8017154 <__libc_init_array+0x40>)
 8017126:	4c0c      	ldr	r4, [pc, #48]	; (8017158 <__libc_init_array+0x44>)
 8017128:	f001 f8fe 	bl	8018328 <_init>
 801712c:	1b64      	subs	r4, r4, r5
 801712e:	10a4      	asrs	r4, r4, #2
 8017130:	2600      	movs	r6, #0
 8017132:	42a6      	cmp	r6, r4
 8017134:	d105      	bne.n	8017142 <__libc_init_array+0x2e>
 8017136:	bd70      	pop	{r4, r5, r6, pc}
 8017138:	f855 3b04 	ldr.w	r3, [r5], #4
 801713c:	4798      	blx	r3
 801713e:	3601      	adds	r6, #1
 8017140:	e7ee      	b.n	8017120 <__libc_init_array+0xc>
 8017142:	f855 3b04 	ldr.w	r3, [r5], #4
 8017146:	4798      	blx	r3
 8017148:	3601      	adds	r6, #1
 801714a:	e7f2      	b.n	8017132 <__libc_init_array+0x1e>
 801714c:	08018700 	.word	0x08018700
 8017150:	08018700 	.word	0x08018700
 8017154:	08018700 	.word	0x08018700
 8017158:	08018704 	.word	0x08018704

0801715c <__retarget_lock_acquire_recursive>:
 801715c:	4770      	bx	lr

0801715e <__retarget_lock_release_recursive>:
 801715e:	4770      	bx	lr

08017160 <strcpy>:
 8017160:	4603      	mov	r3, r0
 8017162:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017166:	f803 2b01 	strb.w	r2, [r3], #1
 801716a:	2a00      	cmp	r2, #0
 801716c:	d1f9      	bne.n	8017162 <strcpy+0x2>
 801716e:	4770      	bx	lr

08017170 <memcpy>:
 8017170:	440a      	add	r2, r1
 8017172:	4291      	cmp	r1, r2
 8017174:	f100 33ff 	add.w	r3, r0, #4294967295
 8017178:	d100      	bne.n	801717c <memcpy+0xc>
 801717a:	4770      	bx	lr
 801717c:	b510      	push	{r4, lr}
 801717e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017182:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017186:	4291      	cmp	r1, r2
 8017188:	d1f9      	bne.n	801717e <memcpy+0xe>
 801718a:	bd10      	pop	{r4, pc}

0801718c <_free_r>:
 801718c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801718e:	2900      	cmp	r1, #0
 8017190:	d044      	beq.n	801721c <_free_r+0x90>
 8017192:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017196:	9001      	str	r0, [sp, #4]
 8017198:	2b00      	cmp	r3, #0
 801719a:	f1a1 0404 	sub.w	r4, r1, #4
 801719e:	bfb8      	it	lt
 80171a0:	18e4      	addlt	r4, r4, r3
 80171a2:	f000 f8df 	bl	8017364 <__malloc_lock>
 80171a6:	4a1e      	ldr	r2, [pc, #120]	; (8017220 <_free_r+0x94>)
 80171a8:	9801      	ldr	r0, [sp, #4]
 80171aa:	6813      	ldr	r3, [r2, #0]
 80171ac:	b933      	cbnz	r3, 80171bc <_free_r+0x30>
 80171ae:	6063      	str	r3, [r4, #4]
 80171b0:	6014      	str	r4, [r2, #0]
 80171b2:	b003      	add	sp, #12
 80171b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80171b8:	f000 b8da 	b.w	8017370 <__malloc_unlock>
 80171bc:	42a3      	cmp	r3, r4
 80171be:	d908      	bls.n	80171d2 <_free_r+0x46>
 80171c0:	6825      	ldr	r5, [r4, #0]
 80171c2:	1961      	adds	r1, r4, r5
 80171c4:	428b      	cmp	r3, r1
 80171c6:	bf01      	itttt	eq
 80171c8:	6819      	ldreq	r1, [r3, #0]
 80171ca:	685b      	ldreq	r3, [r3, #4]
 80171cc:	1949      	addeq	r1, r1, r5
 80171ce:	6021      	streq	r1, [r4, #0]
 80171d0:	e7ed      	b.n	80171ae <_free_r+0x22>
 80171d2:	461a      	mov	r2, r3
 80171d4:	685b      	ldr	r3, [r3, #4]
 80171d6:	b10b      	cbz	r3, 80171dc <_free_r+0x50>
 80171d8:	42a3      	cmp	r3, r4
 80171da:	d9fa      	bls.n	80171d2 <_free_r+0x46>
 80171dc:	6811      	ldr	r1, [r2, #0]
 80171de:	1855      	adds	r5, r2, r1
 80171e0:	42a5      	cmp	r5, r4
 80171e2:	d10b      	bne.n	80171fc <_free_r+0x70>
 80171e4:	6824      	ldr	r4, [r4, #0]
 80171e6:	4421      	add	r1, r4
 80171e8:	1854      	adds	r4, r2, r1
 80171ea:	42a3      	cmp	r3, r4
 80171ec:	6011      	str	r1, [r2, #0]
 80171ee:	d1e0      	bne.n	80171b2 <_free_r+0x26>
 80171f0:	681c      	ldr	r4, [r3, #0]
 80171f2:	685b      	ldr	r3, [r3, #4]
 80171f4:	6053      	str	r3, [r2, #4]
 80171f6:	440c      	add	r4, r1
 80171f8:	6014      	str	r4, [r2, #0]
 80171fa:	e7da      	b.n	80171b2 <_free_r+0x26>
 80171fc:	d902      	bls.n	8017204 <_free_r+0x78>
 80171fe:	230c      	movs	r3, #12
 8017200:	6003      	str	r3, [r0, #0]
 8017202:	e7d6      	b.n	80171b2 <_free_r+0x26>
 8017204:	6825      	ldr	r5, [r4, #0]
 8017206:	1961      	adds	r1, r4, r5
 8017208:	428b      	cmp	r3, r1
 801720a:	bf04      	itt	eq
 801720c:	6819      	ldreq	r1, [r3, #0]
 801720e:	685b      	ldreq	r3, [r3, #4]
 8017210:	6063      	str	r3, [r4, #4]
 8017212:	bf04      	itt	eq
 8017214:	1949      	addeq	r1, r1, r5
 8017216:	6021      	streq	r1, [r4, #0]
 8017218:	6054      	str	r4, [r2, #4]
 801721a:	e7ca      	b.n	80171b2 <_free_r+0x26>
 801721c:	b003      	add	sp, #12
 801721e:	bd30      	pop	{r4, r5, pc}
 8017220:	2400333c 	.word	0x2400333c

08017224 <sbrk_aligned>:
 8017224:	b570      	push	{r4, r5, r6, lr}
 8017226:	4e0e      	ldr	r6, [pc, #56]	; (8017260 <sbrk_aligned+0x3c>)
 8017228:	460c      	mov	r4, r1
 801722a:	6831      	ldr	r1, [r6, #0]
 801722c:	4605      	mov	r5, r0
 801722e:	b911      	cbnz	r1, 8017236 <sbrk_aligned+0x12>
 8017230:	f000 ff3a 	bl	80180a8 <_sbrk_r>
 8017234:	6030      	str	r0, [r6, #0]
 8017236:	4621      	mov	r1, r4
 8017238:	4628      	mov	r0, r5
 801723a:	f000 ff35 	bl	80180a8 <_sbrk_r>
 801723e:	1c43      	adds	r3, r0, #1
 8017240:	d00a      	beq.n	8017258 <sbrk_aligned+0x34>
 8017242:	1cc4      	adds	r4, r0, #3
 8017244:	f024 0403 	bic.w	r4, r4, #3
 8017248:	42a0      	cmp	r0, r4
 801724a:	d007      	beq.n	801725c <sbrk_aligned+0x38>
 801724c:	1a21      	subs	r1, r4, r0
 801724e:	4628      	mov	r0, r5
 8017250:	f000 ff2a 	bl	80180a8 <_sbrk_r>
 8017254:	3001      	adds	r0, #1
 8017256:	d101      	bne.n	801725c <sbrk_aligned+0x38>
 8017258:	f04f 34ff 	mov.w	r4, #4294967295
 801725c:	4620      	mov	r0, r4
 801725e:	bd70      	pop	{r4, r5, r6, pc}
 8017260:	24003340 	.word	0x24003340

08017264 <_malloc_r>:
 8017264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017268:	1ccd      	adds	r5, r1, #3
 801726a:	f025 0503 	bic.w	r5, r5, #3
 801726e:	3508      	adds	r5, #8
 8017270:	2d0c      	cmp	r5, #12
 8017272:	bf38      	it	cc
 8017274:	250c      	movcc	r5, #12
 8017276:	2d00      	cmp	r5, #0
 8017278:	4607      	mov	r7, r0
 801727a:	db01      	blt.n	8017280 <_malloc_r+0x1c>
 801727c:	42a9      	cmp	r1, r5
 801727e:	d905      	bls.n	801728c <_malloc_r+0x28>
 8017280:	230c      	movs	r3, #12
 8017282:	603b      	str	r3, [r7, #0]
 8017284:	2600      	movs	r6, #0
 8017286:	4630      	mov	r0, r6
 8017288:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801728c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8017360 <_malloc_r+0xfc>
 8017290:	f000 f868 	bl	8017364 <__malloc_lock>
 8017294:	f8d8 3000 	ldr.w	r3, [r8]
 8017298:	461c      	mov	r4, r3
 801729a:	bb5c      	cbnz	r4, 80172f4 <_malloc_r+0x90>
 801729c:	4629      	mov	r1, r5
 801729e:	4638      	mov	r0, r7
 80172a0:	f7ff ffc0 	bl	8017224 <sbrk_aligned>
 80172a4:	1c43      	adds	r3, r0, #1
 80172a6:	4604      	mov	r4, r0
 80172a8:	d155      	bne.n	8017356 <_malloc_r+0xf2>
 80172aa:	f8d8 4000 	ldr.w	r4, [r8]
 80172ae:	4626      	mov	r6, r4
 80172b0:	2e00      	cmp	r6, #0
 80172b2:	d145      	bne.n	8017340 <_malloc_r+0xdc>
 80172b4:	2c00      	cmp	r4, #0
 80172b6:	d048      	beq.n	801734a <_malloc_r+0xe6>
 80172b8:	6823      	ldr	r3, [r4, #0]
 80172ba:	4631      	mov	r1, r6
 80172bc:	4638      	mov	r0, r7
 80172be:	eb04 0903 	add.w	r9, r4, r3
 80172c2:	f000 fef1 	bl	80180a8 <_sbrk_r>
 80172c6:	4581      	cmp	r9, r0
 80172c8:	d13f      	bne.n	801734a <_malloc_r+0xe6>
 80172ca:	6821      	ldr	r1, [r4, #0]
 80172cc:	1a6d      	subs	r5, r5, r1
 80172ce:	4629      	mov	r1, r5
 80172d0:	4638      	mov	r0, r7
 80172d2:	f7ff ffa7 	bl	8017224 <sbrk_aligned>
 80172d6:	3001      	adds	r0, #1
 80172d8:	d037      	beq.n	801734a <_malloc_r+0xe6>
 80172da:	6823      	ldr	r3, [r4, #0]
 80172dc:	442b      	add	r3, r5
 80172de:	6023      	str	r3, [r4, #0]
 80172e0:	f8d8 3000 	ldr.w	r3, [r8]
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	d038      	beq.n	801735a <_malloc_r+0xf6>
 80172e8:	685a      	ldr	r2, [r3, #4]
 80172ea:	42a2      	cmp	r2, r4
 80172ec:	d12b      	bne.n	8017346 <_malloc_r+0xe2>
 80172ee:	2200      	movs	r2, #0
 80172f0:	605a      	str	r2, [r3, #4]
 80172f2:	e00f      	b.n	8017314 <_malloc_r+0xb0>
 80172f4:	6822      	ldr	r2, [r4, #0]
 80172f6:	1b52      	subs	r2, r2, r5
 80172f8:	d41f      	bmi.n	801733a <_malloc_r+0xd6>
 80172fa:	2a0b      	cmp	r2, #11
 80172fc:	d917      	bls.n	801732e <_malloc_r+0xca>
 80172fe:	1961      	adds	r1, r4, r5
 8017300:	42a3      	cmp	r3, r4
 8017302:	6025      	str	r5, [r4, #0]
 8017304:	bf18      	it	ne
 8017306:	6059      	strne	r1, [r3, #4]
 8017308:	6863      	ldr	r3, [r4, #4]
 801730a:	bf08      	it	eq
 801730c:	f8c8 1000 	streq.w	r1, [r8]
 8017310:	5162      	str	r2, [r4, r5]
 8017312:	604b      	str	r3, [r1, #4]
 8017314:	4638      	mov	r0, r7
 8017316:	f104 060b 	add.w	r6, r4, #11
 801731a:	f000 f829 	bl	8017370 <__malloc_unlock>
 801731e:	f026 0607 	bic.w	r6, r6, #7
 8017322:	1d23      	adds	r3, r4, #4
 8017324:	1af2      	subs	r2, r6, r3
 8017326:	d0ae      	beq.n	8017286 <_malloc_r+0x22>
 8017328:	1b9b      	subs	r3, r3, r6
 801732a:	50a3      	str	r3, [r4, r2]
 801732c:	e7ab      	b.n	8017286 <_malloc_r+0x22>
 801732e:	42a3      	cmp	r3, r4
 8017330:	6862      	ldr	r2, [r4, #4]
 8017332:	d1dd      	bne.n	80172f0 <_malloc_r+0x8c>
 8017334:	f8c8 2000 	str.w	r2, [r8]
 8017338:	e7ec      	b.n	8017314 <_malloc_r+0xb0>
 801733a:	4623      	mov	r3, r4
 801733c:	6864      	ldr	r4, [r4, #4]
 801733e:	e7ac      	b.n	801729a <_malloc_r+0x36>
 8017340:	4634      	mov	r4, r6
 8017342:	6876      	ldr	r6, [r6, #4]
 8017344:	e7b4      	b.n	80172b0 <_malloc_r+0x4c>
 8017346:	4613      	mov	r3, r2
 8017348:	e7cc      	b.n	80172e4 <_malloc_r+0x80>
 801734a:	230c      	movs	r3, #12
 801734c:	603b      	str	r3, [r7, #0]
 801734e:	4638      	mov	r0, r7
 8017350:	f000 f80e 	bl	8017370 <__malloc_unlock>
 8017354:	e797      	b.n	8017286 <_malloc_r+0x22>
 8017356:	6025      	str	r5, [r4, #0]
 8017358:	e7dc      	b.n	8017314 <_malloc_r+0xb0>
 801735a:	605b      	str	r3, [r3, #4]
 801735c:	deff      	udf	#255	; 0xff
 801735e:	bf00      	nop
 8017360:	2400333c 	.word	0x2400333c

08017364 <__malloc_lock>:
 8017364:	4801      	ldr	r0, [pc, #4]	; (801736c <__malloc_lock+0x8>)
 8017366:	f7ff bef9 	b.w	801715c <__retarget_lock_acquire_recursive>
 801736a:	bf00      	nop
 801736c:	24003338 	.word	0x24003338

08017370 <__malloc_unlock>:
 8017370:	4801      	ldr	r0, [pc, #4]	; (8017378 <__malloc_unlock+0x8>)
 8017372:	f7ff bef4 	b.w	801715e <__retarget_lock_release_recursive>
 8017376:	bf00      	nop
 8017378:	24003338 	.word	0x24003338

0801737c <__ssputs_r>:
 801737c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017380:	688e      	ldr	r6, [r1, #8]
 8017382:	461f      	mov	r7, r3
 8017384:	42be      	cmp	r6, r7
 8017386:	680b      	ldr	r3, [r1, #0]
 8017388:	4682      	mov	sl, r0
 801738a:	460c      	mov	r4, r1
 801738c:	4690      	mov	r8, r2
 801738e:	d82c      	bhi.n	80173ea <__ssputs_r+0x6e>
 8017390:	898a      	ldrh	r2, [r1, #12]
 8017392:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017396:	d026      	beq.n	80173e6 <__ssputs_r+0x6a>
 8017398:	6965      	ldr	r5, [r4, #20]
 801739a:	6909      	ldr	r1, [r1, #16]
 801739c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80173a0:	eba3 0901 	sub.w	r9, r3, r1
 80173a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80173a8:	1c7b      	adds	r3, r7, #1
 80173aa:	444b      	add	r3, r9
 80173ac:	106d      	asrs	r5, r5, #1
 80173ae:	429d      	cmp	r5, r3
 80173b0:	bf38      	it	cc
 80173b2:	461d      	movcc	r5, r3
 80173b4:	0553      	lsls	r3, r2, #21
 80173b6:	d527      	bpl.n	8017408 <__ssputs_r+0x8c>
 80173b8:	4629      	mov	r1, r5
 80173ba:	f7ff ff53 	bl	8017264 <_malloc_r>
 80173be:	4606      	mov	r6, r0
 80173c0:	b360      	cbz	r0, 801741c <__ssputs_r+0xa0>
 80173c2:	6921      	ldr	r1, [r4, #16]
 80173c4:	464a      	mov	r2, r9
 80173c6:	f7ff fed3 	bl	8017170 <memcpy>
 80173ca:	89a3      	ldrh	r3, [r4, #12]
 80173cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80173d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80173d4:	81a3      	strh	r3, [r4, #12]
 80173d6:	6126      	str	r6, [r4, #16]
 80173d8:	6165      	str	r5, [r4, #20]
 80173da:	444e      	add	r6, r9
 80173dc:	eba5 0509 	sub.w	r5, r5, r9
 80173e0:	6026      	str	r6, [r4, #0]
 80173e2:	60a5      	str	r5, [r4, #8]
 80173e4:	463e      	mov	r6, r7
 80173e6:	42be      	cmp	r6, r7
 80173e8:	d900      	bls.n	80173ec <__ssputs_r+0x70>
 80173ea:	463e      	mov	r6, r7
 80173ec:	6820      	ldr	r0, [r4, #0]
 80173ee:	4632      	mov	r2, r6
 80173f0:	4641      	mov	r1, r8
 80173f2:	f000 fe3e 	bl	8018072 <memmove>
 80173f6:	68a3      	ldr	r3, [r4, #8]
 80173f8:	1b9b      	subs	r3, r3, r6
 80173fa:	60a3      	str	r3, [r4, #8]
 80173fc:	6823      	ldr	r3, [r4, #0]
 80173fe:	4433      	add	r3, r6
 8017400:	6023      	str	r3, [r4, #0]
 8017402:	2000      	movs	r0, #0
 8017404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017408:	462a      	mov	r2, r5
 801740a:	f000 fe5d 	bl	80180c8 <_realloc_r>
 801740e:	4606      	mov	r6, r0
 8017410:	2800      	cmp	r0, #0
 8017412:	d1e0      	bne.n	80173d6 <__ssputs_r+0x5a>
 8017414:	6921      	ldr	r1, [r4, #16]
 8017416:	4650      	mov	r0, sl
 8017418:	f7ff feb8 	bl	801718c <_free_r>
 801741c:	230c      	movs	r3, #12
 801741e:	f8ca 3000 	str.w	r3, [sl]
 8017422:	89a3      	ldrh	r3, [r4, #12]
 8017424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017428:	81a3      	strh	r3, [r4, #12]
 801742a:	f04f 30ff 	mov.w	r0, #4294967295
 801742e:	e7e9      	b.n	8017404 <__ssputs_r+0x88>

08017430 <_svfiprintf_r>:
 8017430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017434:	4698      	mov	r8, r3
 8017436:	898b      	ldrh	r3, [r1, #12]
 8017438:	061b      	lsls	r3, r3, #24
 801743a:	b09d      	sub	sp, #116	; 0x74
 801743c:	4607      	mov	r7, r0
 801743e:	460d      	mov	r5, r1
 8017440:	4614      	mov	r4, r2
 8017442:	d50e      	bpl.n	8017462 <_svfiprintf_r+0x32>
 8017444:	690b      	ldr	r3, [r1, #16]
 8017446:	b963      	cbnz	r3, 8017462 <_svfiprintf_r+0x32>
 8017448:	2140      	movs	r1, #64	; 0x40
 801744a:	f7ff ff0b 	bl	8017264 <_malloc_r>
 801744e:	6028      	str	r0, [r5, #0]
 8017450:	6128      	str	r0, [r5, #16]
 8017452:	b920      	cbnz	r0, 801745e <_svfiprintf_r+0x2e>
 8017454:	230c      	movs	r3, #12
 8017456:	603b      	str	r3, [r7, #0]
 8017458:	f04f 30ff 	mov.w	r0, #4294967295
 801745c:	e0d0      	b.n	8017600 <_svfiprintf_r+0x1d0>
 801745e:	2340      	movs	r3, #64	; 0x40
 8017460:	616b      	str	r3, [r5, #20]
 8017462:	2300      	movs	r3, #0
 8017464:	9309      	str	r3, [sp, #36]	; 0x24
 8017466:	2320      	movs	r3, #32
 8017468:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801746c:	f8cd 800c 	str.w	r8, [sp, #12]
 8017470:	2330      	movs	r3, #48	; 0x30
 8017472:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8017618 <_svfiprintf_r+0x1e8>
 8017476:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801747a:	f04f 0901 	mov.w	r9, #1
 801747e:	4623      	mov	r3, r4
 8017480:	469a      	mov	sl, r3
 8017482:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017486:	b10a      	cbz	r2, 801748c <_svfiprintf_r+0x5c>
 8017488:	2a25      	cmp	r2, #37	; 0x25
 801748a:	d1f9      	bne.n	8017480 <_svfiprintf_r+0x50>
 801748c:	ebba 0b04 	subs.w	fp, sl, r4
 8017490:	d00b      	beq.n	80174aa <_svfiprintf_r+0x7a>
 8017492:	465b      	mov	r3, fp
 8017494:	4622      	mov	r2, r4
 8017496:	4629      	mov	r1, r5
 8017498:	4638      	mov	r0, r7
 801749a:	f7ff ff6f 	bl	801737c <__ssputs_r>
 801749e:	3001      	adds	r0, #1
 80174a0:	f000 80a9 	beq.w	80175f6 <_svfiprintf_r+0x1c6>
 80174a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80174a6:	445a      	add	r2, fp
 80174a8:	9209      	str	r2, [sp, #36]	; 0x24
 80174aa:	f89a 3000 	ldrb.w	r3, [sl]
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	f000 80a1 	beq.w	80175f6 <_svfiprintf_r+0x1c6>
 80174b4:	2300      	movs	r3, #0
 80174b6:	f04f 32ff 	mov.w	r2, #4294967295
 80174ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80174be:	f10a 0a01 	add.w	sl, sl, #1
 80174c2:	9304      	str	r3, [sp, #16]
 80174c4:	9307      	str	r3, [sp, #28]
 80174c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80174ca:	931a      	str	r3, [sp, #104]	; 0x68
 80174cc:	4654      	mov	r4, sl
 80174ce:	2205      	movs	r2, #5
 80174d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80174d4:	4850      	ldr	r0, [pc, #320]	; (8017618 <_svfiprintf_r+0x1e8>)
 80174d6:	f7e8 ff33 	bl	8000340 <memchr>
 80174da:	9a04      	ldr	r2, [sp, #16]
 80174dc:	b9d8      	cbnz	r0, 8017516 <_svfiprintf_r+0xe6>
 80174de:	06d0      	lsls	r0, r2, #27
 80174e0:	bf44      	itt	mi
 80174e2:	2320      	movmi	r3, #32
 80174e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80174e8:	0711      	lsls	r1, r2, #28
 80174ea:	bf44      	itt	mi
 80174ec:	232b      	movmi	r3, #43	; 0x2b
 80174ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80174f2:	f89a 3000 	ldrb.w	r3, [sl]
 80174f6:	2b2a      	cmp	r3, #42	; 0x2a
 80174f8:	d015      	beq.n	8017526 <_svfiprintf_r+0xf6>
 80174fa:	9a07      	ldr	r2, [sp, #28]
 80174fc:	4654      	mov	r4, sl
 80174fe:	2000      	movs	r0, #0
 8017500:	f04f 0c0a 	mov.w	ip, #10
 8017504:	4621      	mov	r1, r4
 8017506:	f811 3b01 	ldrb.w	r3, [r1], #1
 801750a:	3b30      	subs	r3, #48	; 0x30
 801750c:	2b09      	cmp	r3, #9
 801750e:	d94d      	bls.n	80175ac <_svfiprintf_r+0x17c>
 8017510:	b1b0      	cbz	r0, 8017540 <_svfiprintf_r+0x110>
 8017512:	9207      	str	r2, [sp, #28]
 8017514:	e014      	b.n	8017540 <_svfiprintf_r+0x110>
 8017516:	eba0 0308 	sub.w	r3, r0, r8
 801751a:	fa09 f303 	lsl.w	r3, r9, r3
 801751e:	4313      	orrs	r3, r2
 8017520:	9304      	str	r3, [sp, #16]
 8017522:	46a2      	mov	sl, r4
 8017524:	e7d2      	b.n	80174cc <_svfiprintf_r+0x9c>
 8017526:	9b03      	ldr	r3, [sp, #12]
 8017528:	1d19      	adds	r1, r3, #4
 801752a:	681b      	ldr	r3, [r3, #0]
 801752c:	9103      	str	r1, [sp, #12]
 801752e:	2b00      	cmp	r3, #0
 8017530:	bfbb      	ittet	lt
 8017532:	425b      	neglt	r3, r3
 8017534:	f042 0202 	orrlt.w	r2, r2, #2
 8017538:	9307      	strge	r3, [sp, #28]
 801753a:	9307      	strlt	r3, [sp, #28]
 801753c:	bfb8      	it	lt
 801753e:	9204      	strlt	r2, [sp, #16]
 8017540:	7823      	ldrb	r3, [r4, #0]
 8017542:	2b2e      	cmp	r3, #46	; 0x2e
 8017544:	d10c      	bne.n	8017560 <_svfiprintf_r+0x130>
 8017546:	7863      	ldrb	r3, [r4, #1]
 8017548:	2b2a      	cmp	r3, #42	; 0x2a
 801754a:	d134      	bne.n	80175b6 <_svfiprintf_r+0x186>
 801754c:	9b03      	ldr	r3, [sp, #12]
 801754e:	1d1a      	adds	r2, r3, #4
 8017550:	681b      	ldr	r3, [r3, #0]
 8017552:	9203      	str	r2, [sp, #12]
 8017554:	2b00      	cmp	r3, #0
 8017556:	bfb8      	it	lt
 8017558:	f04f 33ff 	movlt.w	r3, #4294967295
 801755c:	3402      	adds	r4, #2
 801755e:	9305      	str	r3, [sp, #20]
 8017560:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8017628 <_svfiprintf_r+0x1f8>
 8017564:	7821      	ldrb	r1, [r4, #0]
 8017566:	2203      	movs	r2, #3
 8017568:	4650      	mov	r0, sl
 801756a:	f7e8 fee9 	bl	8000340 <memchr>
 801756e:	b138      	cbz	r0, 8017580 <_svfiprintf_r+0x150>
 8017570:	9b04      	ldr	r3, [sp, #16]
 8017572:	eba0 000a 	sub.w	r0, r0, sl
 8017576:	2240      	movs	r2, #64	; 0x40
 8017578:	4082      	lsls	r2, r0
 801757a:	4313      	orrs	r3, r2
 801757c:	3401      	adds	r4, #1
 801757e:	9304      	str	r3, [sp, #16]
 8017580:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017584:	4825      	ldr	r0, [pc, #148]	; (801761c <_svfiprintf_r+0x1ec>)
 8017586:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801758a:	2206      	movs	r2, #6
 801758c:	f7e8 fed8 	bl	8000340 <memchr>
 8017590:	2800      	cmp	r0, #0
 8017592:	d038      	beq.n	8017606 <_svfiprintf_r+0x1d6>
 8017594:	4b22      	ldr	r3, [pc, #136]	; (8017620 <_svfiprintf_r+0x1f0>)
 8017596:	bb1b      	cbnz	r3, 80175e0 <_svfiprintf_r+0x1b0>
 8017598:	9b03      	ldr	r3, [sp, #12]
 801759a:	3307      	adds	r3, #7
 801759c:	f023 0307 	bic.w	r3, r3, #7
 80175a0:	3308      	adds	r3, #8
 80175a2:	9303      	str	r3, [sp, #12]
 80175a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80175a6:	4433      	add	r3, r6
 80175a8:	9309      	str	r3, [sp, #36]	; 0x24
 80175aa:	e768      	b.n	801747e <_svfiprintf_r+0x4e>
 80175ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80175b0:	460c      	mov	r4, r1
 80175b2:	2001      	movs	r0, #1
 80175b4:	e7a6      	b.n	8017504 <_svfiprintf_r+0xd4>
 80175b6:	2300      	movs	r3, #0
 80175b8:	3401      	adds	r4, #1
 80175ba:	9305      	str	r3, [sp, #20]
 80175bc:	4619      	mov	r1, r3
 80175be:	f04f 0c0a 	mov.w	ip, #10
 80175c2:	4620      	mov	r0, r4
 80175c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80175c8:	3a30      	subs	r2, #48	; 0x30
 80175ca:	2a09      	cmp	r2, #9
 80175cc:	d903      	bls.n	80175d6 <_svfiprintf_r+0x1a6>
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	d0c6      	beq.n	8017560 <_svfiprintf_r+0x130>
 80175d2:	9105      	str	r1, [sp, #20]
 80175d4:	e7c4      	b.n	8017560 <_svfiprintf_r+0x130>
 80175d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80175da:	4604      	mov	r4, r0
 80175dc:	2301      	movs	r3, #1
 80175de:	e7f0      	b.n	80175c2 <_svfiprintf_r+0x192>
 80175e0:	ab03      	add	r3, sp, #12
 80175e2:	9300      	str	r3, [sp, #0]
 80175e4:	462a      	mov	r2, r5
 80175e6:	4b0f      	ldr	r3, [pc, #60]	; (8017624 <_svfiprintf_r+0x1f4>)
 80175e8:	a904      	add	r1, sp, #16
 80175ea:	4638      	mov	r0, r7
 80175ec:	f3af 8000 	nop.w
 80175f0:	1c42      	adds	r2, r0, #1
 80175f2:	4606      	mov	r6, r0
 80175f4:	d1d6      	bne.n	80175a4 <_svfiprintf_r+0x174>
 80175f6:	89ab      	ldrh	r3, [r5, #12]
 80175f8:	065b      	lsls	r3, r3, #25
 80175fa:	f53f af2d 	bmi.w	8017458 <_svfiprintf_r+0x28>
 80175fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017600:	b01d      	add	sp, #116	; 0x74
 8017602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017606:	ab03      	add	r3, sp, #12
 8017608:	9300      	str	r3, [sp, #0]
 801760a:	462a      	mov	r2, r5
 801760c:	4b05      	ldr	r3, [pc, #20]	; (8017624 <_svfiprintf_r+0x1f4>)
 801760e:	a904      	add	r1, sp, #16
 8017610:	4638      	mov	r0, r7
 8017612:	f000 fa4b 	bl	8017aac <_printf_i>
 8017616:	e7eb      	b.n	80175f0 <_svfiprintf_r+0x1c0>
 8017618:	080185a8 	.word	0x080185a8
 801761c:	080185b2 	.word	0x080185b2
 8017620:	00000000 	.word	0x00000000
 8017624:	0801737d 	.word	0x0801737d
 8017628:	080185ae 	.word	0x080185ae

0801762c <_sungetc_r>:
 801762c:	b538      	push	{r3, r4, r5, lr}
 801762e:	1c4b      	adds	r3, r1, #1
 8017630:	4614      	mov	r4, r2
 8017632:	d103      	bne.n	801763c <_sungetc_r+0x10>
 8017634:	f04f 35ff 	mov.w	r5, #4294967295
 8017638:	4628      	mov	r0, r5
 801763a:	bd38      	pop	{r3, r4, r5, pc}
 801763c:	8993      	ldrh	r3, [r2, #12]
 801763e:	f023 0320 	bic.w	r3, r3, #32
 8017642:	8193      	strh	r3, [r2, #12]
 8017644:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017646:	6852      	ldr	r2, [r2, #4]
 8017648:	b2cd      	uxtb	r5, r1
 801764a:	b18b      	cbz	r3, 8017670 <_sungetc_r+0x44>
 801764c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801764e:	4293      	cmp	r3, r2
 8017650:	dd08      	ble.n	8017664 <_sungetc_r+0x38>
 8017652:	6823      	ldr	r3, [r4, #0]
 8017654:	1e5a      	subs	r2, r3, #1
 8017656:	6022      	str	r2, [r4, #0]
 8017658:	f803 5c01 	strb.w	r5, [r3, #-1]
 801765c:	6863      	ldr	r3, [r4, #4]
 801765e:	3301      	adds	r3, #1
 8017660:	6063      	str	r3, [r4, #4]
 8017662:	e7e9      	b.n	8017638 <_sungetc_r+0xc>
 8017664:	4621      	mov	r1, r4
 8017666:	f000 fcca 	bl	8017ffe <__submore>
 801766a:	2800      	cmp	r0, #0
 801766c:	d0f1      	beq.n	8017652 <_sungetc_r+0x26>
 801766e:	e7e1      	b.n	8017634 <_sungetc_r+0x8>
 8017670:	6921      	ldr	r1, [r4, #16]
 8017672:	6823      	ldr	r3, [r4, #0]
 8017674:	b151      	cbz	r1, 801768c <_sungetc_r+0x60>
 8017676:	4299      	cmp	r1, r3
 8017678:	d208      	bcs.n	801768c <_sungetc_r+0x60>
 801767a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801767e:	42a9      	cmp	r1, r5
 8017680:	d104      	bne.n	801768c <_sungetc_r+0x60>
 8017682:	3b01      	subs	r3, #1
 8017684:	3201      	adds	r2, #1
 8017686:	6023      	str	r3, [r4, #0]
 8017688:	6062      	str	r2, [r4, #4]
 801768a:	e7d5      	b.n	8017638 <_sungetc_r+0xc>
 801768c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8017690:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017694:	6363      	str	r3, [r4, #52]	; 0x34
 8017696:	2303      	movs	r3, #3
 8017698:	63a3      	str	r3, [r4, #56]	; 0x38
 801769a:	4623      	mov	r3, r4
 801769c:	f803 5f46 	strb.w	r5, [r3, #70]!
 80176a0:	6023      	str	r3, [r4, #0]
 80176a2:	2301      	movs	r3, #1
 80176a4:	e7dc      	b.n	8017660 <_sungetc_r+0x34>

080176a6 <__ssrefill_r>:
 80176a6:	b510      	push	{r4, lr}
 80176a8:	460c      	mov	r4, r1
 80176aa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80176ac:	b169      	cbz	r1, 80176ca <__ssrefill_r+0x24>
 80176ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80176b2:	4299      	cmp	r1, r3
 80176b4:	d001      	beq.n	80176ba <__ssrefill_r+0x14>
 80176b6:	f7ff fd69 	bl	801718c <_free_r>
 80176ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80176bc:	6063      	str	r3, [r4, #4]
 80176be:	2000      	movs	r0, #0
 80176c0:	6360      	str	r0, [r4, #52]	; 0x34
 80176c2:	b113      	cbz	r3, 80176ca <__ssrefill_r+0x24>
 80176c4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80176c6:	6023      	str	r3, [r4, #0]
 80176c8:	bd10      	pop	{r4, pc}
 80176ca:	6923      	ldr	r3, [r4, #16]
 80176cc:	6023      	str	r3, [r4, #0]
 80176ce:	2300      	movs	r3, #0
 80176d0:	6063      	str	r3, [r4, #4]
 80176d2:	89a3      	ldrh	r3, [r4, #12]
 80176d4:	f043 0320 	orr.w	r3, r3, #32
 80176d8:	81a3      	strh	r3, [r4, #12]
 80176da:	f04f 30ff 	mov.w	r0, #4294967295
 80176de:	e7f3      	b.n	80176c8 <__ssrefill_r+0x22>

080176e0 <__ssvfiscanf_r>:
 80176e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80176e4:	460c      	mov	r4, r1
 80176e6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80176ea:	2100      	movs	r1, #0
 80176ec:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80176f0:	49a6      	ldr	r1, [pc, #664]	; (801798c <__ssvfiscanf_r+0x2ac>)
 80176f2:	91a0      	str	r1, [sp, #640]	; 0x280
 80176f4:	f10d 0804 	add.w	r8, sp, #4
 80176f8:	49a5      	ldr	r1, [pc, #660]	; (8017990 <__ssvfiscanf_r+0x2b0>)
 80176fa:	4fa6      	ldr	r7, [pc, #664]	; (8017994 <__ssvfiscanf_r+0x2b4>)
 80176fc:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8017998 <__ssvfiscanf_r+0x2b8>
 8017700:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8017704:	4606      	mov	r6, r0
 8017706:	91a1      	str	r1, [sp, #644]	; 0x284
 8017708:	9300      	str	r3, [sp, #0]
 801770a:	7813      	ldrb	r3, [r2, #0]
 801770c:	2b00      	cmp	r3, #0
 801770e:	f000 815a 	beq.w	80179c6 <__ssvfiscanf_r+0x2e6>
 8017712:	5cf9      	ldrb	r1, [r7, r3]
 8017714:	f011 0108 	ands.w	r1, r1, #8
 8017718:	f102 0501 	add.w	r5, r2, #1
 801771c:	d019      	beq.n	8017752 <__ssvfiscanf_r+0x72>
 801771e:	6863      	ldr	r3, [r4, #4]
 8017720:	2b00      	cmp	r3, #0
 8017722:	dd0f      	ble.n	8017744 <__ssvfiscanf_r+0x64>
 8017724:	6823      	ldr	r3, [r4, #0]
 8017726:	781a      	ldrb	r2, [r3, #0]
 8017728:	5cba      	ldrb	r2, [r7, r2]
 801772a:	0712      	lsls	r2, r2, #28
 801772c:	d401      	bmi.n	8017732 <__ssvfiscanf_r+0x52>
 801772e:	462a      	mov	r2, r5
 8017730:	e7eb      	b.n	801770a <__ssvfiscanf_r+0x2a>
 8017732:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017734:	3201      	adds	r2, #1
 8017736:	9245      	str	r2, [sp, #276]	; 0x114
 8017738:	6862      	ldr	r2, [r4, #4]
 801773a:	3301      	adds	r3, #1
 801773c:	3a01      	subs	r2, #1
 801773e:	6062      	str	r2, [r4, #4]
 8017740:	6023      	str	r3, [r4, #0]
 8017742:	e7ec      	b.n	801771e <__ssvfiscanf_r+0x3e>
 8017744:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017746:	4621      	mov	r1, r4
 8017748:	4630      	mov	r0, r6
 801774a:	4798      	blx	r3
 801774c:	2800      	cmp	r0, #0
 801774e:	d0e9      	beq.n	8017724 <__ssvfiscanf_r+0x44>
 8017750:	e7ed      	b.n	801772e <__ssvfiscanf_r+0x4e>
 8017752:	2b25      	cmp	r3, #37	; 0x25
 8017754:	d012      	beq.n	801777c <__ssvfiscanf_r+0x9c>
 8017756:	469a      	mov	sl, r3
 8017758:	6863      	ldr	r3, [r4, #4]
 801775a:	2b00      	cmp	r3, #0
 801775c:	f340 8091 	ble.w	8017882 <__ssvfiscanf_r+0x1a2>
 8017760:	6822      	ldr	r2, [r4, #0]
 8017762:	7813      	ldrb	r3, [r2, #0]
 8017764:	4553      	cmp	r3, sl
 8017766:	f040 812e 	bne.w	80179c6 <__ssvfiscanf_r+0x2e6>
 801776a:	6863      	ldr	r3, [r4, #4]
 801776c:	3b01      	subs	r3, #1
 801776e:	6063      	str	r3, [r4, #4]
 8017770:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8017772:	3201      	adds	r2, #1
 8017774:	3301      	adds	r3, #1
 8017776:	6022      	str	r2, [r4, #0]
 8017778:	9345      	str	r3, [sp, #276]	; 0x114
 801777a:	e7d8      	b.n	801772e <__ssvfiscanf_r+0x4e>
 801777c:	9141      	str	r1, [sp, #260]	; 0x104
 801777e:	9143      	str	r1, [sp, #268]	; 0x10c
 8017780:	7853      	ldrb	r3, [r2, #1]
 8017782:	2b2a      	cmp	r3, #42	; 0x2a
 8017784:	bf02      	ittt	eq
 8017786:	2310      	moveq	r3, #16
 8017788:	1c95      	addeq	r5, r2, #2
 801778a:	9341      	streq	r3, [sp, #260]	; 0x104
 801778c:	220a      	movs	r2, #10
 801778e:	46aa      	mov	sl, r5
 8017790:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8017794:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8017798:	2b09      	cmp	r3, #9
 801779a:	d91c      	bls.n	80177d6 <__ssvfiscanf_r+0xf6>
 801779c:	487e      	ldr	r0, [pc, #504]	; (8017998 <__ssvfiscanf_r+0x2b8>)
 801779e:	2203      	movs	r2, #3
 80177a0:	f7e8 fdce 	bl	8000340 <memchr>
 80177a4:	b138      	cbz	r0, 80177b6 <__ssvfiscanf_r+0xd6>
 80177a6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80177a8:	eba0 0009 	sub.w	r0, r0, r9
 80177ac:	2301      	movs	r3, #1
 80177ae:	4083      	lsls	r3, r0
 80177b0:	4313      	orrs	r3, r2
 80177b2:	9341      	str	r3, [sp, #260]	; 0x104
 80177b4:	4655      	mov	r5, sl
 80177b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80177ba:	2b78      	cmp	r3, #120	; 0x78
 80177bc:	d806      	bhi.n	80177cc <__ssvfiscanf_r+0xec>
 80177be:	2b57      	cmp	r3, #87	; 0x57
 80177c0:	d810      	bhi.n	80177e4 <__ssvfiscanf_r+0x104>
 80177c2:	2b25      	cmp	r3, #37	; 0x25
 80177c4:	d0c7      	beq.n	8017756 <__ssvfiscanf_r+0x76>
 80177c6:	d857      	bhi.n	8017878 <__ssvfiscanf_r+0x198>
 80177c8:	2b00      	cmp	r3, #0
 80177ca:	d065      	beq.n	8017898 <__ssvfiscanf_r+0x1b8>
 80177cc:	2303      	movs	r3, #3
 80177ce:	9347      	str	r3, [sp, #284]	; 0x11c
 80177d0:	230a      	movs	r3, #10
 80177d2:	9342      	str	r3, [sp, #264]	; 0x108
 80177d4:	e076      	b.n	80178c4 <__ssvfiscanf_r+0x1e4>
 80177d6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80177d8:	fb02 1103 	mla	r1, r2, r3, r1
 80177dc:	3930      	subs	r1, #48	; 0x30
 80177de:	9143      	str	r1, [sp, #268]	; 0x10c
 80177e0:	4655      	mov	r5, sl
 80177e2:	e7d4      	b.n	801778e <__ssvfiscanf_r+0xae>
 80177e4:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80177e8:	2a20      	cmp	r2, #32
 80177ea:	d8ef      	bhi.n	80177cc <__ssvfiscanf_r+0xec>
 80177ec:	a101      	add	r1, pc, #4	; (adr r1, 80177f4 <__ssvfiscanf_r+0x114>)
 80177ee:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80177f2:	bf00      	nop
 80177f4:	080178a7 	.word	0x080178a7
 80177f8:	080177cd 	.word	0x080177cd
 80177fc:	080177cd 	.word	0x080177cd
 8017800:	08017905 	.word	0x08017905
 8017804:	080177cd 	.word	0x080177cd
 8017808:	080177cd 	.word	0x080177cd
 801780c:	080177cd 	.word	0x080177cd
 8017810:	080177cd 	.word	0x080177cd
 8017814:	080177cd 	.word	0x080177cd
 8017818:	080177cd 	.word	0x080177cd
 801781c:	080177cd 	.word	0x080177cd
 8017820:	0801791b 	.word	0x0801791b
 8017824:	08017901 	.word	0x08017901
 8017828:	0801787f 	.word	0x0801787f
 801782c:	0801787f 	.word	0x0801787f
 8017830:	0801787f 	.word	0x0801787f
 8017834:	080177cd 	.word	0x080177cd
 8017838:	080178bd 	.word	0x080178bd
 801783c:	080177cd 	.word	0x080177cd
 8017840:	080177cd 	.word	0x080177cd
 8017844:	080177cd 	.word	0x080177cd
 8017848:	080177cd 	.word	0x080177cd
 801784c:	0801792b 	.word	0x0801792b
 8017850:	080178f9 	.word	0x080178f9
 8017854:	0801789f 	.word	0x0801789f
 8017858:	080177cd 	.word	0x080177cd
 801785c:	080177cd 	.word	0x080177cd
 8017860:	08017927 	.word	0x08017927
 8017864:	080177cd 	.word	0x080177cd
 8017868:	08017901 	.word	0x08017901
 801786c:	080177cd 	.word	0x080177cd
 8017870:	080177cd 	.word	0x080177cd
 8017874:	080178a7 	.word	0x080178a7
 8017878:	3b45      	subs	r3, #69	; 0x45
 801787a:	2b02      	cmp	r3, #2
 801787c:	d8a6      	bhi.n	80177cc <__ssvfiscanf_r+0xec>
 801787e:	2305      	movs	r3, #5
 8017880:	e01f      	b.n	80178c2 <__ssvfiscanf_r+0x1e2>
 8017882:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017884:	4621      	mov	r1, r4
 8017886:	4630      	mov	r0, r6
 8017888:	4798      	blx	r3
 801788a:	2800      	cmp	r0, #0
 801788c:	f43f af68 	beq.w	8017760 <__ssvfiscanf_r+0x80>
 8017890:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017892:	2800      	cmp	r0, #0
 8017894:	f040 808d 	bne.w	80179b2 <__ssvfiscanf_r+0x2d2>
 8017898:	f04f 30ff 	mov.w	r0, #4294967295
 801789c:	e08f      	b.n	80179be <__ssvfiscanf_r+0x2de>
 801789e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80178a0:	f042 0220 	orr.w	r2, r2, #32
 80178a4:	9241      	str	r2, [sp, #260]	; 0x104
 80178a6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80178a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80178ac:	9241      	str	r2, [sp, #260]	; 0x104
 80178ae:	2210      	movs	r2, #16
 80178b0:	2b6f      	cmp	r3, #111	; 0x6f
 80178b2:	9242      	str	r2, [sp, #264]	; 0x108
 80178b4:	bf34      	ite	cc
 80178b6:	2303      	movcc	r3, #3
 80178b8:	2304      	movcs	r3, #4
 80178ba:	e002      	b.n	80178c2 <__ssvfiscanf_r+0x1e2>
 80178bc:	2300      	movs	r3, #0
 80178be:	9342      	str	r3, [sp, #264]	; 0x108
 80178c0:	2303      	movs	r3, #3
 80178c2:	9347      	str	r3, [sp, #284]	; 0x11c
 80178c4:	6863      	ldr	r3, [r4, #4]
 80178c6:	2b00      	cmp	r3, #0
 80178c8:	dd3d      	ble.n	8017946 <__ssvfiscanf_r+0x266>
 80178ca:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80178cc:	0659      	lsls	r1, r3, #25
 80178ce:	d404      	bmi.n	80178da <__ssvfiscanf_r+0x1fa>
 80178d0:	6823      	ldr	r3, [r4, #0]
 80178d2:	781a      	ldrb	r2, [r3, #0]
 80178d4:	5cba      	ldrb	r2, [r7, r2]
 80178d6:	0712      	lsls	r2, r2, #28
 80178d8:	d43c      	bmi.n	8017954 <__ssvfiscanf_r+0x274>
 80178da:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80178dc:	2b02      	cmp	r3, #2
 80178de:	dc4b      	bgt.n	8017978 <__ssvfiscanf_r+0x298>
 80178e0:	466b      	mov	r3, sp
 80178e2:	4622      	mov	r2, r4
 80178e4:	a941      	add	r1, sp, #260	; 0x104
 80178e6:	4630      	mov	r0, r6
 80178e8:	f000 fa02 	bl	8017cf0 <_scanf_chars>
 80178ec:	2801      	cmp	r0, #1
 80178ee:	d06a      	beq.n	80179c6 <__ssvfiscanf_r+0x2e6>
 80178f0:	2802      	cmp	r0, #2
 80178f2:	f47f af1c 	bne.w	801772e <__ssvfiscanf_r+0x4e>
 80178f6:	e7cb      	b.n	8017890 <__ssvfiscanf_r+0x1b0>
 80178f8:	2308      	movs	r3, #8
 80178fa:	9342      	str	r3, [sp, #264]	; 0x108
 80178fc:	2304      	movs	r3, #4
 80178fe:	e7e0      	b.n	80178c2 <__ssvfiscanf_r+0x1e2>
 8017900:	220a      	movs	r2, #10
 8017902:	e7d5      	b.n	80178b0 <__ssvfiscanf_r+0x1d0>
 8017904:	4629      	mov	r1, r5
 8017906:	4640      	mov	r0, r8
 8017908:	f000 fb40 	bl	8017f8c <__sccl>
 801790c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801790e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017912:	9341      	str	r3, [sp, #260]	; 0x104
 8017914:	4605      	mov	r5, r0
 8017916:	2301      	movs	r3, #1
 8017918:	e7d3      	b.n	80178c2 <__ssvfiscanf_r+0x1e2>
 801791a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801791c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017920:	9341      	str	r3, [sp, #260]	; 0x104
 8017922:	2300      	movs	r3, #0
 8017924:	e7cd      	b.n	80178c2 <__ssvfiscanf_r+0x1e2>
 8017926:	2302      	movs	r3, #2
 8017928:	e7cb      	b.n	80178c2 <__ssvfiscanf_r+0x1e2>
 801792a:	9841      	ldr	r0, [sp, #260]	; 0x104
 801792c:	06c3      	lsls	r3, r0, #27
 801792e:	f53f aefe 	bmi.w	801772e <__ssvfiscanf_r+0x4e>
 8017932:	9b00      	ldr	r3, [sp, #0]
 8017934:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017936:	1d19      	adds	r1, r3, #4
 8017938:	9100      	str	r1, [sp, #0]
 801793a:	681b      	ldr	r3, [r3, #0]
 801793c:	07c0      	lsls	r0, r0, #31
 801793e:	bf4c      	ite	mi
 8017940:	801a      	strhmi	r2, [r3, #0]
 8017942:	601a      	strpl	r2, [r3, #0]
 8017944:	e6f3      	b.n	801772e <__ssvfiscanf_r+0x4e>
 8017946:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017948:	4621      	mov	r1, r4
 801794a:	4630      	mov	r0, r6
 801794c:	4798      	blx	r3
 801794e:	2800      	cmp	r0, #0
 8017950:	d0bb      	beq.n	80178ca <__ssvfiscanf_r+0x1ea>
 8017952:	e79d      	b.n	8017890 <__ssvfiscanf_r+0x1b0>
 8017954:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017956:	3201      	adds	r2, #1
 8017958:	9245      	str	r2, [sp, #276]	; 0x114
 801795a:	6862      	ldr	r2, [r4, #4]
 801795c:	3a01      	subs	r2, #1
 801795e:	2a00      	cmp	r2, #0
 8017960:	6062      	str	r2, [r4, #4]
 8017962:	dd02      	ble.n	801796a <__ssvfiscanf_r+0x28a>
 8017964:	3301      	adds	r3, #1
 8017966:	6023      	str	r3, [r4, #0]
 8017968:	e7b2      	b.n	80178d0 <__ssvfiscanf_r+0x1f0>
 801796a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801796c:	4621      	mov	r1, r4
 801796e:	4630      	mov	r0, r6
 8017970:	4798      	blx	r3
 8017972:	2800      	cmp	r0, #0
 8017974:	d0ac      	beq.n	80178d0 <__ssvfiscanf_r+0x1f0>
 8017976:	e78b      	b.n	8017890 <__ssvfiscanf_r+0x1b0>
 8017978:	2b04      	cmp	r3, #4
 801797a:	dc0f      	bgt.n	801799c <__ssvfiscanf_r+0x2bc>
 801797c:	466b      	mov	r3, sp
 801797e:	4622      	mov	r2, r4
 8017980:	a941      	add	r1, sp, #260	; 0x104
 8017982:	4630      	mov	r0, r6
 8017984:	f000 fa0e 	bl	8017da4 <_scanf_i>
 8017988:	e7b0      	b.n	80178ec <__ssvfiscanf_r+0x20c>
 801798a:	bf00      	nop
 801798c:	0801762d 	.word	0x0801762d
 8017990:	080176a7 	.word	0x080176a7
 8017994:	080185f7 	.word	0x080185f7
 8017998:	080185ae 	.word	0x080185ae
 801799c:	4b0b      	ldr	r3, [pc, #44]	; (80179cc <__ssvfiscanf_r+0x2ec>)
 801799e:	2b00      	cmp	r3, #0
 80179a0:	f43f aec5 	beq.w	801772e <__ssvfiscanf_r+0x4e>
 80179a4:	466b      	mov	r3, sp
 80179a6:	4622      	mov	r2, r4
 80179a8:	a941      	add	r1, sp, #260	; 0x104
 80179aa:	4630      	mov	r0, r6
 80179ac:	f3af 8000 	nop.w
 80179b0:	e79c      	b.n	80178ec <__ssvfiscanf_r+0x20c>
 80179b2:	89a3      	ldrh	r3, [r4, #12]
 80179b4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80179b8:	bf18      	it	ne
 80179ba:	f04f 30ff 	movne.w	r0, #4294967295
 80179be:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80179c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80179c6:	9844      	ldr	r0, [sp, #272]	; 0x110
 80179c8:	e7f9      	b.n	80179be <__ssvfiscanf_r+0x2de>
 80179ca:	bf00      	nop
 80179cc:	00000000 	.word	0x00000000

080179d0 <_printf_common>:
 80179d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80179d4:	4616      	mov	r6, r2
 80179d6:	4699      	mov	r9, r3
 80179d8:	688a      	ldr	r2, [r1, #8]
 80179da:	690b      	ldr	r3, [r1, #16]
 80179dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80179e0:	4293      	cmp	r3, r2
 80179e2:	bfb8      	it	lt
 80179e4:	4613      	movlt	r3, r2
 80179e6:	6033      	str	r3, [r6, #0]
 80179e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80179ec:	4607      	mov	r7, r0
 80179ee:	460c      	mov	r4, r1
 80179f0:	b10a      	cbz	r2, 80179f6 <_printf_common+0x26>
 80179f2:	3301      	adds	r3, #1
 80179f4:	6033      	str	r3, [r6, #0]
 80179f6:	6823      	ldr	r3, [r4, #0]
 80179f8:	0699      	lsls	r1, r3, #26
 80179fa:	bf42      	ittt	mi
 80179fc:	6833      	ldrmi	r3, [r6, #0]
 80179fe:	3302      	addmi	r3, #2
 8017a00:	6033      	strmi	r3, [r6, #0]
 8017a02:	6825      	ldr	r5, [r4, #0]
 8017a04:	f015 0506 	ands.w	r5, r5, #6
 8017a08:	d106      	bne.n	8017a18 <_printf_common+0x48>
 8017a0a:	f104 0a19 	add.w	sl, r4, #25
 8017a0e:	68e3      	ldr	r3, [r4, #12]
 8017a10:	6832      	ldr	r2, [r6, #0]
 8017a12:	1a9b      	subs	r3, r3, r2
 8017a14:	42ab      	cmp	r3, r5
 8017a16:	dc26      	bgt.n	8017a66 <_printf_common+0x96>
 8017a18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017a1c:	1e13      	subs	r3, r2, #0
 8017a1e:	6822      	ldr	r2, [r4, #0]
 8017a20:	bf18      	it	ne
 8017a22:	2301      	movne	r3, #1
 8017a24:	0692      	lsls	r2, r2, #26
 8017a26:	d42b      	bmi.n	8017a80 <_printf_common+0xb0>
 8017a28:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017a2c:	4649      	mov	r1, r9
 8017a2e:	4638      	mov	r0, r7
 8017a30:	47c0      	blx	r8
 8017a32:	3001      	adds	r0, #1
 8017a34:	d01e      	beq.n	8017a74 <_printf_common+0xa4>
 8017a36:	6823      	ldr	r3, [r4, #0]
 8017a38:	6922      	ldr	r2, [r4, #16]
 8017a3a:	f003 0306 	and.w	r3, r3, #6
 8017a3e:	2b04      	cmp	r3, #4
 8017a40:	bf02      	ittt	eq
 8017a42:	68e5      	ldreq	r5, [r4, #12]
 8017a44:	6833      	ldreq	r3, [r6, #0]
 8017a46:	1aed      	subeq	r5, r5, r3
 8017a48:	68a3      	ldr	r3, [r4, #8]
 8017a4a:	bf0c      	ite	eq
 8017a4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017a50:	2500      	movne	r5, #0
 8017a52:	4293      	cmp	r3, r2
 8017a54:	bfc4      	itt	gt
 8017a56:	1a9b      	subgt	r3, r3, r2
 8017a58:	18ed      	addgt	r5, r5, r3
 8017a5a:	2600      	movs	r6, #0
 8017a5c:	341a      	adds	r4, #26
 8017a5e:	42b5      	cmp	r5, r6
 8017a60:	d11a      	bne.n	8017a98 <_printf_common+0xc8>
 8017a62:	2000      	movs	r0, #0
 8017a64:	e008      	b.n	8017a78 <_printf_common+0xa8>
 8017a66:	2301      	movs	r3, #1
 8017a68:	4652      	mov	r2, sl
 8017a6a:	4649      	mov	r1, r9
 8017a6c:	4638      	mov	r0, r7
 8017a6e:	47c0      	blx	r8
 8017a70:	3001      	adds	r0, #1
 8017a72:	d103      	bne.n	8017a7c <_printf_common+0xac>
 8017a74:	f04f 30ff 	mov.w	r0, #4294967295
 8017a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a7c:	3501      	adds	r5, #1
 8017a7e:	e7c6      	b.n	8017a0e <_printf_common+0x3e>
 8017a80:	18e1      	adds	r1, r4, r3
 8017a82:	1c5a      	adds	r2, r3, #1
 8017a84:	2030      	movs	r0, #48	; 0x30
 8017a86:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017a8a:	4422      	add	r2, r4
 8017a8c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017a90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017a94:	3302      	adds	r3, #2
 8017a96:	e7c7      	b.n	8017a28 <_printf_common+0x58>
 8017a98:	2301      	movs	r3, #1
 8017a9a:	4622      	mov	r2, r4
 8017a9c:	4649      	mov	r1, r9
 8017a9e:	4638      	mov	r0, r7
 8017aa0:	47c0      	blx	r8
 8017aa2:	3001      	adds	r0, #1
 8017aa4:	d0e6      	beq.n	8017a74 <_printf_common+0xa4>
 8017aa6:	3601      	adds	r6, #1
 8017aa8:	e7d9      	b.n	8017a5e <_printf_common+0x8e>
	...

08017aac <_printf_i>:
 8017aac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017ab0:	7e0f      	ldrb	r7, [r1, #24]
 8017ab2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017ab4:	2f78      	cmp	r7, #120	; 0x78
 8017ab6:	4691      	mov	r9, r2
 8017ab8:	4680      	mov	r8, r0
 8017aba:	460c      	mov	r4, r1
 8017abc:	469a      	mov	sl, r3
 8017abe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017ac2:	d807      	bhi.n	8017ad4 <_printf_i+0x28>
 8017ac4:	2f62      	cmp	r7, #98	; 0x62
 8017ac6:	d80a      	bhi.n	8017ade <_printf_i+0x32>
 8017ac8:	2f00      	cmp	r7, #0
 8017aca:	f000 80d4 	beq.w	8017c76 <_printf_i+0x1ca>
 8017ace:	2f58      	cmp	r7, #88	; 0x58
 8017ad0:	f000 80c0 	beq.w	8017c54 <_printf_i+0x1a8>
 8017ad4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017ad8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017adc:	e03a      	b.n	8017b54 <_printf_i+0xa8>
 8017ade:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017ae2:	2b15      	cmp	r3, #21
 8017ae4:	d8f6      	bhi.n	8017ad4 <_printf_i+0x28>
 8017ae6:	a101      	add	r1, pc, #4	; (adr r1, 8017aec <_printf_i+0x40>)
 8017ae8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017aec:	08017b45 	.word	0x08017b45
 8017af0:	08017b59 	.word	0x08017b59
 8017af4:	08017ad5 	.word	0x08017ad5
 8017af8:	08017ad5 	.word	0x08017ad5
 8017afc:	08017ad5 	.word	0x08017ad5
 8017b00:	08017ad5 	.word	0x08017ad5
 8017b04:	08017b59 	.word	0x08017b59
 8017b08:	08017ad5 	.word	0x08017ad5
 8017b0c:	08017ad5 	.word	0x08017ad5
 8017b10:	08017ad5 	.word	0x08017ad5
 8017b14:	08017ad5 	.word	0x08017ad5
 8017b18:	08017c5d 	.word	0x08017c5d
 8017b1c:	08017b85 	.word	0x08017b85
 8017b20:	08017c17 	.word	0x08017c17
 8017b24:	08017ad5 	.word	0x08017ad5
 8017b28:	08017ad5 	.word	0x08017ad5
 8017b2c:	08017c7f 	.word	0x08017c7f
 8017b30:	08017ad5 	.word	0x08017ad5
 8017b34:	08017b85 	.word	0x08017b85
 8017b38:	08017ad5 	.word	0x08017ad5
 8017b3c:	08017ad5 	.word	0x08017ad5
 8017b40:	08017c1f 	.word	0x08017c1f
 8017b44:	682b      	ldr	r3, [r5, #0]
 8017b46:	1d1a      	adds	r2, r3, #4
 8017b48:	681b      	ldr	r3, [r3, #0]
 8017b4a:	602a      	str	r2, [r5, #0]
 8017b4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017b50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017b54:	2301      	movs	r3, #1
 8017b56:	e09f      	b.n	8017c98 <_printf_i+0x1ec>
 8017b58:	6820      	ldr	r0, [r4, #0]
 8017b5a:	682b      	ldr	r3, [r5, #0]
 8017b5c:	0607      	lsls	r7, r0, #24
 8017b5e:	f103 0104 	add.w	r1, r3, #4
 8017b62:	6029      	str	r1, [r5, #0]
 8017b64:	d501      	bpl.n	8017b6a <_printf_i+0xbe>
 8017b66:	681e      	ldr	r6, [r3, #0]
 8017b68:	e003      	b.n	8017b72 <_printf_i+0xc6>
 8017b6a:	0646      	lsls	r6, r0, #25
 8017b6c:	d5fb      	bpl.n	8017b66 <_printf_i+0xba>
 8017b6e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8017b72:	2e00      	cmp	r6, #0
 8017b74:	da03      	bge.n	8017b7e <_printf_i+0xd2>
 8017b76:	232d      	movs	r3, #45	; 0x2d
 8017b78:	4276      	negs	r6, r6
 8017b7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017b7e:	485a      	ldr	r0, [pc, #360]	; (8017ce8 <_printf_i+0x23c>)
 8017b80:	230a      	movs	r3, #10
 8017b82:	e012      	b.n	8017baa <_printf_i+0xfe>
 8017b84:	682b      	ldr	r3, [r5, #0]
 8017b86:	6820      	ldr	r0, [r4, #0]
 8017b88:	1d19      	adds	r1, r3, #4
 8017b8a:	6029      	str	r1, [r5, #0]
 8017b8c:	0605      	lsls	r5, r0, #24
 8017b8e:	d501      	bpl.n	8017b94 <_printf_i+0xe8>
 8017b90:	681e      	ldr	r6, [r3, #0]
 8017b92:	e002      	b.n	8017b9a <_printf_i+0xee>
 8017b94:	0641      	lsls	r1, r0, #25
 8017b96:	d5fb      	bpl.n	8017b90 <_printf_i+0xe4>
 8017b98:	881e      	ldrh	r6, [r3, #0]
 8017b9a:	4853      	ldr	r0, [pc, #332]	; (8017ce8 <_printf_i+0x23c>)
 8017b9c:	2f6f      	cmp	r7, #111	; 0x6f
 8017b9e:	bf0c      	ite	eq
 8017ba0:	2308      	moveq	r3, #8
 8017ba2:	230a      	movne	r3, #10
 8017ba4:	2100      	movs	r1, #0
 8017ba6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017baa:	6865      	ldr	r5, [r4, #4]
 8017bac:	60a5      	str	r5, [r4, #8]
 8017bae:	2d00      	cmp	r5, #0
 8017bb0:	bfa2      	ittt	ge
 8017bb2:	6821      	ldrge	r1, [r4, #0]
 8017bb4:	f021 0104 	bicge.w	r1, r1, #4
 8017bb8:	6021      	strge	r1, [r4, #0]
 8017bba:	b90e      	cbnz	r6, 8017bc0 <_printf_i+0x114>
 8017bbc:	2d00      	cmp	r5, #0
 8017bbe:	d04b      	beq.n	8017c58 <_printf_i+0x1ac>
 8017bc0:	4615      	mov	r5, r2
 8017bc2:	fbb6 f1f3 	udiv	r1, r6, r3
 8017bc6:	fb03 6711 	mls	r7, r3, r1, r6
 8017bca:	5dc7      	ldrb	r7, [r0, r7]
 8017bcc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017bd0:	4637      	mov	r7, r6
 8017bd2:	42bb      	cmp	r3, r7
 8017bd4:	460e      	mov	r6, r1
 8017bd6:	d9f4      	bls.n	8017bc2 <_printf_i+0x116>
 8017bd8:	2b08      	cmp	r3, #8
 8017bda:	d10b      	bne.n	8017bf4 <_printf_i+0x148>
 8017bdc:	6823      	ldr	r3, [r4, #0]
 8017bde:	07de      	lsls	r6, r3, #31
 8017be0:	d508      	bpl.n	8017bf4 <_printf_i+0x148>
 8017be2:	6923      	ldr	r3, [r4, #16]
 8017be4:	6861      	ldr	r1, [r4, #4]
 8017be6:	4299      	cmp	r1, r3
 8017be8:	bfde      	ittt	le
 8017bea:	2330      	movle	r3, #48	; 0x30
 8017bec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017bf0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017bf4:	1b52      	subs	r2, r2, r5
 8017bf6:	6122      	str	r2, [r4, #16]
 8017bf8:	f8cd a000 	str.w	sl, [sp]
 8017bfc:	464b      	mov	r3, r9
 8017bfe:	aa03      	add	r2, sp, #12
 8017c00:	4621      	mov	r1, r4
 8017c02:	4640      	mov	r0, r8
 8017c04:	f7ff fee4 	bl	80179d0 <_printf_common>
 8017c08:	3001      	adds	r0, #1
 8017c0a:	d14a      	bne.n	8017ca2 <_printf_i+0x1f6>
 8017c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8017c10:	b004      	add	sp, #16
 8017c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017c16:	6823      	ldr	r3, [r4, #0]
 8017c18:	f043 0320 	orr.w	r3, r3, #32
 8017c1c:	6023      	str	r3, [r4, #0]
 8017c1e:	4833      	ldr	r0, [pc, #204]	; (8017cec <_printf_i+0x240>)
 8017c20:	2778      	movs	r7, #120	; 0x78
 8017c22:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017c26:	6823      	ldr	r3, [r4, #0]
 8017c28:	6829      	ldr	r1, [r5, #0]
 8017c2a:	061f      	lsls	r7, r3, #24
 8017c2c:	f851 6b04 	ldr.w	r6, [r1], #4
 8017c30:	d402      	bmi.n	8017c38 <_printf_i+0x18c>
 8017c32:	065f      	lsls	r7, r3, #25
 8017c34:	bf48      	it	mi
 8017c36:	b2b6      	uxthmi	r6, r6
 8017c38:	07df      	lsls	r7, r3, #31
 8017c3a:	bf48      	it	mi
 8017c3c:	f043 0320 	orrmi.w	r3, r3, #32
 8017c40:	6029      	str	r1, [r5, #0]
 8017c42:	bf48      	it	mi
 8017c44:	6023      	strmi	r3, [r4, #0]
 8017c46:	b91e      	cbnz	r6, 8017c50 <_printf_i+0x1a4>
 8017c48:	6823      	ldr	r3, [r4, #0]
 8017c4a:	f023 0320 	bic.w	r3, r3, #32
 8017c4e:	6023      	str	r3, [r4, #0]
 8017c50:	2310      	movs	r3, #16
 8017c52:	e7a7      	b.n	8017ba4 <_printf_i+0xf8>
 8017c54:	4824      	ldr	r0, [pc, #144]	; (8017ce8 <_printf_i+0x23c>)
 8017c56:	e7e4      	b.n	8017c22 <_printf_i+0x176>
 8017c58:	4615      	mov	r5, r2
 8017c5a:	e7bd      	b.n	8017bd8 <_printf_i+0x12c>
 8017c5c:	682b      	ldr	r3, [r5, #0]
 8017c5e:	6826      	ldr	r6, [r4, #0]
 8017c60:	6961      	ldr	r1, [r4, #20]
 8017c62:	1d18      	adds	r0, r3, #4
 8017c64:	6028      	str	r0, [r5, #0]
 8017c66:	0635      	lsls	r5, r6, #24
 8017c68:	681b      	ldr	r3, [r3, #0]
 8017c6a:	d501      	bpl.n	8017c70 <_printf_i+0x1c4>
 8017c6c:	6019      	str	r1, [r3, #0]
 8017c6e:	e002      	b.n	8017c76 <_printf_i+0x1ca>
 8017c70:	0670      	lsls	r0, r6, #25
 8017c72:	d5fb      	bpl.n	8017c6c <_printf_i+0x1c0>
 8017c74:	8019      	strh	r1, [r3, #0]
 8017c76:	2300      	movs	r3, #0
 8017c78:	6123      	str	r3, [r4, #16]
 8017c7a:	4615      	mov	r5, r2
 8017c7c:	e7bc      	b.n	8017bf8 <_printf_i+0x14c>
 8017c7e:	682b      	ldr	r3, [r5, #0]
 8017c80:	1d1a      	adds	r2, r3, #4
 8017c82:	602a      	str	r2, [r5, #0]
 8017c84:	681d      	ldr	r5, [r3, #0]
 8017c86:	6862      	ldr	r2, [r4, #4]
 8017c88:	2100      	movs	r1, #0
 8017c8a:	4628      	mov	r0, r5
 8017c8c:	f7e8 fb58 	bl	8000340 <memchr>
 8017c90:	b108      	cbz	r0, 8017c96 <_printf_i+0x1ea>
 8017c92:	1b40      	subs	r0, r0, r5
 8017c94:	6060      	str	r0, [r4, #4]
 8017c96:	6863      	ldr	r3, [r4, #4]
 8017c98:	6123      	str	r3, [r4, #16]
 8017c9a:	2300      	movs	r3, #0
 8017c9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017ca0:	e7aa      	b.n	8017bf8 <_printf_i+0x14c>
 8017ca2:	6923      	ldr	r3, [r4, #16]
 8017ca4:	462a      	mov	r2, r5
 8017ca6:	4649      	mov	r1, r9
 8017ca8:	4640      	mov	r0, r8
 8017caa:	47d0      	blx	sl
 8017cac:	3001      	adds	r0, #1
 8017cae:	d0ad      	beq.n	8017c0c <_printf_i+0x160>
 8017cb0:	6823      	ldr	r3, [r4, #0]
 8017cb2:	079b      	lsls	r3, r3, #30
 8017cb4:	d413      	bmi.n	8017cde <_printf_i+0x232>
 8017cb6:	68e0      	ldr	r0, [r4, #12]
 8017cb8:	9b03      	ldr	r3, [sp, #12]
 8017cba:	4298      	cmp	r0, r3
 8017cbc:	bfb8      	it	lt
 8017cbe:	4618      	movlt	r0, r3
 8017cc0:	e7a6      	b.n	8017c10 <_printf_i+0x164>
 8017cc2:	2301      	movs	r3, #1
 8017cc4:	4632      	mov	r2, r6
 8017cc6:	4649      	mov	r1, r9
 8017cc8:	4640      	mov	r0, r8
 8017cca:	47d0      	blx	sl
 8017ccc:	3001      	adds	r0, #1
 8017cce:	d09d      	beq.n	8017c0c <_printf_i+0x160>
 8017cd0:	3501      	adds	r5, #1
 8017cd2:	68e3      	ldr	r3, [r4, #12]
 8017cd4:	9903      	ldr	r1, [sp, #12]
 8017cd6:	1a5b      	subs	r3, r3, r1
 8017cd8:	42ab      	cmp	r3, r5
 8017cda:	dcf2      	bgt.n	8017cc2 <_printf_i+0x216>
 8017cdc:	e7eb      	b.n	8017cb6 <_printf_i+0x20a>
 8017cde:	2500      	movs	r5, #0
 8017ce0:	f104 0619 	add.w	r6, r4, #25
 8017ce4:	e7f5      	b.n	8017cd2 <_printf_i+0x226>
 8017ce6:	bf00      	nop
 8017ce8:	080185b9 	.word	0x080185b9
 8017cec:	080185ca 	.word	0x080185ca

08017cf0 <_scanf_chars>:
 8017cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017cf4:	4615      	mov	r5, r2
 8017cf6:	688a      	ldr	r2, [r1, #8]
 8017cf8:	4680      	mov	r8, r0
 8017cfa:	460c      	mov	r4, r1
 8017cfc:	b932      	cbnz	r2, 8017d0c <_scanf_chars+0x1c>
 8017cfe:	698a      	ldr	r2, [r1, #24]
 8017d00:	2a00      	cmp	r2, #0
 8017d02:	bf0c      	ite	eq
 8017d04:	2201      	moveq	r2, #1
 8017d06:	f04f 32ff 	movne.w	r2, #4294967295
 8017d0a:	608a      	str	r2, [r1, #8]
 8017d0c:	6822      	ldr	r2, [r4, #0]
 8017d0e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8017da0 <_scanf_chars+0xb0>
 8017d12:	06d1      	lsls	r1, r2, #27
 8017d14:	bf5f      	itttt	pl
 8017d16:	681a      	ldrpl	r2, [r3, #0]
 8017d18:	1d11      	addpl	r1, r2, #4
 8017d1a:	6019      	strpl	r1, [r3, #0]
 8017d1c:	6816      	ldrpl	r6, [r2, #0]
 8017d1e:	2700      	movs	r7, #0
 8017d20:	69a0      	ldr	r0, [r4, #24]
 8017d22:	b188      	cbz	r0, 8017d48 <_scanf_chars+0x58>
 8017d24:	2801      	cmp	r0, #1
 8017d26:	d107      	bne.n	8017d38 <_scanf_chars+0x48>
 8017d28:	682a      	ldr	r2, [r5, #0]
 8017d2a:	7811      	ldrb	r1, [r2, #0]
 8017d2c:	6962      	ldr	r2, [r4, #20]
 8017d2e:	5c52      	ldrb	r2, [r2, r1]
 8017d30:	b952      	cbnz	r2, 8017d48 <_scanf_chars+0x58>
 8017d32:	2f00      	cmp	r7, #0
 8017d34:	d031      	beq.n	8017d9a <_scanf_chars+0xaa>
 8017d36:	e022      	b.n	8017d7e <_scanf_chars+0x8e>
 8017d38:	2802      	cmp	r0, #2
 8017d3a:	d120      	bne.n	8017d7e <_scanf_chars+0x8e>
 8017d3c:	682b      	ldr	r3, [r5, #0]
 8017d3e:	781b      	ldrb	r3, [r3, #0]
 8017d40:	f819 3003 	ldrb.w	r3, [r9, r3]
 8017d44:	071b      	lsls	r3, r3, #28
 8017d46:	d41a      	bmi.n	8017d7e <_scanf_chars+0x8e>
 8017d48:	6823      	ldr	r3, [r4, #0]
 8017d4a:	06da      	lsls	r2, r3, #27
 8017d4c:	bf5e      	ittt	pl
 8017d4e:	682b      	ldrpl	r3, [r5, #0]
 8017d50:	781b      	ldrbpl	r3, [r3, #0]
 8017d52:	f806 3b01 	strbpl.w	r3, [r6], #1
 8017d56:	682a      	ldr	r2, [r5, #0]
 8017d58:	686b      	ldr	r3, [r5, #4]
 8017d5a:	3201      	adds	r2, #1
 8017d5c:	602a      	str	r2, [r5, #0]
 8017d5e:	68a2      	ldr	r2, [r4, #8]
 8017d60:	3b01      	subs	r3, #1
 8017d62:	3a01      	subs	r2, #1
 8017d64:	606b      	str	r3, [r5, #4]
 8017d66:	3701      	adds	r7, #1
 8017d68:	60a2      	str	r2, [r4, #8]
 8017d6a:	b142      	cbz	r2, 8017d7e <_scanf_chars+0x8e>
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	dcd7      	bgt.n	8017d20 <_scanf_chars+0x30>
 8017d70:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017d74:	4629      	mov	r1, r5
 8017d76:	4640      	mov	r0, r8
 8017d78:	4798      	blx	r3
 8017d7a:	2800      	cmp	r0, #0
 8017d7c:	d0d0      	beq.n	8017d20 <_scanf_chars+0x30>
 8017d7e:	6823      	ldr	r3, [r4, #0]
 8017d80:	f013 0310 	ands.w	r3, r3, #16
 8017d84:	d105      	bne.n	8017d92 <_scanf_chars+0xa2>
 8017d86:	68e2      	ldr	r2, [r4, #12]
 8017d88:	3201      	adds	r2, #1
 8017d8a:	60e2      	str	r2, [r4, #12]
 8017d8c:	69a2      	ldr	r2, [r4, #24]
 8017d8e:	b102      	cbz	r2, 8017d92 <_scanf_chars+0xa2>
 8017d90:	7033      	strb	r3, [r6, #0]
 8017d92:	6923      	ldr	r3, [r4, #16]
 8017d94:	443b      	add	r3, r7
 8017d96:	6123      	str	r3, [r4, #16]
 8017d98:	2000      	movs	r0, #0
 8017d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017d9e:	bf00      	nop
 8017da0:	080185f7 	.word	0x080185f7

08017da4 <_scanf_i>:
 8017da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017da8:	4698      	mov	r8, r3
 8017daa:	4b74      	ldr	r3, [pc, #464]	; (8017f7c <_scanf_i+0x1d8>)
 8017dac:	460c      	mov	r4, r1
 8017dae:	4682      	mov	sl, r0
 8017db0:	4616      	mov	r6, r2
 8017db2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017db6:	b087      	sub	sp, #28
 8017db8:	ab03      	add	r3, sp, #12
 8017dba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017dbe:	4b70      	ldr	r3, [pc, #448]	; (8017f80 <_scanf_i+0x1dc>)
 8017dc0:	69a1      	ldr	r1, [r4, #24]
 8017dc2:	4a70      	ldr	r2, [pc, #448]	; (8017f84 <_scanf_i+0x1e0>)
 8017dc4:	2903      	cmp	r1, #3
 8017dc6:	bf18      	it	ne
 8017dc8:	461a      	movne	r2, r3
 8017dca:	68a3      	ldr	r3, [r4, #8]
 8017dcc:	9201      	str	r2, [sp, #4]
 8017dce:	1e5a      	subs	r2, r3, #1
 8017dd0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8017dd4:	bf88      	it	hi
 8017dd6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8017dda:	4627      	mov	r7, r4
 8017ddc:	bf82      	ittt	hi
 8017dde:	eb03 0905 	addhi.w	r9, r3, r5
 8017de2:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017de6:	60a3      	strhi	r3, [r4, #8]
 8017de8:	f857 3b1c 	ldr.w	r3, [r7], #28
 8017dec:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8017df0:	bf98      	it	ls
 8017df2:	f04f 0900 	movls.w	r9, #0
 8017df6:	6023      	str	r3, [r4, #0]
 8017df8:	463d      	mov	r5, r7
 8017dfa:	f04f 0b00 	mov.w	fp, #0
 8017dfe:	6831      	ldr	r1, [r6, #0]
 8017e00:	ab03      	add	r3, sp, #12
 8017e02:	7809      	ldrb	r1, [r1, #0]
 8017e04:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8017e08:	2202      	movs	r2, #2
 8017e0a:	f7e8 fa99 	bl	8000340 <memchr>
 8017e0e:	b328      	cbz	r0, 8017e5c <_scanf_i+0xb8>
 8017e10:	f1bb 0f01 	cmp.w	fp, #1
 8017e14:	d159      	bne.n	8017eca <_scanf_i+0x126>
 8017e16:	6862      	ldr	r2, [r4, #4]
 8017e18:	b92a      	cbnz	r2, 8017e26 <_scanf_i+0x82>
 8017e1a:	6822      	ldr	r2, [r4, #0]
 8017e1c:	2308      	movs	r3, #8
 8017e1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017e22:	6063      	str	r3, [r4, #4]
 8017e24:	6022      	str	r2, [r4, #0]
 8017e26:	6822      	ldr	r2, [r4, #0]
 8017e28:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8017e2c:	6022      	str	r2, [r4, #0]
 8017e2e:	68a2      	ldr	r2, [r4, #8]
 8017e30:	1e51      	subs	r1, r2, #1
 8017e32:	60a1      	str	r1, [r4, #8]
 8017e34:	b192      	cbz	r2, 8017e5c <_scanf_i+0xb8>
 8017e36:	6832      	ldr	r2, [r6, #0]
 8017e38:	1c51      	adds	r1, r2, #1
 8017e3a:	6031      	str	r1, [r6, #0]
 8017e3c:	7812      	ldrb	r2, [r2, #0]
 8017e3e:	f805 2b01 	strb.w	r2, [r5], #1
 8017e42:	6872      	ldr	r2, [r6, #4]
 8017e44:	3a01      	subs	r2, #1
 8017e46:	2a00      	cmp	r2, #0
 8017e48:	6072      	str	r2, [r6, #4]
 8017e4a:	dc07      	bgt.n	8017e5c <_scanf_i+0xb8>
 8017e4c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8017e50:	4631      	mov	r1, r6
 8017e52:	4650      	mov	r0, sl
 8017e54:	4790      	blx	r2
 8017e56:	2800      	cmp	r0, #0
 8017e58:	f040 8085 	bne.w	8017f66 <_scanf_i+0x1c2>
 8017e5c:	f10b 0b01 	add.w	fp, fp, #1
 8017e60:	f1bb 0f03 	cmp.w	fp, #3
 8017e64:	d1cb      	bne.n	8017dfe <_scanf_i+0x5a>
 8017e66:	6863      	ldr	r3, [r4, #4]
 8017e68:	b90b      	cbnz	r3, 8017e6e <_scanf_i+0xca>
 8017e6a:	230a      	movs	r3, #10
 8017e6c:	6063      	str	r3, [r4, #4]
 8017e6e:	6863      	ldr	r3, [r4, #4]
 8017e70:	4945      	ldr	r1, [pc, #276]	; (8017f88 <_scanf_i+0x1e4>)
 8017e72:	6960      	ldr	r0, [r4, #20]
 8017e74:	1ac9      	subs	r1, r1, r3
 8017e76:	f000 f889 	bl	8017f8c <__sccl>
 8017e7a:	f04f 0b00 	mov.w	fp, #0
 8017e7e:	68a3      	ldr	r3, [r4, #8]
 8017e80:	6822      	ldr	r2, [r4, #0]
 8017e82:	2b00      	cmp	r3, #0
 8017e84:	d03d      	beq.n	8017f02 <_scanf_i+0x15e>
 8017e86:	6831      	ldr	r1, [r6, #0]
 8017e88:	6960      	ldr	r0, [r4, #20]
 8017e8a:	f891 c000 	ldrb.w	ip, [r1]
 8017e8e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8017e92:	2800      	cmp	r0, #0
 8017e94:	d035      	beq.n	8017f02 <_scanf_i+0x15e>
 8017e96:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8017e9a:	d124      	bne.n	8017ee6 <_scanf_i+0x142>
 8017e9c:	0510      	lsls	r0, r2, #20
 8017e9e:	d522      	bpl.n	8017ee6 <_scanf_i+0x142>
 8017ea0:	f10b 0b01 	add.w	fp, fp, #1
 8017ea4:	f1b9 0f00 	cmp.w	r9, #0
 8017ea8:	d003      	beq.n	8017eb2 <_scanf_i+0x10e>
 8017eaa:	3301      	adds	r3, #1
 8017eac:	f109 39ff 	add.w	r9, r9, #4294967295
 8017eb0:	60a3      	str	r3, [r4, #8]
 8017eb2:	6873      	ldr	r3, [r6, #4]
 8017eb4:	3b01      	subs	r3, #1
 8017eb6:	2b00      	cmp	r3, #0
 8017eb8:	6073      	str	r3, [r6, #4]
 8017eba:	dd1b      	ble.n	8017ef4 <_scanf_i+0x150>
 8017ebc:	6833      	ldr	r3, [r6, #0]
 8017ebe:	3301      	adds	r3, #1
 8017ec0:	6033      	str	r3, [r6, #0]
 8017ec2:	68a3      	ldr	r3, [r4, #8]
 8017ec4:	3b01      	subs	r3, #1
 8017ec6:	60a3      	str	r3, [r4, #8]
 8017ec8:	e7d9      	b.n	8017e7e <_scanf_i+0xda>
 8017eca:	f1bb 0f02 	cmp.w	fp, #2
 8017ece:	d1ae      	bne.n	8017e2e <_scanf_i+0x8a>
 8017ed0:	6822      	ldr	r2, [r4, #0]
 8017ed2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8017ed6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8017eda:	d1bf      	bne.n	8017e5c <_scanf_i+0xb8>
 8017edc:	2310      	movs	r3, #16
 8017ede:	6063      	str	r3, [r4, #4]
 8017ee0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017ee4:	e7a2      	b.n	8017e2c <_scanf_i+0x88>
 8017ee6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8017eea:	6022      	str	r2, [r4, #0]
 8017eec:	780b      	ldrb	r3, [r1, #0]
 8017eee:	f805 3b01 	strb.w	r3, [r5], #1
 8017ef2:	e7de      	b.n	8017eb2 <_scanf_i+0x10e>
 8017ef4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017ef8:	4631      	mov	r1, r6
 8017efa:	4650      	mov	r0, sl
 8017efc:	4798      	blx	r3
 8017efe:	2800      	cmp	r0, #0
 8017f00:	d0df      	beq.n	8017ec2 <_scanf_i+0x11e>
 8017f02:	6823      	ldr	r3, [r4, #0]
 8017f04:	05d9      	lsls	r1, r3, #23
 8017f06:	d50d      	bpl.n	8017f24 <_scanf_i+0x180>
 8017f08:	42bd      	cmp	r5, r7
 8017f0a:	d909      	bls.n	8017f20 <_scanf_i+0x17c>
 8017f0c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017f10:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017f14:	4632      	mov	r2, r6
 8017f16:	4650      	mov	r0, sl
 8017f18:	4798      	blx	r3
 8017f1a:	f105 39ff 	add.w	r9, r5, #4294967295
 8017f1e:	464d      	mov	r5, r9
 8017f20:	42bd      	cmp	r5, r7
 8017f22:	d028      	beq.n	8017f76 <_scanf_i+0x1d2>
 8017f24:	6822      	ldr	r2, [r4, #0]
 8017f26:	f012 0210 	ands.w	r2, r2, #16
 8017f2a:	d113      	bne.n	8017f54 <_scanf_i+0x1b0>
 8017f2c:	702a      	strb	r2, [r5, #0]
 8017f2e:	6863      	ldr	r3, [r4, #4]
 8017f30:	9e01      	ldr	r6, [sp, #4]
 8017f32:	4639      	mov	r1, r7
 8017f34:	4650      	mov	r0, sl
 8017f36:	47b0      	blx	r6
 8017f38:	f8d8 3000 	ldr.w	r3, [r8]
 8017f3c:	6821      	ldr	r1, [r4, #0]
 8017f3e:	1d1a      	adds	r2, r3, #4
 8017f40:	f8c8 2000 	str.w	r2, [r8]
 8017f44:	f011 0f20 	tst.w	r1, #32
 8017f48:	681b      	ldr	r3, [r3, #0]
 8017f4a:	d00f      	beq.n	8017f6c <_scanf_i+0x1c8>
 8017f4c:	6018      	str	r0, [r3, #0]
 8017f4e:	68e3      	ldr	r3, [r4, #12]
 8017f50:	3301      	adds	r3, #1
 8017f52:	60e3      	str	r3, [r4, #12]
 8017f54:	6923      	ldr	r3, [r4, #16]
 8017f56:	1bed      	subs	r5, r5, r7
 8017f58:	445d      	add	r5, fp
 8017f5a:	442b      	add	r3, r5
 8017f5c:	6123      	str	r3, [r4, #16]
 8017f5e:	2000      	movs	r0, #0
 8017f60:	b007      	add	sp, #28
 8017f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f66:	f04f 0b00 	mov.w	fp, #0
 8017f6a:	e7ca      	b.n	8017f02 <_scanf_i+0x15e>
 8017f6c:	07ca      	lsls	r2, r1, #31
 8017f6e:	bf4c      	ite	mi
 8017f70:	8018      	strhmi	r0, [r3, #0]
 8017f72:	6018      	strpl	r0, [r3, #0]
 8017f74:	e7eb      	b.n	8017f4e <_scanf_i+0x1aa>
 8017f76:	2001      	movs	r0, #1
 8017f78:	e7f2      	b.n	8017f60 <_scanf_i+0x1bc>
 8017f7a:	bf00      	nop
 8017f7c:	080184d8 	.word	0x080184d8
 8017f80:	08018315 	.word	0x08018315
 8017f84:	0801822d 	.word	0x0801822d
 8017f88:	080185eb 	.word	0x080185eb

08017f8c <__sccl>:
 8017f8c:	b570      	push	{r4, r5, r6, lr}
 8017f8e:	780b      	ldrb	r3, [r1, #0]
 8017f90:	4604      	mov	r4, r0
 8017f92:	2b5e      	cmp	r3, #94	; 0x5e
 8017f94:	bf0b      	itete	eq
 8017f96:	784b      	ldrbeq	r3, [r1, #1]
 8017f98:	1c4a      	addne	r2, r1, #1
 8017f9a:	1c8a      	addeq	r2, r1, #2
 8017f9c:	2100      	movne	r1, #0
 8017f9e:	bf08      	it	eq
 8017fa0:	2101      	moveq	r1, #1
 8017fa2:	3801      	subs	r0, #1
 8017fa4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8017fa8:	f800 1f01 	strb.w	r1, [r0, #1]!
 8017fac:	42a8      	cmp	r0, r5
 8017fae:	d1fb      	bne.n	8017fa8 <__sccl+0x1c>
 8017fb0:	b90b      	cbnz	r3, 8017fb6 <__sccl+0x2a>
 8017fb2:	1e50      	subs	r0, r2, #1
 8017fb4:	bd70      	pop	{r4, r5, r6, pc}
 8017fb6:	f081 0101 	eor.w	r1, r1, #1
 8017fba:	54e1      	strb	r1, [r4, r3]
 8017fbc:	4610      	mov	r0, r2
 8017fbe:	4602      	mov	r2, r0
 8017fc0:	f812 5b01 	ldrb.w	r5, [r2], #1
 8017fc4:	2d2d      	cmp	r5, #45	; 0x2d
 8017fc6:	d005      	beq.n	8017fd4 <__sccl+0x48>
 8017fc8:	2d5d      	cmp	r5, #93	; 0x5d
 8017fca:	d016      	beq.n	8017ffa <__sccl+0x6e>
 8017fcc:	2d00      	cmp	r5, #0
 8017fce:	d0f1      	beq.n	8017fb4 <__sccl+0x28>
 8017fd0:	462b      	mov	r3, r5
 8017fd2:	e7f2      	b.n	8017fba <__sccl+0x2e>
 8017fd4:	7846      	ldrb	r6, [r0, #1]
 8017fd6:	2e5d      	cmp	r6, #93	; 0x5d
 8017fd8:	d0fa      	beq.n	8017fd0 <__sccl+0x44>
 8017fda:	42b3      	cmp	r3, r6
 8017fdc:	dcf8      	bgt.n	8017fd0 <__sccl+0x44>
 8017fde:	3002      	adds	r0, #2
 8017fe0:	461a      	mov	r2, r3
 8017fe2:	3201      	adds	r2, #1
 8017fe4:	4296      	cmp	r6, r2
 8017fe6:	54a1      	strb	r1, [r4, r2]
 8017fe8:	dcfb      	bgt.n	8017fe2 <__sccl+0x56>
 8017fea:	1af2      	subs	r2, r6, r3
 8017fec:	3a01      	subs	r2, #1
 8017fee:	1c5d      	adds	r5, r3, #1
 8017ff0:	42b3      	cmp	r3, r6
 8017ff2:	bfa8      	it	ge
 8017ff4:	2200      	movge	r2, #0
 8017ff6:	18ab      	adds	r3, r5, r2
 8017ff8:	e7e1      	b.n	8017fbe <__sccl+0x32>
 8017ffa:	4610      	mov	r0, r2
 8017ffc:	e7da      	b.n	8017fb4 <__sccl+0x28>

08017ffe <__submore>:
 8017ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018002:	460c      	mov	r4, r1
 8018004:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8018006:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801800a:	4299      	cmp	r1, r3
 801800c:	d11d      	bne.n	801804a <__submore+0x4c>
 801800e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8018012:	f7ff f927 	bl	8017264 <_malloc_r>
 8018016:	b918      	cbnz	r0, 8018020 <__submore+0x22>
 8018018:	f04f 30ff 	mov.w	r0, #4294967295
 801801c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018024:	63a3      	str	r3, [r4, #56]	; 0x38
 8018026:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801802a:	6360      	str	r0, [r4, #52]	; 0x34
 801802c:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8018030:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8018034:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8018038:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801803c:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8018040:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8018044:	6020      	str	r0, [r4, #0]
 8018046:	2000      	movs	r0, #0
 8018048:	e7e8      	b.n	801801c <__submore+0x1e>
 801804a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801804c:	0077      	lsls	r7, r6, #1
 801804e:	463a      	mov	r2, r7
 8018050:	f000 f83a 	bl	80180c8 <_realloc_r>
 8018054:	4605      	mov	r5, r0
 8018056:	2800      	cmp	r0, #0
 8018058:	d0de      	beq.n	8018018 <__submore+0x1a>
 801805a:	eb00 0806 	add.w	r8, r0, r6
 801805e:	4601      	mov	r1, r0
 8018060:	4632      	mov	r2, r6
 8018062:	4640      	mov	r0, r8
 8018064:	f7ff f884 	bl	8017170 <memcpy>
 8018068:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801806c:	f8c4 8000 	str.w	r8, [r4]
 8018070:	e7e9      	b.n	8018046 <__submore+0x48>

08018072 <memmove>:
 8018072:	4288      	cmp	r0, r1
 8018074:	b510      	push	{r4, lr}
 8018076:	eb01 0402 	add.w	r4, r1, r2
 801807a:	d902      	bls.n	8018082 <memmove+0x10>
 801807c:	4284      	cmp	r4, r0
 801807e:	4623      	mov	r3, r4
 8018080:	d807      	bhi.n	8018092 <memmove+0x20>
 8018082:	1e43      	subs	r3, r0, #1
 8018084:	42a1      	cmp	r1, r4
 8018086:	d008      	beq.n	801809a <memmove+0x28>
 8018088:	f811 2b01 	ldrb.w	r2, [r1], #1
 801808c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018090:	e7f8      	b.n	8018084 <memmove+0x12>
 8018092:	4402      	add	r2, r0
 8018094:	4601      	mov	r1, r0
 8018096:	428a      	cmp	r2, r1
 8018098:	d100      	bne.n	801809c <memmove+0x2a>
 801809a:	bd10      	pop	{r4, pc}
 801809c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80180a0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80180a4:	e7f7      	b.n	8018096 <memmove+0x24>
	...

080180a8 <_sbrk_r>:
 80180a8:	b538      	push	{r3, r4, r5, lr}
 80180aa:	4d06      	ldr	r5, [pc, #24]	; (80180c4 <_sbrk_r+0x1c>)
 80180ac:	2300      	movs	r3, #0
 80180ae:	4604      	mov	r4, r0
 80180b0:	4608      	mov	r0, r1
 80180b2:	602b      	str	r3, [r5, #0]
 80180b4:	f7eb fb6e 	bl	8003794 <_sbrk>
 80180b8:	1c43      	adds	r3, r0, #1
 80180ba:	d102      	bne.n	80180c2 <_sbrk_r+0x1a>
 80180bc:	682b      	ldr	r3, [r5, #0]
 80180be:	b103      	cbz	r3, 80180c2 <_sbrk_r+0x1a>
 80180c0:	6023      	str	r3, [r4, #0]
 80180c2:	bd38      	pop	{r3, r4, r5, pc}
 80180c4:	24003334 	.word	0x24003334

080180c8 <_realloc_r>:
 80180c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80180cc:	4680      	mov	r8, r0
 80180ce:	4614      	mov	r4, r2
 80180d0:	460e      	mov	r6, r1
 80180d2:	b921      	cbnz	r1, 80180de <_realloc_r+0x16>
 80180d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80180d8:	4611      	mov	r1, r2
 80180da:	f7ff b8c3 	b.w	8017264 <_malloc_r>
 80180de:	b92a      	cbnz	r2, 80180ec <_realloc_r+0x24>
 80180e0:	f7ff f854 	bl	801718c <_free_r>
 80180e4:	4625      	mov	r5, r4
 80180e6:	4628      	mov	r0, r5
 80180e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80180ec:	f000 f914 	bl	8018318 <_malloc_usable_size_r>
 80180f0:	4284      	cmp	r4, r0
 80180f2:	4607      	mov	r7, r0
 80180f4:	d802      	bhi.n	80180fc <_realloc_r+0x34>
 80180f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80180fa:	d812      	bhi.n	8018122 <_realloc_r+0x5a>
 80180fc:	4621      	mov	r1, r4
 80180fe:	4640      	mov	r0, r8
 8018100:	f7ff f8b0 	bl	8017264 <_malloc_r>
 8018104:	4605      	mov	r5, r0
 8018106:	2800      	cmp	r0, #0
 8018108:	d0ed      	beq.n	80180e6 <_realloc_r+0x1e>
 801810a:	42bc      	cmp	r4, r7
 801810c:	4622      	mov	r2, r4
 801810e:	4631      	mov	r1, r6
 8018110:	bf28      	it	cs
 8018112:	463a      	movcs	r2, r7
 8018114:	f7ff f82c 	bl	8017170 <memcpy>
 8018118:	4631      	mov	r1, r6
 801811a:	4640      	mov	r0, r8
 801811c:	f7ff f836 	bl	801718c <_free_r>
 8018120:	e7e1      	b.n	80180e6 <_realloc_r+0x1e>
 8018122:	4635      	mov	r5, r6
 8018124:	e7df      	b.n	80180e6 <_realloc_r+0x1e>
	...

08018128 <_strtol_l.constprop.0>:
 8018128:	2b01      	cmp	r3, #1
 801812a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801812e:	d001      	beq.n	8018134 <_strtol_l.constprop.0+0xc>
 8018130:	2b24      	cmp	r3, #36	; 0x24
 8018132:	d906      	bls.n	8018142 <_strtol_l.constprop.0+0x1a>
 8018134:	f7fe ffe8 	bl	8017108 <__errno>
 8018138:	2316      	movs	r3, #22
 801813a:	6003      	str	r3, [r0, #0]
 801813c:	2000      	movs	r0, #0
 801813e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018142:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8018228 <_strtol_l.constprop.0+0x100>
 8018146:	460d      	mov	r5, r1
 8018148:	462e      	mov	r6, r5
 801814a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801814e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8018152:	f017 0708 	ands.w	r7, r7, #8
 8018156:	d1f7      	bne.n	8018148 <_strtol_l.constprop.0+0x20>
 8018158:	2c2d      	cmp	r4, #45	; 0x2d
 801815a:	d132      	bne.n	80181c2 <_strtol_l.constprop.0+0x9a>
 801815c:	782c      	ldrb	r4, [r5, #0]
 801815e:	2701      	movs	r7, #1
 8018160:	1cb5      	adds	r5, r6, #2
 8018162:	2b00      	cmp	r3, #0
 8018164:	d05b      	beq.n	801821e <_strtol_l.constprop.0+0xf6>
 8018166:	2b10      	cmp	r3, #16
 8018168:	d109      	bne.n	801817e <_strtol_l.constprop.0+0x56>
 801816a:	2c30      	cmp	r4, #48	; 0x30
 801816c:	d107      	bne.n	801817e <_strtol_l.constprop.0+0x56>
 801816e:	782c      	ldrb	r4, [r5, #0]
 8018170:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8018174:	2c58      	cmp	r4, #88	; 0x58
 8018176:	d14d      	bne.n	8018214 <_strtol_l.constprop.0+0xec>
 8018178:	786c      	ldrb	r4, [r5, #1]
 801817a:	2310      	movs	r3, #16
 801817c:	3502      	adds	r5, #2
 801817e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8018182:	f108 38ff 	add.w	r8, r8, #4294967295
 8018186:	f04f 0e00 	mov.w	lr, #0
 801818a:	fbb8 f9f3 	udiv	r9, r8, r3
 801818e:	4676      	mov	r6, lr
 8018190:	fb03 8a19 	mls	sl, r3, r9, r8
 8018194:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8018198:	f1bc 0f09 	cmp.w	ip, #9
 801819c:	d816      	bhi.n	80181cc <_strtol_l.constprop.0+0xa4>
 801819e:	4664      	mov	r4, ip
 80181a0:	42a3      	cmp	r3, r4
 80181a2:	dd24      	ble.n	80181ee <_strtol_l.constprop.0+0xc6>
 80181a4:	f1be 3fff 	cmp.w	lr, #4294967295
 80181a8:	d008      	beq.n	80181bc <_strtol_l.constprop.0+0x94>
 80181aa:	45b1      	cmp	r9, r6
 80181ac:	d31c      	bcc.n	80181e8 <_strtol_l.constprop.0+0xc0>
 80181ae:	d101      	bne.n	80181b4 <_strtol_l.constprop.0+0x8c>
 80181b0:	45a2      	cmp	sl, r4
 80181b2:	db19      	blt.n	80181e8 <_strtol_l.constprop.0+0xc0>
 80181b4:	fb06 4603 	mla	r6, r6, r3, r4
 80181b8:	f04f 0e01 	mov.w	lr, #1
 80181bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80181c0:	e7e8      	b.n	8018194 <_strtol_l.constprop.0+0x6c>
 80181c2:	2c2b      	cmp	r4, #43	; 0x2b
 80181c4:	bf04      	itt	eq
 80181c6:	782c      	ldrbeq	r4, [r5, #0]
 80181c8:	1cb5      	addeq	r5, r6, #2
 80181ca:	e7ca      	b.n	8018162 <_strtol_l.constprop.0+0x3a>
 80181cc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80181d0:	f1bc 0f19 	cmp.w	ip, #25
 80181d4:	d801      	bhi.n	80181da <_strtol_l.constprop.0+0xb2>
 80181d6:	3c37      	subs	r4, #55	; 0x37
 80181d8:	e7e2      	b.n	80181a0 <_strtol_l.constprop.0+0x78>
 80181da:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80181de:	f1bc 0f19 	cmp.w	ip, #25
 80181e2:	d804      	bhi.n	80181ee <_strtol_l.constprop.0+0xc6>
 80181e4:	3c57      	subs	r4, #87	; 0x57
 80181e6:	e7db      	b.n	80181a0 <_strtol_l.constprop.0+0x78>
 80181e8:	f04f 3eff 	mov.w	lr, #4294967295
 80181ec:	e7e6      	b.n	80181bc <_strtol_l.constprop.0+0x94>
 80181ee:	f1be 3fff 	cmp.w	lr, #4294967295
 80181f2:	d105      	bne.n	8018200 <_strtol_l.constprop.0+0xd8>
 80181f4:	2322      	movs	r3, #34	; 0x22
 80181f6:	6003      	str	r3, [r0, #0]
 80181f8:	4646      	mov	r6, r8
 80181fa:	b942      	cbnz	r2, 801820e <_strtol_l.constprop.0+0xe6>
 80181fc:	4630      	mov	r0, r6
 80181fe:	e79e      	b.n	801813e <_strtol_l.constprop.0+0x16>
 8018200:	b107      	cbz	r7, 8018204 <_strtol_l.constprop.0+0xdc>
 8018202:	4276      	negs	r6, r6
 8018204:	2a00      	cmp	r2, #0
 8018206:	d0f9      	beq.n	80181fc <_strtol_l.constprop.0+0xd4>
 8018208:	f1be 0f00 	cmp.w	lr, #0
 801820c:	d000      	beq.n	8018210 <_strtol_l.constprop.0+0xe8>
 801820e:	1e69      	subs	r1, r5, #1
 8018210:	6011      	str	r1, [r2, #0]
 8018212:	e7f3      	b.n	80181fc <_strtol_l.constprop.0+0xd4>
 8018214:	2430      	movs	r4, #48	; 0x30
 8018216:	2b00      	cmp	r3, #0
 8018218:	d1b1      	bne.n	801817e <_strtol_l.constprop.0+0x56>
 801821a:	2308      	movs	r3, #8
 801821c:	e7af      	b.n	801817e <_strtol_l.constprop.0+0x56>
 801821e:	2c30      	cmp	r4, #48	; 0x30
 8018220:	d0a5      	beq.n	801816e <_strtol_l.constprop.0+0x46>
 8018222:	230a      	movs	r3, #10
 8018224:	e7ab      	b.n	801817e <_strtol_l.constprop.0+0x56>
 8018226:	bf00      	nop
 8018228:	080185f7 	.word	0x080185f7

0801822c <_strtol_r>:
 801822c:	f7ff bf7c 	b.w	8018128 <_strtol_l.constprop.0>

08018230 <_strtoul_l.constprop.0>:
 8018230:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018234:	4f36      	ldr	r7, [pc, #216]	; (8018310 <_strtoul_l.constprop.0+0xe0>)
 8018236:	4686      	mov	lr, r0
 8018238:	460d      	mov	r5, r1
 801823a:	4628      	mov	r0, r5
 801823c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018240:	5d3e      	ldrb	r6, [r7, r4]
 8018242:	f016 0608 	ands.w	r6, r6, #8
 8018246:	d1f8      	bne.n	801823a <_strtoul_l.constprop.0+0xa>
 8018248:	2c2d      	cmp	r4, #45	; 0x2d
 801824a:	d130      	bne.n	80182ae <_strtoul_l.constprop.0+0x7e>
 801824c:	782c      	ldrb	r4, [r5, #0]
 801824e:	2601      	movs	r6, #1
 8018250:	1c85      	adds	r5, r0, #2
 8018252:	2b00      	cmp	r3, #0
 8018254:	d057      	beq.n	8018306 <_strtoul_l.constprop.0+0xd6>
 8018256:	2b10      	cmp	r3, #16
 8018258:	d109      	bne.n	801826e <_strtoul_l.constprop.0+0x3e>
 801825a:	2c30      	cmp	r4, #48	; 0x30
 801825c:	d107      	bne.n	801826e <_strtoul_l.constprop.0+0x3e>
 801825e:	7828      	ldrb	r0, [r5, #0]
 8018260:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8018264:	2858      	cmp	r0, #88	; 0x58
 8018266:	d149      	bne.n	80182fc <_strtoul_l.constprop.0+0xcc>
 8018268:	786c      	ldrb	r4, [r5, #1]
 801826a:	2310      	movs	r3, #16
 801826c:	3502      	adds	r5, #2
 801826e:	f04f 38ff 	mov.w	r8, #4294967295
 8018272:	2700      	movs	r7, #0
 8018274:	fbb8 f8f3 	udiv	r8, r8, r3
 8018278:	fb03 f908 	mul.w	r9, r3, r8
 801827c:	ea6f 0909 	mvn.w	r9, r9
 8018280:	4638      	mov	r0, r7
 8018282:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8018286:	f1bc 0f09 	cmp.w	ip, #9
 801828a:	d815      	bhi.n	80182b8 <_strtoul_l.constprop.0+0x88>
 801828c:	4664      	mov	r4, ip
 801828e:	42a3      	cmp	r3, r4
 8018290:	dd23      	ble.n	80182da <_strtoul_l.constprop.0+0xaa>
 8018292:	f1b7 3fff 	cmp.w	r7, #4294967295
 8018296:	d007      	beq.n	80182a8 <_strtoul_l.constprop.0+0x78>
 8018298:	4580      	cmp	r8, r0
 801829a:	d31b      	bcc.n	80182d4 <_strtoul_l.constprop.0+0xa4>
 801829c:	d101      	bne.n	80182a2 <_strtoul_l.constprop.0+0x72>
 801829e:	45a1      	cmp	r9, r4
 80182a0:	db18      	blt.n	80182d4 <_strtoul_l.constprop.0+0xa4>
 80182a2:	fb00 4003 	mla	r0, r0, r3, r4
 80182a6:	2701      	movs	r7, #1
 80182a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80182ac:	e7e9      	b.n	8018282 <_strtoul_l.constprop.0+0x52>
 80182ae:	2c2b      	cmp	r4, #43	; 0x2b
 80182b0:	bf04      	itt	eq
 80182b2:	782c      	ldrbeq	r4, [r5, #0]
 80182b4:	1c85      	addeq	r5, r0, #2
 80182b6:	e7cc      	b.n	8018252 <_strtoul_l.constprop.0+0x22>
 80182b8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80182bc:	f1bc 0f19 	cmp.w	ip, #25
 80182c0:	d801      	bhi.n	80182c6 <_strtoul_l.constprop.0+0x96>
 80182c2:	3c37      	subs	r4, #55	; 0x37
 80182c4:	e7e3      	b.n	801828e <_strtoul_l.constprop.0+0x5e>
 80182c6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80182ca:	f1bc 0f19 	cmp.w	ip, #25
 80182ce:	d804      	bhi.n	80182da <_strtoul_l.constprop.0+0xaa>
 80182d0:	3c57      	subs	r4, #87	; 0x57
 80182d2:	e7dc      	b.n	801828e <_strtoul_l.constprop.0+0x5e>
 80182d4:	f04f 37ff 	mov.w	r7, #4294967295
 80182d8:	e7e6      	b.n	80182a8 <_strtoul_l.constprop.0+0x78>
 80182da:	1c7b      	adds	r3, r7, #1
 80182dc:	d106      	bne.n	80182ec <_strtoul_l.constprop.0+0xbc>
 80182de:	2322      	movs	r3, #34	; 0x22
 80182e0:	f8ce 3000 	str.w	r3, [lr]
 80182e4:	4638      	mov	r0, r7
 80182e6:	b932      	cbnz	r2, 80182f6 <_strtoul_l.constprop.0+0xc6>
 80182e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80182ec:	b106      	cbz	r6, 80182f0 <_strtoul_l.constprop.0+0xc0>
 80182ee:	4240      	negs	r0, r0
 80182f0:	2a00      	cmp	r2, #0
 80182f2:	d0f9      	beq.n	80182e8 <_strtoul_l.constprop.0+0xb8>
 80182f4:	b107      	cbz	r7, 80182f8 <_strtoul_l.constprop.0+0xc8>
 80182f6:	1e69      	subs	r1, r5, #1
 80182f8:	6011      	str	r1, [r2, #0]
 80182fa:	e7f5      	b.n	80182e8 <_strtoul_l.constprop.0+0xb8>
 80182fc:	2430      	movs	r4, #48	; 0x30
 80182fe:	2b00      	cmp	r3, #0
 8018300:	d1b5      	bne.n	801826e <_strtoul_l.constprop.0+0x3e>
 8018302:	2308      	movs	r3, #8
 8018304:	e7b3      	b.n	801826e <_strtoul_l.constprop.0+0x3e>
 8018306:	2c30      	cmp	r4, #48	; 0x30
 8018308:	d0a9      	beq.n	801825e <_strtoul_l.constprop.0+0x2e>
 801830a:	230a      	movs	r3, #10
 801830c:	e7af      	b.n	801826e <_strtoul_l.constprop.0+0x3e>
 801830e:	bf00      	nop
 8018310:	080185f7 	.word	0x080185f7

08018314 <_strtoul_r>:
 8018314:	f7ff bf8c 	b.w	8018230 <_strtoul_l.constprop.0>

08018318 <_malloc_usable_size_r>:
 8018318:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801831c:	1f18      	subs	r0, r3, #4
 801831e:	2b00      	cmp	r3, #0
 8018320:	bfbc      	itt	lt
 8018322:	580b      	ldrlt	r3, [r1, r0]
 8018324:	18c0      	addlt	r0, r0, r3
 8018326:	4770      	bx	lr

08018328 <_init>:
 8018328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801832a:	bf00      	nop
 801832c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801832e:	bc08      	pop	{r3}
 8018330:	469e      	mov	lr, r3
 8018332:	4770      	bx	lr

08018334 <_fini>:
 8018334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018336:	bf00      	nop
 8018338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801833a:	bc08      	pop	{r3}
 801833c:	469e      	mov	lr, r3
 801833e:	4770      	bx	lr
