
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f208  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c14  0801f4d8  0801f4d8  0002f4d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080200ec  080200ec  000300ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080200f4  080200f4  000300f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080200f8  080200f8  000300f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002d4  24000000  080200fc  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000322c  240002d4  080203d0  000402d4  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  24003500  080203d0  00043500  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000402d4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003a31d  00000000  00000000  00040302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006324  00000000  00000000  0007a61f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002db0  00000000  00000000  00080948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002b40  00000000  00000000  000836f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000ba48  00000000  00000000  00086238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003dee2  00000000  00000000  00091c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017f9f5  00000000  00000000  000cfb62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0024f557  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000dae0  00000000  00000000  0024f5a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002d4 	.word	0x240002d4
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801f4c0 	.word	0x0801f4c0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002d8 	.word	0x240002d8
 800030c:	0801f4c0 	.word	0x0801f4c0

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr

08000324 <strlen>:
 8000324:	4603      	mov	r3, r0
 8000326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800032a:	2a00      	cmp	r2, #0
 800032c:	d1fb      	bne.n	8000326 <strlen+0x2>
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	3801      	subs	r0, #1
 8000332:	4770      	bx	lr
	...

08000340 <memchr>:
 8000340:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000344:	2a10      	cmp	r2, #16
 8000346:	db2b      	blt.n	80003a0 <memchr+0x60>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	d008      	beq.n	8000360 <memchr+0x20>
 800034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000352:	3a01      	subs	r2, #1
 8000354:	428b      	cmp	r3, r1
 8000356:	d02d      	beq.n	80003b4 <memchr+0x74>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	b342      	cbz	r2, 80003b0 <memchr+0x70>
 800035e:	d1f6      	bne.n	800034e <memchr+0xe>
 8000360:	b4f0      	push	{r4, r5, r6, r7}
 8000362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800036a:	f022 0407 	bic.w	r4, r2, #7
 800036e:	f07f 0700 	mvns.w	r7, #0
 8000372:	2300      	movs	r3, #0
 8000374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000378:	3c08      	subs	r4, #8
 800037a:	ea85 0501 	eor.w	r5, r5, r1
 800037e:	ea86 0601 	eor.w	r6, r6, r1
 8000382:	fa85 f547 	uadd8	r5, r5, r7
 8000386:	faa3 f587 	sel	r5, r3, r7
 800038a:	fa86 f647 	uadd8	r6, r6, r7
 800038e:	faa5 f687 	sel	r6, r5, r7
 8000392:	b98e      	cbnz	r6, 80003b8 <memchr+0x78>
 8000394:	d1ee      	bne.n	8000374 <memchr+0x34>
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800039c:	f002 0207 	and.w	r2, r2, #7
 80003a0:	b132      	cbz	r2, 80003b0 <memchr+0x70>
 80003a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a6:	3a01      	subs	r2, #1
 80003a8:	ea83 0301 	eor.w	r3, r3, r1
 80003ac:	b113      	cbz	r3, 80003b4 <memchr+0x74>
 80003ae:	d1f8      	bne.n	80003a2 <memchr+0x62>
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	bf06      	itte	eq
 80003bc:	4635      	moveq	r5, r6
 80003be:	3803      	subeq	r0, #3
 80003c0:	3807      	subne	r0, #7
 80003c2:	f015 0f01 	tst.w	r5, #1
 80003c6:	d107      	bne.n	80003d8 <memchr+0x98>
 80003c8:	3001      	adds	r0, #1
 80003ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ce:	bf02      	ittt	eq
 80003d0:	3001      	addeq	r0, #1
 80003d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003d6:	3001      	addeq	r0, #1
 80003d8:	bcf0      	pop	{r4, r5, r6, r7}
 80003da:	3801      	subs	r0, #1
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	; 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_uldivmod>:
 8000758:	b953      	cbnz	r3, 8000770 <__aeabi_uldivmod+0x18>
 800075a:	b94a      	cbnz	r2, 8000770 <__aeabi_uldivmod+0x18>
 800075c:	2900      	cmp	r1, #0
 800075e:	bf08      	it	eq
 8000760:	2800      	cmpeq	r0, #0
 8000762:	bf1c      	itt	ne
 8000764:	f04f 31ff 	movne.w	r1, #4294967295
 8000768:	f04f 30ff 	movne.w	r0, #4294967295
 800076c:	f000 b9ac 	b.w	8000ac8 <__aeabi_idiv0>
 8000770:	f1ad 0c08 	sub.w	ip, sp, #8
 8000774:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000778:	f000 f83e 	bl	80007f8 <__udivmoddi4>
 800077c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000780:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr

08000788 <__aeabi_d2lz>:
 8000788:	b508      	push	{r3, lr}
 800078a:	4602      	mov	r2, r0
 800078c:	460b      	mov	r3, r1
 800078e:	ec43 2b17 	vmov	d7, r2, r3
 8000792:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079a:	d403      	bmi.n	80007a4 <__aeabi_d2lz+0x1c>
 800079c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80007a0:	f000 b80a 	b.w	80007b8 <__aeabi_d2ulz>
 80007a4:	eeb1 7b47 	vneg.f64	d7, d7
 80007a8:	ec51 0b17 	vmov	r0, r1, d7
 80007ac:	f000 f804 	bl	80007b8 <__aeabi_d2ulz>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	bd08      	pop	{r3, pc}

080007b8 <__aeabi_d2ulz>:
 80007b8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007e8 <__aeabi_d2ulz+0x30>
 80007bc:	ec41 0b17 	vmov	d7, r0, r1
 80007c0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007f0 <__aeabi_d2ulz+0x38>
 80007c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007c8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007cc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007d0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007d8:	ee16 1a10 	vmov	r1, s12
 80007dc:	ee17 0a90 	vmov	r0, s15
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	f3af 8000 	nop.w
 80007e8:	00000000 	.word	0x00000000
 80007ec:	3df00000 	.word	0x3df00000
 80007f0:	00000000 	.word	0x00000000
 80007f4:	41f00000 	.word	0x41f00000

080007f8 <__udivmoddi4>:
 80007f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007fc:	9d08      	ldr	r5, [sp, #32]
 80007fe:	4604      	mov	r4, r0
 8000800:	468e      	mov	lr, r1
 8000802:	2b00      	cmp	r3, #0
 8000804:	d14d      	bne.n	80008a2 <__udivmoddi4+0xaa>
 8000806:	428a      	cmp	r2, r1
 8000808:	4694      	mov	ip, r2
 800080a:	d969      	bls.n	80008e0 <__udivmoddi4+0xe8>
 800080c:	fab2 f282 	clz	r2, r2
 8000810:	b152      	cbz	r2, 8000828 <__udivmoddi4+0x30>
 8000812:	fa01 f302 	lsl.w	r3, r1, r2
 8000816:	f1c2 0120 	rsb	r1, r2, #32
 800081a:	fa20 f101 	lsr.w	r1, r0, r1
 800081e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000822:	ea41 0e03 	orr.w	lr, r1, r3
 8000826:	4094      	lsls	r4, r2
 8000828:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800082c:	0c21      	lsrs	r1, r4, #16
 800082e:	fbbe f6f8 	udiv	r6, lr, r8
 8000832:	fa1f f78c 	uxth.w	r7, ip
 8000836:	fb08 e316 	mls	r3, r8, r6, lr
 800083a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800083e:	fb06 f107 	mul.w	r1, r6, r7
 8000842:	4299      	cmp	r1, r3
 8000844:	d90a      	bls.n	800085c <__udivmoddi4+0x64>
 8000846:	eb1c 0303 	adds.w	r3, ip, r3
 800084a:	f106 30ff 	add.w	r0, r6, #4294967295
 800084e:	f080 811f 	bcs.w	8000a90 <__udivmoddi4+0x298>
 8000852:	4299      	cmp	r1, r3
 8000854:	f240 811c 	bls.w	8000a90 <__udivmoddi4+0x298>
 8000858:	3e02      	subs	r6, #2
 800085a:	4463      	add	r3, ip
 800085c:	1a5b      	subs	r3, r3, r1
 800085e:	b2a4      	uxth	r4, r4
 8000860:	fbb3 f0f8 	udiv	r0, r3, r8
 8000864:	fb08 3310 	mls	r3, r8, r0, r3
 8000868:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800086c:	fb00 f707 	mul.w	r7, r0, r7
 8000870:	42a7      	cmp	r7, r4
 8000872:	d90a      	bls.n	800088a <__udivmoddi4+0x92>
 8000874:	eb1c 0404 	adds.w	r4, ip, r4
 8000878:	f100 33ff 	add.w	r3, r0, #4294967295
 800087c:	f080 810a 	bcs.w	8000a94 <__udivmoddi4+0x29c>
 8000880:	42a7      	cmp	r7, r4
 8000882:	f240 8107 	bls.w	8000a94 <__udivmoddi4+0x29c>
 8000886:	4464      	add	r4, ip
 8000888:	3802      	subs	r0, #2
 800088a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800088e:	1be4      	subs	r4, r4, r7
 8000890:	2600      	movs	r6, #0
 8000892:	b11d      	cbz	r5, 800089c <__udivmoddi4+0xa4>
 8000894:	40d4      	lsrs	r4, r2
 8000896:	2300      	movs	r3, #0
 8000898:	e9c5 4300 	strd	r4, r3, [r5]
 800089c:	4631      	mov	r1, r6
 800089e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d909      	bls.n	80008ba <__udivmoddi4+0xc2>
 80008a6:	2d00      	cmp	r5, #0
 80008a8:	f000 80ef 	beq.w	8000a8a <__udivmoddi4+0x292>
 80008ac:	2600      	movs	r6, #0
 80008ae:	e9c5 0100 	strd	r0, r1, [r5]
 80008b2:	4630      	mov	r0, r6
 80008b4:	4631      	mov	r1, r6
 80008b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ba:	fab3 f683 	clz	r6, r3
 80008be:	2e00      	cmp	r6, #0
 80008c0:	d14a      	bne.n	8000958 <__udivmoddi4+0x160>
 80008c2:	428b      	cmp	r3, r1
 80008c4:	d302      	bcc.n	80008cc <__udivmoddi4+0xd4>
 80008c6:	4282      	cmp	r2, r0
 80008c8:	f200 80f9 	bhi.w	8000abe <__udivmoddi4+0x2c6>
 80008cc:	1a84      	subs	r4, r0, r2
 80008ce:	eb61 0303 	sbc.w	r3, r1, r3
 80008d2:	2001      	movs	r0, #1
 80008d4:	469e      	mov	lr, r3
 80008d6:	2d00      	cmp	r5, #0
 80008d8:	d0e0      	beq.n	800089c <__udivmoddi4+0xa4>
 80008da:	e9c5 4e00 	strd	r4, lr, [r5]
 80008de:	e7dd      	b.n	800089c <__udivmoddi4+0xa4>
 80008e0:	b902      	cbnz	r2, 80008e4 <__udivmoddi4+0xec>
 80008e2:	deff      	udf	#255	; 0xff
 80008e4:	fab2 f282 	clz	r2, r2
 80008e8:	2a00      	cmp	r2, #0
 80008ea:	f040 8092 	bne.w	8000a12 <__udivmoddi4+0x21a>
 80008ee:	eba1 010c 	sub.w	r1, r1, ip
 80008f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008f6:	fa1f fe8c 	uxth.w	lr, ip
 80008fa:	2601      	movs	r6, #1
 80008fc:	0c20      	lsrs	r0, r4, #16
 80008fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000902:	fb07 1113 	mls	r1, r7, r3, r1
 8000906:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800090a:	fb0e f003 	mul.w	r0, lr, r3
 800090e:	4288      	cmp	r0, r1
 8000910:	d908      	bls.n	8000924 <__udivmoddi4+0x12c>
 8000912:	eb1c 0101 	adds.w	r1, ip, r1
 8000916:	f103 38ff 	add.w	r8, r3, #4294967295
 800091a:	d202      	bcs.n	8000922 <__udivmoddi4+0x12a>
 800091c:	4288      	cmp	r0, r1
 800091e:	f200 80cb 	bhi.w	8000ab8 <__udivmoddi4+0x2c0>
 8000922:	4643      	mov	r3, r8
 8000924:	1a09      	subs	r1, r1, r0
 8000926:	b2a4      	uxth	r4, r4
 8000928:	fbb1 f0f7 	udiv	r0, r1, r7
 800092c:	fb07 1110 	mls	r1, r7, r0, r1
 8000930:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000934:	fb0e fe00 	mul.w	lr, lr, r0
 8000938:	45a6      	cmp	lr, r4
 800093a:	d908      	bls.n	800094e <__udivmoddi4+0x156>
 800093c:	eb1c 0404 	adds.w	r4, ip, r4
 8000940:	f100 31ff 	add.w	r1, r0, #4294967295
 8000944:	d202      	bcs.n	800094c <__udivmoddi4+0x154>
 8000946:	45a6      	cmp	lr, r4
 8000948:	f200 80bb 	bhi.w	8000ac2 <__udivmoddi4+0x2ca>
 800094c:	4608      	mov	r0, r1
 800094e:	eba4 040e 	sub.w	r4, r4, lr
 8000952:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000956:	e79c      	b.n	8000892 <__udivmoddi4+0x9a>
 8000958:	f1c6 0720 	rsb	r7, r6, #32
 800095c:	40b3      	lsls	r3, r6
 800095e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000962:	ea4c 0c03 	orr.w	ip, ip, r3
 8000966:	fa20 f407 	lsr.w	r4, r0, r7
 800096a:	fa01 f306 	lsl.w	r3, r1, r6
 800096e:	431c      	orrs	r4, r3
 8000970:	40f9      	lsrs	r1, r7
 8000972:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000976:	fa00 f306 	lsl.w	r3, r0, r6
 800097a:	fbb1 f8f9 	udiv	r8, r1, r9
 800097e:	0c20      	lsrs	r0, r4, #16
 8000980:	fa1f fe8c 	uxth.w	lr, ip
 8000984:	fb09 1118 	mls	r1, r9, r8, r1
 8000988:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800098c:	fb08 f00e 	mul.w	r0, r8, lr
 8000990:	4288      	cmp	r0, r1
 8000992:	fa02 f206 	lsl.w	r2, r2, r6
 8000996:	d90b      	bls.n	80009b0 <__udivmoddi4+0x1b8>
 8000998:	eb1c 0101 	adds.w	r1, ip, r1
 800099c:	f108 3aff 	add.w	sl, r8, #4294967295
 80009a0:	f080 8088 	bcs.w	8000ab4 <__udivmoddi4+0x2bc>
 80009a4:	4288      	cmp	r0, r1
 80009a6:	f240 8085 	bls.w	8000ab4 <__udivmoddi4+0x2bc>
 80009aa:	f1a8 0802 	sub.w	r8, r8, #2
 80009ae:	4461      	add	r1, ip
 80009b0:	1a09      	subs	r1, r1, r0
 80009b2:	b2a4      	uxth	r4, r4
 80009b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80009b8:	fb09 1110 	mls	r1, r9, r0, r1
 80009bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80009c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80009c4:	458e      	cmp	lr, r1
 80009c6:	d908      	bls.n	80009da <__udivmoddi4+0x1e2>
 80009c8:	eb1c 0101 	adds.w	r1, ip, r1
 80009cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80009d0:	d26c      	bcs.n	8000aac <__udivmoddi4+0x2b4>
 80009d2:	458e      	cmp	lr, r1
 80009d4:	d96a      	bls.n	8000aac <__udivmoddi4+0x2b4>
 80009d6:	3802      	subs	r0, #2
 80009d8:	4461      	add	r1, ip
 80009da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009de:	fba0 9402 	umull	r9, r4, r0, r2
 80009e2:	eba1 010e 	sub.w	r1, r1, lr
 80009e6:	42a1      	cmp	r1, r4
 80009e8:	46c8      	mov	r8, r9
 80009ea:	46a6      	mov	lr, r4
 80009ec:	d356      	bcc.n	8000a9c <__udivmoddi4+0x2a4>
 80009ee:	d053      	beq.n	8000a98 <__udivmoddi4+0x2a0>
 80009f0:	b15d      	cbz	r5, 8000a0a <__udivmoddi4+0x212>
 80009f2:	ebb3 0208 	subs.w	r2, r3, r8
 80009f6:	eb61 010e 	sbc.w	r1, r1, lr
 80009fa:	fa01 f707 	lsl.w	r7, r1, r7
 80009fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000a02:	40f1      	lsrs	r1, r6
 8000a04:	431f      	orrs	r7, r3
 8000a06:	e9c5 7100 	strd	r7, r1, [r5]
 8000a0a:	2600      	movs	r6, #0
 8000a0c:	4631      	mov	r1, r6
 8000a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a12:	f1c2 0320 	rsb	r3, r2, #32
 8000a16:	40d8      	lsrs	r0, r3
 8000a18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000a20:	4091      	lsls	r1, r2
 8000a22:	4301      	orrs	r1, r0
 8000a24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a28:	fa1f fe8c 	uxth.w	lr, ip
 8000a2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a30:	fb07 3610 	mls	r6, r7, r0, r3
 8000a34:	0c0b      	lsrs	r3, r1, #16
 8000a36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000a3e:	429e      	cmp	r6, r3
 8000a40:	fa04 f402 	lsl.w	r4, r4, r2
 8000a44:	d908      	bls.n	8000a58 <__udivmoddi4+0x260>
 8000a46:	eb1c 0303 	adds.w	r3, ip, r3
 8000a4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a4e:	d22f      	bcs.n	8000ab0 <__udivmoddi4+0x2b8>
 8000a50:	429e      	cmp	r6, r3
 8000a52:	d92d      	bls.n	8000ab0 <__udivmoddi4+0x2b8>
 8000a54:	3802      	subs	r0, #2
 8000a56:	4463      	add	r3, ip
 8000a58:	1b9b      	subs	r3, r3, r6
 8000a5a:	b289      	uxth	r1, r1
 8000a5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a60:	fb07 3316 	mls	r3, r7, r6, r3
 8000a64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a68:	fb06 f30e 	mul.w	r3, r6, lr
 8000a6c:	428b      	cmp	r3, r1
 8000a6e:	d908      	bls.n	8000a82 <__udivmoddi4+0x28a>
 8000a70:	eb1c 0101 	adds.w	r1, ip, r1
 8000a74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a78:	d216      	bcs.n	8000aa8 <__udivmoddi4+0x2b0>
 8000a7a:	428b      	cmp	r3, r1
 8000a7c:	d914      	bls.n	8000aa8 <__udivmoddi4+0x2b0>
 8000a7e:	3e02      	subs	r6, #2
 8000a80:	4461      	add	r1, ip
 8000a82:	1ac9      	subs	r1, r1, r3
 8000a84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a88:	e738      	b.n	80008fc <__udivmoddi4+0x104>
 8000a8a:	462e      	mov	r6, r5
 8000a8c:	4628      	mov	r0, r5
 8000a8e:	e705      	b.n	800089c <__udivmoddi4+0xa4>
 8000a90:	4606      	mov	r6, r0
 8000a92:	e6e3      	b.n	800085c <__udivmoddi4+0x64>
 8000a94:	4618      	mov	r0, r3
 8000a96:	e6f8      	b.n	800088a <__udivmoddi4+0x92>
 8000a98:	454b      	cmp	r3, r9
 8000a9a:	d2a9      	bcs.n	80009f0 <__udivmoddi4+0x1f8>
 8000a9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000aa0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000aa4:	3801      	subs	r0, #1
 8000aa6:	e7a3      	b.n	80009f0 <__udivmoddi4+0x1f8>
 8000aa8:	4646      	mov	r6, r8
 8000aaa:	e7ea      	b.n	8000a82 <__udivmoddi4+0x28a>
 8000aac:	4620      	mov	r0, r4
 8000aae:	e794      	b.n	80009da <__udivmoddi4+0x1e2>
 8000ab0:	4640      	mov	r0, r8
 8000ab2:	e7d1      	b.n	8000a58 <__udivmoddi4+0x260>
 8000ab4:	46d0      	mov	r8, sl
 8000ab6:	e77b      	b.n	80009b0 <__udivmoddi4+0x1b8>
 8000ab8:	3b02      	subs	r3, #2
 8000aba:	4461      	add	r1, ip
 8000abc:	e732      	b.n	8000924 <__udivmoddi4+0x12c>
 8000abe:	4630      	mov	r0, r6
 8000ac0:	e709      	b.n	80008d6 <__udivmoddi4+0xde>
 8000ac2:	4464      	add	r4, ip
 8000ac4:	3802      	subs	r0, #2
 8000ac6:	e742      	b.n	800094e <__udivmoddi4+0x156>

08000ac8 <__aeabi_idiv0>:
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <setServo>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;

void setServo(int servoNum, float angle) {
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal = (int) (3000 + (4000 * (angle / 100)));
 8000ad8:	ed97 7a00 	vldr	s14, [r7]
 8000adc:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000b4c <setServo+0x80>
 8000ae0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ae4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000b50 <setServo+0x84>
 8000ae8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000aec:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000b54 <setServo+0x88>
 8000af0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000af4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000af8:	ee17 3a90 	vmov	r3, s15
 8000afc:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	3b01      	subs	r3, #1
 8000b02:	2b03      	cmp	r3, #3
 8000b04:	d81a      	bhi.n	8000b3c <setServo+0x70>
 8000b06:	a201      	add	r2, pc, #4	; (adr r2, 8000b0c <setServo+0x40>)
 8000b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b0c:	08000b1d 	.word	0x08000b1d
 8000b10:	08000b25 	.word	0x08000b25
 8000b14:	08000b2d 	.word	0x08000b2d
 8000b18:	08000b35 	.word	0x08000b35
	case 1:
		TIM4->CCR4 = timerVal;
 8000b1c:	4a0e      	ldr	r2, [pc, #56]	; (8000b58 <setServo+0x8c>)
 8000b1e:	89fb      	ldrh	r3, [r7, #14]
 8000b20:	6413      	str	r3, [r2, #64]	; 0x40
		break;
 8000b22:	e00c      	b.n	8000b3e <setServo+0x72>
	case 2:
		TIM4->CCR3 = timerVal;
 8000b24:	4a0c      	ldr	r2, [pc, #48]	; (8000b58 <setServo+0x8c>)
 8000b26:	89fb      	ldrh	r3, [r7, #14]
 8000b28:	63d3      	str	r3, [r2, #60]	; 0x3c
		break;
 8000b2a:	e008      	b.n	8000b3e <setServo+0x72>
	case 3:
		TIM4->CCR2 = timerVal;
 8000b2c:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <setServo+0x8c>)
 8000b2e:	89fb      	ldrh	r3, [r7, #14]
 8000b30:	6393      	str	r3, [r2, #56]	; 0x38
		break;
 8000b32:	e004      	b.n	8000b3e <setServo+0x72>
	case 4:
		TIM4->CCR1 = timerVal;
 8000b34:	4a08      	ldr	r2, [pc, #32]	; (8000b58 <setServo+0x8c>)
 8000b36:	89fb      	ldrh	r3, [r7, #14]
 8000b38:	6353      	str	r3, [r2, #52]	; 0x34
		break;
 8000b3a:	e000      	b.n	8000b3e <setServo+0x72>

	default:
		break;
 8000b3c:	bf00      	nop
	}
}
 8000b3e:	bf00      	nop
 8000b40:	3714      	adds	r7, #20
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	42c80000 	.word	0x42c80000
 8000b50:	457a0000 	.word	0x457a0000
 8000b54:	453b8000 	.word	0x453b8000
 8000b58:	40000800 	.word	0x40000800

08000b5c <setLEDs>:

void setLEDs(void) {
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08e      	sub	sp, #56	; 0x38
 8000b60:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3;
 8000b62:	2300      	movs	r3, #0
 8000b64:	637b      	str	r3, [r7, #52]	; 0x34
 8000b66:	e181      	b.n	8000e6c <setLEDs+0x310>
			i++) {
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 8000b68:	4aa1      	ldr	r2, [pc, #644]	; (8000df0 <setLEDs+0x294>)
 8000b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b6c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000b70:	2b03      	cmp	r3, #3
 8000b72:	f200 8177 	bhi.w	8000e64 <setLEDs+0x308>
 8000b76:	a201      	add	r2, pc, #4	; (adr r2, 8000b7c <setLEDs+0x20>)
 8000b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b7c:	08000b8d 	.word	0x08000b8d
 8000b80:	08000c3d 	.word	0x08000c3d
 8000b84:	08000ced 	.word	0x08000ced
 8000b88:	08000d9d 	.word	0x08000d9d
		case 0:
			for (int j = 0; j < 3; j++) {
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	633b      	str	r3, [r7, #48]	; 0x30
 8000b90:	e042      	b.n	8000c18 <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 8000b92:	2300      	movs	r3, #0
 8000b94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b96:	e039      	b.n	8000c0c <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000b98:	4996      	ldr	r1, [pc, #600]	; (8000df4 <setLEDs+0x298>)
 8000b9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	4413      	add	r3, r2
 8000ba2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ba4:	4413      	add	r3, r2
 8000ba6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000baa:	2180      	movs	r1, #128	; 0x80
 8000bac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000bae:	fa41 f202 	asr.w	r2, r1, r2
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d013      	beq.n	8000be0 <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bba:	00da      	lsls	r2, r3, #3
 8000bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bbe:	18d1      	adds	r1, r2, r3
 8000bc0:	4a8b      	ldr	r2, [pc, #556]	; (8000df0 <setLEDs+0x294>)
 8000bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bc4:	00db      	lsls	r3, r3, #3
 8000bc6:	4413      	add	r3, r2
 8000bc8:	685a      	ldr	r2, [r3, #4]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	4413      	add	r3, r2
 8000bd0:	00db      	lsls	r3, r3, #3
 8000bd2:	440b      	add	r3, r1
								+ 8] = 60;
 8000bd4:	3308      	adds	r3, #8
 8000bd6:	4a88      	ldr	r2, [pc, #544]	; (8000df8 <setLEDs+0x29c>)
 8000bd8:	213c      	movs	r1, #60	; 0x3c
 8000bda:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000bde:	e012      	b.n	8000c06 <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000be2:	00da      	lsls	r2, r3, #3
 8000be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000be6:	18d1      	adds	r1, r2, r3
 8000be8:	4a81      	ldr	r2, [pc, #516]	; (8000df0 <setLEDs+0x294>)
 8000bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bec:	00db      	lsls	r3, r3, #3
 8000bee:	4413      	add	r3, r2
 8000bf0:	685a      	ldr	r2, [r3, #4]
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	4413      	add	r3, r2
 8000bf8:	00db      	lsls	r3, r3, #3
 8000bfa:	440b      	add	r3, r1
								+ 8] = 30;
 8000bfc:	3308      	adds	r3, #8
 8000bfe:	4a7e      	ldr	r2, [pc, #504]	; (8000df8 <setLEDs+0x29c>)
 8000c00:	211e      	movs	r1, #30
 8000c02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c08:	3301      	adds	r3, #1
 8000c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c0e:	2b07      	cmp	r3, #7
 8000c10:	ddc2      	ble.n	8000b98 <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 8000c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c14:	3301      	adds	r3, #1
 8000c16:	633b      	str	r3, [r7, #48]	; 0x30
 8000c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c1a:	2b02      	cmp	r3, #2
 8000c1c:	ddb9      	ble.n	8000b92 <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58;
 8000c1e:	2380      	movs	r3, #128	; 0x80
 8000c20:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c22:	e007      	b.n	8000c34 <setLEDs+0xd8>
					i++) {
				LED_PWM_Data_0[i] = 0;
 8000c24:	4a74      	ldr	r2, [pc, #464]	; (8000df8 <setLEDs+0x29c>)
 8000c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c28:	2100      	movs	r1, #0
 8000c2a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c30:	3301      	adds	r3, #1
 8000c32:	62bb      	str	r3, [r7, #40]	; 0x28
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58;
 8000c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c36:	2bb1      	cmp	r3, #177	; 0xb1
 8000c38:	ddf4      	ble.n	8000c24 <setLEDs+0xc8>
			}
			break;
 8000c3a:	e114      	b.n	8000e66 <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8000c40:	e042      	b.n	8000cc8 <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 8000c42:	2300      	movs	r3, #0
 8000c44:	623b      	str	r3, [r7, #32]
 8000c46:	e039      	b.n	8000cbc <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000c48:	496a      	ldr	r1, [pc, #424]	; (8000df4 <setLEDs+0x298>)
 8000c4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	4413      	add	r3, r2
 8000c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c54:	4413      	add	r3, r2
 8000c56:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c5a:	2180      	movs	r1, #128	; 0x80
 8000c5c:	6a3a      	ldr	r2, [r7, #32]
 8000c5e:	fa41 f202 	asr.w	r2, r1, r2
 8000c62:	4013      	ands	r3, r2
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d013      	beq.n	8000c90 <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6a:	00da      	lsls	r2, r3, #3
 8000c6c:	6a3b      	ldr	r3, [r7, #32]
 8000c6e:	18d1      	adds	r1, r2, r3
 8000c70:	4a5f      	ldr	r2, [pc, #380]	; (8000df0 <setLEDs+0x294>)
 8000c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c74:	00db      	lsls	r3, r3, #3
 8000c76:	4413      	add	r3, r2
 8000c78:	685a      	ldr	r2, [r3, #4]
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	4413      	add	r3, r2
 8000c80:	00db      	lsls	r3, r3, #3
 8000c82:	440b      	add	r3, r1
								+ 8] = 60;
 8000c84:	3308      	adds	r3, #8
 8000c86:	4a5d      	ldr	r2, [pc, #372]	; (8000dfc <setLEDs+0x2a0>)
 8000c88:	213c      	movs	r1, #60	; 0x3c
 8000c8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000c8e:	e012      	b.n	8000cb6 <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c92:	00da      	lsls	r2, r3, #3
 8000c94:	6a3b      	ldr	r3, [r7, #32]
 8000c96:	18d1      	adds	r1, r2, r3
 8000c98:	4a55      	ldr	r2, [pc, #340]	; (8000df0 <setLEDs+0x294>)
 8000c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c9c:	00db      	lsls	r3, r3, #3
 8000c9e:	4413      	add	r3, r2
 8000ca0:	685a      	ldr	r2, [r3, #4]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	4413      	add	r3, r2
 8000ca8:	00db      	lsls	r3, r3, #3
 8000caa:	440b      	add	r3, r1
								+ 8] = 30;
 8000cac:	3308      	adds	r3, #8
 8000cae:	4a53      	ldr	r2, [pc, #332]	; (8000dfc <setLEDs+0x2a0>)
 8000cb0:	211e      	movs	r1, #30
 8000cb2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000cb6:	6a3b      	ldr	r3, [r7, #32]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	623b      	str	r3, [r7, #32]
 8000cbc:	6a3b      	ldr	r3, [r7, #32]
 8000cbe:	2b07      	cmp	r3, #7
 8000cc0:	ddc2      	ble.n	8000c48 <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 8000cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8000cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	ddb9      	ble.n	8000c42 <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58;
 8000cce:	2380      	movs	r3, #128	; 0x80
 8000cd0:	61fb      	str	r3, [r7, #28]
 8000cd2:	e007      	b.n	8000ce4 <setLEDs+0x188>
					i++) {
				LED_PWM_Data_1[i] = 0;
 8000cd4:	4a49      	ldr	r2, [pc, #292]	; (8000dfc <setLEDs+0x2a0>)
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	61fb      	str	r3, [r7, #28]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58;
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	2bb1      	cmp	r3, #177	; 0xb1
 8000ce8:	ddf4      	ble.n	8000cd4 <setLEDs+0x178>
			}
			break;
 8000cea:	e0bc      	b.n	8000e66 <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 8000cec:	2300      	movs	r3, #0
 8000cee:	61bb      	str	r3, [r7, #24]
 8000cf0:	e042      	b.n	8000d78 <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	e039      	b.n	8000d6c <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000cf8:	493e      	ldr	r1, [pc, #248]	; (8000df4 <setLEDs+0x298>)
 8000cfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	4413      	add	r3, r2
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	4413      	add	r3, r2
 8000d06:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d0a:	2180      	movs	r1, #128	; 0x80
 8000d0c:	697a      	ldr	r2, [r7, #20]
 8000d0e:	fa41 f202 	asr.w	r2, r1, r2
 8000d12:	4013      	ands	r3, r2
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d013      	beq.n	8000d40 <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	00da      	lsls	r2, r3, #3
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	18d1      	adds	r1, r2, r3
 8000d20:	4a33      	ldr	r2, [pc, #204]	; (8000df0 <setLEDs+0x294>)
 8000d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d24:	00db      	lsls	r3, r3, #3
 8000d26:	4413      	add	r3, r2
 8000d28:	685a      	ldr	r2, [r3, #4]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	4413      	add	r3, r2
 8000d30:	00db      	lsls	r3, r3, #3
 8000d32:	440b      	add	r3, r1
								+ 8] = 60;
 8000d34:	3308      	adds	r3, #8
 8000d36:	4a32      	ldr	r2, [pc, #200]	; (8000e00 <setLEDs+0x2a4>)
 8000d38:	213c      	movs	r1, #60	; 0x3c
 8000d3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000d3e:	e012      	b.n	8000d66 <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	00da      	lsls	r2, r3, #3
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	18d1      	adds	r1, r2, r3
 8000d48:	4a29      	ldr	r2, [pc, #164]	; (8000df0 <setLEDs+0x294>)
 8000d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d4c:	00db      	lsls	r3, r3, #3
 8000d4e:	4413      	add	r3, r2
 8000d50:	685a      	ldr	r2, [r3, #4]
 8000d52:	4613      	mov	r3, r2
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	4413      	add	r3, r2
 8000d58:	00db      	lsls	r3, r3, #3
 8000d5a:	440b      	add	r3, r1
								+ 8] = 30;
 8000d5c:	3308      	adds	r3, #8
 8000d5e:	4a28      	ldr	r2, [pc, #160]	; (8000e00 <setLEDs+0x2a4>)
 8000d60:	211e      	movs	r1, #30
 8000d62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	617b      	str	r3, [r7, #20]
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	2b07      	cmp	r3, #7
 8000d70:	ddc2      	ble.n	8000cf8 <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	3301      	adds	r3, #1
 8000d76:	61bb      	str	r3, [r7, #24]
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	ddb9      	ble.n	8000cf2 <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58;
 8000d7e:	2338      	movs	r3, #56	; 0x38
 8000d80:	613b      	str	r3, [r7, #16]
 8000d82:	e007      	b.n	8000d94 <setLEDs+0x238>
					i++) {
				LED_PWM_Data_2[i] = 0;
 8000d84:	4a1e      	ldr	r2, [pc, #120]	; (8000e00 <setLEDs+0x2a4>)
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	3301      	adds	r3, #1
 8000d92:	613b      	str	r3, [r7, #16]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58;
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	2b69      	cmp	r3, #105	; 0x69
 8000d98:	ddf4      	ble.n	8000d84 <setLEDs+0x228>
			}
			break;
 8000d9a:	e064      	b.n	8000e66 <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	e04e      	b.n	8000e40 <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 8000da2:	2300      	movs	r3, #0
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	e045      	b.n	8000e34 <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000da8:	4912      	ldr	r1, [pc, #72]	; (8000df4 <setLEDs+0x298>)
 8000daa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000dac:	4613      	mov	r3, r2
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	4413      	add	r3, r2
 8000db2:	68fa      	ldr	r2, [r7, #12]
 8000db4:	4413      	add	r3, r2
 8000db6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000dba:	2180      	movs	r1, #128	; 0x80
 8000dbc:	68ba      	ldr	r2, [r7, #8]
 8000dbe:	fa41 f202 	asr.w	r2, r1, r2
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d01f      	beq.n	8000e08 <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	00da      	lsls	r2, r3, #3
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	18d1      	adds	r1, r2, r3
 8000dd0:	4a07      	ldr	r2, [pc, #28]	; (8000df0 <setLEDs+0x294>)
 8000dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	4413      	add	r3, r2
 8000dd8:	685a      	ldr	r2, [r3, #4]
 8000dda:	4613      	mov	r3, r2
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	4413      	add	r3, r2
 8000de0:	00db      	lsls	r3, r3, #3
 8000de2:	440b      	add	r3, r1
								+ 8] = 60;
 8000de4:	3308      	adds	r3, #8
 8000de6:	4a07      	ldr	r2, [pc, #28]	; (8000e04 <setLEDs+0x2a8>)
 8000de8:	213c      	movs	r1, #60	; 0x3c
 8000dea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000dee:	e01e      	b.n	8000e2e <setLEDs+0x2d2>
 8000df0:	0801f740 	.word	0x0801f740
 8000df4:	24000bd0 	.word	0x24000bd0
 8000df8:	240002f0 	.word	0x240002f0
 8000dfc:	240005b8 	.word	0x240005b8
 8000e00:	24000880 	.word	0x24000880
 8000e04:	24000a28 	.word	0x24000a28
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1])
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	00da      	lsls	r2, r3, #3
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	18d1      	adds	r1, r2, r3
 8000e10:	4a26      	ldr	r2, [pc, #152]	; (8000eac <setLEDs+0x350>)
 8000e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e14:	00db      	lsls	r3, r3, #3
 8000e16:	4413      	add	r3, r2
 8000e18:	685a      	ldr	r2, [r3, #4]
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	4413      	add	r3, r2
 8000e20:	00db      	lsls	r3, r3, #3
 8000e22:	440b      	add	r3, r1
								+ 8] = 30;
 8000e24:	3308      	adds	r3, #8
 8000e26:	4a22      	ldr	r2, [pc, #136]	; (8000eb0 <setLEDs+0x354>)
 8000e28:	211e      	movs	r1, #30
 8000e2a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	3301      	adds	r3, #1
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	2b07      	cmp	r3, #7
 8000e38:	ddb6      	ble.n	8000da8 <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	ddad      	ble.n	8000da2 <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58;
 8000e46:	2338      	movs	r3, #56	; 0x38
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	e007      	b.n	8000e5c <setLEDs+0x300>
					i++) {
				LED_PWM_Data_3[i] = 0;
 8000e4c:	4a18      	ldr	r2, [pc, #96]	; (8000eb0 <setLEDs+0x354>)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2100      	movs	r1, #0
 8000e52:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					i++) {
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	607b      	str	r3, [r7, #4]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2b69      	cmp	r3, #105	; 0x69
 8000e60:	ddf4      	ble.n	8000e4c <setLEDs+0x2f0>
			}
			break;
 8000e62:	e000      	b.n	8000e66 <setLEDs+0x30a>
		default:
			break;
 8000e64:	bf00      	nop
			i++) {
 8000e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e68:	3301      	adds	r3, #1
 8000e6a:	637b      	str	r3, [r7, #52]	; 0x34
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3;
 8000e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e6e:	2b0d      	cmp	r3, #13
 8000e70:	f77f ae7a 	ble.w	8000b68 <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0,
 8000e74:	23b2      	movs	r3, #178	; 0xb2
 8000e76:	4a0f      	ldr	r2, [pc, #60]	; (8000eb4 <setLEDs+0x358>)
 8000e78:	210c      	movs	r1, #12
 8000e7a:	480f      	ldr	r0, [pc, #60]	; (8000eb8 <setLEDs+0x35c>)
 8000e7c:	f00f fbb2 	bl	80105e4 <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1,
 8000e80:	23b2      	movs	r3, #178	; 0xb2
 8000e82:	4a0e      	ldr	r2, [pc, #56]	; (8000ebc <setLEDs+0x360>)
 8000e84:	2108      	movs	r1, #8
 8000e86:	480e      	ldr	r0, [pc, #56]	; (8000ec0 <setLEDs+0x364>)
 8000e88:	f00f fbac 	bl	80105e4 <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2,
 8000e8c:	236a      	movs	r3, #106	; 0x6a
 8000e8e:	4a0d      	ldr	r2, [pc, #52]	; (8000ec4 <setLEDs+0x368>)
 8000e90:	2104      	movs	r1, #4
 8000e92:	480d      	ldr	r0, [pc, #52]	; (8000ec8 <setLEDs+0x36c>)
 8000e94:	f00f fba6 	bl	80105e4 <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3,
 8000e98:	236a      	movs	r3, #106	; 0x6a
 8000e9a:	4a05      	ldr	r2, [pc, #20]	; (8000eb0 <setLEDs+0x354>)
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	480a      	ldr	r0, [pc, #40]	; (8000ec8 <setLEDs+0x36c>)
 8000ea0:	f00f fba0 	bl	80105e4 <HAL_TIM_PWM_Start_DMA>
			(NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3

}
 8000ea4:	bf00      	nop
 8000ea6:	3738      	adds	r7, #56	; 0x38
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	0801f740 	.word	0x0801f740
 8000eb0:	24000a28 	.word	0x24000a28
 8000eb4:	240002f0 	.word	0x240002f0
 8000eb8:	24001234 	.word	0x24001234
 8000ebc:	240005b8 	.word	0x240005b8
 8000ec0:	24001150 	.word	0x24001150
 8000ec4:	24000880 	.word	0x24000880
 8000ec8:	2400119c 	.word	0x2400119c

08000ecc <LoRA_Read_Register>:
	} else {
		return normalized - LENGTH * 2 / 3;
	}
}

uint8_t LoRA_Read_Register(uint8_t addr) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000edc:	480d      	ldr	r0, [pc, #52]	; (8000f14 <LoRA_Read_Register+0x48>)
 8000ede:	f007 ffa5 	bl	8008e2c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000ee2:	1df9      	adds	r1, r7, #7
 8000ee4:	2364      	movs	r3, #100	; 0x64
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	480b      	ldr	r0, [pc, #44]	; (8000f18 <LoRA_Read_Register+0x4c>)
 8000eea:	f00e fd3b 	bl	800f964 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 8000eee:	f107 010f 	add.w	r1, r7, #15
 8000ef2:	2364      	movs	r3, #100	; 0x64
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	4808      	ldr	r0, [pc, #32]	; (8000f18 <LoRA_Read_Register+0x4c>)
 8000ef8:	f00e ff30 	bl	800fd5c <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000efc:	2201      	movs	r2, #1
 8000efe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f02:	4804      	ldr	r0, [pc, #16]	; (8000f14 <LoRA_Read_Register+0x48>)
 8000f04:	f007 ff92 	bl	8008e2c <HAL_GPIO_WritePin>

	return reg_value;
 8000f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	58020000 	.word	0x58020000
 8000f18:	240010c8 	.word	0x240010c8

08000f1c <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	460a      	mov	r2, r1
 8000f26:	71fb      	strb	r3, [r7, #7]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	71bb      	strb	r3, [r7, #6]
	addr |= (1 << 7);
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000f36:	2200      	movs	r2, #0
 8000f38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f3c:	480c      	ldr	r0, [pc, #48]	; (8000f70 <LoRA_Write_Register+0x54>)
 8000f3e:	f007 ff75 	bl	8008e2c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000f42:	1df9      	adds	r1, r7, #7
 8000f44:	2364      	movs	r3, #100	; 0x64
 8000f46:	2201      	movs	r2, #1
 8000f48:	480a      	ldr	r0, [pc, #40]	; (8000f74 <LoRA_Write_Register+0x58>)
 8000f4a:	f00e fd0b 	bl	800f964 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 8000f4e:	1db9      	adds	r1, r7, #6
 8000f50:	2364      	movs	r3, #100	; 0x64
 8000f52:	2201      	movs	r2, #1
 8000f54:	4807      	ldr	r0, [pc, #28]	; (8000f74 <LoRA_Write_Register+0x58>)
 8000f56:	f00e fd05 	bl	800f964 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f60:	4803      	ldr	r0, [pc, #12]	; (8000f70 <LoRA_Write_Register+0x54>)
 8000f62:	f007 ff63 	bl	8008e2c <HAL_GPIO_WritePin>

}
 8000f66:	bf00      	nop
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	58020000 	.word	0x58020000
 8000f74:	240010c8 	.word	0x240010c8

08000f78 <LoRA_sleep>:

void LoRA_sleep(void) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8000f7c:	2180      	movs	r1, #128	; 0x80
 8000f7e:	2001      	movs	r0, #1
 8000f80:	f7ff ffcc 	bl	8000f1c <LoRA_Write_Register>
}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency) {
 8000f88:	b5b0      	push	{r4, r5, r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t) frequency << 19) / 32000000;
 8000f90:	6879      	ldr	r1, [r7, #4]
 8000f92:	17c8      	asrs	r0, r1, #31
 8000f94:	460a      	mov	r2, r1
 8000f96:	4603      	mov	r3, r0
 8000f98:	1355      	asrs	r5, r2, #13
 8000f9a:	04d4      	lsls	r4, r2, #19
 8000f9c:	4a18      	ldr	r2, [pc, #96]	; (8001000 <LoRA_set_frequency+0x78>)
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	4620      	mov	r0, r4
 8000fa4:	4629      	mov	r1, r5
 8000fa6:	f7ff fbd7 	bl	8000758 <__aeabi_uldivmod>
 8000faa:	4602      	mov	r2, r0
 8000fac:	460b      	mov	r3, r1
 8000fae:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t) (frf >> 16));
 8000fb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fb6:	f04f 0200 	mov.w	r2, #0
 8000fba:	f04f 0300 	mov.w	r3, #0
 8000fbe:	0c02      	lsrs	r2, r0, #16
 8000fc0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc4:	0c0b      	lsrs	r3, r1, #16
 8000fc6:	b2d3      	uxtb	r3, r2
 8000fc8:	4619      	mov	r1, r3
 8000fca:	2006      	movs	r0, #6
 8000fcc:	f7ff ffa6 	bl	8000f1c <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t) (frf >> 8));
 8000fd0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fd4:	f04f 0200 	mov.w	r2, #0
 8000fd8:	f04f 0300 	mov.w	r3, #0
 8000fdc:	0a02      	lsrs	r2, r0, #8
 8000fde:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000fe2:	0a0b      	lsrs	r3, r1, #8
 8000fe4:	b2d3      	uxtb	r3, r2
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	2007      	movs	r0, #7
 8000fea:	f7ff ff97 	bl	8000f1c <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t) (frf >> 0));
 8000fee:	7a3b      	ldrb	r3, [r7, #8]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	2008      	movs	r0, #8
 8000ff4:	f7ff ff92 	bl	8000f1c <LoRA_Write_Register>
}
 8000ff8:	bf00      	nop
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bdb0      	pop	{r4, r5, r7, pc}
 8001000:	01e84800 	.word	0x01e84800

08001004 <LoRA_idle>:

void LoRA_idle() {
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8001008:	2181      	movs	r1, #129	; 0x81
 800100a:	2001      	movs	r0, #1
 800100c:	f7ff ff86 	bl	8000f1c <LoRA_Write_Register>
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}

08001014 <LoRA_setOCP>:

void LoRA_setOCP(uint8_t mA) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
	uint8_t ocpTrim = 27;
 800101e:	231b      	movs	r3, #27
 8001020:	73fb      	strb	r3, [r7, #15]

	if (mA <= 120) {
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	2b78      	cmp	r3, #120	; 0x78
 8001026:	d809      	bhi.n	800103c <LoRA_setOCP+0x28>
		ocpTrim = (mA - 45) / 5;
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	3b2d      	subs	r3, #45	; 0x2d
 800102c:	4a11      	ldr	r2, [pc, #68]	; (8001074 <LoRA_setOCP+0x60>)
 800102e:	fb82 1203 	smull	r1, r2, r2, r3
 8001032:	1052      	asrs	r2, r2, #1
 8001034:	17db      	asrs	r3, r3, #31
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	73fb      	strb	r3, [r7, #15]
 800103a:	e00b      	b.n	8001054 <LoRA_setOCP+0x40>
	} else if (mA <= 240) {
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	2bf0      	cmp	r3, #240	; 0xf0
 8001040:	d808      	bhi.n	8001054 <LoRA_setOCP+0x40>
		ocpTrim = (mA + 30) / 10;
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	331e      	adds	r3, #30
 8001046:	4a0b      	ldr	r2, [pc, #44]	; (8001074 <LoRA_setOCP+0x60>)
 8001048:	fb82 1203 	smull	r1, r2, r2, r3
 800104c:	1092      	asrs	r2, r2, #2
 800104e:	17db      	asrs	r3, r3, #31
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	73fb      	strb	r3, [r7, #15]
	}

	LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8001054:	7bfb      	ldrb	r3, [r7, #15]
 8001056:	f003 031f 	and.w	r3, r3, #31
 800105a:	b2db      	uxtb	r3, r3
 800105c:	f043 0320 	orr.w	r3, r3, #32
 8001060:	b2db      	uxtb	r3, r3
 8001062:	4619      	mov	r1, r3
 8001064:	200b      	movs	r0, #11
 8001066:	f7ff ff59 	bl	8000f1c <LoRA_Write_Register>
}
 800106a:	bf00      	nop
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	66666667 	.word	0x66666667

08001078 <LoRA_setTxPower>:

void LoRA_setTxPower(int level) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	// PA BOOST
	if (level > 17) {
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b11      	cmp	r3, #17
 8001084:	dd0f      	ble.n	80010a6 <LoRA_setTxPower+0x2e>
		if (level > 20) {
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b14      	cmp	r3, #20
 800108a:	dd01      	ble.n	8001090 <LoRA_setTxPower+0x18>
			level = 20;
 800108c:	2314      	movs	r3, #20
 800108e:	607b      	str	r3, [r7, #4]
		}

		// subtract 3 from level, so 18 - 20 maps to 15 - 17
		level -= 3;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3b03      	subs	r3, #3
 8001094:	607b      	str	r3, [r7, #4]

		// High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
		LoRA_Write_Register(REG_PA_DAC, 0x87);
 8001096:	2187      	movs	r1, #135	; 0x87
 8001098:	204d      	movs	r0, #77	; 0x4d
 800109a:	f7ff ff3f 	bl	8000f1c <LoRA_Write_Register>
		LoRA_setOCP(140);
 800109e:	208c      	movs	r0, #140	; 0x8c
 80010a0:	f7ff ffb8 	bl	8001014 <LoRA_setOCP>
 80010a4:	e00b      	b.n	80010be <LoRA_setTxPower+0x46>
	} else {
		if (level < 2) {
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	dc01      	bgt.n	80010b0 <LoRA_setTxPower+0x38>
			level = 2;
 80010ac:	2302      	movs	r3, #2
 80010ae:	607b      	str	r3, [r7, #4]
		}
		//Default value PA_HF/LF or +17dBm
		LoRA_Write_Register(REG_PA_DAC, 0x84);
 80010b0:	2184      	movs	r1, #132	; 0x84
 80010b2:	204d      	movs	r0, #77	; 0x4d
 80010b4:	f7ff ff32 	bl	8000f1c <LoRA_Write_Register>
		LoRA_setOCP(100);
 80010b8:	2064      	movs	r0, #100	; 0x64
 80010ba:	f7ff ffab 	bl	8001014 <LoRA_setOCP>
	}

	LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	3b02      	subs	r3, #2
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	b25b      	sxtb	r3, r3
 80010c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80010cc:	b25b      	sxtb	r3, r3
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	4619      	mov	r1, r3
 80010d2:	2009      	movs	r0, #9
 80010d4:	f7ff ff22 	bl	8000f1c <LoRA_Write_Register>
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <LoRA_explicit_header_mode>:

void LoRA_explicit_header_mode() {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_MODEM_CONFIG_1,
			LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
 80010e4:	201d      	movs	r0, #29
 80010e6:	f7ff fef1 	bl	8000ecc <LoRA_Read_Register>
 80010ea:	4603      	mov	r3, r0
	LoRA_Write_Register(REG_MODEM_CONFIG_1,
 80010ec:	f023 0301 	bic.w	r3, r3, #1
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	4619      	mov	r1, r3
 80010f4:	201d      	movs	r0, #29
 80010f6:	f7ff ff11 	bl	8000f1c <LoRA_Write_Register>
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
	...

08001100 <LoRA_begin>:

void LoRA_begin(long frequency) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8001108:	2201      	movs	r2, #1
 800110a:	2101      	movs	r1, #1
 800110c:	4818      	ldr	r0, [pc, #96]	; (8001170 <LoRA_begin+0x70>)
 800110e:	f007 fe8d 	bl	8008e2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8001112:	2201      	movs	r2, #1
 8001114:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001118:	4816      	ldr	r0, [pc, #88]	; (8001174 <LoRA_begin+0x74>)
 800111a:	f007 fe87 	bl	8008e2c <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 800111e:	2042      	movs	r0, #66	; 0x42
 8001120:	f7ff fed4 	bl	8000ecc <LoRA_Read_Register>
 8001124:	4603      	mov	r3, r0
 8001126:	73fb      	strb	r3, [r7, #15]

	LoRA_sleep();
 8001128:	f7ff ff26 	bl	8000f78 <LoRA_sleep>
	LoRA_set_frequency(868000000);
 800112c:	4812      	ldr	r0, [pc, #72]	; (8001178 <LoRA_begin+0x78>)
 800112e:	f7ff ff2b 	bl	8000f88 <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 8001132:	2100      	movs	r1, #0
 8001134:	200f      	movs	r0, #15
 8001136:	f7ff fef1 	bl	8000f1c <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 800113a:	2100      	movs	r1, #0
 800113c:	200e      	movs	r0, #14
 800113e:	f7ff feed 	bl	8000f1c <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 8001142:	200c      	movs	r0, #12
 8001144:	f7ff fec2 	bl	8000ecc <LoRA_Read_Register>
 8001148:	4603      	mov	r3, r0
 800114a:	f043 0303 	orr.w	r3, r3, #3
 800114e:	b2db      	uxtb	r3, r3
 8001150:	4619      	mov	r1, r3
 8001152:	200c      	movs	r0, #12
 8001154:	f7ff fee2 	bl	8000f1c <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 8001158:	2104      	movs	r1, #4
 800115a:	2026      	movs	r0, #38	; 0x26
 800115c:	f7ff fede 	bl	8000f1c <LoRA_Write_Register>

	LoRA_setTxPower(17);
 8001160:	2011      	movs	r0, #17
 8001162:	f7ff ff89 	bl	8001078 <LoRA_setTxPower>

}
 8001166:	bf00      	nop
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	58020c00 	.word	0x58020c00
 8001174:	58020000 	.word	0x58020000
 8001178:	33bca100 	.word	0x33bca100

0800117c <LoRA_beginPacket>:

void LoRA_beginPacket() {
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
	LoRA_explicit_header_mode();
 8001180:	f7ff ffae 	bl	80010e0 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8001184:	2100      	movs	r1, #0
 8001186:	200d      	movs	r0, #13
 8001188:	f7ff fec8 	bl	8000f1c <LoRA_Write_Register>
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, 0);
 800118c:	2100      	movs	r1, #0
 800118e:	2022      	movs	r0, #34	; 0x22
 8001190:	f7ff fec4 	bl	8000f1c <LoRA_Write_Register>
}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}

08001198 <LoRA_endPacket>:

void LoRA_endPacket() {
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 800119e:	2183      	movs	r1, #131	; 0x83
 80011a0:	2001      	movs	r0, #1
 80011a2:	f7ff febb 	bl	8000f1c <LoRA_Write_Register>

	while ((LoRA_Read_Register(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0) {
 80011a6:	bf00      	nop
 80011a8:	2012      	movs	r0, #18
 80011aa:	f7ff fe8f 	bl	8000ecc <LoRA_Read_Register>
 80011ae:	4603      	mov	r3, r0
 80011b0:	f003 0308 	and.w	r3, r3, #8
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d0f7      	beq.n	80011a8 <LoRA_endPacket+0x10>

	}

	LoRA_Write_Register(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 80011b8:	2108      	movs	r1, #8
 80011ba:	2012      	movs	r0, #18
 80011bc:	f7ff feae 	bl	8000f1c <LoRA_Write_Register>

	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 80011c0:	2012      	movs	r0, #18
 80011c2:	f7ff fe83 	bl	8000ecc <LoRA_Read_Register>
 80011c6:	4603      	mov	r3, r0
 80011c8:	607b      	str	r3, [r7, #4]

	LoRA_explicit_header_mode();
 80011ca:	f7ff ff89 	bl	80010e0 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	4619      	mov	r1, r3
 80011d4:	2012      	movs	r0, #18
 80011d6:	f7ff fea1 	bl	8000f1c <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d00f      	beq.n	8001204 <LoRA_endPacket+0x6c>
			&& (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f003 0320 	and.w	r3, r3, #32
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10a      	bne.n	8001204 <LoRA_endPacket+0x6c>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR,
 80011ee:	2010      	movs	r0, #16
 80011f0:	f7ff fe6c 	bl	8000ecc <LoRA_Read_Register>
 80011f4:	4603      	mov	r3, r0
 80011f6:	4619      	mov	r1, r3
 80011f8:	200d      	movs	r0, #13
 80011fa:	f7ff fe8f 	bl	8000f1c <LoRA_Write_Register>
				LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
		LoRA_idle();
 80011fe:	f7ff ff01 	bl	8001004 <LoRA_idle>
			!= (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)) {
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
	}
}
 8001202:	e00d      	b.n	8001220 <LoRA_endPacket+0x88>
	} else if (LoRA_Read_Register(REG_OP_MODE)
 8001204:	2001      	movs	r0, #1
 8001206:	f7ff fe61 	bl	8000ecc <LoRA_Read_Register>
 800120a:	4603      	mov	r3, r0
 800120c:	2b86      	cmp	r3, #134	; 0x86
 800120e:	d007      	beq.n	8001220 <LoRA_endPacket+0x88>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8001210:	2100      	movs	r1, #0
 8001212:	200d      	movs	r0, #13
 8001214:	f7ff fe82 	bl	8000f1c <LoRA_Write_Register>
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 8001218:	2186      	movs	r1, #134	; 0x86
 800121a:	2001      	movs	r0, #1
 800121c:	f7ff fe7e 	bl	8000f1c <LoRA_Write_Register>
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <LoRA_parsePacket>:

int LoRA_parsePacket() {
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
	int packetLenght = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	607b      	str	r3, [r7, #4]
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 8001232:	2012      	movs	r0, #18
 8001234:	f7ff fe4a 	bl	8000ecc <LoRA_Read_Register>
 8001238:	4603      	mov	r3, r0
 800123a:	603b      	str	r3, [r7, #0]

	LoRA_explicit_header_mode();
 800123c:	f7ff ff50 	bl	80010e0 <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	b2db      	uxtb	r3, r3
 8001244:	4619      	mov	r1, r3
 8001246:	2012      	movs	r0, #18
 8001248:	f7ff fe68 	bl	8000f1c <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001252:	2b00      	cmp	r3, #0
 8001254:	d014      	beq.n	8001280 <LoRA_parsePacket+0x58>
			&& (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	f003 0320 	and.w	r3, r3, #32
 800125c:	2b00      	cmp	r3, #0
 800125e:	d10f      	bne.n	8001280 <LoRA_parsePacket+0x58>
		packetLenght = LoRA_Read_Register(REG_RX_NB_BYTES);
 8001260:	2013      	movs	r0, #19
 8001262:	f7ff fe33 	bl	8000ecc <LoRA_Read_Register>
 8001266:	4603      	mov	r3, r0
 8001268:	607b      	str	r3, [r7, #4]
		LoRA_Write_Register(REG_FIFO_ADDR_PTR,
 800126a:	2010      	movs	r0, #16
 800126c:	f7ff fe2e 	bl	8000ecc <LoRA_Read_Register>
 8001270:	4603      	mov	r3, r0
 8001272:	4619      	mov	r1, r3
 8001274:	200d      	movs	r0, #13
 8001276:	f7ff fe51 	bl	8000f1c <LoRA_Write_Register>
				LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
		LoRA_idle();
 800127a:	f7ff fec3 	bl	8001004 <LoRA_idle>
 800127e:	e00d      	b.n	800129c <LoRA_parsePacket+0x74>
	} else if (LoRA_Read_Register(REG_OP_MODE)
 8001280:	2001      	movs	r0, #1
 8001282:	f7ff fe23 	bl	8000ecc <LoRA_Read_Register>
 8001286:	4603      	mov	r3, r0
 8001288:	2b86      	cmp	r3, #134	; 0x86
 800128a:	d007      	beq.n	800129c <LoRA_parsePacket+0x74>
			!= (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)) {
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 800128c:	2100      	movs	r1, #0
 800128e:	200d      	movs	r0, #13
 8001290:	f7ff fe44 	bl	8000f1c <LoRA_Write_Register>

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 8001294:	2186      	movs	r1, #134	; 0x86
 8001296:	2001      	movs	r0, #1
 8001298:	f7ff fe40 	bl	8000f1c <LoRA_Write_Register>
	}
	return packetLenght;
 800129c:	687b      	ldr	r3, [r7, #4]

}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <LoRA_sendPacket>:

void LoRA_sendPacket(char *data) {
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b084      	sub	sp, #16
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
	LoRA_beginPacket();
 80012ae:	f7ff ff65 	bl	800117c <LoRA_beginPacket>
	for (int i = 0; i < strlen(data); i++) {
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	e00a      	b.n	80012ce <LoRA_sendPacket+0x28>
		LoRA_Write_Register(REG_FIFO, data[i]);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	4413      	add	r3, r2
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	4619      	mov	r1, r3
 80012c2:	2000      	movs	r0, #0
 80012c4:	f7ff fe2a 	bl	8000f1c <LoRA_Write_Register>
	for (int i = 0; i < strlen(data); i++) {
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	3301      	adds	r3, #1
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff f828 	bl	8000324 <strlen>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d8ed      	bhi.n	80012b8 <LoRA_sendPacket+0x12>
	}
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, strlen(data));
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff f821 	bl	8000324 <strlen>
 80012e2:	4603      	mov	r3, r0
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	4619      	mov	r1, r3
 80012e8:	2022      	movs	r0, #34	; 0x22
 80012ea:	f7ff fe17 	bl	8000f1c <LoRA_Write_Register>
	LoRA_endPacket();
 80012ee:	f7ff ff53 	bl	8001198 <LoRA_endPacket>
}
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <disarm>:
int mount_SD() {
	int status = f_mount(&SDFatFS, (TCHAR const*) SDPath, 0);
	return status;
}

int disarm(char *state) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 0);
 8001304:	2200      	movs	r2, #0
 8001306:	2102      	movs	r1, #2
 8001308:	482d      	ldr	r0, [pc, #180]	; (80013c0 <disarm+0xc4>)
 800130a:	f007 fd8f 	bl	8008e2c <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 0);

	HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 0);
 800130e:	2200      	movs	r2, #0
 8001310:	2102      	movs	r1, #2
 8001312:	482c      	ldr	r0, [pc, #176]	; (80013c4 <disarm+0xc8>)
 8001314:	f007 fd8a 	bl	8008e2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 0);
 8001318:	2200      	movs	r2, #0
 800131a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800131e:	482a      	ldr	r0, [pc, #168]	; (80013c8 <disarm+0xcc>)
 8001320:	f007 fd84 	bl	8008e2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 0);
 8001324:	2200      	movs	r2, #0
 8001326:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800132a:	4827      	ldr	r0, [pc, #156]	; (80013c8 <disarm+0xcc>)
 800132c:	f007 fd7e 	bl	8008e2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 0);
 8001330:	2200      	movs	r2, #0
 8001332:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001336:	4824      	ldr	r0, [pc, #144]	; (80013c8 <disarm+0xcc>)
 8001338:	f007 fd78 	bl	8008e2c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 0);
 800133c:	2200      	movs	r2, #0
 800133e:	2102      	movs	r1, #2
 8001340:	4822      	ldr	r0, [pc, #136]	; (80013cc <disarm+0xd0>)
 8001342:	f007 fd73 	bl	8008e2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 0);
 8001346:	2200      	movs	r2, #0
 8001348:	f44f 7180 	mov.w	r1, #256	; 0x100
 800134c:	4820      	ldr	r0, [pc, #128]	; (80013d0 <disarm+0xd4>)
 800134e:	f007 fd6d 	bl	8008e2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 0);
 8001352:	2200      	movs	r2, #0
 8001354:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001358:	481d      	ldr	r0, [pc, #116]	; (80013d0 <disarm+0xd4>)
 800135a:	f007 fd67 	bl	8008e2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001364:	481a      	ldr	r0, [pc, #104]	; (80013d0 <disarm+0xd4>)
 8001366:	f007 fd61 	bl	8008e2c <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800136a:	210c      	movs	r1, #12
 800136c:	4819      	ldr	r0, [pc, #100]	; (80013d4 <disarm+0xd8>)
 800136e:	f00f f81d 	bl	80103ac <HAL_TIM_PWM_Start>
	setServo(1, 0);
 8001372:	ed9f 0a19 	vldr	s0, [pc, #100]	; 80013d8 <disarm+0xdc>
 8001376:	2001      	movs	r0, #1
 8001378:	f7ff fba8 	bl	8000acc <setServo>

	LED_Color_Data[7][0] = 255;
 800137c:	4b17      	ldr	r3, [pc, #92]	; (80013dc <disarm+0xe0>)
 800137e:	22ff      	movs	r2, #255	; 0xff
 8001380:	655a      	str	r2, [r3, #84]	; 0x54
	LED_Color_Data[7][1] = 0;
 8001382:	4b16      	ldr	r3, [pc, #88]	; (80013dc <disarm+0xe0>)
 8001384:	2200      	movs	r2, #0
 8001386:	659a      	str	r2, [r3, #88]	; 0x58
	LED_Color_Data[7][2] = 0;
 8001388:	4b14      	ldr	r3, [pc, #80]	; (80013dc <disarm+0xe0>)
 800138a:	2200      	movs	r2, #0
 800138c:	65da      	str	r2, [r3, #92]	; 0x5c

	LED_Color_Data[2][0] = 255;
 800138e:	4b13      	ldr	r3, [pc, #76]	; (80013dc <disarm+0xe0>)
 8001390:	22ff      	movs	r2, #255	; 0xff
 8001392:	619a      	str	r2, [r3, #24]
	LED_Color_Data[2][1] = 0;
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <disarm+0xe0>)
 8001396:	2200      	movs	r2, #0
 8001398:	61da      	str	r2, [r3, #28]
	LED_Color_Data[2][2] = 0;
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <disarm+0xe0>)
 800139c:	2200      	movs	r2, #0
 800139e:	621a      	str	r2, [r3, #32]
	setLEDs();
 80013a0:	f7ff fbdc 	bl	8000b5c <setLEDs>

	strcpy(state, "DISARMED");
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	490e      	ldr	r1, [pc, #56]	; (80013e0 <disarm+0xe4>)
 80013a8:	461a      	mov	r2, r3
 80013aa:	460b      	mov	r3, r1
 80013ac:	cb03      	ldmia	r3!, {r0, r1}
 80013ae:	6010      	str	r0, [r2, #0]
 80013b0:	6051      	str	r1, [r2, #4]
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	7213      	strb	r3, [r2, #8]
	return 0;
 80013b6:	2300      	movs	r3, #0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	58020000 	.word	0x58020000
 80013c4:	58020400 	.word	0x58020400
 80013c8:	58021400 	.word	0x58021400
 80013cc:	58021800 	.word	0x58021800
 80013d0:	58021000 	.word	0x58021000
 80013d4:	240011e8 	.word	0x240011e8
 80013d8:	00000000 	.word	0x00000000
 80013dc:	24000bd0 	.word	0x24000bd0
 80013e0:	0801f4d8 	.word	0x0801f4d8

080013e4 <arm>:

int arm(char *state) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 1);
 80013ec:	2201      	movs	r2, #1
 80013ee:	2102      	movs	r1, #2
 80013f0:	4810      	ldr	r0, [pc, #64]	; (8001434 <arm+0x50>)
 80013f2:	f007 fd1b 	bl	8008e2c <HAL_GPIO_WritePin>
//HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 1);

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80013f6:	210c      	movs	r1, #12
 80013f8:	480f      	ldr	r0, [pc, #60]	; (8001438 <arm+0x54>)
 80013fa:	f00e ffd7 	bl	80103ac <HAL_TIM_PWM_Start>
	setServo(1, 100);
 80013fe:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800143c <arm+0x58>
 8001402:	2001      	movs	r0, #1
 8001404:	f7ff fb62 	bl	8000acc <setServo>

	strcpy(state, "ARMED");
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a0d      	ldr	r2, [pc, #52]	; (8001440 <arm+0x5c>)
 800140c:	6810      	ldr	r0, [r2, #0]
 800140e:	6018      	str	r0, [r3, #0]
 8001410:	8892      	ldrh	r2, [r2, #4]
 8001412:	809a      	strh	r2, [r3, #4]
	LED_Color_Data[7][0] = 0;
 8001414:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <arm+0x60>)
 8001416:	2200      	movs	r2, #0
 8001418:	655a      	str	r2, [r3, #84]	; 0x54
	LED_Color_Data[7][1] = 255;
 800141a:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <arm+0x60>)
 800141c:	22ff      	movs	r2, #255	; 0xff
 800141e:	659a      	str	r2, [r3, #88]	; 0x58
	LED_Color_Data[7][2] = 0;
 8001420:	4b08      	ldr	r3, [pc, #32]	; (8001444 <arm+0x60>)
 8001422:	2200      	movs	r2, #0
 8001424:	65da      	str	r2, [r3, #92]	; 0x5c
	setLEDs();
 8001426:	f7ff fb99 	bl	8000b5c <setLEDs>
	return 0;
 800142a:	2300      	movs	r3, #0
}
 800142c:	4618      	mov	r0, r3
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	58020000 	.word	0x58020000
 8001438:	240011e8 	.word	0x240011e8
 800143c:	42c80000 	.word	0x42c80000
 8001440:	0801f4e4 	.word	0x0801f4e4
 8001444:	24000bd0 	.word	0x24000bd0

08001448 <recv_packet>:

int recv_packet(char *LoRA_data, int max_length) {
 8001448:	b590      	push	{r4, r7, lr}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
	int packet_length = LoRA_parsePacket();
 8001452:	f7ff fee9 	bl	8001228 <LoRA_parsePacket>
 8001456:	60b8      	str	r0, [r7, #8]
	if (max_length - 1 < packet_length) //-1 for the null terminator
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	429a      	cmp	r2, r3
 800145e:	dc01      	bgt.n	8001464 <recv_packet+0x1c>
			{
		return 0;
 8001460:	2300      	movs	r3, #0
 8001462:	e01c      	b.n	800149e <recv_packet+0x56>
	}
	if (packet_length) {
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d018      	beq.n	800149c <recv_packet+0x54>
		for (int i = 0; i < packet_length; i++) {
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
 800146e:	e00a      	b.n	8001486 <recv_packet+0x3e>
			LoRA_data[i] = LoRA_Read_Register(0x00);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	18d4      	adds	r4, r2, r3
 8001476:	2000      	movs	r0, #0
 8001478:	f7ff fd28 	bl	8000ecc <LoRA_Read_Register>
 800147c:	4603      	mov	r3, r0
 800147e:	7023      	strb	r3, [r4, #0]
		for (int i = 0; i < packet_length; i++) {
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	3301      	adds	r3, #1
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	429a      	cmp	r2, r3
 800148c:	dbf0      	blt.n	8001470 <recv_packet+0x28>
		}
		LoRA_data[packet_length] = '\0';
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	4413      	add	r3, r2
 8001494:	2200      	movs	r2, #0
 8001496:	701a      	strb	r2, [r3, #0]
		return packet_length;
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	e000      	b.n	800149e <recv_packet+0x56>
	} else {
		return 0;
 800149c:	2300      	movs	r3, #0
	}
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd90      	pop	{r4, r7, pc}

080014a6 <reliable_send_packet>:

void reliable_send_packet(char *LoRA_data) {
 80014a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80014aa:	b087      	sub	sp, #28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	466b      	mov	r3, sp
 80014b2:	461e      	mov	r6, r3
	uint16_t length = strlen(LoRA_data) + 1; //+1 for the \0
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7fe ff35 	bl	8000324 <strlen>
 80014ba:	4603      	mov	r3, r0
 80014bc:	b29b      	uxth	r3, r3
 80014be:	3301      	adds	r3, #1
 80014c0:	827b      	strh	r3, [r7, #18]
	char acknowledge[length];
 80014c2:	8a79      	ldrh	r1, [r7, #18]
 80014c4:	460b      	mov	r3, r1
 80014c6:	3b01      	subs	r3, #1
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	b28b      	uxth	r3, r1
 80014cc:	2200      	movs	r2, #0
 80014ce:	4698      	mov	r8, r3
 80014d0:	4691      	mov	r9, r2
 80014d2:	f04f 0200 	mov.w	r2, #0
 80014d6:	f04f 0300 	mov.w	r3, #0
 80014da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80014de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80014e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80014e6:	b28b      	uxth	r3, r1
 80014e8:	2200      	movs	r2, #0
 80014ea:	461c      	mov	r4, r3
 80014ec:	4615      	mov	r5, r2
 80014ee:	f04f 0200 	mov.w	r2, #0
 80014f2:	f04f 0300 	mov.w	r3, #0
 80014f6:	00eb      	lsls	r3, r5, #3
 80014f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80014fc:	00e2      	lsls	r2, r4, #3
 80014fe:	460b      	mov	r3, r1
 8001500:	3307      	adds	r3, #7
 8001502:	08db      	lsrs	r3, r3, #3
 8001504:	00db      	lsls	r3, r3, #3
 8001506:	ebad 0d03 	sub.w	sp, sp, r3
 800150a:	466b      	mov	r3, sp
 800150c:	3300      	adds	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
	uint32_t lastTime = HAL_GetTick();
 8001510:	f002 fd80 	bl	8004014 <HAL_GetTick>
 8001514:	6178      	str	r0, [r7, #20]
	LoRA_sendPacket(LoRA_data);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff fec5 	bl	80012a6 <LoRA_sendPacket>
	while (1) {

		if (recv_packet(acknowledge, length)) {
 800151c:	8a7b      	ldrh	r3, [r7, #18]
 800151e:	4619      	mov	r1, r3
 8001520:	68b8      	ldr	r0, [r7, #8]
 8001522:	f7ff ff91 	bl	8001448 <recv_packet>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d009      	beq.n	8001540 <reliable_send_packet+0x9a>
			//cehck crc
			if (strcmp(acknowledge, LoRA_data) != 0) {
 800152c:	6879      	ldr	r1, [r7, #4]
 800152e:	68b8      	ldr	r0, [r7, #8]
 8001530:	f7fe feee 	bl	8000310 <strcmp>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d011      	beq.n	800155e <reliable_send_packet+0xb8>
				LoRA_sendPacket(LoRA_data);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff feb3 	bl	80012a6 <LoRA_sendPacket>
			} else {
				break;
			}
		}

		if (HAL_GetTick() - lastTime > 1000) {
 8001540:	f002 fd68 	bl	8004014 <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800154e:	d9e5      	bls.n	800151c <reliable_send_packet+0x76>
			LoRA_sendPacket(LoRA_data);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff fea8 	bl	80012a6 <LoRA_sendPacket>
			lastTime = HAL_GetTick();
 8001556:	f002 fd5d 	bl	8004014 <HAL_GetTick>
 800155a:	6178      	str	r0, [r7, #20]
		if (recv_packet(acknowledge, length)) {
 800155c:	e7de      	b.n	800151c <reliable_send_packet+0x76>
				break;
 800155e:	bf00      	nop
 8001560:	46b5      	mov	sp, r6
		}
	}
}
 8001562:	bf00      	nop
 8001564:	371c      	adds	r7, #28
 8001566:	46bd      	mov	sp, r7
 8001568:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800156c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800156c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001570:	f5ad 5d09 	sub.w	sp, sp, #8768	; 0x2240
 8001574:	b08a      	sub	sp, #40	; 0x28
 8001576:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001578:	f002 fcc6 	bl	8003f08 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800157c:	f000 fc86 	bl	8001e8c <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8001580:	f000 fcfc 	bl	8001f7c <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001584:	f001 faa8 	bl	8002ad8 <MX_GPIO_Init>
	MX_DMA_Init();
 8001588:	f001 fa46 	bl	8002a18 <MX_DMA_Init>
	MX_SPI3_Init();
 800158c:	f000 ff7c 	bl	8002488 <MX_SPI3_Init>
	MX_FDCAN3_Init();
 8001590:	f000 fe0c 	bl	80021ac <MX_FDCAN3_Init>
	MX_USART6_UART_Init();
 8001594:	f001 f9f4 	bl	8002980 <MX_USART6_UART_Init>
	MX_ADC1_Init();
 8001598:	f000 fd22 	bl	8001fe0 <MX_ADC1_Init>
	MX_TIM4_Init();
 800159c:	f001 f886 	bl	80026ac <MX_TIM4_Init>
	MX_ADC3_Init();
 80015a0:	f000 fd96 	bl	80020d0 <MX_ADC3_Init>
	MX_SPI2_Init();
 80015a4:	f000 ff1a 	bl	80023dc <MX_SPI2_Init>
	MX_I2C2_Init();
 80015a8:	f000 fe64 	bl	8002274 <MX_I2C2_Init>
	MX_TIM2_Init();
 80015ac:	f000 ffc2 	bl	8002534 <MX_TIM2_Init>
	MX_TIM5_Init();
 80015b0:	f001 f8f8 	bl	80027a4 <MX_TIM5_Init>
	MX_TIM3_Init();
 80015b4:	f001 f816 	bl	80025e4 <MX_TIM3_Init>
	MX_USB_DEVICE_Init();
 80015b8:	f018 fecc 	bl	801a354 <MX_USB_DEVICE_Init>
	MX_SPI1_Init();
 80015bc:	f000 feb8 	bl	8002330 <MX_SPI1_Init>
	MX_UART4_Init();
 80015c0:	f001 f992 	bl	80028e8 <MX_UART4_Init>
	MX_FATFS_Init();
 80015c4:	f013 fce4 	bl	8014f90 <MX_FATFS_Init>
	MX_SDMMC2_SD_Init();
 80015c8:	f000 fe94 	bl	80022f4 <MX_SDMMC2_SD_Init>
	MX_TIM13_Init();
 80015cc:	f001 f944 	bl	8002858 <MX_TIM13_Init>
	MX_TIM14_Init();
 80015d0:	f001 f966 	bl	80028a0 <MX_TIM14_Init>
	/* USER CODE BEGIN 2 */
	char dummy[50];
	disarm(dummy);
 80015d4:	f242 2310 	movw	r3, #8720	; 0x2210
 80015d8:	443b      	add	r3, r7
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fe8e 	bl	80012fc <disarm>

	FATFS FatFs;
	FIL Fil;
	FRESULT FR_Status;
	FR_Status = f_mount(&FatFs, SDPath, 1);
 80015e0:	4bc0      	ldr	r3, [pc, #768]	; (80018e4 <main+0x378>)
 80015e2:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 80015e6:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80015ea:	443b      	add	r3, r7
 80015ec:	2201      	movs	r2, #1
 80015ee:	49be      	ldr	r1, [pc, #760]	; (80018e8 <main+0x37c>)
 80015f0:	4618      	mov	r0, r3
 80015f2:	f018 f8a3 	bl	801973c <f_mount>
 80015f6:	4603      	mov	r3, r0
 80015f8:	f242 225f 	movw	r2, #8799	; 0x225f
 80015fc:	443a      	add	r2, r7
 80015fe:	7013      	strb	r3, [r2, #0]

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001600:	210c      	movs	r1, #12
 8001602:	48ba      	ldr	r0, [pc, #744]	; (80018ec <main+0x380>)
 8001604:	f00e fed2 	bl	80103ac <HAL_TIM_PWM_Start>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 8001608:	2201      	movs	r2, #1
 800160a:	2104      	movs	r1, #4
 800160c:	48b8      	ldr	r0, [pc, #736]	; (80018f0 <main+0x384>)
 800160e:	f007 fc0d 	bl	8008e2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 8001612:	2201      	movs	r2, #1
 8001614:	2108      	movs	r1, #8
 8001616:	48b6      	ldr	r0, [pc, #728]	; (80018f0 <main+0x384>)
 8001618:	f007 fc08 	bl	8008e2c <HAL_GPIO_WritePin>

	FR_Status = f_open(&Fil, "MyTextFile.txt", FA_CREATE_NEW);
 800161c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001620:	2204      	movs	r2, #4
 8001622:	49b4      	ldr	r1, [pc, #720]	; (80018f4 <main+0x388>)
 8001624:	4618      	mov	r0, r3
 8001626:	f018 f8cf 	bl	80197c8 <f_open>
 800162a:	4603      	mov	r3, r0
 800162c:	f242 225f 	movw	r2, #8799	; 0x225f
 8001630:	443a      	add	r2, r7
 8001632:	7013      	strb	r3, [r2, #0]
	f_close(&Fil);
 8001634:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001638:	4618      	mov	r0, r3
 800163a:	f018 fca3 	bl	8019f84 <f_close>

	LoRA_begin(868000000);
 800163e:	48ae      	ldr	r0, [pc, #696]	; (80018f8 <main+0x38c>)
 8001640:	f7ff fd5e 	bl	8001100 <LoRA_begin>

	int connected = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	f242 2258 	movw	r2, #8792	; 0x2258
 800164a:	443a      	add	r2, r7
 800164c:	6013      	str	r3, [r2, #0]
	long last_packet = 0;
 800164e:	2300      	movs	r3, #0
 8001650:	f242 2254 	movw	r2, #8788	; 0x2254
 8001654:	443a      	add	r2, r7
 8001656:	6013      	str	r3, [r2, #0]
	int ARMED = 0;
 8001658:	2300      	movs	r3, #0
 800165a:	f242 2250 	movw	r2, #8784	; 0x2250
 800165e:	443a      	add	r2, r7
 8001660:	6013      	str	r3, [r2, #0]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	//HAL_ADC_Start_DMA(&hadc3, &read_Data, 1);
	const int MAX_PACKET_LENGTH = 250;
 8001662:	23fa      	movs	r3, #250	; 0xfa
 8001664:	f242 224c 	movw	r2, #8780	; 0x224c
 8001668:	443a      	add	r2, r7
 800166a:	6013      	str	r3, [r2, #0]
	char buffered_debug_data[MAX_PACKET_LENGTH];
 800166c:	f242 234c 	movw	r3, #8780	; 0x224c
 8001670:	443b      	add	r3, r7
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	3b01      	subs	r3, #1
 8001676:	f242 2248 	movw	r2, #8776	; 0x2248
 800167a:	443a      	add	r2, r7
 800167c:	6013      	str	r3, [r2, #0]
 800167e:	f242 234c 	movw	r3, #8780	; 0x224c
 8001682:	443b      	add	r3, r7
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2200      	movs	r2, #0
 8001688:	4698      	mov	r8, r3
 800168a:	4691      	mov	r9, r2
 800168c:	f04f 0200 	mov.w	r2, #0
 8001690:	f04f 0300 	mov.w	r3, #0
 8001694:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001698:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800169c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016a0:	f242 234c 	movw	r3, #8780	; 0x224c
 80016a4:	443b      	add	r3, r7
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2200      	movs	r2, #0
 80016aa:	461c      	mov	r4, r3
 80016ac:	4615      	mov	r5, r2
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	f04f 0300 	mov.w	r3, #0
 80016b6:	00eb      	lsls	r3, r5, #3
 80016b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016bc:	00e2      	lsls	r2, r4, #3
 80016be:	f242 234c 	movw	r3, #8780	; 0x224c
 80016c2:	443b      	add	r3, r7
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	3307      	adds	r3, #7
 80016c8:	08db      	lsrs	r3, r3, #3
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	ebad 0d03 	sub.w	sp, sp, r3
 80016d0:	466b      	mov	r3, sp
 80016d2:	3300      	adds	r3, #0
 80016d4:	f242 2244 	movw	r2, #8772	; 0x2244
 80016d8:	443a      	add	r2, r7
 80016da:	6013      	str	r3, [r2, #0]
	char state[50] = "DISARMED";
 80016dc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80016e0:	461c      	mov	r4, r3
 80016e2:	4a86      	ldr	r2, [pc, #536]	; (80018fc <main+0x390>)
 80016e4:	f1a4 03f4 	sub.w	r3, r4, #244	; 0xf4
 80016e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80016ea:	c303      	stmia	r3!, {r0, r1}
 80016ec:	701a      	strb	r2, [r3, #0]
 80016ee:	f1a4 03eb 	sub.w	r3, r4, #235	; 0xeb
 80016f2:	2229      	movs	r2, #41	; 0x29
 80016f4:	2100      	movs	r1, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f019 fb78 	bl	801adec <memset>
	char command[50];
	char recieved_packet[50];
	char previous_packet[50];
	char response_packet[50];
	int packetId;
	char communication_state[50] = "RECIEVING";
 80016fc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001700:	f5a3 74fc 	sub.w	r4, r3, #504	; 0x1f8
 8001704:	4a7e      	ldr	r2, [pc, #504]	; (8001900 <main+0x394>)
 8001706:	4623      	mov	r3, r4
 8001708:	ca07      	ldmia	r2, {r0, r1, r2}
 800170a:	c303      	stmia	r3!, {r0, r1}
 800170c:	801a      	strh	r2, [r3, #0]
 800170e:	f104 030a 	add.w	r3, r4, #10
 8001712:	2228      	movs	r2, #40	; 0x28
 8001714:	2100      	movs	r1, #0
 8001716:	4618      	mov	r0, r3
 8001718:	f019 fb68 	bl	801adec <memset>

	uint32_t previousTime = HAL_GetTick();
 800171c:	f002 fc7a 	bl	8004014 <HAL_GetTick>
 8001720:	f242 2360 	movw	r3, #8800	; 0x2260
 8001724:	443b      	add	r3, r7
 8001726:	6018      	str	r0, [r3, #0]

	while (1) {
		strcpy(buffered_debug_data, "");
 8001728:	f242 2344 	movw	r3, #8772	; 0x2244
 800172c:	443b      	add	r3, r7
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2200      	movs	r2, #0
 8001732:	701a      	strb	r2, [r3, #0]
		while (1) {
			HAL_ADC_Start(&hadc1); // start the adc
 8001734:	4873      	ldr	r0, [pc, #460]	; (8001904 <main+0x398>)
 8001736:	f003 f9a7 	bl	8004a88 <HAL_ADC_Start>

			HAL_ADC_PollForConversion(&hadc1, 100); // poll for conversion
 800173a:	2164      	movs	r1, #100	; 0x64
 800173c:	4871      	ldr	r0, [pc, #452]	; (8001904 <main+0x398>)
 800173e:	f003 faa1 	bl	8004c84 <HAL_ADC_PollForConversion>

			char debug_data[100];
			uint16_t adc_val = HAL_ADC_GetValue(&hadc1); // get the adc value
 8001742:	4870      	ldr	r0, [pc, #448]	; (8001904 <main+0x398>)
 8001744:	f003 fb92 	bl	8004e6c <HAL_ADC_GetValue>
 8001748:	4603      	mov	r3, r0
 800174a:	f242 2242 	movw	r2, #8770	; 0x2242
 800174e:	443a      	add	r2, r7
 8001750:	8013      	strh	r3, [r2, #0]

			sprintf(debug_data, "%d, %d\n", HAL_GetTick(), adc_val);
 8001752:	f002 fc5f 	bl	8004014 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	f242 2342 	movw	r3, #8770	; 0x2242
 800175c:	443b      	add	r3, r7
 800175e:	881b      	ldrh	r3, [r3, #0]
 8001760:	4869      	ldr	r0, [pc, #420]	; (8001908 <main+0x39c>)
 8001762:	f242 2168 	movw	r1, #8808	; 0x2268
 8001766:	4401      	add	r1, r0
 8001768:	19c8      	adds	r0, r1, r7
 800176a:	4968      	ldr	r1, [pc, #416]	; (800190c <main+0x3a0>)
 800176c:	f01a f996 	bl	801ba9c <siprintf>
			CDC_Transmit_HS(buffered_debug_data, strlen(buffered_debug_data));
 8001770:	f242 2344 	movw	r3, #8772	; 0x2244
 8001774:	443b      	add	r3, r7
 8001776:	6818      	ldr	r0, [r3, #0]
 8001778:	f7fe fdd4 	bl	8000324 <strlen>
 800177c:	4603      	mov	r3, r0
 800177e:	4619      	mov	r1, r3
 8001780:	f242 2344 	movw	r3, #8772	; 0x2244
 8001784:	443b      	add	r3, r7
 8001786:	6818      	ldr	r0, [r3, #0]
 8001788:	f018 fea4 	bl	801a4d4 <CDC_Transmit_HS>
			FR_Status = f_open(&Fil, "MyTextFile.txt",
 800178c:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8001790:	2232      	movs	r2, #50	; 0x32
 8001792:	4958      	ldr	r1, [pc, #352]	; (80018f4 <main+0x388>)
 8001794:	4618      	mov	r0, r3
 8001796:	f018 f817 	bl	80197c8 <f_open>
 800179a:	4603      	mov	r3, r0
 800179c:	f242 225f 	movw	r2, #8799	; 0x225f
 80017a0:	443a      	add	r2, r7
 80017a2:	7013      	strb	r3, [r2, #0]
					FA_OPEN_APPEND | FA_WRITE);
			f_puts(debug_data, &Fil);
 80017a4:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 80017a8:	4b57      	ldr	r3, [pc, #348]	; (8001908 <main+0x39c>)
 80017aa:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 80017ae:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80017b2:	443b      	add	r3, r7
 80017b4:	4611      	mov	r1, r2
 80017b6:	4618      	mov	r0, r3
 80017b8:	f018 fc85 	bl	801a0c6 <f_puts>
			f_close(&Fil);
 80017bc:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 80017c0:	4618      	mov	r0, r3
 80017c2:	f018 fbdf 	bl	8019f84 <f_close>

			HAL_ADC_Stop(&hadc1); // stop adc
 80017c6:	484f      	ldr	r0, [pc, #316]	; (8001904 <main+0x398>)
 80017c8:	f003 fa28 	bl	8004c1c <HAL_ADC_Stop>

			//buffer data for sending
			if (strlen(debug_data) + strlen(buffered_debug_data) + 1
 80017cc:	4b4e      	ldr	r3, [pc, #312]	; (8001908 <main+0x39c>)
 80017ce:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 80017d2:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80017d6:	443b      	add	r3, r7
 80017d8:	4618      	mov	r0, r3
 80017da:	f7fe fda3 	bl	8000324 <strlen>
 80017de:	4604      	mov	r4, r0
 80017e0:	f242 2344 	movw	r3, #8772	; 0x2244
 80017e4:	443b      	add	r3, r7
 80017e6:	6818      	ldr	r0, [r3, #0]
 80017e8:	f7fe fd9c 	bl	8000324 <strlen>
 80017ec:	4603      	mov	r3, r0
 80017ee:	4423      	add	r3, r4
 80017f0:	1c5a      	adds	r2, r3, #1
					> MAX_PACKET_LENGTH) {
 80017f2:	f242 234c 	movw	r3, #8780	; 0x224c
 80017f6:	443b      	add	r3, r7
 80017f8:	681b      	ldr	r3, [r3, #0]
			if (strlen(debug_data) + strlen(buffered_debug_data) + 1
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d90d      	bls.n	800181a <main+0x2ae>
				sprintf(buffered_debug_data+strlen(buffered_debug_data), "\n%s",
						debug_data);
			}
		}

		if (strcmp(communication_state, "RECIEVING") == 0) {
 80017fe:	4b44      	ldr	r3, [pc, #272]	; (8001910 <main+0x3a4>)
 8001800:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001804:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001808:	443b      	add	r3, r7
 800180a:	4942      	ldr	r1, [pc, #264]	; (8001914 <main+0x3a8>)
 800180c:	4618      	mov	r0, r3
 800180e:	f7fe fd7f 	bl	8000310 <strcmp>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d017      	beq.n	8001848 <main+0x2dc>
 8001818:	e0ef      	b.n	80019fa <main+0x48e>
				sprintf(buffered_debug_data+strlen(buffered_debug_data), "\n%s",
 800181a:	f242 2344 	movw	r3, #8772	; 0x2244
 800181e:	443b      	add	r3, r7
 8001820:	6818      	ldr	r0, [r3, #0]
 8001822:	f7fe fd7f 	bl	8000324 <strlen>
 8001826:	4602      	mov	r2, r0
 8001828:	f242 2344 	movw	r3, #8772	; 0x2244
 800182c:	443b      	add	r3, r7
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	1898      	adds	r0, r3, r2
 8001832:	4b35      	ldr	r3, [pc, #212]	; (8001908 <main+0x39c>)
 8001834:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001838:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800183c:	443b      	add	r3, r7
 800183e:	461a      	mov	r2, r3
 8001840:	4935      	ldr	r1, [pc, #212]	; (8001918 <main+0x3ac>)
 8001842:	f01a f92b 	bl	801ba9c <siprintf>
		while (1) {
 8001846:	e775      	b.n	8001734 <main+0x1c8>
			if (recv_packet(recieved_packet, 50)) {
 8001848:	4b34      	ldr	r3, [pc, #208]	; (800191c <main+0x3b0>)
 800184a:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 800184e:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001852:	443b      	add	r3, r7
 8001854:	2132      	movs	r1, #50	; 0x32
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff fdf6 	bl	8001448 <recv_packet>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	f000 80a0 	beq.w	80019a4 <main+0x438>

				previousTime = HAL_GetTick();
 8001864:	f002 fbd6 	bl	8004014 <HAL_GetTick>
 8001868:	f242 2360 	movw	r3, #8800	; 0x2260
 800186c:	443b      	add	r3, r7
 800186e:	6018      	str	r0, [r3, #0]
				if (strcmp(recieved_packet, "$") == 0) {
 8001870:	4b2a      	ldr	r3, [pc, #168]	; (800191c <main+0x3b0>)
 8001872:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001876:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800187a:	443b      	add	r3, r7
 800187c:	4928      	ldr	r1, [pc, #160]	; (8001920 <main+0x3b4>)
 800187e:	4618      	mov	r0, r3
 8001880:	f7fe fd46 	bl	8000310 <strcmp>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d10f      	bne.n	80018aa <main+0x33e>

					strcpy(communication_state, "MASTER");
 800188a:	4b21      	ldr	r3, [pc, #132]	; (8001910 <main+0x3a4>)
 800188c:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001890:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001894:	443b      	add	r3, r7
 8001896:	4a23      	ldr	r2, [pc, #140]	; (8001924 <main+0x3b8>)
 8001898:	e892 0003 	ldmia.w	r2, {r0, r1}
 800189c:	6018      	str	r0, [r3, #0]
 800189e:	3304      	adds	r3, #4
 80018a0:	8019      	strh	r1, [r3, #0]
 80018a2:	3302      	adds	r3, #2
 80018a4:	0c0a      	lsrs	r2, r1, #16
 80018a6:	701a      	strb	r2, [r3, #0]
 80018a8:	e73e      	b.n	8001728 <main+0x1bc>
				} else if (strcmp(recieved_packet, previous_packet) == 0) {
 80018aa:	4a1f      	ldr	r2, [pc, #124]	; (8001928 <main+0x3bc>)
 80018ac:	f242 2368 	movw	r3, #8808	; 0x2268
 80018b0:	4413      	add	r3, r2
 80018b2:	19da      	adds	r2, r3, r7
 80018b4:	4b19      	ldr	r3, [pc, #100]	; (800191c <main+0x3b0>)
 80018b6:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 80018ba:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80018be:	443b      	add	r3, r7
 80018c0:	4611      	mov	r1, r2
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7fe fd24 	bl	8000310 <strcmp>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d12e      	bne.n	800192c <main+0x3c0>
					//send acknowledge again
					LoRA_sendPacket(recieved_packet);
 80018ce:	4b13      	ldr	r3, [pc, #76]	; (800191c <main+0x3b0>)
 80018d0:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 80018d4:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80018d8:	443b      	add	r3, r7
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff fce3 	bl	80012a6 <LoRA_sendPacket>
 80018e0:	e722      	b.n	8001728 <main+0x1bc>
 80018e2:	bf00      	nop
 80018e4:	ffffef70 	.word	0xffffef70
 80018e8:	240016a4 	.word	0x240016a4
 80018ec:	240011e8 	.word	0x240011e8
 80018f0:	58021800 	.word	0x58021800
 80018f4:	0801f4ec 	.word	0x0801f4ec
 80018f8:	33bca100 	.word	0x33bca100
 80018fc:	0801f604 	.word	0x0801f604
 8001900:	0801f638 	.word	0x0801f638
 8001904:	24000c78 	.word	0x24000c78
 8001908:	ffffdd9c 	.word	0xffffdd9c
 800190c:	0801f4fc 	.word	0x0801f4fc
 8001910:	ffffde08 	.word	0xffffde08
 8001914:	0801f504 	.word	0x0801f504
 8001918:	0801f510 	.word	0x0801f510
 800191c:	ffffdea4 	.word	0xffffdea4
 8001920:	0801f514 	.word	0x0801f514
 8001924:	0801f518 	.word	0x0801f518
 8001928:	ffffde70 	.word	0xffffde70
				} else {
					strcpy(previous_packet, recieved_packet);
 800192c:	4ad1      	ldr	r2, [pc, #836]	; (8001c74 <main+0x708>)
 800192e:	f242 2368 	movw	r3, #8808	; 0x2268
 8001932:	4413      	add	r3, r2
 8001934:	19da      	adds	r2, r3, r7
 8001936:	4bd0      	ldr	r3, [pc, #832]	; (8001c78 <main+0x70c>)
 8001938:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 800193c:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001940:	443b      	add	r3, r7
 8001942:	4611      	mov	r1, r2
 8001944:	4618      	mov	r0, r3
 8001946:	f01a f90c 	bl	801bb62 <strcpy>
					LoRA_sendPacket(recieved_packet);
 800194a:	4bca      	ldr	r3, [pc, #808]	; (8001c74 <main+0x708>)
 800194c:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001950:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001954:	443b      	add	r3, r7
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff fca5 	bl	80012a6 <LoRA_sendPacket>
					strcpy(command, recieved_packet);
 800195c:	4ac5      	ldr	r2, [pc, #788]	; (8001c74 <main+0x708>)
 800195e:	f242 2368 	movw	r3, #8808	; 0x2268
 8001962:	4413      	add	r3, r2
 8001964:	19da      	adds	r2, r3, r7
 8001966:	4bc5      	ldr	r3, [pc, #788]	; (8001c7c <main+0x710>)
 8001968:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 800196c:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001970:	443b      	add	r3, r7
 8001972:	4611      	mov	r1, r2
 8001974:	4618      	mov	r0, r3
 8001976:	f01a f8f4 	bl	801bb62 <strcpy>
					CDC_Transmit_HS(command, strlen(command));
 800197a:	4bc0      	ldr	r3, [pc, #768]	; (8001c7c <main+0x710>)
 800197c:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001980:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001984:	443b      	add	r3, r7
 8001986:	4618      	mov	r0, r3
 8001988:	f7fe fccc 	bl	8000324 <strlen>
 800198c:	4602      	mov	r2, r0
 800198e:	4bbb      	ldr	r3, [pc, #748]	; (8001c7c <main+0x710>)
 8001990:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001994:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001998:	443b      	add	r3, r7
 800199a:	4611      	mov	r1, r2
 800199c:	4618      	mov	r0, r3
 800199e:	f018 fd99 	bl	801a4d4 <CDC_Transmit_HS>
 80019a2:	e6c1      	b.n	8001728 <main+0x1bc>

				}
			} else if (HAL_GetTick() - previousTime > 1000) {
 80019a4:	f002 fb36 	bl	8004014 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	f242 2360 	movw	r3, #8800	; 0x2260
 80019ae:	443b      	add	r3, r7
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019b8:	f67f aeb6 	bls.w	8001728 <main+0x1bc>
				previousTime = HAL_GetTick();
 80019bc:	f002 fb2a 	bl	8004014 <HAL_GetTick>
 80019c0:	f242 2360 	movw	r3, #8800	; 0x2260
 80019c4:	443b      	add	r3, r7
 80019c6:	6018      	str	r0, [r3, #0]
				//give up MASTER
				sprintf(response_packet, "$ %s", state);
 80019c8:	4aad      	ldr	r2, [pc, #692]	; (8001c80 <main+0x714>)
 80019ca:	f242 2368 	movw	r3, #8808	; 0x2268
 80019ce:	4413      	add	r3, r2
 80019d0:	19da      	adds	r2, r3, r7
 80019d2:	4bac      	ldr	r3, [pc, #688]	; (8001c84 <main+0x718>)
 80019d4:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 80019d8:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80019dc:	443b      	add	r3, r7
 80019de:	49aa      	ldr	r1, [pc, #680]	; (8001c88 <main+0x71c>)
 80019e0:	4618      	mov	r0, r3
 80019e2:	f01a f85b 	bl	801ba9c <siprintf>
				LoRA_sendPacket(response_packet);
 80019e6:	4ba7      	ldr	r3, [pc, #668]	; (8001c84 <main+0x718>)
 80019e8:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 80019ec:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80019f0:	443b      	add	r3, r7
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff fc57 	bl	80012a6 <LoRA_sendPacket>
 80019f8:	e696      	b.n	8001728 <main+0x1bc>
			}
		} else if (strcmp(communication_state, "MASTER") == 0) {
 80019fa:	4ba4      	ldr	r3, [pc, #656]	; (8001c8c <main+0x720>)
 80019fc:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001a00:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001a04:	443b      	add	r3, r7
 8001a06:	49a2      	ldr	r1, [pc, #648]	; (8001c90 <main+0x724>)
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7fe fc81 	bl	8000310 <strcmp>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f47f ae89 	bne.w	8001728 <main+0x1bc>
			CDC_Transmit_HS(state, strlen(state));
 8001a16:	4b9a      	ldr	r3, [pc, #616]	; (8001c80 <main+0x714>)
 8001a18:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001a1c:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001a20:	443b      	add	r3, r7
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7fe fc7e 	bl	8000324 <strlen>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	4b95      	ldr	r3, [pc, #596]	; (8001c80 <main+0x714>)
 8001a2c:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001a30:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001a34:	443b      	add	r3, r7
 8001a36:	4611      	mov	r1, r2
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f018 fd4b 	bl	801a4d4 <CDC_Transmit_HS>
			if (strcmp(state, "DISARMED") == 0) {
 8001a3e:	4b90      	ldr	r3, [pc, #576]	; (8001c80 <main+0x714>)
 8001a40:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001a44:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001a48:	443b      	add	r3, r7
 8001a4a:	4992      	ldr	r1, [pc, #584]	; (8001c94 <main+0x728>)
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7fe fc5f 	bl	8000310 <strcmp>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f040 813d 	bne.w	8001cd4 <main+0x768>
				HAL_Delay(10);
 8001a5a:	200a      	movs	r0, #10
 8001a5c:	f002 fae6 	bl	800402c <HAL_Delay>
				CDC_Transmit_HS(command, strlen(command));
 8001a60:	4b86      	ldr	r3, [pc, #536]	; (8001c7c <main+0x710>)
 8001a62:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001a66:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001a6a:	443b      	add	r3, r7
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7fe fc59 	bl	8000324 <strlen>
 8001a72:	4602      	mov	r2, r0
 8001a74:	4b81      	ldr	r3, [pc, #516]	; (8001c7c <main+0x710>)
 8001a76:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001a7a:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001a7e:	443b      	add	r3, r7
 8001a80:	4611      	mov	r1, r2
 8001a82:	4618      	mov	r0, r3
 8001a84:	f018 fd26 	bl	801a4d4 <CDC_Transmit_HS>
				if (strcmp(command, "ARM") == 0) {
 8001a88:	4b7c      	ldr	r3, [pc, #496]	; (8001c7c <main+0x710>)
 8001a8a:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001a8e:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001a92:	443b      	add	r3, r7
 8001a94:	4980      	ldr	r1, [pc, #512]	; (8001c98 <main+0x72c>)
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7fe fc3a 	bl	8000310 <strcmp>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d121      	bne.n	8001ae6 <main+0x57a>
					HAL_Delay(10);
 8001aa2:	200a      	movs	r0, #10
 8001aa4:	f002 fac2 	bl	800402c <HAL_Delay>
					CDC_Transmit_HS("HELLO 2", strlen("HELLO 2"));
 8001aa8:	2107      	movs	r1, #7
 8001aaa:	487c      	ldr	r0, [pc, #496]	; (8001c9c <main+0x730>)
 8001aac:	f018 fd12 	bl	801a4d4 <CDC_Transmit_HS>
					if (!arm(state)) {
 8001ab0:	4b73      	ldr	r3, [pc, #460]	; (8001c80 <main+0x714>)
 8001ab2:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001ab6:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001aba:	443b      	add	r3, r7
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff fc91 	bl	80013e4 <arm>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d10a      	bne.n	8001ade <main+0x572>
						HAL_Delay(10);
 8001ac8:	200a      	movs	r0, #10
 8001aca:	f002 faaf 	bl	800402c <HAL_Delay>
						CDC_Transmit_HS("HELLO 3", strlen("HELLO 3"));
 8001ace:	2107      	movs	r1, #7
 8001ad0:	4873      	ldr	r0, [pc, #460]	; (8001ca0 <main+0x734>)
 8001ad2:	f018 fcff 	bl	801a4d4 <CDC_Transmit_HS>
						reliable_send_packet("ARM SUCCESS");
 8001ad6:	4873      	ldr	r0, [pc, #460]	; (8001ca4 <main+0x738>)
 8001ad8:	f7ff fce5 	bl	80014a6 <reliable_send_packet>
 8001adc:	e194      	b.n	8001e08 <main+0x89c>
					} else {
						reliable_send_packet("ARM UNSUCCESSFUL");
 8001ade:	4872      	ldr	r0, [pc, #456]	; (8001ca8 <main+0x73c>)
 8001ae0:	f7ff fce1 	bl	80014a6 <reliable_send_packet>
 8001ae4:	e190      	b.n	8001e08 <main+0x89c>
					}
				} else if (strcmp(command, "DISARM") == 0) {
 8001ae6:	4b65      	ldr	r3, [pc, #404]	; (8001c7c <main+0x710>)
 8001ae8:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001aec:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001af0:	443b      	add	r3, r7
 8001af2:	496e      	ldr	r1, [pc, #440]	; (8001cac <main+0x740>)
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7fe fc0b 	bl	8000310 <strcmp>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d103      	bne.n	8001b08 <main+0x59c>
					reliable_send_packet("ALREADY DISARMED");
 8001b00:	486b      	ldr	r0, [pc, #428]	; (8001cb0 <main+0x744>)
 8001b02:	f7ff fcd0 	bl	80014a6 <reliable_send_packet>
 8001b06:	e17f      	b.n	8001e08 <main+0x89c>
				} else if (strcmp(command, "CONT") == 0) {
 8001b08:	4b5c      	ldr	r3, [pc, #368]	; (8001c7c <main+0x710>)
 8001b0a:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001b0e:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001b12:	443b      	add	r3, r7
 8001b14:	4967      	ldr	r1, [pc, #412]	; (8001cb4 <main+0x748>)
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fbfa 	bl	8000310 <strcmp>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f040 8172 	bne.w	8001e08 <main+0x89c>
					uint8_t CONTS[8];
					CONTS[0] = HAL_GPIO_ReadPin(CONT1_GPIO_Port, CONT1_Pin);
 8001b24:	2104      	movs	r1, #4
 8001b26:	4864      	ldr	r0, [pc, #400]	; (8001cb8 <main+0x74c>)
 8001b28:	f007 f968 	bl	8008dfc <HAL_GPIO_ReadPin>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	461a      	mov	r2, r3
 8001b30:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001b34:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001b38:	701a      	strb	r2, [r3, #0]
					CONTS[1] = HAL_GPIO_ReadPin(CONT2_GPIO_Port, CONT2_Pin);
 8001b3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b3e:	485f      	ldr	r0, [pc, #380]	; (8001cbc <main+0x750>)
 8001b40:	f007 f95c 	bl	8008dfc <HAL_GPIO_ReadPin>
 8001b44:	4603      	mov	r3, r0
 8001b46:	461a      	mov	r2, r3
 8001b48:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001b4c:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001b50:	705a      	strb	r2, [r3, #1]
					CONTS[2] = HAL_GPIO_ReadPin(CONT3_GPIO_Port, CONT3_Pin);
 8001b52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b56:	4859      	ldr	r0, [pc, #356]	; (8001cbc <main+0x750>)
 8001b58:	f007 f950 	bl	8008dfc <HAL_GPIO_ReadPin>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	461a      	mov	r2, r3
 8001b60:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001b64:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001b68:	709a      	strb	r2, [r3, #2]
					CONTS[3] = HAL_GPIO_ReadPin(CONT4_GPIO_Port, CONT4_Pin);
 8001b6a:	2101      	movs	r1, #1
 8001b6c:	4854      	ldr	r0, [pc, #336]	; (8001cc0 <main+0x754>)
 8001b6e:	f007 f945 	bl	8008dfc <HAL_GPIO_ReadPin>
 8001b72:	4603      	mov	r3, r0
 8001b74:	461a      	mov	r2, r3
 8001b76:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001b7a:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001b7e:	70da      	strb	r2, [r3, #3]
					CONTS[4] = HAL_GPIO_ReadPin(CONT5_GPIO_Port, CONT5_Pin);
 8001b80:	2180      	movs	r1, #128	; 0x80
 8001b82:	4850      	ldr	r0, [pc, #320]	; (8001cc4 <main+0x758>)
 8001b84:	f007 f93a 	bl	8008dfc <HAL_GPIO_ReadPin>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001b90:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001b94:	711a      	strb	r2, [r3, #4]
					CONTS[5] = HAL_GPIO_ReadPin(CONT6_GPIO_Port, CONT6_Pin);
 8001b96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b9a:	484a      	ldr	r0, [pc, #296]	; (8001cc4 <main+0x758>)
 8001b9c:	f007 f92e 	bl	8008dfc <HAL_GPIO_ReadPin>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001ba8:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001bac:	715a      	strb	r2, [r3, #5]
					CONTS[6] = HAL_GPIO_ReadPin(CONT7_GPIO_Port, CONT7_Pin);
 8001bae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bb2:	4844      	ldr	r0, [pc, #272]	; (8001cc4 <main+0x758>)
 8001bb4:	f007 f922 	bl	8008dfc <HAL_GPIO_ReadPin>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	461a      	mov	r2, r3
 8001bbc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001bc0:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001bc4:	719a      	strb	r2, [r3, #6]
					CONTS[7] = HAL_GPIO_ReadPin(CONT8_GPIO_Port, CONT8_Pin);
 8001bc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bca:	483e      	ldr	r0, [pc, #248]	; (8001cc4 <main+0x758>)
 8001bcc:	f007 f916 	bl	8008dfc <HAL_GPIO_ReadPin>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001bd8:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001bdc:	71da      	strb	r2, [r3, #7]

					char message[100];
					for (int i = 0; i < 8; i++) {
 8001bde:	2300      	movs	r3, #0
 8001be0:	f242 2264 	movw	r2, #8804	; 0x2264
 8001be4:	443a      	add	r2, r7
 8001be6:	6013      	str	r3, [r2, #0]
 8001be8:	e03c      	b.n	8001c64 <main+0x6f8>
						if (CONTS[i]) {
 8001bea:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001bee:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 8001bf2:	f242 2364 	movw	r3, #8804	; 0x2264
 8001bf6:	443b      	add	r3, r7
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d00f      	beq.n	8001c22 <main+0x6b6>
							sprintf(message, "PYRO %d DOESN'T HAVE CONTINUITY",
 8001c02:	f242 2364 	movw	r3, #8804	; 0x2264
 8001c06:	443b      	add	r3, r7
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	1c5a      	adds	r2, r3, #1
 8001c0c:	4b2e      	ldr	r3, [pc, #184]	; (8001cc8 <main+0x75c>)
 8001c0e:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001c12:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001c16:	443b      	add	r3, r7
 8001c18:	492c      	ldr	r1, [pc, #176]	; (8001ccc <main+0x760>)
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f019 ff3e 	bl	801ba9c <siprintf>
 8001c20:	e00e      	b.n	8001c40 <main+0x6d4>
									i + 1);
						} else {
							sprintf(message, "PYRO %d HAS CONTINUITY", i + 1);
 8001c22:	f242 2364 	movw	r3, #8804	; 0x2264
 8001c26:	443b      	add	r3, r7
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	1c5a      	adds	r2, r3, #1
 8001c2c:	4b26      	ldr	r3, [pc, #152]	; (8001cc8 <main+0x75c>)
 8001c2e:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001c32:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001c36:	443b      	add	r3, r7
 8001c38:	4925      	ldr	r1, [pc, #148]	; (8001cd0 <main+0x764>)
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f019 ff2e 	bl	801ba9c <siprintf>
						}

						reliable_send_packet(message);
 8001c40:	4b21      	ldr	r3, [pc, #132]	; (8001cc8 <main+0x75c>)
 8001c42:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001c46:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001c4a:	443b      	add	r3, r7
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff fc2a 	bl	80014a6 <reliable_send_packet>
					for (int i = 0; i < 8; i++) {
 8001c52:	f242 2364 	movw	r3, #8804	; 0x2264
 8001c56:	443b      	add	r3, r7
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	f242 2264 	movw	r2, #8804	; 0x2264
 8001c60:	443a      	add	r2, r7
 8001c62:	6013      	str	r3, [r2, #0]
 8001c64:	f242 2364 	movw	r3, #8804	; 0x2264
 8001c68:	443b      	add	r3, r7
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2b07      	cmp	r3, #7
 8001c6e:	ddbc      	ble.n	8001bea <main+0x67e>
 8001c70:	e0ca      	b.n	8001e08 <main+0x89c>
 8001c72:	bf00      	nop
 8001c74:	ffffdea4 	.word	0xffffdea4
 8001c78:	ffffde70 	.word	0xffffde70
 8001c7c:	ffffded8 	.word	0xffffded8
 8001c80:	ffffdf0c 	.word	0xffffdf0c
 8001c84:	ffffde3c 	.word	0xffffde3c
 8001c88:	0801f520 	.word	0x0801f520
 8001c8c:	ffffde08 	.word	0xffffde08
 8001c90:	0801f518 	.word	0x0801f518
 8001c94:	0801f4d8 	.word	0x0801f4d8
 8001c98:	0801f528 	.word	0x0801f528
 8001c9c:	0801f52c 	.word	0x0801f52c
 8001ca0:	0801f534 	.word	0x0801f534
 8001ca4:	0801f53c 	.word	0x0801f53c
 8001ca8:	0801f548 	.word	0x0801f548
 8001cac:	0801f55c 	.word	0x0801f55c
 8001cb0:	0801f564 	.word	0x0801f564
 8001cb4:	0801f578 	.word	0x0801f578
 8001cb8:	58020400 	.word	0x58020400
 8001cbc:	58021400 	.word	0x58021400
 8001cc0:	58021800 	.word	0x58021800
 8001cc4:	58021000 	.word	0x58021000
 8001cc8:	ffffdd9c 	.word	0xffffdd9c
 8001ccc:	0801f580 	.word	0x0801f580
 8001cd0:	0801f5a0 	.word	0x0801f5a0
					}
				}
			} else if (strcmp(state, "ARMED") == 0) {
 8001cd4:	4b5e      	ldr	r3, [pc, #376]	; (8001e50 <main+0x8e4>)
 8001cd6:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001cda:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001cde:	443b      	add	r3, r7
 8001ce0:	495c      	ldr	r1, [pc, #368]	; (8001e54 <main+0x8e8>)
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7fe fb14 	bl	8000310 <strcmp>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d142      	bne.n	8001d74 <main+0x808>
				if (strcmp(command, "DISARM") == 0) {
 8001cee:	4b5a      	ldr	r3, [pc, #360]	; (8001e58 <main+0x8ec>)
 8001cf0:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001cf4:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001cf8:	443b      	add	r3, r7
 8001cfa:	4958      	ldr	r1, [pc, #352]	; (8001e5c <main+0x8f0>)
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7fe fb07 	bl	8000310 <strcmp>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d109      	bne.n	8001d1c <main+0x7b0>
					if (disarm(state)) {
 8001d08:	4b51      	ldr	r3, [pc, #324]	; (8001e50 <main+0x8e4>)
 8001d0a:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001d0e:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001d12:	443b      	add	r3, r7
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff faf1 	bl	80012fc <disarm>
 8001d1a:	e075      	b.n	8001e08 <main+0x89c>
						//not success
					} else {
						//success
					}
				} else if (strcmp(command, "ARM") == 0) {
 8001d1c:	4b4e      	ldr	r3, [pc, #312]	; (8001e58 <main+0x8ec>)
 8001d1e:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001d22:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001d26:	443b      	add	r3, r7
 8001d28:	494d      	ldr	r1, [pc, #308]	; (8001e60 <main+0x8f4>)
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe faf0 	bl	8000310 <strcmp>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d103      	bne.n	8001d3e <main+0x7d2>
					reliable_send_packet("ALREADY ARMED");
 8001d36:	484b      	ldr	r0, [pc, #300]	; (8001e64 <main+0x8f8>)
 8001d38:	f7ff fbb5 	bl	80014a6 <reliable_send_packet>
 8001d3c:	e064      	b.n	8001e08 <main+0x89c>
				} else if (strcmp(command, "FIRE") == 0) {
 8001d3e:	4b46      	ldr	r3, [pc, #280]	; (8001e58 <main+0x8ec>)
 8001d40:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001d44:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001d48:	443b      	add	r3, r7
 8001d4a:	4947      	ldr	r1, [pc, #284]	; (8001e68 <main+0x8fc>)
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7fe fadf 	bl	8000310 <strcmp>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d157      	bne.n	8001e08 <main+0x89c>
					strcpy(state, "STATIC_FIRE_LOGGING");
 8001d58:	4b3d      	ldr	r3, [pc, #244]	; (8001e50 <main+0x8e4>)
 8001d5a:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001d5e:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001d62:	443b      	add	r3, r7
 8001d64:	4a41      	ldr	r2, [pc, #260]	; (8001e6c <main+0x900>)
 8001d66:	461c      	mov	r4, r3
 8001d68:	4615      	mov	r5, r2
 8001d6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d6e:	682b      	ldr	r3, [r5, #0]
 8001d70:	6023      	str	r3, [r4, #0]
 8001d72:	e049      	b.n	8001e08 <main+0x89c>
				}
			} else if (strcmp(state, "STATIC_FIRE_LOGGING") == 0) {
 8001d74:	4b36      	ldr	r3, [pc, #216]	; (8001e50 <main+0x8e4>)
 8001d76:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001d7a:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001d7e:	443b      	add	r3, r7
 8001d80:	493a      	ldr	r1, [pc, #232]	; (8001e6c <main+0x900>)
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe fac4 	bl	8000310 <strcmp>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d12d      	bne.n	8001dea <main+0x87e>
				if (strcmp(command, "STOP") == 0) {
 8001d8e:	4b32      	ldr	r3, [pc, #200]	; (8001e58 <main+0x8ec>)
 8001d90:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001d94:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001d98:	443b      	add	r3, r7
 8001d9a:	4935      	ldr	r1, [pc, #212]	; (8001e70 <main+0x904>)
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe fab7 	bl	8000310 <strcmp>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d10c      	bne.n	8001dc2 <main+0x856>
					strcpy(state, "ARMED");
 8001da8:	4b29      	ldr	r3, [pc, #164]	; (8001e50 <main+0x8e4>)
 8001daa:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001dae:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001db2:	443b      	add	r3, r7
 8001db4:	4a27      	ldr	r2, [pc, #156]	; (8001e54 <main+0x8e8>)
 8001db6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001dba:	6018      	str	r0, [r3, #0]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	8019      	strh	r1, [r3, #0]
 8001dc0:	e022      	b.n	8001e08 <main+0x89c>
				} else if (strcmp(command, "DATA") == 0) {
 8001dc2:	4b25      	ldr	r3, [pc, #148]	; (8001e58 <main+0x8ec>)
 8001dc4:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001dc8:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001dcc:	443b      	add	r3, r7
 8001dce:	4929      	ldr	r1, [pc, #164]	; (8001e74 <main+0x908>)
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7fe fa9d 	bl	8000310 <strcmp>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d115      	bne.n	8001e08 <main+0x89c>
					reliable_send_packet(buffered_debug_data);
 8001ddc:	f242 2344 	movw	r3, #8772	; 0x2244
 8001de0:	443b      	add	r3, r7
 8001de2:	6818      	ldr	r0, [r3, #0]
 8001de4:	f7ff fb5f 	bl	80014a6 <reliable_send_packet>
 8001de8:	e00e      	b.n	8001e08 <main+0x89c>
				}
			} else {
				LoRA_sendPacket("state wrong!");
 8001dea:	4823      	ldr	r0, [pc, #140]	; (8001e78 <main+0x90c>)
 8001dec:	f7ff fa5b 	bl	80012a6 <LoRA_sendPacket>
				HAL_Delay(100);
 8001df0:	2064      	movs	r0, #100	; 0x64
 8001df2:	f002 f91b 	bl	800402c <HAL_Delay>
				LoRA_sendPacket(state);
 8001df6:	4b16      	ldr	r3, [pc, #88]	; (8001e50 <main+0x8e4>)
 8001df8:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001dfc:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001e00:	443b      	add	r3, r7
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff fa4f 	bl	80012a6 <LoRA_sendPacket>
			}

			sprintf(response_packet, "$ %s", state);
 8001e08:	4a11      	ldr	r2, [pc, #68]	; (8001e50 <main+0x8e4>)
 8001e0a:	f242 2368 	movw	r3, #8808	; 0x2268
 8001e0e:	4413      	add	r3, r2
 8001e10:	19da      	adds	r2, r3, r7
 8001e12:	4b1a      	ldr	r3, [pc, #104]	; (8001e7c <main+0x910>)
 8001e14:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001e18:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001e1c:	443b      	add	r3, r7
 8001e1e:	4918      	ldr	r1, [pc, #96]	; (8001e80 <main+0x914>)
 8001e20:	4618      	mov	r0, r3
 8001e22:	f019 fe3b 	bl	801ba9c <siprintf>
			LoRA_sendPacket(response_packet);
 8001e26:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <main+0x910>)
 8001e28:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001e2c:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001e30:	443b      	add	r3, r7
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff fa37 	bl	80012a6 <LoRA_sendPacket>
			strcpy(communication_state, "RECIEVING");
 8001e38:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <main+0x918>)
 8001e3a:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001e3e:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8001e42:	443b      	add	r3, r7
 8001e44:	4a10      	ldr	r2, [pc, #64]	; (8001e88 <main+0x91c>)
 8001e46:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e48:	c303      	stmia	r3!, {r0, r1}
 8001e4a:	801a      	strh	r2, [r3, #0]
		strcpy(buffered_debug_data, "");
 8001e4c:	e46c      	b.n	8001728 <main+0x1bc>
 8001e4e:	bf00      	nop
 8001e50:	ffffdf0c 	.word	0xffffdf0c
 8001e54:	0801f4e4 	.word	0x0801f4e4
 8001e58:	ffffded8 	.word	0xffffded8
 8001e5c:	0801f55c 	.word	0x0801f55c
 8001e60:	0801f528 	.word	0x0801f528
 8001e64:	0801f5b8 	.word	0x0801f5b8
 8001e68:	0801f5c8 	.word	0x0801f5c8
 8001e6c:	0801f5d0 	.word	0x0801f5d0
 8001e70:	0801f5e4 	.word	0x0801f5e4
 8001e74:	0801f5ec 	.word	0x0801f5ec
 8001e78:	0801f5f4 	.word	0x0801f5f4
 8001e7c:	ffffde3c 	.word	0xffffde3c
 8001e80:	0801f520 	.word	0x0801f520
 8001e84:	ffffde08 	.word	0xffffde08
 8001e88:	0801f504 	.word	0x0801f504

08001e8c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b09c      	sub	sp, #112	; 0x70
 8001e90:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001e92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e96:	224c      	movs	r2, #76	; 0x4c
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f018 ffa6 	bl	801adec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001ea0:	1d3b      	adds	r3, r7, #4
 8001ea2:	2220      	movs	r2, #32
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f018 ffa0 	bl	801adec <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001eac:	2002      	movs	r0, #2
 8001eae:	f008 fbd1 	bl	800a654 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	603b      	str	r3, [r7, #0]
 8001eb6:	4b30      	ldr	r3, [pc, #192]	; (8001f78 <SystemClock_Config+0xec>)
 8001eb8:	699b      	ldr	r3, [r3, #24]
 8001eba:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ebe:	4a2e      	ldr	r2, [pc, #184]	; (8001f78 <SystemClock_Config+0xec>)
 8001ec0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ec4:	6193      	str	r3, [r2, #24]
 8001ec6:	4b2c      	ldr	r3, [pc, #176]	; (8001f78 <SystemClock_Config+0xec>)
 8001ec8:	699b      	ldr	r3, [r3, #24]
 8001eca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001ece:	603b      	str	r3, [r7, #0]
 8001ed0:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8001ed2:	bf00      	nop
 8001ed4:	4b28      	ldr	r3, [pc, #160]	; (8001f78 <SystemClock_Config+0xec>)
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001edc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ee0:	d1f8      	bne.n	8001ed4 <SystemClock_Config+0x48>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48
 8001ee2:	2322      	movs	r3, #34	; 0x22
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSICalibrationValue = 64;
 8001eea:	2340      	movs	r3, #64	; 0x40
 8001eec:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001efa:	2304      	movs	r3, #4
 8001efc:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 12;
 8001efe:	230c      	movs	r3, #12
 8001f00:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 8001f02:	2301      	movs	r3, #1
 8001f04:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 3;
 8001f06:	2303      	movs	r3, #3
 8001f08:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001f0e:	230c      	movs	r3, #12
 8001f10:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001f12:	2300      	movs	r3, #0
 8001f14:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001f16:	2300      	movs	r3, #0
 8001f18:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f008 fbe2 	bl	800a6e8 <HAL_RCC_OscConfig>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <SystemClock_Config+0xa2>
		Error_Handler();
 8001f2a:	f000 ff39 	bl	8002da0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001f2e:	233f      	movs	r3, #63	; 0x3f
 8001f30:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f32:	2303      	movs	r3, #3
 8001f34:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001f3a:	2308      	movs	r3, #8
 8001f3c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001f3e:	2340      	movs	r3, #64	; 0x40
 8001f40:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001f42:	2340      	movs	r3, #64	; 0x40
 8001f44:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001f46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f4a:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001f4c:	2340      	movs	r3, #64	; 0x40
 8001f4e:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8001f50:	1d3b      	adds	r3, r7, #4
 8001f52:	2101      	movs	r1, #1
 8001f54:	4618      	mov	r0, r3
 8001f56:	f008 ffa1 	bl	800ae9c <HAL_RCC_ClockConfig>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <SystemClock_Config+0xd8>
		Error_Handler();
 8001f60:	f000 ff1e 	bl	8002da0 <Error_Handler>
	}
	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001f64:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001f68:	2100      	movs	r1, #0
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	f009 f94c 	bl	800b208 <HAL_RCC_MCOConfig>
}
 8001f70:	bf00      	nop
 8001f72:	3770      	adds	r7, #112	; 0x70
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	58024800 	.word	0x58024800

08001f7c <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b0ae      	sub	sp, #184	; 0xb8
 8001f80:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001f82:	463b      	mov	r3, r7
 8001f84:	22b8      	movs	r2, #184	; 0xb8
 8001f86:	2100      	movs	r1, #0
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f018 ff2f 	bl	801adec <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC
 8001f8e:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 8001f92:	f04f 0300 	mov.w	r3, #0
 8001f96:	e9c7 2300 	strd	r2, r3, [r7]
			| RCC_PERIPHCLK_SPI3 | RCC_PERIPHCLK_SPI2 | RCC_PERIPHCLK_SPI1;
	PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001f9a:	2304      	movs	r3, #4
 8001f9c:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001f9e:	230c      	movs	r3, #12
 8001fa0:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001fa2:	2304      	movs	r3, #4
 8001fa4:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001faa:	2302      	movs	r3, #2
 8001fac:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001fae:	23c0      	movs	r3, #192	; 0xc0
 8001fb0:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001fba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fbe:	65fb      	str	r3, [r7, #92]	; 0x5c
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001fc6:	463b      	mov	r3, r7
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f009 fb5d 	bl	800b688 <HAL_RCCEx_PeriphCLKConfig>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <PeriphCommonClock_Config+0x5c>
		Error_Handler();
 8001fd4:	f000 fee4 	bl	8002da0 <Error_Handler>
	}
}
 8001fd8:	bf00      	nop
 8001fda:	37b8      	adds	r7, #184	; 0xb8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08c      	sub	sp, #48	; 0x30
 8001fe4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 8001fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	605a      	str	r2, [r3, #4]
 8001ff0:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001ff2:	463b      	mov	r3, r7
 8001ff4:	2224      	movs	r2, #36	; 0x24
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f018 fef7 	bl	801adec <memset>

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001ffe:	4b31      	ldr	r3, [pc, #196]	; (80020c4 <MX_ADC1_Init+0xe4>)
 8002000:	4a31      	ldr	r2, [pc, #196]	; (80020c8 <MX_ADC1_Init+0xe8>)
 8002002:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8002004:	4b2f      	ldr	r3, [pc, #188]	; (80020c4 <MX_ADC1_Init+0xe4>)
 8002006:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 800200a:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800200c:	4b2d      	ldr	r3, [pc, #180]	; (80020c4 <MX_ADC1_Init+0xe4>)
 800200e:	2200      	movs	r2, #0
 8002010:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002012:	4b2c      	ldr	r3, [pc, #176]	; (80020c4 <MX_ADC1_Init+0xe4>)
 8002014:	2200      	movs	r2, #0
 8002016:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002018:	4b2a      	ldr	r3, [pc, #168]	; (80020c4 <MX_ADC1_Init+0xe4>)
 800201a:	2204      	movs	r2, #4
 800201c:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 800201e:	4b29      	ldr	r3, [pc, #164]	; (80020c4 <MX_ADC1_Init+0xe4>)
 8002020:	2200      	movs	r2, #0
 8002022:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8002024:	4b27      	ldr	r3, [pc, #156]	; (80020c4 <MX_ADC1_Init+0xe4>)
 8002026:	2200      	movs	r2, #0
 8002028:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 800202a:	4b26      	ldr	r3, [pc, #152]	; (80020c4 <MX_ADC1_Init+0xe4>)
 800202c:	2201      	movs	r2, #1
 800202e:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002030:	4b24      	ldr	r3, [pc, #144]	; (80020c4 <MX_ADC1_Init+0xe4>)
 8002032:	2200      	movs	r2, #0
 8002034:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002038:	4b22      	ldr	r3, [pc, #136]	; (80020c4 <MX_ADC1_Init+0xe4>)
 800203a:	2200      	movs	r2, #0
 800203c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800203e:	4b21      	ldr	r3, [pc, #132]	; (80020c4 <MX_ADC1_Init+0xe4>)
 8002040:	2200      	movs	r2, #0
 8002042:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8002044:	4b1f      	ldr	r3, [pc, #124]	; (80020c4 <MX_ADC1_Init+0xe4>)
 8002046:	2200      	movs	r2, #0
 8002048:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800204a:	4b1e      	ldr	r3, [pc, #120]	; (80020c4 <MX_ADC1_Init+0xe4>)
 800204c:	2200      	movs	r2, #0
 800204e:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002050:	4b1c      	ldr	r3, [pc, #112]	; (80020c4 <MX_ADC1_Init+0xe4>)
 8002052:	2200      	movs	r2, #0
 8002054:	641a      	str	r2, [r3, #64]	; 0x40
	hadc1.Init.OversamplingMode = DISABLE;
 8002056:	4b1b      	ldr	r3, [pc, #108]	; (80020c4 <MX_ADC1_Init+0xe4>)
 8002058:	2200      	movs	r2, #0
 800205a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800205e:	4819      	ldr	r0, [pc, #100]	; (80020c4 <MX_ADC1_Init+0xe4>)
 8002060:	f002 fb0a 	bl	8004678 <HAL_ADC_Init>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <MX_ADC1_Init+0x8e>
		Error_Handler();
 800206a:	f000 fe99 	bl	8002da0 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 800206e:	2300      	movs	r3, #0
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8002072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002076:	4619      	mov	r1, r3
 8002078:	4812      	ldr	r0, [pc, #72]	; (80020c4 <MX_ADC1_Init+0xe4>)
 800207a:	f003 feeb 	bl	8005e54 <HAL_ADCEx_MultiModeConfigChannel>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_ADC1_Init+0xa8>
		Error_Handler();
 8002084:	f000 fe8c 	bl	8002da0 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_14;
 8002088:	4b10      	ldr	r3, [pc, #64]	; (80020cc <MX_ADC1_Init+0xec>)
 800208a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800208c:	2306      	movs	r3, #6
 800208e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8002090:	2303      	movs	r3, #3
 8002092:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002094:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002098:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800209a:	2304      	movs	r3, #4
 800209c:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
	sConfig.OffsetSignedSaturation = DISABLE;
 80020a2:	2300      	movs	r3, #0
 80020a4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80020a8:	463b      	mov	r3, r7
 80020aa:	4619      	mov	r1, r3
 80020ac:	4805      	ldr	r0, [pc, #20]	; (80020c4 <MX_ADC1_Init+0xe4>)
 80020ae:	f002 feeb 	bl	8004e88 <HAL_ADC_ConfigChannel>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <MX_ADC1_Init+0xdc>
		Error_Handler();
 80020b8:	f000 fe72 	bl	8002da0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80020bc:	bf00      	nop
 80020be:	3730      	adds	r7, #48	; 0x30
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	24000c78 	.word	0x24000c78
 80020c8:	40022000 	.word	0x40022000
 80020cc:	3ac04000 	.word	0x3ac04000

080020d0 <MX_ADC3_Init>:
/**
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void) {
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08a      	sub	sp, #40	; 0x28
 80020d4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80020d6:	1d3b      	adds	r3, r7, #4
 80020d8:	2224      	movs	r2, #36	; 0x24
 80020da:	2100      	movs	r1, #0
 80020dc:	4618      	mov	r0, r3
 80020de:	f018 fe85 	bl	801adec <memset>

	/* USER CODE END ADC3_Init 1 */

	/** Common config
	 */
	hadc3.Instance = ADC3;
 80020e2:	4b2f      	ldr	r3, [pc, #188]	; (80021a0 <MX_ADC3_Init+0xd0>)
 80020e4:	4a2f      	ldr	r2, [pc, #188]	; (80021a4 <MX_ADC3_Init+0xd4>)
 80020e6:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80020e8:	4b2d      	ldr	r3, [pc, #180]	; (80021a0 <MX_ADC3_Init+0xd0>)
 80020ea:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 80020ee:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80020f0:	4b2b      	ldr	r3, [pc, #172]	; (80021a0 <MX_ADC3_Init+0xd0>)
 80020f2:	2208      	movs	r2, #8
 80020f4:	609a      	str	r2, [r3, #8]
	hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 80020f6:	4b2a      	ldr	r3, [pc, #168]	; (80021a0 <MX_ADC3_Init+0xd0>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	60da      	str	r2, [r3, #12]
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80020fc:	4b28      	ldr	r3, [pc, #160]	; (80021a0 <MX_ADC3_Init+0xd0>)
 80020fe:	2200      	movs	r2, #0
 8002100:	611a      	str	r2, [r3, #16]
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002102:	4b27      	ldr	r3, [pc, #156]	; (80021a0 <MX_ADC3_Init+0xd0>)
 8002104:	2204      	movs	r2, #4
 8002106:	615a      	str	r2, [r3, #20]
	hadc3.Init.LowPowerAutoWait = DISABLE;
 8002108:	4b25      	ldr	r3, [pc, #148]	; (80021a0 <MX_ADC3_Init+0xd0>)
 800210a:	2200      	movs	r2, #0
 800210c:	761a      	strb	r2, [r3, #24]
	hadc3.Init.ContinuousConvMode = DISABLE;
 800210e:	4b24      	ldr	r3, [pc, #144]	; (80021a0 <MX_ADC3_Init+0xd0>)
 8002110:	2200      	movs	r2, #0
 8002112:	765a      	strb	r2, [r3, #25]
	hadc3.Init.NbrOfConversion = 1;
 8002114:	4b22      	ldr	r3, [pc, #136]	; (80021a0 <MX_ADC3_Init+0xd0>)
 8002116:	2201      	movs	r2, #1
 8002118:	61da      	str	r2, [r3, #28]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 800211a:	4b21      	ldr	r3, [pc, #132]	; (80021a0 <MX_ADC3_Init+0xd0>)
 800211c:	2200      	movs	r2, #0
 800211e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002122:	4b1f      	ldr	r3, [pc, #124]	; (80021a0 <MX_ADC3_Init+0xd0>)
 8002124:	2200      	movs	r2, #0
 8002126:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002128:	4b1d      	ldr	r3, [pc, #116]	; (80021a0 <MX_ADC3_Init+0xd0>)
 800212a:	2200      	movs	r2, #0
 800212c:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.DMAContinuousRequests = ENABLE;
 800212e:	4b1c      	ldr	r3, [pc, #112]	; (80021a0 <MX_ADC3_Init+0xd0>)
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8002136:	4b1a      	ldr	r3, [pc, #104]	; (80021a0 <MX_ADC3_Init+0xd0>)
 8002138:	2200      	movs	r2, #0
 800213a:	635a      	str	r2, [r3, #52]	; 0x34
	hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800213c:	4b18      	ldr	r3, [pc, #96]	; (80021a0 <MX_ADC3_Init+0xd0>)
 800213e:	2200      	movs	r2, #0
 8002140:	631a      	str	r2, [r3, #48]	; 0x30
	hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002142:	4b17      	ldr	r3, [pc, #92]	; (80021a0 <MX_ADC3_Init+0xd0>)
 8002144:	2200      	movs	r2, #0
 8002146:	63da      	str	r2, [r3, #60]	; 0x3c
	hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002148:	4b15      	ldr	r3, [pc, #84]	; (80021a0 <MX_ADC3_Init+0xd0>)
 800214a:	2200      	movs	r2, #0
 800214c:	641a      	str	r2, [r3, #64]	; 0x40
	hadc3.Init.OversamplingMode = DISABLE;
 800214e:	4b14      	ldr	r3, [pc, #80]	; (80021a0 <MX_ADC3_Init+0xd0>)
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8002156:	4812      	ldr	r0, [pc, #72]	; (80021a0 <MX_ADC3_Init+0xd0>)
 8002158:	f002 fa8e 	bl	8004678 <HAL_ADC_Init>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <MX_ADC3_Init+0x96>
		Error_Handler();
 8002162:	f000 fe1d 	bl	8002da0 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8002166:	4b10      	ldr	r3, [pc, #64]	; (80021a8 <MX_ADC3_Init+0xd8>)
 8002168:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800216a:	2306      	movs	r3, #6
 800216c:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 800216e:	2300      	movs	r3, #0
 8002170:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002172:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002176:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002178:	2304      	movs	r3, #4
 800217a:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 800217c:	2300      	movs	r3, #0
 800217e:	61bb      	str	r3, [r7, #24]
	sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8002180:	2300      	movs	r3, #0
 8002182:	623b      	str	r3, [r7, #32]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8002184:	1d3b      	adds	r3, r7, #4
 8002186:	4619      	mov	r1, r3
 8002188:	4805      	ldr	r0, [pc, #20]	; (80021a0 <MX_ADC3_Init+0xd0>)
 800218a:	f002 fe7d 	bl	8004e88 <HAL_ADC_ConfigChannel>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <MX_ADC3_Init+0xc8>
		Error_Handler();
 8002194:	f000 fe04 	bl	8002da0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8002198:	bf00      	nop
 800219a:	3728      	adds	r7, #40	; 0x28
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	24000ce8 	.word	0x24000ce8
 80021a4:	58026000 	.word	0x58026000
 80021a8:	04300002 	.word	0x04300002

080021ac <MX_FDCAN3_Init>:
/**
 * @brief FDCAN3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_FDCAN3_Init(void) {
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
	/* USER CODE END FDCAN3_Init 0 */

	/* USER CODE BEGIN FDCAN3_Init 1 */

	/* USER CODE END FDCAN3_Init 1 */
	hfdcan3.Instance = FDCAN3;
 80021b0:	4b2e      	ldr	r3, [pc, #184]	; (800226c <MX_FDCAN3_Init+0xc0>)
 80021b2:	4a2f      	ldr	r2, [pc, #188]	; (8002270 <MX_FDCAN3_Init+0xc4>)
 80021b4:	601a      	str	r2, [r3, #0]
	hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80021b6:	4b2d      	ldr	r3, [pc, #180]	; (800226c <MX_FDCAN3_Init+0xc0>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	609a      	str	r2, [r3, #8]
	hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 80021bc:	4b2b      	ldr	r3, [pc, #172]	; (800226c <MX_FDCAN3_Init+0xc0>)
 80021be:	2200      	movs	r2, #0
 80021c0:	60da      	str	r2, [r3, #12]
	hfdcan3.Init.AutoRetransmission = DISABLE;
 80021c2:	4b2a      	ldr	r3, [pc, #168]	; (800226c <MX_FDCAN3_Init+0xc0>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	741a      	strb	r2, [r3, #16]
	hfdcan3.Init.TransmitPause = DISABLE;
 80021c8:	4b28      	ldr	r3, [pc, #160]	; (800226c <MX_FDCAN3_Init+0xc0>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	745a      	strb	r2, [r3, #17]
	hfdcan3.Init.ProtocolException = DISABLE;
 80021ce:	4b27      	ldr	r3, [pc, #156]	; (800226c <MX_FDCAN3_Init+0xc0>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	749a      	strb	r2, [r3, #18]
	hfdcan3.Init.NominalPrescaler = 16;
 80021d4:	4b25      	ldr	r3, [pc, #148]	; (800226c <MX_FDCAN3_Init+0xc0>)
 80021d6:	2210      	movs	r2, #16
 80021d8:	615a      	str	r2, [r3, #20]
	hfdcan3.Init.NominalSyncJumpWidth = 1;
 80021da:	4b24      	ldr	r3, [pc, #144]	; (800226c <MX_FDCAN3_Init+0xc0>)
 80021dc:	2201      	movs	r2, #1
 80021de:	619a      	str	r2, [r3, #24]
	hfdcan3.Init.NominalTimeSeg1 = 2;
 80021e0:	4b22      	ldr	r3, [pc, #136]	; (800226c <MX_FDCAN3_Init+0xc0>)
 80021e2:	2202      	movs	r2, #2
 80021e4:	61da      	str	r2, [r3, #28]
	hfdcan3.Init.NominalTimeSeg2 = 2;
 80021e6:	4b21      	ldr	r3, [pc, #132]	; (800226c <MX_FDCAN3_Init+0xc0>)
 80021e8:	2202      	movs	r2, #2
 80021ea:	621a      	str	r2, [r3, #32]
	hfdcan3.Init.DataPrescaler = 1;
 80021ec:	4b1f      	ldr	r3, [pc, #124]	; (800226c <MX_FDCAN3_Init+0xc0>)
 80021ee:	2201      	movs	r2, #1
 80021f0:	625a      	str	r2, [r3, #36]	; 0x24
	hfdcan3.Init.DataSyncJumpWidth = 1;
 80021f2:	4b1e      	ldr	r3, [pc, #120]	; (800226c <MX_FDCAN3_Init+0xc0>)
 80021f4:	2201      	movs	r2, #1
 80021f6:	629a      	str	r2, [r3, #40]	; 0x28
	hfdcan3.Init.DataTimeSeg1 = 1;
 80021f8:	4b1c      	ldr	r3, [pc, #112]	; (800226c <MX_FDCAN3_Init+0xc0>)
 80021fa:	2201      	movs	r2, #1
 80021fc:	62da      	str	r2, [r3, #44]	; 0x2c
	hfdcan3.Init.DataTimeSeg2 = 1;
 80021fe:	4b1b      	ldr	r3, [pc, #108]	; (800226c <MX_FDCAN3_Init+0xc0>)
 8002200:	2201      	movs	r2, #1
 8002202:	631a      	str	r2, [r3, #48]	; 0x30
	hfdcan3.Init.MessageRAMOffset = 0;
 8002204:	4b19      	ldr	r3, [pc, #100]	; (800226c <MX_FDCAN3_Init+0xc0>)
 8002206:	2200      	movs	r2, #0
 8002208:	635a      	str	r2, [r3, #52]	; 0x34
	hfdcan3.Init.StdFiltersNbr = 0;
 800220a:	4b18      	ldr	r3, [pc, #96]	; (800226c <MX_FDCAN3_Init+0xc0>)
 800220c:	2200      	movs	r2, #0
 800220e:	639a      	str	r2, [r3, #56]	; 0x38
	hfdcan3.Init.ExtFiltersNbr = 0;
 8002210:	4b16      	ldr	r3, [pc, #88]	; (800226c <MX_FDCAN3_Init+0xc0>)
 8002212:	2200      	movs	r2, #0
 8002214:	63da      	str	r2, [r3, #60]	; 0x3c
	hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8002216:	4b15      	ldr	r3, [pc, #84]	; (800226c <MX_FDCAN3_Init+0xc0>)
 8002218:	2200      	movs	r2, #0
 800221a:	641a      	str	r2, [r3, #64]	; 0x40
	hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800221c:	4b13      	ldr	r3, [pc, #76]	; (800226c <MX_FDCAN3_Init+0xc0>)
 800221e:	2204      	movs	r2, #4
 8002220:	645a      	str	r2, [r3, #68]	; 0x44
	hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8002222:	4b12      	ldr	r3, [pc, #72]	; (800226c <MX_FDCAN3_Init+0xc0>)
 8002224:	2200      	movs	r2, #0
 8002226:	649a      	str	r2, [r3, #72]	; 0x48
	hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8002228:	4b10      	ldr	r3, [pc, #64]	; (800226c <MX_FDCAN3_Init+0xc0>)
 800222a:	2204      	movs	r2, #4
 800222c:	64da      	str	r2, [r3, #76]	; 0x4c
	hfdcan3.Init.RxBuffersNbr = 0;
 800222e:	4b0f      	ldr	r3, [pc, #60]	; (800226c <MX_FDCAN3_Init+0xc0>)
 8002230:	2200      	movs	r2, #0
 8002232:	651a      	str	r2, [r3, #80]	; 0x50
	hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8002234:	4b0d      	ldr	r3, [pc, #52]	; (800226c <MX_FDCAN3_Init+0xc0>)
 8002236:	2204      	movs	r2, #4
 8002238:	655a      	str	r2, [r3, #84]	; 0x54
	hfdcan3.Init.TxEventsNbr = 0;
 800223a:	4b0c      	ldr	r3, [pc, #48]	; (800226c <MX_FDCAN3_Init+0xc0>)
 800223c:	2200      	movs	r2, #0
 800223e:	659a      	str	r2, [r3, #88]	; 0x58
	hfdcan3.Init.TxBuffersNbr = 0;
 8002240:	4b0a      	ldr	r3, [pc, #40]	; (800226c <MX_FDCAN3_Init+0xc0>)
 8002242:	2200      	movs	r2, #0
 8002244:	65da      	str	r2, [r3, #92]	; 0x5c
	hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8002246:	4b09      	ldr	r3, [pc, #36]	; (800226c <MX_FDCAN3_Init+0xc0>)
 8002248:	2200      	movs	r2, #0
 800224a:	661a      	str	r2, [r3, #96]	; 0x60
	hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800224c:	4b07      	ldr	r3, [pc, #28]	; (800226c <MX_FDCAN3_Init+0xc0>)
 800224e:	2200      	movs	r2, #0
 8002250:	665a      	str	r2, [r3, #100]	; 0x64
	hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <MX_FDCAN3_Init+0xc0>)
 8002254:	2204      	movs	r2, #4
 8002256:	669a      	str	r2, [r3, #104]	; 0x68
	if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK) {
 8002258:	4804      	ldr	r0, [pc, #16]	; (800226c <MX_FDCAN3_Init+0xc0>)
 800225a:	f006 f8c3 	bl	80083e4 <HAL_FDCAN_Init>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <MX_FDCAN3_Init+0xbc>
		Error_Handler();
 8002264:	f000 fd9c 	bl	8002da0 <Error_Handler>
	}
	/* USER CODE BEGIN FDCAN3_Init 2 */

	/* USER CODE END FDCAN3_Init 2 */

}
 8002268:	bf00      	nop
 800226a:	bd80      	pop	{r7, pc}
 800226c:	24000e48 	.word	0x24000e48
 8002270:	4000d400 	.word	0x4000d400

08002274 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8002278:	4b1b      	ldr	r3, [pc, #108]	; (80022e8 <MX_I2C2_Init+0x74>)
 800227a:	4a1c      	ldr	r2, [pc, #112]	; (80022ec <MX_I2C2_Init+0x78>)
 800227c:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x20303E5D;
 800227e:	4b1a      	ldr	r3, [pc, #104]	; (80022e8 <MX_I2C2_Init+0x74>)
 8002280:	4a1b      	ldr	r2, [pc, #108]	; (80022f0 <MX_I2C2_Init+0x7c>)
 8002282:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 8002284:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <MX_I2C2_Init+0x74>)
 8002286:	2200      	movs	r2, #0
 8002288:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800228a:	4b17      	ldr	r3, [pc, #92]	; (80022e8 <MX_I2C2_Init+0x74>)
 800228c:	2201      	movs	r2, #1
 800228e:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002290:	4b15      	ldr	r3, [pc, #84]	; (80022e8 <MX_I2C2_Init+0x74>)
 8002292:	2200      	movs	r2, #0
 8002294:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 8002296:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <MX_I2C2_Init+0x74>)
 8002298:	2200      	movs	r2, #0
 800229a:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800229c:	4b12      	ldr	r3, [pc, #72]	; (80022e8 <MX_I2C2_Init+0x74>)
 800229e:	2200      	movs	r2, #0
 80022a0:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022a2:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <MX_I2C2_Init+0x74>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022a8:	4b0f      	ldr	r3, [pc, #60]	; (80022e8 <MX_I2C2_Init+0x74>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 80022ae:	480e      	ldr	r0, [pc, #56]	; (80022e8 <MX_I2C2_Init+0x74>)
 80022b0:	f006 fdd6 	bl	8008e60 <HAL_I2C_Init>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <MX_I2C2_Init+0x4a>
		Error_Handler();
 80022ba:	f000 fd71 	bl	8002da0 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 80022be:	2100      	movs	r1, #0
 80022c0:	4809      	ldr	r0, [pc, #36]	; (80022e8 <MX_I2C2_Init+0x74>)
 80022c2:	f006 fe77 	bl	8008fb4 <HAL_I2CEx_ConfigAnalogFilter>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <MX_I2C2_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 80022cc:	f000 fd68 	bl	8002da0 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 80022d0:	2100      	movs	r1, #0
 80022d2:	4805      	ldr	r0, [pc, #20]	; (80022e8 <MX_I2C2_Init+0x74>)
 80022d4:	f006 feb9 	bl	800904a <HAL_I2CEx_ConfigDigitalFilter>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <MX_I2C2_Init+0x6e>
		Error_Handler();
 80022de:	f000 fd5f 	bl	8002da0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	24000ee8 	.word	0x24000ee8
 80022ec:	40005800 	.word	0x40005800
 80022f0:	20303e5d 	.word	0x20303e5d

080022f4 <MX_SDMMC2_SD_Init>:
/**
 * @brief SDMMC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC2_SD_Init(void) {
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC2_Init 0 */

	/* USER CODE BEGIN SDMMC2_Init 1 */

	/* USER CODE END SDMMC2_Init 1 */
	hsd2.Instance = SDMMC2;
 80022f8:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <MX_SDMMC2_SD_Init+0x34>)
 80022fa:	4a0c      	ldr	r2, [pc, #48]	; (800232c <MX_SDMMC2_SD_Init+0x38>)
 80022fc:	601a      	str	r2, [r3, #0]
	hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80022fe:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <MX_SDMMC2_SD_Init+0x34>)
 8002300:	2200      	movs	r2, #0
 8002302:	605a      	str	r2, [r3, #4]
	hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002304:	4b08      	ldr	r3, [pc, #32]	; (8002328 <MX_SDMMC2_SD_Init+0x34>)
 8002306:	2200      	movs	r2, #0
 8002308:	609a      	str	r2, [r3, #8]
	hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800230a:	4b07      	ldr	r3, [pc, #28]	; (8002328 <MX_SDMMC2_SD_Init+0x34>)
 800230c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002310:	60da      	str	r2, [r3, #12]
	hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002312:	4b05      	ldr	r3, [pc, #20]	; (8002328 <MX_SDMMC2_SD_Init+0x34>)
 8002314:	2200      	movs	r2, #0
 8002316:	611a      	str	r2, [r3, #16]
	hsd2.Init.ClockDiv = 8;
 8002318:	4b03      	ldr	r3, [pc, #12]	; (8002328 <MX_SDMMC2_SD_Init+0x34>)
 800231a:	2208      	movs	r2, #8
 800231c:	615a      	str	r2, [r3, #20]
	/* USER CODE BEGIN SDMMC2_Init 2 */

	/* USER CODE END SDMMC2_Init 2 */

}
 800231e:	bf00      	nop
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	24000f3c 	.word	0x24000f3c
 800232c:	48022400 	.word	0x48022400

08002330 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8002334:	4b27      	ldr	r3, [pc, #156]	; (80023d4 <MX_SPI1_Init+0xa4>)
 8002336:	4a28      	ldr	r2, [pc, #160]	; (80023d8 <MX_SPI1_Init+0xa8>)
 8002338:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800233a:	4b26      	ldr	r3, [pc, #152]	; (80023d4 <MX_SPI1_Init+0xa4>)
 800233c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002340:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002342:	4b24      	ldr	r3, [pc, #144]	; (80023d4 <MX_SPI1_Init+0xa4>)
 8002344:	2200      	movs	r2, #0
 8002346:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002348:	4b22      	ldr	r3, [pc, #136]	; (80023d4 <MX_SPI1_Init+0xa4>)
 800234a:	2207      	movs	r2, #7
 800234c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800234e:	4b21      	ldr	r3, [pc, #132]	; (80023d4 <MX_SPI1_Init+0xa4>)
 8002350:	2200      	movs	r2, #0
 8002352:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002354:	4b1f      	ldr	r3, [pc, #124]	; (80023d4 <MX_SPI1_Init+0xa4>)
 8002356:	2200      	movs	r2, #0
 8002358:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800235a:	4b1e      	ldr	r3, [pc, #120]	; (80023d4 <MX_SPI1_Init+0xa4>)
 800235c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002360:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002362:	4b1c      	ldr	r3, [pc, #112]	; (80023d4 <MX_SPI1_Init+0xa4>)
 8002364:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002368:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800236a:	4b1a      	ldr	r3, [pc, #104]	; (80023d4 <MX_SPI1_Init+0xa4>)
 800236c:	2200      	movs	r2, #0
 800236e:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002370:	4b18      	ldr	r3, [pc, #96]	; (80023d4 <MX_SPI1_Init+0xa4>)
 8002372:	2200      	movs	r2, #0
 8002374:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002376:	4b17      	ldr	r3, [pc, #92]	; (80023d4 <MX_SPI1_Init+0xa4>)
 8002378:	2200      	movs	r2, #0
 800237a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 0x0;
 800237c:	4b15      	ldr	r3, [pc, #84]	; (80023d4 <MX_SPI1_Init+0xa4>)
 800237e:	2200      	movs	r2, #0
 8002380:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002382:	4b14      	ldr	r3, [pc, #80]	; (80023d4 <MX_SPI1_Init+0xa4>)
 8002384:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002388:	635a      	str	r2, [r3, #52]	; 0x34
	hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800238a:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <MX_SPI1_Init+0xa4>)
 800238c:	2200      	movs	r2, #0
 800238e:	639a      	str	r2, [r3, #56]	; 0x38
	hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002390:	4b10      	ldr	r3, [pc, #64]	; (80023d4 <MX_SPI1_Init+0xa4>)
 8002392:	2200      	movs	r2, #0
 8002394:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi1.Init.TxCRCInitializationPattern =
 8002396:	4b0f      	ldr	r3, [pc, #60]	; (80023d4 <MX_SPI1_Init+0xa4>)
 8002398:	2200      	movs	r2, #0
 800239a:	641a      	str	r2, [r3, #64]	; 0x40
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.RxCRCInitializationPattern =
 800239c:	4b0d      	ldr	r3, [pc, #52]	; (80023d4 <MX_SPI1_Init+0xa4>)
 800239e:	2200      	movs	r2, #0
 80023a0:	645a      	str	r2, [r3, #68]	; 0x44
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80023a2:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <MX_SPI1_Init+0xa4>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	649a      	str	r2, [r3, #72]	; 0x48
	hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80023a8:	4b0a      	ldr	r3, [pc, #40]	; (80023d4 <MX_SPI1_Init+0xa4>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80023ae:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <MX_SPI1_Init+0xa4>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	651a      	str	r2, [r3, #80]	; 0x50
	hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80023b4:	4b07      	ldr	r3, [pc, #28]	; (80023d4 <MX_SPI1_Init+0xa4>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	655a      	str	r2, [r3, #84]	; 0x54
	hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80023ba:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <MX_SPI1_Init+0xa4>)
 80023bc:	2200      	movs	r2, #0
 80023be:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80023c0:	4804      	ldr	r0, [pc, #16]	; (80023d4 <MX_SPI1_Init+0xa4>)
 80023c2:	f00d f9ab 	bl	800f71c <HAL_SPI_Init>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <MX_SPI1_Init+0xa0>
		Error_Handler();
 80023cc:	f000 fce8 	bl	8002da0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80023d0:	bf00      	nop
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	24000fb8 	.word	0x24000fb8
 80023d8:	40013000 	.word	0x40013000

080023dc <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 80023e0:	4b27      	ldr	r3, [pc, #156]	; (8002480 <MX_SPI2_Init+0xa4>)
 80023e2:	4a28      	ldr	r2, [pc, #160]	; (8002484 <MX_SPI2_Init+0xa8>)
 80023e4:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80023e6:	4b26      	ldr	r3, [pc, #152]	; (8002480 <MX_SPI2_Init+0xa4>)
 80023e8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80023ec:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80023ee:	4b24      	ldr	r3, [pc, #144]	; (8002480 <MX_SPI2_Init+0xa4>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80023f4:	4b22      	ldr	r3, [pc, #136]	; (8002480 <MX_SPI2_Init+0xa4>)
 80023f6:	2207      	movs	r2, #7
 80023f8:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023fa:	4b21      	ldr	r3, [pc, #132]	; (8002480 <MX_SPI2_Init+0xa4>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002400:	4b1f      	ldr	r3, [pc, #124]	; (8002480 <MX_SPI2_Init+0xa4>)
 8002402:	2200      	movs	r2, #0
 8002404:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8002406:	4b1e      	ldr	r3, [pc, #120]	; (8002480 <MX_SPI2_Init+0xa4>)
 8002408:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800240c:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800240e:	4b1c      	ldr	r3, [pc, #112]	; (8002480 <MX_SPI2_Init+0xa4>)
 8002410:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002414:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002416:	4b1a      	ldr	r3, [pc, #104]	; (8002480 <MX_SPI2_Init+0xa4>)
 8002418:	2200      	movs	r2, #0
 800241a:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800241c:	4b18      	ldr	r3, [pc, #96]	; (8002480 <MX_SPI2_Init+0xa4>)
 800241e:	2200      	movs	r2, #0
 8002420:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002422:	4b17      	ldr	r3, [pc, #92]	; (8002480 <MX_SPI2_Init+0xa4>)
 8002424:	2200      	movs	r2, #0
 8002426:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 0x0;
 8002428:	4b15      	ldr	r3, [pc, #84]	; (8002480 <MX_SPI2_Init+0xa4>)
 800242a:	2200      	movs	r2, #0
 800242c:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800242e:	4b14      	ldr	r3, [pc, #80]	; (8002480 <MX_SPI2_Init+0xa4>)
 8002430:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002434:	635a      	str	r2, [r3, #52]	; 0x34
	hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002436:	4b12      	ldr	r3, [pc, #72]	; (8002480 <MX_SPI2_Init+0xa4>)
 8002438:	2200      	movs	r2, #0
 800243a:	639a      	str	r2, [r3, #56]	; 0x38
	hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800243c:	4b10      	ldr	r3, [pc, #64]	; (8002480 <MX_SPI2_Init+0xa4>)
 800243e:	2200      	movs	r2, #0
 8002440:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi2.Init.TxCRCInitializationPattern =
 8002442:	4b0f      	ldr	r3, [pc, #60]	; (8002480 <MX_SPI2_Init+0xa4>)
 8002444:	2200      	movs	r2, #0
 8002446:	641a      	str	r2, [r3, #64]	; 0x40
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.RxCRCInitializationPattern =
 8002448:	4b0d      	ldr	r3, [pc, #52]	; (8002480 <MX_SPI2_Init+0xa4>)
 800244a:	2200      	movs	r2, #0
 800244c:	645a      	str	r2, [r3, #68]	; 0x44
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800244e:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <MX_SPI2_Init+0xa4>)
 8002450:	2200      	movs	r2, #0
 8002452:	649a      	str	r2, [r3, #72]	; 0x48
	hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002454:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <MX_SPI2_Init+0xa4>)
 8002456:	2200      	movs	r2, #0
 8002458:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800245a:	4b09      	ldr	r3, [pc, #36]	; (8002480 <MX_SPI2_Init+0xa4>)
 800245c:	2200      	movs	r2, #0
 800245e:	651a      	str	r2, [r3, #80]	; 0x50
	hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002460:	4b07      	ldr	r3, [pc, #28]	; (8002480 <MX_SPI2_Init+0xa4>)
 8002462:	2200      	movs	r2, #0
 8002464:	655a      	str	r2, [r3, #84]	; 0x54
	hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <MX_SPI2_Init+0xa4>)
 8002468:	2200      	movs	r2, #0
 800246a:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 800246c:	4804      	ldr	r0, [pc, #16]	; (8002480 <MX_SPI2_Init+0xa4>)
 800246e:	f00d f955 	bl	800f71c <HAL_SPI_Init>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <MX_SPI2_Init+0xa0>
		Error_Handler();
 8002478:	f000 fc92 	bl	8002da0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 800247c:	bf00      	nop
 800247e:	bd80      	pop	{r7, pc}
 8002480:	24001040 	.word	0x24001040
 8002484:	40003800 	.word	0x40003800

08002488 <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 800248c:	4b27      	ldr	r3, [pc, #156]	; (800252c <MX_SPI3_Init+0xa4>)
 800248e:	4a28      	ldr	r2, [pc, #160]	; (8002530 <MX_SPI3_Init+0xa8>)
 8002490:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 8002492:	4b26      	ldr	r3, [pc, #152]	; (800252c <MX_SPI3_Init+0xa4>)
 8002494:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002498:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800249a:	4b24      	ldr	r3, [pc, #144]	; (800252c <MX_SPI3_Init+0xa4>)
 800249c:	2200      	movs	r2, #0
 800249e:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80024a0:	4b22      	ldr	r3, [pc, #136]	; (800252c <MX_SPI3_Init+0xa4>)
 80024a2:	2207      	movs	r2, #7
 80024a4:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80024a6:	4b21      	ldr	r3, [pc, #132]	; (800252c <MX_SPI3_Init+0xa4>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80024ac:	4b1f      	ldr	r3, [pc, #124]	; (800252c <MX_SPI3_Init+0xa4>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 80024b2:	4b1e      	ldr	r3, [pc, #120]	; (800252c <MX_SPI3_Init+0xa4>)
 80024b4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80024b8:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80024ba:	4b1c      	ldr	r3, [pc, #112]	; (800252c <MX_SPI3_Init+0xa4>)
 80024bc:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80024c0:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80024c2:	4b1a      	ldr	r3, [pc, #104]	; (800252c <MX_SPI3_Init+0xa4>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80024c8:	4b18      	ldr	r3, [pc, #96]	; (800252c <MX_SPI3_Init+0xa4>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024ce:	4b17      	ldr	r3, [pc, #92]	; (800252c <MX_SPI3_Init+0xa4>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 0x0;
 80024d4:	4b15      	ldr	r3, [pc, #84]	; (800252c <MX_SPI3_Init+0xa4>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80024da:	4b14      	ldr	r3, [pc, #80]	; (800252c <MX_SPI3_Init+0xa4>)
 80024dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024e0:	635a      	str	r2, [r3, #52]	; 0x34
	hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80024e2:	4b12      	ldr	r3, [pc, #72]	; (800252c <MX_SPI3_Init+0xa4>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	639a      	str	r2, [r3, #56]	; 0x38
	hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80024e8:	4b10      	ldr	r3, [pc, #64]	; (800252c <MX_SPI3_Init+0xa4>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi3.Init.TxCRCInitializationPattern =
 80024ee:	4b0f      	ldr	r3, [pc, #60]	; (800252c <MX_SPI3_Init+0xa4>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	641a      	str	r2, [r3, #64]	; 0x40
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi3.Init.RxCRCInitializationPattern =
 80024f4:	4b0d      	ldr	r3, [pc, #52]	; (800252c <MX_SPI3_Init+0xa4>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	645a      	str	r2, [r3, #68]	; 0x44
	SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80024fa:	4b0c      	ldr	r3, [pc, #48]	; (800252c <MX_SPI3_Init+0xa4>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	649a      	str	r2, [r3, #72]	; 0x48
	hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002500:	4b0a      	ldr	r3, [pc, #40]	; (800252c <MX_SPI3_Init+0xa4>)
 8002502:	2200      	movs	r2, #0
 8002504:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002506:	4b09      	ldr	r3, [pc, #36]	; (800252c <MX_SPI3_Init+0xa4>)
 8002508:	2200      	movs	r2, #0
 800250a:	651a      	str	r2, [r3, #80]	; 0x50
	hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800250c:	4b07      	ldr	r3, [pc, #28]	; (800252c <MX_SPI3_Init+0xa4>)
 800250e:	2200      	movs	r2, #0
 8002510:	655a      	str	r2, [r3, #84]	; 0x54
	hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002512:	4b06      	ldr	r3, [pc, #24]	; (800252c <MX_SPI3_Init+0xa4>)
 8002514:	2200      	movs	r2, #0
 8002516:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8002518:	4804      	ldr	r0, [pc, #16]	; (800252c <MX_SPI3_Init+0xa4>)
 800251a:	f00d f8ff 	bl	800f71c <HAL_SPI_Init>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <MX_SPI3_Init+0xa0>
		Error_Handler();
 8002524:	f000 fc3c 	bl	8002da0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 8002528:	bf00      	nop
 800252a:	bd80      	pop	{r7, pc}
 800252c:	240010c8 	.word	0x240010c8
 8002530:	40003c00 	.word	0x40003c00

08002534 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8002534:	b580      	push	{r7, lr}
 8002536:	b08a      	sub	sp, #40	; 0x28
 8002538:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800253a:	f107 031c 	add.w	r3, r7, #28
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	605a      	str	r2, [r3, #4]
 8002544:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002546:	463b      	mov	r3, r7
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	60da      	str	r2, [r3, #12]
 8002552:	611a      	str	r2, [r3, #16]
 8002554:	615a      	str	r2, [r3, #20]
 8002556:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002558:	4b21      	ldr	r3, [pc, #132]	; (80025e0 <MX_TIM2_Init+0xac>)
 800255a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800255e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8002560:	4b1f      	ldr	r3, [pc, #124]	; (80025e0 <MX_TIM2_Init+0xac>)
 8002562:	2200      	movs	r2, #0
 8002564:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002566:	4b1e      	ldr	r3, [pc, #120]	; (80025e0 <MX_TIM2_Init+0xac>)
 8002568:	2200      	movs	r2, #0
 800256a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 90;
 800256c:	4b1c      	ldr	r3, [pc, #112]	; (80025e0 <MX_TIM2_Init+0xac>)
 800256e:	225a      	movs	r2, #90	; 0x5a
 8002570:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002572:	4b1b      	ldr	r3, [pc, #108]	; (80025e0 <MX_TIM2_Init+0xac>)
 8002574:	2200      	movs	r2, #0
 8002576:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002578:	4b19      	ldr	r3, [pc, #100]	; (80025e0 <MX_TIM2_Init+0xac>)
 800257a:	2200      	movs	r2, #0
 800257c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 800257e:	4818      	ldr	r0, [pc, #96]	; (80025e0 <MX_TIM2_Init+0xac>)
 8002580:	f00d febc 	bl	80102fc <HAL_TIM_PWM_Init>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <MX_TIM2_Init+0x5a>
		Error_Handler();
 800258a:	f000 fc09 	bl	8002da0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800258e:	2300      	movs	r3, #0
 8002590:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002592:	2300      	movs	r3, #0
 8002594:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002596:	f107 031c 	add.w	r3, r7, #28
 800259a:	4619      	mov	r1, r3
 800259c:	4810      	ldr	r0, [pc, #64]	; (80025e0 <MX_TIM2_Init+0xac>)
 800259e:	f00f f943 	bl	8011828 <HAL_TIMEx_MasterConfigSynchronization>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <MX_TIM2_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 80025a8:	f000 fbfa 	bl	8002da0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025ac:	2360      	movs	r3, #96	; 0x60
 80025ae:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80025b0:	2300      	movs	r3, #0
 80025b2:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025b4:	2300      	movs	r3, #0
 80025b6:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025b8:	2300      	movs	r3, #0
 80025ba:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 80025bc:	463b      	mov	r3, r7
 80025be:	2208      	movs	r2, #8
 80025c0:	4619      	mov	r1, r3
 80025c2:	4807      	ldr	r0, [pc, #28]	; (80025e0 <MX_TIM2_Init+0xac>)
 80025c4:	f00e fb62 	bl	8010c8c <HAL_TIM_PWM_ConfigChannel>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <MX_TIM2_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 80025ce:	f000 fbe7 	bl	8002da0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80025d2:	4803      	ldr	r0, [pc, #12]	; (80025e0 <MX_TIM2_Init+0xac>)
 80025d4:	f001 f91a 	bl	800380c <HAL_TIM_MspPostInit>

}
 80025d8:	bf00      	nop
 80025da:	3728      	adds	r7, #40	; 0x28
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	24001150 	.word	0x24001150

080025e4 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b08a      	sub	sp, #40	; 0x28
 80025e8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80025ea:	f107 031c 	add.w	r3, r7, #28
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	605a      	str	r2, [r3, #4]
 80025f4:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80025f6:	463b      	mov	r3, r7
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
 80025fc:	605a      	str	r2, [r3, #4]
 80025fe:	609a      	str	r2, [r3, #8]
 8002600:	60da      	str	r2, [r3, #12]
 8002602:	611a      	str	r2, [r3, #16]
 8002604:	615a      	str	r2, [r3, #20]
 8002606:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002608:	4b26      	ldr	r3, [pc, #152]	; (80026a4 <MX_TIM3_Init+0xc0>)
 800260a:	4a27      	ldr	r2, [pc, #156]	; (80026a8 <MX_TIM3_Init+0xc4>)
 800260c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800260e:	4b25      	ldr	r3, [pc, #148]	; (80026a4 <MX_TIM3_Init+0xc0>)
 8002610:	2200      	movs	r2, #0
 8002612:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002614:	4b23      	ldr	r3, [pc, #140]	; (80026a4 <MX_TIM3_Init+0xc0>)
 8002616:	2200      	movs	r2, #0
 8002618:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 90;
 800261a:	4b22      	ldr	r3, [pc, #136]	; (80026a4 <MX_TIM3_Init+0xc0>)
 800261c:	225a      	movs	r2, #90	; 0x5a
 800261e:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002620:	4b20      	ldr	r3, [pc, #128]	; (80026a4 <MX_TIM3_Init+0xc0>)
 8002622:	2200      	movs	r2, #0
 8002624:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002626:	4b1f      	ldr	r3, [pc, #124]	; (80026a4 <MX_TIM3_Init+0xc0>)
 8002628:	2200      	movs	r2, #0
 800262a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 800262c:	481d      	ldr	r0, [pc, #116]	; (80026a4 <MX_TIM3_Init+0xc0>)
 800262e:	f00d fe65 	bl	80102fc <HAL_TIM_PWM_Init>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <MX_TIM3_Init+0x58>
		Error_Handler();
 8002638:	f000 fbb2 	bl	8002da0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800263c:	2300      	movs	r3, #0
 800263e:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002640:	2300      	movs	r3, #0
 8002642:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8002644:	f107 031c 	add.w	r3, r7, #28
 8002648:	4619      	mov	r1, r3
 800264a:	4816      	ldr	r0, [pc, #88]	; (80026a4 <MX_TIM3_Init+0xc0>)
 800264c:	f00f f8ec 	bl	8011828 <HAL_TIMEx_MasterConfigSynchronization>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <MX_TIM3_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 8002656:	f000 fba3 	bl	8002da0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800265a:	2360      	movs	r3, #96	; 0x60
 800265c:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 800265e:	2300      	movs	r3, #0
 8002660:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002662:	2300      	movs	r3, #0
 8002664:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002666:	2300      	movs	r3, #0
 8002668:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 800266a:	463b      	mov	r3, r7
 800266c:	2200      	movs	r2, #0
 800266e:	4619      	mov	r1, r3
 8002670:	480c      	ldr	r0, [pc, #48]	; (80026a4 <MX_TIM3_Init+0xc0>)
 8002672:	f00e fb0b 	bl	8010c8c <HAL_TIM_PWM_ConfigChannel>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <MX_TIM3_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 800267c:	f000 fb90 	bl	8002da0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8002680:	463b      	mov	r3, r7
 8002682:	2204      	movs	r2, #4
 8002684:	4619      	mov	r1, r3
 8002686:	4807      	ldr	r0, [pc, #28]	; (80026a4 <MX_TIM3_Init+0xc0>)
 8002688:	f00e fb00 	bl	8010c8c <HAL_TIM_PWM_ConfigChannel>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <MX_TIM3_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 8002692:	f000 fb85 	bl	8002da0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8002696:	4803      	ldr	r0, [pc, #12]	; (80026a4 <MX_TIM3_Init+0xc0>)
 8002698:	f001 f8b8 	bl	800380c <HAL_TIM_MspPostInit>

}
 800269c:	bf00      	nop
 800269e:	3728      	adds	r7, #40	; 0x28
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	2400119c 	.word	0x2400119c
 80026a8:	40000400 	.word	0x40000400

080026ac <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b08a      	sub	sp, #40	; 0x28
 80026b0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80026b2:	f107 031c 	add.w	r3, r7, #28
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	605a      	str	r2, [r3, #4]
 80026bc:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80026be:	463b      	mov	r3, r7
 80026c0:	2200      	movs	r2, #0
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	605a      	str	r2, [r3, #4]
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	60da      	str	r2, [r3, #12]
 80026ca:	611a      	str	r2, [r3, #16]
 80026cc:	615a      	str	r2, [r3, #20]
 80026ce:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80026d0:	4b32      	ldr	r3, [pc, #200]	; (800279c <MX_TIM4_Init+0xf0>)
 80026d2:	4a33      	ldr	r2, [pc, #204]	; (80027a0 <MX_TIM4_Init+0xf4>)
 80026d4:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 29;
 80026d6:	4b31      	ldr	r3, [pc, #196]	; (800279c <MX_TIM4_Init+0xf0>)
 80026d8:	221d      	movs	r2, #29
 80026da:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026dc:	4b2f      	ldr	r3, [pc, #188]	; (800279c <MX_TIM4_Init+0xf0>)
 80026de:	2200      	movs	r2, #0
 80026e0:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 9999;
 80026e2:	4b2e      	ldr	r3, [pc, #184]	; (800279c <MX_TIM4_Init+0xf0>)
 80026e4:	f242 720f 	movw	r2, #9999	; 0x270f
 80026e8:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026ea:	4b2c      	ldr	r3, [pc, #176]	; (800279c <MX_TIM4_Init+0xf0>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026f0:	4b2a      	ldr	r3, [pc, #168]	; (800279c <MX_TIM4_Init+0xf0>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 80026f6:	4829      	ldr	r0, [pc, #164]	; (800279c <MX_TIM4_Init+0xf0>)
 80026f8:	f00d fe00 	bl	80102fc <HAL_TIM_PWM_Init>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <MX_TIM4_Init+0x5a>
		Error_Handler();
 8002702:	f000 fb4d 	bl	8002da0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002706:	2300      	movs	r3, #0
 8002708:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800270a:	2300      	movs	r3, #0
 800270c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 800270e:	f107 031c 	add.w	r3, r7, #28
 8002712:	4619      	mov	r1, r3
 8002714:	4821      	ldr	r0, [pc, #132]	; (800279c <MX_TIM4_Init+0xf0>)
 8002716:	f00f f887 	bl	8011828 <HAL_TIMEx_MasterConfigSynchronization>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <MX_TIM4_Init+0x78>
			!= HAL_OK) {
		Error_Handler();
 8002720:	f000 fb3e 	bl	8002da0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002724:	2360      	movs	r3, #96	; 0x60
 8002726:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8002728:	2300      	movs	r3, #0
 800272a:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800272c:	2300      	movs	r3, #0
 800272e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002730:	2300      	movs	r3, #0
 8002732:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 8002734:	463b      	mov	r3, r7
 8002736:	2200      	movs	r2, #0
 8002738:	4619      	mov	r1, r3
 800273a:	4818      	ldr	r0, [pc, #96]	; (800279c <MX_TIM4_Init+0xf0>)
 800273c:	f00e faa6 	bl	8010c8c <HAL_TIM_PWM_ConfigChannel>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <MX_TIM4_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 8002746:	f000 fb2b 	bl	8002da0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2)
 800274a:	463b      	mov	r3, r7
 800274c:	2204      	movs	r2, #4
 800274e:	4619      	mov	r1, r3
 8002750:	4812      	ldr	r0, [pc, #72]	; (800279c <MX_TIM4_Init+0xf0>)
 8002752:	f00e fa9b 	bl	8010c8c <HAL_TIM_PWM_ConfigChannel>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <MX_TIM4_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 800275c:	f000 fb20 	bl	8002da0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 8002760:	463b      	mov	r3, r7
 8002762:	2208      	movs	r2, #8
 8002764:	4619      	mov	r1, r3
 8002766:	480d      	ldr	r0, [pc, #52]	; (800279c <MX_TIM4_Init+0xf0>)
 8002768:	f00e fa90 	bl	8010c8c <HAL_TIM_PWM_ConfigChannel>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <MX_TIM4_Init+0xca>
			!= HAL_OK) {
		Error_Handler();
 8002772:	f000 fb15 	bl	8002da0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4)
 8002776:	463b      	mov	r3, r7
 8002778:	220c      	movs	r2, #12
 800277a:	4619      	mov	r1, r3
 800277c:	4807      	ldr	r0, [pc, #28]	; (800279c <MX_TIM4_Init+0xf0>)
 800277e:	f00e fa85 	bl	8010c8c <HAL_TIM_PWM_ConfigChannel>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <MX_TIM4_Init+0xe0>
			!= HAL_OK) {
		Error_Handler();
 8002788:	f000 fb0a 	bl	8002da0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 800278c:	4803      	ldr	r0, [pc, #12]	; (800279c <MX_TIM4_Init+0xf0>)
 800278e:	f001 f83d 	bl	800380c <HAL_TIM_MspPostInit>

}
 8002792:	bf00      	nop
 8002794:	3728      	adds	r7, #40	; 0x28
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	240011e8 	.word	0x240011e8
 80027a0:	40000800 	.word	0x40000800

080027a4 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08a      	sub	sp, #40	; 0x28
 80027a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80027aa:	f107 031c 	add.w	r3, r7, #28
 80027ae:	2200      	movs	r2, #0
 80027b0:	601a      	str	r2, [r3, #0]
 80027b2:	605a      	str	r2, [r3, #4]
 80027b4:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80027b6:	463b      	mov	r3, r7
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	60da      	str	r2, [r3, #12]
 80027c2:	611a      	str	r2, [r3, #16]
 80027c4:	615a      	str	r2, [r3, #20]
 80027c6:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 80027c8:	4b21      	ldr	r3, [pc, #132]	; (8002850 <MX_TIM5_Init+0xac>)
 80027ca:	4a22      	ldr	r2, [pc, #136]	; (8002854 <MX_TIM5_Init+0xb0>)
 80027cc:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 80027ce:	4b20      	ldr	r3, [pc, #128]	; (8002850 <MX_TIM5_Init+0xac>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027d4:	4b1e      	ldr	r3, [pc, #120]	; (8002850 <MX_TIM5_Init+0xac>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 90;
 80027da:	4b1d      	ldr	r3, [pc, #116]	; (8002850 <MX_TIM5_Init+0xac>)
 80027dc:	225a      	movs	r2, #90	; 0x5a
 80027de:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027e0:	4b1b      	ldr	r3, [pc, #108]	; (8002850 <MX_TIM5_Init+0xac>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027e6:	4b1a      	ldr	r3, [pc, #104]	; (8002850 <MX_TIM5_Init+0xac>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim5) != HAL_OK) {
 80027ec:	4818      	ldr	r0, [pc, #96]	; (8002850 <MX_TIM5_Init+0xac>)
 80027ee:	f00d fd85 	bl	80102fc <HAL_TIM_PWM_Init>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <MX_TIM5_Init+0x58>
		Error_Handler();
 80027f8:	f000 fad2 	bl	8002da0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027fc:	2300      	movs	r3, #0
 80027fe:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002800:	2300      	movs	r3, #0
 8002802:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 8002804:	f107 031c 	add.w	r3, r7, #28
 8002808:	4619      	mov	r1, r3
 800280a:	4811      	ldr	r0, [pc, #68]	; (8002850 <MX_TIM5_Init+0xac>)
 800280c:	f00f f80c 	bl	8011828 <HAL_TIMEx_MasterConfigSynchronization>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <MX_TIM5_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 8002816:	f000 fac3 	bl	8002da0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800281a:	2360      	movs	r3, #96	; 0x60
 800281c:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 800281e:	2300      	movs	r3, #0
 8002820:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002822:	2300      	movs	r3, #0
 8002824:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002826:	2300      	movs	r3, #0
 8002828:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4)
 800282a:	463b      	mov	r3, r7
 800282c:	220c      	movs	r2, #12
 800282e:	4619      	mov	r1, r3
 8002830:	4807      	ldr	r0, [pc, #28]	; (8002850 <MX_TIM5_Init+0xac>)
 8002832:	f00e fa2b 	bl	8010c8c <HAL_TIM_PWM_ConfigChannel>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <MX_TIM5_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 800283c:	f000 fab0 	bl	8002da0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */
	HAL_TIM_MspPostInit(&htim5);
 8002840:	4803      	ldr	r0, [pc, #12]	; (8002850 <MX_TIM5_Init+0xac>)
 8002842:	f000 ffe3 	bl	800380c <HAL_TIM_MspPostInit>

}
 8002846:	bf00      	nop
 8002848:	3728      	adds	r7, #40	; 0x28
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	24001234 	.word	0x24001234
 8002854:	40000c00 	.word	0x40000c00

08002858 <MX_TIM13_Init>:
/**
 * @brief TIM13 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM13_Init(void) {
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
	/* USER CODE END TIM13_Init 0 */

	/* USER CODE BEGIN TIM13_Init 1 */

	/* USER CODE END TIM13_Init 1 */
	htim13.Instance = TIM13;
 800285c:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <MX_TIM13_Init+0x40>)
 800285e:	4a0f      	ldr	r2, [pc, #60]	; (800289c <MX_TIM13_Init+0x44>)
 8002860:	601a      	str	r2, [r3, #0]
	htim13.Init.Prescaler = 99;
 8002862:	4b0d      	ldr	r3, [pc, #52]	; (8002898 <MX_TIM13_Init+0x40>)
 8002864:	2263      	movs	r2, #99	; 0x63
 8002866:	605a      	str	r2, [r3, #4]
	htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002868:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <MX_TIM13_Init+0x40>)
 800286a:	2200      	movs	r2, #0
 800286c:	609a      	str	r2, [r3, #8]
	htim13.Init.Period = 65535;
 800286e:	4b0a      	ldr	r3, [pc, #40]	; (8002898 <MX_TIM13_Init+0x40>)
 8002870:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002874:	60da      	str	r2, [r3, #12]
	htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002876:	4b08      	ldr	r3, [pc, #32]	; (8002898 <MX_TIM13_Init+0x40>)
 8002878:	2200      	movs	r2, #0
 800287a:	611a      	str	r2, [r3, #16]
	htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800287c:	4b06      	ldr	r3, [pc, #24]	; (8002898 <MX_TIM13_Init+0x40>)
 800287e:	2200      	movs	r2, #0
 8002880:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim13) != HAL_OK) {
 8002882:	4805      	ldr	r0, [pc, #20]	; (8002898 <MX_TIM13_Init+0x40>)
 8002884:	f00d fce3 	bl	801024e <HAL_TIM_Base_Init>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <MX_TIM13_Init+0x3a>
		Error_Handler();
 800288e:	f000 fa87 	bl	8002da0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM13_Init 2 */

	/* USER CODE END TIM13_Init 2 */

}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	24001280 	.word	0x24001280
 800289c:	40001c00 	.word	0x40001c00

080028a0 <MX_TIM14_Init>:
/**
 * @brief TIM14 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM14_Init(void) {
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
	/* USER CODE END TIM14_Init 0 */

	/* USER CODE BEGIN TIM14_Init 1 */

	/* USER CODE END TIM14_Init 1 */
	htim14.Instance = TIM14;
 80028a4:	4b0e      	ldr	r3, [pc, #56]	; (80028e0 <MX_TIM14_Init+0x40>)
 80028a6:	4a0f      	ldr	r2, [pc, #60]	; (80028e4 <MX_TIM14_Init+0x44>)
 80028a8:	601a      	str	r2, [r3, #0]
	htim14.Init.Prescaler = 99;
 80028aa:	4b0d      	ldr	r3, [pc, #52]	; (80028e0 <MX_TIM14_Init+0x40>)
 80028ac:	2263      	movs	r2, #99	; 0x63
 80028ae:	605a      	str	r2, [r3, #4]
	htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028b0:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <MX_TIM14_Init+0x40>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	609a      	str	r2, [r3, #8]
	htim14.Init.Period = 65535;
 80028b6:	4b0a      	ldr	r3, [pc, #40]	; (80028e0 <MX_TIM14_Init+0x40>)
 80028b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028bc:	60da      	str	r2, [r3, #12]
	htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028be:	4b08      	ldr	r3, [pc, #32]	; (80028e0 <MX_TIM14_Init+0x40>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	611a      	str	r2, [r3, #16]
	htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028c4:	4b06      	ldr	r3, [pc, #24]	; (80028e0 <MX_TIM14_Init+0x40>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim14) != HAL_OK) {
 80028ca:	4805      	ldr	r0, [pc, #20]	; (80028e0 <MX_TIM14_Init+0x40>)
 80028cc:	f00d fcbf 	bl	801024e <HAL_TIM_Base_Init>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <MX_TIM14_Init+0x3a>
		Error_Handler();
 80028d6:	f000 fa63 	bl	8002da0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM14_Init 2 */

	/* USER CODE END TIM14_Init 2 */

}
 80028da:	bf00      	nop
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	240012cc 	.word	0x240012cc
 80028e4:	40002000 	.word	0x40002000

080028e8 <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 80028ec:	4b22      	ldr	r3, [pc, #136]	; (8002978 <MX_UART4_Init+0x90>)
 80028ee:	4a23      	ldr	r2, [pc, #140]	; (800297c <MX_UART4_Init+0x94>)
 80028f0:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 80028f2:	4b21      	ldr	r3, [pc, #132]	; (8002978 <MX_UART4_Init+0x90>)
 80028f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028f8:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80028fa:	4b1f      	ldr	r3, [pc, #124]	; (8002978 <MX_UART4_Init+0x90>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8002900:	4b1d      	ldr	r3, [pc, #116]	; (8002978 <MX_UART4_Init+0x90>)
 8002902:	2200      	movs	r2, #0
 8002904:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8002906:	4b1c      	ldr	r3, [pc, #112]	; (8002978 <MX_UART4_Init+0x90>)
 8002908:	2200      	movs	r2, #0
 800290a:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 800290c:	4b1a      	ldr	r3, [pc, #104]	; (8002978 <MX_UART4_Init+0x90>)
 800290e:	220c      	movs	r2, #12
 8002910:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002912:	4b19      	ldr	r3, [pc, #100]	; (8002978 <MX_UART4_Init+0x90>)
 8002914:	2200      	movs	r2, #0
 8002916:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002918:	4b17      	ldr	r3, [pc, #92]	; (8002978 <MX_UART4_Init+0x90>)
 800291a:	2200      	movs	r2, #0
 800291c:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800291e:	4b16      	ldr	r3, [pc, #88]	; (8002978 <MX_UART4_Init+0x90>)
 8002920:	2200      	movs	r2, #0
 8002922:	621a      	str	r2, [r3, #32]
	huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002924:	4b14      	ldr	r3, [pc, #80]	; (8002978 <MX_UART4_Init+0x90>)
 8002926:	2200      	movs	r2, #0
 8002928:	625a      	str	r2, [r3, #36]	; 0x24
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800292a:	4b13      	ldr	r3, [pc, #76]	; (8002978 <MX_UART4_Init+0x90>)
 800292c:	2200      	movs	r2, #0
 800292e:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 8002930:	4811      	ldr	r0, [pc, #68]	; (8002978 <MX_UART4_Init+0x90>)
 8002932:	f00f f833 	bl	801199c <HAL_UART_Init>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <MX_UART4_Init+0x58>
		Error_Handler();
 800293c:	f000 fa30 	bl	8002da0 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8)
 8002940:	2100      	movs	r1, #0
 8002942:	480d      	ldr	r0, [pc, #52]	; (8002978 <MX_UART4_Init+0x90>)
 8002944:	f010 f939 	bl	8012bba <HAL_UARTEx_SetTxFifoThreshold>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <MX_UART4_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 800294e:	f000 fa27 	bl	8002da0 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8)
 8002952:	2100      	movs	r1, #0
 8002954:	4808      	ldr	r0, [pc, #32]	; (8002978 <MX_UART4_Init+0x90>)
 8002956:	f010 f96e 	bl	8012c36 <HAL_UARTEx_SetRxFifoThreshold>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <MX_UART4_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8002960:	f000 fa1e 	bl	8002da0 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK) {
 8002964:	4804      	ldr	r0, [pc, #16]	; (8002978 <MX_UART4_Init+0x90>)
 8002966:	f010 f8ef 	bl	8012b48 <HAL_UARTEx_DisableFifoMode>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <MX_UART4_Init+0x8c>
		Error_Handler();
 8002970:	f000 fa16 	bl	8002da0 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8002974:	bf00      	nop
 8002976:	bd80      	pop	{r7, pc}
 8002978:	24001570 	.word	0x24001570
 800297c:	40004c00 	.word	0x40004c00

08002980 <MX_USART6_UART_Init>:
/**
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void) {
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8002984:	4b22      	ldr	r3, [pc, #136]	; (8002a10 <MX_USART6_UART_Init+0x90>)
 8002986:	4a23      	ldr	r2, [pc, #140]	; (8002a14 <MX_USART6_UART_Init+0x94>)
 8002988:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 800298a:	4b21      	ldr	r3, [pc, #132]	; (8002a10 <MX_USART6_UART_Init+0x90>)
 800298c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002990:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002992:	4b1f      	ldr	r3, [pc, #124]	; (8002a10 <MX_USART6_UART_Init+0x90>)
 8002994:	2200      	movs	r2, #0
 8002996:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8002998:	4b1d      	ldr	r3, [pc, #116]	; (8002a10 <MX_USART6_UART_Init+0x90>)
 800299a:	2200      	movs	r2, #0
 800299c:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 800299e:	4b1c      	ldr	r3, [pc, #112]	; (8002a10 <MX_USART6_UART_Init+0x90>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 80029a4:	4b1a      	ldr	r3, [pc, #104]	; (8002a10 <MX_USART6_UART_Init+0x90>)
 80029a6:	220c      	movs	r2, #12
 80029a8:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029aa:	4b19      	ldr	r3, [pc, #100]	; (8002a10 <MX_USART6_UART_Init+0x90>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80029b0:	4b17      	ldr	r3, [pc, #92]	; (8002a10 <MX_USART6_UART_Init+0x90>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	61da      	str	r2, [r3, #28]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029b6:	4b16      	ldr	r3, [pc, #88]	; (8002a10 <MX_USART6_UART_Init+0x90>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	621a      	str	r2, [r3, #32]
	huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80029bc:	4b14      	ldr	r3, [pc, #80]	; (8002a10 <MX_USART6_UART_Init+0x90>)
 80029be:	2200      	movs	r2, #0
 80029c0:	625a      	str	r2, [r3, #36]	; 0x24
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029c2:	4b13      	ldr	r3, [pc, #76]	; (8002a10 <MX_USART6_UART_Init+0x90>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 80029c8:	4811      	ldr	r0, [pc, #68]	; (8002a10 <MX_USART6_UART_Init+0x90>)
 80029ca:	f00e ffe7 	bl	801199c <HAL_UART_Init>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <MX_USART6_UART_Init+0x58>
		Error_Handler();
 80029d4:	f000 f9e4 	bl	8002da0 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8)
 80029d8:	2100      	movs	r1, #0
 80029da:	480d      	ldr	r0, [pc, #52]	; (8002a10 <MX_USART6_UART_Init+0x90>)
 80029dc:	f010 f8ed 	bl	8012bba <HAL_UARTEx_SetTxFifoThreshold>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <MX_USART6_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 80029e6:	f000 f9db 	bl	8002da0 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8)
 80029ea:	2100      	movs	r1, #0
 80029ec:	4808      	ldr	r0, [pc, #32]	; (8002a10 <MX_USART6_UART_Init+0x90>)
 80029ee:	f010 f922 	bl	8012c36 <HAL_UARTEx_SetRxFifoThreshold>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <MX_USART6_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 80029f8:	f000 f9d2 	bl	8002da0 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK) {
 80029fc:	4804      	ldr	r0, [pc, #16]	; (8002a10 <MX_USART6_UART_Init+0x90>)
 80029fe:	f010 f8a3 	bl	8012b48 <HAL_UARTEx_DisableFifoMode>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <MX_USART6_UART_Init+0x8c>
		Error_Handler();
 8002a08:	f000 f9ca 	bl	8002da0 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8002a0c:	bf00      	nop
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	24001604 	.word	0x24001604
 8002a14:	40011400 	.word	0x40011400

08002a18 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002a1e:	4b2d      	ldr	r3, [pc, #180]	; (8002ad4 <MX_DMA_Init+0xbc>)
 8002a20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002a24:	4a2b      	ldr	r2, [pc, #172]	; (8002ad4 <MX_DMA_Init+0xbc>)
 8002a26:	f043 0301 	orr.w	r3, r3, #1
 8002a2a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002a2e:	4b29      	ldr	r3, [pc, #164]	; (8002ad4 <MX_DMA_Init+0xbc>)
 8002a30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002a34:	f003 0301 	and.w	r3, r3, #1
 8002a38:	607b      	str	r3, [r7, #4]
 8002a3a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 8002a3c:	4b25      	ldr	r3, [pc, #148]	; (8002ad4 <MX_DMA_Init+0xbc>)
 8002a3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002a42:	4a24      	ldr	r2, [pc, #144]	; (8002ad4 <MX_DMA_Init+0xbc>)
 8002a44:	f043 0302 	orr.w	r3, r3, #2
 8002a48:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002a4c:	4b21      	ldr	r3, [pc, #132]	; (8002ad4 <MX_DMA_Init+0xbc>)
 8002a4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	603b      	str	r3, [r7, #0]
 8002a58:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	200b      	movs	r0, #11
 8002a60:	f003 fbb5 	bl	80061ce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002a64:	200b      	movs	r0, #11
 8002a66:	f003 fbcc 	bl	8006202 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	200c      	movs	r0, #12
 8002a70:	f003 fbad 	bl	80061ce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002a74:	200c      	movs	r0, #12
 8002a76:	f003 fbc4 	bl	8006202 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	200d      	movs	r0, #13
 8002a80:	f003 fba5 	bl	80061ce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002a84:	200d      	movs	r0, #13
 8002a86:	f003 fbbc 	bl	8006202 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	2100      	movs	r1, #0
 8002a8e:	200e      	movs	r0, #14
 8002a90:	f003 fb9d 	bl	80061ce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002a94:	200e      	movs	r0, #14
 8002a96:	f003 fbb4 	bl	8006202 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	200f      	movs	r0, #15
 8002aa0:	f003 fb95 	bl	80061ce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002aa4:	200f      	movs	r0, #15
 8002aa6:	f003 fbac 	bl	8006202 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002aaa:	2200      	movs	r2, #0
 8002aac:	2100      	movs	r1, #0
 8002aae:	2010      	movs	r0, #16
 8002ab0:	f003 fb8d 	bl	80061ce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002ab4:	2010      	movs	r0, #16
 8002ab6:	f003 fba4 	bl	8006202 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002aba:	2200      	movs	r2, #0
 8002abc:	2100      	movs	r1, #0
 8002abe:	2046      	movs	r0, #70	; 0x46
 8002ac0:	f003 fb85 	bl	80061ce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002ac4:	2046      	movs	r0, #70	; 0x46
 8002ac6:	f003 fb9c 	bl	8006202 <HAL_NVIC_EnableIRQ>

}
 8002aca:	bf00      	nop
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	58024400 	.word	0x58024400

08002ad8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b08c      	sub	sp, #48	; 0x30
 8002adc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002ade:	f107 031c 	add.w	r3, r7, #28
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	605a      	str	r2, [r3, #4]
 8002ae8:	609a      	str	r2, [r3, #8]
 8002aea:	60da      	str	r2, [r3, #12]
 8002aec:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8002aee:	4ba4      	ldr	r3, [pc, #656]	; (8002d80 <MX_GPIO_Init+0x2a8>)
 8002af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002af4:	4aa2      	ldr	r2, [pc, #648]	; (8002d80 <MX_GPIO_Init+0x2a8>)
 8002af6:	f043 0310 	orr.w	r3, r3, #16
 8002afa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002afe:	4ba0      	ldr	r3, [pc, #640]	; (8002d80 <MX_GPIO_Init+0x2a8>)
 8002b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b04:	f003 0310 	and.w	r3, r3, #16
 8002b08:	61bb      	str	r3, [r7, #24]
 8002b0a:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8002b0c:	4b9c      	ldr	r3, [pc, #624]	; (8002d80 <MX_GPIO_Init+0x2a8>)
 8002b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b12:	4a9b      	ldr	r2, [pc, #620]	; (8002d80 <MX_GPIO_Init+0x2a8>)
 8002b14:	f043 0320 	orr.w	r3, r3, #32
 8002b18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b1c:	4b98      	ldr	r3, [pc, #608]	; (8002d80 <MX_GPIO_Init+0x2a8>)
 8002b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b22:	f003 0320 	and.w	r3, r3, #32
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002b2a:	4b95      	ldr	r3, [pc, #596]	; (8002d80 <MX_GPIO_Init+0x2a8>)
 8002b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b30:	4a93      	ldr	r2, [pc, #588]	; (8002d80 <MX_GPIO_Init+0x2a8>)
 8002b32:	f043 0304 	orr.w	r3, r3, #4
 8002b36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b3a:	4b91      	ldr	r3, [pc, #580]	; (8002d80 <MX_GPIO_Init+0x2a8>)
 8002b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	613b      	str	r3, [r7, #16]
 8002b46:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002b48:	4b8d      	ldr	r3, [pc, #564]	; (8002d80 <MX_GPIO_Init+0x2a8>)
 8002b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b4e:	4a8c      	ldr	r2, [pc, #560]	; (8002d80 <MX_GPIO_Init+0x2a8>)
 8002b50:	f043 0301 	orr.w	r3, r3, #1
 8002b54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b58:	4b89      	ldr	r3, [pc, #548]	; (8002d80 <MX_GPIO_Init+0x2a8>)
 8002b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002b66:	4b86      	ldr	r3, [pc, #536]	; (8002d80 <MX_GPIO_Init+0x2a8>)
 8002b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b6c:	4a84      	ldr	r2, [pc, #528]	; (8002d80 <MX_GPIO_Init+0x2a8>)
 8002b6e:	f043 0302 	orr.w	r3, r3, #2
 8002b72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b76:	4b82      	ldr	r3, [pc, #520]	; (8002d80 <MX_GPIO_Init+0x2a8>)
 8002b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8002b84:	4b7e      	ldr	r3, [pc, #504]	; (8002d80 <MX_GPIO_Init+0x2a8>)
 8002b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b8a:	4a7d      	ldr	r2, [pc, #500]	; (8002d80 <MX_GPIO_Init+0x2a8>)
 8002b8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b94:	4b7a      	ldr	r3, [pc, #488]	; (8002d80 <MX_GPIO_Init+0x2a8>)
 8002b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9e:	607b      	str	r3, [r7, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002ba2:	4b77      	ldr	r3, [pc, #476]	; (8002d80 <MX_GPIO_Init+0x2a8>)
 8002ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ba8:	4a75      	ldr	r2, [pc, #468]	; (8002d80 <MX_GPIO_Init+0x2a8>)
 8002baa:	f043 0308 	orr.w	r3, r3, #8
 8002bae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bb2:	4b73      	ldr	r3, [pc, #460]	; (8002d80 <MX_GPIO_Init+0x2a8>)
 8002bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bb8:	f003 0308 	and.w	r3, r3, #8
 8002bbc:	603b      	str	r3, [r7, #0]
 8002bbe:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2 | PYRO6_Pin | PYRO7_Pin | PYRO8_Pin,
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f241 5104 	movw	r1, #5380	; 0x1504
 8002bc6:	486f      	ldr	r0, [pc, #444]	; (8002d84 <MX_GPIO_Init+0x2ac>)
 8002bc8:	f006 f930 	bl	8008e2c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, ARM1_Pin | GPIO_PIN_15, GPIO_PIN_RESET);
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f248 0102 	movw	r1, #32770	; 0x8002
 8002bd2:	486d      	ldr	r0, [pc, #436]	; (8002d88 <MX_GPIO_Init+0x2b0>)
 8002bd4:	f006 f92a 	bl	8008e2c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_RESET);
 8002bd8:	2200      	movs	r2, #0
 8002bda:	2130      	movs	r1, #48	; 0x30
 8002bdc:	486b      	ldr	r0, [pc, #428]	; (8002d8c <MX_GPIO_Init+0x2b4>)
 8002bde:	f006 f925 	bl	8008e2c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, GPIO_PIN_RESET);
 8002be2:	2200      	movs	r2, #0
 8002be4:	2102      	movs	r1, #2
 8002be6:	486a      	ldr	r0, [pc, #424]	; (8002d90 <MX_GPIO_Init+0x2b8>)
 8002be8:	f006 f920 	bl	8008e2c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, PYRO2_Pin | PYRO3_Pin | PYRO4_Pin, GPIO_PIN_RESET);
 8002bec:	2200      	movs	r2, #0
 8002bee:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8002bf2:	4868      	ldr	r0, [pc, #416]	; (8002d94 <MX_GPIO_Init+0x2bc>)
 8002bf4:	f006 f91a 	bl	8008e2c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, PYRO5_Pin | GPIO_PIN_2 | GPIO_PIN_3,
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	210e      	movs	r1, #14
 8002bfc:	4866      	ldr	r0, [pc, #408]	; (8002d98 <MX_GPIO_Init+0x2c0>)
 8002bfe:	f006 f915 	bl	8008e2c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_0,
 8002c02:	2200      	movs	r2, #0
 8002c04:	f240 3101 	movw	r1, #769	; 0x301
 8002c08:	4864      	ldr	r0, [pc, #400]	; (8002d9c <MX_GPIO_Init+0x2c4>)
 8002c0a:	f006 f90f 	bl	8008e2c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | PYRO6_Pin | PYRO7_Pin | PYRO8_Pin;
 8002c0e:	f241 5304 	movw	r3, #5380	; 0x1504
 8002c12:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c14:	2301      	movs	r3, #1
 8002c16:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c20:	f107 031c 	add.w	r3, r7, #28
 8002c24:	4619      	mov	r1, r3
 8002c26:	4857      	ldr	r0, [pc, #348]	; (8002d84 <MX_GPIO_Init+0x2ac>)
 8002c28:	f005 ff40 	bl	8008aac <HAL_GPIO_Init>

	/*Configure GPIO pins : ARM1_Pin PA15 */
	GPIO_InitStruct.Pin = ARM1_Pin | GPIO_PIN_15;
 8002c2c:	f248 0302 	movw	r3, #32770	; 0x8002
 8002c30:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c32:	2301      	movs	r3, #1
 8002c34:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c3e:	f107 031c 	add.w	r3, r7, #28
 8002c42:	4619      	mov	r1, r3
 8002c44:	4850      	ldr	r0, [pc, #320]	; (8002d88 <MX_GPIO_Init+0x2b0>)
 8002c46:	f005 ff31 	bl	8008aac <HAL_GPIO_Init>

	/*Configure GPIO pins : PC4 PC5 */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 8002c4a:	2330      	movs	r3, #48	; 0x30
 8002c4c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c52:	2300      	movs	r3, #0
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c56:	2300      	movs	r3, #0
 8002c58:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c5a:	f107 031c 	add.w	r3, r7, #28
 8002c5e:	4619      	mov	r1, r3
 8002c60:	484a      	ldr	r0, [pc, #296]	; (8002d8c <MX_GPIO_Init+0x2b4>)
 8002c62:	f005 ff23 	bl	8008aac <HAL_GPIO_Init>

	/*Configure GPIO pin : PYRO1_Pin */
	GPIO_InitStruct.Pin = PYRO1_Pin;
 8002c66:	2302      	movs	r3, #2
 8002c68:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c72:	2300      	movs	r3, #0
 8002c74:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(PYRO1_GPIO_Port, &GPIO_InitStruct);
 8002c76:	f107 031c 	add.w	r3, r7, #28
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4844      	ldr	r0, [pc, #272]	; (8002d90 <MX_GPIO_Init+0x2b8>)
 8002c7e:	f005 ff15 	bl	8008aac <HAL_GPIO_Init>

	/*Configure GPIO pin : CONT1_Pin */
	GPIO_InitStruct.Pin = CONT1_Pin;
 8002c82:	2304      	movs	r3, #4
 8002c84:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c86:	2300      	movs	r3, #0
 8002c88:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 8002c8e:	f107 031c 	add.w	r3, r7, #28
 8002c92:	4619      	mov	r1, r3
 8002c94:	483e      	ldr	r0, [pc, #248]	; (8002d90 <MX_GPIO_Init+0x2b8>)
 8002c96:	f005 ff09 	bl	8008aac <HAL_GPIO_Init>

	/*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
	GPIO_InitStruct.Pin = PYRO2_Pin | PYRO3_Pin | PYRO4_Pin;
 8002c9a:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8002c9e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002cac:	f107 031c 	add.w	r3, r7, #28
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4838      	ldr	r0, [pc, #224]	; (8002d94 <MX_GPIO_Init+0x2bc>)
 8002cb4:	f005 fefa 	bl	8008aac <HAL_GPIO_Init>

	/*Configure GPIO pins : CONT2_Pin CONT3_Pin */
	GPIO_InitStruct.Pin = CONT2_Pin | CONT3_Pin;
 8002cb8:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8002cbc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002cc6:	f107 031c 	add.w	r3, r7, #28
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4831      	ldr	r0, [pc, #196]	; (8002d94 <MX_GPIO_Init+0x2bc>)
 8002cce:	f005 feed 	bl	8008aac <HAL_GPIO_Init>

	/*Configure GPIO pin : CONT4_Pin */
	GPIO_InitStruct.Pin = CONT4_Pin;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 8002cde:	f107 031c 	add.w	r3, r7, #28
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	482c      	ldr	r0, [pc, #176]	; (8002d98 <MX_GPIO_Init+0x2c0>)
 8002ce6:	f005 fee1 	bl	8008aac <HAL_GPIO_Init>

	/*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
	GPIO_InitStruct.Pin = PYRO5_Pin | GPIO_PIN_2 | GPIO_PIN_3;
 8002cea:	230e      	movs	r3, #14
 8002cec:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002cfa:	f107 031c 	add.w	r3, r7, #28
 8002cfe:	4619      	mov	r1, r3
 8002d00:	4825      	ldr	r0, [pc, #148]	; (8002d98 <MX_GPIO_Init+0x2c0>)
 8002d02:	f005 fed3 	bl	8008aac <HAL_GPIO_Init>

	/*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
	GPIO_InitStruct.Pin = CONT5_Pin | CONT6_Pin | CONT7_Pin | CONT8_Pin;
 8002d06:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 8002d0a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d10:	2301      	movs	r3, #1
 8002d12:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d14:	f107 031c 	add.w	r3, r7, #28
 8002d18:	4619      	mov	r1, r3
 8002d1a:	481a      	ldr	r0, [pc, #104]	; (8002d84 <MX_GPIO_Init+0x2ac>)
 8002d1c:	f005 fec6 	bl	8008aac <HAL_GPIO_Init>

	/*Configure GPIO pins : PD8 PD9 PD0 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_0;
 8002d20:	f240 3301 	movw	r3, #769	; 0x301
 8002d24:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d26:	2301      	movs	r3, #1
 8002d28:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d32:	f107 031c 	add.w	r3, r7, #28
 8002d36:	4619      	mov	r1, r3
 8002d38:	4818      	ldr	r0, [pc, #96]	; (8002d9c <MX_GPIO_Init+0x2c4>)
 8002d3a:	f005 feb7 	bl	8008aac <HAL_GPIO_Init>

	/*Configure GPIO pin : Servo_ARM_CHECK_Pin */
	GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 8002d3e:	2310      	movs	r3, #16
 8002d40:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d42:	2300      	movs	r3, #0
 8002d44:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d46:	2300      	movs	r3, #0
 8002d48:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002d4a:	f107 031c 	add.w	r3, r7, #28
 8002d4e:	4619      	mov	r1, r3
 8002d50:	4811      	ldr	r0, [pc, #68]	; (8002d98 <MX_GPIO_Init+0x2c0>)
 8002d52:	f005 feab 	bl	8008aac <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002d56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d5a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d60:	2300      	movs	r3, #0
 8002d62:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d64:	2300      	movs	r3, #0
 8002d66:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d6c:	f107 031c 	add.w	r3, r7, #28
 8002d70:	4619      	mov	r1, r3
 8002d72:	4805      	ldr	r0, [pc, #20]	; (8002d88 <MX_GPIO_Init+0x2b0>)
 8002d74:	f005 fe9a 	bl	8008aac <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002d78:	bf00      	nop
 8002d7a:	3730      	adds	r7, #48	; 0x30
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	58024400 	.word	0x58024400
 8002d84:	58021000 	.word	0x58021000
 8002d88:	58020000 	.word	0x58020000
 8002d8c:	58020800 	.word	0x58020800
 8002d90:	58020400 	.word	0x58020400
 8002d94:	58021400 	.word	0x58021400
 8002d98:	58021800 	.word	0x58021800
 8002d9c:	58020c00 	.word	0x58020c00

08002da0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002da4:	b672      	cpsid	i
}
 8002da6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002da8:	e7fe      	b.n	8002da8 <Error_Handler+0x8>
	...

08002dac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002db2:	4b0a      	ldr	r3, [pc, #40]	; (8002ddc <HAL_MspInit+0x30>)
 8002db4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002db8:	4a08      	ldr	r2, [pc, #32]	; (8002ddc <HAL_MspInit+0x30>)
 8002dba:	f043 0302 	orr.w	r3, r3, #2
 8002dbe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002dc2:	4b06      	ldr	r3, [pc, #24]	; (8002ddc <HAL_MspInit+0x30>)
 8002dc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	607b      	str	r3, [r7, #4]
 8002dce:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr
 8002ddc:	58024400 	.word	0x58024400

08002de0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b08c      	sub	sp, #48	; 0x30
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de8:	f107 031c 	add.w	r3, r7, #28
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]
 8002df0:	605a      	str	r2, [r3, #4]
 8002df2:	609a      	str	r2, [r3, #8]
 8002df4:	60da      	str	r2, [r3, #12]
 8002df6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a5d      	ldr	r2, [pc, #372]	; (8002f74 <HAL_ADC_MspInit+0x194>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d159      	bne.n	8002eb6 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002e02:	4b5d      	ldr	r3, [pc, #372]	; (8002f78 <HAL_ADC_MspInit+0x198>)
 8002e04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002e08:	4a5b      	ldr	r2, [pc, #364]	; (8002f78 <HAL_ADC_MspInit+0x198>)
 8002e0a:	f043 0320 	orr.w	r3, r3, #32
 8002e0e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002e12:	4b59      	ldr	r3, [pc, #356]	; (8002f78 <HAL_ADC_MspInit+0x198>)
 8002e14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002e18:	f003 0320 	and.w	r3, r3, #32
 8002e1c:	61bb      	str	r3, [r7, #24]
 8002e1e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e20:	4b55      	ldr	r3, [pc, #340]	; (8002f78 <HAL_ADC_MspInit+0x198>)
 8002e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e26:	4a54      	ldr	r2, [pc, #336]	; (8002f78 <HAL_ADC_MspInit+0x198>)
 8002e28:	f043 0301 	orr.w	r3, r3, #1
 8002e2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e30:	4b51      	ldr	r3, [pc, #324]	; (8002f78 <HAL_ADC_MspInit+0x198>)
 8002e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	617b      	str	r3, [r7, #20]
 8002e3c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_INP14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002e3e:	2304      	movs	r3, #4
 8002e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e42:	2303      	movs	r3, #3
 8002e44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e46:	2300      	movs	r3, #0
 8002e48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e4a:	f107 031c 	add.w	r3, r7, #28
 8002e4e:	4619      	mov	r1, r3
 8002e50:	484a      	ldr	r0, [pc, #296]	; (8002f7c <HAL_ADC_MspInit+0x19c>)
 8002e52:	f005 fe2b 	bl	8008aac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 8002e56:	4b4a      	ldr	r3, [pc, #296]	; (8002f80 <HAL_ADC_MspInit+0x1a0>)
 8002e58:	4a4a      	ldr	r2, [pc, #296]	; (8002f84 <HAL_ADC_MspInit+0x1a4>)
 8002e5a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002e5c:	4b48      	ldr	r3, [pc, #288]	; (8002f80 <HAL_ADC_MspInit+0x1a0>)
 8002e5e:	2209      	movs	r2, #9
 8002e60:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e62:	4b47      	ldr	r3, [pc, #284]	; (8002f80 <HAL_ADC_MspInit+0x1a0>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e68:	4b45      	ldr	r3, [pc, #276]	; (8002f80 <HAL_ADC_MspInit+0x1a0>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002e6e:	4b44      	ldr	r3, [pc, #272]	; (8002f80 <HAL_ADC_MspInit+0x1a0>)
 8002e70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e74:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e76:	4b42      	ldr	r3, [pc, #264]	; (8002f80 <HAL_ADC_MspInit+0x1a0>)
 8002e78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e7c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e7e:	4b40      	ldr	r3, [pc, #256]	; (8002f80 <HAL_ADC_MspInit+0x1a0>)
 8002e80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e84:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002e86:	4b3e      	ldr	r3, [pc, #248]	; (8002f80 <HAL_ADC_MspInit+0x1a0>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002e8c:	4b3c      	ldr	r3, [pc, #240]	; (8002f80 <HAL_ADC_MspInit+0x1a0>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e92:	4b3b      	ldr	r3, [pc, #236]	; (8002f80 <HAL_ADC_MspInit+0x1a0>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002e98:	4839      	ldr	r0, [pc, #228]	; (8002f80 <HAL_ADC_MspInit+0x1a0>)
 8002e9a:	f003 f9cd 	bl	8006238 <HAL_DMA_Init>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002ea4:	f7ff ff7c 	bl	8002da0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a35      	ldr	r2, [pc, #212]	; (8002f80 <HAL_ADC_MspInit+0x1a0>)
 8002eac:	659a      	str	r2, [r3, #88]	; 0x58
 8002eae:	4a34      	ldr	r2, [pc, #208]	; (8002f80 <HAL_ADC_MspInit+0x1a0>)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002eb4:	e059      	b.n	8002f6a <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a33      	ldr	r2, [pc, #204]	; (8002f88 <HAL_ADC_MspInit+0x1a8>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d154      	bne.n	8002f6a <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002ec0:	4b2d      	ldr	r3, [pc, #180]	; (8002f78 <HAL_ADC_MspInit+0x198>)
 8002ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ec6:	4a2c      	ldr	r2, [pc, #176]	; (8002f78 <HAL_ADC_MspInit+0x198>)
 8002ec8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ecc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ed0:	4b29      	ldr	r3, [pc, #164]	; (8002f78 <HAL_ADC_MspInit+0x198>)
 8002ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ed6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eda:	613b      	str	r3, [r7, #16]
 8002edc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ede:	4b26      	ldr	r3, [pc, #152]	; (8002f78 <HAL_ADC_MspInit+0x198>)
 8002ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ee4:	4a24      	ldr	r2, [pc, #144]	; (8002f78 <HAL_ADC_MspInit+0x198>)
 8002ee6:	f043 0304 	orr.w	r3, r3, #4
 8002eea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002eee:	4b22      	ldr	r3, [pc, #136]	; (8002f78 <HAL_ADC_MspInit+0x198>)
 8002ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	60fb      	str	r3, [r7, #12]
 8002efa:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002efc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002f00:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002f04:	f001 f8b6 	bl	8004074 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 8002f08:	4b20      	ldr	r3, [pc, #128]	; (8002f8c <HAL_ADC_MspInit+0x1ac>)
 8002f0a:	4a21      	ldr	r2, [pc, #132]	; (8002f90 <HAL_ADC_MspInit+0x1b0>)
 8002f0c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002f0e:	4b1f      	ldr	r3, [pc, #124]	; (8002f8c <HAL_ADC_MspInit+0x1ac>)
 8002f10:	2273      	movs	r2, #115	; 0x73
 8002f12:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f14:	4b1d      	ldr	r3, [pc, #116]	; (8002f8c <HAL_ADC_MspInit+0x1ac>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f1a:	4b1c      	ldr	r3, [pc, #112]	; (8002f8c <HAL_ADC_MspInit+0x1ac>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002f20:	4b1a      	ldr	r3, [pc, #104]	; (8002f8c <HAL_ADC_MspInit+0x1ac>)
 8002f22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f26:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f28:	4b18      	ldr	r3, [pc, #96]	; (8002f8c <HAL_ADC_MspInit+0x1ac>)
 8002f2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f2e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f30:	4b16      	ldr	r3, [pc, #88]	; (8002f8c <HAL_ADC_MspInit+0x1ac>)
 8002f32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f36:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002f38:	4b14      	ldr	r3, [pc, #80]	; (8002f8c <HAL_ADC_MspInit+0x1ac>)
 8002f3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f3e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002f40:	4b12      	ldr	r3, [pc, #72]	; (8002f8c <HAL_ADC_MspInit+0x1ac>)
 8002f42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002f46:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f48:	4b10      	ldr	r3, [pc, #64]	; (8002f8c <HAL_ADC_MspInit+0x1ac>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002f4e:	480f      	ldr	r0, [pc, #60]	; (8002f8c <HAL_ADC_MspInit+0x1ac>)
 8002f50:	f003 f972 	bl	8006238 <HAL_DMA_Init>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 8002f5a:	f7ff ff21 	bl	8002da0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a0a      	ldr	r2, [pc, #40]	; (8002f8c <HAL_ADC_MspInit+0x1ac>)
 8002f62:	659a      	str	r2, [r3, #88]	; 0x58
 8002f64:	4a09      	ldr	r2, [pc, #36]	; (8002f8c <HAL_ADC_MspInit+0x1ac>)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002f6a:	bf00      	nop
 8002f6c:	3730      	adds	r7, #48	; 0x30
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40022000 	.word	0x40022000
 8002f78:	58024400 	.word	0x58024400
 8002f7c:	58020000 	.word	0x58020000
 8002f80:	24000d58 	.word	0x24000d58
 8002f84:	40020088 	.word	0x40020088
 8002f88:	58026000 	.word	0x58026000
 8002f8c:	24000dd0 	.word	0x24000dd0
 8002f90:	400204b8 	.word	0x400204b8

08002f94 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b0b8      	sub	sp, #224	; 0xe0
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f9c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	605a      	str	r2, [r3, #4]
 8002fa6:	609a      	str	r2, [r3, #8]
 8002fa8:	60da      	str	r2, [r3, #12]
 8002faa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fac:	f107 0310 	add.w	r3, r7, #16
 8002fb0:	22b8      	movs	r2, #184	; 0xb8
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f017 ff19 	bl	801adec <memset>
  if(hfdcan->Instance==FDCAN3)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a26      	ldr	r2, [pc, #152]	; (8003058 <HAL_FDCAN_MspInit+0xc4>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d145      	bne.n	8003050 <HAL_FDCAN_MspInit+0xbc>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002fc4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002fc8:	f04f 0300 	mov.w	r3, #0
 8002fcc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002fd0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002fd4:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fd6:	f107 0310 	add.w	r3, r7, #16
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f008 fb54 	bl	800b688 <HAL_RCCEx_PeriphCLKConfig>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8002fe6:	f7ff fedb 	bl	8002da0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002fea:	4b1c      	ldr	r3, [pc, #112]	; (800305c <HAL_FDCAN_MspInit+0xc8>)
 8002fec:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002ff0:	4a1a      	ldr	r2, [pc, #104]	; (800305c <HAL_FDCAN_MspInit+0xc8>)
 8002ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002ffa:	4b18      	ldr	r3, [pc, #96]	; (800305c <HAL_FDCAN_MspInit+0xc8>)
 8002ffc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003004:	60fb      	str	r3, [r7, #12]
 8003006:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003008:	4b14      	ldr	r3, [pc, #80]	; (800305c <HAL_FDCAN_MspInit+0xc8>)
 800300a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800300e:	4a13      	ldr	r2, [pc, #76]	; (800305c <HAL_FDCAN_MspInit+0xc8>)
 8003010:	f043 0320 	orr.w	r3, r3, #32
 8003014:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003018:	4b10      	ldr	r3, [pc, #64]	; (800305c <HAL_FDCAN_MspInit+0xc8>)
 800301a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800301e:	f003 0320 	and.w	r3, r3, #32
 8003022:	60bb      	str	r3, [r7, #8]
 8003024:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003026:	23c0      	movs	r3, #192	; 0xc0
 8003028:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800302c:	2302      	movs	r3, #2
 800302e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003032:	2300      	movs	r3, #0
 8003034:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003038:	2300      	movs	r3, #0
 800303a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 800303e:	2302      	movs	r3, #2
 8003040:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003044:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003048:	4619      	mov	r1, r3
 800304a:	4805      	ldr	r0, [pc, #20]	; (8003060 <HAL_FDCAN_MspInit+0xcc>)
 800304c:	f005 fd2e 	bl	8008aac <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8003050:	bf00      	nop
 8003052:	37e0      	adds	r7, #224	; 0xe0
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}
 8003058:	4000d400 	.word	0x4000d400
 800305c:	58024400 	.word	0x58024400
 8003060:	58021400 	.word	0x58021400

08003064 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b0b8      	sub	sp, #224	; 0xe0
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800306c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003070:	2200      	movs	r2, #0
 8003072:	601a      	str	r2, [r3, #0]
 8003074:	605a      	str	r2, [r3, #4]
 8003076:	609a      	str	r2, [r3, #8]
 8003078:	60da      	str	r2, [r3, #12]
 800307a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800307c:	f107 0310 	add.w	r3, r7, #16
 8003080:	22b8      	movs	r2, #184	; 0xb8
 8003082:	2100      	movs	r1, #0
 8003084:	4618      	mov	r0, r3
 8003086:	f017 feb1 	bl	801adec <memset>
  if(hi2c->Instance==I2C2)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a2a      	ldr	r2, [pc, #168]	; (8003138 <HAL_I2C_MspInit+0xd4>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d14d      	bne.n	8003130 <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8003094:	f04f 0208 	mov.w	r2, #8
 8003098:	f04f 0300 	mov.w	r3, #0
 800309c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 80030a0:	2300      	movs	r3, #0
 80030a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030a6:	f107 0310 	add.w	r3, r7, #16
 80030aa:	4618      	mov	r0, r3
 80030ac:	f008 faec 	bl	800b688 <HAL_RCCEx_PeriphCLKConfig>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80030b6:	f7ff fe73 	bl	8002da0 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80030ba:	4b20      	ldr	r3, [pc, #128]	; (800313c <HAL_I2C_MspInit+0xd8>)
 80030bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030c0:	4a1e      	ldr	r2, [pc, #120]	; (800313c <HAL_I2C_MspInit+0xd8>)
 80030c2:	f043 0320 	orr.w	r3, r3, #32
 80030c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030ca:	4b1c      	ldr	r3, [pc, #112]	; (800313c <HAL_I2C_MspInit+0xd8>)
 80030cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030d0:	f003 0320 	and.w	r3, r3, #32
 80030d4:	60fb      	str	r3, [r7, #12]
 80030d6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80030d8:	2303      	movs	r3, #3
 80030da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030de:	2312      	movs	r3, #18
 80030e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e4:	2300      	movs	r3, #0
 80030e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ea:	2300      	movs	r3, #0
 80030ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80030f0:	2304      	movs	r3, #4
 80030f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80030f6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80030fa:	4619      	mov	r1, r3
 80030fc:	4810      	ldr	r0, [pc, #64]	; (8003140 <HAL_I2C_MspInit+0xdc>)
 80030fe:	f005 fcd5 	bl	8008aac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003102:	4b0e      	ldr	r3, [pc, #56]	; (800313c <HAL_I2C_MspInit+0xd8>)
 8003104:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003108:	4a0c      	ldr	r2, [pc, #48]	; (800313c <HAL_I2C_MspInit+0xd8>)
 800310a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800310e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003112:	4b0a      	ldr	r3, [pc, #40]	; (800313c <HAL_I2C_MspInit+0xd8>)
 8003114:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003118:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800311c:	60bb      	str	r3, [r7, #8]
 800311e:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8003120:	2200      	movs	r2, #0
 8003122:	2101      	movs	r1, #1
 8003124:	2021      	movs	r0, #33	; 0x21
 8003126:	f003 f852 	bl	80061ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800312a:	2021      	movs	r0, #33	; 0x21
 800312c:	f003 f869 	bl	8006202 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003130:	bf00      	nop
 8003132:	37e0      	adds	r7, #224	; 0xe0
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	40005800 	.word	0x40005800
 800313c:	58024400 	.word	0x58024400
 8003140:	58021400 	.word	0x58021400

08003144 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b0ba      	sub	sp, #232	; 0xe8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800314c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	605a      	str	r2, [r3, #4]
 8003156:	609a      	str	r2, [r3, #8]
 8003158:	60da      	str	r2, [r3, #12]
 800315a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800315c:	f107 0318 	add.w	r3, r7, #24
 8003160:	22b8      	movs	r2, #184	; 0xb8
 8003162:	2100      	movs	r1, #0
 8003164:	4618      	mov	r0, r3
 8003166:	f017 fe41 	bl	801adec <memset>
  if(hsd->Instance==SDMMC2)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a5d      	ldr	r2, [pc, #372]	; (80032e4 <HAL_SD_MspInit+0x1a0>)
 8003170:	4293      	cmp	r3, r2
 8003172:	f040 80b3 	bne.w	80032dc <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8003176:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800317a:	f04f 0300 	mov.w	r3, #0
 800317e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8003182:	2300      	movs	r3, #0
 8003184:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003186:	f107 0318 	add.w	r3, r7, #24
 800318a:	4618      	mov	r0, r3
 800318c:	f008 fa7c 	bl	800b688 <HAL_RCCEx_PeriphCLKConfig>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8003196:	f7ff fe03 	bl	8002da0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 800319a:	4b53      	ldr	r3, [pc, #332]	; (80032e8 <HAL_SD_MspInit+0x1a4>)
 800319c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80031a0:	4a51      	ldr	r2, [pc, #324]	; (80032e8 <HAL_SD_MspInit+0x1a4>)
 80031a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031a6:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80031aa:	4b4f      	ldr	r3, [pc, #316]	; (80032e8 <HAL_SD_MspInit+0x1a4>)
 80031ac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80031b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031b4:	617b      	str	r3, [r7, #20]
 80031b6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031b8:	4b4b      	ldr	r3, [pc, #300]	; (80032e8 <HAL_SD_MspInit+0x1a4>)
 80031ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031be:	4a4a      	ldr	r2, [pc, #296]	; (80032e8 <HAL_SD_MspInit+0x1a4>)
 80031c0:	f043 0308 	orr.w	r3, r3, #8
 80031c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031c8:	4b47      	ldr	r3, [pc, #284]	; (80032e8 <HAL_SD_MspInit+0x1a4>)
 80031ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031ce:	f003 0308 	and.w	r3, r3, #8
 80031d2:	613b      	str	r3, [r7, #16]
 80031d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80031d6:	4b44      	ldr	r3, [pc, #272]	; (80032e8 <HAL_SD_MspInit+0x1a4>)
 80031d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031dc:	4a42      	ldr	r2, [pc, #264]	; (80032e8 <HAL_SD_MspInit+0x1a4>)
 80031de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031e6:	4b40      	ldr	r3, [pc, #256]	; (80032e8 <HAL_SD_MspInit+0x1a4>)
 80031e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80031f4:	2340      	movs	r3, #64	; 0x40
 80031f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fa:	2302      	movs	r3, #2
 80031fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003200:	2300      	movs	r3, #0
 8003202:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003206:	2303      	movs	r3, #3
 8003208:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800320c:	230b      	movs	r3, #11
 800320e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003212:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003216:	4619      	mov	r1, r3
 8003218:	4834      	ldr	r0, [pc, #208]	; (80032ec <HAL_SD_MspInit+0x1a8>)
 800321a:	f005 fc47 	bl	8008aac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800321e:	2380      	movs	r3, #128	; 0x80
 8003220:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003224:	2302      	movs	r3, #2
 8003226:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800322a:	2301      	movs	r3, #1
 800322c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003230:	2303      	movs	r3, #3
 8003232:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8003236:	230b      	movs	r3, #11
 8003238:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800323c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003240:	4619      	mov	r1, r3
 8003242:	482a      	ldr	r0, [pc, #168]	; (80032ec <HAL_SD_MspInit+0x1a8>)
 8003244:	f005 fc32 	bl	8008aac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003248:	f44f 7300 	mov.w	r3, #512	; 0x200
 800324c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003250:	2302      	movs	r3, #2
 8003252:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003256:	2301      	movs	r3, #1
 8003258:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800325c:	2303      	movs	r3, #3
 800325e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8003262:	230b      	movs	r3, #11
 8003264:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003268:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800326c:	4619      	mov	r1, r3
 800326e:	4820      	ldr	r0, [pc, #128]	; (80032f0 <HAL_SD_MspInit+0x1ac>)
 8003270:	f005 fc1c 	bl	8008aac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003278:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800327c:	2302      	movs	r3, #2
 800327e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003282:	2300      	movs	r3, #0
 8003284:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003288:	2303      	movs	r3, #3
 800328a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800328e:	230b      	movs	r3, #11
 8003290:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003294:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003298:	4619      	mov	r1, r3
 800329a:	4815      	ldr	r0, [pc, #84]	; (80032f0 <HAL_SD_MspInit+0x1ac>)
 800329c:	f005 fc06 	bl	8008aac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80032a0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80032a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a8:	2302      	movs	r3, #2
 80032aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ae:	2300      	movs	r3, #0
 80032b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032b4:	2303      	movs	r3, #3
 80032b6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 80032ba:	230a      	movs	r3, #10
 80032bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80032c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80032c4:	4619      	mov	r1, r3
 80032c6:	480a      	ldr	r0, [pc, #40]	; (80032f0 <HAL_SD_MspInit+0x1ac>)
 80032c8:	f005 fbf0 	bl	8008aac <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 80032cc:	2200      	movs	r2, #0
 80032ce:	2100      	movs	r1, #0
 80032d0:	207c      	movs	r0, #124	; 0x7c
 80032d2:	f002 ff7c 	bl	80061ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 80032d6:	207c      	movs	r0, #124	; 0x7c
 80032d8:	f002 ff93 	bl	8006202 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 80032dc:	bf00      	nop
 80032de:	37e8      	adds	r7, #232	; 0xe8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	48022400 	.word	0x48022400
 80032e8:	58024400 	.word	0x58024400
 80032ec:	58020c00 	.word	0x58020c00
 80032f0:	58021800 	.word	0x58021800

080032f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b08e      	sub	sp, #56	; 0x38
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	605a      	str	r2, [r3, #4]
 8003306:	609a      	str	r2, [r3, #8]
 8003308:	60da      	str	r2, [r3, #12]
 800330a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a4f      	ldr	r2, [pc, #316]	; (8003450 <HAL_SPI_MspInit+0x15c>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d12e      	bne.n	8003374 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003316:	4b4f      	ldr	r3, [pc, #316]	; (8003454 <HAL_SPI_MspInit+0x160>)
 8003318:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800331c:	4a4d      	ldr	r2, [pc, #308]	; (8003454 <HAL_SPI_MspInit+0x160>)
 800331e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003322:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003326:	4b4b      	ldr	r3, [pc, #300]	; (8003454 <HAL_SPI_MspInit+0x160>)
 8003328:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800332c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003330:	623b      	str	r3, [r7, #32]
 8003332:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003334:	4b47      	ldr	r3, [pc, #284]	; (8003454 <HAL_SPI_MspInit+0x160>)
 8003336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800333a:	4a46      	ldr	r2, [pc, #280]	; (8003454 <HAL_SPI_MspInit+0x160>)
 800333c:	f043 0301 	orr.w	r3, r3, #1
 8003340:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003344:	4b43      	ldr	r3, [pc, #268]	; (8003454 <HAL_SPI_MspInit+0x160>)
 8003346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	61fb      	str	r3, [r7, #28]
 8003350:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003352:	23e0      	movs	r3, #224	; 0xe0
 8003354:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003356:	2302      	movs	r3, #2
 8003358:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335a:	2300      	movs	r3, #0
 800335c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800335e:	2300      	movs	r3, #0
 8003360:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003362:	2305      	movs	r3, #5
 8003364:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800336a:	4619      	mov	r1, r3
 800336c:	483a      	ldr	r0, [pc, #232]	; (8003458 <HAL_SPI_MspInit+0x164>)
 800336e:	f005 fb9d 	bl	8008aac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003372:	e068      	b.n	8003446 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a38      	ldr	r2, [pc, #224]	; (800345c <HAL_SPI_MspInit+0x168>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d12f      	bne.n	80033de <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800337e:	4b35      	ldr	r3, [pc, #212]	; (8003454 <HAL_SPI_MspInit+0x160>)
 8003380:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003384:	4a33      	ldr	r2, [pc, #204]	; (8003454 <HAL_SPI_MspInit+0x160>)
 8003386:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800338a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800338e:	4b31      	ldr	r3, [pc, #196]	; (8003454 <HAL_SPI_MspInit+0x160>)
 8003390:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003394:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003398:	61bb      	str	r3, [r7, #24]
 800339a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800339c:	4b2d      	ldr	r3, [pc, #180]	; (8003454 <HAL_SPI_MspInit+0x160>)
 800339e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033a2:	4a2c      	ldr	r2, [pc, #176]	; (8003454 <HAL_SPI_MspInit+0x160>)
 80033a4:	f043 0302 	orr.w	r3, r3, #2
 80033a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033ac:	4b29      	ldr	r3, [pc, #164]	; (8003454 <HAL_SPI_MspInit+0x160>)
 80033ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	617b      	str	r3, [r7, #20]
 80033b8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80033ba:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80033be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c0:	2302      	movs	r3, #2
 80033c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c4:	2300      	movs	r3, #0
 80033c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c8:	2300      	movs	r3, #0
 80033ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80033cc:	2305      	movs	r3, #5
 80033ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033d4:	4619      	mov	r1, r3
 80033d6:	4822      	ldr	r0, [pc, #136]	; (8003460 <HAL_SPI_MspInit+0x16c>)
 80033d8:	f005 fb68 	bl	8008aac <HAL_GPIO_Init>
}
 80033dc:	e033      	b.n	8003446 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a20      	ldr	r2, [pc, #128]	; (8003464 <HAL_SPI_MspInit+0x170>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d12e      	bne.n	8003446 <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80033e8:	4b1a      	ldr	r3, [pc, #104]	; (8003454 <HAL_SPI_MspInit+0x160>)
 80033ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033ee:	4a19      	ldr	r2, [pc, #100]	; (8003454 <HAL_SPI_MspInit+0x160>)
 80033f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033f4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80033f8:	4b16      	ldr	r3, [pc, #88]	; (8003454 <HAL_SPI_MspInit+0x160>)
 80033fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003402:	613b      	str	r3, [r7, #16]
 8003404:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003406:	4b13      	ldr	r3, [pc, #76]	; (8003454 <HAL_SPI_MspInit+0x160>)
 8003408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800340c:	4a11      	ldr	r2, [pc, #68]	; (8003454 <HAL_SPI_MspInit+0x160>)
 800340e:	f043 0304 	orr.w	r3, r3, #4
 8003412:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003416:	4b0f      	ldr	r3, [pc, #60]	; (8003454 <HAL_SPI_MspInit+0x160>)
 8003418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	60fb      	str	r3, [r7, #12]
 8003422:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003424:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003428:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800342a:	2302      	movs	r3, #2
 800342c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342e:	2300      	movs	r3, #0
 8003430:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003432:	2300      	movs	r3, #0
 8003434:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003436:	2306      	movs	r3, #6
 8003438:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800343a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800343e:	4619      	mov	r1, r3
 8003440:	4809      	ldr	r0, [pc, #36]	; (8003468 <HAL_SPI_MspInit+0x174>)
 8003442:	f005 fb33 	bl	8008aac <HAL_GPIO_Init>
}
 8003446:	bf00      	nop
 8003448:	3738      	adds	r7, #56	; 0x38
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40013000 	.word	0x40013000
 8003454:	58024400 	.word	0x58024400
 8003458:	58020000 	.word	0x58020000
 800345c:	40003800 	.word	0x40003800
 8003460:	58020400 	.word	0x58020400
 8003464:	40003c00 	.word	0x40003c00
 8003468:	58020800 	.word	0x58020800

0800346c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b08c      	sub	sp, #48	; 0x30
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003474:	f107 031c 	add.w	r3, r7, #28
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	605a      	str	r2, [r3, #4]
 800347e:	609a      	str	r2, [r3, #8]
 8003480:	60da      	str	r2, [r3, #12]
 8003482:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800348c:	d15d      	bne.n	800354a <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800348e:	4b8e      	ldr	r3, [pc, #568]	; (80036c8 <HAL_TIM_PWM_MspInit+0x25c>)
 8003490:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003494:	4a8c      	ldr	r2, [pc, #560]	; (80036c8 <HAL_TIM_PWM_MspInit+0x25c>)
 8003496:	f043 0301 	orr.w	r3, r3, #1
 800349a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800349e:	4b8a      	ldr	r3, [pc, #552]	; (80036c8 <HAL_TIM_PWM_MspInit+0x25c>)
 80034a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	61bb      	str	r3, [r7, #24]
 80034aa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ac:	4b86      	ldr	r3, [pc, #536]	; (80036c8 <HAL_TIM_PWM_MspInit+0x25c>)
 80034ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034b2:	4a85      	ldr	r2, [pc, #532]	; (80036c8 <HAL_TIM_PWM_MspInit+0x25c>)
 80034b4:	f043 0301 	orr.w	r3, r3, #1
 80034b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034bc:	4b82      	ldr	r3, [pc, #520]	; (80036c8 <HAL_TIM_PWM_MspInit+0x25c>)
 80034be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	617b      	str	r3, [r7, #20]
 80034c8:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80034ca:	2301      	movs	r3, #1
 80034cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ce:	2302      	movs	r3, #2
 80034d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d2:	2300      	movs	r3, #0
 80034d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d6:	2300      	movs	r3, #0
 80034d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80034da:	2301      	movs	r3, #1
 80034dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034de:	f107 031c 	add.w	r3, r7, #28
 80034e2:	4619      	mov	r1, r3
 80034e4:	4879      	ldr	r0, [pc, #484]	; (80036cc <HAL_TIM_PWM_MspInit+0x260>)
 80034e6:	f005 fae1 	bl	8008aac <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 80034ea:	4b79      	ldr	r3, [pc, #484]	; (80036d0 <HAL_TIM_PWM_MspInit+0x264>)
 80034ec:	4a79      	ldr	r2, [pc, #484]	; (80036d4 <HAL_TIM_PWM_MspInit+0x268>)
 80034ee:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 80034f0:	4b77      	ldr	r3, [pc, #476]	; (80036d0 <HAL_TIM_PWM_MspInit+0x264>)
 80034f2:	2214      	movs	r2, #20
 80034f4:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034f6:	4b76      	ldr	r3, [pc, #472]	; (80036d0 <HAL_TIM_PWM_MspInit+0x264>)
 80034f8:	2240      	movs	r2, #64	; 0x40
 80034fa:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80034fc:	4b74      	ldr	r3, [pc, #464]	; (80036d0 <HAL_TIM_PWM_MspInit+0x264>)
 80034fe:	2200      	movs	r2, #0
 8003500:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003502:	4b73      	ldr	r3, [pc, #460]	; (80036d0 <HAL_TIM_PWM_MspInit+0x264>)
 8003504:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003508:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800350a:	4b71      	ldr	r3, [pc, #452]	; (80036d0 <HAL_TIM_PWM_MspInit+0x264>)
 800350c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003510:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003512:	4b6f      	ldr	r3, [pc, #444]	; (80036d0 <HAL_TIM_PWM_MspInit+0x264>)
 8003514:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003518:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 800351a:	4b6d      	ldr	r3, [pc, #436]	; (80036d0 <HAL_TIM_PWM_MspInit+0x264>)
 800351c:	2200      	movs	r2, #0
 800351e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003520:	4b6b      	ldr	r3, [pc, #428]	; (80036d0 <HAL_TIM_PWM_MspInit+0x264>)
 8003522:	2200      	movs	r2, #0
 8003524:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003526:	4b6a      	ldr	r3, [pc, #424]	; (80036d0 <HAL_TIM_PWM_MspInit+0x264>)
 8003528:	2200      	movs	r2, #0
 800352a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 800352c:	4868      	ldr	r0, [pc, #416]	; (80036d0 <HAL_TIM_PWM_MspInit+0x264>)
 800352e:	f002 fe83 	bl	8006238 <HAL_DMA_Init>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 8003538:	f7ff fc32 	bl	8002da0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a64      	ldr	r2, [pc, #400]	; (80036d0 <HAL_TIM_PWM_MspInit+0x264>)
 8003540:	62da      	str	r2, [r3, #44]	; 0x2c
 8003542:	4a63      	ldr	r2, [pc, #396]	; (80036d0 <HAL_TIM_PWM_MspInit+0x264>)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003548:	e119      	b.n	800377e <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a62      	ldr	r2, [pc, #392]	; (80036d8 <HAL_TIM_PWM_MspInit+0x26c>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d16d      	bne.n	8003630 <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003554:	4b5c      	ldr	r3, [pc, #368]	; (80036c8 <HAL_TIM_PWM_MspInit+0x25c>)
 8003556:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800355a:	4a5b      	ldr	r2, [pc, #364]	; (80036c8 <HAL_TIM_PWM_MspInit+0x25c>)
 800355c:	f043 0302 	orr.w	r3, r3, #2
 8003560:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003564:	4b58      	ldr	r3, [pc, #352]	; (80036c8 <HAL_TIM_PWM_MspInit+0x25c>)
 8003566:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	613b      	str	r3, [r7, #16]
 8003570:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 8003572:	4b5a      	ldr	r3, [pc, #360]	; (80036dc <HAL_TIM_PWM_MspInit+0x270>)
 8003574:	4a5a      	ldr	r2, [pc, #360]	; (80036e0 <HAL_TIM_PWM_MspInit+0x274>)
 8003576:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8003578:	4b58      	ldr	r3, [pc, #352]	; (80036dc <HAL_TIM_PWM_MspInit+0x270>)
 800357a:	2218      	movs	r2, #24
 800357c:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800357e:	4b57      	ldr	r3, [pc, #348]	; (80036dc <HAL_TIM_PWM_MspInit+0x270>)
 8003580:	2240      	movs	r2, #64	; 0x40
 8003582:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003584:	4b55      	ldr	r3, [pc, #340]	; (80036dc <HAL_TIM_PWM_MspInit+0x270>)
 8003586:	2200      	movs	r2, #0
 8003588:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800358a:	4b54      	ldr	r3, [pc, #336]	; (80036dc <HAL_TIM_PWM_MspInit+0x270>)
 800358c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003590:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003592:	4b52      	ldr	r3, [pc, #328]	; (80036dc <HAL_TIM_PWM_MspInit+0x270>)
 8003594:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003598:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800359a:	4b50      	ldr	r3, [pc, #320]	; (80036dc <HAL_TIM_PWM_MspInit+0x270>)
 800359c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80035a0:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 80035a2:	4b4e      	ldr	r3, [pc, #312]	; (80036dc <HAL_TIM_PWM_MspInit+0x270>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80035a8:	4b4c      	ldr	r3, [pc, #304]	; (80036dc <HAL_TIM_PWM_MspInit+0x270>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035ae:	4b4b      	ldr	r3, [pc, #300]	; (80036dc <HAL_TIM_PWM_MspInit+0x270>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 80035b4:	4849      	ldr	r0, [pc, #292]	; (80036dc <HAL_TIM_PWM_MspInit+0x270>)
 80035b6:	f002 fe3f 	bl	8006238 <HAL_DMA_Init>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d001      	beq.n	80035c4 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 80035c0:	f7ff fbee 	bl	8002da0 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a45      	ldr	r2, [pc, #276]	; (80036dc <HAL_TIM_PWM_MspInit+0x270>)
 80035c8:	629a      	str	r2, [r3, #40]	; 0x28
 80035ca:	4a44      	ldr	r2, [pc, #272]	; (80036dc <HAL_TIM_PWM_MspInit+0x270>)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 80035d0:	4b44      	ldr	r3, [pc, #272]	; (80036e4 <HAL_TIM_PWM_MspInit+0x278>)
 80035d2:	4a45      	ldr	r2, [pc, #276]	; (80036e8 <HAL_TIM_PWM_MspInit+0x27c>)
 80035d4:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 80035d6:	4b43      	ldr	r3, [pc, #268]	; (80036e4 <HAL_TIM_PWM_MspInit+0x278>)
 80035d8:	2217      	movs	r2, #23
 80035da:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80035dc:	4b41      	ldr	r3, [pc, #260]	; (80036e4 <HAL_TIM_PWM_MspInit+0x278>)
 80035de:	2240      	movs	r2, #64	; 0x40
 80035e0:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80035e2:	4b40      	ldr	r3, [pc, #256]	; (80036e4 <HAL_TIM_PWM_MspInit+0x278>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80035e8:	4b3e      	ldr	r3, [pc, #248]	; (80036e4 <HAL_TIM_PWM_MspInit+0x278>)
 80035ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035ee:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80035f0:	4b3c      	ldr	r3, [pc, #240]	; (80036e4 <HAL_TIM_PWM_MspInit+0x278>)
 80035f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035f6:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80035f8:	4b3a      	ldr	r3, [pc, #232]	; (80036e4 <HAL_TIM_PWM_MspInit+0x278>)
 80035fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80035fe:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8003600:	4b38      	ldr	r3, [pc, #224]	; (80036e4 <HAL_TIM_PWM_MspInit+0x278>)
 8003602:	2200      	movs	r2, #0
 8003604:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003606:	4b37      	ldr	r3, [pc, #220]	; (80036e4 <HAL_TIM_PWM_MspInit+0x278>)
 8003608:	2200      	movs	r2, #0
 800360a:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800360c:	4b35      	ldr	r3, [pc, #212]	; (80036e4 <HAL_TIM_PWM_MspInit+0x278>)
 800360e:	2200      	movs	r2, #0
 8003610:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8003612:	4834      	ldr	r0, [pc, #208]	; (80036e4 <HAL_TIM_PWM_MspInit+0x278>)
 8003614:	f002 fe10 	bl	8006238 <HAL_DMA_Init>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 800361e:	f7ff fbbf 	bl	8002da0 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a2f      	ldr	r2, [pc, #188]	; (80036e4 <HAL_TIM_PWM_MspInit+0x278>)
 8003626:	625a      	str	r2, [r3, #36]	; 0x24
 8003628:	4a2e      	ldr	r2, [pc, #184]	; (80036e4 <HAL_TIM_PWM_MspInit+0x278>)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800362e:	e0a6      	b.n	800377e <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a2d      	ldr	r2, [pc, #180]	; (80036ec <HAL_TIM_PWM_MspInit+0x280>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d15e      	bne.n	80036f8 <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800363a:	4b23      	ldr	r3, [pc, #140]	; (80036c8 <HAL_TIM_PWM_MspInit+0x25c>)
 800363c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003640:	4a21      	ldr	r2, [pc, #132]	; (80036c8 <HAL_TIM_PWM_MspInit+0x25c>)
 8003642:	f043 0304 	orr.w	r3, r3, #4
 8003646:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800364a:	4b1f      	ldr	r3, [pc, #124]	; (80036c8 <HAL_TIM_PWM_MspInit+0x25c>)
 800364c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 8003658:	4b25      	ldr	r3, [pc, #148]	; (80036f0 <HAL_TIM_PWM_MspInit+0x284>)
 800365a:	4a26      	ldr	r2, [pc, #152]	; (80036f4 <HAL_TIM_PWM_MspInit+0x288>)
 800365c:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 800365e:	4b24      	ldr	r3, [pc, #144]	; (80036f0 <HAL_TIM_PWM_MspInit+0x284>)
 8003660:	221f      	movs	r2, #31
 8003662:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003664:	4b22      	ldr	r3, [pc, #136]	; (80036f0 <HAL_TIM_PWM_MspInit+0x284>)
 8003666:	2240      	movs	r2, #64	; 0x40
 8003668:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800366a:	4b21      	ldr	r3, [pc, #132]	; (80036f0 <HAL_TIM_PWM_MspInit+0x284>)
 800366c:	2200      	movs	r2, #0
 800366e:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003670:	4b1f      	ldr	r3, [pc, #124]	; (80036f0 <HAL_TIM_PWM_MspInit+0x284>)
 8003672:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003676:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003678:	4b1d      	ldr	r3, [pc, #116]	; (80036f0 <HAL_TIM_PWM_MspInit+0x284>)
 800367a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800367e:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003680:	4b1b      	ldr	r3, [pc, #108]	; (80036f0 <HAL_TIM_PWM_MspInit+0x284>)
 8003682:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003686:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8003688:	4b19      	ldr	r3, [pc, #100]	; (80036f0 <HAL_TIM_PWM_MspInit+0x284>)
 800368a:	2200      	movs	r2, #0
 800368c:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 800368e:	4b18      	ldr	r3, [pc, #96]	; (80036f0 <HAL_TIM_PWM_MspInit+0x284>)
 8003690:	2200      	movs	r2, #0
 8003692:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003694:	4b16      	ldr	r3, [pc, #88]	; (80036f0 <HAL_TIM_PWM_MspInit+0x284>)
 8003696:	2200      	movs	r2, #0
 8003698:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 800369a:	4815      	ldr	r0, [pc, #84]	; (80036f0 <HAL_TIM_PWM_MspInit+0x284>)
 800369c:	f002 fdcc 	bl	8006238 <HAL_DMA_Init>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 80036a6:	f7ff fb7b 	bl	8002da0 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a10      	ldr	r2, [pc, #64]	; (80036f0 <HAL_TIM_PWM_MspInit+0x284>)
 80036ae:	62da      	str	r2, [r3, #44]	; 0x2c
 80036b0:	4a0f      	ldr	r2, [pc, #60]	; (80036f0 <HAL_TIM_PWM_MspInit+0x284>)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80036b6:	2200      	movs	r2, #0
 80036b8:	2100      	movs	r1, #0
 80036ba:	201e      	movs	r0, #30
 80036bc:	f002 fd87 	bl	80061ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80036c0:	201e      	movs	r0, #30
 80036c2:	f002 fd9e 	bl	8006202 <HAL_NVIC_EnableIRQ>
}
 80036c6:	e05a      	b.n	800377e <HAL_TIM_PWM_MspInit+0x312>
 80036c8:	58024400 	.word	0x58024400
 80036cc:	58020000 	.word	0x58020000
 80036d0:	24001318 	.word	0x24001318
 80036d4:	40020028 	.word	0x40020028
 80036d8:	40000400 	.word	0x40000400
 80036dc:	24001390 	.word	0x24001390
 80036e0:	40020058 	.word	0x40020058
 80036e4:	24001408 	.word	0x24001408
 80036e8:	40020070 	.word	0x40020070
 80036ec:	40000800 	.word	0x40000800
 80036f0:	24001480 	.word	0x24001480
 80036f4:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a22      	ldr	r2, [pc, #136]	; (8003788 <HAL_TIM_PWM_MspInit+0x31c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d13d      	bne.n	800377e <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003702:	4b22      	ldr	r3, [pc, #136]	; (800378c <HAL_TIM_PWM_MspInit+0x320>)
 8003704:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003708:	4a20      	ldr	r2, [pc, #128]	; (800378c <HAL_TIM_PWM_MspInit+0x320>)
 800370a:	f043 0308 	orr.w	r3, r3, #8
 800370e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003712:	4b1e      	ldr	r3, [pc, #120]	; (800378c <HAL_TIM_PWM_MspInit+0x320>)
 8003714:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003718:	f003 0308 	and.w	r3, r3, #8
 800371c:	60bb      	str	r3, [r7, #8]
 800371e:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 8003720:	4b1b      	ldr	r3, [pc, #108]	; (8003790 <HAL_TIM_PWM_MspInit+0x324>)
 8003722:	4a1c      	ldr	r2, [pc, #112]	; (8003794 <HAL_TIM_PWM_MspInit+0x328>)
 8003724:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 8003726:	4b1a      	ldr	r3, [pc, #104]	; (8003790 <HAL_TIM_PWM_MspInit+0x324>)
 8003728:	223a      	movs	r2, #58	; 0x3a
 800372a:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800372c:	4b18      	ldr	r3, [pc, #96]	; (8003790 <HAL_TIM_PWM_MspInit+0x324>)
 800372e:	2240      	movs	r2, #64	; 0x40
 8003730:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8003732:	4b17      	ldr	r3, [pc, #92]	; (8003790 <HAL_TIM_PWM_MspInit+0x324>)
 8003734:	2200      	movs	r2, #0
 8003736:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8003738:	4b15      	ldr	r3, [pc, #84]	; (8003790 <HAL_TIM_PWM_MspInit+0x324>)
 800373a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800373e:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003740:	4b13      	ldr	r3, [pc, #76]	; (8003790 <HAL_TIM_PWM_MspInit+0x324>)
 8003742:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003746:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003748:	4b11      	ldr	r3, [pc, #68]	; (8003790 <HAL_TIM_PWM_MspInit+0x324>)
 800374a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800374e:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 8003750:	4b0f      	ldr	r3, [pc, #60]	; (8003790 <HAL_TIM_PWM_MspInit+0x324>)
 8003752:	2200      	movs	r2, #0
 8003754:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8003756:	4b0e      	ldr	r3, [pc, #56]	; (8003790 <HAL_TIM_PWM_MspInit+0x324>)
 8003758:	2200      	movs	r2, #0
 800375a:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800375c:	4b0c      	ldr	r3, [pc, #48]	; (8003790 <HAL_TIM_PWM_MspInit+0x324>)
 800375e:	2200      	movs	r2, #0
 8003760:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 8003762:	480b      	ldr	r0, [pc, #44]	; (8003790 <HAL_TIM_PWM_MspInit+0x324>)
 8003764:	f002 fd68 	bl	8006238 <HAL_DMA_Init>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 800376e:	f7ff fb17 	bl	8002da0 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a06      	ldr	r2, [pc, #24]	; (8003790 <HAL_TIM_PWM_MspInit+0x324>)
 8003776:	631a      	str	r2, [r3, #48]	; 0x30
 8003778:	4a05      	ldr	r2, [pc, #20]	; (8003790 <HAL_TIM_PWM_MspInit+0x324>)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800377e:	bf00      	nop
 8003780:	3730      	adds	r7, #48	; 0x30
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	40000c00 	.word	0x40000c00
 800378c:	58024400 	.word	0x58024400
 8003790:	240014f8 	.word	0x240014f8
 8003794:	40020040 	.word	0x40020040

08003798 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a16      	ldr	r2, [pc, #88]	; (8003800 <HAL_TIM_Base_MspInit+0x68>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d10f      	bne.n	80037ca <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80037aa:	4b16      	ldr	r3, [pc, #88]	; (8003804 <HAL_TIM_Base_MspInit+0x6c>)
 80037ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037b0:	4a14      	ldr	r2, [pc, #80]	; (8003804 <HAL_TIM_Base_MspInit+0x6c>)
 80037b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80037ba:	4b12      	ldr	r3, [pc, #72]	; (8003804 <HAL_TIM_Base_MspInit+0x6c>)
 80037bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c4:	60fb      	str	r3, [r7, #12]
 80037c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80037c8:	e013      	b.n	80037f2 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM14)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a0e      	ldr	r2, [pc, #56]	; (8003808 <HAL_TIM_Base_MspInit+0x70>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d10e      	bne.n	80037f2 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80037d4:	4b0b      	ldr	r3, [pc, #44]	; (8003804 <HAL_TIM_Base_MspInit+0x6c>)
 80037d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037da:	4a0a      	ldr	r2, [pc, #40]	; (8003804 <HAL_TIM_Base_MspInit+0x6c>)
 80037dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037e0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80037e4:	4b07      	ldr	r3, [pc, #28]	; (8003804 <HAL_TIM_Base_MspInit+0x6c>)
 80037e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ee:	60bb      	str	r3, [r7, #8]
 80037f0:	68bb      	ldr	r3, [r7, #8]
}
 80037f2:	bf00      	nop
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	40001c00 	.word	0x40001c00
 8003804:	58024400 	.word	0x58024400
 8003808:	40002000 	.word	0x40002000

0800380c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b08c      	sub	sp, #48	; 0x30
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003814:	f107 031c 	add.w	r3, r7, #28
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]
 800381c:	605a      	str	r2, [r3, #4]
 800381e:	609a      	str	r2, [r3, #8]
 8003820:	60da      	str	r2, [r3, #12]
 8003822:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800382c:	d120      	bne.n	8003870 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800382e:	4b52      	ldr	r3, [pc, #328]	; (8003978 <HAL_TIM_MspPostInit+0x16c>)
 8003830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003834:	4a50      	ldr	r2, [pc, #320]	; (8003978 <HAL_TIM_MspPostInit+0x16c>)
 8003836:	f043 0302 	orr.w	r3, r3, #2
 800383a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800383e:	4b4e      	ldr	r3, [pc, #312]	; (8003978 <HAL_TIM_MspPostInit+0x16c>)
 8003840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	61bb      	str	r3, [r7, #24]
 800384a:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800384c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003852:	2302      	movs	r3, #2
 8003854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003856:	2302      	movs	r3, #2
 8003858:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800385a:	2300      	movs	r3, #0
 800385c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800385e:	2301      	movs	r3, #1
 8003860:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003862:	f107 031c 	add.w	r3, r7, #28
 8003866:	4619      	mov	r1, r3
 8003868:	4844      	ldr	r0, [pc, #272]	; (800397c <HAL_TIM_MspPostInit+0x170>)
 800386a:	f005 f91f 	bl	8008aac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800386e:	e07f      	b.n	8003970 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a42      	ldr	r2, [pc, #264]	; (8003980 <HAL_TIM_MspPostInit+0x174>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d11f      	bne.n	80038ba <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800387a:	4b3f      	ldr	r3, [pc, #252]	; (8003978 <HAL_TIM_MspPostInit+0x16c>)
 800387c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003880:	4a3d      	ldr	r2, [pc, #244]	; (8003978 <HAL_TIM_MspPostInit+0x16c>)
 8003882:	f043 0302 	orr.w	r3, r3, #2
 8003886:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800388a:	4b3b      	ldr	r3, [pc, #236]	; (8003978 <HAL_TIM_MspPostInit+0x16c>)
 800388c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	617b      	str	r3, [r7, #20]
 8003896:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003898:	2330      	movs	r3, #48	; 0x30
 800389a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800389c:	2302      	movs	r3, #2
 800389e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80038a0:	2302      	movs	r3, #2
 80038a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038a4:	2300      	movs	r3, #0
 80038a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80038a8:	2302      	movs	r3, #2
 80038aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038ac:	f107 031c 	add.w	r3, r7, #28
 80038b0:	4619      	mov	r1, r3
 80038b2:	4832      	ldr	r0, [pc, #200]	; (800397c <HAL_TIM_MspPostInit+0x170>)
 80038b4:	f005 f8fa 	bl	8008aac <HAL_GPIO_Init>
}
 80038b8:	e05a      	b.n	8003970 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a31      	ldr	r2, [pc, #196]	; (8003984 <HAL_TIM_MspPostInit+0x178>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d131      	bne.n	8003928 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80038c4:	4b2c      	ldr	r3, [pc, #176]	; (8003978 <HAL_TIM_MspPostInit+0x16c>)
 80038c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038ca:	4a2b      	ldr	r2, [pc, #172]	; (8003978 <HAL_TIM_MspPostInit+0x16c>)
 80038cc:	f043 0308 	orr.w	r3, r3, #8
 80038d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038d4:	4b28      	ldr	r3, [pc, #160]	; (8003978 <HAL_TIM_MspPostInit+0x16c>)
 80038d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038da:	f003 0308 	and.w	r3, r3, #8
 80038de:	613b      	str	r3, [r7, #16]
 80038e0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80038e2:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80038e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e8:	2302      	movs	r3, #2
 80038ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ec:	2300      	movs	r3, #0
 80038ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038f0:	2300      	movs	r3, #0
 80038f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80038f4:	2302      	movs	r3, #2
 80038f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038f8:	f107 031c 	add.w	r3, r7, #28
 80038fc:	4619      	mov	r1, r3
 80038fe:	4822      	ldr	r0, [pc, #136]	; (8003988 <HAL_TIM_MspPostInit+0x17c>)
 8003900:	f005 f8d4 	bl	8008aac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003904:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800390a:	2302      	movs	r3, #2
 800390c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800390e:	2302      	movs	r3, #2
 8003910:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003912:	2300      	movs	r3, #0
 8003914:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003916:	2302      	movs	r3, #2
 8003918:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800391a:	f107 031c 	add.w	r3, r7, #28
 800391e:	4619      	mov	r1, r3
 8003920:	4819      	ldr	r0, [pc, #100]	; (8003988 <HAL_TIM_MspPostInit+0x17c>)
 8003922:	f005 f8c3 	bl	8008aac <HAL_GPIO_Init>
}
 8003926:	e023      	b.n	8003970 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a17      	ldr	r2, [pc, #92]	; (800398c <HAL_TIM_MspPostInit+0x180>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d11e      	bne.n	8003970 <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003932:	4b11      	ldr	r3, [pc, #68]	; (8003978 <HAL_TIM_MspPostInit+0x16c>)
 8003934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003938:	4a0f      	ldr	r2, [pc, #60]	; (8003978 <HAL_TIM_MspPostInit+0x16c>)
 800393a:	f043 0301 	orr.w	r3, r3, #1
 800393e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003942:	4b0d      	ldr	r3, [pc, #52]	; (8003978 <HAL_TIM_MspPostInit+0x16c>)
 8003944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003950:	2308      	movs	r3, #8
 8003952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003954:	2302      	movs	r3, #2
 8003956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003958:	2302      	movs	r3, #2
 800395a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800395c:	2300      	movs	r3, #0
 800395e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003960:	2302      	movs	r3, #2
 8003962:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003964:	f107 031c 	add.w	r3, r7, #28
 8003968:	4619      	mov	r1, r3
 800396a:	4809      	ldr	r0, [pc, #36]	; (8003990 <HAL_TIM_MspPostInit+0x184>)
 800396c:	f005 f89e 	bl	8008aac <HAL_GPIO_Init>
}
 8003970:	bf00      	nop
 8003972:	3730      	adds	r7, #48	; 0x30
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	58024400 	.word	0x58024400
 800397c:	58020400 	.word	0x58020400
 8003980:	40000400 	.word	0x40000400
 8003984:	40000800 	.word	0x40000800
 8003988:	58020c00 	.word	0x58020c00
 800398c:	40000c00 	.word	0x40000c00
 8003990:	58020000 	.word	0x58020000

08003994 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b0ba      	sub	sp, #232	; 0xe8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800399c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	605a      	str	r2, [r3, #4]
 80039a6:	609a      	str	r2, [r3, #8]
 80039a8:	60da      	str	r2, [r3, #12]
 80039aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80039ac:	f107 0318 	add.w	r3, r7, #24
 80039b0:	22b8      	movs	r2, #184	; 0xb8
 80039b2:	2100      	movs	r1, #0
 80039b4:	4618      	mov	r0, r3
 80039b6:	f017 fa19 	bl	801adec <memset>
  if(huart->Instance==UART4)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a4d      	ldr	r2, [pc, #308]	; (8003af4 <HAL_UART_MspInit+0x160>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d147      	bne.n	8003a54 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80039c4:	f04f 0202 	mov.w	r2, #2
 80039c8:	f04f 0300 	mov.w	r3, #0
 80039cc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80039d0:	2300      	movs	r3, #0
 80039d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039d6:	f107 0318 	add.w	r3, r7, #24
 80039da:	4618      	mov	r0, r3
 80039dc:	f007 fe54 	bl	800b688 <HAL_RCCEx_PeriphCLKConfig>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80039e6:	f7ff f9db 	bl	8002da0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80039ea:	4b43      	ldr	r3, [pc, #268]	; (8003af8 <HAL_UART_MspInit+0x164>)
 80039ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039f0:	4a41      	ldr	r2, [pc, #260]	; (8003af8 <HAL_UART_MspInit+0x164>)
 80039f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80039f6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80039fa:	4b3f      	ldr	r3, [pc, #252]	; (8003af8 <HAL_UART_MspInit+0x164>)
 80039fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a04:	617b      	str	r3, [r7, #20]
 8003a06:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a08:	4b3b      	ldr	r3, [pc, #236]	; (8003af8 <HAL_UART_MspInit+0x164>)
 8003a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a0e:	4a3a      	ldr	r2, [pc, #232]	; (8003af8 <HAL_UART_MspInit+0x164>)
 8003a10:	f043 0302 	orr.w	r3, r3, #2
 8003a14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a18:	4b37      	ldr	r3, [pc, #220]	; (8003af8 <HAL_UART_MspInit+0x164>)
 8003a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	613b      	str	r3, [r7, #16]
 8003a24:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003a26:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003a2a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a2e:	2302      	movs	r3, #2
 8003a30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a34:	2300      	movs	r3, #0
 8003a36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003a40:	2308      	movs	r3, #8
 8003a42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a46:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	482b      	ldr	r0, [pc, #172]	; (8003afc <HAL_UART_MspInit+0x168>)
 8003a4e:	f005 f82d 	bl	8008aac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003a52:	e04a      	b.n	8003aea <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a29      	ldr	r2, [pc, #164]	; (8003b00 <HAL_UART_MspInit+0x16c>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d145      	bne.n	8003aea <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003a5e:	f04f 0201 	mov.w	r2, #1
 8003a62:	f04f 0300 	mov.w	r3, #0
 8003a66:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a70:	f107 0318 	add.w	r3, r7, #24
 8003a74:	4618      	mov	r0, r3
 8003a76:	f007 fe07 	bl	800b688 <HAL_RCCEx_PeriphCLKConfig>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8003a80:	f7ff f98e 	bl	8002da0 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003a84:	4b1c      	ldr	r3, [pc, #112]	; (8003af8 <HAL_UART_MspInit+0x164>)
 8003a86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a8a:	4a1b      	ldr	r2, [pc, #108]	; (8003af8 <HAL_UART_MspInit+0x164>)
 8003a8c:	f043 0320 	orr.w	r3, r3, #32
 8003a90:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003a94:	4b18      	ldr	r3, [pc, #96]	; (8003af8 <HAL_UART_MspInit+0x164>)
 8003a96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a9a:	f003 0320 	and.w	r3, r3, #32
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003aa2:	4b15      	ldr	r3, [pc, #84]	; (8003af8 <HAL_UART_MspInit+0x164>)
 8003aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003aa8:	4a13      	ldr	r2, [pc, #76]	; (8003af8 <HAL_UART_MspInit+0x164>)
 8003aaa:	f043 0304 	orr.w	r3, r3, #4
 8003aae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003ab2:	4b11      	ldr	r3, [pc, #68]	; (8003af8 <HAL_UART_MspInit+0x164>)
 8003ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	60bb      	str	r3, [r7, #8]
 8003abe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003ac0:	23c0      	movs	r3, #192	; 0xc0
 8003ac2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003acc:	2300      	movs	r3, #0
 8003ace:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8003ad8:	2307      	movs	r3, #7
 8003ada:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ade:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	4807      	ldr	r0, [pc, #28]	; (8003b04 <HAL_UART_MspInit+0x170>)
 8003ae6:	f004 ffe1 	bl	8008aac <HAL_GPIO_Init>
}
 8003aea:	bf00      	nop
 8003aec:	37e8      	adds	r7, #232	; 0xe8
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	40004c00 	.word	0x40004c00
 8003af8:	58024400 	.word	0x58024400
 8003afc:	58020400 	.word	0x58020400
 8003b00:	40011400 	.word	0x40011400
 8003b04:	58020800 	.word	0x58020800

08003b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b0c:	e7fe      	b.n	8003b0c <NMI_Handler+0x4>

08003b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b12:	e7fe      	b.n	8003b12 <HardFault_Handler+0x4>

08003b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b14:	b480      	push	{r7}
 8003b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b18:	e7fe      	b.n	8003b18 <MemManage_Handler+0x4>

08003b1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b1e:	e7fe      	b.n	8003b1e <BusFault_Handler+0x4>

08003b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b24:	e7fe      	b.n	8003b24 <UsageFault_Handler+0x4>

08003b26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b26:	b480      	push	{r7}
 8003b28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b2a:	bf00      	nop
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b38:	bf00      	nop
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b42:	b480      	push	{r7}
 8003b44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b46:	bf00      	nop
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b54:	f000 fa4a 	bl	8003fec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b58:	bf00      	nop
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8003b60:	4802      	ldr	r0, [pc, #8]	; (8003b6c <DMA1_Stream0_IRQHandler+0x10>)
 8003b62:	f003 f92d 	bl	8006dc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003b66:	bf00      	nop
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	24001480 	.word	0x24001480

08003b70 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8003b74:	4802      	ldr	r0, [pc, #8]	; (8003b80 <DMA1_Stream1_IRQHandler+0x10>)
 8003b76:	f003 f923 	bl	8006dc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003b7a:	bf00      	nop
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	24001318 	.word	0x24001318

08003b84 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8003b88:	4802      	ldr	r0, [pc, #8]	; (8003b94 <DMA1_Stream2_IRQHandler+0x10>)
 8003b8a:	f003 f919 	bl	8006dc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003b8e:	bf00      	nop
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	240014f8 	.word	0x240014f8

08003b98 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003b9c:	4802      	ldr	r0, [pc, #8]	; (8003ba8 <DMA1_Stream3_IRQHandler+0x10>)
 8003b9e:	f003 f90f 	bl	8006dc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003ba2:	bf00      	nop
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	24001390 	.word	0x24001390

08003bac <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8003bb0:	4802      	ldr	r0, [pc, #8]	; (8003bbc <DMA1_Stream4_IRQHandler+0x10>)
 8003bb2:	f003 f905 	bl	8006dc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003bb6:	bf00      	nop
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	24001408 	.word	0x24001408

08003bc0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003bc4:	4802      	ldr	r0, [pc, #8]	; (8003bd0 <DMA1_Stream5_IRQHandler+0x10>)
 8003bc6:	f003 f8fb 	bl	8006dc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003bca:	bf00      	nop
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	24000d58 	.word	0x24000d58

08003bd4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003bd8:	4802      	ldr	r0, [pc, #8]	; (8003be4 <TIM4_IRQHandler+0x10>)
 8003bda:	f00c ff37 	bl	8010a4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003bde:	bf00      	nop
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	240011e8 	.word	0x240011e8

08003be8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003bec:	4802      	ldr	r0, [pc, #8]	; (8003bf8 <I2C2_EV_IRQHandler+0x10>)
 8003bee:	f005 f9c7 	bl	8008f80 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003bf2:	bf00      	nop
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	24000ee8 	.word	0x24000ee8

08003bfc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003c00:	4802      	ldr	r0, [pc, #8]	; (8003c0c <DMA2_Stream7_IRQHandler+0x10>)
 8003c02:	f003 f8dd 	bl	8006dc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003c06:	bf00      	nop
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	24000dd0 	.word	0x24000dd0

08003c10 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003c14:	4802      	ldr	r0, [pc, #8]	; (8003c20 <OTG_HS_IRQHandler+0x10>)
 8003c16:	f005 fbbd 	bl	8009394 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8003c1a:	bf00      	nop
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	24002dc4 	.word	0x24002dc4

08003c24 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8003c28:	4802      	ldr	r0, [pc, #8]	; (8003c34 <SDMMC2_IRQHandler+0x10>)
 8003c2a:	f00a fb83 	bl	800e334 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 8003c2e:	bf00      	nop
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	24000f3c 	.word	0x24000f3c

08003c38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  return 1;
 8003c3c:	2301      	movs	r3, #1
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <_kill>:

int _kill(int pid, int sig)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003c52:	f017 f893 	bl	801ad7c <__errno>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2216      	movs	r2, #22
 8003c5a:	601a      	str	r2, [r3, #0]
  return -1;
 8003c5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3708      	adds	r7, #8
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <_exit>:

void _exit (int status)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003c70:	f04f 31ff 	mov.w	r1, #4294967295
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f7ff ffe7 	bl	8003c48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003c7a:	e7fe      	b.n	8003c7a <_exit+0x12>

08003c7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	60b9      	str	r1, [r7, #8]
 8003c86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c88:	2300      	movs	r3, #0
 8003c8a:	617b      	str	r3, [r7, #20]
 8003c8c:	e00a      	b.n	8003ca4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003c8e:	f3af 8000 	nop.w
 8003c92:	4601      	mov	r1, r0
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	1c5a      	adds	r2, r3, #1
 8003c98:	60ba      	str	r2, [r7, #8]
 8003c9a:	b2ca      	uxtb	r2, r1
 8003c9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	617b      	str	r3, [r7, #20]
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	dbf0      	blt.n	8003c8e <_read+0x12>
  }

  return len;
 8003cac:	687b      	ldr	r3, [r7, #4]
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3718      	adds	r7, #24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b086      	sub	sp, #24
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	60f8      	str	r0, [r7, #12]
 8003cbe:	60b9      	str	r1, [r7, #8]
 8003cc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	617b      	str	r3, [r7, #20]
 8003cc6:	e009      	b.n	8003cdc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	1c5a      	adds	r2, r3, #1
 8003ccc:	60ba      	str	r2, [r7, #8]
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	617b      	str	r3, [r7, #20]
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	dbf1      	blt.n	8003cc8 <_write+0x12>
  }
  return len;
 8003ce4:	687b      	ldr	r3, [r7, #4]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3718      	adds	r7, #24
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <_close>:

int _close(int file)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b083      	sub	sp, #12
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003cf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
 8003d0e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d16:	605a      	str	r2, [r3, #4]
  return 0;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <_isatty>:

int _isatty(int file)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003d2e:	2301      	movs	r3, #1
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3714      	adds	r7, #20
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
	...

08003d58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d60:	4a14      	ldr	r2, [pc, #80]	; (8003db4 <_sbrk+0x5c>)
 8003d62:	4b15      	ldr	r3, [pc, #84]	; (8003db8 <_sbrk+0x60>)
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d6c:	4b13      	ldr	r3, [pc, #76]	; (8003dbc <_sbrk+0x64>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d102      	bne.n	8003d7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d74:	4b11      	ldr	r3, [pc, #68]	; (8003dbc <_sbrk+0x64>)
 8003d76:	4a12      	ldr	r2, [pc, #72]	; (8003dc0 <_sbrk+0x68>)
 8003d78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d7a:	4b10      	ldr	r3, [pc, #64]	; (8003dbc <_sbrk+0x64>)
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4413      	add	r3, r2
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d207      	bcs.n	8003d98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d88:	f016 fff8 	bl	801ad7c <__errno>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	220c      	movs	r2, #12
 8003d90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d92:	f04f 33ff 	mov.w	r3, #4294967295
 8003d96:	e009      	b.n	8003dac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d98:	4b08      	ldr	r3, [pc, #32]	; (8003dbc <_sbrk+0x64>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d9e:	4b07      	ldr	r3, [pc, #28]	; (8003dbc <_sbrk+0x64>)
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4413      	add	r3, r2
 8003da6:	4a05      	ldr	r2, [pc, #20]	; (8003dbc <_sbrk+0x64>)
 8003da8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003daa:	68fb      	ldr	r3, [r7, #12]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3718      	adds	r7, #24
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	24050000 	.word	0x24050000
 8003db8:	00000800 	.word	0x00000800
 8003dbc:	24001698 	.word	0x24001698
 8003dc0:	24003500 	.word	0x24003500

08003dc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003dc8:	4b32      	ldr	r3, [pc, #200]	; (8003e94 <SystemInit+0xd0>)
 8003dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dce:	4a31      	ldr	r2, [pc, #196]	; (8003e94 <SystemInit+0xd0>)
 8003dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003dd8:	4b2f      	ldr	r3, [pc, #188]	; (8003e98 <SystemInit+0xd4>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 030f 	and.w	r3, r3, #15
 8003de0:	2b06      	cmp	r3, #6
 8003de2:	d807      	bhi.n	8003df4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003de4:	4b2c      	ldr	r3, [pc, #176]	; (8003e98 <SystemInit+0xd4>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f023 030f 	bic.w	r3, r3, #15
 8003dec:	4a2a      	ldr	r2, [pc, #168]	; (8003e98 <SystemInit+0xd4>)
 8003dee:	f043 0307 	orr.w	r3, r3, #7
 8003df2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003df4:	4b29      	ldr	r3, [pc, #164]	; (8003e9c <SystemInit+0xd8>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a28      	ldr	r2, [pc, #160]	; (8003e9c <SystemInit+0xd8>)
 8003dfa:	f043 0301 	orr.w	r3, r3, #1
 8003dfe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003e00:	4b26      	ldr	r3, [pc, #152]	; (8003e9c <SystemInit+0xd8>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003e06:	4b25      	ldr	r3, [pc, #148]	; (8003e9c <SystemInit+0xd8>)
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	4924      	ldr	r1, [pc, #144]	; (8003e9c <SystemInit+0xd8>)
 8003e0c:	4b24      	ldr	r3, [pc, #144]	; (8003ea0 <SystemInit+0xdc>)
 8003e0e:	4013      	ands	r3, r2
 8003e10:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003e12:	4b21      	ldr	r3, [pc, #132]	; (8003e98 <SystemInit+0xd4>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0308 	and.w	r3, r3, #8
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d007      	beq.n	8003e2e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003e1e:	4b1e      	ldr	r3, [pc, #120]	; (8003e98 <SystemInit+0xd4>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f023 030f 	bic.w	r3, r3, #15
 8003e26:	4a1c      	ldr	r2, [pc, #112]	; (8003e98 <SystemInit+0xd4>)
 8003e28:	f043 0307 	orr.w	r3, r3, #7
 8003e2c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003e2e:	4b1b      	ldr	r3, [pc, #108]	; (8003e9c <SystemInit+0xd8>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003e34:	4b19      	ldr	r3, [pc, #100]	; (8003e9c <SystemInit+0xd8>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003e3a:	4b18      	ldr	r3, [pc, #96]	; (8003e9c <SystemInit+0xd8>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003e40:	4b16      	ldr	r3, [pc, #88]	; (8003e9c <SystemInit+0xd8>)
 8003e42:	4a18      	ldr	r2, [pc, #96]	; (8003ea4 <SystemInit+0xe0>)
 8003e44:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003e46:	4b15      	ldr	r3, [pc, #84]	; (8003e9c <SystemInit+0xd8>)
 8003e48:	4a17      	ldr	r2, [pc, #92]	; (8003ea8 <SystemInit+0xe4>)
 8003e4a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003e4c:	4b13      	ldr	r3, [pc, #76]	; (8003e9c <SystemInit+0xd8>)
 8003e4e:	4a17      	ldr	r2, [pc, #92]	; (8003eac <SystemInit+0xe8>)
 8003e50:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003e52:	4b12      	ldr	r3, [pc, #72]	; (8003e9c <SystemInit+0xd8>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003e58:	4b10      	ldr	r3, [pc, #64]	; (8003e9c <SystemInit+0xd8>)
 8003e5a:	4a14      	ldr	r2, [pc, #80]	; (8003eac <SystemInit+0xe8>)
 8003e5c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003e5e:	4b0f      	ldr	r3, [pc, #60]	; (8003e9c <SystemInit+0xd8>)
 8003e60:	2200      	movs	r2, #0
 8003e62:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003e64:	4b0d      	ldr	r3, [pc, #52]	; (8003e9c <SystemInit+0xd8>)
 8003e66:	4a11      	ldr	r2, [pc, #68]	; (8003eac <SystemInit+0xe8>)
 8003e68:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003e6a:	4b0c      	ldr	r3, [pc, #48]	; (8003e9c <SystemInit+0xd8>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003e70:	4b0a      	ldr	r3, [pc, #40]	; (8003e9c <SystemInit+0xd8>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a09      	ldr	r2, [pc, #36]	; (8003e9c <SystemInit+0xd8>)
 8003e76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e7a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003e7c:	4b07      	ldr	r3, [pc, #28]	; (8003e9c <SystemInit+0xd8>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003e82:	4b0b      	ldr	r3, [pc, #44]	; (8003eb0 <SystemInit+0xec>)
 8003e84:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003e88:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003e8a:	bf00      	nop
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr
 8003e94:	e000ed00 	.word	0xe000ed00
 8003e98:	52002000 	.word	0x52002000
 8003e9c:	58024400 	.word	0x58024400
 8003ea0:	eaf6ed7f 	.word	0xeaf6ed7f
 8003ea4:	02020200 	.word	0x02020200
 8003ea8:	01ff0000 	.word	0x01ff0000
 8003eac:	01010280 	.word	0x01010280
 8003eb0:	52004000 	.word	0x52004000

08003eb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003eb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003eec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003eb8:	f7ff ff84 	bl	8003dc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ebc:	480c      	ldr	r0, [pc, #48]	; (8003ef0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003ebe:	490d      	ldr	r1, [pc, #52]	; (8003ef4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003ec0:	4a0d      	ldr	r2, [pc, #52]	; (8003ef8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ec4:	e002      	b.n	8003ecc <LoopCopyDataInit>

08003ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003eca:	3304      	adds	r3, #4

08003ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ed0:	d3f9      	bcc.n	8003ec6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ed2:	4a0a      	ldr	r2, [pc, #40]	; (8003efc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003ed4:	4c0a      	ldr	r4, [pc, #40]	; (8003f00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ed8:	e001      	b.n	8003ede <LoopFillZerobss>

08003eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003edc:	3204      	adds	r2, #4

08003ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ee0:	d3fb      	bcc.n	8003eda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003ee2:	f016 ff51 	bl	801ad88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ee6:	f7fd fb41 	bl	800156c <main>
  bx  lr
 8003eea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003eec:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003ef0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003ef4:	240002d4 	.word	0x240002d4
  ldr r2, =_sidata
 8003ef8:	080200fc 	.word	0x080200fc
  ldr r2, =_sbss
 8003efc:	240002d4 	.word	0x240002d4
  ldr r4, =_ebss
 8003f00:	24003500 	.word	0x24003500

08003f04 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f04:	e7fe      	b.n	8003f04 <ADC3_IRQHandler>
	...

08003f08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f0e:	2003      	movs	r0, #3
 8003f10:	f002 f952 	bl	80061b8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003f14:	f007 f9e2 	bl	800b2dc <HAL_RCC_GetSysClockFreq>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	4b15      	ldr	r3, [pc, #84]	; (8003f70 <HAL_Init+0x68>)
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	0a1b      	lsrs	r3, r3, #8
 8003f20:	f003 030f 	and.w	r3, r3, #15
 8003f24:	4913      	ldr	r1, [pc, #76]	; (8003f74 <HAL_Init+0x6c>)
 8003f26:	5ccb      	ldrb	r3, [r1, r3]
 8003f28:	f003 031f 	and.w	r3, r3, #31
 8003f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f30:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003f32:	4b0f      	ldr	r3, [pc, #60]	; (8003f70 <HAL_Init+0x68>)
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	f003 030f 	and.w	r3, r3, #15
 8003f3a:	4a0e      	ldr	r2, [pc, #56]	; (8003f74 <HAL_Init+0x6c>)
 8003f3c:	5cd3      	ldrb	r3, [r2, r3]
 8003f3e:	f003 031f 	and.w	r3, r3, #31
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	fa22 f303 	lsr.w	r3, r2, r3
 8003f48:	4a0b      	ldr	r2, [pc, #44]	; (8003f78 <HAL_Init+0x70>)
 8003f4a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003f4c:	4a0b      	ldr	r2, [pc, #44]	; (8003f7c <HAL_Init+0x74>)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f52:	200f      	movs	r0, #15
 8003f54:	f000 f814 	bl	8003f80 <HAL_InitTick>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e002      	b.n	8003f68 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003f62:	f7fe ff23 	bl	8002dac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3708      	adds	r7, #8
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	58024400 	.word	0x58024400
 8003f74:	0801f7b0 	.word	0x0801f7b0
 8003f78:	24000004 	.word	0x24000004
 8003f7c:	24000000 	.word	0x24000000

08003f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003f88:	4b15      	ldr	r3, [pc, #84]	; (8003fe0 <HAL_InitTick+0x60>)
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e021      	b.n	8003fd8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003f94:	4b13      	ldr	r3, [pc, #76]	; (8003fe4 <HAL_InitTick+0x64>)
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	4b11      	ldr	r3, [pc, #68]	; (8003fe0 <HAL_InitTick+0x60>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003faa:	4618      	mov	r0, r3
 8003fac:	f002 f937 	bl	800621e <HAL_SYSTICK_Config>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e00e      	b.n	8003fd8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b0f      	cmp	r3, #15
 8003fbe:	d80a      	bhi.n	8003fd6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	6879      	ldr	r1, [r7, #4]
 8003fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc8:	f002 f901 	bl	80061ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003fcc:	4a06      	ldr	r2, [pc, #24]	; (8003fe8 <HAL_InitTick+0x68>)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	e000      	b.n	8003fd8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	2400000c 	.word	0x2400000c
 8003fe4:	24000000 	.word	0x24000000
 8003fe8:	24000008 	.word	0x24000008

08003fec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003ff0:	4b06      	ldr	r3, [pc, #24]	; (800400c <HAL_IncTick+0x20>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	4b06      	ldr	r3, [pc, #24]	; (8004010 <HAL_IncTick+0x24>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	4a04      	ldr	r2, [pc, #16]	; (8004010 <HAL_IncTick+0x24>)
 8003ffe:	6013      	str	r3, [r2, #0]
}
 8004000:	bf00      	nop
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	2400000c 	.word	0x2400000c
 8004010:	2400169c 	.word	0x2400169c

08004014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
  return uwTick;
 8004018:	4b03      	ldr	r3, [pc, #12]	; (8004028 <HAL_GetTick+0x14>)
 800401a:	681b      	ldr	r3, [r3, #0]
}
 800401c:	4618      	mov	r0, r3
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	2400169c 	.word	0x2400169c

0800402c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004034:	f7ff ffee 	bl	8004014 <HAL_GetTick>
 8004038:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004044:	d005      	beq.n	8004052 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004046:	4b0a      	ldr	r3, [pc, #40]	; (8004070 <HAL_Delay+0x44>)
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	461a      	mov	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4413      	add	r3, r2
 8004050:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004052:	bf00      	nop
 8004054:	f7ff ffde 	bl	8004014 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	429a      	cmp	r2, r3
 8004062:	d8f7      	bhi.n	8004054 <HAL_Delay+0x28>
  {
  }
}
 8004064:	bf00      	nop
 8004066:	bf00      	nop
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	2400000c 	.word	0x2400000c

08004074 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 800407e:	4b07      	ldr	r3, [pc, #28]	; (800409c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	43db      	mvns	r3, r3
 8004086:	401a      	ands	r2, r3
 8004088:	4904      	ldr	r1, [pc, #16]	; (800409c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	4313      	orrs	r3, r2
 800408e:	604b      	str	r3, [r1, #4]
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	58000400 	.word	0x58000400

080040a0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	431a      	orrs	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	609a      	str	r2, [r3, #8]
}
 80040ba:	bf00      	nop
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr

080040c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b083      	sub	sp, #12
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
 80040ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	431a      	orrs	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	609a      	str	r2, [r3, #8]
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004108:	b480      	push	{r7}
 800410a:	b087      	sub	sp, #28
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
 8004114:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	3360      	adds	r3, #96	; 0x60
 800411a:	461a      	mov	r2, r3
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4413      	add	r3, r2
 8004122:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	4a10      	ldr	r2, [pc, #64]	; (8004168 <LL_ADC_SetOffset+0x60>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d10b      	bne.n	8004144 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	4313      	orrs	r3, r2
 800413a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004142:	e00b      	b.n	800415c <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	430b      	orrs	r3, r1
 8004156:	431a      	orrs	r2, r3
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	601a      	str	r2, [r3, #0]
}
 800415c:	bf00      	nop
 800415e:	371c      	adds	r7, #28
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr
 8004168:	58026000 	.word	0x58026000

0800416c <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	3360      	adds	r3, #96	; 0x60
 800417a:	461a      	mov	r2, r3
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	4413      	add	r3, r2
 8004182:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800418c:	4618      	mov	r0, r3
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004198:	b480      	push	{r7}
 800419a:	b085      	sub	sp, #20
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	f003 031f 	and.w	r3, r3, #31
 80041b2:	6879      	ldr	r1, [r7, #4]
 80041b4:	fa01 f303 	lsl.w	r3, r1, r3
 80041b8:	431a      	orrs	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	611a      	str	r2, [r3, #16]
}
 80041be:	bf00      	nop
 80041c0:	3714      	adds	r7, #20
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
	...

080041cc <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b087      	sub	sp, #28
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	4a0c      	ldr	r2, [pc, #48]	; (800420c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d00e      	beq.n	80041fe <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	3360      	adds	r3, #96	; 0x60
 80041e4:	461a      	mov	r2, r3
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4413      	add	r3, r2
 80041ec:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	431a      	orrs	r2, r3
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	601a      	str	r2, [r3, #0]
  }
}
 80041fe:	bf00      	nop
 8004200:	371c      	adds	r7, #28
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	58026000 	.word	0x58026000

08004210 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004210:	b480      	push	{r7}
 8004212:	b087      	sub	sp, #28
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	4a0c      	ldr	r2, [pc, #48]	; (8004250 <LL_ADC_SetOffsetSaturation+0x40>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d10e      	bne.n	8004242 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	3360      	adds	r3, #96	; 0x60
 8004228:	461a      	mov	r2, r3
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	4413      	add	r3, r2
 8004230:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	431a      	orrs	r2, r3
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8004242:	bf00      	nop
 8004244:	371c      	adds	r7, #28
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	58026000 	.word	0x58026000

08004254 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004254:	b480      	push	{r7}
 8004256:	b087      	sub	sp, #28
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	4a0c      	ldr	r2, [pc, #48]	; (8004294 <LL_ADC_SetOffsetSign+0x40>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d10e      	bne.n	8004286 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	3360      	adds	r3, #96	; 0x60
 800426c:	461a      	mov	r2, r3
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4413      	add	r3, r2
 8004274:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	431a      	orrs	r2, r3
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8004286:	bf00      	nop
 8004288:	371c      	adds	r7, #28
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	58026000 	.word	0x58026000

08004298 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004298:	b480      	push	{r7}
 800429a:	b087      	sub	sp, #28
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	3360      	adds	r3, #96	; 0x60
 80042a8:	461a      	mov	r2, r3
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	4413      	add	r3, r2
 80042b0:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	4a0c      	ldr	r2, [pc, #48]	; (80042e8 <LL_ADC_SetOffsetState+0x50>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d108      	bne.n	80042cc <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	431a      	orrs	r2, r3
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80042ca:	e007      	b.n	80042dc <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	431a      	orrs	r2, r3
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	601a      	str	r2, [r3, #0]
}
 80042dc:	bf00      	nop
 80042de:	371c      	adds	r7, #28
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr
 80042e8:	58026000 	.word	0x58026000

080042ec <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d101      	bne.n	8004304 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004300:	2301      	movs	r3, #1
 8004302:	e000      	b.n	8004306 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	370c      	adds	r7, #12
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr

08004312 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004312:	b480      	push	{r7}
 8004314:	b087      	sub	sp, #28
 8004316:	af00      	add	r7, sp, #0
 8004318:	60f8      	str	r0, [r7, #12]
 800431a:	60b9      	str	r1, [r7, #8]
 800431c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	3330      	adds	r3, #48	; 0x30
 8004322:	461a      	mov	r2, r3
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	0a1b      	lsrs	r3, r3, #8
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	f003 030c 	and.w	r3, r3, #12
 800432e:	4413      	add	r3, r2
 8004330:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	f003 031f 	and.w	r3, r3, #31
 800433c:	211f      	movs	r1, #31
 800433e:	fa01 f303 	lsl.w	r3, r1, r3
 8004342:	43db      	mvns	r3, r3
 8004344:	401a      	ands	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	0e9b      	lsrs	r3, r3, #26
 800434a:	f003 011f 	and.w	r1, r3, #31
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	f003 031f 	and.w	r3, r3, #31
 8004354:	fa01 f303 	lsl.w	r3, r1, r3
 8004358:	431a      	orrs	r2, r3
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800435e:	bf00      	nop
 8004360:	371c      	adds	r7, #28
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800436a:	b480      	push	{r7}
 800436c:	b087      	sub	sp, #28
 800436e:	af00      	add	r7, sp, #0
 8004370:	60f8      	str	r0, [r7, #12]
 8004372:	60b9      	str	r1, [r7, #8]
 8004374:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	3314      	adds	r3, #20
 800437a:	461a      	mov	r2, r3
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	0e5b      	lsrs	r3, r3, #25
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	f003 0304 	and.w	r3, r3, #4
 8004386:	4413      	add	r3, r2
 8004388:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	0d1b      	lsrs	r3, r3, #20
 8004392:	f003 031f 	and.w	r3, r3, #31
 8004396:	2107      	movs	r1, #7
 8004398:	fa01 f303 	lsl.w	r3, r1, r3
 800439c:	43db      	mvns	r3, r3
 800439e:	401a      	ands	r2, r3
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	0d1b      	lsrs	r3, r3, #20
 80043a4:	f003 031f 	and.w	r3, r3, #31
 80043a8:	6879      	ldr	r1, [r7, #4]
 80043aa:	fa01 f303 	lsl.w	r3, r1, r3
 80043ae:	431a      	orrs	r2, r3
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80043b4:	bf00      	nop
 80043b6:	371c      	adds	r7, #28
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4a1a      	ldr	r2, [pc, #104]	; (8004438 <LL_ADC_SetChannelSingleDiff+0x78>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d115      	bne.n	8004400 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043e0:	43db      	mvns	r3, r3
 80043e2:	401a      	ands	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f003 0318 	and.w	r3, r3, #24
 80043ea:	4914      	ldr	r1, [pc, #80]	; (800443c <LL_ADC_SetChannelSingleDiff+0x7c>)
 80043ec:	40d9      	lsrs	r1, r3
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	400b      	ands	r3, r1
 80043f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043f6:	431a      	orrs	r2, r3
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80043fe:	e014      	b.n	800442a <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800440c:	43db      	mvns	r3, r3
 800440e:	401a      	ands	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f003 0318 	and.w	r3, r3, #24
 8004416:	4909      	ldr	r1, [pc, #36]	; (800443c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004418:	40d9      	lsrs	r1, r3
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	400b      	ands	r3, r1
 800441e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004422:	431a      	orrs	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 800442a:	bf00      	nop
 800442c:	3714      	adds	r7, #20
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	58026000 	.word	0x58026000
 800443c:	000fffff 	.word	0x000fffff

08004440 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f003 031f 	and.w	r3, r3, #31
}
 8004450:	4618      	mov	r0, r3
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 800446c:	4618      	mov	r0, r3
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	4b04      	ldr	r3, [pc, #16]	; (8004498 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004486:	4013      	ands	r3, r2
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	6093      	str	r3, [r2, #8]
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr
 8004498:	5fffffc0 	.word	0x5fffffc0

0800449c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044b0:	d101      	bne.n	80044b6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80044b2:	2301      	movs	r3, #1
 80044b4:	e000      	b.n	80044b8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689a      	ldr	r2, [r3, #8]
 80044d0:	4b05      	ldr	r3, [pc, #20]	; (80044e8 <LL_ADC_EnableInternalRegulator+0x24>)
 80044d2:	4013      	ands	r3, r2
 80044d4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	6fffffc0 	.word	0x6fffffc0

080044ec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004500:	d101      	bne.n	8004506 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004502:	2301      	movs	r3, #1
 8004504:	e000      	b.n	8004508 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689a      	ldr	r2, [r3, #8]
 8004520:	4b05      	ldr	r3, [pc, #20]	; (8004538 <LL_ADC_Enable+0x24>)
 8004522:	4013      	ands	r3, r2
 8004524:	f043 0201 	orr.w	r2, r3, #1
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	7fffffc0 	.word	0x7fffffc0

0800453c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	4b05      	ldr	r3, [pc, #20]	; (8004560 <LL_ADC_Disable+0x24>)
 800454a:	4013      	ands	r3, r2
 800454c:	f043 0202 	orr.w	r2, r3, #2
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	7fffffc0 	.word	0x7fffffc0

08004564 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	2b01      	cmp	r3, #1
 8004576:	d101      	bne.n	800457c <LL_ADC_IsEnabled+0x18>
 8004578:	2301      	movs	r3, #1
 800457a:	e000      	b.n	800457e <LL_ADC_IsEnabled+0x1a>
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800458a:	b480      	push	{r7}
 800458c:	b083      	sub	sp, #12
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b02      	cmp	r3, #2
 800459c:	d101      	bne.n	80045a2 <LL_ADC_IsDisableOngoing+0x18>
 800459e:	2301      	movs	r3, #1
 80045a0:	e000      	b.n	80045a4 <LL_ADC_IsDisableOngoing+0x1a>
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689a      	ldr	r2, [r3, #8]
 80045bc:	4b05      	ldr	r3, [pc, #20]	; (80045d4 <LL_ADC_REG_StartConversion+0x24>)
 80045be:	4013      	ands	r3, r2
 80045c0:	f043 0204 	orr.w	r2, r3, #4
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	7fffffc0 	.word	0x7fffffc0

080045d8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689a      	ldr	r2, [r3, #8]
 80045e4:	4b05      	ldr	r3, [pc, #20]	; (80045fc <LL_ADC_REG_StopConversion+0x24>)
 80045e6:	4013      	ands	r3, r2
 80045e8:	f043 0210 	orr.w	r2, r3, #16
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	7fffffc0 	.word	0x7fffffc0

08004600 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f003 0304 	and.w	r3, r3, #4
 8004610:	2b04      	cmp	r3, #4
 8004612:	d101      	bne.n	8004618 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004614:	2301      	movs	r3, #1
 8004616:	e000      	b.n	800461a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
	...

08004628 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689a      	ldr	r2, [r3, #8]
 8004634:	4b05      	ldr	r3, [pc, #20]	; (800464c <LL_ADC_INJ_StopConversion+0x24>)
 8004636:	4013      	ands	r3, r2
 8004638:	f043 0220 	orr.w	r2, r3, #32
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr
 800464c:	7fffffc0 	.word	0x7fffffc0

08004650 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f003 0308 	and.w	r3, r3, #8
 8004660:	2b08      	cmp	r3, #8
 8004662:	d101      	bne.n	8004668 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004664:	2301      	movs	r3, #1
 8004666:	e000      	b.n	800466a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
	...

08004678 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004678:	b590      	push	{r4, r7, lr}
 800467a:	b089      	sub	sp, #36	; 0x24
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004680:	2300      	movs	r3, #0
 8004682:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004684:	2300      	movs	r3, #0
 8004686:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e1ee      	b.n	8004a70 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800469c:	2b00      	cmp	r3, #0
 800469e:	d109      	bne.n	80046b4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f7fe fb9d 	bl	8002de0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7ff feef 	bl	800449c <LL_ADC_IsDeepPowerDownEnabled>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d004      	beq.n	80046ce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7ff fed5 	bl	8004478 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff ff0a 	bl	80044ec <LL_ADC_IsInternalRegulatorEnabled>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d114      	bne.n	8004708 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7ff feee 	bl	80044c4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80046e8:	4b8e      	ldr	r3, [pc, #568]	; (8004924 <HAL_ADC_Init+0x2ac>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	099b      	lsrs	r3, r3, #6
 80046ee:	4a8e      	ldr	r2, [pc, #568]	; (8004928 <HAL_ADC_Init+0x2b0>)
 80046f0:	fba2 2303 	umull	r2, r3, r2, r3
 80046f4:	099b      	lsrs	r3, r3, #6
 80046f6:	3301      	adds	r3, #1
 80046f8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80046fa:	e002      	b.n	8004702 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	3b01      	subs	r3, #1
 8004700:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d1f9      	bne.n	80046fc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4618      	mov	r0, r3
 800470e:	f7ff feed 	bl	80044ec <LL_ADC_IsInternalRegulatorEnabled>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10d      	bne.n	8004734 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800471c:	f043 0210 	orr.w	r2, r3, #16
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004728:	f043 0201 	orr.w	r2, r3, #1
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4618      	mov	r0, r3
 800473a:	f7ff ff61 	bl	8004600 <LL_ADC_REG_IsConversionOngoing>
 800473e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004744:	f003 0310 	and.w	r3, r3, #16
 8004748:	2b00      	cmp	r3, #0
 800474a:	f040 8188 	bne.w	8004a5e <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2b00      	cmp	r3, #0
 8004752:	f040 8184 	bne.w	8004a5e <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800475a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800475e:	f043 0202 	orr.w	r2, r3, #2
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4618      	mov	r0, r3
 800476c:	f7ff fefa 	bl	8004564 <LL_ADC_IsEnabled>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d136      	bne.n	80047e4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a6c      	ldr	r2, [pc, #432]	; (800492c <HAL_ADC_Init+0x2b4>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d004      	beq.n	800478a <HAL_ADC_Init+0x112>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a6a      	ldr	r2, [pc, #424]	; (8004930 <HAL_ADC_Init+0x2b8>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d10e      	bne.n	80047a8 <HAL_ADC_Init+0x130>
 800478a:	4868      	ldr	r0, [pc, #416]	; (800492c <HAL_ADC_Init+0x2b4>)
 800478c:	f7ff feea 	bl	8004564 <LL_ADC_IsEnabled>
 8004790:	4604      	mov	r4, r0
 8004792:	4867      	ldr	r0, [pc, #412]	; (8004930 <HAL_ADC_Init+0x2b8>)
 8004794:	f7ff fee6 	bl	8004564 <LL_ADC_IsEnabled>
 8004798:	4603      	mov	r3, r0
 800479a:	4323      	orrs	r3, r4
 800479c:	2b00      	cmp	r3, #0
 800479e:	bf0c      	ite	eq
 80047a0:	2301      	moveq	r3, #1
 80047a2:	2300      	movne	r3, #0
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	e008      	b.n	80047ba <HAL_ADC_Init+0x142>
 80047a8:	4862      	ldr	r0, [pc, #392]	; (8004934 <HAL_ADC_Init+0x2bc>)
 80047aa:	f7ff fedb 	bl	8004564 <LL_ADC_IsEnabled>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	bf0c      	ite	eq
 80047b4:	2301      	moveq	r3, #1
 80047b6:	2300      	movne	r3, #0
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d012      	beq.n	80047e4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a5a      	ldr	r2, [pc, #360]	; (800492c <HAL_ADC_Init+0x2b4>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d004      	beq.n	80047d2 <HAL_ADC_Init+0x15a>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a58      	ldr	r2, [pc, #352]	; (8004930 <HAL_ADC_Init+0x2b8>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d101      	bne.n	80047d6 <HAL_ADC_Init+0x15e>
 80047d2:	4a59      	ldr	r2, [pc, #356]	; (8004938 <HAL_ADC_Init+0x2c0>)
 80047d4:	e000      	b.n	80047d8 <HAL_ADC_Init+0x160>
 80047d6:	4a59      	ldr	r2, [pc, #356]	; (800493c <HAL_ADC_Init+0x2c4>)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	4619      	mov	r1, r3
 80047de:	4610      	mov	r0, r2
 80047e0:	f7ff fc5e 	bl	80040a0 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a52      	ldr	r2, [pc, #328]	; (8004934 <HAL_ADC_Init+0x2bc>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d129      	bne.n	8004842 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	7e5b      	ldrb	r3, [r3, #25]
 80047f2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80047f8:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80047fe:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	2b08      	cmp	r3, #8
 8004806:	d013      	beq.n	8004830 <HAL_ADC_Init+0x1b8>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	2b0c      	cmp	r3, #12
 800480e:	d00d      	beq.n	800482c <HAL_ADC_Init+0x1b4>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	2b1c      	cmp	r3, #28
 8004816:	d007      	beq.n	8004828 <HAL_ADC_Init+0x1b0>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	2b18      	cmp	r3, #24
 800481e:	d101      	bne.n	8004824 <HAL_ADC_Init+0x1ac>
 8004820:	2318      	movs	r3, #24
 8004822:	e006      	b.n	8004832 <HAL_ADC_Init+0x1ba>
 8004824:	2300      	movs	r3, #0
 8004826:	e004      	b.n	8004832 <HAL_ADC_Init+0x1ba>
 8004828:	2310      	movs	r3, #16
 800482a:	e002      	b.n	8004832 <HAL_ADC_Init+0x1ba>
 800482c:	2308      	movs	r3, #8
 800482e:	e000      	b.n	8004832 <HAL_ADC_Init+0x1ba>
 8004830:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8004832:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 3020 	ldrb.w	r3, [r3, #32]
 800483a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800483c:	4313      	orrs	r3, r2
 800483e:	61bb      	str	r3, [r7, #24]
 8004840:	e00e      	b.n	8004860 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	7e5b      	ldrb	r3, [r3, #25]
 8004846:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800484c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004852:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 3020 	ldrb.w	r3, [r3, #32]
 800485a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800485c:	4313      	orrs	r3, r2
 800485e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d106      	bne.n	8004878 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	3b01      	subs	r3, #1
 8004870:	045b      	lsls	r3, r3, #17
 8004872:	69ba      	ldr	r2, [r7, #24]
 8004874:	4313      	orrs	r3, r2
 8004876:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487c:	2b00      	cmp	r3, #0
 800487e:	d009      	beq.n	8004894 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004884:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	4313      	orrs	r3, r2
 8004892:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a26      	ldr	r2, [pc, #152]	; (8004934 <HAL_ADC_Init+0x2bc>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d115      	bne.n	80048ca <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68da      	ldr	r2, [r3, #12]
 80048a4:	4b26      	ldr	r3, [pc, #152]	; (8004940 <HAL_ADC_Init+0x2c8>)
 80048a6:	4013      	ands	r3, r2
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	6812      	ldr	r2, [r2, #0]
 80048ac:	69b9      	ldr	r1, [r7, #24]
 80048ae:	430b      	orrs	r3, r1
 80048b0:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	430a      	orrs	r2, r1
 80048c6:	611a      	str	r2, [r3, #16]
 80048c8:	e009      	b.n	80048de <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68da      	ldr	r2, [r3, #12]
 80048d0:	4b1c      	ldr	r3, [pc, #112]	; (8004944 <HAL_ADC_Init+0x2cc>)
 80048d2:	4013      	ands	r3, r2
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	6812      	ldr	r2, [r2, #0]
 80048d8:	69b9      	ldr	r1, [r7, #24]
 80048da:	430b      	orrs	r3, r1
 80048dc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7ff fe8c 	bl	8004600 <LL_ADC_REG_IsConversionOngoing>
 80048e8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7ff feae 	bl	8004650 <LL_ADC_INJ_IsConversionOngoing>
 80048f4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f040 808e 	bne.w	8004a1a <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2b00      	cmp	r3, #0
 8004902:	f040 808a 	bne.w	8004a1a <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a0a      	ldr	r2, [pc, #40]	; (8004934 <HAL_ADC_Init+0x2bc>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d11b      	bne.n	8004948 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	7e1b      	ldrb	r3, [r3, #24]
 8004914:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800491c:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800491e:	4313      	orrs	r3, r2
 8004920:	61bb      	str	r3, [r7, #24]
 8004922:	e018      	b.n	8004956 <HAL_ADC_Init+0x2de>
 8004924:	24000000 	.word	0x24000000
 8004928:	053e2d63 	.word	0x053e2d63
 800492c:	40022000 	.word	0x40022000
 8004930:	40022100 	.word	0x40022100
 8004934:	58026000 	.word	0x58026000
 8004938:	40022300 	.word	0x40022300
 800493c:	58026300 	.word	0x58026300
 8004940:	fff04007 	.word	0xfff04007
 8004944:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	7e1b      	ldrb	r3, [r3, #24]
 800494c:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8004952:	4313      	orrs	r3, r2
 8004954:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68da      	ldr	r2, [r3, #12]
 800495c:	4b46      	ldr	r3, [pc, #280]	; (8004a78 <HAL_ADC_Init+0x400>)
 800495e:	4013      	ands	r3, r2
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	6812      	ldr	r2, [r2, #0]
 8004964:	69b9      	ldr	r1, [r7, #24]
 8004966:	430b      	orrs	r3, r1
 8004968:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004970:	2b01      	cmp	r3, #1
 8004972:	d137      	bne.n	80049e4 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004978:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a3f      	ldr	r2, [pc, #252]	; (8004a7c <HAL_ADC_Init+0x404>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d116      	bne.n	80049b2 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	691a      	ldr	r2, [r3, #16]
 800498a:	4b3d      	ldr	r3, [pc, #244]	; (8004a80 <HAL_ADC_Init+0x408>)
 800498c:	4013      	ands	r3, r2
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004996:	4311      	orrs	r1, r2
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800499c:	4311      	orrs	r1, r2
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80049a2:	430a      	orrs	r2, r1
 80049a4:	431a      	orrs	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f042 0201 	orr.w	r2, r2, #1
 80049ae:	611a      	str	r2, [r3, #16]
 80049b0:	e020      	b.n	80049f4 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	691a      	ldr	r2, [r3, #16]
 80049b8:	4b32      	ldr	r3, [pc, #200]	; (8004a84 <HAL_ADC_Init+0x40c>)
 80049ba:	4013      	ands	r3, r2
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80049c0:	3a01      	subs	r2, #1
 80049c2:	0411      	lsls	r1, r2, #16
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80049c8:	4311      	orrs	r1, r2
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80049ce:	4311      	orrs	r1, r2
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80049d4:	430a      	orrs	r2, r1
 80049d6:	431a      	orrs	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f042 0201 	orr.w	r2, r2, #1
 80049e0:	611a      	str	r2, [r3, #16]
 80049e2:	e007      	b.n	80049f4 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	691a      	ldr	r2, [r3, #16]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 0201 	bic.w	r2, r2, #1
 80049f2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a1b      	ldr	r2, [pc, #108]	; (8004a7c <HAL_ADC_Init+0x404>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d002      	beq.n	8004a1a <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f001 f909 	bl	8005c2c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d10c      	bne.n	8004a3c <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a28:	f023 010f 	bic.w	r1, r3, #15
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	69db      	ldr	r3, [r3, #28]
 8004a30:	1e5a      	subs	r2, r3, #1
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	430a      	orrs	r2, r1
 8004a38:	631a      	str	r2, [r3, #48]	; 0x30
 8004a3a:	e007      	b.n	8004a4c <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f022 020f 	bic.w	r2, r2, #15
 8004a4a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a50:	f023 0303 	bic.w	r3, r3, #3
 8004a54:	f043 0201 	orr.w	r2, r3, #1
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	661a      	str	r2, [r3, #96]	; 0x60
 8004a5c:	e007      	b.n	8004a6e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a62:	f043 0210 	orr.w	r2, r3, #16
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004a6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3724      	adds	r7, #36	; 0x24
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd90      	pop	{r4, r7, pc}
 8004a78:	ffffbffc 	.word	0xffffbffc
 8004a7c:	58026000 	.word	0x58026000
 8004a80:	fc00f81f 	.word	0xfc00f81f
 8004a84:	fc00f81e 	.word	0xfc00f81e

08004a88 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a5c      	ldr	r2, [pc, #368]	; (8004c08 <HAL_ADC_Start+0x180>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d004      	beq.n	8004aa4 <HAL_ADC_Start+0x1c>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a5b      	ldr	r2, [pc, #364]	; (8004c0c <HAL_ADC_Start+0x184>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d101      	bne.n	8004aa8 <HAL_ADC_Start+0x20>
 8004aa4:	4b5a      	ldr	r3, [pc, #360]	; (8004c10 <HAL_ADC_Start+0x188>)
 8004aa6:	e000      	b.n	8004aaa <HAL_ADC_Start+0x22>
 8004aa8:	4b5a      	ldr	r3, [pc, #360]	; (8004c14 <HAL_ADC_Start+0x18c>)
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7ff fcc8 	bl	8004440 <LL_ADC_GetMultimode>
 8004ab0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7ff fda2 	bl	8004600 <LL_ADC_REG_IsConversionOngoing>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f040 809a 	bne.w	8004bf8 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d101      	bne.n	8004ad2 <HAL_ADC_Start+0x4a>
 8004ace:	2302      	movs	r3, #2
 8004ad0:	e095      	b.n	8004bfe <HAL_ADC_Start+0x176>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 ffbc 	bl	8005a58 <ADC_Enable>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004ae4:	7dfb      	ldrb	r3, [r7, #23]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f040 8081 	bne.w	8004bee <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004af0:	4b49      	ldr	r3, [pc, #292]	; (8004c18 <HAL_ADC_Start+0x190>)
 8004af2:	4013      	ands	r3, r2
 8004af4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a42      	ldr	r2, [pc, #264]	; (8004c0c <HAL_ADC_Start+0x184>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d002      	beq.n	8004b0c <HAL_ADC_Start+0x84>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	e000      	b.n	8004b0e <HAL_ADC_Start+0x86>
 8004b0c:	4b3e      	ldr	r3, [pc, #248]	; (8004c08 <HAL_ADC_Start+0x180>)
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	6812      	ldr	r2, [r2, #0]
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d002      	beq.n	8004b1c <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d105      	bne.n	8004b28 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b20:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b34:	d106      	bne.n	8004b44 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b3a:	f023 0206 	bic.w	r2, r3, #6
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	665a      	str	r2, [r3, #100]	; 0x64
 8004b42:	e002      	b.n	8004b4a <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	221c      	movs	r2, #28
 8004b50:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a2b      	ldr	r2, [pc, #172]	; (8004c0c <HAL_ADC_Start+0x184>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d002      	beq.n	8004b6a <HAL_ADC_Start+0xe2>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	e000      	b.n	8004b6c <HAL_ADC_Start+0xe4>
 8004b6a:	4b27      	ldr	r3, [pc, #156]	; (8004c08 <HAL_ADC_Start+0x180>)
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	6812      	ldr	r2, [r2, #0]
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d008      	beq.n	8004b86 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d005      	beq.n	8004b86 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	2b05      	cmp	r3, #5
 8004b7e:	d002      	beq.n	8004b86 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	2b09      	cmp	r3, #9
 8004b84:	d114      	bne.n	8004bb0 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d007      	beq.n	8004ba4 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b98:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004b9c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7ff fd01 	bl	80045b0 <LL_ADC_REG_StartConversion>
 8004bae:	e025      	b.n	8004bfc <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bb4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a12      	ldr	r2, [pc, #72]	; (8004c0c <HAL_ADC_Start+0x184>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d002      	beq.n	8004bcc <HAL_ADC_Start+0x144>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	e000      	b.n	8004bce <HAL_ADC_Start+0x146>
 8004bcc:	4b0e      	ldr	r3, [pc, #56]	; (8004c08 <HAL_ADC_Start+0x180>)
 8004bce:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00f      	beq.n	8004bfc <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004be0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004be4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	661a      	str	r2, [r3, #96]	; 0x60
 8004bec:	e006      	b.n	8004bfc <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8004bf6:	e001      	b.n	8004bfc <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004bf8:	2302      	movs	r3, #2
 8004bfa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004bfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3718      	adds	r7, #24
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	40022000 	.word	0x40022000
 8004c0c:	40022100 	.word	0x40022100
 8004c10:	40022300 	.word	0x40022300
 8004c14:	58026300 	.word	0x58026300
 8004c18:	fffff0fe 	.word	0xfffff0fe

08004c1c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d101      	bne.n	8004c32 <HAL_ADC_Stop+0x16>
 8004c2e:	2302      	movs	r3, #2
 8004c30:	e021      	b.n	8004c76 <HAL_ADC_Stop+0x5a>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8004c3a:	2103      	movs	r1, #3
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 fe4f 	bl	80058e0 <ADC_ConversionStop>
 8004c42:	4603      	mov	r3, r0
 8004c44:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004c46:	7bfb      	ldrb	r3, [r7, #15]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10f      	bne.n	8004c6c <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 ff8d 	bl	8005b6c <ADC_Disable>
 8004c52:	4603      	mov	r3, r0
 8004c54:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004c56:	7bfb      	ldrb	r3, [r7, #15]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d107      	bne.n	8004c6c <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004c60:	4b07      	ldr	r3, [pc, #28]	; (8004c80 <HAL_ADC_Stop+0x64>)
 8004c62:	4013      	ands	r3, r2
 8004c64:	f043 0201 	orr.w	r2, r3, #1
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	ffffeefe 	.word	0xffffeefe

08004c84 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b088      	sub	sp, #32
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a72      	ldr	r2, [pc, #456]	; (8004e5c <HAL_ADC_PollForConversion+0x1d8>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d004      	beq.n	8004ca2 <HAL_ADC_PollForConversion+0x1e>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a70      	ldr	r2, [pc, #448]	; (8004e60 <HAL_ADC_PollForConversion+0x1dc>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d101      	bne.n	8004ca6 <HAL_ADC_PollForConversion+0x22>
 8004ca2:	4b70      	ldr	r3, [pc, #448]	; (8004e64 <HAL_ADC_PollForConversion+0x1e0>)
 8004ca4:	e000      	b.n	8004ca8 <HAL_ADC_PollForConversion+0x24>
 8004ca6:	4b70      	ldr	r3, [pc, #448]	; (8004e68 <HAL_ADC_PollForConversion+0x1e4>)
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7ff fbc9 	bl	8004440 <LL_ADC_GetMultimode>
 8004cae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	2b08      	cmp	r3, #8
 8004cb6:	d102      	bne.n	8004cbe <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8004cb8:	2308      	movs	r3, #8
 8004cba:	61fb      	str	r3, [r7, #28]
 8004cbc:	e037      	b.n	8004d2e <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d005      	beq.n	8004cd0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	2b05      	cmp	r3, #5
 8004cc8:	d002      	beq.n	8004cd0 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	2b09      	cmp	r3, #9
 8004cce:	d111      	bne.n	8004cf4 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d007      	beq.n	8004cee <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ce2:	f043 0220 	orr.w	r2, r3, #32
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e0b1      	b.n	8004e52 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004cee:	2304      	movs	r3, #4
 8004cf0:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8004cf2:	e01c      	b.n	8004d2e <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a58      	ldr	r2, [pc, #352]	; (8004e5c <HAL_ADC_PollForConversion+0x1d8>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d004      	beq.n	8004d08 <HAL_ADC_PollForConversion+0x84>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a57      	ldr	r2, [pc, #348]	; (8004e60 <HAL_ADC_PollForConversion+0x1dc>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d101      	bne.n	8004d0c <HAL_ADC_PollForConversion+0x88>
 8004d08:	4b56      	ldr	r3, [pc, #344]	; (8004e64 <HAL_ADC_PollForConversion+0x1e0>)
 8004d0a:	e000      	b.n	8004d0e <HAL_ADC_PollForConversion+0x8a>
 8004d0c:	4b56      	ldr	r3, [pc, #344]	; (8004e68 <HAL_ADC_PollForConversion+0x1e4>)
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7ff fba4 	bl	800445c <LL_ADC_GetMultiDMATransfer>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d007      	beq.n	8004d2a <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d1e:	f043 0220 	orr.w	r2, r3, #32
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e093      	b.n	8004e52 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8004d2a:	2304      	movs	r3, #4
 8004d2c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004d2e:	f7ff f971 	bl	8004014 <HAL_GetTick>
 8004d32:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004d34:	e021      	b.n	8004d7a <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d3c:	d01d      	beq.n	8004d7a <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004d3e:	f7ff f969 	bl	8004014 <HAL_GetTick>
 8004d42:	4602      	mov	r2, r0
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	683a      	ldr	r2, [r7, #0]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d302      	bcc.n	8004d54 <HAL_ADC_PollForConversion+0xd0>
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d112      	bne.n	8004d7a <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d10b      	bne.n	8004d7a <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d66:	f043 0204 	orr.w	r2, r3, #4
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	661a      	str	r2, [r3, #96]	; 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

          return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e06b      	b.n	8004e52 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	69fb      	ldr	r3, [r7, #28]
 8004d82:	4013      	ands	r3, r2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d0d6      	beq.n	8004d36 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d8c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	661a      	str	r2, [r3, #96]	; 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7ff faa7 	bl	80042ec <LL_ADC_REG_IsTriggerSourceSWStart>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d01c      	beq.n	8004dde <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	7e5b      	ldrb	r3, [r3, #25]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d118      	bne.n	8004dde <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0308 	and.w	r3, r3, #8
 8004db6:	2b08      	cmp	r3, #8
 8004db8:	d111      	bne.n	8004dde <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	661a      	str	r2, [r3, #96]	; 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d105      	bne.n	8004dde <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dd6:	f043 0201 	orr.w	r2, r3, #1
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a1f      	ldr	r2, [pc, #124]	; (8004e60 <HAL_ADC_PollForConversion+0x1dc>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d002      	beq.n	8004dee <HAL_ADC_PollForConversion+0x16a>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	e000      	b.n	8004df0 <HAL_ADC_PollForConversion+0x16c>
 8004dee:	4b1b      	ldr	r3, [pc, #108]	; (8004e5c <HAL_ADC_PollForConversion+0x1d8>)
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	6812      	ldr	r2, [r2, #0]
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d008      	beq.n	8004e0a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d005      	beq.n	8004e0a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	2b05      	cmp	r3, #5
 8004e02:	d002      	beq.n	8004e0a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	2b09      	cmp	r3, #9
 8004e08:	d104      	bne.n	8004e14 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	61bb      	str	r3, [r7, #24]
 8004e12:	e00c      	b.n	8004e2e <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a11      	ldr	r2, [pc, #68]	; (8004e60 <HAL_ADC_PollForConversion+0x1dc>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d002      	beq.n	8004e24 <HAL_ADC_PollForConversion+0x1a0>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	e000      	b.n	8004e26 <HAL_ADC_PollForConversion+0x1a2>
 8004e24:	4b0d      	ldr	r3, [pc, #52]	; (8004e5c <HAL_ADC_PollForConversion+0x1d8>)
 8004e26:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	2b08      	cmp	r3, #8
 8004e32:	d104      	bne.n	8004e3e <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2208      	movs	r2, #8
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	e008      	b.n	8004e50 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d103      	bne.n	8004e50 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	220c      	movs	r2, #12
 8004e4e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3720      	adds	r7, #32
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	40022000 	.word	0x40022000
 8004e60:	40022100 	.word	0x40022100
 8004e64:	40022300 	.word	0x40022300
 8004e68:	58026300 	.word	0x58026300

08004e6c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	370c      	adds	r7, #12
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
	...

08004e88 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004e88:	b590      	push	{r4, r7, lr}
 8004e8a:	b0b9      	sub	sp, #228	; 0xe4
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e92:	2300      	movs	r3, #0
 8004e94:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ea2:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	4aa9      	ldr	r2, [pc, #676]	; (8005150 <HAL_ADC_ConfigChannel+0x2c8>)
 8004eaa:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d102      	bne.n	8004ebc <HAL_ADC_ConfigChannel+0x34>
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	f000 bcfa 	b.w	80058b0 <HAL_ADC_ConfigChannel+0xa28>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7ff fb99 	bl	8004600 <LL_ADC_REG_IsConversionOngoing>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f040 84de 	bne.w	8005892 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a9e      	ldr	r2, [pc, #632]	; (8005154 <HAL_ADC_ConfigChannel+0x2cc>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d033      	beq.n	8004f48 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d108      	bne.n	8004efe <HAL_ADC_ConfigChannel+0x76>
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	0e9b      	lsrs	r3, r3, #26
 8004ef2:	f003 031f 	and.w	r3, r3, #31
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8004efc:	e01d      	b.n	8004f3a <HAL_ADC_ConfigChannel+0xb2>
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004f0a:	fa93 f3a3 	rbit	r3, r3
 8004f0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004f12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004f16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004f1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8004f22:	2320      	movs	r3, #32
 8004f24:	e004      	b.n	8004f30 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8004f26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004f2a:	fab3 f383 	clz	r3, r3
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	f003 031f 	and.w	r3, r3, #31
 8004f34:	2201      	movs	r2, #1
 8004f36:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	6812      	ldr	r2, [r2, #0]
 8004f3e:	69d1      	ldr	r1, [r2, #28]
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	6812      	ldr	r2, [r2, #0]
 8004f44:	430b      	orrs	r3, r1
 8004f46:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6818      	ldr	r0, [r3, #0]
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	6859      	ldr	r1, [r3, #4]
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	461a      	mov	r2, r3
 8004f56:	f7ff f9dc 	bl	8004312 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7ff fb4e 	bl	8004600 <LL_ADC_REG_IsConversionOngoing>
 8004f64:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7ff fb6f 	bl	8004650 <LL_ADC_INJ_IsConversionOngoing>
 8004f72:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004f76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f040 8270 	bne.w	8005460 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004f80:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f040 826b 	bne.w	8005460 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6818      	ldr	r0, [r3, #0]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	6819      	ldr	r1, [r3, #0]
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	461a      	mov	r2, r3
 8004f98:	f7ff f9e7 	bl	800436a <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a6c      	ldr	r2, [pc, #432]	; (8005154 <HAL_ADC_ConfigChannel+0x2cc>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d10d      	bne.n	8004fc2 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	695a      	ldr	r2, [r3, #20]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	08db      	lsrs	r3, r3, #3
 8004fb2:	f003 0303 	and.w	r3, r3, #3
 8004fb6:	005b      	lsls	r3, r3, #1
 8004fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004fc0:	e032      	b.n	8005028 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004fc2:	4b65      	ldr	r3, [pc, #404]	; (8005158 <HAL_ADC_ConfigChannel+0x2d0>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004fca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fce:	d10b      	bne.n	8004fe8 <HAL_ADC_ConfigChannel+0x160>
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	695a      	ldr	r2, [r3, #20]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	089b      	lsrs	r3, r3, #2
 8004fdc:	f003 0307 	and.w	r3, r3, #7
 8004fe0:	005b      	lsls	r3, r3, #1
 8004fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe6:	e01d      	b.n	8005024 <HAL_ADC_ConfigChannel+0x19c>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	f003 0310 	and.w	r3, r3, #16
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10b      	bne.n	800500e <HAL_ADC_ConfigChannel+0x186>
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	695a      	ldr	r2, [r3, #20]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	089b      	lsrs	r3, r3, #2
 8005002:	f003 0307 	and.w	r3, r3, #7
 8005006:	005b      	lsls	r3, r3, #1
 8005008:	fa02 f303 	lsl.w	r3, r2, r3
 800500c:	e00a      	b.n	8005024 <HAL_ADC_ConfigChannel+0x19c>
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	695a      	ldr	r2, [r3, #20]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	089b      	lsrs	r3, r3, #2
 800501a:	f003 0304 	and.w	r3, r3, #4
 800501e:	005b      	lsls	r3, r3, #1
 8005020:	fa02 f303 	lsl.w	r3, r2, r3
 8005024:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	2b04      	cmp	r3, #4
 800502e:	d048      	beq.n	80050c2 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6818      	ldr	r0, [r3, #0]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	6919      	ldr	r1, [r3, #16]
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005040:	f7ff f862 	bl	8004108 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a42      	ldr	r2, [pc, #264]	; (8005154 <HAL_ADC_ConfigChannel+0x2cc>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d119      	bne.n	8005082 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6818      	ldr	r0, [r3, #0]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	6919      	ldr	r1, [r3, #16]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	461a      	mov	r2, r3
 800505c:	f7ff f8fa 	bl	8004254 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6818      	ldr	r0, [r3, #0]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	6919      	ldr	r1, [r3, #16]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d102      	bne.n	8005078 <HAL_ADC_ConfigChannel+0x1f0>
 8005072:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005076:	e000      	b.n	800507a <HAL_ADC_ConfigChannel+0x1f2>
 8005078:	2300      	movs	r3, #0
 800507a:	461a      	mov	r2, r3
 800507c:	f7ff f8c8 	bl	8004210 <LL_ADC_SetOffsetSaturation>
 8005080:	e1ee      	b.n	8005460 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6818      	ldr	r0, [r3, #0]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	6919      	ldr	r1, [r3, #16]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005090:	2b01      	cmp	r3, #1
 8005092:	d102      	bne.n	800509a <HAL_ADC_ConfigChannel+0x212>
 8005094:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005098:	e000      	b.n	800509c <HAL_ADC_ConfigChannel+0x214>
 800509a:	2300      	movs	r3, #0
 800509c:	461a      	mov	r2, r3
 800509e:	f7ff f895 	bl	80041cc <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6818      	ldr	r0, [r3, #0]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	6919      	ldr	r1, [r3, #16]
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	7e1b      	ldrb	r3, [r3, #24]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d102      	bne.n	80050b8 <HAL_ADC_ConfigChannel+0x230>
 80050b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80050b6:	e000      	b.n	80050ba <HAL_ADC_ConfigChannel+0x232>
 80050b8:	2300      	movs	r3, #0
 80050ba:	461a      	mov	r2, r3
 80050bc:	f7ff f86c 	bl	8004198 <LL_ADC_SetDataRightShift>
 80050c0:	e1ce      	b.n	8005460 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a23      	ldr	r2, [pc, #140]	; (8005154 <HAL_ADC_ConfigChannel+0x2cc>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	f040 8181 	bne.w	80053d0 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2100      	movs	r1, #0
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7ff f849 	bl	800416c <LL_ADC_GetOffsetChannel>
 80050da:	4603      	mov	r3, r0
 80050dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d10a      	bne.n	80050fa <HAL_ADC_ConfigChannel+0x272>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2100      	movs	r1, #0
 80050ea:	4618      	mov	r0, r3
 80050ec:	f7ff f83e 	bl	800416c <LL_ADC_GetOffsetChannel>
 80050f0:	4603      	mov	r3, r0
 80050f2:	0e9b      	lsrs	r3, r3, #26
 80050f4:	f003 021f 	and.w	r2, r3, #31
 80050f8:	e01e      	b.n	8005138 <HAL_ADC_ConfigChannel+0x2b0>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2100      	movs	r1, #0
 8005100:	4618      	mov	r0, r3
 8005102:	f7ff f833 	bl	800416c <LL_ADC_GetOffsetChannel>
 8005106:	4603      	mov	r3, r0
 8005108:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800510c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005110:	fa93 f3a3 	rbit	r3, r3
 8005114:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8005118:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800511c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8005120:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005124:	2b00      	cmp	r3, #0
 8005126:	d101      	bne.n	800512c <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8005128:	2320      	movs	r3, #32
 800512a:	e004      	b.n	8005136 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 800512c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005130:	fab3 f383 	clz	r3, r3
 8005134:	b2db      	uxtb	r3, r3
 8005136:	461a      	mov	r2, r3
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005140:	2b00      	cmp	r3, #0
 8005142:	d10b      	bne.n	800515c <HAL_ADC_ConfigChannel+0x2d4>
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	0e9b      	lsrs	r3, r3, #26
 800514a:	f003 031f 	and.w	r3, r3, #31
 800514e:	e01e      	b.n	800518e <HAL_ADC_ConfigChannel+0x306>
 8005150:	47ff0000 	.word	0x47ff0000
 8005154:	58026000 	.word	0x58026000
 8005158:	5c001000 	.word	0x5c001000
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005164:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005168:	fa93 f3a3 	rbit	r3, r3
 800516c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8005170:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005174:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8005178:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8005180:	2320      	movs	r3, #32
 8005182:	e004      	b.n	800518e <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8005184:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005188:	fab3 f383 	clz	r3, r3
 800518c:	b2db      	uxtb	r3, r3
 800518e:	429a      	cmp	r2, r3
 8005190:	d106      	bne.n	80051a0 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2200      	movs	r2, #0
 8005198:	2100      	movs	r1, #0
 800519a:	4618      	mov	r0, r3
 800519c:	f7ff f87c 	bl	8004298 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2101      	movs	r1, #1
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7fe ffe0 	bl	800416c <LL_ADC_GetOffsetChannel>
 80051ac:	4603      	mov	r3, r0
 80051ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d10a      	bne.n	80051cc <HAL_ADC_ConfigChannel+0x344>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2101      	movs	r1, #1
 80051bc:	4618      	mov	r0, r3
 80051be:	f7fe ffd5 	bl	800416c <LL_ADC_GetOffsetChannel>
 80051c2:	4603      	mov	r3, r0
 80051c4:	0e9b      	lsrs	r3, r3, #26
 80051c6:	f003 021f 	and.w	r2, r3, #31
 80051ca:	e01e      	b.n	800520a <HAL_ADC_ConfigChannel+0x382>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2101      	movs	r1, #1
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7fe ffca 	bl	800416c <LL_ADC_GetOffsetChannel>
 80051d8:	4603      	mov	r3, r0
 80051da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80051e2:	fa93 f3a3 	rbit	r3, r3
 80051e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80051ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80051ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80051f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d101      	bne.n	80051fe <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 80051fa:	2320      	movs	r3, #32
 80051fc:	e004      	b.n	8005208 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 80051fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005202:	fab3 f383 	clz	r3, r3
 8005206:	b2db      	uxtb	r3, r3
 8005208:	461a      	mov	r2, r3
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005212:	2b00      	cmp	r3, #0
 8005214:	d105      	bne.n	8005222 <HAL_ADC_ConfigChannel+0x39a>
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	0e9b      	lsrs	r3, r3, #26
 800521c:	f003 031f 	and.w	r3, r3, #31
 8005220:	e018      	b.n	8005254 <HAL_ADC_ConfigChannel+0x3cc>
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800522a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800522e:	fa93 f3a3 	rbit	r3, r3
 8005232:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8005236:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800523a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800523e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8005246:	2320      	movs	r3, #32
 8005248:	e004      	b.n	8005254 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 800524a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800524e:	fab3 f383 	clz	r3, r3
 8005252:	b2db      	uxtb	r3, r3
 8005254:	429a      	cmp	r2, r3
 8005256:	d106      	bne.n	8005266 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2200      	movs	r2, #0
 800525e:	2101      	movs	r1, #1
 8005260:	4618      	mov	r0, r3
 8005262:	f7ff f819 	bl	8004298 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2102      	movs	r1, #2
 800526c:	4618      	mov	r0, r3
 800526e:	f7fe ff7d 	bl	800416c <LL_ADC_GetOffsetChannel>
 8005272:	4603      	mov	r3, r0
 8005274:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10a      	bne.n	8005292 <HAL_ADC_ConfigChannel+0x40a>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2102      	movs	r1, #2
 8005282:	4618      	mov	r0, r3
 8005284:	f7fe ff72 	bl	800416c <LL_ADC_GetOffsetChannel>
 8005288:	4603      	mov	r3, r0
 800528a:	0e9b      	lsrs	r3, r3, #26
 800528c:	f003 021f 	and.w	r2, r3, #31
 8005290:	e01e      	b.n	80052d0 <HAL_ADC_ConfigChannel+0x448>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2102      	movs	r1, #2
 8005298:	4618      	mov	r0, r3
 800529a:	f7fe ff67 	bl	800416c <LL_ADC_GetOffsetChannel>
 800529e:	4603      	mov	r3, r0
 80052a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80052a8:	fa93 f3a3 	rbit	r3, r3
 80052ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80052b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80052b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d101      	bne.n	80052c4 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 80052c0:	2320      	movs	r3, #32
 80052c2:	e004      	b.n	80052ce <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 80052c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052c8:	fab3 f383 	clz	r3, r3
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	461a      	mov	r2, r3
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d105      	bne.n	80052e8 <HAL_ADC_ConfigChannel+0x460>
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	0e9b      	lsrs	r3, r3, #26
 80052e2:	f003 031f 	and.w	r3, r3, #31
 80052e6:	e014      	b.n	8005312 <HAL_ADC_ConfigChannel+0x48a>
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80052f0:	fa93 f3a3 	rbit	r3, r3
 80052f4:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80052f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80052fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005300:	2b00      	cmp	r3, #0
 8005302:	d101      	bne.n	8005308 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8005304:	2320      	movs	r3, #32
 8005306:	e004      	b.n	8005312 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8005308:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800530c:	fab3 f383 	clz	r3, r3
 8005310:	b2db      	uxtb	r3, r3
 8005312:	429a      	cmp	r2, r3
 8005314:	d106      	bne.n	8005324 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2200      	movs	r2, #0
 800531c:	2102      	movs	r1, #2
 800531e:	4618      	mov	r0, r3
 8005320:	f7fe ffba 	bl	8004298 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2103      	movs	r1, #3
 800532a:	4618      	mov	r0, r3
 800532c:	f7fe ff1e 	bl	800416c <LL_ADC_GetOffsetChannel>
 8005330:	4603      	mov	r3, r0
 8005332:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005336:	2b00      	cmp	r3, #0
 8005338:	d10a      	bne.n	8005350 <HAL_ADC_ConfigChannel+0x4c8>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2103      	movs	r1, #3
 8005340:	4618      	mov	r0, r3
 8005342:	f7fe ff13 	bl	800416c <LL_ADC_GetOffsetChannel>
 8005346:	4603      	mov	r3, r0
 8005348:	0e9b      	lsrs	r3, r3, #26
 800534a:	f003 021f 	and.w	r2, r3, #31
 800534e:	e017      	b.n	8005380 <HAL_ADC_ConfigChannel+0x4f8>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2103      	movs	r1, #3
 8005356:	4618      	mov	r0, r3
 8005358:	f7fe ff08 	bl	800416c <LL_ADC_GetOffsetChannel>
 800535c:	4603      	mov	r3, r0
 800535e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005360:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005362:	fa93 f3a3 	rbit	r3, r3
 8005366:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800536a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800536c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800536e:	2b00      	cmp	r3, #0
 8005370:	d101      	bne.n	8005376 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8005372:	2320      	movs	r3, #32
 8005374:	e003      	b.n	800537e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8005376:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005378:	fab3 f383 	clz	r3, r3
 800537c:	b2db      	uxtb	r3, r3
 800537e:	461a      	mov	r2, r3
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005388:	2b00      	cmp	r3, #0
 800538a:	d105      	bne.n	8005398 <HAL_ADC_ConfigChannel+0x510>
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	0e9b      	lsrs	r3, r3, #26
 8005392:	f003 031f 	and.w	r3, r3, #31
 8005396:	e011      	b.n	80053bc <HAL_ADC_ConfigChannel+0x534>
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800539e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80053a0:	fa93 f3a3 	rbit	r3, r3
 80053a4:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80053a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053a8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80053aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d101      	bne.n	80053b4 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 80053b0:	2320      	movs	r3, #32
 80053b2:	e003      	b.n	80053bc <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 80053b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053b6:	fab3 f383 	clz	r3, r3
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	429a      	cmp	r2, r3
 80053be:	d14f      	bne.n	8005460 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2200      	movs	r2, #0
 80053c6:	2103      	movs	r1, #3
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7fe ff65 	bl	8004298 <LL_ADC_SetOffsetState>
 80053ce:	e047      	b.n	8005460 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	069b      	lsls	r3, r3, #26
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d107      	bne.n	80053f4 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80053f2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	069b      	lsls	r3, r3, #26
 8005404:	429a      	cmp	r2, r3
 8005406:	d107      	bne.n	8005418 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005416:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800541e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	069b      	lsls	r3, r3, #26
 8005428:	429a      	cmp	r2, r3
 800542a:	d107      	bne.n	800543c <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800543a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005442:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	069b      	lsls	r3, r3, #26
 800544c:	429a      	cmp	r2, r3
 800544e:	d107      	bne.n	8005460 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800545e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4618      	mov	r0, r3
 8005466:	f7ff f87d 	bl	8004564 <LL_ADC_IsEnabled>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	f040 8219 	bne.w	80058a4 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6818      	ldr	r0, [r3, #0]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	6819      	ldr	r1, [r3, #0]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	461a      	mov	r2, r3
 8005480:	f7fe ff9e 	bl	80043c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	4aa1      	ldr	r2, [pc, #644]	; (8005710 <HAL_ADC_ConfigChannel+0x888>)
 800548a:	4293      	cmp	r3, r2
 800548c:	f040 812e 	bne.w	80056ec <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800549c:	2b00      	cmp	r3, #0
 800549e:	d10b      	bne.n	80054b8 <HAL_ADC_ConfigChannel+0x630>
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	0e9b      	lsrs	r3, r3, #26
 80054a6:	3301      	adds	r3, #1
 80054a8:	f003 031f 	and.w	r3, r3, #31
 80054ac:	2b09      	cmp	r3, #9
 80054ae:	bf94      	ite	ls
 80054b0:	2301      	movls	r3, #1
 80054b2:	2300      	movhi	r3, #0
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	e019      	b.n	80054ec <HAL_ADC_ConfigChannel+0x664>
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054c0:	fa93 f3a3 	rbit	r3, r3
 80054c4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80054c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80054ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d101      	bne.n	80054d4 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 80054d0:	2320      	movs	r3, #32
 80054d2:	e003      	b.n	80054dc <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 80054d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054d6:	fab3 f383 	clz	r3, r3
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	3301      	adds	r3, #1
 80054de:	f003 031f 	and.w	r3, r3, #31
 80054e2:	2b09      	cmp	r3, #9
 80054e4:	bf94      	ite	ls
 80054e6:	2301      	movls	r3, #1
 80054e8:	2300      	movhi	r3, #0
 80054ea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d079      	beq.n	80055e4 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d107      	bne.n	800550c <HAL_ADC_ConfigChannel+0x684>
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	0e9b      	lsrs	r3, r3, #26
 8005502:	3301      	adds	r3, #1
 8005504:	069b      	lsls	r3, r3, #26
 8005506:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800550a:	e015      	b.n	8005538 <HAL_ADC_ConfigChannel+0x6b0>
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005514:	fa93 f3a3 	rbit	r3, r3
 8005518:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800551a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800551c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800551e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005520:	2b00      	cmp	r3, #0
 8005522:	d101      	bne.n	8005528 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8005524:	2320      	movs	r3, #32
 8005526:	e003      	b.n	8005530 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8005528:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800552a:	fab3 f383 	clz	r3, r3
 800552e:	b2db      	uxtb	r3, r3
 8005530:	3301      	adds	r3, #1
 8005532:	069b      	lsls	r3, r3, #26
 8005534:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005540:	2b00      	cmp	r3, #0
 8005542:	d109      	bne.n	8005558 <HAL_ADC_ConfigChannel+0x6d0>
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	0e9b      	lsrs	r3, r3, #26
 800554a:	3301      	adds	r3, #1
 800554c:	f003 031f 	and.w	r3, r3, #31
 8005550:	2101      	movs	r1, #1
 8005552:	fa01 f303 	lsl.w	r3, r1, r3
 8005556:	e017      	b.n	8005588 <HAL_ADC_ConfigChannel+0x700>
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800555e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005560:	fa93 f3a3 	rbit	r3, r3
 8005564:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8005566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005568:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800556a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800556c:	2b00      	cmp	r3, #0
 800556e:	d101      	bne.n	8005574 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8005570:	2320      	movs	r3, #32
 8005572:	e003      	b.n	800557c <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8005574:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005576:	fab3 f383 	clz	r3, r3
 800557a:	b2db      	uxtb	r3, r3
 800557c:	3301      	adds	r3, #1
 800557e:	f003 031f 	and.w	r3, r3, #31
 8005582:	2101      	movs	r1, #1
 8005584:	fa01 f303 	lsl.w	r3, r1, r3
 8005588:	ea42 0103 	orr.w	r1, r2, r3
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005594:	2b00      	cmp	r3, #0
 8005596:	d10a      	bne.n	80055ae <HAL_ADC_ConfigChannel+0x726>
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	0e9b      	lsrs	r3, r3, #26
 800559e:	3301      	adds	r3, #1
 80055a0:	f003 021f 	and.w	r2, r3, #31
 80055a4:	4613      	mov	r3, r2
 80055a6:	005b      	lsls	r3, r3, #1
 80055a8:	4413      	add	r3, r2
 80055aa:	051b      	lsls	r3, r3, #20
 80055ac:	e018      	b.n	80055e0 <HAL_ADC_ConfigChannel+0x758>
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b6:	fa93 f3a3 	rbit	r3, r3
 80055ba:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80055bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055be:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80055c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d101      	bne.n	80055ca <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 80055c6:	2320      	movs	r3, #32
 80055c8:	e003      	b.n	80055d2 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 80055ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055cc:	fab3 f383 	clz	r3, r3
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	3301      	adds	r3, #1
 80055d4:	f003 021f 	and.w	r2, r3, #31
 80055d8:	4613      	mov	r3, r2
 80055da:	005b      	lsls	r3, r3, #1
 80055dc:	4413      	add	r3, r2
 80055de:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80055e0:	430b      	orrs	r3, r1
 80055e2:	e07e      	b.n	80056e2 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d107      	bne.n	8005600 <HAL_ADC_ConfigChannel+0x778>
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	0e9b      	lsrs	r3, r3, #26
 80055f6:	3301      	adds	r3, #1
 80055f8:	069b      	lsls	r3, r3, #26
 80055fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80055fe:	e015      	b.n	800562c <HAL_ADC_ConfigChannel+0x7a4>
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005608:	fa93 f3a3 	rbit	r3, r3
 800560c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8005612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005614:	2b00      	cmp	r3, #0
 8005616:	d101      	bne.n	800561c <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8005618:	2320      	movs	r3, #32
 800561a:	e003      	b.n	8005624 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 800561c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561e:	fab3 f383 	clz	r3, r3
 8005622:	b2db      	uxtb	r3, r3
 8005624:	3301      	adds	r3, #1
 8005626:	069b      	lsls	r3, r3, #26
 8005628:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005634:	2b00      	cmp	r3, #0
 8005636:	d109      	bne.n	800564c <HAL_ADC_ConfigChannel+0x7c4>
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	0e9b      	lsrs	r3, r3, #26
 800563e:	3301      	adds	r3, #1
 8005640:	f003 031f 	and.w	r3, r3, #31
 8005644:	2101      	movs	r1, #1
 8005646:	fa01 f303 	lsl.w	r3, r1, r3
 800564a:	e017      	b.n	800567c <HAL_ADC_ConfigChannel+0x7f4>
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	fa93 f3a3 	rbit	r3, r3
 8005658:	61bb      	str	r3, [r7, #24]
  return result;
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800565e:	6a3b      	ldr	r3, [r7, #32]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d101      	bne.n	8005668 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8005664:	2320      	movs	r3, #32
 8005666:	e003      	b.n	8005670 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8005668:	6a3b      	ldr	r3, [r7, #32]
 800566a:	fab3 f383 	clz	r3, r3
 800566e:	b2db      	uxtb	r3, r3
 8005670:	3301      	adds	r3, #1
 8005672:	f003 031f 	and.w	r3, r3, #31
 8005676:	2101      	movs	r1, #1
 8005678:	fa01 f303 	lsl.w	r3, r1, r3
 800567c:	ea42 0103 	orr.w	r1, r2, r3
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10d      	bne.n	80056a8 <HAL_ADC_ConfigChannel+0x820>
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	0e9b      	lsrs	r3, r3, #26
 8005692:	3301      	adds	r3, #1
 8005694:	f003 021f 	and.w	r2, r3, #31
 8005698:	4613      	mov	r3, r2
 800569a:	005b      	lsls	r3, r3, #1
 800569c:	4413      	add	r3, r2
 800569e:	3b1e      	subs	r3, #30
 80056a0:	051b      	lsls	r3, r3, #20
 80056a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80056a6:	e01b      	b.n	80056e0 <HAL_ADC_ConfigChannel+0x858>
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	fa93 f3a3 	rbit	r3, r3
 80056b4:	60fb      	str	r3, [r7, #12]
  return result;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d101      	bne.n	80056c4 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 80056c0:	2320      	movs	r3, #32
 80056c2:	e003      	b.n	80056cc <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	fab3 f383 	clz	r3, r3
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	3301      	adds	r3, #1
 80056ce:	f003 021f 	and.w	r2, r3, #31
 80056d2:	4613      	mov	r3, r2
 80056d4:	005b      	lsls	r3, r3, #1
 80056d6:	4413      	add	r3, r2
 80056d8:	3b1e      	subs	r3, #30
 80056da:	051b      	lsls	r3, r3, #20
 80056dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80056e0:	430b      	orrs	r3, r1
 80056e2:	683a      	ldr	r2, [r7, #0]
 80056e4:	6892      	ldr	r2, [r2, #8]
 80056e6:	4619      	mov	r1, r3
 80056e8:	f7fe fe3f 	bl	800436a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f280 80d7 	bge.w	80058a4 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a06      	ldr	r2, [pc, #24]	; (8005714 <HAL_ADC_ConfigChannel+0x88c>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d004      	beq.n	800570a <HAL_ADC_ConfigChannel+0x882>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a04      	ldr	r2, [pc, #16]	; (8005718 <HAL_ADC_ConfigChannel+0x890>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d10a      	bne.n	8005720 <HAL_ADC_ConfigChannel+0x898>
 800570a:	4b04      	ldr	r3, [pc, #16]	; (800571c <HAL_ADC_ConfigChannel+0x894>)
 800570c:	e009      	b.n	8005722 <HAL_ADC_ConfigChannel+0x89a>
 800570e:	bf00      	nop
 8005710:	47ff0000 	.word	0x47ff0000
 8005714:	40022000 	.word	0x40022000
 8005718:	40022100 	.word	0x40022100
 800571c:	40022300 	.word	0x40022300
 8005720:	4b65      	ldr	r3, [pc, #404]	; (80058b8 <HAL_ADC_ConfigChannel+0xa30>)
 8005722:	4618      	mov	r0, r3
 8005724:	f7fe fce2 	bl	80040ec <LL_ADC_GetCommonPathInternalCh>
 8005728:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a62      	ldr	r2, [pc, #392]	; (80058bc <HAL_ADC_ConfigChannel+0xa34>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d004      	beq.n	8005740 <HAL_ADC_ConfigChannel+0x8b8>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a61      	ldr	r2, [pc, #388]	; (80058c0 <HAL_ADC_ConfigChannel+0xa38>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d10e      	bne.n	800575e <HAL_ADC_ConfigChannel+0x8d6>
 8005740:	485e      	ldr	r0, [pc, #376]	; (80058bc <HAL_ADC_ConfigChannel+0xa34>)
 8005742:	f7fe ff0f 	bl	8004564 <LL_ADC_IsEnabled>
 8005746:	4604      	mov	r4, r0
 8005748:	485d      	ldr	r0, [pc, #372]	; (80058c0 <HAL_ADC_ConfigChannel+0xa38>)
 800574a:	f7fe ff0b 	bl	8004564 <LL_ADC_IsEnabled>
 800574e:	4603      	mov	r3, r0
 8005750:	4323      	orrs	r3, r4
 8005752:	2b00      	cmp	r3, #0
 8005754:	bf0c      	ite	eq
 8005756:	2301      	moveq	r3, #1
 8005758:	2300      	movne	r3, #0
 800575a:	b2db      	uxtb	r3, r3
 800575c:	e008      	b.n	8005770 <HAL_ADC_ConfigChannel+0x8e8>
 800575e:	4859      	ldr	r0, [pc, #356]	; (80058c4 <HAL_ADC_ConfigChannel+0xa3c>)
 8005760:	f7fe ff00 	bl	8004564 <LL_ADC_IsEnabled>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	bf0c      	ite	eq
 800576a:	2301      	moveq	r3, #1
 800576c:	2300      	movne	r3, #0
 800576e:	b2db      	uxtb	r3, r3
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 8084 	beq.w	800587e <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a53      	ldr	r2, [pc, #332]	; (80058c8 <HAL_ADC_ConfigChannel+0xa40>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d132      	bne.n	80057e6 <HAL_ADC_ConfigChannel+0x95e>
 8005780:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005784:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d12c      	bne.n	80057e6 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a4c      	ldr	r2, [pc, #304]	; (80058c4 <HAL_ADC_ConfigChannel+0xa3c>)
 8005792:	4293      	cmp	r3, r2
 8005794:	f040 8086 	bne.w	80058a4 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a47      	ldr	r2, [pc, #284]	; (80058bc <HAL_ADC_ConfigChannel+0xa34>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d004      	beq.n	80057ac <HAL_ADC_ConfigChannel+0x924>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a46      	ldr	r2, [pc, #280]	; (80058c0 <HAL_ADC_ConfigChannel+0xa38>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d101      	bne.n	80057b0 <HAL_ADC_ConfigChannel+0x928>
 80057ac:	4a47      	ldr	r2, [pc, #284]	; (80058cc <HAL_ADC_ConfigChannel+0xa44>)
 80057ae:	e000      	b.n	80057b2 <HAL_ADC_ConfigChannel+0x92a>
 80057b0:	4a41      	ldr	r2, [pc, #260]	; (80058b8 <HAL_ADC_ConfigChannel+0xa30>)
 80057b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80057b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80057ba:	4619      	mov	r1, r3
 80057bc:	4610      	mov	r0, r2
 80057be:	f7fe fc82 	bl	80040c6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80057c2:	4b43      	ldr	r3, [pc, #268]	; (80058d0 <HAL_ADC_ConfigChannel+0xa48>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	099b      	lsrs	r3, r3, #6
 80057c8:	4a42      	ldr	r2, [pc, #264]	; (80058d4 <HAL_ADC_ConfigChannel+0xa4c>)
 80057ca:	fba2 2303 	umull	r2, r3, r2, r3
 80057ce:	099b      	lsrs	r3, r3, #6
 80057d0:	3301      	adds	r3, #1
 80057d2:	005b      	lsls	r3, r3, #1
 80057d4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80057d6:	e002      	b.n	80057de <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	3b01      	subs	r3, #1
 80057dc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1f9      	bne.n	80057d8 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80057e4:	e05e      	b.n	80058a4 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a3b      	ldr	r2, [pc, #236]	; (80058d8 <HAL_ADC_ConfigChannel+0xa50>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d120      	bne.n	8005832 <HAL_ADC_ConfigChannel+0x9aa>
 80057f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80057f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d11a      	bne.n	8005832 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a30      	ldr	r2, [pc, #192]	; (80058c4 <HAL_ADC_ConfigChannel+0xa3c>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d14e      	bne.n	80058a4 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a2c      	ldr	r2, [pc, #176]	; (80058bc <HAL_ADC_ConfigChannel+0xa34>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d004      	beq.n	800581a <HAL_ADC_ConfigChannel+0x992>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a2a      	ldr	r2, [pc, #168]	; (80058c0 <HAL_ADC_ConfigChannel+0xa38>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d101      	bne.n	800581e <HAL_ADC_ConfigChannel+0x996>
 800581a:	4a2c      	ldr	r2, [pc, #176]	; (80058cc <HAL_ADC_ConfigChannel+0xa44>)
 800581c:	e000      	b.n	8005820 <HAL_ADC_ConfigChannel+0x998>
 800581e:	4a26      	ldr	r2, [pc, #152]	; (80058b8 <HAL_ADC_ConfigChannel+0xa30>)
 8005820:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005824:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005828:	4619      	mov	r1, r3
 800582a:	4610      	mov	r0, r2
 800582c:	f7fe fc4b 	bl	80040c6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005830:	e038      	b.n	80058a4 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a29      	ldr	r2, [pc, #164]	; (80058dc <HAL_ADC_ConfigChannel+0xa54>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d133      	bne.n	80058a4 <HAL_ADC_ConfigChannel+0xa1c>
 800583c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005840:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d12d      	bne.n	80058a4 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a1d      	ldr	r2, [pc, #116]	; (80058c4 <HAL_ADC_ConfigChannel+0xa3c>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d128      	bne.n	80058a4 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a19      	ldr	r2, [pc, #100]	; (80058bc <HAL_ADC_ConfigChannel+0xa34>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d004      	beq.n	8005866 <HAL_ADC_ConfigChannel+0x9de>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a17      	ldr	r2, [pc, #92]	; (80058c0 <HAL_ADC_ConfigChannel+0xa38>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d101      	bne.n	800586a <HAL_ADC_ConfigChannel+0x9e2>
 8005866:	4a19      	ldr	r2, [pc, #100]	; (80058cc <HAL_ADC_ConfigChannel+0xa44>)
 8005868:	e000      	b.n	800586c <HAL_ADC_ConfigChannel+0x9e4>
 800586a:	4a13      	ldr	r2, [pc, #76]	; (80058b8 <HAL_ADC_ConfigChannel+0xa30>)
 800586c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005870:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005874:	4619      	mov	r1, r3
 8005876:	4610      	mov	r0, r2
 8005878:	f7fe fc25 	bl	80040c6 <LL_ADC_SetCommonPathInternalCh>
 800587c:	e012      	b.n	80058a4 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005882:	f043 0220 	orr.w	r2, r3, #32
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8005890:	e008      	b.n	80058a4 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005896:	f043 0220 	orr.w	r2, r3, #32
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80058ac:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	37e4      	adds	r7, #228	; 0xe4
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd90      	pop	{r4, r7, pc}
 80058b8:	58026300 	.word	0x58026300
 80058bc:	40022000 	.word	0x40022000
 80058c0:	40022100 	.word	0x40022100
 80058c4:	58026000 	.word	0x58026000
 80058c8:	c7520000 	.word	0xc7520000
 80058cc:	40022300 	.word	0x40022300
 80058d0:	24000000 	.word	0x24000000
 80058d4:	053e2d63 	.word	0x053e2d63
 80058d8:	c3210000 	.word	0xc3210000
 80058dc:	cb840000 	.word	0xcb840000

080058e0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b088      	sub	sp, #32
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80058ea:	2300      	movs	r3, #0
 80058ec:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7fe fe82 	bl	8004600 <LL_ADC_REG_IsConversionOngoing>
 80058fc:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4618      	mov	r0, r3
 8005904:	f7fe fea4 	bl	8004650 <LL_ADC_INJ_IsConversionOngoing>
 8005908:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d103      	bne.n	8005918 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2b00      	cmp	r3, #0
 8005914:	f000 8098 	beq.w	8005a48 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d02a      	beq.n	800597c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	7e5b      	ldrb	r3, [r3, #25]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d126      	bne.n	800597c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	7e1b      	ldrb	r3, [r3, #24]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d122      	bne.n	800597c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8005936:	2301      	movs	r3, #1
 8005938:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800593a:	e014      	b.n	8005966 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	4a45      	ldr	r2, [pc, #276]	; (8005a54 <ADC_ConversionStop+0x174>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d90d      	bls.n	8005960 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005948:	f043 0210 	orr.w	r2, r3, #16
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005954:	f043 0201 	orr.w	r2, r3, #1
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e074      	b.n	8005a4a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	3301      	adds	r3, #1
 8005964:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005970:	2b40      	cmp	r3, #64	; 0x40
 8005972:	d1e3      	bne.n	800593c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2240      	movs	r2, #64	; 0x40
 800597a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	2b02      	cmp	r3, #2
 8005980:	d014      	beq.n	80059ac <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4618      	mov	r0, r3
 8005988:	f7fe fe3a 	bl	8004600 <LL_ADC_REG_IsConversionOngoing>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00c      	beq.n	80059ac <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4618      	mov	r0, r3
 8005998:	f7fe fdf7 	bl	800458a <LL_ADC_IsDisableOngoing>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d104      	bne.n	80059ac <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7fe fe16 	bl	80045d8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d014      	beq.n	80059dc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fe fe4a 	bl	8004650 <LL_ADC_INJ_IsConversionOngoing>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00c      	beq.n	80059dc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4618      	mov	r0, r3
 80059c8:	f7fe fddf 	bl	800458a <LL_ADC_IsDisableOngoing>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d104      	bne.n	80059dc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7fe fe26 	bl	8004628 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d005      	beq.n	80059ee <ADC_ConversionStop+0x10e>
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	2b03      	cmp	r3, #3
 80059e6:	d105      	bne.n	80059f4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80059e8:	230c      	movs	r3, #12
 80059ea:	617b      	str	r3, [r7, #20]
        break;
 80059ec:	e005      	b.n	80059fa <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80059ee:	2308      	movs	r3, #8
 80059f0:	617b      	str	r3, [r7, #20]
        break;
 80059f2:	e002      	b.n	80059fa <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80059f4:	2304      	movs	r3, #4
 80059f6:	617b      	str	r3, [r7, #20]
        break;
 80059f8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80059fa:	f7fe fb0b 	bl	8004014 <HAL_GetTick>
 80059fe:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005a00:	e01b      	b.n	8005a3a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005a02:	f7fe fb07 	bl	8004014 <HAL_GetTick>
 8005a06:	4602      	mov	r2, r0
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	2b05      	cmp	r3, #5
 8005a0e:	d914      	bls.n	8005a3a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	689a      	ldr	r2, [r3, #8]
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	4013      	ands	r3, r2
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00d      	beq.n	8005a3a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a22:	f043 0210 	orr.w	r2, r3, #16
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a2e:	f043 0201 	orr.w	r2, r3, #1
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e007      	b.n	8005a4a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	689a      	ldr	r2, [r3, #8]
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	4013      	ands	r3, r2
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1dc      	bne.n	8005a02 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3720      	adds	r7, #32
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	000cdbff 	.word	0x000cdbff

08005a58 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b084      	sub	sp, #16
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4618      	mov	r0, r3
 8005a66:	f7fe fd7d 	bl	8004564 <LL_ADC_IsEnabled>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d16e      	bne.n	8005b4e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	689a      	ldr	r2, [r3, #8]
 8005a76:	4b38      	ldr	r3, [pc, #224]	; (8005b58 <ADC_Enable+0x100>)
 8005a78:	4013      	ands	r3, r2
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00d      	beq.n	8005a9a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a82:	f043 0210 	orr.w	r2, r3, #16
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a8e:	f043 0201 	orr.w	r2, r3, #1
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e05a      	b.n	8005b50 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7fe fd38 	bl	8004514 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005aa4:	f7fe fab6 	bl	8004014 <HAL_GetTick>
 8005aa8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a2b      	ldr	r2, [pc, #172]	; (8005b5c <ADC_Enable+0x104>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d004      	beq.n	8005abe <ADC_Enable+0x66>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a29      	ldr	r2, [pc, #164]	; (8005b60 <ADC_Enable+0x108>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d101      	bne.n	8005ac2 <ADC_Enable+0x6a>
 8005abe:	4b29      	ldr	r3, [pc, #164]	; (8005b64 <ADC_Enable+0x10c>)
 8005ac0:	e000      	b.n	8005ac4 <ADC_Enable+0x6c>
 8005ac2:	4b29      	ldr	r3, [pc, #164]	; (8005b68 <ADC_Enable+0x110>)
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f7fe fcbb 	bl	8004440 <LL_ADC_GetMultimode>
 8005aca:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a23      	ldr	r2, [pc, #140]	; (8005b60 <ADC_Enable+0x108>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d002      	beq.n	8005adc <ADC_Enable+0x84>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	e000      	b.n	8005ade <ADC_Enable+0x86>
 8005adc:	4b1f      	ldr	r3, [pc, #124]	; (8005b5c <ADC_Enable+0x104>)
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	6812      	ldr	r2, [r2, #0]
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d02c      	beq.n	8005b40 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d130      	bne.n	8005b4e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005aec:	e028      	b.n	8005b40 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7fe fd36 	bl	8004564 <LL_ADC_IsEnabled>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d104      	bne.n	8005b08 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f7fe fd06 	bl	8004514 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005b08:	f7fe fa84 	bl	8004014 <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d914      	bls.n	8005b40 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 0301 	and.w	r3, r3, #1
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d00d      	beq.n	8005b40 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b28:	f043 0210 	orr.w	r2, r3, #16
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b34:	f043 0201 	orr.w	r2, r3, #1
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e007      	b.n	8005b50 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d1cf      	bne.n	8005aee <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	8000003f 	.word	0x8000003f
 8005b5c:	40022000 	.word	0x40022000
 8005b60:	40022100 	.word	0x40022100
 8005b64:	40022300 	.word	0x40022300
 8005b68:	58026300 	.word	0x58026300

08005b6c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7fe fd06 	bl	800458a <LL_ADC_IsDisableOngoing>
 8005b7e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4618      	mov	r0, r3
 8005b86:	f7fe fced 	bl	8004564 <LL_ADC_IsEnabled>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d047      	beq.n	8005c20 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d144      	bne.n	8005c20 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f003 030d 	and.w	r3, r3, #13
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d10c      	bne.n	8005bbe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7fe fcc7 	bl	800453c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2203      	movs	r2, #3
 8005bb4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005bb6:	f7fe fa2d 	bl	8004014 <HAL_GetTick>
 8005bba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005bbc:	e029      	b.n	8005c12 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bc2:	f043 0210 	orr.w	r2, r3, #16
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bce:	f043 0201 	orr.w	r2, r3, #1
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e023      	b.n	8005c22 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005bda:	f7fe fa1b 	bl	8004014 <HAL_GetTick>
 8005bde:	4602      	mov	r2, r0
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d914      	bls.n	8005c12 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00d      	beq.n	8005c12 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bfa:	f043 0210 	orr.w	r2, r3, #16
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c06:	f043 0201 	orr.w	r2, r3, #1
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e007      	b.n	8005c22 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f003 0301 	and.w	r3, r3, #1
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1dc      	bne.n	8005bda <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
	...

08005c2c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a6c      	ldr	r2, [pc, #432]	; (8005dec <ADC_ConfigureBoostMode+0x1c0>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d004      	beq.n	8005c48 <ADC_ConfigureBoostMode+0x1c>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a6b      	ldr	r2, [pc, #428]	; (8005df0 <ADC_ConfigureBoostMode+0x1c4>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d109      	bne.n	8005c5c <ADC_ConfigureBoostMode+0x30>
 8005c48:	4b6a      	ldr	r3, [pc, #424]	; (8005df4 <ADC_ConfigureBoostMode+0x1c8>)
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	bf14      	ite	ne
 8005c54:	2301      	movne	r3, #1
 8005c56:	2300      	moveq	r3, #0
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	e008      	b.n	8005c6e <ADC_ConfigureBoostMode+0x42>
 8005c5c:	4b66      	ldr	r3, [pc, #408]	; (8005df8 <ADC_ConfigureBoostMode+0x1cc>)
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	bf14      	ite	ne
 8005c68:	2301      	movne	r3, #1
 8005c6a:	2300      	moveq	r3, #0
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d01c      	beq.n	8005cac <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005c72:	f005 fcad 	bl	800b5d0 <HAL_RCC_GetHCLKFreq>
 8005c76:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c80:	d010      	beq.n	8005ca4 <ADC_ConfigureBoostMode+0x78>
 8005c82:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c86:	d873      	bhi.n	8005d70 <ADC_ConfigureBoostMode+0x144>
 8005c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c8c:	d002      	beq.n	8005c94 <ADC_ConfigureBoostMode+0x68>
 8005c8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c92:	d16d      	bne.n	8005d70 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	0c1b      	lsrs	r3, r3, #16
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ca0:	60fb      	str	r3, [r7, #12]
        break;
 8005ca2:	e068      	b.n	8005d76 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	089b      	lsrs	r3, r3, #2
 8005ca8:	60fb      	str	r3, [r7, #12]
        break;
 8005caa:	e064      	b.n	8005d76 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005cac:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005cb0:	f04f 0100 	mov.w	r1, #0
 8005cb4:	f006 fe88 	bl	800c9c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8005cb8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005cc2:	d051      	beq.n	8005d68 <ADC_ConfigureBoostMode+0x13c>
 8005cc4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005cc8:	d854      	bhi.n	8005d74 <ADC_ConfigureBoostMode+0x148>
 8005cca:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005cce:	d047      	beq.n	8005d60 <ADC_ConfigureBoostMode+0x134>
 8005cd0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005cd4:	d84e      	bhi.n	8005d74 <ADC_ConfigureBoostMode+0x148>
 8005cd6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005cda:	d03d      	beq.n	8005d58 <ADC_ConfigureBoostMode+0x12c>
 8005cdc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005ce0:	d848      	bhi.n	8005d74 <ADC_ConfigureBoostMode+0x148>
 8005ce2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ce6:	d033      	beq.n	8005d50 <ADC_ConfigureBoostMode+0x124>
 8005ce8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cec:	d842      	bhi.n	8005d74 <ADC_ConfigureBoostMode+0x148>
 8005cee:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005cf2:	d029      	beq.n	8005d48 <ADC_ConfigureBoostMode+0x11c>
 8005cf4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005cf8:	d83c      	bhi.n	8005d74 <ADC_ConfigureBoostMode+0x148>
 8005cfa:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005cfe:	d01a      	beq.n	8005d36 <ADC_ConfigureBoostMode+0x10a>
 8005d00:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005d04:	d836      	bhi.n	8005d74 <ADC_ConfigureBoostMode+0x148>
 8005d06:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005d0a:	d014      	beq.n	8005d36 <ADC_ConfigureBoostMode+0x10a>
 8005d0c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005d10:	d830      	bhi.n	8005d74 <ADC_ConfigureBoostMode+0x148>
 8005d12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d16:	d00e      	beq.n	8005d36 <ADC_ConfigureBoostMode+0x10a>
 8005d18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d1c:	d82a      	bhi.n	8005d74 <ADC_ConfigureBoostMode+0x148>
 8005d1e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005d22:	d008      	beq.n	8005d36 <ADC_ConfigureBoostMode+0x10a>
 8005d24:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005d28:	d824      	bhi.n	8005d74 <ADC_ConfigureBoostMode+0x148>
 8005d2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d2e:	d002      	beq.n	8005d36 <ADC_ConfigureBoostMode+0x10a>
 8005d30:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d34:	d11e      	bne.n	8005d74 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	0c9b      	lsrs	r3, r3, #18
 8005d3c:	005b      	lsls	r3, r3, #1
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d44:	60fb      	str	r3, [r7, #12]
        break;
 8005d46:	e016      	b.n	8005d76 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	091b      	lsrs	r3, r3, #4
 8005d4c:	60fb      	str	r3, [r7, #12]
        break;
 8005d4e:	e012      	b.n	8005d76 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	095b      	lsrs	r3, r3, #5
 8005d54:	60fb      	str	r3, [r7, #12]
        break;
 8005d56:	e00e      	b.n	8005d76 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	099b      	lsrs	r3, r3, #6
 8005d5c:	60fb      	str	r3, [r7, #12]
        break;
 8005d5e:	e00a      	b.n	8005d76 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	09db      	lsrs	r3, r3, #7
 8005d64:	60fb      	str	r3, [r7, #12]
        break;
 8005d66:	e006      	b.n	8005d76 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	0a1b      	lsrs	r3, r3, #8
 8005d6c:	60fb      	str	r3, [r7, #12]
        break;
 8005d6e:	e002      	b.n	8005d76 <ADC_ConfigureBoostMode+0x14a>
        break;
 8005d70:	bf00      	nop
 8005d72:	e000      	b.n	8005d76 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005d74:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	085b      	lsrs	r3, r3, #1
 8005d7a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	4a1f      	ldr	r2, [pc, #124]	; (8005dfc <ADC_ConfigureBoostMode+0x1d0>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d808      	bhi.n	8005d96 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	689a      	ldr	r2, [r3, #8]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005d92:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005d94:	e025      	b.n	8005de2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	4a19      	ldr	r2, [pc, #100]	; (8005e00 <ADC_ConfigureBoostMode+0x1d4>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d80a      	bhi.n	8005db4 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005db0:	609a      	str	r2, [r3, #8]
}
 8005db2:	e016      	b.n	8005de2 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	4a13      	ldr	r2, [pc, #76]	; (8005e04 <ADC_ConfigureBoostMode+0x1d8>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d80a      	bhi.n	8005dd2 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dce:	609a      	str	r2, [r3, #8]
}
 8005dd0:	e007      	b.n	8005de2 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	689a      	ldr	r2, [r3, #8]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005de0:	609a      	str	r2, [r3, #8]
}
 8005de2:	bf00      	nop
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	40022000 	.word	0x40022000
 8005df0:	40022100 	.word	0x40022100
 8005df4:	40022300 	.word	0x40022300
 8005df8:	58026300 	.word	0x58026300
 8005dfc:	005f5e10 	.word	0x005f5e10
 8005e00:	00bebc20 	.word	0x00bebc20
 8005e04:	017d7840 	.word	0x017d7840

08005e08 <LL_ADC_IsEnabled>:
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	f003 0301 	and.w	r3, r3, #1
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d101      	bne.n	8005e20 <LL_ADC_IsEnabled+0x18>
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e000      	b.n	8005e22 <LL_ADC_IsEnabled+0x1a>
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	370c      	adds	r7, #12
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr

08005e2e <LL_ADC_REG_IsConversionOngoing>:
{
 8005e2e:	b480      	push	{r7}
 8005e30:	b083      	sub	sp, #12
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f003 0304 	and.w	r3, r3, #4
 8005e3e:	2b04      	cmp	r3, #4
 8005e40:	d101      	bne.n	8005e46 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005e42:	2301      	movs	r3, #1
 8005e44:	e000      	b.n	8005e48 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005e54:	b590      	push	{r4, r7, lr}
 8005e56:	b0a3      	sub	sp, #140	; 0x8c
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d101      	bne.n	8005e72 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005e6e:	2302      	movs	r3, #2
 8005e70:	e0c1      	b.n	8005ff6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a5e      	ldr	r2, [pc, #376]	; (8006000 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d102      	bne.n	8005e92 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005e8c:	4b5d      	ldr	r3, [pc, #372]	; (8006004 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005e8e:	60fb      	str	r3, [r7, #12]
 8005e90:	e001      	b.n	8005e96 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005e92:	2300      	movs	r3, #0
 8005e94:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10b      	bne.n	8005eb4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ea0:	f043 0220 	orr.w	r2, r3, #32
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e0a0      	b.n	8005ff6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7ff ffb9 	bl	8005e2e <LL_ADC_REG_IsConversionOngoing>
 8005ebc:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f7ff ffb2 	bl	8005e2e <LL_ADC_REG_IsConversionOngoing>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f040 8081 	bne.w	8005fd4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005ed2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d17c      	bne.n	8005fd4 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a48      	ldr	r2, [pc, #288]	; (8006000 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d004      	beq.n	8005eee <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a46      	ldr	r2, [pc, #280]	; (8006004 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d101      	bne.n	8005ef2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8005eee:	4b46      	ldr	r3, [pc, #280]	; (8006008 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005ef0:	e000      	b.n	8005ef4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8005ef2:	4b46      	ldr	r3, [pc, #280]	; (800600c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005ef4:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d039      	beq.n	8005f72 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005efe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	431a      	orrs	r2, r3
 8005f0c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f0e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a3a      	ldr	r2, [pc, #232]	; (8006000 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d004      	beq.n	8005f24 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a39      	ldr	r2, [pc, #228]	; (8006004 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d10e      	bne.n	8005f42 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8005f24:	4836      	ldr	r0, [pc, #216]	; (8006000 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005f26:	f7ff ff6f 	bl	8005e08 <LL_ADC_IsEnabled>
 8005f2a:	4604      	mov	r4, r0
 8005f2c:	4835      	ldr	r0, [pc, #212]	; (8006004 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005f2e:	f7ff ff6b 	bl	8005e08 <LL_ADC_IsEnabled>
 8005f32:	4603      	mov	r3, r0
 8005f34:	4323      	orrs	r3, r4
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	bf0c      	ite	eq
 8005f3a:	2301      	moveq	r3, #1
 8005f3c:	2300      	movne	r3, #0
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	e008      	b.n	8005f54 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8005f42:	4833      	ldr	r0, [pc, #204]	; (8006010 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005f44:	f7ff ff60 	bl	8005e08 <LL_ADC_IsEnabled>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	bf0c      	ite	eq
 8005f4e:	2301      	moveq	r3, #1
 8005f50:	2300      	movne	r3, #0
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d047      	beq.n	8005fe8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005f58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f5a:	689a      	ldr	r2, [r3, #8]
 8005f5c:	4b2d      	ldr	r3, [pc, #180]	; (8006014 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005f5e:	4013      	ands	r3, r2
 8005f60:	683a      	ldr	r2, [r7, #0]
 8005f62:	6811      	ldr	r1, [r2, #0]
 8005f64:	683a      	ldr	r2, [r7, #0]
 8005f66:	6892      	ldr	r2, [r2, #8]
 8005f68:	430a      	orrs	r2, r1
 8005f6a:	431a      	orrs	r2, r3
 8005f6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f6e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005f70:	e03a      	b.n	8005fe8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005f72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005f7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f7c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a1f      	ldr	r2, [pc, #124]	; (8006000 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d004      	beq.n	8005f92 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a1d      	ldr	r2, [pc, #116]	; (8006004 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d10e      	bne.n	8005fb0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8005f92:	481b      	ldr	r0, [pc, #108]	; (8006000 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005f94:	f7ff ff38 	bl	8005e08 <LL_ADC_IsEnabled>
 8005f98:	4604      	mov	r4, r0
 8005f9a:	481a      	ldr	r0, [pc, #104]	; (8006004 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005f9c:	f7ff ff34 	bl	8005e08 <LL_ADC_IsEnabled>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	4323      	orrs	r3, r4
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	bf0c      	ite	eq
 8005fa8:	2301      	moveq	r3, #1
 8005faa:	2300      	movne	r3, #0
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	e008      	b.n	8005fc2 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8005fb0:	4817      	ldr	r0, [pc, #92]	; (8006010 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005fb2:	f7ff ff29 	bl	8005e08 <LL_ADC_IsEnabled>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	bf0c      	ite	eq
 8005fbc:	2301      	moveq	r3, #1
 8005fbe:	2300      	movne	r3, #0
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d010      	beq.n	8005fe8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005fc6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005fc8:	689a      	ldr	r2, [r3, #8]
 8005fca:	4b12      	ldr	r3, [pc, #72]	; (8006014 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005fcc:	4013      	ands	r3, r2
 8005fce:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005fd0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005fd2:	e009      	b.n	8005fe8 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fd8:	f043 0220 	orr.w	r2, r3, #32
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8005fe6:	e000      	b.n	8005fea <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005fe8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005ff2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	378c      	adds	r7, #140	; 0x8c
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd90      	pop	{r4, r7, pc}
 8005ffe:	bf00      	nop
 8006000:	40022000 	.word	0x40022000
 8006004:	40022100 	.word	0x40022100
 8006008:	40022300 	.word	0x40022300
 800600c:	58026300 	.word	0x58026300
 8006010:	58026000 	.word	0x58026000
 8006014:	fffff0e0 	.word	0xfffff0e0

08006018 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f003 0307 	and.w	r3, r3, #7
 8006026:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006028:	4b0b      	ldr	r3, [pc, #44]	; (8006058 <__NVIC_SetPriorityGrouping+0x40>)
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800602e:	68ba      	ldr	r2, [r7, #8]
 8006030:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006034:	4013      	ands	r3, r2
 8006036:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006040:	4b06      	ldr	r3, [pc, #24]	; (800605c <__NVIC_SetPriorityGrouping+0x44>)
 8006042:	4313      	orrs	r3, r2
 8006044:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006046:	4a04      	ldr	r2, [pc, #16]	; (8006058 <__NVIC_SetPriorityGrouping+0x40>)
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	60d3      	str	r3, [r2, #12]
}
 800604c:	bf00      	nop
 800604e:	3714      	adds	r7, #20
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr
 8006058:	e000ed00 	.word	0xe000ed00
 800605c:	05fa0000 	.word	0x05fa0000

08006060 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006060:	b480      	push	{r7}
 8006062:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006064:	4b04      	ldr	r3, [pc, #16]	; (8006078 <__NVIC_GetPriorityGrouping+0x18>)
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	0a1b      	lsrs	r3, r3, #8
 800606a:	f003 0307 	and.w	r3, r3, #7
}
 800606e:	4618      	mov	r0, r3
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr
 8006078:	e000ed00 	.word	0xe000ed00

0800607c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	4603      	mov	r3, r0
 8006084:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006086:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800608a:	2b00      	cmp	r3, #0
 800608c:	db0b      	blt.n	80060a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800608e:	88fb      	ldrh	r3, [r7, #6]
 8006090:	f003 021f 	and.w	r2, r3, #31
 8006094:	4907      	ldr	r1, [pc, #28]	; (80060b4 <__NVIC_EnableIRQ+0x38>)
 8006096:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800609a:	095b      	lsrs	r3, r3, #5
 800609c:	2001      	movs	r0, #1
 800609e:	fa00 f202 	lsl.w	r2, r0, r2
 80060a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80060a6:	bf00      	nop
 80060a8:	370c      	adds	r7, #12
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	e000e100 	.word	0xe000e100

080060b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	4603      	mov	r3, r0
 80060c0:	6039      	str	r1, [r7, #0]
 80060c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80060c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	db0a      	blt.n	80060e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	b2da      	uxtb	r2, r3
 80060d0:	490c      	ldr	r1, [pc, #48]	; (8006104 <__NVIC_SetPriority+0x4c>)
 80060d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80060d6:	0112      	lsls	r2, r2, #4
 80060d8:	b2d2      	uxtb	r2, r2
 80060da:	440b      	add	r3, r1
 80060dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80060e0:	e00a      	b.n	80060f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	b2da      	uxtb	r2, r3
 80060e6:	4908      	ldr	r1, [pc, #32]	; (8006108 <__NVIC_SetPriority+0x50>)
 80060e8:	88fb      	ldrh	r3, [r7, #6]
 80060ea:	f003 030f 	and.w	r3, r3, #15
 80060ee:	3b04      	subs	r3, #4
 80060f0:	0112      	lsls	r2, r2, #4
 80060f2:	b2d2      	uxtb	r2, r2
 80060f4:	440b      	add	r3, r1
 80060f6:	761a      	strb	r2, [r3, #24]
}
 80060f8:	bf00      	nop
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr
 8006104:	e000e100 	.word	0xe000e100
 8006108:	e000ed00 	.word	0xe000ed00

0800610c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800610c:	b480      	push	{r7}
 800610e:	b089      	sub	sp, #36	; 0x24
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f003 0307 	and.w	r3, r3, #7
 800611e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	f1c3 0307 	rsb	r3, r3, #7
 8006126:	2b04      	cmp	r3, #4
 8006128:	bf28      	it	cs
 800612a:	2304      	movcs	r3, #4
 800612c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	3304      	adds	r3, #4
 8006132:	2b06      	cmp	r3, #6
 8006134:	d902      	bls.n	800613c <NVIC_EncodePriority+0x30>
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	3b03      	subs	r3, #3
 800613a:	e000      	b.n	800613e <NVIC_EncodePriority+0x32>
 800613c:	2300      	movs	r3, #0
 800613e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006140:	f04f 32ff 	mov.w	r2, #4294967295
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	fa02 f303 	lsl.w	r3, r2, r3
 800614a:	43da      	mvns	r2, r3
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	401a      	ands	r2, r3
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006154:	f04f 31ff 	mov.w	r1, #4294967295
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	fa01 f303 	lsl.w	r3, r1, r3
 800615e:	43d9      	mvns	r1, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006164:	4313      	orrs	r3, r2
         );
}
 8006166:	4618      	mov	r0, r3
 8006168:	3724      	adds	r7, #36	; 0x24
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
	...

08006174 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	3b01      	subs	r3, #1
 8006180:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006184:	d301      	bcc.n	800618a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006186:	2301      	movs	r3, #1
 8006188:	e00f      	b.n	80061aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800618a:	4a0a      	ldr	r2, [pc, #40]	; (80061b4 <SysTick_Config+0x40>)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	3b01      	subs	r3, #1
 8006190:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006192:	210f      	movs	r1, #15
 8006194:	f04f 30ff 	mov.w	r0, #4294967295
 8006198:	f7ff ff8e 	bl	80060b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800619c:	4b05      	ldr	r3, [pc, #20]	; (80061b4 <SysTick_Config+0x40>)
 800619e:	2200      	movs	r2, #0
 80061a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80061a2:	4b04      	ldr	r3, [pc, #16]	; (80061b4 <SysTick_Config+0x40>)
 80061a4:	2207      	movs	r2, #7
 80061a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3708      	adds	r7, #8
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	e000e010 	.word	0xe000e010

080061b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f7ff ff29 	bl	8006018 <__NVIC_SetPriorityGrouping>
}
 80061c6:	bf00      	nop
 80061c8:	3708      	adds	r7, #8
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b086      	sub	sp, #24
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	4603      	mov	r3, r0
 80061d6:	60b9      	str	r1, [r7, #8]
 80061d8:	607a      	str	r2, [r7, #4]
 80061da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80061dc:	f7ff ff40 	bl	8006060 <__NVIC_GetPriorityGrouping>
 80061e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	68b9      	ldr	r1, [r7, #8]
 80061e6:	6978      	ldr	r0, [r7, #20]
 80061e8:	f7ff ff90 	bl	800610c <NVIC_EncodePriority>
 80061ec:	4602      	mov	r2, r0
 80061ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80061f2:	4611      	mov	r1, r2
 80061f4:	4618      	mov	r0, r3
 80061f6:	f7ff ff5f 	bl	80060b8 <__NVIC_SetPriority>
}
 80061fa:	bf00      	nop
 80061fc:	3718      	adds	r7, #24
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}

08006202 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006202:	b580      	push	{r7, lr}
 8006204:	b082      	sub	sp, #8
 8006206:	af00      	add	r7, sp, #0
 8006208:	4603      	mov	r3, r0
 800620a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800620c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006210:	4618      	mov	r0, r3
 8006212:	f7ff ff33 	bl	800607c <__NVIC_EnableIRQ>
}
 8006216:	bf00      	nop
 8006218:	3708      	adds	r7, #8
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b082      	sub	sp, #8
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f7ff ffa4 	bl	8006174 <SysTick_Config>
 800622c:	4603      	mov	r3, r0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3708      	adds	r7, #8
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
	...

08006238 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b086      	sub	sp, #24
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006240:	f7fd fee8 	bl	8004014 <HAL_GetTick>
 8006244:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d101      	bne.n	8006250 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e314      	b.n	800687a <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a66      	ldr	r2, [pc, #408]	; (80063f0 <HAL_DMA_Init+0x1b8>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d04a      	beq.n	80062f0 <HAL_DMA_Init+0xb8>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a65      	ldr	r2, [pc, #404]	; (80063f4 <HAL_DMA_Init+0x1bc>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d045      	beq.n	80062f0 <HAL_DMA_Init+0xb8>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a63      	ldr	r2, [pc, #396]	; (80063f8 <HAL_DMA_Init+0x1c0>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d040      	beq.n	80062f0 <HAL_DMA_Init+0xb8>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a62      	ldr	r2, [pc, #392]	; (80063fc <HAL_DMA_Init+0x1c4>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d03b      	beq.n	80062f0 <HAL_DMA_Init+0xb8>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a60      	ldr	r2, [pc, #384]	; (8006400 <HAL_DMA_Init+0x1c8>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d036      	beq.n	80062f0 <HAL_DMA_Init+0xb8>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a5f      	ldr	r2, [pc, #380]	; (8006404 <HAL_DMA_Init+0x1cc>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d031      	beq.n	80062f0 <HAL_DMA_Init+0xb8>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a5d      	ldr	r2, [pc, #372]	; (8006408 <HAL_DMA_Init+0x1d0>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d02c      	beq.n	80062f0 <HAL_DMA_Init+0xb8>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a5c      	ldr	r2, [pc, #368]	; (800640c <HAL_DMA_Init+0x1d4>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d027      	beq.n	80062f0 <HAL_DMA_Init+0xb8>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a5a      	ldr	r2, [pc, #360]	; (8006410 <HAL_DMA_Init+0x1d8>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d022      	beq.n	80062f0 <HAL_DMA_Init+0xb8>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a59      	ldr	r2, [pc, #356]	; (8006414 <HAL_DMA_Init+0x1dc>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d01d      	beq.n	80062f0 <HAL_DMA_Init+0xb8>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a57      	ldr	r2, [pc, #348]	; (8006418 <HAL_DMA_Init+0x1e0>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d018      	beq.n	80062f0 <HAL_DMA_Init+0xb8>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a56      	ldr	r2, [pc, #344]	; (800641c <HAL_DMA_Init+0x1e4>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d013      	beq.n	80062f0 <HAL_DMA_Init+0xb8>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a54      	ldr	r2, [pc, #336]	; (8006420 <HAL_DMA_Init+0x1e8>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d00e      	beq.n	80062f0 <HAL_DMA_Init+0xb8>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a53      	ldr	r2, [pc, #332]	; (8006424 <HAL_DMA_Init+0x1ec>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d009      	beq.n	80062f0 <HAL_DMA_Init+0xb8>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a51      	ldr	r2, [pc, #324]	; (8006428 <HAL_DMA_Init+0x1f0>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d004      	beq.n	80062f0 <HAL_DMA_Init+0xb8>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a50      	ldr	r2, [pc, #320]	; (800642c <HAL_DMA_Init+0x1f4>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d101      	bne.n	80062f4 <HAL_DMA_Init+0xbc>
 80062f0:	2301      	movs	r3, #1
 80062f2:	e000      	b.n	80062f6 <HAL_DMA_Init+0xbe>
 80062f4:	2300      	movs	r3, #0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	f000 813c 	beq.w	8006574 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2202      	movs	r2, #2
 8006300:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a37      	ldr	r2, [pc, #220]	; (80063f0 <HAL_DMA_Init+0x1b8>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d04a      	beq.n	80063ac <HAL_DMA_Init+0x174>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a36      	ldr	r2, [pc, #216]	; (80063f4 <HAL_DMA_Init+0x1bc>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d045      	beq.n	80063ac <HAL_DMA_Init+0x174>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a34      	ldr	r2, [pc, #208]	; (80063f8 <HAL_DMA_Init+0x1c0>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d040      	beq.n	80063ac <HAL_DMA_Init+0x174>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a33      	ldr	r2, [pc, #204]	; (80063fc <HAL_DMA_Init+0x1c4>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d03b      	beq.n	80063ac <HAL_DMA_Init+0x174>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a31      	ldr	r2, [pc, #196]	; (8006400 <HAL_DMA_Init+0x1c8>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d036      	beq.n	80063ac <HAL_DMA_Init+0x174>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a30      	ldr	r2, [pc, #192]	; (8006404 <HAL_DMA_Init+0x1cc>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d031      	beq.n	80063ac <HAL_DMA_Init+0x174>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a2e      	ldr	r2, [pc, #184]	; (8006408 <HAL_DMA_Init+0x1d0>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d02c      	beq.n	80063ac <HAL_DMA_Init+0x174>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a2d      	ldr	r2, [pc, #180]	; (800640c <HAL_DMA_Init+0x1d4>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d027      	beq.n	80063ac <HAL_DMA_Init+0x174>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a2b      	ldr	r2, [pc, #172]	; (8006410 <HAL_DMA_Init+0x1d8>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d022      	beq.n	80063ac <HAL_DMA_Init+0x174>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a2a      	ldr	r2, [pc, #168]	; (8006414 <HAL_DMA_Init+0x1dc>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d01d      	beq.n	80063ac <HAL_DMA_Init+0x174>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a28      	ldr	r2, [pc, #160]	; (8006418 <HAL_DMA_Init+0x1e0>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d018      	beq.n	80063ac <HAL_DMA_Init+0x174>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a27      	ldr	r2, [pc, #156]	; (800641c <HAL_DMA_Init+0x1e4>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d013      	beq.n	80063ac <HAL_DMA_Init+0x174>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a25      	ldr	r2, [pc, #148]	; (8006420 <HAL_DMA_Init+0x1e8>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d00e      	beq.n	80063ac <HAL_DMA_Init+0x174>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a24      	ldr	r2, [pc, #144]	; (8006424 <HAL_DMA_Init+0x1ec>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d009      	beq.n	80063ac <HAL_DMA_Init+0x174>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a22      	ldr	r2, [pc, #136]	; (8006428 <HAL_DMA_Init+0x1f0>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d004      	beq.n	80063ac <HAL_DMA_Init+0x174>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a21      	ldr	r2, [pc, #132]	; (800642c <HAL_DMA_Init+0x1f4>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d108      	bne.n	80063be <HAL_DMA_Init+0x186>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f022 0201 	bic.w	r2, r2, #1
 80063ba:	601a      	str	r2, [r3, #0]
 80063bc:	e007      	b.n	80063ce <HAL_DMA_Init+0x196>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f022 0201 	bic.w	r2, r2, #1
 80063cc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80063ce:	e02f      	b.n	8006430 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80063d0:	f7fd fe20 	bl	8004014 <HAL_GetTick>
 80063d4:	4602      	mov	r2, r0
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	2b05      	cmp	r3, #5
 80063dc:	d928      	bls.n	8006430 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2220      	movs	r2, #32
 80063e2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2203      	movs	r2, #3
 80063e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e244      	b.n	800687a <HAL_DMA_Init+0x642>
 80063f0:	40020010 	.word	0x40020010
 80063f4:	40020028 	.word	0x40020028
 80063f8:	40020040 	.word	0x40020040
 80063fc:	40020058 	.word	0x40020058
 8006400:	40020070 	.word	0x40020070
 8006404:	40020088 	.word	0x40020088
 8006408:	400200a0 	.word	0x400200a0
 800640c:	400200b8 	.word	0x400200b8
 8006410:	40020410 	.word	0x40020410
 8006414:	40020428 	.word	0x40020428
 8006418:	40020440 	.word	0x40020440
 800641c:	40020458 	.word	0x40020458
 8006420:	40020470 	.word	0x40020470
 8006424:	40020488 	.word	0x40020488
 8006428:	400204a0 	.word	0x400204a0
 800642c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0301 	and.w	r3, r3, #1
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1c8      	bne.n	80063d0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	4b84      	ldr	r3, [pc, #528]	; (800665c <HAL_DMA_Init+0x424>)
 800644a:	4013      	ands	r3, r2
 800644c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006456:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006462:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	699b      	ldr	r3, [r3, #24]
 8006468:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800646e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a1b      	ldr	r3, [r3, #32]
 8006474:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	4313      	orrs	r3, r2
 800647a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006480:	2b04      	cmp	r3, #4
 8006482:	d107      	bne.n	8006494 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800648c:	4313      	orrs	r3, r2
 800648e:	697a      	ldr	r2, [r7, #20]
 8006490:	4313      	orrs	r3, r2
 8006492:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	2b28      	cmp	r3, #40	; 0x28
 800649a:	d903      	bls.n	80064a4 <HAL_DMA_Init+0x26c>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	2b2e      	cmp	r3, #46	; 0x2e
 80064a2:	d91f      	bls.n	80064e4 <HAL_DMA_Init+0x2ac>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	2b3e      	cmp	r3, #62	; 0x3e
 80064aa:	d903      	bls.n	80064b4 <HAL_DMA_Init+0x27c>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	2b42      	cmp	r3, #66	; 0x42
 80064b2:	d917      	bls.n	80064e4 <HAL_DMA_Init+0x2ac>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	2b46      	cmp	r3, #70	; 0x46
 80064ba:	d903      	bls.n	80064c4 <HAL_DMA_Init+0x28c>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	2b48      	cmp	r3, #72	; 0x48
 80064c2:	d90f      	bls.n	80064e4 <HAL_DMA_Init+0x2ac>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	2b4e      	cmp	r3, #78	; 0x4e
 80064ca:	d903      	bls.n	80064d4 <HAL_DMA_Init+0x29c>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	2b52      	cmp	r3, #82	; 0x52
 80064d2:	d907      	bls.n	80064e4 <HAL_DMA_Init+0x2ac>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	2b73      	cmp	r3, #115	; 0x73
 80064da:	d905      	bls.n	80064e8 <HAL_DMA_Init+0x2b0>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	2b77      	cmp	r3, #119	; 0x77
 80064e2:	d801      	bhi.n	80064e8 <HAL_DMA_Init+0x2b0>
 80064e4:	2301      	movs	r3, #1
 80064e6:	e000      	b.n	80064ea <HAL_DMA_Init+0x2b2>
 80064e8:	2300      	movs	r3, #0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d003      	beq.n	80064f6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064f4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	697a      	ldr	r2, [r7, #20]
 80064fc:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	695b      	ldr	r3, [r3, #20]
 8006504:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	f023 0307 	bic.w	r3, r3, #7
 800650c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	4313      	orrs	r3, r2
 8006516:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651c:	2b04      	cmp	r3, #4
 800651e:	d117      	bne.n	8006550 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	4313      	orrs	r3, r2
 8006528:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00e      	beq.n	8006550 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f001 fdcc 	bl	80080d0 <DMA_CheckFifoParam>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d008      	beq.n	8006550 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2240      	movs	r2, #64	; 0x40
 8006542:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e194      	b.n	800687a <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	697a      	ldr	r2, [r7, #20]
 8006556:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f001 fd07 	bl	8007f6c <DMA_CalcBaseAndBitshift>
 800655e:	4603      	mov	r3, r0
 8006560:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006566:	f003 031f 	and.w	r3, r3, #31
 800656a:	223f      	movs	r2, #63	; 0x3f
 800656c:	409a      	lsls	r2, r3
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	609a      	str	r2, [r3, #8]
 8006572:	e0ca      	b.n	800670a <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a39      	ldr	r2, [pc, #228]	; (8006660 <HAL_DMA_Init+0x428>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d022      	beq.n	80065c4 <HAL_DMA_Init+0x38c>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a38      	ldr	r2, [pc, #224]	; (8006664 <HAL_DMA_Init+0x42c>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d01d      	beq.n	80065c4 <HAL_DMA_Init+0x38c>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a36      	ldr	r2, [pc, #216]	; (8006668 <HAL_DMA_Init+0x430>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d018      	beq.n	80065c4 <HAL_DMA_Init+0x38c>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a35      	ldr	r2, [pc, #212]	; (800666c <HAL_DMA_Init+0x434>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d013      	beq.n	80065c4 <HAL_DMA_Init+0x38c>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a33      	ldr	r2, [pc, #204]	; (8006670 <HAL_DMA_Init+0x438>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d00e      	beq.n	80065c4 <HAL_DMA_Init+0x38c>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a32      	ldr	r2, [pc, #200]	; (8006674 <HAL_DMA_Init+0x43c>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d009      	beq.n	80065c4 <HAL_DMA_Init+0x38c>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a30      	ldr	r2, [pc, #192]	; (8006678 <HAL_DMA_Init+0x440>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d004      	beq.n	80065c4 <HAL_DMA_Init+0x38c>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a2f      	ldr	r2, [pc, #188]	; (800667c <HAL_DMA_Init+0x444>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d101      	bne.n	80065c8 <HAL_DMA_Init+0x390>
 80065c4:	2301      	movs	r3, #1
 80065c6:	e000      	b.n	80065ca <HAL_DMA_Init+0x392>
 80065c8:	2300      	movs	r3, #0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	f000 8094 	beq.w	80066f8 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a22      	ldr	r2, [pc, #136]	; (8006660 <HAL_DMA_Init+0x428>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d021      	beq.n	800661e <HAL_DMA_Init+0x3e6>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a21      	ldr	r2, [pc, #132]	; (8006664 <HAL_DMA_Init+0x42c>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d01c      	beq.n	800661e <HAL_DMA_Init+0x3e6>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a1f      	ldr	r2, [pc, #124]	; (8006668 <HAL_DMA_Init+0x430>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d017      	beq.n	800661e <HAL_DMA_Init+0x3e6>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a1e      	ldr	r2, [pc, #120]	; (800666c <HAL_DMA_Init+0x434>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d012      	beq.n	800661e <HAL_DMA_Init+0x3e6>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a1c      	ldr	r2, [pc, #112]	; (8006670 <HAL_DMA_Init+0x438>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d00d      	beq.n	800661e <HAL_DMA_Init+0x3e6>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a1b      	ldr	r2, [pc, #108]	; (8006674 <HAL_DMA_Init+0x43c>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d008      	beq.n	800661e <HAL_DMA_Init+0x3e6>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a19      	ldr	r2, [pc, #100]	; (8006678 <HAL_DMA_Init+0x440>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d003      	beq.n	800661e <HAL_DMA_Init+0x3e6>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a18      	ldr	r2, [pc, #96]	; (800667c <HAL_DMA_Init+0x444>)
 800661c:	4293      	cmp	r3, r2
 800661e:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2202      	movs	r2, #2
 8006624:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006638:	697a      	ldr	r2, [r7, #20]
 800663a:	4b11      	ldr	r3, [pc, #68]	; (8006680 <HAL_DMA_Init+0x448>)
 800663c:	4013      	ands	r3, r2
 800663e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	2b40      	cmp	r3, #64	; 0x40
 8006646:	d01d      	beq.n	8006684 <HAL_DMA_Init+0x44c>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	2b80      	cmp	r3, #128	; 0x80
 800664e:	d102      	bne.n	8006656 <HAL_DMA_Init+0x41e>
 8006650:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006654:	e017      	b.n	8006686 <HAL_DMA_Init+0x44e>
 8006656:	2300      	movs	r3, #0
 8006658:	e015      	b.n	8006686 <HAL_DMA_Init+0x44e>
 800665a:	bf00      	nop
 800665c:	fe10803f 	.word	0xfe10803f
 8006660:	58025408 	.word	0x58025408
 8006664:	5802541c 	.word	0x5802541c
 8006668:	58025430 	.word	0x58025430
 800666c:	58025444 	.word	0x58025444
 8006670:	58025458 	.word	0x58025458
 8006674:	5802546c 	.word	0x5802546c
 8006678:	58025480 	.word	0x58025480
 800667c:	58025494 	.word	0x58025494
 8006680:	fffe000f 	.word	0xfffe000f
 8006684:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	68d2      	ldr	r2, [r2, #12]
 800668a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800668c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006694:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800669c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80066a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80066ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a1b      	ldr	r3, [r3, #32]
 80066b2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80066b4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80066b6:	697a      	ldr	r2, [r7, #20]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	461a      	mov	r2, r3
 80066ca:	4b6e      	ldr	r3, [pc, #440]	; (8006884 <HAL_DMA_Init+0x64c>)
 80066cc:	4413      	add	r3, r2
 80066ce:	4a6e      	ldr	r2, [pc, #440]	; (8006888 <HAL_DMA_Init+0x650>)
 80066d0:	fba2 2303 	umull	r2, r3, r2, r3
 80066d4:	091b      	lsrs	r3, r3, #4
 80066d6:	009a      	lsls	r2, r3, #2
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f001 fc45 	bl	8007f6c <DMA_CalcBaseAndBitshift>
 80066e2:	4603      	mov	r3, r0
 80066e4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066ea:	f003 031f 	and.w	r3, r3, #31
 80066ee:	2201      	movs	r2, #1
 80066f0:	409a      	lsls	r2, r3
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	605a      	str	r2, [r3, #4]
 80066f6:	e008      	b.n	800670a <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2240      	movs	r2, #64	; 0x40
 80066fc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2203      	movs	r2, #3
 8006702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e0b7      	b.n	800687a <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a5f      	ldr	r2, [pc, #380]	; (800688c <HAL_DMA_Init+0x654>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d072      	beq.n	80067fa <HAL_DMA_Init+0x5c2>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a5d      	ldr	r2, [pc, #372]	; (8006890 <HAL_DMA_Init+0x658>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d06d      	beq.n	80067fa <HAL_DMA_Init+0x5c2>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a5c      	ldr	r2, [pc, #368]	; (8006894 <HAL_DMA_Init+0x65c>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d068      	beq.n	80067fa <HAL_DMA_Init+0x5c2>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a5a      	ldr	r2, [pc, #360]	; (8006898 <HAL_DMA_Init+0x660>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d063      	beq.n	80067fa <HAL_DMA_Init+0x5c2>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a59      	ldr	r2, [pc, #356]	; (800689c <HAL_DMA_Init+0x664>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d05e      	beq.n	80067fa <HAL_DMA_Init+0x5c2>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a57      	ldr	r2, [pc, #348]	; (80068a0 <HAL_DMA_Init+0x668>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d059      	beq.n	80067fa <HAL_DMA_Init+0x5c2>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a56      	ldr	r2, [pc, #344]	; (80068a4 <HAL_DMA_Init+0x66c>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d054      	beq.n	80067fa <HAL_DMA_Init+0x5c2>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a54      	ldr	r2, [pc, #336]	; (80068a8 <HAL_DMA_Init+0x670>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d04f      	beq.n	80067fa <HAL_DMA_Init+0x5c2>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a53      	ldr	r2, [pc, #332]	; (80068ac <HAL_DMA_Init+0x674>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d04a      	beq.n	80067fa <HAL_DMA_Init+0x5c2>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a51      	ldr	r2, [pc, #324]	; (80068b0 <HAL_DMA_Init+0x678>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d045      	beq.n	80067fa <HAL_DMA_Init+0x5c2>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a50      	ldr	r2, [pc, #320]	; (80068b4 <HAL_DMA_Init+0x67c>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d040      	beq.n	80067fa <HAL_DMA_Init+0x5c2>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a4e      	ldr	r2, [pc, #312]	; (80068b8 <HAL_DMA_Init+0x680>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d03b      	beq.n	80067fa <HAL_DMA_Init+0x5c2>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a4d      	ldr	r2, [pc, #308]	; (80068bc <HAL_DMA_Init+0x684>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d036      	beq.n	80067fa <HAL_DMA_Init+0x5c2>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a4b      	ldr	r2, [pc, #300]	; (80068c0 <HAL_DMA_Init+0x688>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d031      	beq.n	80067fa <HAL_DMA_Init+0x5c2>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a4a      	ldr	r2, [pc, #296]	; (80068c4 <HAL_DMA_Init+0x68c>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d02c      	beq.n	80067fa <HAL_DMA_Init+0x5c2>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a48      	ldr	r2, [pc, #288]	; (80068c8 <HAL_DMA_Init+0x690>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d027      	beq.n	80067fa <HAL_DMA_Init+0x5c2>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a47      	ldr	r2, [pc, #284]	; (80068cc <HAL_DMA_Init+0x694>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d022      	beq.n	80067fa <HAL_DMA_Init+0x5c2>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a45      	ldr	r2, [pc, #276]	; (80068d0 <HAL_DMA_Init+0x698>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d01d      	beq.n	80067fa <HAL_DMA_Init+0x5c2>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a44      	ldr	r2, [pc, #272]	; (80068d4 <HAL_DMA_Init+0x69c>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d018      	beq.n	80067fa <HAL_DMA_Init+0x5c2>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a42      	ldr	r2, [pc, #264]	; (80068d8 <HAL_DMA_Init+0x6a0>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d013      	beq.n	80067fa <HAL_DMA_Init+0x5c2>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a41      	ldr	r2, [pc, #260]	; (80068dc <HAL_DMA_Init+0x6a4>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d00e      	beq.n	80067fa <HAL_DMA_Init+0x5c2>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a3f      	ldr	r2, [pc, #252]	; (80068e0 <HAL_DMA_Init+0x6a8>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d009      	beq.n	80067fa <HAL_DMA_Init+0x5c2>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a3e      	ldr	r2, [pc, #248]	; (80068e4 <HAL_DMA_Init+0x6ac>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d004      	beq.n	80067fa <HAL_DMA_Init+0x5c2>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a3c      	ldr	r2, [pc, #240]	; (80068e8 <HAL_DMA_Init+0x6b0>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d101      	bne.n	80067fe <HAL_DMA_Init+0x5c6>
 80067fa:	2301      	movs	r3, #1
 80067fc:	e000      	b.n	8006800 <HAL_DMA_Init+0x5c8>
 80067fe:	2300      	movs	r3, #0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d032      	beq.n	800686a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f001 fcdf 	bl	80081c8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	2b80      	cmp	r3, #128	; 0x80
 8006810:	d102      	bne.n	8006818 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2200      	movs	r2, #0
 8006816:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	685a      	ldr	r2, [r3, #4]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006820:	b2d2      	uxtb	r2, r2
 8006822:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800682c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d010      	beq.n	8006858 <HAL_DMA_Init+0x620>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	2b08      	cmp	r3, #8
 800683c:	d80c      	bhi.n	8006858 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f001 fd5c 	bl	80082fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006848:	2200      	movs	r2, #0
 800684a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006854:	605a      	str	r2, [r3, #4]
 8006856:	e008      	b.n	800686a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2201      	movs	r2, #1
 8006874:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3718      	adds	r7, #24
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	a7fdabf8 	.word	0xa7fdabf8
 8006888:	cccccccd 	.word	0xcccccccd
 800688c:	40020010 	.word	0x40020010
 8006890:	40020028 	.word	0x40020028
 8006894:	40020040 	.word	0x40020040
 8006898:	40020058 	.word	0x40020058
 800689c:	40020070 	.word	0x40020070
 80068a0:	40020088 	.word	0x40020088
 80068a4:	400200a0 	.word	0x400200a0
 80068a8:	400200b8 	.word	0x400200b8
 80068ac:	40020410 	.word	0x40020410
 80068b0:	40020428 	.word	0x40020428
 80068b4:	40020440 	.word	0x40020440
 80068b8:	40020458 	.word	0x40020458
 80068bc:	40020470 	.word	0x40020470
 80068c0:	40020488 	.word	0x40020488
 80068c4:	400204a0 	.word	0x400204a0
 80068c8:	400204b8 	.word	0x400204b8
 80068cc:	58025408 	.word	0x58025408
 80068d0:	5802541c 	.word	0x5802541c
 80068d4:	58025430 	.word	0x58025430
 80068d8:	58025444 	.word	0x58025444
 80068dc:	58025458 	.word	0x58025458
 80068e0:	5802546c 	.word	0x5802546c
 80068e4:	58025480 	.word	0x58025480
 80068e8:	58025494 	.word	0x58025494

080068ec <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b086      	sub	sp, #24
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
 80068f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068fa:	2300      	movs	r3, #0
 80068fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d101      	bne.n	8006908 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	e226      	b.n	8006d56 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800690e:	2b01      	cmp	r3, #1
 8006910:	d101      	bne.n	8006916 <HAL_DMA_Start_IT+0x2a>
 8006912:	2302      	movs	r3, #2
 8006914:	e21f      	b.n	8006d56 <HAL_DMA_Start_IT+0x46a>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2201      	movs	r2, #1
 800691a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006924:	b2db      	uxtb	r3, r3
 8006926:	2b01      	cmp	r3, #1
 8006928:	f040 820a 	bne.w	8006d40 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2202      	movs	r2, #2
 8006930:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a68      	ldr	r2, [pc, #416]	; (8006ae0 <HAL_DMA_Start_IT+0x1f4>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d04a      	beq.n	80069da <HAL_DMA_Start_IT+0xee>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a66      	ldr	r2, [pc, #408]	; (8006ae4 <HAL_DMA_Start_IT+0x1f8>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d045      	beq.n	80069da <HAL_DMA_Start_IT+0xee>
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a65      	ldr	r2, [pc, #404]	; (8006ae8 <HAL_DMA_Start_IT+0x1fc>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d040      	beq.n	80069da <HAL_DMA_Start_IT+0xee>
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a63      	ldr	r2, [pc, #396]	; (8006aec <HAL_DMA_Start_IT+0x200>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d03b      	beq.n	80069da <HAL_DMA_Start_IT+0xee>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a62      	ldr	r2, [pc, #392]	; (8006af0 <HAL_DMA_Start_IT+0x204>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d036      	beq.n	80069da <HAL_DMA_Start_IT+0xee>
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a60      	ldr	r2, [pc, #384]	; (8006af4 <HAL_DMA_Start_IT+0x208>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d031      	beq.n	80069da <HAL_DMA_Start_IT+0xee>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a5f      	ldr	r2, [pc, #380]	; (8006af8 <HAL_DMA_Start_IT+0x20c>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d02c      	beq.n	80069da <HAL_DMA_Start_IT+0xee>
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a5d      	ldr	r2, [pc, #372]	; (8006afc <HAL_DMA_Start_IT+0x210>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d027      	beq.n	80069da <HAL_DMA_Start_IT+0xee>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a5c      	ldr	r2, [pc, #368]	; (8006b00 <HAL_DMA_Start_IT+0x214>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d022      	beq.n	80069da <HAL_DMA_Start_IT+0xee>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a5a      	ldr	r2, [pc, #360]	; (8006b04 <HAL_DMA_Start_IT+0x218>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d01d      	beq.n	80069da <HAL_DMA_Start_IT+0xee>
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a59      	ldr	r2, [pc, #356]	; (8006b08 <HAL_DMA_Start_IT+0x21c>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d018      	beq.n	80069da <HAL_DMA_Start_IT+0xee>
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a57      	ldr	r2, [pc, #348]	; (8006b0c <HAL_DMA_Start_IT+0x220>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d013      	beq.n	80069da <HAL_DMA_Start_IT+0xee>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a56      	ldr	r2, [pc, #344]	; (8006b10 <HAL_DMA_Start_IT+0x224>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d00e      	beq.n	80069da <HAL_DMA_Start_IT+0xee>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a54      	ldr	r2, [pc, #336]	; (8006b14 <HAL_DMA_Start_IT+0x228>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d009      	beq.n	80069da <HAL_DMA_Start_IT+0xee>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a53      	ldr	r2, [pc, #332]	; (8006b18 <HAL_DMA_Start_IT+0x22c>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d004      	beq.n	80069da <HAL_DMA_Start_IT+0xee>
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a51      	ldr	r2, [pc, #324]	; (8006b1c <HAL_DMA_Start_IT+0x230>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d108      	bne.n	80069ec <HAL_DMA_Start_IT+0x100>
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f022 0201 	bic.w	r2, r2, #1
 80069e8:	601a      	str	r2, [r3, #0]
 80069ea:	e007      	b.n	80069fc <HAL_DMA_Start_IT+0x110>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f022 0201 	bic.w	r2, r2, #1
 80069fa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	68b9      	ldr	r1, [r7, #8]
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f001 f906 	bl	8007c14 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a34      	ldr	r2, [pc, #208]	; (8006ae0 <HAL_DMA_Start_IT+0x1f4>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d04a      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x1bc>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a33      	ldr	r2, [pc, #204]	; (8006ae4 <HAL_DMA_Start_IT+0x1f8>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d045      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x1bc>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a31      	ldr	r2, [pc, #196]	; (8006ae8 <HAL_DMA_Start_IT+0x1fc>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d040      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x1bc>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a30      	ldr	r2, [pc, #192]	; (8006aec <HAL_DMA_Start_IT+0x200>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d03b      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x1bc>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a2e      	ldr	r2, [pc, #184]	; (8006af0 <HAL_DMA_Start_IT+0x204>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d036      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x1bc>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a2d      	ldr	r2, [pc, #180]	; (8006af4 <HAL_DMA_Start_IT+0x208>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d031      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x1bc>
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a2b      	ldr	r2, [pc, #172]	; (8006af8 <HAL_DMA_Start_IT+0x20c>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d02c      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x1bc>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a2a      	ldr	r2, [pc, #168]	; (8006afc <HAL_DMA_Start_IT+0x210>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d027      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x1bc>
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a28      	ldr	r2, [pc, #160]	; (8006b00 <HAL_DMA_Start_IT+0x214>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d022      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x1bc>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a27      	ldr	r2, [pc, #156]	; (8006b04 <HAL_DMA_Start_IT+0x218>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d01d      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x1bc>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a25      	ldr	r2, [pc, #148]	; (8006b08 <HAL_DMA_Start_IT+0x21c>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d018      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x1bc>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a24      	ldr	r2, [pc, #144]	; (8006b0c <HAL_DMA_Start_IT+0x220>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d013      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x1bc>
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a22      	ldr	r2, [pc, #136]	; (8006b10 <HAL_DMA_Start_IT+0x224>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d00e      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x1bc>
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a21      	ldr	r2, [pc, #132]	; (8006b14 <HAL_DMA_Start_IT+0x228>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d009      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x1bc>
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a1f      	ldr	r2, [pc, #124]	; (8006b18 <HAL_DMA_Start_IT+0x22c>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d004      	beq.n	8006aa8 <HAL_DMA_Start_IT+0x1bc>
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a1e      	ldr	r2, [pc, #120]	; (8006b1c <HAL_DMA_Start_IT+0x230>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d101      	bne.n	8006aac <HAL_DMA_Start_IT+0x1c0>
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e000      	b.n	8006aae <HAL_DMA_Start_IT+0x1c2>
 8006aac:	2300      	movs	r3, #0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d036      	beq.n	8006b20 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f023 021e 	bic.w	r2, r3, #30
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f042 0216 	orr.w	r2, r2, #22
 8006ac4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d03e      	beq.n	8006b4c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f042 0208 	orr.w	r2, r2, #8
 8006adc:	601a      	str	r2, [r3, #0]
 8006ade:	e035      	b.n	8006b4c <HAL_DMA_Start_IT+0x260>
 8006ae0:	40020010 	.word	0x40020010
 8006ae4:	40020028 	.word	0x40020028
 8006ae8:	40020040 	.word	0x40020040
 8006aec:	40020058 	.word	0x40020058
 8006af0:	40020070 	.word	0x40020070
 8006af4:	40020088 	.word	0x40020088
 8006af8:	400200a0 	.word	0x400200a0
 8006afc:	400200b8 	.word	0x400200b8
 8006b00:	40020410 	.word	0x40020410
 8006b04:	40020428 	.word	0x40020428
 8006b08:	40020440 	.word	0x40020440
 8006b0c:	40020458 	.word	0x40020458
 8006b10:	40020470 	.word	0x40020470
 8006b14:	40020488 	.word	0x40020488
 8006b18:	400204a0 	.word	0x400204a0
 8006b1c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f023 020e 	bic.w	r2, r3, #14
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f042 020a 	orr.w	r2, r2, #10
 8006b32:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d007      	beq.n	8006b4c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f042 0204 	orr.w	r2, r2, #4
 8006b4a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a83      	ldr	r2, [pc, #524]	; (8006d60 <HAL_DMA_Start_IT+0x474>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d072      	beq.n	8006c3c <HAL_DMA_Start_IT+0x350>
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a82      	ldr	r2, [pc, #520]	; (8006d64 <HAL_DMA_Start_IT+0x478>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d06d      	beq.n	8006c3c <HAL_DMA_Start_IT+0x350>
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a80      	ldr	r2, [pc, #512]	; (8006d68 <HAL_DMA_Start_IT+0x47c>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d068      	beq.n	8006c3c <HAL_DMA_Start_IT+0x350>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a7f      	ldr	r2, [pc, #508]	; (8006d6c <HAL_DMA_Start_IT+0x480>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d063      	beq.n	8006c3c <HAL_DMA_Start_IT+0x350>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a7d      	ldr	r2, [pc, #500]	; (8006d70 <HAL_DMA_Start_IT+0x484>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d05e      	beq.n	8006c3c <HAL_DMA_Start_IT+0x350>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a7c      	ldr	r2, [pc, #496]	; (8006d74 <HAL_DMA_Start_IT+0x488>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d059      	beq.n	8006c3c <HAL_DMA_Start_IT+0x350>
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a7a      	ldr	r2, [pc, #488]	; (8006d78 <HAL_DMA_Start_IT+0x48c>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d054      	beq.n	8006c3c <HAL_DMA_Start_IT+0x350>
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a79      	ldr	r2, [pc, #484]	; (8006d7c <HAL_DMA_Start_IT+0x490>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d04f      	beq.n	8006c3c <HAL_DMA_Start_IT+0x350>
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a77      	ldr	r2, [pc, #476]	; (8006d80 <HAL_DMA_Start_IT+0x494>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d04a      	beq.n	8006c3c <HAL_DMA_Start_IT+0x350>
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a76      	ldr	r2, [pc, #472]	; (8006d84 <HAL_DMA_Start_IT+0x498>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d045      	beq.n	8006c3c <HAL_DMA_Start_IT+0x350>
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a74      	ldr	r2, [pc, #464]	; (8006d88 <HAL_DMA_Start_IT+0x49c>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d040      	beq.n	8006c3c <HAL_DMA_Start_IT+0x350>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a73      	ldr	r2, [pc, #460]	; (8006d8c <HAL_DMA_Start_IT+0x4a0>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d03b      	beq.n	8006c3c <HAL_DMA_Start_IT+0x350>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a71      	ldr	r2, [pc, #452]	; (8006d90 <HAL_DMA_Start_IT+0x4a4>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d036      	beq.n	8006c3c <HAL_DMA_Start_IT+0x350>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a70      	ldr	r2, [pc, #448]	; (8006d94 <HAL_DMA_Start_IT+0x4a8>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d031      	beq.n	8006c3c <HAL_DMA_Start_IT+0x350>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a6e      	ldr	r2, [pc, #440]	; (8006d98 <HAL_DMA_Start_IT+0x4ac>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d02c      	beq.n	8006c3c <HAL_DMA_Start_IT+0x350>
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a6d      	ldr	r2, [pc, #436]	; (8006d9c <HAL_DMA_Start_IT+0x4b0>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d027      	beq.n	8006c3c <HAL_DMA_Start_IT+0x350>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a6b      	ldr	r2, [pc, #428]	; (8006da0 <HAL_DMA_Start_IT+0x4b4>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d022      	beq.n	8006c3c <HAL_DMA_Start_IT+0x350>
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a6a      	ldr	r2, [pc, #424]	; (8006da4 <HAL_DMA_Start_IT+0x4b8>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d01d      	beq.n	8006c3c <HAL_DMA_Start_IT+0x350>
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a68      	ldr	r2, [pc, #416]	; (8006da8 <HAL_DMA_Start_IT+0x4bc>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d018      	beq.n	8006c3c <HAL_DMA_Start_IT+0x350>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a67      	ldr	r2, [pc, #412]	; (8006dac <HAL_DMA_Start_IT+0x4c0>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d013      	beq.n	8006c3c <HAL_DMA_Start_IT+0x350>
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a65      	ldr	r2, [pc, #404]	; (8006db0 <HAL_DMA_Start_IT+0x4c4>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d00e      	beq.n	8006c3c <HAL_DMA_Start_IT+0x350>
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a64      	ldr	r2, [pc, #400]	; (8006db4 <HAL_DMA_Start_IT+0x4c8>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d009      	beq.n	8006c3c <HAL_DMA_Start_IT+0x350>
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a62      	ldr	r2, [pc, #392]	; (8006db8 <HAL_DMA_Start_IT+0x4cc>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d004      	beq.n	8006c3c <HAL_DMA_Start_IT+0x350>
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a61      	ldr	r2, [pc, #388]	; (8006dbc <HAL_DMA_Start_IT+0x4d0>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d101      	bne.n	8006c40 <HAL_DMA_Start_IT+0x354>
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e000      	b.n	8006c42 <HAL_DMA_Start_IT+0x356>
 8006c40:	2300      	movs	r3, #0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d01a      	beq.n	8006c7c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d007      	beq.n	8006c64 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c62:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d007      	beq.n	8006c7c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c7a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a37      	ldr	r2, [pc, #220]	; (8006d60 <HAL_DMA_Start_IT+0x474>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d04a      	beq.n	8006d1c <HAL_DMA_Start_IT+0x430>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a36      	ldr	r2, [pc, #216]	; (8006d64 <HAL_DMA_Start_IT+0x478>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d045      	beq.n	8006d1c <HAL_DMA_Start_IT+0x430>
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a34      	ldr	r2, [pc, #208]	; (8006d68 <HAL_DMA_Start_IT+0x47c>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d040      	beq.n	8006d1c <HAL_DMA_Start_IT+0x430>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a33      	ldr	r2, [pc, #204]	; (8006d6c <HAL_DMA_Start_IT+0x480>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d03b      	beq.n	8006d1c <HAL_DMA_Start_IT+0x430>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a31      	ldr	r2, [pc, #196]	; (8006d70 <HAL_DMA_Start_IT+0x484>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d036      	beq.n	8006d1c <HAL_DMA_Start_IT+0x430>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a30      	ldr	r2, [pc, #192]	; (8006d74 <HAL_DMA_Start_IT+0x488>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d031      	beq.n	8006d1c <HAL_DMA_Start_IT+0x430>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a2e      	ldr	r2, [pc, #184]	; (8006d78 <HAL_DMA_Start_IT+0x48c>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d02c      	beq.n	8006d1c <HAL_DMA_Start_IT+0x430>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a2d      	ldr	r2, [pc, #180]	; (8006d7c <HAL_DMA_Start_IT+0x490>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d027      	beq.n	8006d1c <HAL_DMA_Start_IT+0x430>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a2b      	ldr	r2, [pc, #172]	; (8006d80 <HAL_DMA_Start_IT+0x494>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d022      	beq.n	8006d1c <HAL_DMA_Start_IT+0x430>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a2a      	ldr	r2, [pc, #168]	; (8006d84 <HAL_DMA_Start_IT+0x498>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d01d      	beq.n	8006d1c <HAL_DMA_Start_IT+0x430>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a28      	ldr	r2, [pc, #160]	; (8006d88 <HAL_DMA_Start_IT+0x49c>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d018      	beq.n	8006d1c <HAL_DMA_Start_IT+0x430>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a27      	ldr	r2, [pc, #156]	; (8006d8c <HAL_DMA_Start_IT+0x4a0>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d013      	beq.n	8006d1c <HAL_DMA_Start_IT+0x430>
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a25      	ldr	r2, [pc, #148]	; (8006d90 <HAL_DMA_Start_IT+0x4a4>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d00e      	beq.n	8006d1c <HAL_DMA_Start_IT+0x430>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a24      	ldr	r2, [pc, #144]	; (8006d94 <HAL_DMA_Start_IT+0x4a8>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d009      	beq.n	8006d1c <HAL_DMA_Start_IT+0x430>
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a22      	ldr	r2, [pc, #136]	; (8006d98 <HAL_DMA_Start_IT+0x4ac>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d004      	beq.n	8006d1c <HAL_DMA_Start_IT+0x430>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a21      	ldr	r2, [pc, #132]	; (8006d9c <HAL_DMA_Start_IT+0x4b0>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d108      	bne.n	8006d2e <HAL_DMA_Start_IT+0x442>
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f042 0201 	orr.w	r2, r2, #1
 8006d2a:	601a      	str	r2, [r3, #0]
 8006d2c:	e012      	b.n	8006d54 <HAL_DMA_Start_IT+0x468>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f042 0201 	orr.w	r2, r2, #1
 8006d3c:	601a      	str	r2, [r3, #0]
 8006d3e:	e009      	b.n	8006d54 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d46:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3718      	adds	r7, #24
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	40020010 	.word	0x40020010
 8006d64:	40020028 	.word	0x40020028
 8006d68:	40020040 	.word	0x40020040
 8006d6c:	40020058 	.word	0x40020058
 8006d70:	40020070 	.word	0x40020070
 8006d74:	40020088 	.word	0x40020088
 8006d78:	400200a0 	.word	0x400200a0
 8006d7c:	400200b8 	.word	0x400200b8
 8006d80:	40020410 	.word	0x40020410
 8006d84:	40020428 	.word	0x40020428
 8006d88:	40020440 	.word	0x40020440
 8006d8c:	40020458 	.word	0x40020458
 8006d90:	40020470 	.word	0x40020470
 8006d94:	40020488 	.word	0x40020488
 8006d98:	400204a0 	.word	0x400204a0
 8006d9c:	400204b8 	.word	0x400204b8
 8006da0:	58025408 	.word	0x58025408
 8006da4:	5802541c 	.word	0x5802541c
 8006da8:	58025430 	.word	0x58025430
 8006dac:	58025444 	.word	0x58025444
 8006db0:	58025458 	.word	0x58025458
 8006db4:	5802546c 	.word	0x5802546c
 8006db8:	58025480 	.word	0x58025480
 8006dbc:	58025494 	.word	0x58025494

08006dc0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b08a      	sub	sp, #40	; 0x28
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006dcc:	4b67      	ldr	r3, [pc, #412]	; (8006f6c <HAL_DMA_IRQHandler+0x1ac>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a67      	ldr	r2, [pc, #412]	; (8006f70 <HAL_DMA_IRQHandler+0x1b0>)
 8006dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8006dd6:	0a9b      	lsrs	r3, r3, #10
 8006dd8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dde:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006de4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006de6:	6a3b      	ldr	r3, [r7, #32]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a5f      	ldr	r2, [pc, #380]	; (8006f74 <HAL_DMA_IRQHandler+0x1b4>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d04a      	beq.n	8006e92 <HAL_DMA_IRQHandler+0xd2>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a5d      	ldr	r2, [pc, #372]	; (8006f78 <HAL_DMA_IRQHandler+0x1b8>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d045      	beq.n	8006e92 <HAL_DMA_IRQHandler+0xd2>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a5c      	ldr	r2, [pc, #368]	; (8006f7c <HAL_DMA_IRQHandler+0x1bc>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d040      	beq.n	8006e92 <HAL_DMA_IRQHandler+0xd2>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a5a      	ldr	r2, [pc, #360]	; (8006f80 <HAL_DMA_IRQHandler+0x1c0>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d03b      	beq.n	8006e92 <HAL_DMA_IRQHandler+0xd2>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a59      	ldr	r2, [pc, #356]	; (8006f84 <HAL_DMA_IRQHandler+0x1c4>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d036      	beq.n	8006e92 <HAL_DMA_IRQHandler+0xd2>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a57      	ldr	r2, [pc, #348]	; (8006f88 <HAL_DMA_IRQHandler+0x1c8>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d031      	beq.n	8006e92 <HAL_DMA_IRQHandler+0xd2>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a56      	ldr	r2, [pc, #344]	; (8006f8c <HAL_DMA_IRQHandler+0x1cc>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d02c      	beq.n	8006e92 <HAL_DMA_IRQHandler+0xd2>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a54      	ldr	r2, [pc, #336]	; (8006f90 <HAL_DMA_IRQHandler+0x1d0>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d027      	beq.n	8006e92 <HAL_DMA_IRQHandler+0xd2>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a53      	ldr	r2, [pc, #332]	; (8006f94 <HAL_DMA_IRQHandler+0x1d4>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d022      	beq.n	8006e92 <HAL_DMA_IRQHandler+0xd2>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a51      	ldr	r2, [pc, #324]	; (8006f98 <HAL_DMA_IRQHandler+0x1d8>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d01d      	beq.n	8006e92 <HAL_DMA_IRQHandler+0xd2>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a50      	ldr	r2, [pc, #320]	; (8006f9c <HAL_DMA_IRQHandler+0x1dc>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d018      	beq.n	8006e92 <HAL_DMA_IRQHandler+0xd2>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a4e      	ldr	r2, [pc, #312]	; (8006fa0 <HAL_DMA_IRQHandler+0x1e0>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d013      	beq.n	8006e92 <HAL_DMA_IRQHandler+0xd2>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a4d      	ldr	r2, [pc, #308]	; (8006fa4 <HAL_DMA_IRQHandler+0x1e4>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d00e      	beq.n	8006e92 <HAL_DMA_IRQHandler+0xd2>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a4b      	ldr	r2, [pc, #300]	; (8006fa8 <HAL_DMA_IRQHandler+0x1e8>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d009      	beq.n	8006e92 <HAL_DMA_IRQHandler+0xd2>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a4a      	ldr	r2, [pc, #296]	; (8006fac <HAL_DMA_IRQHandler+0x1ec>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d004      	beq.n	8006e92 <HAL_DMA_IRQHandler+0xd2>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a48      	ldr	r2, [pc, #288]	; (8006fb0 <HAL_DMA_IRQHandler+0x1f0>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d101      	bne.n	8006e96 <HAL_DMA_IRQHandler+0xd6>
 8006e92:	2301      	movs	r3, #1
 8006e94:	e000      	b.n	8006e98 <HAL_DMA_IRQHandler+0xd8>
 8006e96:	2300      	movs	r3, #0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f000 842b 	beq.w	80076f4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ea2:	f003 031f 	and.w	r3, r3, #31
 8006ea6:	2208      	movs	r2, #8
 8006ea8:	409a      	lsls	r2, r3
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	4013      	ands	r3, r2
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f000 80a2 	beq.w	8006ff8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a2e      	ldr	r2, [pc, #184]	; (8006f74 <HAL_DMA_IRQHandler+0x1b4>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d04a      	beq.n	8006f54 <HAL_DMA_IRQHandler+0x194>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a2d      	ldr	r2, [pc, #180]	; (8006f78 <HAL_DMA_IRQHandler+0x1b8>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d045      	beq.n	8006f54 <HAL_DMA_IRQHandler+0x194>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a2b      	ldr	r2, [pc, #172]	; (8006f7c <HAL_DMA_IRQHandler+0x1bc>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d040      	beq.n	8006f54 <HAL_DMA_IRQHandler+0x194>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a2a      	ldr	r2, [pc, #168]	; (8006f80 <HAL_DMA_IRQHandler+0x1c0>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d03b      	beq.n	8006f54 <HAL_DMA_IRQHandler+0x194>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a28      	ldr	r2, [pc, #160]	; (8006f84 <HAL_DMA_IRQHandler+0x1c4>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d036      	beq.n	8006f54 <HAL_DMA_IRQHandler+0x194>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a27      	ldr	r2, [pc, #156]	; (8006f88 <HAL_DMA_IRQHandler+0x1c8>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d031      	beq.n	8006f54 <HAL_DMA_IRQHandler+0x194>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a25      	ldr	r2, [pc, #148]	; (8006f8c <HAL_DMA_IRQHandler+0x1cc>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d02c      	beq.n	8006f54 <HAL_DMA_IRQHandler+0x194>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a24      	ldr	r2, [pc, #144]	; (8006f90 <HAL_DMA_IRQHandler+0x1d0>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d027      	beq.n	8006f54 <HAL_DMA_IRQHandler+0x194>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a22      	ldr	r2, [pc, #136]	; (8006f94 <HAL_DMA_IRQHandler+0x1d4>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d022      	beq.n	8006f54 <HAL_DMA_IRQHandler+0x194>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a21      	ldr	r2, [pc, #132]	; (8006f98 <HAL_DMA_IRQHandler+0x1d8>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d01d      	beq.n	8006f54 <HAL_DMA_IRQHandler+0x194>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a1f      	ldr	r2, [pc, #124]	; (8006f9c <HAL_DMA_IRQHandler+0x1dc>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d018      	beq.n	8006f54 <HAL_DMA_IRQHandler+0x194>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a1e      	ldr	r2, [pc, #120]	; (8006fa0 <HAL_DMA_IRQHandler+0x1e0>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d013      	beq.n	8006f54 <HAL_DMA_IRQHandler+0x194>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a1c      	ldr	r2, [pc, #112]	; (8006fa4 <HAL_DMA_IRQHandler+0x1e4>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d00e      	beq.n	8006f54 <HAL_DMA_IRQHandler+0x194>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a1b      	ldr	r2, [pc, #108]	; (8006fa8 <HAL_DMA_IRQHandler+0x1e8>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d009      	beq.n	8006f54 <HAL_DMA_IRQHandler+0x194>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a19      	ldr	r2, [pc, #100]	; (8006fac <HAL_DMA_IRQHandler+0x1ec>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d004      	beq.n	8006f54 <HAL_DMA_IRQHandler+0x194>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a18      	ldr	r2, [pc, #96]	; (8006fb0 <HAL_DMA_IRQHandler+0x1f0>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d12f      	bne.n	8006fb4 <HAL_DMA_IRQHandler+0x1f4>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 0304 	and.w	r3, r3, #4
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	bf14      	ite	ne
 8006f62:	2301      	movne	r3, #1
 8006f64:	2300      	moveq	r3, #0
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	e02e      	b.n	8006fc8 <HAL_DMA_IRQHandler+0x208>
 8006f6a:	bf00      	nop
 8006f6c:	24000000 	.word	0x24000000
 8006f70:	1b4e81b5 	.word	0x1b4e81b5
 8006f74:	40020010 	.word	0x40020010
 8006f78:	40020028 	.word	0x40020028
 8006f7c:	40020040 	.word	0x40020040
 8006f80:	40020058 	.word	0x40020058
 8006f84:	40020070 	.word	0x40020070
 8006f88:	40020088 	.word	0x40020088
 8006f8c:	400200a0 	.word	0x400200a0
 8006f90:	400200b8 	.word	0x400200b8
 8006f94:	40020410 	.word	0x40020410
 8006f98:	40020428 	.word	0x40020428
 8006f9c:	40020440 	.word	0x40020440
 8006fa0:	40020458 	.word	0x40020458
 8006fa4:	40020470 	.word	0x40020470
 8006fa8:	40020488 	.word	0x40020488
 8006fac:	400204a0 	.word	0x400204a0
 8006fb0:	400204b8 	.word	0x400204b8
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 0308 	and.w	r3, r3, #8
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	bf14      	ite	ne
 8006fc2:	2301      	movne	r3, #1
 8006fc4:	2300      	moveq	r3, #0
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d015      	beq.n	8006ff8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f022 0204 	bic.w	r2, r2, #4
 8006fda:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fe0:	f003 031f 	and.w	r3, r3, #31
 8006fe4:	2208      	movs	r2, #8
 8006fe6:	409a      	lsls	r2, r3
 8006fe8:	6a3b      	ldr	r3, [r7, #32]
 8006fea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ff0:	f043 0201 	orr.w	r2, r3, #1
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ffc:	f003 031f 	and.w	r3, r3, #31
 8007000:	69ba      	ldr	r2, [r7, #24]
 8007002:	fa22 f303 	lsr.w	r3, r2, r3
 8007006:	f003 0301 	and.w	r3, r3, #1
 800700a:	2b00      	cmp	r3, #0
 800700c:	d06e      	beq.n	80070ec <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a69      	ldr	r2, [pc, #420]	; (80071b8 <HAL_DMA_IRQHandler+0x3f8>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d04a      	beq.n	80070ae <HAL_DMA_IRQHandler+0x2ee>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a67      	ldr	r2, [pc, #412]	; (80071bc <HAL_DMA_IRQHandler+0x3fc>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d045      	beq.n	80070ae <HAL_DMA_IRQHandler+0x2ee>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a66      	ldr	r2, [pc, #408]	; (80071c0 <HAL_DMA_IRQHandler+0x400>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d040      	beq.n	80070ae <HAL_DMA_IRQHandler+0x2ee>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a64      	ldr	r2, [pc, #400]	; (80071c4 <HAL_DMA_IRQHandler+0x404>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d03b      	beq.n	80070ae <HAL_DMA_IRQHandler+0x2ee>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a63      	ldr	r2, [pc, #396]	; (80071c8 <HAL_DMA_IRQHandler+0x408>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d036      	beq.n	80070ae <HAL_DMA_IRQHandler+0x2ee>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a61      	ldr	r2, [pc, #388]	; (80071cc <HAL_DMA_IRQHandler+0x40c>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d031      	beq.n	80070ae <HAL_DMA_IRQHandler+0x2ee>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a60      	ldr	r2, [pc, #384]	; (80071d0 <HAL_DMA_IRQHandler+0x410>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d02c      	beq.n	80070ae <HAL_DMA_IRQHandler+0x2ee>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a5e      	ldr	r2, [pc, #376]	; (80071d4 <HAL_DMA_IRQHandler+0x414>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d027      	beq.n	80070ae <HAL_DMA_IRQHandler+0x2ee>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a5d      	ldr	r2, [pc, #372]	; (80071d8 <HAL_DMA_IRQHandler+0x418>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d022      	beq.n	80070ae <HAL_DMA_IRQHandler+0x2ee>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a5b      	ldr	r2, [pc, #364]	; (80071dc <HAL_DMA_IRQHandler+0x41c>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d01d      	beq.n	80070ae <HAL_DMA_IRQHandler+0x2ee>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a5a      	ldr	r2, [pc, #360]	; (80071e0 <HAL_DMA_IRQHandler+0x420>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d018      	beq.n	80070ae <HAL_DMA_IRQHandler+0x2ee>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a58      	ldr	r2, [pc, #352]	; (80071e4 <HAL_DMA_IRQHandler+0x424>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d013      	beq.n	80070ae <HAL_DMA_IRQHandler+0x2ee>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a57      	ldr	r2, [pc, #348]	; (80071e8 <HAL_DMA_IRQHandler+0x428>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d00e      	beq.n	80070ae <HAL_DMA_IRQHandler+0x2ee>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a55      	ldr	r2, [pc, #340]	; (80071ec <HAL_DMA_IRQHandler+0x42c>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d009      	beq.n	80070ae <HAL_DMA_IRQHandler+0x2ee>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a54      	ldr	r2, [pc, #336]	; (80071f0 <HAL_DMA_IRQHandler+0x430>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d004      	beq.n	80070ae <HAL_DMA_IRQHandler+0x2ee>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a52      	ldr	r2, [pc, #328]	; (80071f4 <HAL_DMA_IRQHandler+0x434>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d10a      	bne.n	80070c4 <HAL_DMA_IRQHandler+0x304>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	695b      	ldr	r3, [r3, #20]
 80070b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	bf14      	ite	ne
 80070bc:	2301      	movne	r3, #1
 80070be:	2300      	moveq	r3, #0
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	e003      	b.n	80070cc <HAL_DMA_IRQHandler+0x30c>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	2300      	movs	r3, #0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d00d      	beq.n	80070ec <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070d4:	f003 031f 	and.w	r3, r3, #31
 80070d8:	2201      	movs	r2, #1
 80070da:	409a      	lsls	r2, r3
 80070dc:	6a3b      	ldr	r3, [r7, #32]
 80070de:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070e4:	f043 0202 	orr.w	r2, r3, #2
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070f0:	f003 031f 	and.w	r3, r3, #31
 80070f4:	2204      	movs	r2, #4
 80070f6:	409a      	lsls	r2, r3
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	4013      	ands	r3, r2
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f000 808f 	beq.w	8007220 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a2c      	ldr	r2, [pc, #176]	; (80071b8 <HAL_DMA_IRQHandler+0x3f8>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d04a      	beq.n	80071a2 <HAL_DMA_IRQHandler+0x3e2>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a2a      	ldr	r2, [pc, #168]	; (80071bc <HAL_DMA_IRQHandler+0x3fc>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d045      	beq.n	80071a2 <HAL_DMA_IRQHandler+0x3e2>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a29      	ldr	r2, [pc, #164]	; (80071c0 <HAL_DMA_IRQHandler+0x400>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d040      	beq.n	80071a2 <HAL_DMA_IRQHandler+0x3e2>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a27      	ldr	r2, [pc, #156]	; (80071c4 <HAL_DMA_IRQHandler+0x404>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d03b      	beq.n	80071a2 <HAL_DMA_IRQHandler+0x3e2>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a26      	ldr	r2, [pc, #152]	; (80071c8 <HAL_DMA_IRQHandler+0x408>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d036      	beq.n	80071a2 <HAL_DMA_IRQHandler+0x3e2>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a24      	ldr	r2, [pc, #144]	; (80071cc <HAL_DMA_IRQHandler+0x40c>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d031      	beq.n	80071a2 <HAL_DMA_IRQHandler+0x3e2>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a23      	ldr	r2, [pc, #140]	; (80071d0 <HAL_DMA_IRQHandler+0x410>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d02c      	beq.n	80071a2 <HAL_DMA_IRQHandler+0x3e2>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a21      	ldr	r2, [pc, #132]	; (80071d4 <HAL_DMA_IRQHandler+0x414>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d027      	beq.n	80071a2 <HAL_DMA_IRQHandler+0x3e2>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a20      	ldr	r2, [pc, #128]	; (80071d8 <HAL_DMA_IRQHandler+0x418>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d022      	beq.n	80071a2 <HAL_DMA_IRQHandler+0x3e2>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a1e      	ldr	r2, [pc, #120]	; (80071dc <HAL_DMA_IRQHandler+0x41c>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d01d      	beq.n	80071a2 <HAL_DMA_IRQHandler+0x3e2>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a1d      	ldr	r2, [pc, #116]	; (80071e0 <HAL_DMA_IRQHandler+0x420>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d018      	beq.n	80071a2 <HAL_DMA_IRQHandler+0x3e2>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a1b      	ldr	r2, [pc, #108]	; (80071e4 <HAL_DMA_IRQHandler+0x424>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d013      	beq.n	80071a2 <HAL_DMA_IRQHandler+0x3e2>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a1a      	ldr	r2, [pc, #104]	; (80071e8 <HAL_DMA_IRQHandler+0x428>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d00e      	beq.n	80071a2 <HAL_DMA_IRQHandler+0x3e2>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a18      	ldr	r2, [pc, #96]	; (80071ec <HAL_DMA_IRQHandler+0x42c>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d009      	beq.n	80071a2 <HAL_DMA_IRQHandler+0x3e2>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a17      	ldr	r2, [pc, #92]	; (80071f0 <HAL_DMA_IRQHandler+0x430>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d004      	beq.n	80071a2 <HAL_DMA_IRQHandler+0x3e2>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a15      	ldr	r2, [pc, #84]	; (80071f4 <HAL_DMA_IRQHandler+0x434>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d12a      	bne.n	80071f8 <HAL_DMA_IRQHandler+0x438>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 0302 	and.w	r3, r3, #2
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	bf14      	ite	ne
 80071b0:	2301      	movne	r3, #1
 80071b2:	2300      	moveq	r3, #0
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	e023      	b.n	8007200 <HAL_DMA_IRQHandler+0x440>
 80071b8:	40020010 	.word	0x40020010
 80071bc:	40020028 	.word	0x40020028
 80071c0:	40020040 	.word	0x40020040
 80071c4:	40020058 	.word	0x40020058
 80071c8:	40020070 	.word	0x40020070
 80071cc:	40020088 	.word	0x40020088
 80071d0:	400200a0 	.word	0x400200a0
 80071d4:	400200b8 	.word	0x400200b8
 80071d8:	40020410 	.word	0x40020410
 80071dc:	40020428 	.word	0x40020428
 80071e0:	40020440 	.word	0x40020440
 80071e4:	40020458 	.word	0x40020458
 80071e8:	40020470 	.word	0x40020470
 80071ec:	40020488 	.word	0x40020488
 80071f0:	400204a0 	.word	0x400204a0
 80071f4:	400204b8 	.word	0x400204b8
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	2300      	movs	r3, #0
 8007200:	2b00      	cmp	r3, #0
 8007202:	d00d      	beq.n	8007220 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007208:	f003 031f 	and.w	r3, r3, #31
 800720c:	2204      	movs	r2, #4
 800720e:	409a      	lsls	r2, r3
 8007210:	6a3b      	ldr	r3, [r7, #32]
 8007212:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007218:	f043 0204 	orr.w	r2, r3, #4
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007224:	f003 031f 	and.w	r3, r3, #31
 8007228:	2210      	movs	r2, #16
 800722a:	409a      	lsls	r2, r3
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	4013      	ands	r3, r2
 8007230:	2b00      	cmp	r3, #0
 8007232:	f000 80a6 	beq.w	8007382 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a85      	ldr	r2, [pc, #532]	; (8007450 <HAL_DMA_IRQHandler+0x690>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d04a      	beq.n	80072d6 <HAL_DMA_IRQHandler+0x516>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a83      	ldr	r2, [pc, #524]	; (8007454 <HAL_DMA_IRQHandler+0x694>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d045      	beq.n	80072d6 <HAL_DMA_IRQHandler+0x516>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a82      	ldr	r2, [pc, #520]	; (8007458 <HAL_DMA_IRQHandler+0x698>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d040      	beq.n	80072d6 <HAL_DMA_IRQHandler+0x516>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a80      	ldr	r2, [pc, #512]	; (800745c <HAL_DMA_IRQHandler+0x69c>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d03b      	beq.n	80072d6 <HAL_DMA_IRQHandler+0x516>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a7f      	ldr	r2, [pc, #508]	; (8007460 <HAL_DMA_IRQHandler+0x6a0>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d036      	beq.n	80072d6 <HAL_DMA_IRQHandler+0x516>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a7d      	ldr	r2, [pc, #500]	; (8007464 <HAL_DMA_IRQHandler+0x6a4>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d031      	beq.n	80072d6 <HAL_DMA_IRQHandler+0x516>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a7c      	ldr	r2, [pc, #496]	; (8007468 <HAL_DMA_IRQHandler+0x6a8>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d02c      	beq.n	80072d6 <HAL_DMA_IRQHandler+0x516>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a7a      	ldr	r2, [pc, #488]	; (800746c <HAL_DMA_IRQHandler+0x6ac>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d027      	beq.n	80072d6 <HAL_DMA_IRQHandler+0x516>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a79      	ldr	r2, [pc, #484]	; (8007470 <HAL_DMA_IRQHandler+0x6b0>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d022      	beq.n	80072d6 <HAL_DMA_IRQHandler+0x516>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a77      	ldr	r2, [pc, #476]	; (8007474 <HAL_DMA_IRQHandler+0x6b4>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d01d      	beq.n	80072d6 <HAL_DMA_IRQHandler+0x516>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a76      	ldr	r2, [pc, #472]	; (8007478 <HAL_DMA_IRQHandler+0x6b8>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d018      	beq.n	80072d6 <HAL_DMA_IRQHandler+0x516>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a74      	ldr	r2, [pc, #464]	; (800747c <HAL_DMA_IRQHandler+0x6bc>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d013      	beq.n	80072d6 <HAL_DMA_IRQHandler+0x516>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a73      	ldr	r2, [pc, #460]	; (8007480 <HAL_DMA_IRQHandler+0x6c0>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d00e      	beq.n	80072d6 <HAL_DMA_IRQHandler+0x516>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a71      	ldr	r2, [pc, #452]	; (8007484 <HAL_DMA_IRQHandler+0x6c4>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d009      	beq.n	80072d6 <HAL_DMA_IRQHandler+0x516>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a70      	ldr	r2, [pc, #448]	; (8007488 <HAL_DMA_IRQHandler+0x6c8>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d004      	beq.n	80072d6 <HAL_DMA_IRQHandler+0x516>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a6e      	ldr	r2, [pc, #440]	; (800748c <HAL_DMA_IRQHandler+0x6cc>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d10a      	bne.n	80072ec <HAL_DMA_IRQHandler+0x52c>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f003 0308 	and.w	r3, r3, #8
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	bf14      	ite	ne
 80072e4:	2301      	movne	r3, #1
 80072e6:	2300      	moveq	r3, #0
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	e009      	b.n	8007300 <HAL_DMA_IRQHandler+0x540>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f003 0304 	and.w	r3, r3, #4
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	bf14      	ite	ne
 80072fa:	2301      	movne	r3, #1
 80072fc:	2300      	moveq	r3, #0
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	2b00      	cmp	r3, #0
 8007302:	d03e      	beq.n	8007382 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007308:	f003 031f 	and.w	r3, r3, #31
 800730c:	2210      	movs	r2, #16
 800730e:	409a      	lsls	r2, r3
 8007310:	6a3b      	ldr	r3, [r7, #32]
 8007312:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800731e:	2b00      	cmp	r3, #0
 8007320:	d018      	beq.n	8007354 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d108      	bne.n	8007342 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007334:	2b00      	cmp	r3, #0
 8007336:	d024      	beq.n	8007382 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	4798      	blx	r3
 8007340:	e01f      	b.n	8007382 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007346:	2b00      	cmp	r3, #0
 8007348:	d01b      	beq.n	8007382 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	4798      	blx	r3
 8007352:	e016      	b.n	8007382 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800735e:	2b00      	cmp	r3, #0
 8007360:	d107      	bne.n	8007372 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f022 0208 	bic.w	r2, r2, #8
 8007370:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007376:	2b00      	cmp	r3, #0
 8007378:	d003      	beq.n	8007382 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007386:	f003 031f 	and.w	r3, r3, #31
 800738a:	2220      	movs	r2, #32
 800738c:	409a      	lsls	r2, r3
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	4013      	ands	r3, r2
 8007392:	2b00      	cmp	r3, #0
 8007394:	f000 8110 	beq.w	80075b8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a2c      	ldr	r2, [pc, #176]	; (8007450 <HAL_DMA_IRQHandler+0x690>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d04a      	beq.n	8007438 <HAL_DMA_IRQHandler+0x678>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4a2b      	ldr	r2, [pc, #172]	; (8007454 <HAL_DMA_IRQHandler+0x694>)
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d045      	beq.n	8007438 <HAL_DMA_IRQHandler+0x678>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a29      	ldr	r2, [pc, #164]	; (8007458 <HAL_DMA_IRQHandler+0x698>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d040      	beq.n	8007438 <HAL_DMA_IRQHandler+0x678>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a28      	ldr	r2, [pc, #160]	; (800745c <HAL_DMA_IRQHandler+0x69c>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d03b      	beq.n	8007438 <HAL_DMA_IRQHandler+0x678>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a26      	ldr	r2, [pc, #152]	; (8007460 <HAL_DMA_IRQHandler+0x6a0>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d036      	beq.n	8007438 <HAL_DMA_IRQHandler+0x678>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a25      	ldr	r2, [pc, #148]	; (8007464 <HAL_DMA_IRQHandler+0x6a4>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d031      	beq.n	8007438 <HAL_DMA_IRQHandler+0x678>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a23      	ldr	r2, [pc, #140]	; (8007468 <HAL_DMA_IRQHandler+0x6a8>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d02c      	beq.n	8007438 <HAL_DMA_IRQHandler+0x678>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a22      	ldr	r2, [pc, #136]	; (800746c <HAL_DMA_IRQHandler+0x6ac>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d027      	beq.n	8007438 <HAL_DMA_IRQHandler+0x678>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a20      	ldr	r2, [pc, #128]	; (8007470 <HAL_DMA_IRQHandler+0x6b0>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d022      	beq.n	8007438 <HAL_DMA_IRQHandler+0x678>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a1f      	ldr	r2, [pc, #124]	; (8007474 <HAL_DMA_IRQHandler+0x6b4>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d01d      	beq.n	8007438 <HAL_DMA_IRQHandler+0x678>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a1d      	ldr	r2, [pc, #116]	; (8007478 <HAL_DMA_IRQHandler+0x6b8>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d018      	beq.n	8007438 <HAL_DMA_IRQHandler+0x678>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a1c      	ldr	r2, [pc, #112]	; (800747c <HAL_DMA_IRQHandler+0x6bc>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d013      	beq.n	8007438 <HAL_DMA_IRQHandler+0x678>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a1a      	ldr	r2, [pc, #104]	; (8007480 <HAL_DMA_IRQHandler+0x6c0>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d00e      	beq.n	8007438 <HAL_DMA_IRQHandler+0x678>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a19      	ldr	r2, [pc, #100]	; (8007484 <HAL_DMA_IRQHandler+0x6c4>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d009      	beq.n	8007438 <HAL_DMA_IRQHandler+0x678>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a17      	ldr	r2, [pc, #92]	; (8007488 <HAL_DMA_IRQHandler+0x6c8>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d004      	beq.n	8007438 <HAL_DMA_IRQHandler+0x678>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a16      	ldr	r2, [pc, #88]	; (800748c <HAL_DMA_IRQHandler+0x6cc>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d12b      	bne.n	8007490 <HAL_DMA_IRQHandler+0x6d0>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f003 0310 	and.w	r3, r3, #16
 8007442:	2b00      	cmp	r3, #0
 8007444:	bf14      	ite	ne
 8007446:	2301      	movne	r3, #1
 8007448:	2300      	moveq	r3, #0
 800744a:	b2db      	uxtb	r3, r3
 800744c:	e02a      	b.n	80074a4 <HAL_DMA_IRQHandler+0x6e4>
 800744e:	bf00      	nop
 8007450:	40020010 	.word	0x40020010
 8007454:	40020028 	.word	0x40020028
 8007458:	40020040 	.word	0x40020040
 800745c:	40020058 	.word	0x40020058
 8007460:	40020070 	.word	0x40020070
 8007464:	40020088 	.word	0x40020088
 8007468:	400200a0 	.word	0x400200a0
 800746c:	400200b8 	.word	0x400200b8
 8007470:	40020410 	.word	0x40020410
 8007474:	40020428 	.word	0x40020428
 8007478:	40020440 	.word	0x40020440
 800747c:	40020458 	.word	0x40020458
 8007480:	40020470 	.word	0x40020470
 8007484:	40020488 	.word	0x40020488
 8007488:	400204a0 	.word	0x400204a0
 800748c:	400204b8 	.word	0x400204b8
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 0302 	and.w	r3, r3, #2
 800749a:	2b00      	cmp	r3, #0
 800749c:	bf14      	ite	ne
 800749e:	2301      	movne	r3, #1
 80074a0:	2300      	moveq	r3, #0
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	f000 8087 	beq.w	80075b8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074ae:	f003 031f 	and.w	r3, r3, #31
 80074b2:	2220      	movs	r2, #32
 80074b4:	409a      	lsls	r2, r3
 80074b6:	6a3b      	ldr	r3, [r7, #32]
 80074b8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	2b04      	cmp	r3, #4
 80074c4:	d139      	bne.n	800753a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f022 0216 	bic.w	r2, r2, #22
 80074d4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	695a      	ldr	r2, [r3, #20]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074e4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d103      	bne.n	80074f6 <HAL_DMA_IRQHandler+0x736>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d007      	beq.n	8007506 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f022 0208 	bic.w	r2, r2, #8
 8007504:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800750a:	f003 031f 	and.w	r3, r3, #31
 800750e:	223f      	movs	r2, #63	; 0x3f
 8007510:	409a      	lsls	r2, r3
 8007512:	6a3b      	ldr	r3, [r7, #32]
 8007514:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2201      	movs	r2, #1
 800751a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800752a:	2b00      	cmp	r3, #0
 800752c:	f000 834a 	beq.w	8007bc4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	4798      	blx	r3
          }
          return;
 8007538:	e344      	b.n	8007bc4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007544:	2b00      	cmp	r3, #0
 8007546:	d018      	beq.n	800757a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007552:	2b00      	cmp	r3, #0
 8007554:	d108      	bne.n	8007568 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800755a:	2b00      	cmp	r3, #0
 800755c:	d02c      	beq.n	80075b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	4798      	blx	r3
 8007566:	e027      	b.n	80075b8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800756c:	2b00      	cmp	r3, #0
 800756e:	d023      	beq.n	80075b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	4798      	blx	r3
 8007578:	e01e      	b.n	80075b8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007584:	2b00      	cmp	r3, #0
 8007586:	d10f      	bne.n	80075a8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	681a      	ldr	r2, [r3, #0]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f022 0210 	bic.w	r2, r2, #16
 8007596:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d003      	beq.n	80075b8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f000 8306 	beq.w	8007bce <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075c6:	f003 0301 	and.w	r3, r3, #1
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	f000 8088 	beq.w	80076e0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2204      	movs	r2, #4
 80075d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a7a      	ldr	r2, [pc, #488]	; (80077c8 <HAL_DMA_IRQHandler+0xa08>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d04a      	beq.n	8007678 <HAL_DMA_IRQHandler+0x8b8>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a79      	ldr	r2, [pc, #484]	; (80077cc <HAL_DMA_IRQHandler+0xa0c>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d045      	beq.n	8007678 <HAL_DMA_IRQHandler+0x8b8>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a77      	ldr	r2, [pc, #476]	; (80077d0 <HAL_DMA_IRQHandler+0xa10>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d040      	beq.n	8007678 <HAL_DMA_IRQHandler+0x8b8>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a76      	ldr	r2, [pc, #472]	; (80077d4 <HAL_DMA_IRQHandler+0xa14>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d03b      	beq.n	8007678 <HAL_DMA_IRQHandler+0x8b8>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a74      	ldr	r2, [pc, #464]	; (80077d8 <HAL_DMA_IRQHandler+0xa18>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d036      	beq.n	8007678 <HAL_DMA_IRQHandler+0x8b8>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a73      	ldr	r2, [pc, #460]	; (80077dc <HAL_DMA_IRQHandler+0xa1c>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d031      	beq.n	8007678 <HAL_DMA_IRQHandler+0x8b8>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a71      	ldr	r2, [pc, #452]	; (80077e0 <HAL_DMA_IRQHandler+0xa20>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d02c      	beq.n	8007678 <HAL_DMA_IRQHandler+0x8b8>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a70      	ldr	r2, [pc, #448]	; (80077e4 <HAL_DMA_IRQHandler+0xa24>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d027      	beq.n	8007678 <HAL_DMA_IRQHandler+0x8b8>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a6e      	ldr	r2, [pc, #440]	; (80077e8 <HAL_DMA_IRQHandler+0xa28>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d022      	beq.n	8007678 <HAL_DMA_IRQHandler+0x8b8>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a6d      	ldr	r2, [pc, #436]	; (80077ec <HAL_DMA_IRQHandler+0xa2c>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d01d      	beq.n	8007678 <HAL_DMA_IRQHandler+0x8b8>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a6b      	ldr	r2, [pc, #428]	; (80077f0 <HAL_DMA_IRQHandler+0xa30>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d018      	beq.n	8007678 <HAL_DMA_IRQHandler+0x8b8>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a6a      	ldr	r2, [pc, #424]	; (80077f4 <HAL_DMA_IRQHandler+0xa34>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d013      	beq.n	8007678 <HAL_DMA_IRQHandler+0x8b8>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a68      	ldr	r2, [pc, #416]	; (80077f8 <HAL_DMA_IRQHandler+0xa38>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d00e      	beq.n	8007678 <HAL_DMA_IRQHandler+0x8b8>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a67      	ldr	r2, [pc, #412]	; (80077fc <HAL_DMA_IRQHandler+0xa3c>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d009      	beq.n	8007678 <HAL_DMA_IRQHandler+0x8b8>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a65      	ldr	r2, [pc, #404]	; (8007800 <HAL_DMA_IRQHandler+0xa40>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d004      	beq.n	8007678 <HAL_DMA_IRQHandler+0x8b8>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a64      	ldr	r2, [pc, #400]	; (8007804 <HAL_DMA_IRQHandler+0xa44>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d108      	bne.n	800768a <HAL_DMA_IRQHandler+0x8ca>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f022 0201 	bic.w	r2, r2, #1
 8007686:	601a      	str	r2, [r3, #0]
 8007688:	e007      	b.n	800769a <HAL_DMA_IRQHandler+0x8da>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f022 0201 	bic.w	r2, r2, #1
 8007698:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	3301      	adds	r3, #1
 800769e:	60fb      	str	r3, [r7, #12]
 80076a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d307      	bcc.n	80076b6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 0301 	and.w	r3, r3, #1
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d1f2      	bne.n	800769a <HAL_DMA_IRQHandler+0x8da>
 80076b4:	e000      	b.n	80076b8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80076b6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 0301 	and.w	r3, r3, #1
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d004      	beq.n	80076d0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2203      	movs	r2, #3
 80076ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80076ce:	e003      	b.n	80076d8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	f000 8272 	beq.w	8007bce <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	4798      	blx	r3
 80076f2:	e26c      	b.n	8007bce <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a43      	ldr	r2, [pc, #268]	; (8007808 <HAL_DMA_IRQHandler+0xa48>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d022      	beq.n	8007744 <HAL_DMA_IRQHandler+0x984>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a42      	ldr	r2, [pc, #264]	; (800780c <HAL_DMA_IRQHandler+0xa4c>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d01d      	beq.n	8007744 <HAL_DMA_IRQHandler+0x984>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a40      	ldr	r2, [pc, #256]	; (8007810 <HAL_DMA_IRQHandler+0xa50>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d018      	beq.n	8007744 <HAL_DMA_IRQHandler+0x984>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a3f      	ldr	r2, [pc, #252]	; (8007814 <HAL_DMA_IRQHandler+0xa54>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d013      	beq.n	8007744 <HAL_DMA_IRQHandler+0x984>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a3d      	ldr	r2, [pc, #244]	; (8007818 <HAL_DMA_IRQHandler+0xa58>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d00e      	beq.n	8007744 <HAL_DMA_IRQHandler+0x984>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a3c      	ldr	r2, [pc, #240]	; (800781c <HAL_DMA_IRQHandler+0xa5c>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d009      	beq.n	8007744 <HAL_DMA_IRQHandler+0x984>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a3a      	ldr	r2, [pc, #232]	; (8007820 <HAL_DMA_IRQHandler+0xa60>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d004      	beq.n	8007744 <HAL_DMA_IRQHandler+0x984>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a39      	ldr	r2, [pc, #228]	; (8007824 <HAL_DMA_IRQHandler+0xa64>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d101      	bne.n	8007748 <HAL_DMA_IRQHandler+0x988>
 8007744:	2301      	movs	r3, #1
 8007746:	e000      	b.n	800774a <HAL_DMA_IRQHandler+0x98a>
 8007748:	2300      	movs	r3, #0
 800774a:	2b00      	cmp	r3, #0
 800774c:	f000 823f 	beq.w	8007bce <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800775c:	f003 031f 	and.w	r3, r3, #31
 8007760:	2204      	movs	r2, #4
 8007762:	409a      	lsls	r2, r3
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	4013      	ands	r3, r2
 8007768:	2b00      	cmp	r3, #0
 800776a:	f000 80cd 	beq.w	8007908 <HAL_DMA_IRQHandler+0xb48>
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	f003 0304 	and.w	r3, r3, #4
 8007774:	2b00      	cmp	r3, #0
 8007776:	f000 80c7 	beq.w	8007908 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800777e:	f003 031f 	and.w	r3, r3, #31
 8007782:	2204      	movs	r2, #4
 8007784:	409a      	lsls	r2, r3
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d049      	beq.n	8007828 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800779a:	2b00      	cmp	r3, #0
 800779c:	d109      	bne.n	80077b2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	f000 8210 	beq.w	8007bc8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80077b0:	e20a      	b.n	8007bc8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	f000 8206 	beq.w	8007bc8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80077c4:	e200      	b.n	8007bc8 <HAL_DMA_IRQHandler+0xe08>
 80077c6:	bf00      	nop
 80077c8:	40020010 	.word	0x40020010
 80077cc:	40020028 	.word	0x40020028
 80077d0:	40020040 	.word	0x40020040
 80077d4:	40020058 	.word	0x40020058
 80077d8:	40020070 	.word	0x40020070
 80077dc:	40020088 	.word	0x40020088
 80077e0:	400200a0 	.word	0x400200a0
 80077e4:	400200b8 	.word	0x400200b8
 80077e8:	40020410 	.word	0x40020410
 80077ec:	40020428 	.word	0x40020428
 80077f0:	40020440 	.word	0x40020440
 80077f4:	40020458 	.word	0x40020458
 80077f8:	40020470 	.word	0x40020470
 80077fc:	40020488 	.word	0x40020488
 8007800:	400204a0 	.word	0x400204a0
 8007804:	400204b8 	.word	0x400204b8
 8007808:	58025408 	.word	0x58025408
 800780c:	5802541c 	.word	0x5802541c
 8007810:	58025430 	.word	0x58025430
 8007814:	58025444 	.word	0x58025444
 8007818:	58025458 	.word	0x58025458
 800781c:	5802546c 	.word	0x5802546c
 8007820:	58025480 	.word	0x58025480
 8007824:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	f003 0320 	and.w	r3, r3, #32
 800782e:	2b00      	cmp	r3, #0
 8007830:	d160      	bne.n	80078f4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a7f      	ldr	r2, [pc, #508]	; (8007a34 <HAL_DMA_IRQHandler+0xc74>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d04a      	beq.n	80078d2 <HAL_DMA_IRQHandler+0xb12>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a7d      	ldr	r2, [pc, #500]	; (8007a38 <HAL_DMA_IRQHandler+0xc78>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d045      	beq.n	80078d2 <HAL_DMA_IRQHandler+0xb12>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a7c      	ldr	r2, [pc, #496]	; (8007a3c <HAL_DMA_IRQHandler+0xc7c>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d040      	beq.n	80078d2 <HAL_DMA_IRQHandler+0xb12>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a7a      	ldr	r2, [pc, #488]	; (8007a40 <HAL_DMA_IRQHandler+0xc80>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d03b      	beq.n	80078d2 <HAL_DMA_IRQHandler+0xb12>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a79      	ldr	r2, [pc, #484]	; (8007a44 <HAL_DMA_IRQHandler+0xc84>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d036      	beq.n	80078d2 <HAL_DMA_IRQHandler+0xb12>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a77      	ldr	r2, [pc, #476]	; (8007a48 <HAL_DMA_IRQHandler+0xc88>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d031      	beq.n	80078d2 <HAL_DMA_IRQHandler+0xb12>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a76      	ldr	r2, [pc, #472]	; (8007a4c <HAL_DMA_IRQHandler+0xc8c>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d02c      	beq.n	80078d2 <HAL_DMA_IRQHandler+0xb12>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a74      	ldr	r2, [pc, #464]	; (8007a50 <HAL_DMA_IRQHandler+0xc90>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d027      	beq.n	80078d2 <HAL_DMA_IRQHandler+0xb12>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a73      	ldr	r2, [pc, #460]	; (8007a54 <HAL_DMA_IRQHandler+0xc94>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d022      	beq.n	80078d2 <HAL_DMA_IRQHandler+0xb12>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a71      	ldr	r2, [pc, #452]	; (8007a58 <HAL_DMA_IRQHandler+0xc98>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d01d      	beq.n	80078d2 <HAL_DMA_IRQHandler+0xb12>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a70      	ldr	r2, [pc, #448]	; (8007a5c <HAL_DMA_IRQHandler+0xc9c>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d018      	beq.n	80078d2 <HAL_DMA_IRQHandler+0xb12>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a6e      	ldr	r2, [pc, #440]	; (8007a60 <HAL_DMA_IRQHandler+0xca0>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d013      	beq.n	80078d2 <HAL_DMA_IRQHandler+0xb12>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a6d      	ldr	r2, [pc, #436]	; (8007a64 <HAL_DMA_IRQHandler+0xca4>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d00e      	beq.n	80078d2 <HAL_DMA_IRQHandler+0xb12>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a6b      	ldr	r2, [pc, #428]	; (8007a68 <HAL_DMA_IRQHandler+0xca8>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d009      	beq.n	80078d2 <HAL_DMA_IRQHandler+0xb12>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a6a      	ldr	r2, [pc, #424]	; (8007a6c <HAL_DMA_IRQHandler+0xcac>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d004      	beq.n	80078d2 <HAL_DMA_IRQHandler+0xb12>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a68      	ldr	r2, [pc, #416]	; (8007a70 <HAL_DMA_IRQHandler+0xcb0>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d108      	bne.n	80078e4 <HAL_DMA_IRQHandler+0xb24>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f022 0208 	bic.w	r2, r2, #8
 80078e0:	601a      	str	r2, [r3, #0]
 80078e2:	e007      	b.n	80078f4 <HAL_DMA_IRQHandler+0xb34>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f022 0204 	bic.w	r2, r2, #4
 80078f2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	f000 8165 	beq.w	8007bc8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007906:	e15f      	b.n	8007bc8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800790c:	f003 031f 	and.w	r3, r3, #31
 8007910:	2202      	movs	r2, #2
 8007912:	409a      	lsls	r2, r3
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	4013      	ands	r3, r2
 8007918:	2b00      	cmp	r3, #0
 800791a:	f000 80c5 	beq.w	8007aa8 <HAL_DMA_IRQHandler+0xce8>
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	f003 0302 	and.w	r3, r3, #2
 8007924:	2b00      	cmp	r3, #0
 8007926:	f000 80bf 	beq.w	8007aa8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800792e:	f003 031f 	and.w	r3, r3, #31
 8007932:	2202      	movs	r2, #2
 8007934:	409a      	lsls	r2, r3
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007940:	2b00      	cmp	r3, #0
 8007942:	d018      	beq.n	8007976 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800794a:	2b00      	cmp	r3, #0
 800794c:	d109      	bne.n	8007962 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007952:	2b00      	cmp	r3, #0
 8007954:	f000 813a 	beq.w	8007bcc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800795c:	6878      	ldr	r0, [r7, #4]
 800795e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007960:	e134      	b.n	8007bcc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007966:	2b00      	cmp	r3, #0
 8007968:	f000 8130 	beq.w	8007bcc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007974:	e12a      	b.n	8007bcc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	f003 0320 	and.w	r3, r3, #32
 800797c:	2b00      	cmp	r3, #0
 800797e:	f040 8089 	bne.w	8007a94 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a2b      	ldr	r2, [pc, #172]	; (8007a34 <HAL_DMA_IRQHandler+0xc74>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d04a      	beq.n	8007a22 <HAL_DMA_IRQHandler+0xc62>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a29      	ldr	r2, [pc, #164]	; (8007a38 <HAL_DMA_IRQHandler+0xc78>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d045      	beq.n	8007a22 <HAL_DMA_IRQHandler+0xc62>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a28      	ldr	r2, [pc, #160]	; (8007a3c <HAL_DMA_IRQHandler+0xc7c>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d040      	beq.n	8007a22 <HAL_DMA_IRQHandler+0xc62>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a26      	ldr	r2, [pc, #152]	; (8007a40 <HAL_DMA_IRQHandler+0xc80>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d03b      	beq.n	8007a22 <HAL_DMA_IRQHandler+0xc62>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a25      	ldr	r2, [pc, #148]	; (8007a44 <HAL_DMA_IRQHandler+0xc84>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d036      	beq.n	8007a22 <HAL_DMA_IRQHandler+0xc62>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a23      	ldr	r2, [pc, #140]	; (8007a48 <HAL_DMA_IRQHandler+0xc88>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d031      	beq.n	8007a22 <HAL_DMA_IRQHandler+0xc62>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a22      	ldr	r2, [pc, #136]	; (8007a4c <HAL_DMA_IRQHandler+0xc8c>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d02c      	beq.n	8007a22 <HAL_DMA_IRQHandler+0xc62>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a20      	ldr	r2, [pc, #128]	; (8007a50 <HAL_DMA_IRQHandler+0xc90>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d027      	beq.n	8007a22 <HAL_DMA_IRQHandler+0xc62>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a1f      	ldr	r2, [pc, #124]	; (8007a54 <HAL_DMA_IRQHandler+0xc94>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d022      	beq.n	8007a22 <HAL_DMA_IRQHandler+0xc62>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a1d      	ldr	r2, [pc, #116]	; (8007a58 <HAL_DMA_IRQHandler+0xc98>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d01d      	beq.n	8007a22 <HAL_DMA_IRQHandler+0xc62>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a1c      	ldr	r2, [pc, #112]	; (8007a5c <HAL_DMA_IRQHandler+0xc9c>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d018      	beq.n	8007a22 <HAL_DMA_IRQHandler+0xc62>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a1a      	ldr	r2, [pc, #104]	; (8007a60 <HAL_DMA_IRQHandler+0xca0>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d013      	beq.n	8007a22 <HAL_DMA_IRQHandler+0xc62>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a19      	ldr	r2, [pc, #100]	; (8007a64 <HAL_DMA_IRQHandler+0xca4>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d00e      	beq.n	8007a22 <HAL_DMA_IRQHandler+0xc62>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a17      	ldr	r2, [pc, #92]	; (8007a68 <HAL_DMA_IRQHandler+0xca8>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d009      	beq.n	8007a22 <HAL_DMA_IRQHandler+0xc62>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a16      	ldr	r2, [pc, #88]	; (8007a6c <HAL_DMA_IRQHandler+0xcac>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d004      	beq.n	8007a22 <HAL_DMA_IRQHandler+0xc62>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a14      	ldr	r2, [pc, #80]	; (8007a70 <HAL_DMA_IRQHandler+0xcb0>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d128      	bne.n	8007a74 <HAL_DMA_IRQHandler+0xcb4>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f022 0214 	bic.w	r2, r2, #20
 8007a30:	601a      	str	r2, [r3, #0]
 8007a32:	e027      	b.n	8007a84 <HAL_DMA_IRQHandler+0xcc4>
 8007a34:	40020010 	.word	0x40020010
 8007a38:	40020028 	.word	0x40020028
 8007a3c:	40020040 	.word	0x40020040
 8007a40:	40020058 	.word	0x40020058
 8007a44:	40020070 	.word	0x40020070
 8007a48:	40020088 	.word	0x40020088
 8007a4c:	400200a0 	.word	0x400200a0
 8007a50:	400200b8 	.word	0x400200b8
 8007a54:	40020410 	.word	0x40020410
 8007a58:	40020428 	.word	0x40020428
 8007a5c:	40020440 	.word	0x40020440
 8007a60:	40020458 	.word	0x40020458
 8007a64:	40020470 	.word	0x40020470
 8007a68:	40020488 	.word	0x40020488
 8007a6c:	400204a0 	.word	0x400204a0
 8007a70:	400204b8 	.word	0x400204b8
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f022 020a 	bic.w	r2, r2, #10
 8007a82:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2201      	movs	r2, #1
 8007a88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f000 8097 	beq.w	8007bcc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007aa6:	e091      	b.n	8007bcc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aac:	f003 031f 	and.w	r3, r3, #31
 8007ab0:	2208      	movs	r2, #8
 8007ab2:	409a      	lsls	r2, r3
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	f000 8088 	beq.w	8007bce <HAL_DMA_IRQHandler+0xe0e>
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	f003 0308 	and.w	r3, r3, #8
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	f000 8082 	beq.w	8007bce <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a41      	ldr	r2, [pc, #260]	; (8007bd4 <HAL_DMA_IRQHandler+0xe14>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d04a      	beq.n	8007b6a <HAL_DMA_IRQHandler+0xdaa>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a3f      	ldr	r2, [pc, #252]	; (8007bd8 <HAL_DMA_IRQHandler+0xe18>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d045      	beq.n	8007b6a <HAL_DMA_IRQHandler+0xdaa>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a3e      	ldr	r2, [pc, #248]	; (8007bdc <HAL_DMA_IRQHandler+0xe1c>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d040      	beq.n	8007b6a <HAL_DMA_IRQHandler+0xdaa>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a3c      	ldr	r2, [pc, #240]	; (8007be0 <HAL_DMA_IRQHandler+0xe20>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d03b      	beq.n	8007b6a <HAL_DMA_IRQHandler+0xdaa>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a3b      	ldr	r2, [pc, #236]	; (8007be4 <HAL_DMA_IRQHandler+0xe24>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d036      	beq.n	8007b6a <HAL_DMA_IRQHandler+0xdaa>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a39      	ldr	r2, [pc, #228]	; (8007be8 <HAL_DMA_IRQHandler+0xe28>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d031      	beq.n	8007b6a <HAL_DMA_IRQHandler+0xdaa>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a38      	ldr	r2, [pc, #224]	; (8007bec <HAL_DMA_IRQHandler+0xe2c>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d02c      	beq.n	8007b6a <HAL_DMA_IRQHandler+0xdaa>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a36      	ldr	r2, [pc, #216]	; (8007bf0 <HAL_DMA_IRQHandler+0xe30>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d027      	beq.n	8007b6a <HAL_DMA_IRQHandler+0xdaa>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a35      	ldr	r2, [pc, #212]	; (8007bf4 <HAL_DMA_IRQHandler+0xe34>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d022      	beq.n	8007b6a <HAL_DMA_IRQHandler+0xdaa>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a33      	ldr	r2, [pc, #204]	; (8007bf8 <HAL_DMA_IRQHandler+0xe38>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d01d      	beq.n	8007b6a <HAL_DMA_IRQHandler+0xdaa>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a32      	ldr	r2, [pc, #200]	; (8007bfc <HAL_DMA_IRQHandler+0xe3c>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d018      	beq.n	8007b6a <HAL_DMA_IRQHandler+0xdaa>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a30      	ldr	r2, [pc, #192]	; (8007c00 <HAL_DMA_IRQHandler+0xe40>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d013      	beq.n	8007b6a <HAL_DMA_IRQHandler+0xdaa>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a2f      	ldr	r2, [pc, #188]	; (8007c04 <HAL_DMA_IRQHandler+0xe44>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d00e      	beq.n	8007b6a <HAL_DMA_IRQHandler+0xdaa>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a2d      	ldr	r2, [pc, #180]	; (8007c08 <HAL_DMA_IRQHandler+0xe48>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d009      	beq.n	8007b6a <HAL_DMA_IRQHandler+0xdaa>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a2c      	ldr	r2, [pc, #176]	; (8007c0c <HAL_DMA_IRQHandler+0xe4c>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d004      	beq.n	8007b6a <HAL_DMA_IRQHandler+0xdaa>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a2a      	ldr	r2, [pc, #168]	; (8007c10 <HAL_DMA_IRQHandler+0xe50>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d108      	bne.n	8007b7c <HAL_DMA_IRQHandler+0xdbc>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f022 021c 	bic.w	r2, r2, #28
 8007b78:	601a      	str	r2, [r3, #0]
 8007b7a:	e007      	b.n	8007b8c <HAL_DMA_IRQHandler+0xdcc>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f022 020e 	bic.w	r2, r2, #14
 8007b8a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b90:	f003 031f 	and.w	r3, r3, #31
 8007b94:	2201      	movs	r2, #1
 8007b96:	409a      	lsls	r2, r3
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d009      	beq.n	8007bce <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	4798      	blx	r3
 8007bc2:	e004      	b.n	8007bce <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007bc4:	bf00      	nop
 8007bc6:	e002      	b.n	8007bce <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007bc8:	bf00      	nop
 8007bca:	e000      	b.n	8007bce <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007bcc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007bce:	3728      	adds	r7, #40	; 0x28
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	40020010 	.word	0x40020010
 8007bd8:	40020028 	.word	0x40020028
 8007bdc:	40020040 	.word	0x40020040
 8007be0:	40020058 	.word	0x40020058
 8007be4:	40020070 	.word	0x40020070
 8007be8:	40020088 	.word	0x40020088
 8007bec:	400200a0 	.word	0x400200a0
 8007bf0:	400200b8 	.word	0x400200b8
 8007bf4:	40020410 	.word	0x40020410
 8007bf8:	40020428 	.word	0x40020428
 8007bfc:	40020440 	.word	0x40020440
 8007c00:	40020458 	.word	0x40020458
 8007c04:	40020470 	.word	0x40020470
 8007c08:	40020488 	.word	0x40020488
 8007c0c:	400204a0 	.word	0x400204a0
 8007c10:	400204b8 	.word	0x400204b8

08007c14 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b087      	sub	sp, #28
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	607a      	str	r2, [r7, #4]
 8007c20:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c26:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c2c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a7f      	ldr	r2, [pc, #508]	; (8007e30 <DMA_SetConfig+0x21c>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d072      	beq.n	8007d1e <DMA_SetConfig+0x10a>
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a7d      	ldr	r2, [pc, #500]	; (8007e34 <DMA_SetConfig+0x220>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d06d      	beq.n	8007d1e <DMA_SetConfig+0x10a>
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a7c      	ldr	r2, [pc, #496]	; (8007e38 <DMA_SetConfig+0x224>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d068      	beq.n	8007d1e <DMA_SetConfig+0x10a>
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a7a      	ldr	r2, [pc, #488]	; (8007e3c <DMA_SetConfig+0x228>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d063      	beq.n	8007d1e <DMA_SetConfig+0x10a>
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a79      	ldr	r2, [pc, #484]	; (8007e40 <DMA_SetConfig+0x22c>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d05e      	beq.n	8007d1e <DMA_SetConfig+0x10a>
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a77      	ldr	r2, [pc, #476]	; (8007e44 <DMA_SetConfig+0x230>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d059      	beq.n	8007d1e <DMA_SetConfig+0x10a>
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a76      	ldr	r2, [pc, #472]	; (8007e48 <DMA_SetConfig+0x234>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d054      	beq.n	8007d1e <DMA_SetConfig+0x10a>
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a74      	ldr	r2, [pc, #464]	; (8007e4c <DMA_SetConfig+0x238>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d04f      	beq.n	8007d1e <DMA_SetConfig+0x10a>
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a73      	ldr	r2, [pc, #460]	; (8007e50 <DMA_SetConfig+0x23c>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d04a      	beq.n	8007d1e <DMA_SetConfig+0x10a>
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a71      	ldr	r2, [pc, #452]	; (8007e54 <DMA_SetConfig+0x240>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d045      	beq.n	8007d1e <DMA_SetConfig+0x10a>
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	4a70      	ldr	r2, [pc, #448]	; (8007e58 <DMA_SetConfig+0x244>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d040      	beq.n	8007d1e <DMA_SetConfig+0x10a>
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a6e      	ldr	r2, [pc, #440]	; (8007e5c <DMA_SetConfig+0x248>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d03b      	beq.n	8007d1e <DMA_SetConfig+0x10a>
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a6d      	ldr	r2, [pc, #436]	; (8007e60 <DMA_SetConfig+0x24c>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d036      	beq.n	8007d1e <DMA_SetConfig+0x10a>
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a6b      	ldr	r2, [pc, #428]	; (8007e64 <DMA_SetConfig+0x250>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d031      	beq.n	8007d1e <DMA_SetConfig+0x10a>
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a6a      	ldr	r2, [pc, #424]	; (8007e68 <DMA_SetConfig+0x254>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d02c      	beq.n	8007d1e <DMA_SetConfig+0x10a>
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a68      	ldr	r2, [pc, #416]	; (8007e6c <DMA_SetConfig+0x258>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d027      	beq.n	8007d1e <DMA_SetConfig+0x10a>
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a67      	ldr	r2, [pc, #412]	; (8007e70 <DMA_SetConfig+0x25c>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d022      	beq.n	8007d1e <DMA_SetConfig+0x10a>
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a65      	ldr	r2, [pc, #404]	; (8007e74 <DMA_SetConfig+0x260>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d01d      	beq.n	8007d1e <DMA_SetConfig+0x10a>
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a64      	ldr	r2, [pc, #400]	; (8007e78 <DMA_SetConfig+0x264>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d018      	beq.n	8007d1e <DMA_SetConfig+0x10a>
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a62      	ldr	r2, [pc, #392]	; (8007e7c <DMA_SetConfig+0x268>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d013      	beq.n	8007d1e <DMA_SetConfig+0x10a>
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a61      	ldr	r2, [pc, #388]	; (8007e80 <DMA_SetConfig+0x26c>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d00e      	beq.n	8007d1e <DMA_SetConfig+0x10a>
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a5f      	ldr	r2, [pc, #380]	; (8007e84 <DMA_SetConfig+0x270>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d009      	beq.n	8007d1e <DMA_SetConfig+0x10a>
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a5e      	ldr	r2, [pc, #376]	; (8007e88 <DMA_SetConfig+0x274>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d004      	beq.n	8007d1e <DMA_SetConfig+0x10a>
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a5c      	ldr	r2, [pc, #368]	; (8007e8c <DMA_SetConfig+0x278>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d101      	bne.n	8007d22 <DMA_SetConfig+0x10e>
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e000      	b.n	8007d24 <DMA_SetConfig+0x110>
 8007d22:	2300      	movs	r3, #0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00d      	beq.n	8007d44 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007d30:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d004      	beq.n	8007d44 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d3e:	68fa      	ldr	r2, [r7, #12]
 8007d40:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007d42:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a39      	ldr	r2, [pc, #228]	; (8007e30 <DMA_SetConfig+0x21c>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d04a      	beq.n	8007de4 <DMA_SetConfig+0x1d0>
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a38      	ldr	r2, [pc, #224]	; (8007e34 <DMA_SetConfig+0x220>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d045      	beq.n	8007de4 <DMA_SetConfig+0x1d0>
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a36      	ldr	r2, [pc, #216]	; (8007e38 <DMA_SetConfig+0x224>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d040      	beq.n	8007de4 <DMA_SetConfig+0x1d0>
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a35      	ldr	r2, [pc, #212]	; (8007e3c <DMA_SetConfig+0x228>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d03b      	beq.n	8007de4 <DMA_SetConfig+0x1d0>
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a33      	ldr	r2, [pc, #204]	; (8007e40 <DMA_SetConfig+0x22c>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d036      	beq.n	8007de4 <DMA_SetConfig+0x1d0>
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a32      	ldr	r2, [pc, #200]	; (8007e44 <DMA_SetConfig+0x230>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d031      	beq.n	8007de4 <DMA_SetConfig+0x1d0>
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a30      	ldr	r2, [pc, #192]	; (8007e48 <DMA_SetConfig+0x234>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d02c      	beq.n	8007de4 <DMA_SetConfig+0x1d0>
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a2f      	ldr	r2, [pc, #188]	; (8007e4c <DMA_SetConfig+0x238>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d027      	beq.n	8007de4 <DMA_SetConfig+0x1d0>
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a2d      	ldr	r2, [pc, #180]	; (8007e50 <DMA_SetConfig+0x23c>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d022      	beq.n	8007de4 <DMA_SetConfig+0x1d0>
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a2c      	ldr	r2, [pc, #176]	; (8007e54 <DMA_SetConfig+0x240>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d01d      	beq.n	8007de4 <DMA_SetConfig+0x1d0>
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a2a      	ldr	r2, [pc, #168]	; (8007e58 <DMA_SetConfig+0x244>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d018      	beq.n	8007de4 <DMA_SetConfig+0x1d0>
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a29      	ldr	r2, [pc, #164]	; (8007e5c <DMA_SetConfig+0x248>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d013      	beq.n	8007de4 <DMA_SetConfig+0x1d0>
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a27      	ldr	r2, [pc, #156]	; (8007e60 <DMA_SetConfig+0x24c>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d00e      	beq.n	8007de4 <DMA_SetConfig+0x1d0>
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a26      	ldr	r2, [pc, #152]	; (8007e64 <DMA_SetConfig+0x250>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d009      	beq.n	8007de4 <DMA_SetConfig+0x1d0>
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a24      	ldr	r2, [pc, #144]	; (8007e68 <DMA_SetConfig+0x254>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d004      	beq.n	8007de4 <DMA_SetConfig+0x1d0>
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a23      	ldr	r2, [pc, #140]	; (8007e6c <DMA_SetConfig+0x258>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d101      	bne.n	8007de8 <DMA_SetConfig+0x1d4>
 8007de4:	2301      	movs	r3, #1
 8007de6:	e000      	b.n	8007dea <DMA_SetConfig+0x1d6>
 8007de8:	2300      	movs	r3, #0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d059      	beq.n	8007ea2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007df2:	f003 031f 	and.w	r3, r3, #31
 8007df6:	223f      	movs	r2, #63	; 0x3f
 8007df8:	409a      	lsls	r2, r3
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	681a      	ldr	r2, [r3, #0]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007e0c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	683a      	ldr	r2, [r7, #0]
 8007e14:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	2b40      	cmp	r3, #64	; 0x40
 8007e1c:	d138      	bne.n	8007e90 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	68ba      	ldr	r2, [r7, #8]
 8007e2c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007e2e:	e086      	b.n	8007f3e <DMA_SetConfig+0x32a>
 8007e30:	40020010 	.word	0x40020010
 8007e34:	40020028 	.word	0x40020028
 8007e38:	40020040 	.word	0x40020040
 8007e3c:	40020058 	.word	0x40020058
 8007e40:	40020070 	.word	0x40020070
 8007e44:	40020088 	.word	0x40020088
 8007e48:	400200a0 	.word	0x400200a0
 8007e4c:	400200b8 	.word	0x400200b8
 8007e50:	40020410 	.word	0x40020410
 8007e54:	40020428 	.word	0x40020428
 8007e58:	40020440 	.word	0x40020440
 8007e5c:	40020458 	.word	0x40020458
 8007e60:	40020470 	.word	0x40020470
 8007e64:	40020488 	.word	0x40020488
 8007e68:	400204a0 	.word	0x400204a0
 8007e6c:	400204b8 	.word	0x400204b8
 8007e70:	58025408 	.word	0x58025408
 8007e74:	5802541c 	.word	0x5802541c
 8007e78:	58025430 	.word	0x58025430
 8007e7c:	58025444 	.word	0x58025444
 8007e80:	58025458 	.word	0x58025458
 8007e84:	5802546c 	.word	0x5802546c
 8007e88:	58025480 	.word	0x58025480
 8007e8c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	68ba      	ldr	r2, [r7, #8]
 8007e96:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	60da      	str	r2, [r3, #12]
}
 8007ea0:	e04d      	b.n	8007f3e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a29      	ldr	r2, [pc, #164]	; (8007f4c <DMA_SetConfig+0x338>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d022      	beq.n	8007ef2 <DMA_SetConfig+0x2de>
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a27      	ldr	r2, [pc, #156]	; (8007f50 <DMA_SetConfig+0x33c>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d01d      	beq.n	8007ef2 <DMA_SetConfig+0x2de>
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a26      	ldr	r2, [pc, #152]	; (8007f54 <DMA_SetConfig+0x340>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d018      	beq.n	8007ef2 <DMA_SetConfig+0x2de>
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a24      	ldr	r2, [pc, #144]	; (8007f58 <DMA_SetConfig+0x344>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d013      	beq.n	8007ef2 <DMA_SetConfig+0x2de>
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a23      	ldr	r2, [pc, #140]	; (8007f5c <DMA_SetConfig+0x348>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d00e      	beq.n	8007ef2 <DMA_SetConfig+0x2de>
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a21      	ldr	r2, [pc, #132]	; (8007f60 <DMA_SetConfig+0x34c>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d009      	beq.n	8007ef2 <DMA_SetConfig+0x2de>
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a20      	ldr	r2, [pc, #128]	; (8007f64 <DMA_SetConfig+0x350>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d004      	beq.n	8007ef2 <DMA_SetConfig+0x2de>
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a1e      	ldr	r2, [pc, #120]	; (8007f68 <DMA_SetConfig+0x354>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d101      	bne.n	8007ef6 <DMA_SetConfig+0x2e2>
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e000      	b.n	8007ef8 <DMA_SetConfig+0x2e4>
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d020      	beq.n	8007f3e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f00:	f003 031f 	and.w	r3, r3, #31
 8007f04:	2201      	movs	r2, #1
 8007f06:	409a      	lsls	r2, r3
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	683a      	ldr	r2, [r7, #0]
 8007f12:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	2b40      	cmp	r3, #64	; 0x40
 8007f1a:	d108      	bne.n	8007f2e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	68ba      	ldr	r2, [r7, #8]
 8007f2a:	60da      	str	r2, [r3, #12]
}
 8007f2c:	e007      	b.n	8007f3e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	68ba      	ldr	r2, [r7, #8]
 8007f34:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	687a      	ldr	r2, [r7, #4]
 8007f3c:	60da      	str	r2, [r3, #12]
}
 8007f3e:	bf00      	nop
 8007f40:	371c      	adds	r7, #28
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr
 8007f4a:	bf00      	nop
 8007f4c:	58025408 	.word	0x58025408
 8007f50:	5802541c 	.word	0x5802541c
 8007f54:	58025430 	.word	0x58025430
 8007f58:	58025444 	.word	0x58025444
 8007f5c:	58025458 	.word	0x58025458
 8007f60:	5802546c 	.word	0x5802546c
 8007f64:	58025480 	.word	0x58025480
 8007f68:	58025494 	.word	0x58025494

08007f6c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b085      	sub	sp, #20
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a42      	ldr	r2, [pc, #264]	; (8008084 <DMA_CalcBaseAndBitshift+0x118>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d04a      	beq.n	8008014 <DMA_CalcBaseAndBitshift+0xa8>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a41      	ldr	r2, [pc, #260]	; (8008088 <DMA_CalcBaseAndBitshift+0x11c>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d045      	beq.n	8008014 <DMA_CalcBaseAndBitshift+0xa8>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a3f      	ldr	r2, [pc, #252]	; (800808c <DMA_CalcBaseAndBitshift+0x120>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d040      	beq.n	8008014 <DMA_CalcBaseAndBitshift+0xa8>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a3e      	ldr	r2, [pc, #248]	; (8008090 <DMA_CalcBaseAndBitshift+0x124>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d03b      	beq.n	8008014 <DMA_CalcBaseAndBitshift+0xa8>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a3c      	ldr	r2, [pc, #240]	; (8008094 <DMA_CalcBaseAndBitshift+0x128>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d036      	beq.n	8008014 <DMA_CalcBaseAndBitshift+0xa8>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a3b      	ldr	r2, [pc, #236]	; (8008098 <DMA_CalcBaseAndBitshift+0x12c>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d031      	beq.n	8008014 <DMA_CalcBaseAndBitshift+0xa8>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a39      	ldr	r2, [pc, #228]	; (800809c <DMA_CalcBaseAndBitshift+0x130>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d02c      	beq.n	8008014 <DMA_CalcBaseAndBitshift+0xa8>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a38      	ldr	r2, [pc, #224]	; (80080a0 <DMA_CalcBaseAndBitshift+0x134>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d027      	beq.n	8008014 <DMA_CalcBaseAndBitshift+0xa8>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a36      	ldr	r2, [pc, #216]	; (80080a4 <DMA_CalcBaseAndBitshift+0x138>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d022      	beq.n	8008014 <DMA_CalcBaseAndBitshift+0xa8>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a35      	ldr	r2, [pc, #212]	; (80080a8 <DMA_CalcBaseAndBitshift+0x13c>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d01d      	beq.n	8008014 <DMA_CalcBaseAndBitshift+0xa8>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a33      	ldr	r2, [pc, #204]	; (80080ac <DMA_CalcBaseAndBitshift+0x140>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d018      	beq.n	8008014 <DMA_CalcBaseAndBitshift+0xa8>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a32      	ldr	r2, [pc, #200]	; (80080b0 <DMA_CalcBaseAndBitshift+0x144>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d013      	beq.n	8008014 <DMA_CalcBaseAndBitshift+0xa8>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a30      	ldr	r2, [pc, #192]	; (80080b4 <DMA_CalcBaseAndBitshift+0x148>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d00e      	beq.n	8008014 <DMA_CalcBaseAndBitshift+0xa8>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a2f      	ldr	r2, [pc, #188]	; (80080b8 <DMA_CalcBaseAndBitshift+0x14c>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d009      	beq.n	8008014 <DMA_CalcBaseAndBitshift+0xa8>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a2d      	ldr	r2, [pc, #180]	; (80080bc <DMA_CalcBaseAndBitshift+0x150>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d004      	beq.n	8008014 <DMA_CalcBaseAndBitshift+0xa8>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a2c      	ldr	r2, [pc, #176]	; (80080c0 <DMA_CalcBaseAndBitshift+0x154>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d101      	bne.n	8008018 <DMA_CalcBaseAndBitshift+0xac>
 8008014:	2301      	movs	r3, #1
 8008016:	e000      	b.n	800801a <DMA_CalcBaseAndBitshift+0xae>
 8008018:	2300      	movs	r3, #0
 800801a:	2b00      	cmp	r3, #0
 800801c:	d024      	beq.n	8008068 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	b2db      	uxtb	r3, r3
 8008024:	3b10      	subs	r3, #16
 8008026:	4a27      	ldr	r2, [pc, #156]	; (80080c4 <DMA_CalcBaseAndBitshift+0x158>)
 8008028:	fba2 2303 	umull	r2, r3, r2, r3
 800802c:	091b      	lsrs	r3, r3, #4
 800802e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f003 0307 	and.w	r3, r3, #7
 8008036:	4a24      	ldr	r2, [pc, #144]	; (80080c8 <DMA_CalcBaseAndBitshift+0x15c>)
 8008038:	5cd3      	ldrb	r3, [r2, r3]
 800803a:	461a      	mov	r2, r3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2b03      	cmp	r3, #3
 8008044:	d908      	bls.n	8008058 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	461a      	mov	r2, r3
 800804c:	4b1f      	ldr	r3, [pc, #124]	; (80080cc <DMA_CalcBaseAndBitshift+0x160>)
 800804e:	4013      	ands	r3, r2
 8008050:	1d1a      	adds	r2, r3, #4
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	659a      	str	r2, [r3, #88]	; 0x58
 8008056:	e00d      	b.n	8008074 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	461a      	mov	r2, r3
 800805e:	4b1b      	ldr	r3, [pc, #108]	; (80080cc <DMA_CalcBaseAndBitshift+0x160>)
 8008060:	4013      	ands	r3, r2
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	6593      	str	r3, [r2, #88]	; 0x58
 8008066:	e005      	b.n	8008074 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008078:	4618      	mov	r0, r3
 800807a:	3714      	adds	r7, #20
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr
 8008084:	40020010 	.word	0x40020010
 8008088:	40020028 	.word	0x40020028
 800808c:	40020040 	.word	0x40020040
 8008090:	40020058 	.word	0x40020058
 8008094:	40020070 	.word	0x40020070
 8008098:	40020088 	.word	0x40020088
 800809c:	400200a0 	.word	0x400200a0
 80080a0:	400200b8 	.word	0x400200b8
 80080a4:	40020410 	.word	0x40020410
 80080a8:	40020428 	.word	0x40020428
 80080ac:	40020440 	.word	0x40020440
 80080b0:	40020458 	.word	0x40020458
 80080b4:	40020470 	.word	0x40020470
 80080b8:	40020488 	.word	0x40020488
 80080bc:	400204a0 	.word	0x400204a0
 80080c0:	400204b8 	.word	0x400204b8
 80080c4:	aaaaaaab 	.word	0xaaaaaaab
 80080c8:	0801f7c0 	.word	0x0801f7c0
 80080cc:	fffffc00 	.word	0xfffffc00

080080d0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b085      	sub	sp, #20
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080d8:	2300      	movs	r3, #0
 80080da:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	699b      	ldr	r3, [r3, #24]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d120      	bne.n	8008126 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e8:	2b03      	cmp	r3, #3
 80080ea:	d858      	bhi.n	800819e <DMA_CheckFifoParam+0xce>
 80080ec:	a201      	add	r2, pc, #4	; (adr r2, 80080f4 <DMA_CheckFifoParam+0x24>)
 80080ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f2:	bf00      	nop
 80080f4:	08008105 	.word	0x08008105
 80080f8:	08008117 	.word	0x08008117
 80080fc:	08008105 	.word	0x08008105
 8008100:	0800819f 	.word	0x0800819f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008108:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800810c:	2b00      	cmp	r3, #0
 800810e:	d048      	beq.n	80081a2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008110:	2301      	movs	r3, #1
 8008112:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008114:	e045      	b.n	80081a2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800811a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800811e:	d142      	bne.n	80081a6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008124:	e03f      	b.n	80081a6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	699b      	ldr	r3, [r3, #24]
 800812a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800812e:	d123      	bne.n	8008178 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008134:	2b03      	cmp	r3, #3
 8008136:	d838      	bhi.n	80081aa <DMA_CheckFifoParam+0xda>
 8008138:	a201      	add	r2, pc, #4	; (adr r2, 8008140 <DMA_CheckFifoParam+0x70>)
 800813a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813e:	bf00      	nop
 8008140:	08008151 	.word	0x08008151
 8008144:	08008157 	.word	0x08008157
 8008148:	08008151 	.word	0x08008151
 800814c:	08008169 	.word	0x08008169
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008150:	2301      	movs	r3, #1
 8008152:	73fb      	strb	r3, [r7, #15]
        break;
 8008154:	e030      	b.n	80081b8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800815a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800815e:	2b00      	cmp	r3, #0
 8008160:	d025      	beq.n	80081ae <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008162:	2301      	movs	r3, #1
 8008164:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008166:	e022      	b.n	80081ae <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800816c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008170:	d11f      	bne.n	80081b2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008176:	e01c      	b.n	80081b2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800817c:	2b02      	cmp	r3, #2
 800817e:	d902      	bls.n	8008186 <DMA_CheckFifoParam+0xb6>
 8008180:	2b03      	cmp	r3, #3
 8008182:	d003      	beq.n	800818c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008184:	e018      	b.n	80081b8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008186:	2301      	movs	r3, #1
 8008188:	73fb      	strb	r3, [r7, #15]
        break;
 800818a:	e015      	b.n	80081b8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008190:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008194:	2b00      	cmp	r3, #0
 8008196:	d00e      	beq.n	80081b6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008198:	2301      	movs	r3, #1
 800819a:	73fb      	strb	r3, [r7, #15]
    break;
 800819c:	e00b      	b.n	80081b6 <DMA_CheckFifoParam+0xe6>
        break;
 800819e:	bf00      	nop
 80081a0:	e00a      	b.n	80081b8 <DMA_CheckFifoParam+0xe8>
        break;
 80081a2:	bf00      	nop
 80081a4:	e008      	b.n	80081b8 <DMA_CheckFifoParam+0xe8>
        break;
 80081a6:	bf00      	nop
 80081a8:	e006      	b.n	80081b8 <DMA_CheckFifoParam+0xe8>
        break;
 80081aa:	bf00      	nop
 80081ac:	e004      	b.n	80081b8 <DMA_CheckFifoParam+0xe8>
        break;
 80081ae:	bf00      	nop
 80081b0:	e002      	b.n	80081b8 <DMA_CheckFifoParam+0xe8>
        break;
 80081b2:	bf00      	nop
 80081b4:	e000      	b.n	80081b8 <DMA_CheckFifoParam+0xe8>
    break;
 80081b6:	bf00      	nop
    }
  }

  return status;
 80081b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3714      	adds	r7, #20
 80081be:	46bd      	mov	sp, r7
 80081c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c4:	4770      	bx	lr
 80081c6:	bf00      	nop

080081c8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b085      	sub	sp, #20
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a38      	ldr	r2, [pc, #224]	; (80082bc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d022      	beq.n	8008226 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a36      	ldr	r2, [pc, #216]	; (80082c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d01d      	beq.n	8008226 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a35      	ldr	r2, [pc, #212]	; (80082c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d018      	beq.n	8008226 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a33      	ldr	r2, [pc, #204]	; (80082c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d013      	beq.n	8008226 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a32      	ldr	r2, [pc, #200]	; (80082cc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d00e      	beq.n	8008226 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a30      	ldr	r2, [pc, #192]	; (80082d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d009      	beq.n	8008226 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a2f      	ldr	r2, [pc, #188]	; (80082d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d004      	beq.n	8008226 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a2d      	ldr	r2, [pc, #180]	; (80082d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d101      	bne.n	800822a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008226:	2301      	movs	r3, #1
 8008228:	e000      	b.n	800822c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800822a:	2300      	movs	r3, #0
 800822c:	2b00      	cmp	r3, #0
 800822e:	d01a      	beq.n	8008266 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	b2db      	uxtb	r3, r3
 8008236:	3b08      	subs	r3, #8
 8008238:	4a28      	ldr	r2, [pc, #160]	; (80082dc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800823a:	fba2 2303 	umull	r2, r3, r2, r3
 800823e:	091b      	lsrs	r3, r3, #4
 8008240:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008242:	68fa      	ldr	r2, [r7, #12]
 8008244:	4b26      	ldr	r3, [pc, #152]	; (80082e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008246:	4413      	add	r3, r2
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	461a      	mov	r2, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	4a24      	ldr	r2, [pc, #144]	; (80082e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008254:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f003 031f 	and.w	r3, r3, #31
 800825c:	2201      	movs	r2, #1
 800825e:	409a      	lsls	r2, r3
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008264:	e024      	b.n	80082b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	b2db      	uxtb	r3, r3
 800826c:	3b10      	subs	r3, #16
 800826e:	4a1e      	ldr	r2, [pc, #120]	; (80082e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008270:	fba2 2303 	umull	r2, r3, r2, r3
 8008274:	091b      	lsrs	r3, r3, #4
 8008276:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	4a1c      	ldr	r2, [pc, #112]	; (80082ec <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d806      	bhi.n	800828e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	4a1b      	ldr	r2, [pc, #108]	; (80082f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d902      	bls.n	800828e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	3308      	adds	r3, #8
 800828c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800828e:	68fa      	ldr	r2, [r7, #12]
 8008290:	4b18      	ldr	r3, [pc, #96]	; (80082f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008292:	4413      	add	r3, r2
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	461a      	mov	r2, r3
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	4a16      	ldr	r2, [pc, #88]	; (80082f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80082a0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f003 031f 	and.w	r3, r3, #31
 80082a8:	2201      	movs	r2, #1
 80082aa:	409a      	lsls	r2, r3
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	669a      	str	r2, [r3, #104]	; 0x68
}
 80082b0:	bf00      	nop
 80082b2:	3714      	adds	r7, #20
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr
 80082bc:	58025408 	.word	0x58025408
 80082c0:	5802541c 	.word	0x5802541c
 80082c4:	58025430 	.word	0x58025430
 80082c8:	58025444 	.word	0x58025444
 80082cc:	58025458 	.word	0x58025458
 80082d0:	5802546c 	.word	0x5802546c
 80082d4:	58025480 	.word	0x58025480
 80082d8:	58025494 	.word	0x58025494
 80082dc:	cccccccd 	.word	0xcccccccd
 80082e0:	16009600 	.word	0x16009600
 80082e4:	58025880 	.word	0x58025880
 80082e8:	aaaaaaab 	.word	0xaaaaaaab
 80082ec:	400204b8 	.word	0x400204b8
 80082f0:	4002040f 	.word	0x4002040f
 80082f4:	10008200 	.word	0x10008200
 80082f8:	40020880 	.word	0x40020880

080082fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b085      	sub	sp, #20
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	b2db      	uxtb	r3, r3
 800830a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d04a      	beq.n	80083a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2b08      	cmp	r3, #8
 8008316:	d847      	bhi.n	80083a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a25      	ldr	r2, [pc, #148]	; (80083b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d022      	beq.n	8008368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a24      	ldr	r2, [pc, #144]	; (80083b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d01d      	beq.n	8008368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a22      	ldr	r2, [pc, #136]	; (80083bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d018      	beq.n	8008368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a21      	ldr	r2, [pc, #132]	; (80083c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d013      	beq.n	8008368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a1f      	ldr	r2, [pc, #124]	; (80083c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d00e      	beq.n	8008368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a1e      	ldr	r2, [pc, #120]	; (80083c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d009      	beq.n	8008368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a1c      	ldr	r2, [pc, #112]	; (80083cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d004      	beq.n	8008368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a1b      	ldr	r2, [pc, #108]	; (80083d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d101      	bne.n	800836c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008368:	2301      	movs	r3, #1
 800836a:	e000      	b.n	800836e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800836c:	2300      	movs	r3, #0
 800836e:	2b00      	cmp	r3, #0
 8008370:	d00a      	beq.n	8008388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008372:	68fa      	ldr	r2, [r7, #12]
 8008374:	4b17      	ldr	r3, [pc, #92]	; (80083d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008376:	4413      	add	r3, r2
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	461a      	mov	r2, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4a15      	ldr	r2, [pc, #84]	; (80083d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008384:	671a      	str	r2, [r3, #112]	; 0x70
 8008386:	e009      	b.n	800839c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	4b14      	ldr	r3, [pc, #80]	; (80083dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800838c:	4413      	add	r3, r2
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	461a      	mov	r2, r3
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4a11      	ldr	r2, [pc, #68]	; (80083e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800839a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	3b01      	subs	r3, #1
 80083a0:	2201      	movs	r2, #1
 80083a2:	409a      	lsls	r2, r3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80083a8:	bf00      	nop
 80083aa:	3714      	adds	r7, #20
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr
 80083b4:	58025408 	.word	0x58025408
 80083b8:	5802541c 	.word	0x5802541c
 80083bc:	58025430 	.word	0x58025430
 80083c0:	58025444 	.word	0x58025444
 80083c4:	58025458 	.word	0x58025458
 80083c8:	5802546c 	.word	0x5802546c
 80083cc:	58025480 	.word	0x58025480
 80083d0:	58025494 	.word	0x58025494
 80083d4:	1600963f 	.word	0x1600963f
 80083d8:	58025940 	.word	0x58025940
 80083dc:	1000823f 	.word	0x1000823f
 80083e0:	40020940 	.word	0x40020940

080083e4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b098      	sub	sp, #96	; 0x60
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80083ec:	4a84      	ldr	r2, [pc, #528]	; (8008600 <HAL_FDCAN_Init+0x21c>)
 80083ee:	f107 030c 	add.w	r3, r7, #12
 80083f2:	4611      	mov	r1, r2
 80083f4:	224c      	movs	r2, #76	; 0x4c
 80083f6:	4618      	mov	r0, r3
 80083f8:	f012 fcea 	bl	801add0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d101      	bne.n	8008406 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8008402:	2301      	movs	r3, #1
 8008404:	e1c6      	b.n	8008794 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a7e      	ldr	r2, [pc, #504]	; (8008604 <HAL_FDCAN_Init+0x220>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d106      	bne.n	800841e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008418:	461a      	mov	r2, r3
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8008424:	b2db      	uxtb	r3, r3
 8008426:	2b00      	cmp	r3, #0
 8008428:	d106      	bne.n	8008438 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f7fa fdae 	bl	8002f94 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	699a      	ldr	r2, [r3, #24]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f022 0210 	bic.w	r2, r2, #16
 8008446:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008448:	f7fb fde4 	bl	8004014 <HAL_GetTick>
 800844c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800844e:	e014      	b.n	800847a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008450:	f7fb fde0 	bl	8004014 <HAL_GetTick>
 8008454:	4602      	mov	r2, r0
 8008456:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008458:	1ad3      	subs	r3, r2, r3
 800845a:	2b0a      	cmp	r3, #10
 800845c:	d90d      	bls.n	800847a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008464:	f043 0201 	orr.w	r2, r3, #1
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2203      	movs	r2, #3
 8008472:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8008476:	2301      	movs	r3, #1
 8008478:	e18c      	b.n	8008794 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	699b      	ldr	r3, [r3, #24]
 8008480:	f003 0308 	and.w	r3, r3, #8
 8008484:	2b08      	cmp	r3, #8
 8008486:	d0e3      	beq.n	8008450 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	699a      	ldr	r2, [r3, #24]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f042 0201 	orr.w	r2, r2, #1
 8008496:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008498:	f7fb fdbc 	bl	8004014 <HAL_GetTick>
 800849c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800849e:	e014      	b.n	80084ca <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80084a0:	f7fb fdb8 	bl	8004014 <HAL_GetTick>
 80084a4:	4602      	mov	r2, r0
 80084a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084a8:	1ad3      	subs	r3, r2, r3
 80084aa:	2b0a      	cmp	r3, #10
 80084ac:	d90d      	bls.n	80084ca <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80084b4:	f043 0201 	orr.w	r2, r3, #1
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2203      	movs	r2, #3
 80084c2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	e164      	b.n	8008794 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	699b      	ldr	r3, [r3, #24]
 80084d0:	f003 0301 	and.w	r3, r3, #1
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d0e3      	beq.n	80084a0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	699a      	ldr	r2, [r3, #24]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f042 0202 	orr.w	r2, r2, #2
 80084e6:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	7c1b      	ldrb	r3, [r3, #16]
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d108      	bne.n	8008502 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	699a      	ldr	r2, [r3, #24]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084fe:	619a      	str	r2, [r3, #24]
 8008500:	e007      	b.n	8008512 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	699a      	ldr	r2, [r3, #24]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008510:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	7c5b      	ldrb	r3, [r3, #17]
 8008516:	2b01      	cmp	r3, #1
 8008518:	d108      	bne.n	800852c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	699a      	ldr	r2, [r3, #24]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008528:	619a      	str	r2, [r3, #24]
 800852a:	e007      	b.n	800853c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	699a      	ldr	r2, [r3, #24]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800853a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	7c9b      	ldrb	r3, [r3, #18]
 8008540:	2b01      	cmp	r3, #1
 8008542:	d108      	bne.n	8008556 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	699a      	ldr	r2, [r3, #24]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008552:	619a      	str	r2, [r3, #24]
 8008554:	e007      	b.n	8008566 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	699a      	ldr	r2, [r3, #24]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008564:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	699b      	ldr	r3, [r3, #24]
 800856c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	689a      	ldr	r2, [r3, #8]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	430a      	orrs	r2, r1
 800857a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	699a      	ldr	r2, [r3, #24]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800858a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	691a      	ldr	r2, [r3, #16]
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f022 0210 	bic.w	r2, r2, #16
 800859a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d108      	bne.n	80085b6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	699a      	ldr	r2, [r3, #24]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f042 0204 	orr.w	r2, r2, #4
 80085b2:	619a      	str	r2, [r3, #24]
 80085b4:	e030      	b.n	8008618 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d02c      	beq.n	8008618 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	68db      	ldr	r3, [r3, #12]
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d020      	beq.n	8008608 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	699a      	ldr	r2, [r3, #24]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80085d4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	691a      	ldr	r2, [r3, #16]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f042 0210 	orr.w	r2, r2, #16
 80085e4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	68db      	ldr	r3, [r3, #12]
 80085ea:	2b03      	cmp	r3, #3
 80085ec:	d114      	bne.n	8008618 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	699a      	ldr	r2, [r3, #24]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f042 0220 	orr.w	r2, r2, #32
 80085fc:	619a      	str	r2, [r3, #24]
 80085fe:	e00b      	b.n	8008618 <HAL_FDCAN_Init+0x234>
 8008600:	0801f670 	.word	0x0801f670
 8008604:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	699a      	ldr	r2, [r3, #24]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f042 0220 	orr.w	r2, r2, #32
 8008616:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	699b      	ldr	r3, [r3, #24]
 800861c:	3b01      	subs	r3, #1
 800861e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	69db      	ldr	r3, [r3, #28]
 8008624:	3b01      	subs	r3, #1
 8008626:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008628:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6a1b      	ldr	r3, [r3, #32]
 800862e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008630:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	695b      	ldr	r3, [r3, #20]
 8008638:	3b01      	subs	r3, #1
 800863a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008640:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008642:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	689b      	ldr	r3, [r3, #8]
 8008648:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800864c:	d115      	bne.n	800867a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008652:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008658:	3b01      	subs	r3, #1
 800865a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800865c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008662:	3b01      	subs	r3, #1
 8008664:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8008666:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866e:	3b01      	subs	r3, #1
 8008670:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8008676:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8008678:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800867e:	2b00      	cmp	r3, #0
 8008680:	d00a      	beq.n	8008698 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	430a      	orrs	r2, r1
 8008694:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086a0:	4413      	add	r3, r2
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d011      	beq.n	80086ca <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80086ae:	f023 0107 	bic.w	r1, r3, #7
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	3360      	adds	r3, #96	; 0x60
 80086ba:	443b      	add	r3, r7
 80086bc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	430a      	orrs	r2, r1
 80086c6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d011      	beq.n	80086f6 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80086da:	f023 0107 	bic.w	r1, r3, #7
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	3360      	adds	r3, #96	; 0x60
 80086e6:	443b      	add	r3, r7
 80086e8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	430a      	orrs	r2, r1
 80086f2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d012      	beq.n	8008724 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008706:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	3360      	adds	r3, #96	; 0x60
 8008712:	443b      	add	r3, r7
 8008714:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8008718:	011a      	lsls	r2, r3, #4
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	430a      	orrs	r2, r1
 8008720:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008728:	2b00      	cmp	r3, #0
 800872a:	d012      	beq.n	8008752 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008734:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	3360      	adds	r3, #96	; 0x60
 8008740:	443b      	add	r3, r7
 8008742:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8008746:	021a      	lsls	r2, r3, #8
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	430a      	orrs	r2, r1
 800874e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a11      	ldr	r2, [pc, #68]	; (800879c <HAL_FDCAN_Init+0x3b8>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d107      	bne.n	800876c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	689a      	ldr	r2, [r3, #8]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	f022 0203 	bic.w	r2, r2, #3
 800876a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2200      	movs	r2, #0
 8008770:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 f80b 	bl	80087a0 <FDCAN_CalcultateRamBlockAddresses>
 800878a:	4603      	mov	r3, r0
 800878c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8008790:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8008794:	4618      	mov	r0, r3
 8008796:	3760      	adds	r7, #96	; 0x60
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}
 800879c:	4000a000 	.word	0x4000a000

080087a0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b085      	sub	sp, #20
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087ac:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80087b6:	4ba7      	ldr	r3, [pc, #668]	; (8008a54 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80087b8:	4013      	ands	r3, r2
 80087ba:	68ba      	ldr	r2, [r7, #8]
 80087bc:	0091      	lsls	r1, r2, #2
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	6812      	ldr	r2, [r2, #0]
 80087c2:	430b      	orrs	r3, r1
 80087c4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087d0:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d8:	041a      	lsls	r2, r3, #16
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	430a      	orrs	r2, r1
 80087e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e8:	68ba      	ldr	r2, [r7, #8]
 80087ea:	4413      	add	r3, r2
 80087ec:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80087f6:	4b97      	ldr	r3, [pc, #604]	; (8008a54 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80087f8:	4013      	ands	r3, r2
 80087fa:	68ba      	ldr	r2, [r7, #8]
 80087fc:	0091      	lsls	r1, r2, #2
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	6812      	ldr	r2, [r2, #0]
 8008802:	430b      	orrs	r3, r1
 8008804:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008810:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008818:	041a      	lsls	r2, r3, #16
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	430a      	orrs	r2, r1
 8008820:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008828:	005b      	lsls	r3, r3, #1
 800882a:	68ba      	ldr	r2, [r7, #8]
 800882c:	4413      	add	r3, r2
 800882e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8008838:	4b86      	ldr	r3, [pc, #536]	; (8008a54 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800883a:	4013      	ands	r3, r2
 800883c:	68ba      	ldr	r2, [r7, #8]
 800883e:	0091      	lsls	r1, r2, #2
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	6812      	ldr	r2, [r2, #0]
 8008844:	430b      	orrs	r3, r1
 8008846:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008852:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800885a:	041a      	lsls	r2, r3, #16
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	430a      	orrs	r2, r1
 8008862:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800886e:	fb02 f303 	mul.w	r3, r2, r3
 8008872:	68ba      	ldr	r2, [r7, #8]
 8008874:	4413      	add	r3, r2
 8008876:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8008880:	4b74      	ldr	r3, [pc, #464]	; (8008a54 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008882:	4013      	ands	r3, r2
 8008884:	68ba      	ldr	r2, [r7, #8]
 8008886:	0091      	lsls	r1, r2, #2
 8008888:	687a      	ldr	r2, [r7, #4]
 800888a:	6812      	ldr	r2, [r2, #0]
 800888c:	430b      	orrs	r3, r1
 800888e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800889a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088a2:	041a      	lsls	r2, r3, #16
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	430a      	orrs	r2, r1
 80088aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80088b6:	fb02 f303 	mul.w	r3, r2, r3
 80088ba:	68ba      	ldr	r2, [r7, #8]
 80088bc:	4413      	add	r3, r2
 80088be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80088c8:	4b62      	ldr	r3, [pc, #392]	; (8008a54 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80088ca:	4013      	ands	r3, r2
 80088cc:	68ba      	ldr	r2, [r7, #8]
 80088ce:	0091      	lsls	r1, r2, #2
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	6812      	ldr	r2, [r2, #0]
 80088d4:	430b      	orrs	r3, r1
 80088d6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80088e2:	fb02 f303 	mul.w	r3, r2, r3
 80088e6:	68ba      	ldr	r2, [r7, #8]
 80088e8:	4413      	add	r3, r2
 80088ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80088f4:	4b57      	ldr	r3, [pc, #348]	; (8008a54 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80088f6:	4013      	ands	r3, r2
 80088f8:	68ba      	ldr	r2, [r7, #8]
 80088fa:	0091      	lsls	r1, r2, #2
 80088fc:	687a      	ldr	r2, [r7, #4]
 80088fe:	6812      	ldr	r2, [r2, #0]
 8008900:	430b      	orrs	r3, r1
 8008902:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800890e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008916:	041a      	lsls	r2, r3, #16
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	430a      	orrs	r2, r1
 800891e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008926:	005b      	lsls	r3, r3, #1
 8008928:	68ba      	ldr	r2, [r7, #8]
 800892a:	4413      	add	r3, r2
 800892c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8008936:	4b47      	ldr	r3, [pc, #284]	; (8008a54 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008938:	4013      	ands	r3, r2
 800893a:	68ba      	ldr	r2, [r7, #8]
 800893c:	0091      	lsls	r1, r2, #2
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	6812      	ldr	r2, [r2, #0]
 8008942:	430b      	orrs	r3, r1
 8008944:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008950:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008958:	041a      	lsls	r2, r3, #16
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	430a      	orrs	r2, r1
 8008960:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800896c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008974:	061a      	lsls	r2, r3, #24
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	430a      	orrs	r2, r1
 800897c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008984:	4b34      	ldr	r3, [pc, #208]	; (8008a58 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8008986:	4413      	add	r3, r2
 8008988:	009a      	lsls	r2, r3, #2
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008996:	009b      	lsls	r3, r3, #2
 8008998:	441a      	add	r2, r3
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089a6:	00db      	lsls	r3, r3, #3
 80089a8:	441a      	add	r2, r3
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089b6:	6879      	ldr	r1, [r7, #4]
 80089b8:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80089ba:	fb01 f303 	mul.w	r3, r1, r3
 80089be:	009b      	lsls	r3, r3, #2
 80089c0:	441a      	add	r2, r3
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089ce:	6879      	ldr	r1, [r7, #4]
 80089d0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80089d2:	fb01 f303 	mul.w	r3, r1, r3
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	441a      	add	r2, r3
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089e6:	6879      	ldr	r1, [r7, #4]
 80089e8:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80089ea:	fb01 f303 	mul.w	r3, r1, r3
 80089ee:	009b      	lsls	r3, r3, #2
 80089f0:	441a      	add	r2, r3
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a02:	00db      	lsls	r3, r3, #3
 8008a04:	441a      	add	r2, r3
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a16:	6879      	ldr	r1, [r7, #4]
 8008a18:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8008a1a:	fb01 f303 	mul.w	r3, r1, r3
 8008a1e:	009b      	lsls	r3, r3, #2
 8008a20:	441a      	add	r2, r3
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a32:	6879      	ldr	r1, [r7, #4]
 8008a34:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8008a36:	fb01 f303 	mul.w	r3, r1, r3
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	441a      	add	r2, r3
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a4a:	4a04      	ldr	r2, [pc, #16]	; (8008a5c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d915      	bls.n	8008a7c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8008a50:	e006      	b.n	8008a60 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8008a52:	bf00      	nop
 8008a54:	ffff0003 	.word	0xffff0003
 8008a58:	10002b00 	.word	0x10002b00
 8008a5c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008a66:	f043 0220 	orr.w	r2, r3, #32
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2203      	movs	r2, #3
 8008a74:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	e010      	b.n	8008a9e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a80:	60fb      	str	r3, [r7, #12]
 8008a82:	e005      	b.n	8008a90 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2200      	movs	r2, #0
 8008a88:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	3304      	adds	r3, #4
 8008a8e:	60fb      	str	r3, [r7, #12]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a96:	68fa      	ldr	r2, [r7, #12]
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d3f3      	bcc.n	8008a84 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8008a9c:	2300      	movs	r3, #0
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3714      	adds	r7, #20
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr
 8008aaa:	bf00      	nop

08008aac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b089      	sub	sp, #36	; 0x24
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008aba:	4b86      	ldr	r3, [pc, #536]	; (8008cd4 <HAL_GPIO_Init+0x228>)
 8008abc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008abe:	e18c      	b.n	8008dda <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	681a      	ldr	r2, [r3, #0]
 8008ac4:	2101      	movs	r1, #1
 8008ac6:	69fb      	ldr	r3, [r7, #28]
 8008ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8008acc:	4013      	ands	r3, r2
 8008ace:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	f000 817e 	beq.w	8008dd4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	f003 0303 	and.w	r3, r3, #3
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	d005      	beq.n	8008af0 <HAL_GPIO_Init+0x44>
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	f003 0303 	and.w	r3, r3, #3
 8008aec:	2b02      	cmp	r3, #2
 8008aee:	d130      	bne.n	8008b52 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	005b      	lsls	r3, r3, #1
 8008afa:	2203      	movs	r2, #3
 8008afc:	fa02 f303 	lsl.w	r3, r2, r3
 8008b00:	43db      	mvns	r3, r3
 8008b02:	69ba      	ldr	r2, [r7, #24]
 8008b04:	4013      	ands	r3, r2
 8008b06:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	68da      	ldr	r2, [r3, #12]
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	005b      	lsls	r3, r3, #1
 8008b10:	fa02 f303 	lsl.w	r3, r2, r3
 8008b14:	69ba      	ldr	r2, [r7, #24]
 8008b16:	4313      	orrs	r3, r2
 8008b18:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	69ba      	ldr	r2, [r7, #24]
 8008b1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008b26:	2201      	movs	r2, #1
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b2e:	43db      	mvns	r3, r3
 8008b30:	69ba      	ldr	r2, [r7, #24]
 8008b32:	4013      	ands	r3, r2
 8008b34:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	091b      	lsrs	r3, r3, #4
 8008b3c:	f003 0201 	and.w	r2, r3, #1
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	fa02 f303 	lsl.w	r3, r2, r3
 8008b46:	69ba      	ldr	r2, [r7, #24]
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	69ba      	ldr	r2, [r7, #24]
 8008b50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	f003 0303 	and.w	r3, r3, #3
 8008b5a:	2b03      	cmp	r3, #3
 8008b5c:	d017      	beq.n	8008b8e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	68db      	ldr	r3, [r3, #12]
 8008b62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008b64:	69fb      	ldr	r3, [r7, #28]
 8008b66:	005b      	lsls	r3, r3, #1
 8008b68:	2203      	movs	r2, #3
 8008b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b6e:	43db      	mvns	r3, r3
 8008b70:	69ba      	ldr	r2, [r7, #24]
 8008b72:	4013      	ands	r3, r2
 8008b74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	689a      	ldr	r2, [r3, #8]
 8008b7a:	69fb      	ldr	r3, [r7, #28]
 8008b7c:	005b      	lsls	r3, r3, #1
 8008b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b82:	69ba      	ldr	r2, [r7, #24]
 8008b84:	4313      	orrs	r3, r2
 8008b86:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	69ba      	ldr	r2, [r7, #24]
 8008b8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	f003 0303 	and.w	r3, r3, #3
 8008b96:	2b02      	cmp	r3, #2
 8008b98:	d123      	bne.n	8008be2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008b9a:	69fb      	ldr	r3, [r7, #28]
 8008b9c:	08da      	lsrs	r2, r3, #3
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	3208      	adds	r2, #8
 8008ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008ba8:	69fb      	ldr	r3, [r7, #28]
 8008baa:	f003 0307 	and.w	r3, r3, #7
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	220f      	movs	r2, #15
 8008bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8008bb6:	43db      	mvns	r3, r3
 8008bb8:	69ba      	ldr	r2, [r7, #24]
 8008bba:	4013      	ands	r3, r2
 8008bbc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	691a      	ldr	r2, [r3, #16]
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	f003 0307 	and.w	r3, r3, #7
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	fa02 f303 	lsl.w	r3, r2, r3
 8008bce:	69ba      	ldr	r2, [r7, #24]
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	08da      	lsrs	r2, r3, #3
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	3208      	adds	r2, #8
 8008bdc:	69b9      	ldr	r1, [r7, #24]
 8008bde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008be8:	69fb      	ldr	r3, [r7, #28]
 8008bea:	005b      	lsls	r3, r3, #1
 8008bec:	2203      	movs	r2, #3
 8008bee:	fa02 f303 	lsl.w	r3, r2, r3
 8008bf2:	43db      	mvns	r3, r3
 8008bf4:	69ba      	ldr	r2, [r7, #24]
 8008bf6:	4013      	ands	r3, r2
 8008bf8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	f003 0203 	and.w	r2, r3, #3
 8008c02:	69fb      	ldr	r3, [r7, #28]
 8008c04:	005b      	lsls	r3, r3, #1
 8008c06:	fa02 f303 	lsl.w	r3, r2, r3
 8008c0a:	69ba      	ldr	r2, [r7, #24]
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	69ba      	ldr	r2, [r7, #24]
 8008c14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	685b      	ldr	r3, [r3, #4]
 8008c1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	f000 80d8 	beq.w	8008dd4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008c24:	4b2c      	ldr	r3, [pc, #176]	; (8008cd8 <HAL_GPIO_Init+0x22c>)
 8008c26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008c2a:	4a2b      	ldr	r2, [pc, #172]	; (8008cd8 <HAL_GPIO_Init+0x22c>)
 8008c2c:	f043 0302 	orr.w	r3, r3, #2
 8008c30:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008c34:	4b28      	ldr	r3, [pc, #160]	; (8008cd8 <HAL_GPIO_Init+0x22c>)
 8008c36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008c3a:	f003 0302 	and.w	r3, r3, #2
 8008c3e:	60fb      	str	r3, [r7, #12]
 8008c40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008c42:	4a26      	ldr	r2, [pc, #152]	; (8008cdc <HAL_GPIO_Init+0x230>)
 8008c44:	69fb      	ldr	r3, [r7, #28]
 8008c46:	089b      	lsrs	r3, r3, #2
 8008c48:	3302      	adds	r3, #2
 8008c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008c50:	69fb      	ldr	r3, [r7, #28]
 8008c52:	f003 0303 	and.w	r3, r3, #3
 8008c56:	009b      	lsls	r3, r3, #2
 8008c58:	220f      	movs	r2, #15
 8008c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c5e:	43db      	mvns	r3, r3
 8008c60:	69ba      	ldr	r2, [r7, #24]
 8008c62:	4013      	ands	r3, r2
 8008c64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	4a1d      	ldr	r2, [pc, #116]	; (8008ce0 <HAL_GPIO_Init+0x234>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d04a      	beq.n	8008d04 <HAL_GPIO_Init+0x258>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	4a1c      	ldr	r2, [pc, #112]	; (8008ce4 <HAL_GPIO_Init+0x238>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d02b      	beq.n	8008cce <HAL_GPIO_Init+0x222>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4a1b      	ldr	r2, [pc, #108]	; (8008ce8 <HAL_GPIO_Init+0x23c>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d025      	beq.n	8008cca <HAL_GPIO_Init+0x21e>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4a1a      	ldr	r2, [pc, #104]	; (8008cec <HAL_GPIO_Init+0x240>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d01f      	beq.n	8008cc6 <HAL_GPIO_Init+0x21a>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4a19      	ldr	r2, [pc, #100]	; (8008cf0 <HAL_GPIO_Init+0x244>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d019      	beq.n	8008cc2 <HAL_GPIO_Init+0x216>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	4a18      	ldr	r2, [pc, #96]	; (8008cf4 <HAL_GPIO_Init+0x248>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d013      	beq.n	8008cbe <HAL_GPIO_Init+0x212>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	4a17      	ldr	r2, [pc, #92]	; (8008cf8 <HAL_GPIO_Init+0x24c>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d00d      	beq.n	8008cba <HAL_GPIO_Init+0x20e>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	4a16      	ldr	r2, [pc, #88]	; (8008cfc <HAL_GPIO_Init+0x250>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d007      	beq.n	8008cb6 <HAL_GPIO_Init+0x20a>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	4a15      	ldr	r2, [pc, #84]	; (8008d00 <HAL_GPIO_Init+0x254>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d101      	bne.n	8008cb2 <HAL_GPIO_Init+0x206>
 8008cae:	2309      	movs	r3, #9
 8008cb0:	e029      	b.n	8008d06 <HAL_GPIO_Init+0x25a>
 8008cb2:	230a      	movs	r3, #10
 8008cb4:	e027      	b.n	8008d06 <HAL_GPIO_Init+0x25a>
 8008cb6:	2307      	movs	r3, #7
 8008cb8:	e025      	b.n	8008d06 <HAL_GPIO_Init+0x25a>
 8008cba:	2306      	movs	r3, #6
 8008cbc:	e023      	b.n	8008d06 <HAL_GPIO_Init+0x25a>
 8008cbe:	2305      	movs	r3, #5
 8008cc0:	e021      	b.n	8008d06 <HAL_GPIO_Init+0x25a>
 8008cc2:	2304      	movs	r3, #4
 8008cc4:	e01f      	b.n	8008d06 <HAL_GPIO_Init+0x25a>
 8008cc6:	2303      	movs	r3, #3
 8008cc8:	e01d      	b.n	8008d06 <HAL_GPIO_Init+0x25a>
 8008cca:	2302      	movs	r3, #2
 8008ccc:	e01b      	b.n	8008d06 <HAL_GPIO_Init+0x25a>
 8008cce:	2301      	movs	r3, #1
 8008cd0:	e019      	b.n	8008d06 <HAL_GPIO_Init+0x25a>
 8008cd2:	bf00      	nop
 8008cd4:	58000080 	.word	0x58000080
 8008cd8:	58024400 	.word	0x58024400
 8008cdc:	58000400 	.word	0x58000400
 8008ce0:	58020000 	.word	0x58020000
 8008ce4:	58020400 	.word	0x58020400
 8008ce8:	58020800 	.word	0x58020800
 8008cec:	58020c00 	.word	0x58020c00
 8008cf0:	58021000 	.word	0x58021000
 8008cf4:	58021400 	.word	0x58021400
 8008cf8:	58021800 	.word	0x58021800
 8008cfc:	58021c00 	.word	0x58021c00
 8008d00:	58022400 	.word	0x58022400
 8008d04:	2300      	movs	r3, #0
 8008d06:	69fa      	ldr	r2, [r7, #28]
 8008d08:	f002 0203 	and.w	r2, r2, #3
 8008d0c:	0092      	lsls	r2, r2, #2
 8008d0e:	4093      	lsls	r3, r2
 8008d10:	69ba      	ldr	r2, [r7, #24]
 8008d12:	4313      	orrs	r3, r2
 8008d14:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008d16:	4938      	ldr	r1, [pc, #224]	; (8008df8 <HAL_GPIO_Init+0x34c>)
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	089b      	lsrs	r3, r3, #2
 8008d1c:	3302      	adds	r3, #2
 8008d1e:	69ba      	ldr	r2, [r7, #24]
 8008d20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	43db      	mvns	r3, r3
 8008d30:	69ba      	ldr	r2, [r7, #24]
 8008d32:	4013      	ands	r3, r2
 8008d34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d003      	beq.n	8008d4a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008d42:	69ba      	ldr	r2, [r7, #24]
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008d4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008d4e:	69bb      	ldr	r3, [r7, #24]
 8008d50:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	43db      	mvns	r3, r3
 8008d5e:	69ba      	ldr	r2, [r7, #24]
 8008d60:	4013      	ands	r3, r2
 8008d62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d003      	beq.n	8008d78 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008d70:	69ba      	ldr	r2, [r7, #24]
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	4313      	orrs	r3, r2
 8008d76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008d78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008d7c:	69bb      	ldr	r3, [r7, #24]
 8008d7e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	43db      	mvns	r3, r3
 8008d8a:	69ba      	ldr	r2, [r7, #24]
 8008d8c:	4013      	ands	r3, r2
 8008d8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d003      	beq.n	8008da4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008d9c:	69ba      	ldr	r2, [r7, #24]
 8008d9e:	693b      	ldr	r3, [r7, #16]
 8008da0:	4313      	orrs	r3, r2
 8008da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	69ba      	ldr	r2, [r7, #24]
 8008da8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	43db      	mvns	r3, r3
 8008db4:	69ba      	ldr	r2, [r7, #24]
 8008db6:	4013      	ands	r3, r2
 8008db8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d003      	beq.n	8008dce <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008dc6:	69ba      	ldr	r2, [r7, #24]
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	69ba      	ldr	r2, [r7, #24]
 8008dd2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	69fb      	ldr	r3, [r7, #28]
 8008de0:	fa22 f303 	lsr.w	r3, r2, r3
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	f47f ae6b 	bne.w	8008ac0 <HAL_GPIO_Init+0x14>
  }
}
 8008dea:	bf00      	nop
 8008dec:	bf00      	nop
 8008dee:	3724      	adds	r7, #36	; 0x24
 8008df0:	46bd      	mov	sp, r7
 8008df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df6:	4770      	bx	lr
 8008df8:	58000400 	.word	0x58000400

08008dfc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b085      	sub	sp, #20
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	460b      	mov	r3, r1
 8008e06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	691a      	ldr	r2, [r3, #16]
 8008e0c:	887b      	ldrh	r3, [r7, #2]
 8008e0e:	4013      	ands	r3, r2
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d002      	beq.n	8008e1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008e14:	2301      	movs	r3, #1
 8008e16:	73fb      	strb	r3, [r7, #15]
 8008e18:	e001      	b.n	8008e1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3714      	adds	r7, #20
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr

08008e2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b083      	sub	sp, #12
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	460b      	mov	r3, r1
 8008e36:	807b      	strh	r3, [r7, #2]
 8008e38:	4613      	mov	r3, r2
 8008e3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008e3c:	787b      	ldrb	r3, [r7, #1]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d003      	beq.n	8008e4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008e42:	887a      	ldrh	r2, [r7, #2]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008e48:	e003      	b.n	8008e52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008e4a:	887b      	ldrh	r3, [r7, #2]
 8008e4c:	041a      	lsls	r2, r3, #16
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	619a      	str	r2, [r3, #24]
}
 8008e52:	bf00      	nop
 8008e54:	370c      	adds	r7, #12
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr
	...

08008e60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d101      	bne.n	8008e72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e07f      	b.n	8008f72 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e78:	b2db      	uxtb	r3, r3
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d106      	bne.n	8008e8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2200      	movs	r2, #0
 8008e82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f7fa f8ec 	bl	8003064 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2224      	movs	r2, #36	; 0x24
 8008e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f022 0201 	bic.w	r2, r2, #1
 8008ea2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	685a      	ldr	r2, [r3, #4]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008eb0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	689a      	ldr	r2, [r3, #8]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008ec0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	68db      	ldr	r3, [r3, #12]
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	d107      	bne.n	8008eda <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	689a      	ldr	r2, [r3, #8]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ed6:	609a      	str	r2, [r3, #8]
 8008ed8:	e006      	b.n	8008ee8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	689a      	ldr	r2, [r3, #8]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008ee6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	68db      	ldr	r3, [r3, #12]
 8008eec:	2b02      	cmp	r3, #2
 8008eee:	d104      	bne.n	8008efa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ef8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	6859      	ldr	r1, [r3, #4]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681a      	ldr	r2, [r3, #0]
 8008f04:	4b1d      	ldr	r3, [pc, #116]	; (8008f7c <HAL_I2C_Init+0x11c>)
 8008f06:	430b      	orrs	r3, r1
 8008f08:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	68da      	ldr	r2, [r3, #12]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008f18:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	691a      	ldr	r2, [r3, #16]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	695b      	ldr	r3, [r3, #20]
 8008f22:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	699b      	ldr	r3, [r3, #24]
 8008f2a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	430a      	orrs	r2, r1
 8008f32:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	69d9      	ldr	r1, [r3, #28]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6a1a      	ldr	r2, [r3, #32]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	430a      	orrs	r2, r1
 8008f42:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f042 0201 	orr.w	r2, r2, #1
 8008f52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2200      	movs	r2, #0
 8008f58:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2220      	movs	r2, #32
 8008f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2200      	movs	r2, #0
 8008f66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008f70:	2300      	movs	r3, #0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3708      	adds	r7, #8
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}
 8008f7a:	bf00      	nop
 8008f7c:	02008000 	.word	0x02008000

08008f80 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b084      	sub	sp, #16
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	699b      	ldr	r3, [r3, #24]
 8008f8e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d005      	beq.n	8008fac <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fa4:	68ba      	ldr	r2, [r7, #8]
 8008fa6:	68f9      	ldr	r1, [r7, #12]
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	4798      	blx	r3
  }
}
 8008fac:	bf00      	nop
 8008fae:	3710      	adds	r7, #16
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	2b20      	cmp	r3, #32
 8008fc8:	d138      	bne.n	800903c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d101      	bne.n	8008fd8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008fd4:	2302      	movs	r3, #2
 8008fd6:	e032      	b.n	800903e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2224      	movs	r2, #36	; 0x24
 8008fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	681a      	ldr	r2, [r3, #0]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f022 0201 	bic.w	r2, r2, #1
 8008ff6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	681a      	ldr	r2, [r3, #0]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009006:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	6819      	ldr	r1, [r3, #0]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	683a      	ldr	r2, [r7, #0]
 8009014:	430a      	orrs	r2, r1
 8009016:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	681a      	ldr	r2, [r3, #0]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f042 0201 	orr.w	r2, r2, #1
 8009026:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2220      	movs	r2, #32
 800902c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2200      	movs	r2, #0
 8009034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009038:	2300      	movs	r3, #0
 800903a:	e000      	b.n	800903e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800903c:	2302      	movs	r3, #2
  }
}
 800903e:	4618      	mov	r0, r3
 8009040:	370c      	adds	r7, #12
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr

0800904a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800904a:	b480      	push	{r7}
 800904c:	b085      	sub	sp, #20
 800904e:	af00      	add	r7, sp, #0
 8009050:	6078      	str	r0, [r7, #4]
 8009052:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800905a:	b2db      	uxtb	r3, r3
 800905c:	2b20      	cmp	r3, #32
 800905e:	d139      	bne.n	80090d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009066:	2b01      	cmp	r3, #1
 8009068:	d101      	bne.n	800906e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800906a:	2302      	movs	r3, #2
 800906c:	e033      	b.n	80090d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2201      	movs	r2, #1
 8009072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2224      	movs	r2, #36	; 0x24
 800907a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f022 0201 	bic.w	r2, r2, #1
 800908c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800909c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	021b      	lsls	r3, r3, #8
 80090a2:	68fa      	ldr	r2, [r7, #12]
 80090a4:	4313      	orrs	r3, r2
 80090a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	68fa      	ldr	r2, [r7, #12]
 80090ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f042 0201 	orr.w	r2, r2, #1
 80090be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2220      	movs	r2, #32
 80090c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80090d0:	2300      	movs	r3, #0
 80090d2:	e000      	b.n	80090d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80090d4:	2302      	movs	r3, #2
  }
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3714      	adds	r7, #20
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr

080090e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80090e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090e4:	b08f      	sub	sp, #60	; 0x3c
 80090e6:	af0a      	add	r7, sp, #40	; 0x28
 80090e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d101      	bne.n	80090f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80090f0:	2301      	movs	r3, #1
 80090f2:	e116      	b.n	8009322 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8009100:	b2db      	uxtb	r3, r3
 8009102:	2b00      	cmp	r3, #0
 8009104:	d106      	bne.n	8009114 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2200      	movs	r2, #0
 800910a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f011 fb28 	bl	801a764 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2203      	movs	r2, #3
 8009118:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009124:	2b00      	cmp	r3, #0
 8009126:	d102      	bne.n	800912e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2200      	movs	r2, #0
 800912c:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4618      	mov	r0, r3
 8009134:	f00a fcf7 	bl	8013b26 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	603b      	str	r3, [r7, #0]
 800913e:	687e      	ldr	r6, [r7, #4]
 8009140:	466d      	mov	r5, sp
 8009142:	f106 0410 	add.w	r4, r6, #16
 8009146:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009148:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800914a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800914c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800914e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009152:	e885 0003 	stmia.w	r5, {r0, r1}
 8009156:	1d33      	adds	r3, r6, #4
 8009158:	cb0e      	ldmia	r3, {r1, r2, r3}
 800915a:	6838      	ldr	r0, [r7, #0]
 800915c:	f00a fbc2 	bl	80138e4 <USB_CoreInit>
 8009160:	4603      	mov	r3, r0
 8009162:	2b00      	cmp	r3, #0
 8009164:	d005      	beq.n	8009172 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2202      	movs	r2, #2
 800916a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	e0d7      	b.n	8009322 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	2100      	movs	r1, #0
 8009178:	4618      	mov	r0, r3
 800917a:	f00a fce5 	bl	8013b48 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800917e:	2300      	movs	r3, #0
 8009180:	73fb      	strb	r3, [r7, #15]
 8009182:	e04a      	b.n	800921a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009184:	7bfa      	ldrb	r2, [r7, #15]
 8009186:	6879      	ldr	r1, [r7, #4]
 8009188:	4613      	mov	r3, r2
 800918a:	00db      	lsls	r3, r3, #3
 800918c:	4413      	add	r3, r2
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	440b      	add	r3, r1
 8009192:	333d      	adds	r3, #61	; 0x3d
 8009194:	2201      	movs	r2, #1
 8009196:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009198:	7bfa      	ldrb	r2, [r7, #15]
 800919a:	6879      	ldr	r1, [r7, #4]
 800919c:	4613      	mov	r3, r2
 800919e:	00db      	lsls	r3, r3, #3
 80091a0:	4413      	add	r3, r2
 80091a2:	009b      	lsls	r3, r3, #2
 80091a4:	440b      	add	r3, r1
 80091a6:	333c      	adds	r3, #60	; 0x3c
 80091a8:	7bfa      	ldrb	r2, [r7, #15]
 80091aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80091ac:	7bfa      	ldrb	r2, [r7, #15]
 80091ae:	7bfb      	ldrb	r3, [r7, #15]
 80091b0:	b298      	uxth	r0, r3
 80091b2:	6879      	ldr	r1, [r7, #4]
 80091b4:	4613      	mov	r3, r2
 80091b6:	00db      	lsls	r3, r3, #3
 80091b8:	4413      	add	r3, r2
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	440b      	add	r3, r1
 80091be:	3356      	adds	r3, #86	; 0x56
 80091c0:	4602      	mov	r2, r0
 80091c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80091c4:	7bfa      	ldrb	r2, [r7, #15]
 80091c6:	6879      	ldr	r1, [r7, #4]
 80091c8:	4613      	mov	r3, r2
 80091ca:	00db      	lsls	r3, r3, #3
 80091cc:	4413      	add	r3, r2
 80091ce:	009b      	lsls	r3, r3, #2
 80091d0:	440b      	add	r3, r1
 80091d2:	3340      	adds	r3, #64	; 0x40
 80091d4:	2200      	movs	r2, #0
 80091d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80091d8:	7bfa      	ldrb	r2, [r7, #15]
 80091da:	6879      	ldr	r1, [r7, #4]
 80091dc:	4613      	mov	r3, r2
 80091de:	00db      	lsls	r3, r3, #3
 80091e0:	4413      	add	r3, r2
 80091e2:	009b      	lsls	r3, r3, #2
 80091e4:	440b      	add	r3, r1
 80091e6:	3344      	adds	r3, #68	; 0x44
 80091e8:	2200      	movs	r2, #0
 80091ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80091ec:	7bfa      	ldrb	r2, [r7, #15]
 80091ee:	6879      	ldr	r1, [r7, #4]
 80091f0:	4613      	mov	r3, r2
 80091f2:	00db      	lsls	r3, r3, #3
 80091f4:	4413      	add	r3, r2
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	440b      	add	r3, r1
 80091fa:	3348      	adds	r3, #72	; 0x48
 80091fc:	2200      	movs	r2, #0
 80091fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009200:	7bfa      	ldrb	r2, [r7, #15]
 8009202:	6879      	ldr	r1, [r7, #4]
 8009204:	4613      	mov	r3, r2
 8009206:	00db      	lsls	r3, r3, #3
 8009208:	4413      	add	r3, r2
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	440b      	add	r3, r1
 800920e:	334c      	adds	r3, #76	; 0x4c
 8009210:	2200      	movs	r2, #0
 8009212:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009214:	7bfb      	ldrb	r3, [r7, #15]
 8009216:	3301      	adds	r3, #1
 8009218:	73fb      	strb	r3, [r7, #15]
 800921a:	7bfa      	ldrb	r2, [r7, #15]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	429a      	cmp	r2, r3
 8009222:	d3af      	bcc.n	8009184 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009224:	2300      	movs	r3, #0
 8009226:	73fb      	strb	r3, [r7, #15]
 8009228:	e044      	b.n	80092b4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800922a:	7bfa      	ldrb	r2, [r7, #15]
 800922c:	6879      	ldr	r1, [r7, #4]
 800922e:	4613      	mov	r3, r2
 8009230:	00db      	lsls	r3, r3, #3
 8009232:	4413      	add	r3, r2
 8009234:	009b      	lsls	r3, r3, #2
 8009236:	440b      	add	r3, r1
 8009238:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800923c:	2200      	movs	r2, #0
 800923e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009240:	7bfa      	ldrb	r2, [r7, #15]
 8009242:	6879      	ldr	r1, [r7, #4]
 8009244:	4613      	mov	r3, r2
 8009246:	00db      	lsls	r3, r3, #3
 8009248:	4413      	add	r3, r2
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	440b      	add	r3, r1
 800924e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8009252:	7bfa      	ldrb	r2, [r7, #15]
 8009254:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009256:	7bfa      	ldrb	r2, [r7, #15]
 8009258:	6879      	ldr	r1, [r7, #4]
 800925a:	4613      	mov	r3, r2
 800925c:	00db      	lsls	r3, r3, #3
 800925e:	4413      	add	r3, r2
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	440b      	add	r3, r1
 8009264:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009268:	2200      	movs	r2, #0
 800926a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800926c:	7bfa      	ldrb	r2, [r7, #15]
 800926e:	6879      	ldr	r1, [r7, #4]
 8009270:	4613      	mov	r3, r2
 8009272:	00db      	lsls	r3, r3, #3
 8009274:	4413      	add	r3, r2
 8009276:	009b      	lsls	r3, r3, #2
 8009278:	440b      	add	r3, r1
 800927a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800927e:	2200      	movs	r2, #0
 8009280:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009282:	7bfa      	ldrb	r2, [r7, #15]
 8009284:	6879      	ldr	r1, [r7, #4]
 8009286:	4613      	mov	r3, r2
 8009288:	00db      	lsls	r3, r3, #3
 800928a:	4413      	add	r3, r2
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	440b      	add	r3, r1
 8009290:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8009294:	2200      	movs	r2, #0
 8009296:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009298:	7bfa      	ldrb	r2, [r7, #15]
 800929a:	6879      	ldr	r1, [r7, #4]
 800929c:	4613      	mov	r3, r2
 800929e:	00db      	lsls	r3, r3, #3
 80092a0:	4413      	add	r3, r2
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	440b      	add	r3, r1
 80092a6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80092aa:	2200      	movs	r2, #0
 80092ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80092ae:	7bfb      	ldrb	r3, [r7, #15]
 80092b0:	3301      	adds	r3, #1
 80092b2:	73fb      	strb	r3, [r7, #15]
 80092b4:	7bfa      	ldrb	r2, [r7, #15]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d3b5      	bcc.n	800922a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	603b      	str	r3, [r7, #0]
 80092c4:	687e      	ldr	r6, [r7, #4]
 80092c6:	466d      	mov	r5, sp
 80092c8:	f106 0410 	add.w	r4, r6, #16
 80092cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80092ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80092d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80092d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80092d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80092d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80092dc:	1d33      	adds	r3, r6, #4
 80092de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80092e0:	6838      	ldr	r0, [r7, #0]
 80092e2:	f00a fc7d 	bl	8013be0 <USB_DevInit>
 80092e6:	4603      	mov	r3, r0
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d005      	beq.n	80092f8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2202      	movs	r2, #2
 80092f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80092f4:	2301      	movs	r3, #1
 80092f6:	e014      	b.n	8009322 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2200      	movs	r2, #0
 80092fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2201      	movs	r2, #1
 8009304:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800930c:	2b01      	cmp	r3, #1
 800930e:	d102      	bne.n	8009316 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f001 f96f 	bl	800a5f4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4618      	mov	r0, r3
 800931c:	f00b fcbf 	bl	8014c9e <USB_DevDisconnect>

  return HAL_OK;
 8009320:	2300      	movs	r3, #0
}
 8009322:	4618      	mov	r0, r3
 8009324:	3714      	adds	r7, #20
 8009326:	46bd      	mov	sp, r7
 8009328:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800932a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800932a:	b580      	push	{r7, lr}
 800932c:	b084      	sub	sp, #16
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800933e:	2b01      	cmp	r3, #1
 8009340:	d101      	bne.n	8009346 <HAL_PCD_Start+0x1c>
 8009342:	2302      	movs	r3, #2
 8009344:	e022      	b.n	800938c <HAL_PCD_Start+0x62>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2201      	movs	r2, #1
 800934a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009356:	2b00      	cmp	r3, #0
 8009358:	d109      	bne.n	800936e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800935e:	2b01      	cmp	r3, #1
 8009360:	d105      	bne.n	800936e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009366:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4618      	mov	r0, r3
 8009374:	f00a fbc6 	bl	8013b04 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4618      	mov	r0, r3
 800937e:	f00b fc6d 	bl	8014c5c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2200      	movs	r2, #0
 8009386:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800938a:	2300      	movs	r3, #0
}
 800938c:	4618      	mov	r0, r3
 800938e:	3710      	adds	r7, #16
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009394:	b590      	push	{r4, r7, lr}
 8009396:	b08d      	sub	sp, #52	; 0x34
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093a2:	6a3b      	ldr	r3, [r7, #32]
 80093a4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	4618      	mov	r0, r3
 80093ac:	f00b fd2b 	bl	8014e06 <USB_GetMode>
 80093b0:	4603      	mov	r3, r0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	f040 84b7 	bne.w	8009d26 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4618      	mov	r0, r3
 80093be:	f00b fc8f 	bl	8014ce0 <USB_ReadInterrupts>
 80093c2:	4603      	mov	r3, r0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	f000 84ad 	beq.w	8009d24 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80093ca:	69fb      	ldr	r3, [r7, #28]
 80093cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093d0:	689b      	ldr	r3, [r3, #8]
 80093d2:	0a1b      	lsrs	r3, r3, #8
 80093d4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4618      	mov	r0, r3
 80093e4:	f00b fc7c 	bl	8014ce0 <USB_ReadInterrupts>
 80093e8:	4603      	mov	r3, r0
 80093ea:	f003 0302 	and.w	r3, r3, #2
 80093ee:	2b02      	cmp	r3, #2
 80093f0:	d107      	bne.n	8009402 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	695a      	ldr	r2, [r3, #20]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f002 0202 	and.w	r2, r2, #2
 8009400:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4618      	mov	r0, r3
 8009408:	f00b fc6a 	bl	8014ce0 <USB_ReadInterrupts>
 800940c:	4603      	mov	r3, r0
 800940e:	f003 0310 	and.w	r3, r3, #16
 8009412:	2b10      	cmp	r3, #16
 8009414:	d161      	bne.n	80094da <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	699a      	ldr	r2, [r3, #24]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f022 0210 	bic.w	r2, r2, #16
 8009424:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8009426:	6a3b      	ldr	r3, [r7, #32]
 8009428:	6a1b      	ldr	r3, [r3, #32]
 800942a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800942c:	69bb      	ldr	r3, [r7, #24]
 800942e:	f003 020f 	and.w	r2, r3, #15
 8009432:	4613      	mov	r3, r2
 8009434:	00db      	lsls	r3, r3, #3
 8009436:	4413      	add	r3, r2
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800943e:	687a      	ldr	r2, [r7, #4]
 8009440:	4413      	add	r3, r2
 8009442:	3304      	adds	r3, #4
 8009444:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009446:	69bb      	ldr	r3, [r7, #24]
 8009448:	0c5b      	lsrs	r3, r3, #17
 800944a:	f003 030f 	and.w	r3, r3, #15
 800944e:	2b02      	cmp	r3, #2
 8009450:	d124      	bne.n	800949c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009452:	69ba      	ldr	r2, [r7, #24]
 8009454:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009458:	4013      	ands	r3, r2
 800945a:	2b00      	cmp	r3, #0
 800945c:	d035      	beq.n	80094ca <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009462:	69bb      	ldr	r3, [r7, #24]
 8009464:	091b      	lsrs	r3, r3, #4
 8009466:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009468:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800946c:	b29b      	uxth	r3, r3
 800946e:	461a      	mov	r2, r3
 8009470:	6a38      	ldr	r0, [r7, #32]
 8009472:	f00b faa1 	bl	80149b8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	68da      	ldr	r2, [r3, #12]
 800947a:	69bb      	ldr	r3, [r7, #24]
 800947c:	091b      	lsrs	r3, r3, #4
 800947e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009482:	441a      	add	r2, r3
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	695a      	ldr	r2, [r3, #20]
 800948c:	69bb      	ldr	r3, [r7, #24]
 800948e:	091b      	lsrs	r3, r3, #4
 8009490:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009494:	441a      	add	r2, r3
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	615a      	str	r2, [r3, #20]
 800949a:	e016      	b.n	80094ca <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800949c:	69bb      	ldr	r3, [r7, #24]
 800949e:	0c5b      	lsrs	r3, r3, #17
 80094a0:	f003 030f 	and.w	r3, r3, #15
 80094a4:	2b06      	cmp	r3, #6
 80094a6:	d110      	bne.n	80094ca <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80094ae:	2208      	movs	r2, #8
 80094b0:	4619      	mov	r1, r3
 80094b2:	6a38      	ldr	r0, [r7, #32]
 80094b4:	f00b fa80 	bl	80149b8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	695a      	ldr	r2, [r3, #20]
 80094bc:	69bb      	ldr	r3, [r7, #24]
 80094be:	091b      	lsrs	r3, r3, #4
 80094c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80094c4:	441a      	add	r2, r3
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	699a      	ldr	r2, [r3, #24]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f042 0210 	orr.w	r2, r2, #16
 80094d8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4618      	mov	r0, r3
 80094e0:	f00b fbfe 	bl	8014ce0 <USB_ReadInterrupts>
 80094e4:	4603      	mov	r3, r0
 80094e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80094ea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80094ee:	f040 80a7 	bne.w	8009640 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80094f2:	2300      	movs	r3, #0
 80094f4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4618      	mov	r0, r3
 80094fc:	f00b fc03 	bl	8014d06 <USB_ReadDevAllOutEpInterrupt>
 8009500:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8009502:	e099      	b.n	8009638 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009506:	f003 0301 	and.w	r3, r3, #1
 800950a:	2b00      	cmp	r3, #0
 800950c:	f000 808e 	beq.w	800962c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009516:	b2d2      	uxtb	r2, r2
 8009518:	4611      	mov	r1, r2
 800951a:	4618      	mov	r0, r3
 800951c:	f00b fc27 	bl	8014d6e <USB_ReadDevOutEPInterrupt>
 8009520:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	f003 0301 	and.w	r3, r3, #1
 8009528:	2b00      	cmp	r3, #0
 800952a:	d00c      	beq.n	8009546 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800952c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952e:	015a      	lsls	r2, r3, #5
 8009530:	69fb      	ldr	r3, [r7, #28]
 8009532:	4413      	add	r3, r2
 8009534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009538:	461a      	mov	r2, r3
 800953a:	2301      	movs	r3, #1
 800953c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800953e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 fed1 	bl	800a2e8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	f003 0308 	and.w	r3, r3, #8
 800954c:	2b00      	cmp	r3, #0
 800954e:	d00c      	beq.n	800956a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009552:	015a      	lsls	r2, r3, #5
 8009554:	69fb      	ldr	r3, [r7, #28]
 8009556:	4413      	add	r3, r2
 8009558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800955c:	461a      	mov	r2, r3
 800955e:	2308      	movs	r3, #8
 8009560:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009562:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 ffa7 	bl	800a4b8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	f003 0310 	and.w	r3, r3, #16
 8009570:	2b00      	cmp	r3, #0
 8009572:	d008      	beq.n	8009586 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009576:	015a      	lsls	r2, r3, #5
 8009578:	69fb      	ldr	r3, [r7, #28]
 800957a:	4413      	add	r3, r2
 800957c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009580:	461a      	mov	r2, r3
 8009582:	2310      	movs	r3, #16
 8009584:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	f003 0302 	and.w	r3, r3, #2
 800958c:	2b00      	cmp	r3, #0
 800958e:	d030      	beq.n	80095f2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8009590:	6a3b      	ldr	r3, [r7, #32]
 8009592:	695b      	ldr	r3, [r3, #20]
 8009594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009598:	2b80      	cmp	r3, #128	; 0x80
 800959a:	d109      	bne.n	80095b0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800959c:	69fb      	ldr	r3, [r7, #28]
 800959e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	69fa      	ldr	r2, [r7, #28]
 80095a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80095aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80095ae:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80095b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095b2:	4613      	mov	r3, r2
 80095b4:	00db      	lsls	r3, r3, #3
 80095b6:	4413      	add	r3, r2
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80095be:	687a      	ldr	r2, [r7, #4]
 80095c0:	4413      	add	r3, r2
 80095c2:	3304      	adds	r3, #4
 80095c4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	78db      	ldrb	r3, [r3, #3]
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d108      	bne.n	80095e0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	2200      	movs	r2, #0
 80095d2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80095d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	4619      	mov	r1, r3
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f011 f9ba 	bl	801a954 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80095e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e2:	015a      	lsls	r2, r3, #5
 80095e4:	69fb      	ldr	r3, [r7, #28]
 80095e6:	4413      	add	r3, r2
 80095e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095ec:	461a      	mov	r2, r3
 80095ee:	2302      	movs	r3, #2
 80095f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	f003 0320 	and.w	r3, r3, #32
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d008      	beq.n	800960e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80095fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fe:	015a      	lsls	r2, r3, #5
 8009600:	69fb      	ldr	r3, [r7, #28]
 8009602:	4413      	add	r3, r2
 8009604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009608:	461a      	mov	r2, r3
 800960a:	2320      	movs	r3, #32
 800960c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009614:	2b00      	cmp	r3, #0
 8009616:	d009      	beq.n	800962c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961a:	015a      	lsls	r2, r3, #5
 800961c:	69fb      	ldr	r3, [r7, #28]
 800961e:	4413      	add	r3, r2
 8009620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009624:	461a      	mov	r2, r3
 8009626:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800962a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800962c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962e:	3301      	adds	r3, #1
 8009630:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009634:	085b      	lsrs	r3, r3, #1
 8009636:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800963a:	2b00      	cmp	r3, #0
 800963c:	f47f af62 	bne.w	8009504 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4618      	mov	r0, r3
 8009646:	f00b fb4b 	bl	8014ce0 <USB_ReadInterrupts>
 800964a:	4603      	mov	r3, r0
 800964c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009650:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009654:	f040 80db 	bne.w	800980e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4618      	mov	r0, r3
 800965e:	f00b fb6c 	bl	8014d3a <USB_ReadDevAllInEpInterrupt>
 8009662:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009664:	2300      	movs	r3, #0
 8009666:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009668:	e0cd      	b.n	8009806 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800966a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800966c:	f003 0301 	and.w	r3, r3, #1
 8009670:	2b00      	cmp	r3, #0
 8009672:	f000 80c2 	beq.w	80097fa <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800967c:	b2d2      	uxtb	r2, r2
 800967e:	4611      	mov	r1, r2
 8009680:	4618      	mov	r0, r3
 8009682:	f00b fb92 	bl	8014daa <USB_ReadDevInEPInterrupt>
 8009686:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	f003 0301 	and.w	r3, r3, #1
 800968e:	2b00      	cmp	r3, #0
 8009690:	d057      	beq.n	8009742 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009694:	f003 030f 	and.w	r3, r3, #15
 8009698:	2201      	movs	r2, #1
 800969a:	fa02 f303 	lsl.w	r3, r2, r3
 800969e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80096a0:	69fb      	ldr	r3, [r7, #28]
 80096a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	43db      	mvns	r3, r3
 80096ac:	69f9      	ldr	r1, [r7, #28]
 80096ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096b2:	4013      	ands	r3, r2
 80096b4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80096b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b8:	015a      	lsls	r2, r3, #5
 80096ba:	69fb      	ldr	r3, [r7, #28]
 80096bc:	4413      	add	r3, r2
 80096be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096c2:	461a      	mov	r2, r3
 80096c4:	2301      	movs	r3, #1
 80096c6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	68db      	ldr	r3, [r3, #12]
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	d132      	bne.n	8009736 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80096d0:	6879      	ldr	r1, [r7, #4]
 80096d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096d4:	4613      	mov	r3, r2
 80096d6:	00db      	lsls	r3, r3, #3
 80096d8:	4413      	add	r3, r2
 80096da:	009b      	lsls	r3, r3, #2
 80096dc:	440b      	add	r3, r1
 80096de:	3348      	adds	r3, #72	; 0x48
 80096e0:	6819      	ldr	r1, [r3, #0]
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096e6:	4613      	mov	r3, r2
 80096e8:	00db      	lsls	r3, r3, #3
 80096ea:	4413      	add	r3, r2
 80096ec:	009b      	lsls	r3, r3, #2
 80096ee:	4403      	add	r3, r0
 80096f0:	3344      	adds	r3, #68	; 0x44
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4419      	add	r1, r3
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096fa:	4613      	mov	r3, r2
 80096fc:	00db      	lsls	r3, r3, #3
 80096fe:	4413      	add	r3, r2
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	4403      	add	r3, r0
 8009704:	3348      	adds	r3, #72	; 0x48
 8009706:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800970a:	2b00      	cmp	r3, #0
 800970c:	d113      	bne.n	8009736 <HAL_PCD_IRQHandler+0x3a2>
 800970e:	6879      	ldr	r1, [r7, #4]
 8009710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009712:	4613      	mov	r3, r2
 8009714:	00db      	lsls	r3, r3, #3
 8009716:	4413      	add	r3, r2
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	440b      	add	r3, r1
 800971c:	334c      	adds	r3, #76	; 0x4c
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d108      	bne.n	8009736 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6818      	ldr	r0, [r3, #0]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800972e:	461a      	mov	r2, r3
 8009730:	2101      	movs	r1, #1
 8009732:	f00b fb9b 	bl	8014e6c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009738:	b2db      	uxtb	r3, r3
 800973a:	4619      	mov	r1, r3
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f011 f884 	bl	801a84a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	f003 0308 	and.w	r3, r3, #8
 8009748:	2b00      	cmp	r3, #0
 800974a:	d008      	beq.n	800975e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800974c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974e:	015a      	lsls	r2, r3, #5
 8009750:	69fb      	ldr	r3, [r7, #28]
 8009752:	4413      	add	r3, r2
 8009754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009758:	461a      	mov	r2, r3
 800975a:	2308      	movs	r3, #8
 800975c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	f003 0310 	and.w	r3, r3, #16
 8009764:	2b00      	cmp	r3, #0
 8009766:	d008      	beq.n	800977a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976a:	015a      	lsls	r2, r3, #5
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	4413      	add	r3, r2
 8009770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009774:	461a      	mov	r2, r3
 8009776:	2310      	movs	r3, #16
 8009778:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009780:	2b00      	cmp	r3, #0
 8009782:	d008      	beq.n	8009796 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009786:	015a      	lsls	r2, r3, #5
 8009788:	69fb      	ldr	r3, [r7, #28]
 800978a:	4413      	add	r3, r2
 800978c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009790:	461a      	mov	r2, r3
 8009792:	2340      	movs	r3, #64	; 0x40
 8009794:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	f003 0302 	and.w	r3, r3, #2
 800979c:	2b00      	cmp	r3, #0
 800979e:	d023      	beq.n	80097e8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80097a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80097a2:	6a38      	ldr	r0, [r7, #32]
 80097a4:	f00a fb7a 	bl	8013e9c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80097a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097aa:	4613      	mov	r3, r2
 80097ac:	00db      	lsls	r3, r3, #3
 80097ae:	4413      	add	r3, r2
 80097b0:	009b      	lsls	r3, r3, #2
 80097b2:	3338      	adds	r3, #56	; 0x38
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	4413      	add	r3, r2
 80097b8:	3304      	adds	r3, #4
 80097ba:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	78db      	ldrb	r3, [r3, #3]
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d108      	bne.n	80097d6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	2200      	movs	r2, #0
 80097c8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80097ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097cc:	b2db      	uxtb	r3, r3
 80097ce:	4619      	mov	r1, r3
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f011 f8d1 	bl	801a978 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80097d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d8:	015a      	lsls	r2, r3, #5
 80097da:	69fb      	ldr	r3, [r7, #28]
 80097dc:	4413      	add	r3, r2
 80097de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097e2:	461a      	mov	r2, r3
 80097e4:	2302      	movs	r3, #2
 80097e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d003      	beq.n	80097fa <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80097f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f000 fcea 	bl	800a1ce <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80097fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fc:	3301      	adds	r3, #1
 80097fe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009802:	085b      	lsrs	r3, r3, #1
 8009804:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009808:	2b00      	cmp	r3, #0
 800980a:	f47f af2e 	bne.w	800966a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4618      	mov	r0, r3
 8009814:	f00b fa64 	bl	8014ce0 <USB_ReadInterrupts>
 8009818:	4603      	mov	r3, r0
 800981a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800981e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009822:	d122      	bne.n	800986a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009824:	69fb      	ldr	r3, [r7, #28]
 8009826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	69fa      	ldr	r2, [r7, #28]
 800982e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009832:	f023 0301 	bic.w	r3, r3, #1
 8009836:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800983e:	2b01      	cmp	r3, #1
 8009840:	d108      	bne.n	8009854 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2200      	movs	r2, #0
 8009846:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800984a:	2100      	movs	r1, #0
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 fef5 	bl	800a63c <HAL_PCDEx_LPM_Callback>
 8009852:	e002      	b.n	800985a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f011 f86f 	bl	801a938 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	695a      	ldr	r2, [r3, #20]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009868:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4618      	mov	r0, r3
 8009870:	f00b fa36 	bl	8014ce0 <USB_ReadInterrupts>
 8009874:	4603      	mov	r3, r0
 8009876:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800987a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800987e:	d112      	bne.n	80098a6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009880:	69fb      	ldr	r3, [r7, #28]
 8009882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009886:	689b      	ldr	r3, [r3, #8]
 8009888:	f003 0301 	and.w	r3, r3, #1
 800988c:	2b01      	cmp	r3, #1
 800988e:	d102      	bne.n	8009896 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f011 f82b 	bl	801a8ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	695a      	ldr	r2, [r3, #20]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80098a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4618      	mov	r0, r3
 80098ac:	f00b fa18 	bl	8014ce0 <USB_ReadInterrupts>
 80098b0:	4603      	mov	r3, r0
 80098b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80098ba:	d121      	bne.n	8009900 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	695a      	ldr	r2, [r3, #20]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80098ca:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d111      	bne.n	80098fa <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2201      	movs	r2, #1
 80098da:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098e4:	089b      	lsrs	r3, r3, #2
 80098e6:	f003 020f 	and.w	r2, r3, #15
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80098f0:	2101      	movs	r1, #1
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 fea2 	bl	800a63c <HAL_PCDEx_LPM_Callback>
 80098f8:	e002      	b.n	8009900 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f010 fff6 	bl	801a8ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4618      	mov	r0, r3
 8009906:	f00b f9eb 	bl	8014ce0 <USB_ReadInterrupts>
 800990a:	4603      	mov	r3, r0
 800990c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009914:	f040 80b7 	bne.w	8009a86 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009918:	69fb      	ldr	r3, [r7, #28]
 800991a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800991e:	685b      	ldr	r3, [r3, #4]
 8009920:	69fa      	ldr	r2, [r7, #28]
 8009922:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009926:	f023 0301 	bic.w	r3, r3, #1
 800992a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	2110      	movs	r1, #16
 8009932:	4618      	mov	r0, r3
 8009934:	f00a fab2 	bl	8013e9c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009938:	2300      	movs	r3, #0
 800993a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800993c:	e046      	b.n	80099cc <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800993e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009940:	015a      	lsls	r2, r3, #5
 8009942:	69fb      	ldr	r3, [r7, #28]
 8009944:	4413      	add	r3, r2
 8009946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800994a:	461a      	mov	r2, r3
 800994c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009950:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009954:	015a      	lsls	r2, r3, #5
 8009956:	69fb      	ldr	r3, [r7, #28]
 8009958:	4413      	add	r3, r2
 800995a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009962:	0151      	lsls	r1, r2, #5
 8009964:	69fa      	ldr	r2, [r7, #28]
 8009966:	440a      	add	r2, r1
 8009968:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800996c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009970:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009974:	015a      	lsls	r2, r3, #5
 8009976:	69fb      	ldr	r3, [r7, #28]
 8009978:	4413      	add	r3, r2
 800997a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800997e:	461a      	mov	r2, r3
 8009980:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009984:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009988:	015a      	lsls	r2, r3, #5
 800998a:	69fb      	ldr	r3, [r7, #28]
 800998c:	4413      	add	r3, r2
 800998e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009996:	0151      	lsls	r1, r2, #5
 8009998:	69fa      	ldr	r2, [r7, #28]
 800999a:	440a      	add	r2, r1
 800999c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80099a4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80099a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099a8:	015a      	lsls	r2, r3, #5
 80099aa:	69fb      	ldr	r3, [r7, #28]
 80099ac:	4413      	add	r3, r2
 80099ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099b6:	0151      	lsls	r1, r2, #5
 80099b8:	69fa      	ldr	r2, [r7, #28]
 80099ba:	440a      	add	r2, r1
 80099bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80099c4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80099c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c8:	3301      	adds	r3, #1
 80099ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d3b3      	bcc.n	800993e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80099d6:	69fb      	ldr	r3, [r7, #28]
 80099d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099dc:	69db      	ldr	r3, [r3, #28]
 80099de:	69fa      	ldr	r2, [r7, #28]
 80099e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80099e4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80099e8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d016      	beq.n	8009a20 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80099f2:	69fb      	ldr	r3, [r7, #28]
 80099f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099fc:	69fa      	ldr	r2, [r7, #28]
 80099fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a02:	f043 030b 	orr.w	r3, r3, #11
 8009a06:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009a0a:	69fb      	ldr	r3, [r7, #28]
 8009a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a12:	69fa      	ldr	r2, [r7, #28]
 8009a14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a18:	f043 030b 	orr.w	r3, r3, #11
 8009a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8009a1e:	e015      	b.n	8009a4c <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009a20:	69fb      	ldr	r3, [r7, #28]
 8009a22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a26:	695a      	ldr	r2, [r3, #20]
 8009a28:	69fb      	ldr	r3, [r7, #28]
 8009a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a2e:	4619      	mov	r1, r3
 8009a30:	f242 032b 	movw	r3, #8235	; 0x202b
 8009a34:	4313      	orrs	r3, r2
 8009a36:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009a38:	69fb      	ldr	r3, [r7, #28]
 8009a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a3e:	691b      	ldr	r3, [r3, #16]
 8009a40:	69fa      	ldr	r2, [r7, #28]
 8009a42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a46:	f043 030b 	orr.w	r3, r3, #11
 8009a4a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009a4c:	69fb      	ldr	r3, [r7, #28]
 8009a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	69fa      	ldr	r2, [r7, #28]
 8009a56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a5a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009a5e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6818      	ldr	r0, [r3, #0]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009a70:	461a      	mov	r2, r3
 8009a72:	f00b f9fb 	bl	8014e6c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	695a      	ldr	r2, [r3, #20]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009a84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f00b f928 	bl	8014ce0 <USB_ReadInterrupts>
 8009a90:	4603      	mov	r3, r0
 8009a92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a9a:	d124      	bne.n	8009ae6 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f00b f9bf 	bl	8014e24 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f00a fa73 	bl	8013f96 <USB_GetDevSpeed>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	461a      	mov	r2, r3
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681c      	ldr	r4, [r3, #0]
 8009abc:	f001 fd88 	bl	800b5d0 <HAL_RCC_GetHCLKFreq>
 8009ac0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	461a      	mov	r2, r3
 8009aca:	4620      	mov	r0, r4
 8009acc:	f009 ff78 	bl	80139c0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f010 fee2 	bl	801a89a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	695a      	ldr	r2, [r3, #20]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8009ae4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4618      	mov	r0, r3
 8009aec:	f00b f8f8 	bl	8014ce0 <USB_ReadInterrupts>
 8009af0:	4603      	mov	r3, r0
 8009af2:	f003 0308 	and.w	r3, r3, #8
 8009af6:	2b08      	cmp	r3, #8
 8009af8:	d10a      	bne.n	8009b10 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f010 febf 	bl	801a87e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	695a      	ldr	r2, [r3, #20]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f002 0208 	and.w	r2, r2, #8
 8009b0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4618      	mov	r0, r3
 8009b16:	f00b f8e3 	bl	8014ce0 <USB_ReadInterrupts>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b20:	2b80      	cmp	r3, #128	; 0x80
 8009b22:	d122      	bne.n	8009b6a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8009b24:	6a3b      	ldr	r3, [r7, #32]
 8009b26:	699b      	ldr	r3, [r3, #24]
 8009b28:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009b2c:	6a3b      	ldr	r3, [r7, #32]
 8009b2e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009b30:	2301      	movs	r3, #1
 8009b32:	627b      	str	r3, [r7, #36]	; 0x24
 8009b34:	e014      	b.n	8009b60 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8009b36:	6879      	ldr	r1, [r7, #4]
 8009b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b3a:	4613      	mov	r3, r2
 8009b3c:	00db      	lsls	r3, r3, #3
 8009b3e:	4413      	add	r3, r2
 8009b40:	009b      	lsls	r3, r3, #2
 8009b42:	440b      	add	r3, r1
 8009b44:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	2b01      	cmp	r3, #1
 8009b4c:	d105      	bne.n	8009b5a <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b50:	b2db      	uxtb	r3, r3
 8009b52:	4619      	mov	r1, r3
 8009b54:	6878      	ldr	r0, [r7, #4]
 8009b56:	f000 fb09 	bl	800a16c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5c:	3301      	adds	r3, #1
 8009b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d3e5      	bcc.n	8009b36 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f00b f8b6 	bl	8014ce0 <USB_ReadInterrupts>
 8009b74:	4603      	mov	r3, r0
 8009b76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009b7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b7e:	d13b      	bne.n	8009bf8 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009b80:	2301      	movs	r3, #1
 8009b82:	627b      	str	r3, [r7, #36]	; 0x24
 8009b84:	e02b      	b.n	8009bde <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8009b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b88:	015a      	lsls	r2, r3, #5
 8009b8a:	69fb      	ldr	r3, [r7, #28]
 8009b8c:	4413      	add	r3, r2
 8009b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009b96:	6879      	ldr	r1, [r7, #4]
 8009b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b9a:	4613      	mov	r3, r2
 8009b9c:	00db      	lsls	r3, r3, #3
 8009b9e:	4413      	add	r3, r2
 8009ba0:	009b      	lsls	r3, r3, #2
 8009ba2:	440b      	add	r3, r1
 8009ba4:	3340      	adds	r3, #64	; 0x40
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d115      	bne.n	8009bd8 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8009bac:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	da12      	bge.n	8009bd8 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009bb2:	6879      	ldr	r1, [r7, #4]
 8009bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bb6:	4613      	mov	r3, r2
 8009bb8:	00db      	lsls	r3, r3, #3
 8009bba:	4413      	add	r3, r2
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	440b      	add	r3, r1
 8009bc0:	333f      	adds	r3, #63	; 0x3f
 8009bc2:	2201      	movs	r2, #1
 8009bc4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8009bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc8:	b2db      	uxtb	r3, r3
 8009bca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009bce:	b2db      	uxtb	r3, r3
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f000 faca 	bl	800a16c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bda:	3301      	adds	r3, #1
 8009bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009be4:	429a      	cmp	r2, r3
 8009be6:	d3ce      	bcc.n	8009b86 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	695a      	ldr	r2, [r3, #20]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8009bf6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f00b f86f 	bl	8014ce0 <USB_ReadInterrupts>
 8009c02:	4603      	mov	r3, r0
 8009c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c0c:	d155      	bne.n	8009cba <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009c0e:	2301      	movs	r3, #1
 8009c10:	627b      	str	r3, [r7, #36]	; 0x24
 8009c12:	e045      	b.n	8009ca0 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8009c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c16:	015a      	lsls	r2, r3, #5
 8009c18:	69fb      	ldr	r3, [r7, #28]
 8009c1a:	4413      	add	r3, r2
 8009c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009c24:	6879      	ldr	r1, [r7, #4]
 8009c26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c28:	4613      	mov	r3, r2
 8009c2a:	00db      	lsls	r3, r3, #3
 8009c2c:	4413      	add	r3, r2
 8009c2e:	009b      	lsls	r3, r3, #2
 8009c30:	440b      	add	r3, r1
 8009c32:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009c36:	781b      	ldrb	r3, [r3, #0]
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d12e      	bne.n	8009c9a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009c3c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	da2b      	bge.n	8009c9a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8009c42:	69bb      	ldr	r3, [r7, #24]
 8009c44:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8009c4e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d121      	bne.n	8009c9a <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8009c56:	6879      	ldr	r1, [r7, #4]
 8009c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c5a:	4613      	mov	r3, r2
 8009c5c:	00db      	lsls	r3, r3, #3
 8009c5e:	4413      	add	r3, r2
 8009c60:	009b      	lsls	r3, r3, #2
 8009c62:	440b      	add	r3, r1
 8009c64:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8009c68:	2201      	movs	r2, #1
 8009c6a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8009c6c:	6a3b      	ldr	r3, [r7, #32]
 8009c6e:	699b      	ldr	r3, [r3, #24]
 8009c70:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009c74:	6a3b      	ldr	r3, [r7, #32]
 8009c76:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8009c78:	6a3b      	ldr	r3, [r7, #32]
 8009c7a:	695b      	ldr	r3, [r3, #20]
 8009c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d10a      	bne.n	8009c9a <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8009c84:	69fb      	ldr	r3, [r7, #28]
 8009c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	69fa      	ldr	r2, [r7, #28]
 8009c8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009c96:	6053      	str	r3, [r2, #4]
            break;
 8009c98:	e007      	b.n	8009caa <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9c:	3301      	adds	r3, #1
 8009c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d3b4      	bcc.n	8009c14 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	695a      	ldr	r2, [r3, #20]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8009cb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f00b f80e 	bl	8014ce0 <USB_ReadInterrupts>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cce:	d10a      	bne.n	8009ce6 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f010 fe63 	bl	801a99c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	695a      	ldr	r2, [r3, #20]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009ce4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4618      	mov	r0, r3
 8009cec:	f00a fff8 	bl	8014ce0 <USB_ReadInterrupts>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	f003 0304 	and.w	r3, r3, #4
 8009cf6:	2b04      	cmp	r3, #4
 8009cf8:	d115      	bne.n	8009d26 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	685b      	ldr	r3, [r3, #4]
 8009d00:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	f003 0304 	and.w	r3, r3, #4
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d002      	beq.n	8009d12 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009d0c:	6878      	ldr	r0, [r7, #4]
 8009d0e:	f010 fe53 	bl	801a9b8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	6859      	ldr	r1, [r3, #4]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	69ba      	ldr	r2, [r7, #24]
 8009d1e:	430a      	orrs	r2, r1
 8009d20:	605a      	str	r2, [r3, #4]
 8009d22:	e000      	b.n	8009d26 <HAL_PCD_IRQHandler+0x992>
      return;
 8009d24:	bf00      	nop
    }
  }
}
 8009d26:	3734      	adds	r7, #52	; 0x34
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd90      	pop	{r4, r7, pc}

08009d2c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b082      	sub	sp, #8
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	460b      	mov	r3, r1
 8009d36:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009d3e:	2b01      	cmp	r3, #1
 8009d40:	d101      	bne.n	8009d46 <HAL_PCD_SetAddress+0x1a>
 8009d42:	2302      	movs	r3, #2
 8009d44:	e013      	b.n	8009d6e <HAL_PCD_SetAddress+0x42>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2201      	movs	r2, #1
 8009d4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	78fa      	ldrb	r2, [r7, #3]
 8009d52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	78fa      	ldrb	r2, [r7, #3]
 8009d5c:	4611      	mov	r1, r2
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f00a ff56 	bl	8014c10 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2200      	movs	r2, #0
 8009d68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009d6c:	2300      	movs	r3, #0
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3708      	adds	r7, #8
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}

08009d76 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009d76:	b580      	push	{r7, lr}
 8009d78:	b084      	sub	sp, #16
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
 8009d7e:	4608      	mov	r0, r1
 8009d80:	4611      	mov	r1, r2
 8009d82:	461a      	mov	r2, r3
 8009d84:	4603      	mov	r3, r0
 8009d86:	70fb      	strb	r3, [r7, #3]
 8009d88:	460b      	mov	r3, r1
 8009d8a:	803b      	strh	r3, [r7, #0]
 8009d8c:	4613      	mov	r3, r2
 8009d8e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009d90:	2300      	movs	r3, #0
 8009d92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009d94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	da0f      	bge.n	8009dbc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009d9c:	78fb      	ldrb	r3, [r7, #3]
 8009d9e:	f003 020f 	and.w	r2, r3, #15
 8009da2:	4613      	mov	r3, r2
 8009da4:	00db      	lsls	r3, r3, #3
 8009da6:	4413      	add	r3, r2
 8009da8:	009b      	lsls	r3, r3, #2
 8009daa:	3338      	adds	r3, #56	; 0x38
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	4413      	add	r3, r2
 8009db0:	3304      	adds	r3, #4
 8009db2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2201      	movs	r2, #1
 8009db8:	705a      	strb	r2, [r3, #1]
 8009dba:	e00f      	b.n	8009ddc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009dbc:	78fb      	ldrb	r3, [r7, #3]
 8009dbe:	f003 020f 	and.w	r2, r3, #15
 8009dc2:	4613      	mov	r3, r2
 8009dc4:	00db      	lsls	r3, r3, #3
 8009dc6:	4413      	add	r3, r2
 8009dc8:	009b      	lsls	r3, r3, #2
 8009dca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	4413      	add	r3, r2
 8009dd2:	3304      	adds	r3, #4
 8009dd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009ddc:	78fb      	ldrb	r3, [r7, #3]
 8009dde:	f003 030f 	and.w	r3, r3, #15
 8009de2:	b2da      	uxtb	r2, r3
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009de8:	883a      	ldrh	r2, [r7, #0]
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	78ba      	ldrb	r2, [r7, #2]
 8009df2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	785b      	ldrb	r3, [r3, #1]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d004      	beq.n	8009e06 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	781b      	ldrb	r3, [r3, #0]
 8009e00:	b29a      	uxth	r2, r3
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009e06:	78bb      	ldrb	r3, [r7, #2]
 8009e08:	2b02      	cmp	r3, #2
 8009e0a:	d102      	bne.n	8009e12 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	d101      	bne.n	8009e20 <HAL_PCD_EP_Open+0xaa>
 8009e1c:	2302      	movs	r3, #2
 8009e1e:	e00e      	b.n	8009e3e <HAL_PCD_EP_Open+0xc8>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2201      	movs	r2, #1
 8009e24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	68f9      	ldr	r1, [r7, #12]
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f00a f8d6 	bl	8013fe0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2200      	movs	r2, #0
 8009e38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8009e3c:	7afb      	ldrb	r3, [r7, #11]
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3710      	adds	r7, #16
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}

08009e46 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009e46:	b580      	push	{r7, lr}
 8009e48:	b084      	sub	sp, #16
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	6078      	str	r0, [r7, #4]
 8009e4e:	460b      	mov	r3, r1
 8009e50:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009e52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	da0f      	bge.n	8009e7a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009e5a:	78fb      	ldrb	r3, [r7, #3]
 8009e5c:	f003 020f 	and.w	r2, r3, #15
 8009e60:	4613      	mov	r3, r2
 8009e62:	00db      	lsls	r3, r3, #3
 8009e64:	4413      	add	r3, r2
 8009e66:	009b      	lsls	r3, r3, #2
 8009e68:	3338      	adds	r3, #56	; 0x38
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	4413      	add	r3, r2
 8009e6e:	3304      	adds	r3, #4
 8009e70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	2201      	movs	r2, #1
 8009e76:	705a      	strb	r2, [r3, #1]
 8009e78:	e00f      	b.n	8009e9a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009e7a:	78fb      	ldrb	r3, [r7, #3]
 8009e7c:	f003 020f 	and.w	r2, r3, #15
 8009e80:	4613      	mov	r3, r2
 8009e82:	00db      	lsls	r3, r3, #3
 8009e84:	4413      	add	r3, r2
 8009e86:	009b      	lsls	r3, r3, #2
 8009e88:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	4413      	add	r3, r2
 8009e90:	3304      	adds	r3, #4
 8009e92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2200      	movs	r2, #0
 8009e98:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8009e9a:	78fb      	ldrb	r3, [r7, #3]
 8009e9c:	f003 030f 	and.w	r3, r3, #15
 8009ea0:	b2da      	uxtb	r2, r3
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009eac:	2b01      	cmp	r3, #1
 8009eae:	d101      	bne.n	8009eb4 <HAL_PCD_EP_Close+0x6e>
 8009eb0:	2302      	movs	r3, #2
 8009eb2:	e00e      	b.n	8009ed2 <HAL_PCD_EP_Close+0x8c>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	68f9      	ldr	r1, [r7, #12]
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f00a f914 	bl	80140f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8009ed0:	2300      	movs	r3, #0
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3710      	adds	r7, #16
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}

08009eda <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009eda:	b580      	push	{r7, lr}
 8009edc:	b086      	sub	sp, #24
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	60f8      	str	r0, [r7, #12]
 8009ee2:	607a      	str	r2, [r7, #4]
 8009ee4:	603b      	str	r3, [r7, #0]
 8009ee6:	460b      	mov	r3, r1
 8009ee8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009eea:	7afb      	ldrb	r3, [r7, #11]
 8009eec:	f003 020f 	and.w	r2, r3, #15
 8009ef0:	4613      	mov	r3, r2
 8009ef2:	00db      	lsls	r3, r3, #3
 8009ef4:	4413      	add	r3, r2
 8009ef6:	009b      	lsls	r3, r3, #2
 8009ef8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009efc:	68fa      	ldr	r2, [r7, #12]
 8009efe:	4413      	add	r3, r2
 8009f00:	3304      	adds	r3, #4
 8009f02:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	683a      	ldr	r2, [r7, #0]
 8009f0e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	2200      	movs	r2, #0
 8009f14:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009f1c:	7afb      	ldrb	r3, [r7, #11]
 8009f1e:	f003 030f 	and.w	r3, r3, #15
 8009f22:	b2da      	uxtb	r2, r3
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	68db      	ldr	r3, [r3, #12]
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d102      	bne.n	8009f36 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009f30:	687a      	ldr	r2, [r7, #4]
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	6818      	ldr	r0, [r3, #0]
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	68db      	ldr	r3, [r3, #12]
 8009f3e:	b2db      	uxtb	r3, r3
 8009f40:	461a      	mov	r2, r3
 8009f42:	6979      	ldr	r1, [r7, #20]
 8009f44:	f00a f9b0 	bl	80142a8 <USB_EPStartXfer>

  return HAL_OK;
 8009f48:	2300      	movs	r3, #0
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3718      	adds	r7, #24
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}

08009f52 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009f52:	b480      	push	{r7}
 8009f54:	b083      	sub	sp, #12
 8009f56:	af00      	add	r7, sp, #0
 8009f58:	6078      	str	r0, [r7, #4]
 8009f5a:	460b      	mov	r3, r1
 8009f5c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009f5e:	78fb      	ldrb	r3, [r7, #3]
 8009f60:	f003 020f 	and.w	r2, r3, #15
 8009f64:	6879      	ldr	r1, [r7, #4]
 8009f66:	4613      	mov	r3, r2
 8009f68:	00db      	lsls	r3, r3, #3
 8009f6a:	4413      	add	r3, r2
 8009f6c:	009b      	lsls	r3, r3, #2
 8009f6e:	440b      	add	r3, r1
 8009f70:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8009f74:	681b      	ldr	r3, [r3, #0]
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	370c      	adds	r7, #12
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr

08009f82 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009f82:	b580      	push	{r7, lr}
 8009f84:	b086      	sub	sp, #24
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	60f8      	str	r0, [r7, #12]
 8009f8a:	607a      	str	r2, [r7, #4]
 8009f8c:	603b      	str	r3, [r7, #0]
 8009f8e:	460b      	mov	r3, r1
 8009f90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009f92:	7afb      	ldrb	r3, [r7, #11]
 8009f94:	f003 020f 	and.w	r2, r3, #15
 8009f98:	4613      	mov	r3, r2
 8009f9a:	00db      	lsls	r3, r3, #3
 8009f9c:	4413      	add	r3, r2
 8009f9e:	009b      	lsls	r3, r3, #2
 8009fa0:	3338      	adds	r3, #56	; 0x38
 8009fa2:	68fa      	ldr	r2, [r7, #12]
 8009fa4:	4413      	add	r3, r2
 8009fa6:	3304      	adds	r3, #4
 8009fa8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	687a      	ldr	r2, [r7, #4]
 8009fae:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	683a      	ldr	r2, [r7, #0]
 8009fb4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009fc2:	7afb      	ldrb	r3, [r7, #11]
 8009fc4:	f003 030f 	and.w	r3, r3, #15
 8009fc8:	b2da      	uxtb	r2, r3
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	68db      	ldr	r3, [r3, #12]
 8009fd2:	2b01      	cmp	r3, #1
 8009fd4:	d102      	bne.n	8009fdc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	6818      	ldr	r0, [r3, #0]
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	68db      	ldr	r3, [r3, #12]
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	6979      	ldr	r1, [r7, #20]
 8009fea:	f00a f95d 	bl	80142a8 <USB_EPStartXfer>

  return HAL_OK;
 8009fee:	2300      	movs	r3, #0
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	3718      	adds	r7, #24
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}

08009ff8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	460b      	mov	r3, r1
 800a002:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a004:	78fb      	ldrb	r3, [r7, #3]
 800a006:	f003 020f 	and.w	r2, r3, #15
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	685b      	ldr	r3, [r3, #4]
 800a00e:	429a      	cmp	r2, r3
 800a010:	d901      	bls.n	800a016 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a012:	2301      	movs	r3, #1
 800a014:	e050      	b.n	800a0b8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a016:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	da0f      	bge.n	800a03e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a01e:	78fb      	ldrb	r3, [r7, #3]
 800a020:	f003 020f 	and.w	r2, r3, #15
 800a024:	4613      	mov	r3, r2
 800a026:	00db      	lsls	r3, r3, #3
 800a028:	4413      	add	r3, r2
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	3338      	adds	r3, #56	; 0x38
 800a02e:	687a      	ldr	r2, [r7, #4]
 800a030:	4413      	add	r3, r2
 800a032:	3304      	adds	r3, #4
 800a034:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2201      	movs	r2, #1
 800a03a:	705a      	strb	r2, [r3, #1]
 800a03c:	e00d      	b.n	800a05a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a03e:	78fa      	ldrb	r2, [r7, #3]
 800a040:	4613      	mov	r3, r2
 800a042:	00db      	lsls	r3, r3, #3
 800a044:	4413      	add	r3, r2
 800a046:	009b      	lsls	r3, r3, #2
 800a048:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a04c:	687a      	ldr	r2, [r7, #4]
 800a04e:	4413      	add	r3, r2
 800a050:	3304      	adds	r3, #4
 800a052:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2200      	movs	r2, #0
 800a058:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2201      	movs	r2, #1
 800a05e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a060:	78fb      	ldrb	r3, [r7, #3]
 800a062:	f003 030f 	and.w	r3, r3, #15
 800a066:	b2da      	uxtb	r2, r3
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a072:	2b01      	cmp	r3, #1
 800a074:	d101      	bne.n	800a07a <HAL_PCD_EP_SetStall+0x82>
 800a076:	2302      	movs	r3, #2
 800a078:	e01e      	b.n	800a0b8 <HAL_PCD_EP_SetStall+0xc0>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2201      	movs	r2, #1
 800a07e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	68f9      	ldr	r1, [r7, #12]
 800a088:	4618      	mov	r0, r3
 800a08a:	f00a fced 	bl	8014a68 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a08e:	78fb      	ldrb	r3, [r7, #3]
 800a090:	f003 030f 	and.w	r3, r3, #15
 800a094:	2b00      	cmp	r3, #0
 800a096:	d10a      	bne.n	800a0ae <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6818      	ldr	r0, [r3, #0]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	68db      	ldr	r3, [r3, #12]
 800a0a0:	b2d9      	uxtb	r1, r3
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a0a8:	461a      	mov	r2, r3
 800a0aa:	f00a fedf 	bl	8014e6c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a0b6:	2300      	movs	r3, #0
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3710      	adds	r7, #16
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b084      	sub	sp, #16
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a0cc:	78fb      	ldrb	r3, [r7, #3]
 800a0ce:	f003 020f 	and.w	r2, r3, #15
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d901      	bls.n	800a0de <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	e042      	b.n	800a164 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a0de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	da0f      	bge.n	800a106 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a0e6:	78fb      	ldrb	r3, [r7, #3]
 800a0e8:	f003 020f 	and.w	r2, r3, #15
 800a0ec:	4613      	mov	r3, r2
 800a0ee:	00db      	lsls	r3, r3, #3
 800a0f0:	4413      	add	r3, r2
 800a0f2:	009b      	lsls	r3, r3, #2
 800a0f4:	3338      	adds	r3, #56	; 0x38
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	4413      	add	r3, r2
 800a0fa:	3304      	adds	r3, #4
 800a0fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2201      	movs	r2, #1
 800a102:	705a      	strb	r2, [r3, #1]
 800a104:	e00f      	b.n	800a126 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a106:	78fb      	ldrb	r3, [r7, #3]
 800a108:	f003 020f 	and.w	r2, r3, #15
 800a10c:	4613      	mov	r3, r2
 800a10e:	00db      	lsls	r3, r3, #3
 800a110:	4413      	add	r3, r2
 800a112:	009b      	lsls	r3, r3, #2
 800a114:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a118:	687a      	ldr	r2, [r7, #4]
 800a11a:	4413      	add	r3, r2
 800a11c:	3304      	adds	r3, #4
 800a11e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2200      	movs	r2, #0
 800a124:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2200      	movs	r2, #0
 800a12a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a12c:	78fb      	ldrb	r3, [r7, #3]
 800a12e:	f003 030f 	and.w	r3, r3, #15
 800a132:	b2da      	uxtb	r2, r3
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d101      	bne.n	800a146 <HAL_PCD_EP_ClrStall+0x86>
 800a142:	2302      	movs	r3, #2
 800a144:	e00e      	b.n	800a164 <HAL_PCD_EP_ClrStall+0xa4>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2201      	movs	r2, #1
 800a14a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	68f9      	ldr	r1, [r7, #12]
 800a154:	4618      	mov	r0, r3
 800a156:	f00a fcf5 	bl	8014b44 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2200      	movs	r2, #0
 800a15e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a162:	2300      	movs	r3, #0
}
 800a164:	4618      	mov	r0, r3
 800a166:	3710      	adds	r7, #16
 800a168:	46bd      	mov	sp, r7
 800a16a:	bd80      	pop	{r7, pc}

0800a16c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
 800a174:	460b      	mov	r3, r1
 800a176:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800a178:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	da0c      	bge.n	800a19a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a180:	78fb      	ldrb	r3, [r7, #3]
 800a182:	f003 020f 	and.w	r2, r3, #15
 800a186:	4613      	mov	r3, r2
 800a188:	00db      	lsls	r3, r3, #3
 800a18a:	4413      	add	r3, r2
 800a18c:	009b      	lsls	r3, r3, #2
 800a18e:	3338      	adds	r3, #56	; 0x38
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	4413      	add	r3, r2
 800a194:	3304      	adds	r3, #4
 800a196:	60fb      	str	r3, [r7, #12]
 800a198:	e00c      	b.n	800a1b4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a19a:	78fb      	ldrb	r3, [r7, #3]
 800a19c:	f003 020f 	and.w	r2, r3, #15
 800a1a0:	4613      	mov	r3, r2
 800a1a2:	00db      	lsls	r3, r3, #3
 800a1a4:	4413      	add	r3, r2
 800a1a6:	009b      	lsls	r3, r3, #2
 800a1a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a1ac:	687a      	ldr	r2, [r7, #4]
 800a1ae:	4413      	add	r3, r2
 800a1b0:	3304      	adds	r3, #4
 800a1b2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	68f9      	ldr	r1, [r7, #12]
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f00a fb14 	bl	80147e8 <USB_EPStopXfer>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	72fb      	strb	r3, [r7, #11]

  return ret;
 800a1c4:	7afb      	ldrb	r3, [r7, #11]
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3710      	adds	r7, #16
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}

0800a1ce <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a1ce:	b580      	push	{r7, lr}
 800a1d0:	b08a      	sub	sp, #40	; 0x28
 800a1d2:	af02      	add	r7, sp, #8
 800a1d4:	6078      	str	r0, [r7, #4]
 800a1d6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a1e2:	683a      	ldr	r2, [r7, #0]
 800a1e4:	4613      	mov	r3, r2
 800a1e6:	00db      	lsls	r3, r3, #3
 800a1e8:	4413      	add	r3, r2
 800a1ea:	009b      	lsls	r3, r3, #2
 800a1ec:	3338      	adds	r3, #56	; 0x38
 800a1ee:	687a      	ldr	r2, [r7, #4]
 800a1f0:	4413      	add	r3, r2
 800a1f2:	3304      	adds	r3, #4
 800a1f4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	695a      	ldr	r2, [r3, #20]
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	691b      	ldr	r3, [r3, #16]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d901      	bls.n	800a206 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a202:	2301      	movs	r3, #1
 800a204:	e06c      	b.n	800a2e0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	691a      	ldr	r2, [r3, #16]
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	695b      	ldr	r3, [r3, #20]
 800a20e:	1ad3      	subs	r3, r2, r3
 800a210:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	689b      	ldr	r3, [r3, #8]
 800a216:	69fa      	ldr	r2, [r7, #28]
 800a218:	429a      	cmp	r2, r3
 800a21a:	d902      	bls.n	800a222 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	689b      	ldr	r3, [r3, #8]
 800a220:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a222:	69fb      	ldr	r3, [r7, #28]
 800a224:	3303      	adds	r3, #3
 800a226:	089b      	lsrs	r3, r3, #2
 800a228:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a22a:	e02b      	b.n	800a284 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	691a      	ldr	r2, [r3, #16]
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	695b      	ldr	r3, [r3, #20]
 800a234:	1ad3      	subs	r3, r2, r3
 800a236:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	689b      	ldr	r3, [r3, #8]
 800a23c:	69fa      	ldr	r2, [r7, #28]
 800a23e:	429a      	cmp	r2, r3
 800a240:	d902      	bls.n	800a248 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	689b      	ldr	r3, [r3, #8]
 800a246:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a248:	69fb      	ldr	r3, [r7, #28]
 800a24a:	3303      	adds	r3, #3
 800a24c:	089b      	lsrs	r3, r3, #2
 800a24e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	68d9      	ldr	r1, [r3, #12]
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	b2da      	uxtb	r2, r3
 800a258:	69fb      	ldr	r3, [r7, #28]
 800a25a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a260:	b2db      	uxtb	r3, r3
 800a262:	9300      	str	r3, [sp, #0]
 800a264:	4603      	mov	r3, r0
 800a266:	6978      	ldr	r0, [r7, #20]
 800a268:	f00a fb68 	bl	801493c <USB_WritePacket>

    ep->xfer_buff  += len;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	68da      	ldr	r2, [r3, #12]
 800a270:	69fb      	ldr	r3, [r7, #28]
 800a272:	441a      	add	r2, r3
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	695a      	ldr	r2, [r3, #20]
 800a27c:	69fb      	ldr	r3, [r7, #28]
 800a27e:	441a      	add	r2, r3
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	015a      	lsls	r2, r3, #5
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	4413      	add	r3, r2
 800a28c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a290:	699b      	ldr	r3, [r3, #24]
 800a292:	b29b      	uxth	r3, r3
 800a294:	69ba      	ldr	r2, [r7, #24]
 800a296:	429a      	cmp	r2, r3
 800a298:	d809      	bhi.n	800a2ae <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	695a      	ldr	r2, [r3, #20]
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a2a2:	429a      	cmp	r2, r3
 800a2a4:	d203      	bcs.n	800a2ae <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	691b      	ldr	r3, [r3, #16]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d1be      	bne.n	800a22c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	691a      	ldr	r2, [r3, #16]
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	695b      	ldr	r3, [r3, #20]
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d811      	bhi.n	800a2de <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	f003 030f 	and.w	r3, r3, #15
 800a2c0:	2201      	movs	r2, #1
 800a2c2:	fa02 f303 	lsl.w	r3, r2, r3
 800a2c6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	43db      	mvns	r3, r3
 800a2d4:	6939      	ldr	r1, [r7, #16]
 800a2d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a2da:	4013      	ands	r3, r2
 800a2dc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a2de:	2300      	movs	r3, #0
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3720      	adds	r7, #32
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b088      	sub	sp, #32
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2f8:	69fb      	ldr	r3, [r7, #28]
 800a2fa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a2fc:	69fb      	ldr	r3, [r7, #28]
 800a2fe:	333c      	adds	r3, #60	; 0x3c
 800a300:	3304      	adds	r3, #4
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	015a      	lsls	r2, r3, #5
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	4413      	add	r3, r2
 800a30e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a312:	689b      	ldr	r3, [r3, #8]
 800a314:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	68db      	ldr	r3, [r3, #12]
 800a31a:	2b01      	cmp	r3, #1
 800a31c:	d17b      	bne.n	800a416 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	f003 0308 	and.w	r3, r3, #8
 800a324:	2b00      	cmp	r3, #0
 800a326:	d015      	beq.n	800a354 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	4a61      	ldr	r2, [pc, #388]	; (800a4b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	f240 80b9 	bls.w	800a4a4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a338:	2b00      	cmp	r3, #0
 800a33a:	f000 80b3 	beq.w	800a4a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	015a      	lsls	r2, r3, #5
 800a342:	69bb      	ldr	r3, [r7, #24]
 800a344:	4413      	add	r3, r2
 800a346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a34a:	461a      	mov	r2, r3
 800a34c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a350:	6093      	str	r3, [r2, #8]
 800a352:	e0a7      	b.n	800a4a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	f003 0320 	and.w	r3, r3, #32
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d009      	beq.n	800a372 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	015a      	lsls	r2, r3, #5
 800a362:	69bb      	ldr	r3, [r7, #24]
 800a364:	4413      	add	r3, r2
 800a366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a36a:	461a      	mov	r2, r3
 800a36c:	2320      	movs	r3, #32
 800a36e:	6093      	str	r3, [r2, #8]
 800a370:	e098      	b.n	800a4a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a372:	693b      	ldr	r3, [r7, #16]
 800a374:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a378:	2b00      	cmp	r3, #0
 800a37a:	f040 8093 	bne.w	800a4a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	4a4b      	ldr	r2, [pc, #300]	; (800a4b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d90f      	bls.n	800a3a6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a386:	693b      	ldr	r3, [r7, #16]
 800a388:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d00a      	beq.n	800a3a6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	015a      	lsls	r2, r3, #5
 800a394:	69bb      	ldr	r3, [r7, #24]
 800a396:	4413      	add	r3, r2
 800a398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a39c:	461a      	mov	r2, r3
 800a39e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3a2:	6093      	str	r3, [r2, #8]
 800a3a4:	e07e      	b.n	800a4a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800a3a6:	683a      	ldr	r2, [r7, #0]
 800a3a8:	4613      	mov	r3, r2
 800a3aa:	00db      	lsls	r3, r3, #3
 800a3ac:	4413      	add	r3, r2
 800a3ae:	009b      	lsls	r3, r3, #2
 800a3b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a3b4:	687a      	ldr	r2, [r7, #4]
 800a3b6:	4413      	add	r3, r2
 800a3b8:	3304      	adds	r3, #4
 800a3ba:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	6a1a      	ldr	r2, [r3, #32]
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	0159      	lsls	r1, r3, #5
 800a3c4:	69bb      	ldr	r3, [r7, #24]
 800a3c6:	440b      	add	r3, r1
 800a3c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3cc:	691b      	ldr	r3, [r3, #16]
 800a3ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a3d2:	1ad2      	subs	r2, r2, r3
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d114      	bne.n	800a408 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	691b      	ldr	r3, [r3, #16]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d109      	bne.n	800a3fa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6818      	ldr	r0, [r3, #0]
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a3f0:	461a      	mov	r2, r3
 800a3f2:	2101      	movs	r1, #1
 800a3f4:	f00a fd3a 	bl	8014e6c <USB_EP0_OutStart>
 800a3f8:	e006      	b.n	800a408 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	68da      	ldr	r2, [r3, #12]
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	695b      	ldr	r3, [r3, #20]
 800a402:	441a      	add	r2, r3
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	b2db      	uxtb	r3, r3
 800a40c:	4619      	mov	r1, r3
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f010 fa00 	bl	801a814 <HAL_PCD_DataOutStageCallback>
 800a414:	e046      	b.n	800a4a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	4a26      	ldr	r2, [pc, #152]	; (800a4b4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d124      	bne.n	800a468 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a41e:	693b      	ldr	r3, [r7, #16]
 800a420:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a424:	2b00      	cmp	r3, #0
 800a426:	d00a      	beq.n	800a43e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	015a      	lsls	r2, r3, #5
 800a42c:	69bb      	ldr	r3, [r7, #24]
 800a42e:	4413      	add	r3, r2
 800a430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a434:	461a      	mov	r2, r3
 800a436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a43a:	6093      	str	r3, [r2, #8]
 800a43c:	e032      	b.n	800a4a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	f003 0320 	and.w	r3, r3, #32
 800a444:	2b00      	cmp	r3, #0
 800a446:	d008      	beq.n	800a45a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	015a      	lsls	r2, r3, #5
 800a44c:	69bb      	ldr	r3, [r7, #24]
 800a44e:	4413      	add	r3, r2
 800a450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a454:	461a      	mov	r2, r3
 800a456:	2320      	movs	r3, #32
 800a458:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	b2db      	uxtb	r3, r3
 800a45e:	4619      	mov	r1, r3
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f010 f9d7 	bl	801a814 <HAL_PCD_DataOutStageCallback>
 800a466:	e01d      	b.n	800a4a4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d114      	bne.n	800a498 <PCD_EP_OutXfrComplete_int+0x1b0>
 800a46e:	6879      	ldr	r1, [r7, #4]
 800a470:	683a      	ldr	r2, [r7, #0]
 800a472:	4613      	mov	r3, r2
 800a474:	00db      	lsls	r3, r3, #3
 800a476:	4413      	add	r3, r2
 800a478:	009b      	lsls	r3, r3, #2
 800a47a:	440b      	add	r3, r1
 800a47c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d108      	bne.n	800a498 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6818      	ldr	r0, [r3, #0]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a490:	461a      	mov	r2, r3
 800a492:	2100      	movs	r1, #0
 800a494:	f00a fcea 	bl	8014e6c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	b2db      	uxtb	r3, r3
 800a49c:	4619      	mov	r1, r3
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f010 f9b8 	bl	801a814 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800a4a4:	2300      	movs	r3, #0
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3720      	adds	r7, #32
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
 800a4ae:	bf00      	nop
 800a4b0:	4f54300a 	.word	0x4f54300a
 800a4b4:	4f54310a 	.word	0x4f54310a

0800a4b8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b086      	sub	sp, #24
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	333c      	adds	r3, #60	; 0x3c
 800a4d0:	3304      	adds	r3, #4
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	015a      	lsls	r2, r3, #5
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	4413      	add	r3, r2
 800a4de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4e2:	689b      	ldr	r3, [r3, #8]
 800a4e4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	4a15      	ldr	r2, [pc, #84]	; (800a540 <PCD_EP_OutSetupPacket_int+0x88>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d90e      	bls.n	800a50c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d009      	beq.n	800a50c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	015a      	lsls	r2, r3, #5
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	4413      	add	r3, r2
 800a500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a504:	461a      	mov	r2, r3
 800a506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a50a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f010 f96f 	bl	801a7f0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	4a0a      	ldr	r2, [pc, #40]	; (800a540 <PCD_EP_OutSetupPacket_int+0x88>)
 800a516:	4293      	cmp	r3, r2
 800a518:	d90c      	bls.n	800a534 <PCD_EP_OutSetupPacket_int+0x7c>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	68db      	ldr	r3, [r3, #12]
 800a51e:	2b01      	cmp	r3, #1
 800a520:	d108      	bne.n	800a534 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6818      	ldr	r0, [r3, #0]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a52c:	461a      	mov	r2, r3
 800a52e:	2101      	movs	r1, #1
 800a530:	f00a fc9c 	bl	8014e6c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800a534:	2300      	movs	r3, #0
}
 800a536:	4618      	mov	r0, r3
 800a538:	3718      	adds	r7, #24
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}
 800a53e:	bf00      	nop
 800a540:	4f54300a 	.word	0x4f54300a

0800a544 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a544:	b480      	push	{r7}
 800a546:	b085      	sub	sp, #20
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	460b      	mov	r3, r1
 800a54e:	70fb      	strb	r3, [r7, #3]
 800a550:	4613      	mov	r3, r2
 800a552:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a55a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a55c:	78fb      	ldrb	r3, [r7, #3]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d107      	bne.n	800a572 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a562:	883b      	ldrh	r3, [r7, #0]
 800a564:	0419      	lsls	r1, r3, #16
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	68ba      	ldr	r2, [r7, #8]
 800a56c:	430a      	orrs	r2, r1
 800a56e:	629a      	str	r2, [r3, #40]	; 0x28
 800a570:	e028      	b.n	800a5c4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a578:	0c1b      	lsrs	r3, r3, #16
 800a57a:	68ba      	ldr	r2, [r7, #8]
 800a57c:	4413      	add	r3, r2
 800a57e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a580:	2300      	movs	r3, #0
 800a582:	73fb      	strb	r3, [r7, #15]
 800a584:	e00d      	b.n	800a5a2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681a      	ldr	r2, [r3, #0]
 800a58a:	7bfb      	ldrb	r3, [r7, #15]
 800a58c:	3340      	adds	r3, #64	; 0x40
 800a58e:	009b      	lsls	r3, r3, #2
 800a590:	4413      	add	r3, r2
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	0c1b      	lsrs	r3, r3, #16
 800a596:	68ba      	ldr	r2, [r7, #8]
 800a598:	4413      	add	r3, r2
 800a59a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a59c:	7bfb      	ldrb	r3, [r7, #15]
 800a59e:	3301      	adds	r3, #1
 800a5a0:	73fb      	strb	r3, [r7, #15]
 800a5a2:	7bfa      	ldrb	r2, [r7, #15]
 800a5a4:	78fb      	ldrb	r3, [r7, #3]
 800a5a6:	3b01      	subs	r3, #1
 800a5a8:	429a      	cmp	r2, r3
 800a5aa:	d3ec      	bcc.n	800a586 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a5ac:	883b      	ldrh	r3, [r7, #0]
 800a5ae:	0418      	lsls	r0, r3, #16
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6819      	ldr	r1, [r3, #0]
 800a5b4:	78fb      	ldrb	r3, [r7, #3]
 800a5b6:	3b01      	subs	r3, #1
 800a5b8:	68ba      	ldr	r2, [r7, #8]
 800a5ba:	4302      	orrs	r2, r0
 800a5bc:	3340      	adds	r3, #64	; 0x40
 800a5be:	009b      	lsls	r3, r3, #2
 800a5c0:	440b      	add	r3, r1
 800a5c2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a5c4:	2300      	movs	r3, #0
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3714      	adds	r7, #20
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d0:	4770      	bx	lr

0800a5d2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a5d2:	b480      	push	{r7}
 800a5d4:	b083      	sub	sp, #12
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
 800a5da:	460b      	mov	r3, r1
 800a5dc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	887a      	ldrh	r2, [r7, #2]
 800a5e4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a5e6:	2300      	movs	r3, #0
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	370c      	adds	r7, #12
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr

0800a5f4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b085      	sub	sp, #20
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2201      	movs	r2, #1
 800a606:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2200      	movs	r2, #0
 800a60e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	699b      	ldr	r3, [r3, #24]
 800a616:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a622:	4b05      	ldr	r3, [pc, #20]	; (800a638 <HAL_PCDEx_ActivateLPM+0x44>)
 800a624:	4313      	orrs	r3, r2
 800a626:	68fa      	ldr	r2, [r7, #12]
 800a628:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800a62a:	2300      	movs	r3, #0
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3714      	adds	r7, #20
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr
 800a638:	10000003 	.word	0x10000003

0800a63c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b083      	sub	sp, #12
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	460b      	mov	r3, r1
 800a646:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800a648:	bf00      	nop
 800a64a:	370c      	adds	r7, #12
 800a64c:	46bd      	mov	sp, r7
 800a64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a652:	4770      	bx	lr

0800a654 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b084      	sub	sp, #16
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a65c:	4b19      	ldr	r3, [pc, #100]	; (800a6c4 <HAL_PWREx_ConfigSupply+0x70>)
 800a65e:	68db      	ldr	r3, [r3, #12]
 800a660:	f003 0304 	and.w	r3, r3, #4
 800a664:	2b04      	cmp	r3, #4
 800a666:	d00a      	beq.n	800a67e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a668:	4b16      	ldr	r3, [pc, #88]	; (800a6c4 <HAL_PWREx_ConfigSupply+0x70>)
 800a66a:	68db      	ldr	r3, [r3, #12]
 800a66c:	f003 0307 	and.w	r3, r3, #7
 800a670:	687a      	ldr	r2, [r7, #4]
 800a672:	429a      	cmp	r2, r3
 800a674:	d001      	beq.n	800a67a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a676:	2301      	movs	r3, #1
 800a678:	e01f      	b.n	800a6ba <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a67a:	2300      	movs	r3, #0
 800a67c:	e01d      	b.n	800a6ba <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a67e:	4b11      	ldr	r3, [pc, #68]	; (800a6c4 <HAL_PWREx_ConfigSupply+0x70>)
 800a680:	68db      	ldr	r3, [r3, #12]
 800a682:	f023 0207 	bic.w	r2, r3, #7
 800a686:	490f      	ldr	r1, [pc, #60]	; (800a6c4 <HAL_PWREx_ConfigSupply+0x70>)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	4313      	orrs	r3, r2
 800a68c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a68e:	f7f9 fcc1 	bl	8004014 <HAL_GetTick>
 800a692:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a694:	e009      	b.n	800a6aa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a696:	f7f9 fcbd 	bl	8004014 <HAL_GetTick>
 800a69a:	4602      	mov	r2, r0
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	1ad3      	subs	r3, r2, r3
 800a6a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a6a4:	d901      	bls.n	800a6aa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e007      	b.n	800a6ba <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a6aa:	4b06      	ldr	r3, [pc, #24]	; (800a6c4 <HAL_PWREx_ConfigSupply+0x70>)
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a6b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6b6:	d1ee      	bne.n	800a696 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a6b8:	2300      	movs	r3, #0
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3710      	adds	r7, #16
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}
 800a6c2:	bf00      	nop
 800a6c4:	58024800 	.word	0x58024800

0800a6c8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800a6cc:	4b05      	ldr	r3, [pc, #20]	; (800a6e4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a6ce:	68db      	ldr	r3, [r3, #12]
 800a6d0:	4a04      	ldr	r2, [pc, #16]	; (800a6e4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a6d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a6d6:	60d3      	str	r3, [r2, #12]
}
 800a6d8:	bf00      	nop
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e0:	4770      	bx	lr
 800a6e2:	bf00      	nop
 800a6e4:	58024800 	.word	0x58024800

0800a6e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b08c      	sub	sp, #48	; 0x30
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d101      	bne.n	800a6fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	e3c8      	b.n	800ae8c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f003 0301 	and.w	r3, r3, #1
 800a702:	2b00      	cmp	r3, #0
 800a704:	f000 8087 	beq.w	800a816 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a708:	4b88      	ldr	r3, [pc, #544]	; (800a92c <HAL_RCC_OscConfig+0x244>)
 800a70a:	691b      	ldr	r3, [r3, #16]
 800a70c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a710:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a712:	4b86      	ldr	r3, [pc, #536]	; (800a92c <HAL_RCC_OscConfig+0x244>)
 800a714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a716:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a71a:	2b10      	cmp	r3, #16
 800a71c:	d007      	beq.n	800a72e <HAL_RCC_OscConfig+0x46>
 800a71e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a720:	2b18      	cmp	r3, #24
 800a722:	d110      	bne.n	800a746 <HAL_RCC_OscConfig+0x5e>
 800a724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a726:	f003 0303 	and.w	r3, r3, #3
 800a72a:	2b02      	cmp	r3, #2
 800a72c:	d10b      	bne.n	800a746 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a72e:	4b7f      	ldr	r3, [pc, #508]	; (800a92c <HAL_RCC_OscConfig+0x244>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a736:	2b00      	cmp	r3, #0
 800a738:	d06c      	beq.n	800a814 <HAL_RCC_OscConfig+0x12c>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d168      	bne.n	800a814 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a742:	2301      	movs	r3, #1
 800a744:	e3a2      	b.n	800ae8c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a74e:	d106      	bne.n	800a75e <HAL_RCC_OscConfig+0x76>
 800a750:	4b76      	ldr	r3, [pc, #472]	; (800a92c <HAL_RCC_OscConfig+0x244>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4a75      	ldr	r2, [pc, #468]	; (800a92c <HAL_RCC_OscConfig+0x244>)
 800a756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a75a:	6013      	str	r3, [r2, #0]
 800a75c:	e02e      	b.n	800a7bc <HAL_RCC_OscConfig+0xd4>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d10c      	bne.n	800a780 <HAL_RCC_OscConfig+0x98>
 800a766:	4b71      	ldr	r3, [pc, #452]	; (800a92c <HAL_RCC_OscConfig+0x244>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	4a70      	ldr	r2, [pc, #448]	; (800a92c <HAL_RCC_OscConfig+0x244>)
 800a76c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a770:	6013      	str	r3, [r2, #0]
 800a772:	4b6e      	ldr	r3, [pc, #440]	; (800a92c <HAL_RCC_OscConfig+0x244>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	4a6d      	ldr	r2, [pc, #436]	; (800a92c <HAL_RCC_OscConfig+0x244>)
 800a778:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a77c:	6013      	str	r3, [r2, #0]
 800a77e:	e01d      	b.n	800a7bc <HAL_RCC_OscConfig+0xd4>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	685b      	ldr	r3, [r3, #4]
 800a784:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a788:	d10c      	bne.n	800a7a4 <HAL_RCC_OscConfig+0xbc>
 800a78a:	4b68      	ldr	r3, [pc, #416]	; (800a92c <HAL_RCC_OscConfig+0x244>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4a67      	ldr	r2, [pc, #412]	; (800a92c <HAL_RCC_OscConfig+0x244>)
 800a790:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a794:	6013      	str	r3, [r2, #0]
 800a796:	4b65      	ldr	r3, [pc, #404]	; (800a92c <HAL_RCC_OscConfig+0x244>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	4a64      	ldr	r2, [pc, #400]	; (800a92c <HAL_RCC_OscConfig+0x244>)
 800a79c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a7a0:	6013      	str	r3, [r2, #0]
 800a7a2:	e00b      	b.n	800a7bc <HAL_RCC_OscConfig+0xd4>
 800a7a4:	4b61      	ldr	r3, [pc, #388]	; (800a92c <HAL_RCC_OscConfig+0x244>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	4a60      	ldr	r2, [pc, #384]	; (800a92c <HAL_RCC_OscConfig+0x244>)
 800a7aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a7ae:	6013      	str	r3, [r2, #0]
 800a7b0:	4b5e      	ldr	r3, [pc, #376]	; (800a92c <HAL_RCC_OscConfig+0x244>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4a5d      	ldr	r2, [pc, #372]	; (800a92c <HAL_RCC_OscConfig+0x244>)
 800a7b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a7ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d013      	beq.n	800a7ec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7c4:	f7f9 fc26 	bl	8004014 <HAL_GetTick>
 800a7c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a7ca:	e008      	b.n	800a7de <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a7cc:	f7f9 fc22 	bl	8004014 <HAL_GetTick>
 800a7d0:	4602      	mov	r2, r0
 800a7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d4:	1ad3      	subs	r3, r2, r3
 800a7d6:	2b64      	cmp	r3, #100	; 0x64
 800a7d8:	d901      	bls.n	800a7de <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a7da:	2303      	movs	r3, #3
 800a7dc:	e356      	b.n	800ae8c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a7de:	4b53      	ldr	r3, [pc, #332]	; (800a92c <HAL_RCC_OscConfig+0x244>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d0f0      	beq.n	800a7cc <HAL_RCC_OscConfig+0xe4>
 800a7ea:	e014      	b.n	800a816 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7ec:	f7f9 fc12 	bl	8004014 <HAL_GetTick>
 800a7f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a7f2:	e008      	b.n	800a806 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a7f4:	f7f9 fc0e 	bl	8004014 <HAL_GetTick>
 800a7f8:	4602      	mov	r2, r0
 800a7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7fc:	1ad3      	subs	r3, r2, r3
 800a7fe:	2b64      	cmp	r3, #100	; 0x64
 800a800:	d901      	bls.n	800a806 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a802:	2303      	movs	r3, #3
 800a804:	e342      	b.n	800ae8c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a806:	4b49      	ldr	r3, [pc, #292]	; (800a92c <HAL_RCC_OscConfig+0x244>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d1f0      	bne.n	800a7f4 <HAL_RCC_OscConfig+0x10c>
 800a812:	e000      	b.n	800a816 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f003 0302 	and.w	r3, r3, #2
 800a81e:	2b00      	cmp	r3, #0
 800a820:	f000 808c 	beq.w	800a93c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a824:	4b41      	ldr	r3, [pc, #260]	; (800a92c <HAL_RCC_OscConfig+0x244>)
 800a826:	691b      	ldr	r3, [r3, #16]
 800a828:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a82c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a82e:	4b3f      	ldr	r3, [pc, #252]	; (800a92c <HAL_RCC_OscConfig+0x244>)
 800a830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a832:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a834:	6a3b      	ldr	r3, [r7, #32]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d007      	beq.n	800a84a <HAL_RCC_OscConfig+0x162>
 800a83a:	6a3b      	ldr	r3, [r7, #32]
 800a83c:	2b18      	cmp	r3, #24
 800a83e:	d137      	bne.n	800a8b0 <HAL_RCC_OscConfig+0x1c8>
 800a840:	69fb      	ldr	r3, [r7, #28]
 800a842:	f003 0303 	and.w	r3, r3, #3
 800a846:	2b00      	cmp	r3, #0
 800a848:	d132      	bne.n	800a8b0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a84a:	4b38      	ldr	r3, [pc, #224]	; (800a92c <HAL_RCC_OscConfig+0x244>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f003 0304 	and.w	r3, r3, #4
 800a852:	2b00      	cmp	r3, #0
 800a854:	d005      	beq.n	800a862 <HAL_RCC_OscConfig+0x17a>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	68db      	ldr	r3, [r3, #12]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d101      	bne.n	800a862 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a85e:	2301      	movs	r3, #1
 800a860:	e314      	b.n	800ae8c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a862:	4b32      	ldr	r3, [pc, #200]	; (800a92c <HAL_RCC_OscConfig+0x244>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f023 0219 	bic.w	r2, r3, #25
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	68db      	ldr	r3, [r3, #12]
 800a86e:	492f      	ldr	r1, [pc, #188]	; (800a92c <HAL_RCC_OscConfig+0x244>)
 800a870:	4313      	orrs	r3, r2
 800a872:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a874:	f7f9 fbce 	bl	8004014 <HAL_GetTick>
 800a878:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a87a:	e008      	b.n	800a88e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a87c:	f7f9 fbca 	bl	8004014 <HAL_GetTick>
 800a880:	4602      	mov	r2, r0
 800a882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a884:	1ad3      	subs	r3, r2, r3
 800a886:	2b02      	cmp	r3, #2
 800a888:	d901      	bls.n	800a88e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800a88a:	2303      	movs	r3, #3
 800a88c:	e2fe      	b.n	800ae8c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a88e:	4b27      	ldr	r3, [pc, #156]	; (800a92c <HAL_RCC_OscConfig+0x244>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f003 0304 	and.w	r3, r3, #4
 800a896:	2b00      	cmp	r3, #0
 800a898:	d0f0      	beq.n	800a87c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a89a:	4b24      	ldr	r3, [pc, #144]	; (800a92c <HAL_RCC_OscConfig+0x244>)
 800a89c:	685b      	ldr	r3, [r3, #4]
 800a89e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	691b      	ldr	r3, [r3, #16]
 800a8a6:	061b      	lsls	r3, r3, #24
 800a8a8:	4920      	ldr	r1, [pc, #128]	; (800a92c <HAL_RCC_OscConfig+0x244>)
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a8ae:	e045      	b.n	800a93c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	68db      	ldr	r3, [r3, #12]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d026      	beq.n	800a906 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a8b8:	4b1c      	ldr	r3, [pc, #112]	; (800a92c <HAL_RCC_OscConfig+0x244>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f023 0219 	bic.w	r2, r3, #25
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	68db      	ldr	r3, [r3, #12]
 800a8c4:	4919      	ldr	r1, [pc, #100]	; (800a92c <HAL_RCC_OscConfig+0x244>)
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8ca:	f7f9 fba3 	bl	8004014 <HAL_GetTick>
 800a8ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a8d0:	e008      	b.n	800a8e4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a8d2:	f7f9 fb9f 	bl	8004014 <HAL_GetTick>
 800a8d6:	4602      	mov	r2, r0
 800a8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8da:	1ad3      	subs	r3, r2, r3
 800a8dc:	2b02      	cmp	r3, #2
 800a8de:	d901      	bls.n	800a8e4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800a8e0:	2303      	movs	r3, #3
 800a8e2:	e2d3      	b.n	800ae8c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a8e4:	4b11      	ldr	r3, [pc, #68]	; (800a92c <HAL_RCC_OscConfig+0x244>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f003 0304 	and.w	r3, r3, #4
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d0f0      	beq.n	800a8d2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a8f0:	4b0e      	ldr	r3, [pc, #56]	; (800a92c <HAL_RCC_OscConfig+0x244>)
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	691b      	ldr	r3, [r3, #16]
 800a8fc:	061b      	lsls	r3, r3, #24
 800a8fe:	490b      	ldr	r1, [pc, #44]	; (800a92c <HAL_RCC_OscConfig+0x244>)
 800a900:	4313      	orrs	r3, r2
 800a902:	604b      	str	r3, [r1, #4]
 800a904:	e01a      	b.n	800a93c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a906:	4b09      	ldr	r3, [pc, #36]	; (800a92c <HAL_RCC_OscConfig+0x244>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	4a08      	ldr	r2, [pc, #32]	; (800a92c <HAL_RCC_OscConfig+0x244>)
 800a90c:	f023 0301 	bic.w	r3, r3, #1
 800a910:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a912:	f7f9 fb7f 	bl	8004014 <HAL_GetTick>
 800a916:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a918:	e00a      	b.n	800a930 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a91a:	f7f9 fb7b 	bl	8004014 <HAL_GetTick>
 800a91e:	4602      	mov	r2, r0
 800a920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a922:	1ad3      	subs	r3, r2, r3
 800a924:	2b02      	cmp	r3, #2
 800a926:	d903      	bls.n	800a930 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800a928:	2303      	movs	r3, #3
 800a92a:	e2af      	b.n	800ae8c <HAL_RCC_OscConfig+0x7a4>
 800a92c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a930:	4b96      	ldr	r3, [pc, #600]	; (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f003 0304 	and.w	r3, r3, #4
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d1ee      	bne.n	800a91a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f003 0310 	and.w	r3, r3, #16
 800a944:	2b00      	cmp	r3, #0
 800a946:	d06a      	beq.n	800aa1e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a948:	4b90      	ldr	r3, [pc, #576]	; (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800a94a:	691b      	ldr	r3, [r3, #16]
 800a94c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a950:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a952:	4b8e      	ldr	r3, [pc, #568]	; (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800a954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a956:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a958:	69bb      	ldr	r3, [r7, #24]
 800a95a:	2b08      	cmp	r3, #8
 800a95c:	d007      	beq.n	800a96e <HAL_RCC_OscConfig+0x286>
 800a95e:	69bb      	ldr	r3, [r7, #24]
 800a960:	2b18      	cmp	r3, #24
 800a962:	d11b      	bne.n	800a99c <HAL_RCC_OscConfig+0x2b4>
 800a964:	697b      	ldr	r3, [r7, #20]
 800a966:	f003 0303 	and.w	r3, r3, #3
 800a96a:	2b01      	cmp	r3, #1
 800a96c:	d116      	bne.n	800a99c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a96e:	4b87      	ldr	r3, [pc, #540]	; (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a976:	2b00      	cmp	r3, #0
 800a978:	d005      	beq.n	800a986 <HAL_RCC_OscConfig+0x29e>
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	69db      	ldr	r3, [r3, #28]
 800a97e:	2b80      	cmp	r3, #128	; 0x80
 800a980:	d001      	beq.n	800a986 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800a982:	2301      	movs	r3, #1
 800a984:	e282      	b.n	800ae8c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a986:	4b81      	ldr	r3, [pc, #516]	; (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800a988:	68db      	ldr	r3, [r3, #12]
 800a98a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6a1b      	ldr	r3, [r3, #32]
 800a992:	061b      	lsls	r3, r3, #24
 800a994:	497d      	ldr	r1, [pc, #500]	; (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800a996:	4313      	orrs	r3, r2
 800a998:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a99a:	e040      	b.n	800aa1e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	69db      	ldr	r3, [r3, #28]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d023      	beq.n	800a9ec <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a9a4:	4b79      	ldr	r3, [pc, #484]	; (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	4a78      	ldr	r2, [pc, #480]	; (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800a9aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9b0:	f7f9 fb30 	bl	8004014 <HAL_GetTick>
 800a9b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a9b6:	e008      	b.n	800a9ca <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a9b8:	f7f9 fb2c 	bl	8004014 <HAL_GetTick>
 800a9bc:	4602      	mov	r2, r0
 800a9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c0:	1ad3      	subs	r3, r2, r3
 800a9c2:	2b02      	cmp	r3, #2
 800a9c4:	d901      	bls.n	800a9ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a9c6:	2303      	movs	r3, #3
 800a9c8:	e260      	b.n	800ae8c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a9ca:	4b70      	ldr	r3, [pc, #448]	; (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d0f0      	beq.n	800a9b8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a9d6:	4b6d      	ldr	r3, [pc, #436]	; (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800a9d8:	68db      	ldr	r3, [r3, #12]
 800a9da:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6a1b      	ldr	r3, [r3, #32]
 800a9e2:	061b      	lsls	r3, r3, #24
 800a9e4:	4969      	ldr	r1, [pc, #420]	; (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	60cb      	str	r3, [r1, #12]
 800a9ea:	e018      	b.n	800aa1e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a9ec:	4b67      	ldr	r3, [pc, #412]	; (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	4a66      	ldr	r2, [pc, #408]	; (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800a9f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a9f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9f8:	f7f9 fb0c 	bl	8004014 <HAL_GetTick>
 800a9fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a9fe:	e008      	b.n	800aa12 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800aa00:	f7f9 fb08 	bl	8004014 <HAL_GetTick>
 800aa04:	4602      	mov	r2, r0
 800aa06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa08:	1ad3      	subs	r3, r2, r3
 800aa0a:	2b02      	cmp	r3, #2
 800aa0c:	d901      	bls.n	800aa12 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800aa0e:	2303      	movs	r3, #3
 800aa10:	e23c      	b.n	800ae8c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800aa12:	4b5e      	ldr	r3, [pc, #376]	; (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d1f0      	bne.n	800aa00 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f003 0308 	and.w	r3, r3, #8
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d036      	beq.n	800aa98 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	695b      	ldr	r3, [r3, #20]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d019      	beq.n	800aa66 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aa32:	4b56      	ldr	r3, [pc, #344]	; (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800aa34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa36:	4a55      	ldr	r2, [pc, #340]	; (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800aa38:	f043 0301 	orr.w	r3, r3, #1
 800aa3c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa3e:	f7f9 fae9 	bl	8004014 <HAL_GetTick>
 800aa42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800aa44:	e008      	b.n	800aa58 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa46:	f7f9 fae5 	bl	8004014 <HAL_GetTick>
 800aa4a:	4602      	mov	r2, r0
 800aa4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa4e:	1ad3      	subs	r3, r2, r3
 800aa50:	2b02      	cmp	r3, #2
 800aa52:	d901      	bls.n	800aa58 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800aa54:	2303      	movs	r3, #3
 800aa56:	e219      	b.n	800ae8c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800aa58:	4b4c      	ldr	r3, [pc, #304]	; (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800aa5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa5c:	f003 0302 	and.w	r3, r3, #2
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d0f0      	beq.n	800aa46 <HAL_RCC_OscConfig+0x35e>
 800aa64:	e018      	b.n	800aa98 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aa66:	4b49      	ldr	r3, [pc, #292]	; (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800aa68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa6a:	4a48      	ldr	r2, [pc, #288]	; (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800aa6c:	f023 0301 	bic.w	r3, r3, #1
 800aa70:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa72:	f7f9 facf 	bl	8004014 <HAL_GetTick>
 800aa76:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aa78:	e008      	b.n	800aa8c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa7a:	f7f9 facb 	bl	8004014 <HAL_GetTick>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa82:	1ad3      	subs	r3, r2, r3
 800aa84:	2b02      	cmp	r3, #2
 800aa86:	d901      	bls.n	800aa8c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800aa88:	2303      	movs	r3, #3
 800aa8a:	e1ff      	b.n	800ae8c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aa8c:	4b3f      	ldr	r3, [pc, #252]	; (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800aa8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aa90:	f003 0302 	and.w	r3, r3, #2
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d1f0      	bne.n	800aa7a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f003 0320 	and.w	r3, r3, #32
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d036      	beq.n	800ab12 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	699b      	ldr	r3, [r3, #24]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d019      	beq.n	800aae0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800aaac:	4b37      	ldr	r3, [pc, #220]	; (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	4a36      	ldr	r2, [pc, #216]	; (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800aab2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800aab6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800aab8:	f7f9 faac 	bl	8004014 <HAL_GetTick>
 800aabc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800aabe:	e008      	b.n	800aad2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aac0:	f7f9 faa8 	bl	8004014 <HAL_GetTick>
 800aac4:	4602      	mov	r2, r0
 800aac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aac8:	1ad3      	subs	r3, r2, r3
 800aaca:	2b02      	cmp	r3, #2
 800aacc:	d901      	bls.n	800aad2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800aace:	2303      	movs	r3, #3
 800aad0:	e1dc      	b.n	800ae8c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800aad2:	4b2e      	ldr	r3, [pc, #184]	; (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d0f0      	beq.n	800aac0 <HAL_RCC_OscConfig+0x3d8>
 800aade:	e018      	b.n	800ab12 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800aae0:	4b2a      	ldr	r3, [pc, #168]	; (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	4a29      	ldr	r2, [pc, #164]	; (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800aae6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aaea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800aaec:	f7f9 fa92 	bl	8004014 <HAL_GetTick>
 800aaf0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800aaf2:	e008      	b.n	800ab06 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aaf4:	f7f9 fa8e 	bl	8004014 <HAL_GetTick>
 800aaf8:	4602      	mov	r2, r0
 800aafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aafc:	1ad3      	subs	r3, r2, r3
 800aafe:	2b02      	cmp	r3, #2
 800ab00:	d901      	bls.n	800ab06 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800ab02:	2303      	movs	r3, #3
 800ab04:	e1c2      	b.n	800ae8c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ab06:	4b21      	ldr	r3, [pc, #132]	; (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d1f0      	bne.n	800aaf4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f003 0304 	and.w	r3, r3, #4
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	f000 8086 	beq.w	800ac2c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ab20:	4b1b      	ldr	r3, [pc, #108]	; (800ab90 <HAL_RCC_OscConfig+0x4a8>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	4a1a      	ldr	r2, [pc, #104]	; (800ab90 <HAL_RCC_OscConfig+0x4a8>)
 800ab26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab2a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ab2c:	f7f9 fa72 	bl	8004014 <HAL_GetTick>
 800ab30:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ab32:	e008      	b.n	800ab46 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab34:	f7f9 fa6e 	bl	8004014 <HAL_GetTick>
 800ab38:	4602      	mov	r2, r0
 800ab3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab3c:	1ad3      	subs	r3, r2, r3
 800ab3e:	2b64      	cmp	r3, #100	; 0x64
 800ab40:	d901      	bls.n	800ab46 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800ab42:	2303      	movs	r3, #3
 800ab44:	e1a2      	b.n	800ae8c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ab46:	4b12      	ldr	r3, [pc, #72]	; (800ab90 <HAL_RCC_OscConfig+0x4a8>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d0f0      	beq.n	800ab34 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	689b      	ldr	r3, [r3, #8]
 800ab56:	2b01      	cmp	r3, #1
 800ab58:	d106      	bne.n	800ab68 <HAL_RCC_OscConfig+0x480>
 800ab5a:	4b0c      	ldr	r3, [pc, #48]	; (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800ab5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab5e:	4a0b      	ldr	r2, [pc, #44]	; (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800ab60:	f043 0301 	orr.w	r3, r3, #1
 800ab64:	6713      	str	r3, [r2, #112]	; 0x70
 800ab66:	e032      	b.n	800abce <HAL_RCC_OscConfig+0x4e6>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	689b      	ldr	r3, [r3, #8]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d111      	bne.n	800ab94 <HAL_RCC_OscConfig+0x4ac>
 800ab70:	4b06      	ldr	r3, [pc, #24]	; (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800ab72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab74:	4a05      	ldr	r2, [pc, #20]	; (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800ab76:	f023 0301 	bic.w	r3, r3, #1
 800ab7a:	6713      	str	r3, [r2, #112]	; 0x70
 800ab7c:	4b03      	ldr	r3, [pc, #12]	; (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800ab7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab80:	4a02      	ldr	r2, [pc, #8]	; (800ab8c <HAL_RCC_OscConfig+0x4a4>)
 800ab82:	f023 0304 	bic.w	r3, r3, #4
 800ab86:	6713      	str	r3, [r2, #112]	; 0x70
 800ab88:	e021      	b.n	800abce <HAL_RCC_OscConfig+0x4e6>
 800ab8a:	bf00      	nop
 800ab8c:	58024400 	.word	0x58024400
 800ab90:	58024800 	.word	0x58024800
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	689b      	ldr	r3, [r3, #8]
 800ab98:	2b05      	cmp	r3, #5
 800ab9a:	d10c      	bne.n	800abb6 <HAL_RCC_OscConfig+0x4ce>
 800ab9c:	4b83      	ldr	r3, [pc, #524]	; (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ab9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aba0:	4a82      	ldr	r2, [pc, #520]	; (800adac <HAL_RCC_OscConfig+0x6c4>)
 800aba2:	f043 0304 	orr.w	r3, r3, #4
 800aba6:	6713      	str	r3, [r2, #112]	; 0x70
 800aba8:	4b80      	ldr	r3, [pc, #512]	; (800adac <HAL_RCC_OscConfig+0x6c4>)
 800abaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abac:	4a7f      	ldr	r2, [pc, #508]	; (800adac <HAL_RCC_OscConfig+0x6c4>)
 800abae:	f043 0301 	orr.w	r3, r3, #1
 800abb2:	6713      	str	r3, [r2, #112]	; 0x70
 800abb4:	e00b      	b.n	800abce <HAL_RCC_OscConfig+0x4e6>
 800abb6:	4b7d      	ldr	r3, [pc, #500]	; (800adac <HAL_RCC_OscConfig+0x6c4>)
 800abb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abba:	4a7c      	ldr	r2, [pc, #496]	; (800adac <HAL_RCC_OscConfig+0x6c4>)
 800abbc:	f023 0301 	bic.w	r3, r3, #1
 800abc0:	6713      	str	r3, [r2, #112]	; 0x70
 800abc2:	4b7a      	ldr	r3, [pc, #488]	; (800adac <HAL_RCC_OscConfig+0x6c4>)
 800abc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abc6:	4a79      	ldr	r2, [pc, #484]	; (800adac <HAL_RCC_OscConfig+0x6c4>)
 800abc8:	f023 0304 	bic.w	r3, r3, #4
 800abcc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	689b      	ldr	r3, [r3, #8]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d015      	beq.n	800ac02 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800abd6:	f7f9 fa1d 	bl	8004014 <HAL_GetTick>
 800abda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800abdc:	e00a      	b.n	800abf4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abde:	f7f9 fa19 	bl	8004014 <HAL_GetTick>
 800abe2:	4602      	mov	r2, r0
 800abe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe6:	1ad3      	subs	r3, r2, r3
 800abe8:	f241 3288 	movw	r2, #5000	; 0x1388
 800abec:	4293      	cmp	r3, r2
 800abee:	d901      	bls.n	800abf4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800abf0:	2303      	movs	r3, #3
 800abf2:	e14b      	b.n	800ae8c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800abf4:	4b6d      	ldr	r3, [pc, #436]	; (800adac <HAL_RCC_OscConfig+0x6c4>)
 800abf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abf8:	f003 0302 	and.w	r3, r3, #2
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d0ee      	beq.n	800abde <HAL_RCC_OscConfig+0x4f6>
 800ac00:	e014      	b.n	800ac2c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac02:	f7f9 fa07 	bl	8004014 <HAL_GetTick>
 800ac06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ac08:	e00a      	b.n	800ac20 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac0a:	f7f9 fa03 	bl	8004014 <HAL_GetTick>
 800ac0e:	4602      	mov	r2, r0
 800ac10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac12:	1ad3      	subs	r3, r2, r3
 800ac14:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d901      	bls.n	800ac20 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800ac1c:	2303      	movs	r3, #3
 800ac1e:	e135      	b.n	800ae8c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ac20:	4b62      	ldr	r3, [pc, #392]	; (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ac22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac24:	f003 0302 	and.w	r3, r3, #2
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d1ee      	bne.n	800ac0a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	f000 812a 	beq.w	800ae8a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800ac36:	4b5d      	ldr	r3, [pc, #372]	; (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ac38:	691b      	ldr	r3, [r3, #16]
 800ac3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ac3e:	2b18      	cmp	r3, #24
 800ac40:	f000 80ba 	beq.w	800adb8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac48:	2b02      	cmp	r3, #2
 800ac4a:	f040 8095 	bne.w	800ad78 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ac4e:	4b57      	ldr	r3, [pc, #348]	; (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	4a56      	ldr	r2, [pc, #344]	; (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ac54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ac58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac5a:	f7f9 f9db 	bl	8004014 <HAL_GetTick>
 800ac5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ac60:	e008      	b.n	800ac74 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac62:	f7f9 f9d7 	bl	8004014 <HAL_GetTick>
 800ac66:	4602      	mov	r2, r0
 800ac68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac6a:	1ad3      	subs	r3, r2, r3
 800ac6c:	2b02      	cmp	r3, #2
 800ac6e:	d901      	bls.n	800ac74 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800ac70:	2303      	movs	r3, #3
 800ac72:	e10b      	b.n	800ae8c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ac74:	4b4d      	ldr	r3, [pc, #308]	; (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d1f0      	bne.n	800ac62 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ac80:	4b4a      	ldr	r3, [pc, #296]	; (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ac82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ac84:	4b4a      	ldr	r3, [pc, #296]	; (800adb0 <HAL_RCC_OscConfig+0x6c8>)
 800ac86:	4013      	ands	r3, r2
 800ac88:	687a      	ldr	r2, [r7, #4]
 800ac8a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800ac8c:	687a      	ldr	r2, [r7, #4]
 800ac8e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ac90:	0112      	lsls	r2, r2, #4
 800ac92:	430a      	orrs	r2, r1
 800ac94:	4945      	ldr	r1, [pc, #276]	; (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ac96:	4313      	orrs	r3, r2
 800ac98:	628b      	str	r3, [r1, #40]	; 0x28
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac9e:	3b01      	subs	r3, #1
 800aca0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aca8:	3b01      	subs	r3, #1
 800acaa:	025b      	lsls	r3, r3, #9
 800acac:	b29b      	uxth	r3, r3
 800acae:	431a      	orrs	r2, r3
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acb4:	3b01      	subs	r3, #1
 800acb6:	041b      	lsls	r3, r3, #16
 800acb8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800acbc:	431a      	orrs	r2, r3
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800acc2:	3b01      	subs	r3, #1
 800acc4:	061b      	lsls	r3, r3, #24
 800acc6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800acca:	4938      	ldr	r1, [pc, #224]	; (800adac <HAL_RCC_OscConfig+0x6c4>)
 800accc:	4313      	orrs	r3, r2
 800acce:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800acd0:	4b36      	ldr	r3, [pc, #216]	; (800adac <HAL_RCC_OscConfig+0x6c4>)
 800acd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acd4:	4a35      	ldr	r2, [pc, #212]	; (800adac <HAL_RCC_OscConfig+0x6c4>)
 800acd6:	f023 0301 	bic.w	r3, r3, #1
 800acda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800acdc:	4b33      	ldr	r3, [pc, #204]	; (800adac <HAL_RCC_OscConfig+0x6c4>)
 800acde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ace0:	4b34      	ldr	r3, [pc, #208]	; (800adb4 <HAL_RCC_OscConfig+0x6cc>)
 800ace2:	4013      	ands	r3, r2
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ace8:	00d2      	lsls	r2, r2, #3
 800acea:	4930      	ldr	r1, [pc, #192]	; (800adac <HAL_RCC_OscConfig+0x6c4>)
 800acec:	4313      	orrs	r3, r2
 800acee:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800acf0:	4b2e      	ldr	r3, [pc, #184]	; (800adac <HAL_RCC_OscConfig+0x6c4>)
 800acf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acf4:	f023 020c 	bic.w	r2, r3, #12
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acfc:	492b      	ldr	r1, [pc, #172]	; (800adac <HAL_RCC_OscConfig+0x6c4>)
 800acfe:	4313      	orrs	r3, r2
 800ad00:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ad02:	4b2a      	ldr	r3, [pc, #168]	; (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ad04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad06:	f023 0202 	bic.w	r2, r3, #2
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad0e:	4927      	ldr	r1, [pc, #156]	; (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ad10:	4313      	orrs	r3, r2
 800ad12:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ad14:	4b25      	ldr	r3, [pc, #148]	; (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ad16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad18:	4a24      	ldr	r2, [pc, #144]	; (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ad1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad20:	4b22      	ldr	r3, [pc, #136]	; (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ad22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad24:	4a21      	ldr	r2, [pc, #132]	; (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ad26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ad2c:	4b1f      	ldr	r3, [pc, #124]	; (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ad2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad30:	4a1e      	ldr	r2, [pc, #120]	; (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ad32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ad36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800ad38:	4b1c      	ldr	r3, [pc, #112]	; (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ad3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad3c:	4a1b      	ldr	r2, [pc, #108]	; (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ad3e:	f043 0301 	orr.w	r3, r3, #1
 800ad42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ad44:	4b19      	ldr	r3, [pc, #100]	; (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	4a18      	ldr	r2, [pc, #96]	; (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ad4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ad4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad50:	f7f9 f960 	bl	8004014 <HAL_GetTick>
 800ad54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ad56:	e008      	b.n	800ad6a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad58:	f7f9 f95c 	bl	8004014 <HAL_GetTick>
 800ad5c:	4602      	mov	r2, r0
 800ad5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad60:	1ad3      	subs	r3, r2, r3
 800ad62:	2b02      	cmp	r3, #2
 800ad64:	d901      	bls.n	800ad6a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800ad66:	2303      	movs	r3, #3
 800ad68:	e090      	b.n	800ae8c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ad6a:	4b10      	ldr	r3, [pc, #64]	; (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d0f0      	beq.n	800ad58 <HAL_RCC_OscConfig+0x670>
 800ad76:	e088      	b.n	800ae8a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ad78:	4b0c      	ldr	r3, [pc, #48]	; (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	4a0b      	ldr	r2, [pc, #44]	; (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ad7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ad82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad84:	f7f9 f946 	bl	8004014 <HAL_GetTick>
 800ad88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ad8a:	e008      	b.n	800ad9e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad8c:	f7f9 f942 	bl	8004014 <HAL_GetTick>
 800ad90:	4602      	mov	r2, r0
 800ad92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad94:	1ad3      	subs	r3, r2, r3
 800ad96:	2b02      	cmp	r3, #2
 800ad98:	d901      	bls.n	800ad9e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800ad9a:	2303      	movs	r3, #3
 800ad9c:	e076      	b.n	800ae8c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ad9e:	4b03      	ldr	r3, [pc, #12]	; (800adac <HAL_RCC_OscConfig+0x6c4>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d1f0      	bne.n	800ad8c <HAL_RCC_OscConfig+0x6a4>
 800adaa:	e06e      	b.n	800ae8a <HAL_RCC_OscConfig+0x7a2>
 800adac:	58024400 	.word	0x58024400
 800adb0:	fffffc0c 	.word	0xfffffc0c
 800adb4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800adb8:	4b36      	ldr	r3, [pc, #216]	; (800ae94 <HAL_RCC_OscConfig+0x7ac>)
 800adba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adbc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800adbe:	4b35      	ldr	r3, [pc, #212]	; (800ae94 <HAL_RCC_OscConfig+0x7ac>)
 800adc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adc2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc8:	2b01      	cmp	r3, #1
 800adca:	d031      	beq.n	800ae30 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	f003 0203 	and.w	r2, r3, #3
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800add6:	429a      	cmp	r2, r3
 800add8:	d12a      	bne.n	800ae30 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	091b      	lsrs	r3, r3, #4
 800adde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ade6:	429a      	cmp	r2, r3
 800ade8:	d122      	bne.n	800ae30 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adf4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800adf6:	429a      	cmp	r2, r3
 800adf8:	d11a      	bne.n	800ae30 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	0a5b      	lsrs	r3, r3, #9
 800adfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae06:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ae08:	429a      	cmp	r2, r3
 800ae0a:	d111      	bne.n	800ae30 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	0c1b      	lsrs	r3, r3, #16
 800ae10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae18:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ae1a:	429a      	cmp	r2, r3
 800ae1c:	d108      	bne.n	800ae30 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	0e1b      	lsrs	r3, r3, #24
 800ae22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae2a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	d001      	beq.n	800ae34 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800ae30:	2301      	movs	r3, #1
 800ae32:	e02b      	b.n	800ae8c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800ae34:	4b17      	ldr	r3, [pc, #92]	; (800ae94 <HAL_RCC_OscConfig+0x7ac>)
 800ae36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae38:	08db      	lsrs	r3, r3, #3
 800ae3a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae3e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae44:	693a      	ldr	r2, [r7, #16]
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d01f      	beq.n	800ae8a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800ae4a:	4b12      	ldr	r3, [pc, #72]	; (800ae94 <HAL_RCC_OscConfig+0x7ac>)
 800ae4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae4e:	4a11      	ldr	r2, [pc, #68]	; (800ae94 <HAL_RCC_OscConfig+0x7ac>)
 800ae50:	f023 0301 	bic.w	r3, r3, #1
 800ae54:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ae56:	f7f9 f8dd 	bl	8004014 <HAL_GetTick>
 800ae5a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800ae5c:	bf00      	nop
 800ae5e:	f7f9 f8d9 	bl	8004014 <HAL_GetTick>
 800ae62:	4602      	mov	r2, r0
 800ae64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d0f9      	beq.n	800ae5e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ae6a:	4b0a      	ldr	r3, [pc, #40]	; (800ae94 <HAL_RCC_OscConfig+0x7ac>)
 800ae6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae6e:	4b0a      	ldr	r3, [pc, #40]	; (800ae98 <HAL_RCC_OscConfig+0x7b0>)
 800ae70:	4013      	ands	r3, r2
 800ae72:	687a      	ldr	r2, [r7, #4]
 800ae74:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800ae76:	00d2      	lsls	r2, r2, #3
 800ae78:	4906      	ldr	r1, [pc, #24]	; (800ae94 <HAL_RCC_OscConfig+0x7ac>)
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800ae7e:	4b05      	ldr	r3, [pc, #20]	; (800ae94 <HAL_RCC_OscConfig+0x7ac>)
 800ae80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae82:	4a04      	ldr	r2, [pc, #16]	; (800ae94 <HAL_RCC_OscConfig+0x7ac>)
 800ae84:	f043 0301 	orr.w	r3, r3, #1
 800ae88:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800ae8a:	2300      	movs	r3, #0
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3730      	adds	r7, #48	; 0x30
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}
 800ae94:	58024400 	.word	0x58024400
 800ae98:	ffff0007 	.word	0xffff0007

0800ae9c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b086      	sub	sp, #24
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d101      	bne.n	800aeb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aeac:	2301      	movs	r3, #1
 800aeae:	e19c      	b.n	800b1ea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800aeb0:	4b8a      	ldr	r3, [pc, #552]	; (800b0dc <HAL_RCC_ClockConfig+0x240>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f003 030f 	and.w	r3, r3, #15
 800aeb8:	683a      	ldr	r2, [r7, #0]
 800aeba:	429a      	cmp	r2, r3
 800aebc:	d910      	bls.n	800aee0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aebe:	4b87      	ldr	r3, [pc, #540]	; (800b0dc <HAL_RCC_ClockConfig+0x240>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f023 020f 	bic.w	r2, r3, #15
 800aec6:	4985      	ldr	r1, [pc, #532]	; (800b0dc <HAL_RCC_ClockConfig+0x240>)
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	4313      	orrs	r3, r2
 800aecc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aece:	4b83      	ldr	r3, [pc, #524]	; (800b0dc <HAL_RCC_ClockConfig+0x240>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	f003 030f 	and.w	r3, r3, #15
 800aed6:	683a      	ldr	r2, [r7, #0]
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d001      	beq.n	800aee0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800aedc:	2301      	movs	r3, #1
 800aede:	e184      	b.n	800b1ea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f003 0304 	and.w	r3, r3, #4
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d010      	beq.n	800af0e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	691a      	ldr	r2, [r3, #16]
 800aef0:	4b7b      	ldr	r3, [pc, #492]	; (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800aef2:	699b      	ldr	r3, [r3, #24]
 800aef4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aef8:	429a      	cmp	r2, r3
 800aefa:	d908      	bls.n	800af0e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800aefc:	4b78      	ldr	r3, [pc, #480]	; (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800aefe:	699b      	ldr	r3, [r3, #24]
 800af00:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	691b      	ldr	r3, [r3, #16]
 800af08:	4975      	ldr	r1, [pc, #468]	; (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800af0a:	4313      	orrs	r3, r2
 800af0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f003 0308 	and.w	r3, r3, #8
 800af16:	2b00      	cmp	r3, #0
 800af18:	d010      	beq.n	800af3c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	695a      	ldr	r2, [r3, #20]
 800af1e:	4b70      	ldr	r3, [pc, #448]	; (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800af20:	69db      	ldr	r3, [r3, #28]
 800af22:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800af26:	429a      	cmp	r2, r3
 800af28:	d908      	bls.n	800af3c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800af2a:	4b6d      	ldr	r3, [pc, #436]	; (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800af2c:	69db      	ldr	r3, [r3, #28]
 800af2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	695b      	ldr	r3, [r3, #20]
 800af36:	496a      	ldr	r1, [pc, #424]	; (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800af38:	4313      	orrs	r3, r2
 800af3a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f003 0310 	and.w	r3, r3, #16
 800af44:	2b00      	cmp	r3, #0
 800af46:	d010      	beq.n	800af6a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	699a      	ldr	r2, [r3, #24]
 800af4c:	4b64      	ldr	r3, [pc, #400]	; (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800af4e:	69db      	ldr	r3, [r3, #28]
 800af50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800af54:	429a      	cmp	r2, r3
 800af56:	d908      	bls.n	800af6a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800af58:	4b61      	ldr	r3, [pc, #388]	; (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800af5a:	69db      	ldr	r3, [r3, #28]
 800af5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	699b      	ldr	r3, [r3, #24]
 800af64:	495e      	ldr	r1, [pc, #376]	; (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800af66:	4313      	orrs	r3, r2
 800af68:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f003 0320 	and.w	r3, r3, #32
 800af72:	2b00      	cmp	r3, #0
 800af74:	d010      	beq.n	800af98 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	69da      	ldr	r2, [r3, #28]
 800af7a:	4b59      	ldr	r3, [pc, #356]	; (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800af7c:	6a1b      	ldr	r3, [r3, #32]
 800af7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800af82:	429a      	cmp	r2, r3
 800af84:	d908      	bls.n	800af98 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800af86:	4b56      	ldr	r3, [pc, #344]	; (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800af88:	6a1b      	ldr	r3, [r3, #32]
 800af8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	69db      	ldr	r3, [r3, #28]
 800af92:	4953      	ldr	r1, [pc, #332]	; (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800af94:	4313      	orrs	r3, r2
 800af96:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f003 0302 	and.w	r3, r3, #2
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d010      	beq.n	800afc6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	68da      	ldr	r2, [r3, #12]
 800afa8:	4b4d      	ldr	r3, [pc, #308]	; (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800afaa:	699b      	ldr	r3, [r3, #24]
 800afac:	f003 030f 	and.w	r3, r3, #15
 800afb0:	429a      	cmp	r2, r3
 800afb2:	d908      	bls.n	800afc6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800afb4:	4b4a      	ldr	r3, [pc, #296]	; (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800afb6:	699b      	ldr	r3, [r3, #24]
 800afb8:	f023 020f 	bic.w	r2, r3, #15
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	68db      	ldr	r3, [r3, #12]
 800afc0:	4947      	ldr	r1, [pc, #284]	; (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800afc2:	4313      	orrs	r3, r2
 800afc4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f003 0301 	and.w	r3, r3, #1
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d055      	beq.n	800b07e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800afd2:	4b43      	ldr	r3, [pc, #268]	; (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800afd4:	699b      	ldr	r3, [r3, #24]
 800afd6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	689b      	ldr	r3, [r3, #8]
 800afde:	4940      	ldr	r1, [pc, #256]	; (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800afe0:	4313      	orrs	r3, r2
 800afe2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	2b02      	cmp	r3, #2
 800afea:	d107      	bne.n	800affc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800afec:	4b3c      	ldr	r3, [pc, #240]	; (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d121      	bne.n	800b03c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800aff8:	2301      	movs	r3, #1
 800affa:	e0f6      	b.n	800b1ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	685b      	ldr	r3, [r3, #4]
 800b000:	2b03      	cmp	r3, #3
 800b002:	d107      	bne.n	800b014 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b004:	4b36      	ldr	r3, [pc, #216]	; (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d115      	bne.n	800b03c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b010:	2301      	movs	r3, #1
 800b012:	e0ea      	b.n	800b1ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	2b01      	cmp	r3, #1
 800b01a:	d107      	bne.n	800b02c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b01c:	4b30      	ldr	r3, [pc, #192]	; (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b024:	2b00      	cmp	r3, #0
 800b026:	d109      	bne.n	800b03c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b028:	2301      	movs	r3, #1
 800b02a:	e0de      	b.n	800b1ea <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b02c:	4b2c      	ldr	r3, [pc, #176]	; (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f003 0304 	and.w	r3, r3, #4
 800b034:	2b00      	cmp	r3, #0
 800b036:	d101      	bne.n	800b03c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b038:	2301      	movs	r3, #1
 800b03a:	e0d6      	b.n	800b1ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b03c:	4b28      	ldr	r3, [pc, #160]	; (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800b03e:	691b      	ldr	r3, [r3, #16]
 800b040:	f023 0207 	bic.w	r2, r3, #7
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	685b      	ldr	r3, [r3, #4]
 800b048:	4925      	ldr	r1, [pc, #148]	; (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800b04a:	4313      	orrs	r3, r2
 800b04c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b04e:	f7f8 ffe1 	bl	8004014 <HAL_GetTick>
 800b052:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b054:	e00a      	b.n	800b06c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b056:	f7f8 ffdd 	bl	8004014 <HAL_GetTick>
 800b05a:	4602      	mov	r2, r0
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	1ad3      	subs	r3, r2, r3
 800b060:	f241 3288 	movw	r2, #5000	; 0x1388
 800b064:	4293      	cmp	r3, r2
 800b066:	d901      	bls.n	800b06c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b068:	2303      	movs	r3, #3
 800b06a:	e0be      	b.n	800b1ea <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b06c:	4b1c      	ldr	r3, [pc, #112]	; (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800b06e:	691b      	ldr	r3, [r3, #16]
 800b070:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	685b      	ldr	r3, [r3, #4]
 800b078:	00db      	lsls	r3, r3, #3
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d1eb      	bne.n	800b056 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f003 0302 	and.w	r3, r3, #2
 800b086:	2b00      	cmp	r3, #0
 800b088:	d010      	beq.n	800b0ac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	68da      	ldr	r2, [r3, #12]
 800b08e:	4b14      	ldr	r3, [pc, #80]	; (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800b090:	699b      	ldr	r3, [r3, #24]
 800b092:	f003 030f 	and.w	r3, r3, #15
 800b096:	429a      	cmp	r2, r3
 800b098:	d208      	bcs.n	800b0ac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b09a:	4b11      	ldr	r3, [pc, #68]	; (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800b09c:	699b      	ldr	r3, [r3, #24]
 800b09e:	f023 020f 	bic.w	r2, r3, #15
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	68db      	ldr	r3, [r3, #12]
 800b0a6:	490e      	ldr	r1, [pc, #56]	; (800b0e0 <HAL_RCC_ClockConfig+0x244>)
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b0ac:	4b0b      	ldr	r3, [pc, #44]	; (800b0dc <HAL_RCC_ClockConfig+0x240>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f003 030f 	and.w	r3, r3, #15
 800b0b4:	683a      	ldr	r2, [r7, #0]
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	d214      	bcs.n	800b0e4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b0ba:	4b08      	ldr	r3, [pc, #32]	; (800b0dc <HAL_RCC_ClockConfig+0x240>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f023 020f 	bic.w	r2, r3, #15
 800b0c2:	4906      	ldr	r1, [pc, #24]	; (800b0dc <HAL_RCC_ClockConfig+0x240>)
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	4313      	orrs	r3, r2
 800b0c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b0ca:	4b04      	ldr	r3, [pc, #16]	; (800b0dc <HAL_RCC_ClockConfig+0x240>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f003 030f 	and.w	r3, r3, #15
 800b0d2:	683a      	ldr	r2, [r7, #0]
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d005      	beq.n	800b0e4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b0d8:	2301      	movs	r3, #1
 800b0da:	e086      	b.n	800b1ea <HAL_RCC_ClockConfig+0x34e>
 800b0dc:	52002000 	.word	0x52002000
 800b0e0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f003 0304 	and.w	r3, r3, #4
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d010      	beq.n	800b112 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	691a      	ldr	r2, [r3, #16]
 800b0f4:	4b3f      	ldr	r3, [pc, #252]	; (800b1f4 <HAL_RCC_ClockConfig+0x358>)
 800b0f6:	699b      	ldr	r3, [r3, #24]
 800b0f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d208      	bcs.n	800b112 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b100:	4b3c      	ldr	r3, [pc, #240]	; (800b1f4 <HAL_RCC_ClockConfig+0x358>)
 800b102:	699b      	ldr	r3, [r3, #24]
 800b104:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	691b      	ldr	r3, [r3, #16]
 800b10c:	4939      	ldr	r1, [pc, #228]	; (800b1f4 <HAL_RCC_ClockConfig+0x358>)
 800b10e:	4313      	orrs	r3, r2
 800b110:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	f003 0308 	and.w	r3, r3, #8
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d010      	beq.n	800b140 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	695a      	ldr	r2, [r3, #20]
 800b122:	4b34      	ldr	r3, [pc, #208]	; (800b1f4 <HAL_RCC_ClockConfig+0x358>)
 800b124:	69db      	ldr	r3, [r3, #28]
 800b126:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b12a:	429a      	cmp	r2, r3
 800b12c:	d208      	bcs.n	800b140 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b12e:	4b31      	ldr	r3, [pc, #196]	; (800b1f4 <HAL_RCC_ClockConfig+0x358>)
 800b130:	69db      	ldr	r3, [r3, #28]
 800b132:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	695b      	ldr	r3, [r3, #20]
 800b13a:	492e      	ldr	r1, [pc, #184]	; (800b1f4 <HAL_RCC_ClockConfig+0x358>)
 800b13c:	4313      	orrs	r3, r2
 800b13e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f003 0310 	and.w	r3, r3, #16
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d010      	beq.n	800b16e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	699a      	ldr	r2, [r3, #24]
 800b150:	4b28      	ldr	r3, [pc, #160]	; (800b1f4 <HAL_RCC_ClockConfig+0x358>)
 800b152:	69db      	ldr	r3, [r3, #28]
 800b154:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b158:	429a      	cmp	r2, r3
 800b15a:	d208      	bcs.n	800b16e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b15c:	4b25      	ldr	r3, [pc, #148]	; (800b1f4 <HAL_RCC_ClockConfig+0x358>)
 800b15e:	69db      	ldr	r3, [r3, #28]
 800b160:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	699b      	ldr	r3, [r3, #24]
 800b168:	4922      	ldr	r1, [pc, #136]	; (800b1f4 <HAL_RCC_ClockConfig+0x358>)
 800b16a:	4313      	orrs	r3, r2
 800b16c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f003 0320 	and.w	r3, r3, #32
 800b176:	2b00      	cmp	r3, #0
 800b178:	d010      	beq.n	800b19c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	69da      	ldr	r2, [r3, #28]
 800b17e:	4b1d      	ldr	r3, [pc, #116]	; (800b1f4 <HAL_RCC_ClockConfig+0x358>)
 800b180:	6a1b      	ldr	r3, [r3, #32]
 800b182:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b186:	429a      	cmp	r2, r3
 800b188:	d208      	bcs.n	800b19c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b18a:	4b1a      	ldr	r3, [pc, #104]	; (800b1f4 <HAL_RCC_ClockConfig+0x358>)
 800b18c:	6a1b      	ldr	r3, [r3, #32]
 800b18e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	69db      	ldr	r3, [r3, #28]
 800b196:	4917      	ldr	r1, [pc, #92]	; (800b1f4 <HAL_RCC_ClockConfig+0x358>)
 800b198:	4313      	orrs	r3, r2
 800b19a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b19c:	f000 f89e 	bl	800b2dc <HAL_RCC_GetSysClockFreq>
 800b1a0:	4602      	mov	r2, r0
 800b1a2:	4b14      	ldr	r3, [pc, #80]	; (800b1f4 <HAL_RCC_ClockConfig+0x358>)
 800b1a4:	699b      	ldr	r3, [r3, #24]
 800b1a6:	0a1b      	lsrs	r3, r3, #8
 800b1a8:	f003 030f 	and.w	r3, r3, #15
 800b1ac:	4912      	ldr	r1, [pc, #72]	; (800b1f8 <HAL_RCC_ClockConfig+0x35c>)
 800b1ae:	5ccb      	ldrb	r3, [r1, r3]
 800b1b0:	f003 031f 	and.w	r3, r3, #31
 800b1b4:	fa22 f303 	lsr.w	r3, r2, r3
 800b1b8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b1ba:	4b0e      	ldr	r3, [pc, #56]	; (800b1f4 <HAL_RCC_ClockConfig+0x358>)
 800b1bc:	699b      	ldr	r3, [r3, #24]
 800b1be:	f003 030f 	and.w	r3, r3, #15
 800b1c2:	4a0d      	ldr	r2, [pc, #52]	; (800b1f8 <HAL_RCC_ClockConfig+0x35c>)
 800b1c4:	5cd3      	ldrb	r3, [r2, r3]
 800b1c6:	f003 031f 	and.w	r3, r3, #31
 800b1ca:	693a      	ldr	r2, [r7, #16]
 800b1cc:	fa22 f303 	lsr.w	r3, r2, r3
 800b1d0:	4a0a      	ldr	r2, [pc, #40]	; (800b1fc <HAL_RCC_ClockConfig+0x360>)
 800b1d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b1d4:	4a0a      	ldr	r2, [pc, #40]	; (800b200 <HAL_RCC_ClockConfig+0x364>)
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b1da:	4b0a      	ldr	r3, [pc, #40]	; (800b204 <HAL_RCC_ClockConfig+0x368>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	4618      	mov	r0, r3
 800b1e0:	f7f8 fece 	bl	8003f80 <HAL_InitTick>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b1e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3718      	adds	r7, #24
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}
 800b1f2:	bf00      	nop
 800b1f4:	58024400 	.word	0x58024400
 800b1f8:	0801f7b0 	.word	0x0801f7b0
 800b1fc:	24000004 	.word	0x24000004
 800b200:	24000000 	.word	0x24000000
 800b204:	24000008 	.word	0x24000008

0800b208 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b08c      	sub	sp, #48	; 0x30
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	60f8      	str	r0, [r7, #12]
 800b210:	60b9      	str	r1, [r7, #8]
 800b212:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d12a      	bne.n	800b270 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800b21a:	4b2d      	ldr	r3, [pc, #180]	; (800b2d0 <HAL_RCC_MCOConfig+0xc8>)
 800b21c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b220:	4a2b      	ldr	r2, [pc, #172]	; (800b2d0 <HAL_RCC_MCOConfig+0xc8>)
 800b222:	f043 0301 	orr.w	r3, r3, #1
 800b226:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b22a:	4b29      	ldr	r3, [pc, #164]	; (800b2d0 <HAL_RCC_MCOConfig+0xc8>)
 800b22c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b230:	f003 0301 	and.w	r3, r3, #1
 800b234:	61bb      	str	r3, [r7, #24]
 800b236:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800b238:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b23c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b23e:	2302      	movs	r3, #2
 800b240:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b242:	2303      	movs	r3, #3
 800b244:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b246:	2300      	movs	r3, #0
 800b248:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b24a:	2300      	movs	r3, #0
 800b24c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b24e:	f107 031c 	add.w	r3, r7, #28
 800b252:	4619      	mov	r1, r3
 800b254:	481f      	ldr	r0, [pc, #124]	; (800b2d4 <HAL_RCC_MCOConfig+0xcc>)
 800b256:	f7fd fc29 	bl	8008aac <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800b25a:	4b1d      	ldr	r3, [pc, #116]	; (800b2d0 <HAL_RCC_MCOConfig+0xc8>)
 800b25c:	691b      	ldr	r3, [r3, #16]
 800b25e:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800b262:	68b9      	ldr	r1, [r7, #8]
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	430b      	orrs	r3, r1
 800b268:	4919      	ldr	r1, [pc, #100]	; (800b2d0 <HAL_RCC_MCOConfig+0xc8>)
 800b26a:	4313      	orrs	r3, r2
 800b26c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800b26e:	e02a      	b.n	800b2c6 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800b270:	4b17      	ldr	r3, [pc, #92]	; (800b2d0 <HAL_RCC_MCOConfig+0xc8>)
 800b272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b276:	4a16      	ldr	r2, [pc, #88]	; (800b2d0 <HAL_RCC_MCOConfig+0xc8>)
 800b278:	f043 0304 	orr.w	r3, r3, #4
 800b27c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b280:	4b13      	ldr	r3, [pc, #76]	; (800b2d0 <HAL_RCC_MCOConfig+0xc8>)
 800b282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b286:	f003 0304 	and.w	r3, r3, #4
 800b28a:	617b      	str	r3, [r7, #20]
 800b28c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800b28e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b294:	2302      	movs	r3, #2
 800b296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b298:	2303      	movs	r3, #3
 800b29a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b29c:	2300      	movs	r3, #0
 800b29e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b2a4:	f107 031c 	add.w	r3, r7, #28
 800b2a8:	4619      	mov	r1, r3
 800b2aa:	480b      	ldr	r0, [pc, #44]	; (800b2d8 <HAL_RCC_MCOConfig+0xd0>)
 800b2ac:	f7fd fbfe 	bl	8008aac <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800b2b0:	4b07      	ldr	r3, [pc, #28]	; (800b2d0 <HAL_RCC_MCOConfig+0xc8>)
 800b2b2:	691b      	ldr	r3, [r3, #16]
 800b2b4:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	01d9      	lsls	r1, r3, #7
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	430b      	orrs	r3, r1
 800b2c0:	4903      	ldr	r1, [pc, #12]	; (800b2d0 <HAL_RCC_MCOConfig+0xc8>)
 800b2c2:	4313      	orrs	r3, r2
 800b2c4:	610b      	str	r3, [r1, #16]
}
 800b2c6:	bf00      	nop
 800b2c8:	3730      	adds	r7, #48	; 0x30
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}
 800b2ce:	bf00      	nop
 800b2d0:	58024400 	.word	0x58024400
 800b2d4:	58020000 	.word	0x58020000
 800b2d8:	58020800 	.word	0x58020800

0800b2dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b089      	sub	sp, #36	; 0x24
 800b2e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b2e2:	4bb3      	ldr	r3, [pc, #716]	; (800b5b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b2e4:	691b      	ldr	r3, [r3, #16]
 800b2e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b2ea:	2b18      	cmp	r3, #24
 800b2ec:	f200 8155 	bhi.w	800b59a <HAL_RCC_GetSysClockFreq+0x2be>
 800b2f0:	a201      	add	r2, pc, #4	; (adr r2, 800b2f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b2f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2f6:	bf00      	nop
 800b2f8:	0800b35d 	.word	0x0800b35d
 800b2fc:	0800b59b 	.word	0x0800b59b
 800b300:	0800b59b 	.word	0x0800b59b
 800b304:	0800b59b 	.word	0x0800b59b
 800b308:	0800b59b 	.word	0x0800b59b
 800b30c:	0800b59b 	.word	0x0800b59b
 800b310:	0800b59b 	.word	0x0800b59b
 800b314:	0800b59b 	.word	0x0800b59b
 800b318:	0800b383 	.word	0x0800b383
 800b31c:	0800b59b 	.word	0x0800b59b
 800b320:	0800b59b 	.word	0x0800b59b
 800b324:	0800b59b 	.word	0x0800b59b
 800b328:	0800b59b 	.word	0x0800b59b
 800b32c:	0800b59b 	.word	0x0800b59b
 800b330:	0800b59b 	.word	0x0800b59b
 800b334:	0800b59b 	.word	0x0800b59b
 800b338:	0800b389 	.word	0x0800b389
 800b33c:	0800b59b 	.word	0x0800b59b
 800b340:	0800b59b 	.word	0x0800b59b
 800b344:	0800b59b 	.word	0x0800b59b
 800b348:	0800b59b 	.word	0x0800b59b
 800b34c:	0800b59b 	.word	0x0800b59b
 800b350:	0800b59b 	.word	0x0800b59b
 800b354:	0800b59b 	.word	0x0800b59b
 800b358:	0800b38f 	.word	0x0800b38f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b35c:	4b94      	ldr	r3, [pc, #592]	; (800b5b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f003 0320 	and.w	r3, r3, #32
 800b364:	2b00      	cmp	r3, #0
 800b366:	d009      	beq.n	800b37c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b368:	4b91      	ldr	r3, [pc, #580]	; (800b5b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	08db      	lsrs	r3, r3, #3
 800b36e:	f003 0303 	and.w	r3, r3, #3
 800b372:	4a90      	ldr	r2, [pc, #576]	; (800b5b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b374:	fa22 f303 	lsr.w	r3, r2, r3
 800b378:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b37a:	e111      	b.n	800b5a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b37c:	4b8d      	ldr	r3, [pc, #564]	; (800b5b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b37e:	61bb      	str	r3, [r7, #24]
      break;
 800b380:	e10e      	b.n	800b5a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b382:	4b8d      	ldr	r3, [pc, #564]	; (800b5b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b384:	61bb      	str	r3, [r7, #24]
      break;
 800b386:	e10b      	b.n	800b5a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b388:	4b8c      	ldr	r3, [pc, #560]	; (800b5bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b38a:	61bb      	str	r3, [r7, #24]
      break;
 800b38c:	e108      	b.n	800b5a0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b38e:	4b88      	ldr	r3, [pc, #544]	; (800b5b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b392:	f003 0303 	and.w	r3, r3, #3
 800b396:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b398:	4b85      	ldr	r3, [pc, #532]	; (800b5b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b39a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b39c:	091b      	lsrs	r3, r3, #4
 800b39e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b3a2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b3a4:	4b82      	ldr	r3, [pc, #520]	; (800b5b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3a8:	f003 0301 	and.w	r3, r3, #1
 800b3ac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b3ae:	4b80      	ldr	r3, [pc, #512]	; (800b5b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3b2:	08db      	lsrs	r3, r3, #3
 800b3b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b3b8:	68fa      	ldr	r2, [r7, #12]
 800b3ba:	fb02 f303 	mul.w	r3, r2, r3
 800b3be:	ee07 3a90 	vmov	s15, r3
 800b3c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3c6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	f000 80e1 	beq.w	800b594 <HAL_RCC_GetSysClockFreq+0x2b8>
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	2b02      	cmp	r3, #2
 800b3d6:	f000 8083 	beq.w	800b4e0 <HAL_RCC_GetSysClockFreq+0x204>
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	2b02      	cmp	r3, #2
 800b3de:	f200 80a1 	bhi.w	800b524 <HAL_RCC_GetSysClockFreq+0x248>
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d003      	beq.n	800b3f0 <HAL_RCC_GetSysClockFreq+0x114>
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	2b01      	cmp	r3, #1
 800b3ec:	d056      	beq.n	800b49c <HAL_RCC_GetSysClockFreq+0x1c0>
 800b3ee:	e099      	b.n	800b524 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b3f0:	4b6f      	ldr	r3, [pc, #444]	; (800b5b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f003 0320 	and.w	r3, r3, #32
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d02d      	beq.n	800b458 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b3fc:	4b6c      	ldr	r3, [pc, #432]	; (800b5b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	08db      	lsrs	r3, r3, #3
 800b402:	f003 0303 	and.w	r3, r3, #3
 800b406:	4a6b      	ldr	r2, [pc, #428]	; (800b5b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b408:	fa22 f303 	lsr.w	r3, r2, r3
 800b40c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	ee07 3a90 	vmov	s15, r3
 800b414:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	ee07 3a90 	vmov	s15, r3
 800b41e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b426:	4b62      	ldr	r3, [pc, #392]	; (800b5b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b42a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b42e:	ee07 3a90 	vmov	s15, r3
 800b432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b436:	ed97 6a02 	vldr	s12, [r7, #8]
 800b43a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800b5c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b43e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b446:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b44a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b44e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b452:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b456:	e087      	b.n	800b568 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	ee07 3a90 	vmov	s15, r3
 800b45e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b462:	eddf 6a58 	vldr	s13, [pc, #352]	; 800b5c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b46a:	4b51      	ldr	r3, [pc, #324]	; (800b5b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b46c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b46e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b472:	ee07 3a90 	vmov	s15, r3
 800b476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b47a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b47e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800b5c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b48a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b48e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b492:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b496:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b49a:	e065      	b.n	800b568 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	ee07 3a90 	vmov	s15, r3
 800b4a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4a6:	eddf 6a48 	vldr	s13, [pc, #288]	; 800b5c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b4aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4ae:	4b40      	ldr	r3, [pc, #256]	; (800b5b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4b6:	ee07 3a90 	vmov	s15, r3
 800b4ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4be:	ed97 6a02 	vldr	s12, [r7, #8]
 800b4c2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800b5c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b4c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b4de:	e043      	b.n	800b568 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	ee07 3a90 	vmov	s15, r3
 800b4e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4ea:	eddf 6a38 	vldr	s13, [pc, #224]	; 800b5cc <HAL_RCC_GetSysClockFreq+0x2f0>
 800b4ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4f2:	4b2f      	ldr	r3, [pc, #188]	; (800b5b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4fa:	ee07 3a90 	vmov	s15, r3
 800b4fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b502:	ed97 6a02 	vldr	s12, [r7, #8]
 800b506:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800b5c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b50a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b50e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b512:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b51a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b51e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b522:	e021      	b.n	800b568 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	ee07 3a90 	vmov	s15, r3
 800b52a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b52e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800b5c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b536:	4b1e      	ldr	r3, [pc, #120]	; (800b5b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b53a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b53e:	ee07 3a90 	vmov	s15, r3
 800b542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b546:	ed97 6a02 	vldr	s12, [r7, #8]
 800b54a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b5c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b54e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b556:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b55a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b55e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b562:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b566:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b568:	4b11      	ldr	r3, [pc, #68]	; (800b5b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b56a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b56c:	0a5b      	lsrs	r3, r3, #9
 800b56e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b572:	3301      	adds	r3, #1
 800b574:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	ee07 3a90 	vmov	s15, r3
 800b57c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b580:	edd7 6a07 	vldr	s13, [r7, #28]
 800b584:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b588:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b58c:	ee17 3a90 	vmov	r3, s15
 800b590:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b592:	e005      	b.n	800b5a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b594:	2300      	movs	r3, #0
 800b596:	61bb      	str	r3, [r7, #24]
      break;
 800b598:	e002      	b.n	800b5a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b59a:	4b07      	ldr	r3, [pc, #28]	; (800b5b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b59c:	61bb      	str	r3, [r7, #24]
      break;
 800b59e:	bf00      	nop
  }

  return sysclockfreq;
 800b5a0:	69bb      	ldr	r3, [r7, #24]
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3724      	adds	r7, #36	; 0x24
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ac:	4770      	bx	lr
 800b5ae:	bf00      	nop
 800b5b0:	58024400 	.word	0x58024400
 800b5b4:	03d09000 	.word	0x03d09000
 800b5b8:	003d0900 	.word	0x003d0900
 800b5bc:	02faf080 	.word	0x02faf080
 800b5c0:	46000000 	.word	0x46000000
 800b5c4:	4c742400 	.word	0x4c742400
 800b5c8:	4a742400 	.word	0x4a742400
 800b5cc:	4c3ebc20 	.word	0x4c3ebc20

0800b5d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b082      	sub	sp, #8
 800b5d4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b5d6:	f7ff fe81 	bl	800b2dc <HAL_RCC_GetSysClockFreq>
 800b5da:	4602      	mov	r2, r0
 800b5dc:	4b10      	ldr	r3, [pc, #64]	; (800b620 <HAL_RCC_GetHCLKFreq+0x50>)
 800b5de:	699b      	ldr	r3, [r3, #24]
 800b5e0:	0a1b      	lsrs	r3, r3, #8
 800b5e2:	f003 030f 	and.w	r3, r3, #15
 800b5e6:	490f      	ldr	r1, [pc, #60]	; (800b624 <HAL_RCC_GetHCLKFreq+0x54>)
 800b5e8:	5ccb      	ldrb	r3, [r1, r3]
 800b5ea:	f003 031f 	and.w	r3, r3, #31
 800b5ee:	fa22 f303 	lsr.w	r3, r2, r3
 800b5f2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b5f4:	4b0a      	ldr	r3, [pc, #40]	; (800b620 <HAL_RCC_GetHCLKFreq+0x50>)
 800b5f6:	699b      	ldr	r3, [r3, #24]
 800b5f8:	f003 030f 	and.w	r3, r3, #15
 800b5fc:	4a09      	ldr	r2, [pc, #36]	; (800b624 <HAL_RCC_GetHCLKFreq+0x54>)
 800b5fe:	5cd3      	ldrb	r3, [r2, r3]
 800b600:	f003 031f 	and.w	r3, r3, #31
 800b604:	687a      	ldr	r2, [r7, #4]
 800b606:	fa22 f303 	lsr.w	r3, r2, r3
 800b60a:	4a07      	ldr	r2, [pc, #28]	; (800b628 <HAL_RCC_GetHCLKFreq+0x58>)
 800b60c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b60e:	4a07      	ldr	r2, [pc, #28]	; (800b62c <HAL_RCC_GetHCLKFreq+0x5c>)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b614:	4b04      	ldr	r3, [pc, #16]	; (800b628 <HAL_RCC_GetHCLKFreq+0x58>)
 800b616:	681b      	ldr	r3, [r3, #0]
}
 800b618:	4618      	mov	r0, r3
 800b61a:	3708      	adds	r7, #8
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bd80      	pop	{r7, pc}
 800b620:	58024400 	.word	0x58024400
 800b624:	0801f7b0 	.word	0x0801f7b0
 800b628:	24000004 	.word	0x24000004
 800b62c:	24000000 	.word	0x24000000

0800b630 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b634:	f7ff ffcc 	bl	800b5d0 <HAL_RCC_GetHCLKFreq>
 800b638:	4602      	mov	r2, r0
 800b63a:	4b06      	ldr	r3, [pc, #24]	; (800b654 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b63c:	69db      	ldr	r3, [r3, #28]
 800b63e:	091b      	lsrs	r3, r3, #4
 800b640:	f003 0307 	and.w	r3, r3, #7
 800b644:	4904      	ldr	r1, [pc, #16]	; (800b658 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b646:	5ccb      	ldrb	r3, [r1, r3]
 800b648:	f003 031f 	and.w	r3, r3, #31
 800b64c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b650:	4618      	mov	r0, r3
 800b652:	bd80      	pop	{r7, pc}
 800b654:	58024400 	.word	0x58024400
 800b658:	0801f7b0 	.word	0x0801f7b0

0800b65c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b660:	f7ff ffb6 	bl	800b5d0 <HAL_RCC_GetHCLKFreq>
 800b664:	4602      	mov	r2, r0
 800b666:	4b06      	ldr	r3, [pc, #24]	; (800b680 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b668:	69db      	ldr	r3, [r3, #28]
 800b66a:	0a1b      	lsrs	r3, r3, #8
 800b66c:	f003 0307 	and.w	r3, r3, #7
 800b670:	4904      	ldr	r1, [pc, #16]	; (800b684 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b672:	5ccb      	ldrb	r3, [r1, r3]
 800b674:	f003 031f 	and.w	r3, r3, #31
 800b678:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	bd80      	pop	{r7, pc}
 800b680:	58024400 	.word	0x58024400
 800b684:	0801f7b0 	.word	0x0801f7b0

0800b688 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b688:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b68c:	b0c6      	sub	sp, #280	; 0x118
 800b68e:	af00      	add	r7, sp, #0
 800b690:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b694:	2300      	movs	r3, #0
 800b696:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b69a:	2300      	movs	r3, #0
 800b69c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b6a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800b6ac:	2500      	movs	r5, #0
 800b6ae:	ea54 0305 	orrs.w	r3, r4, r5
 800b6b2:	d049      	beq.n	800b748 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b6b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b6ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b6be:	d02f      	beq.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b6c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b6c4:	d828      	bhi.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b6c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b6ca:	d01a      	beq.n	800b702 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b6cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b6d0:	d822      	bhi.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d003      	beq.n	800b6de <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b6d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b6da:	d007      	beq.n	800b6ec <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b6dc:	e01c      	b.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6de:	4bab      	ldr	r3, [pc, #684]	; (800b98c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b6e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6e2:	4aaa      	ldr	r2, [pc, #680]	; (800b98c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b6e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b6ea:	e01a      	b.n	800b722 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b6ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6f0:	3308      	adds	r3, #8
 800b6f2:	2102      	movs	r1, #2
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f002 fa49 	bl	800db8c <RCCEx_PLL2_Config>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b700:	e00f      	b.n	800b722 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b702:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b706:	3328      	adds	r3, #40	; 0x28
 800b708:	2102      	movs	r1, #2
 800b70a:	4618      	mov	r0, r3
 800b70c:	f002 faf0 	bl	800dcf0 <RCCEx_PLL3_Config>
 800b710:	4603      	mov	r3, r0
 800b712:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b716:	e004      	b.n	800b722 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b718:	2301      	movs	r3, #1
 800b71a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b71e:	e000      	b.n	800b722 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b720:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b722:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b726:	2b00      	cmp	r3, #0
 800b728:	d10a      	bne.n	800b740 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b72a:	4b98      	ldr	r3, [pc, #608]	; (800b98c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b72c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b72e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b732:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b736:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b738:	4a94      	ldr	r2, [pc, #592]	; (800b98c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b73a:	430b      	orrs	r3, r1
 800b73c:	6513      	str	r3, [r2, #80]	; 0x50
 800b73e:	e003      	b.n	800b748 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b740:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b744:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b748:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b750:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b754:	f04f 0900 	mov.w	r9, #0
 800b758:	ea58 0309 	orrs.w	r3, r8, r9
 800b75c:	d047      	beq.n	800b7ee <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b75e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b764:	2b04      	cmp	r3, #4
 800b766:	d82a      	bhi.n	800b7be <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b768:	a201      	add	r2, pc, #4	; (adr r2, 800b770 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b76a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b76e:	bf00      	nop
 800b770:	0800b785 	.word	0x0800b785
 800b774:	0800b793 	.word	0x0800b793
 800b778:	0800b7a9 	.word	0x0800b7a9
 800b77c:	0800b7c7 	.word	0x0800b7c7
 800b780:	0800b7c7 	.word	0x0800b7c7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b784:	4b81      	ldr	r3, [pc, #516]	; (800b98c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b788:	4a80      	ldr	r2, [pc, #512]	; (800b98c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b78a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b78e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b790:	e01a      	b.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b792:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b796:	3308      	adds	r3, #8
 800b798:	2100      	movs	r1, #0
 800b79a:	4618      	mov	r0, r3
 800b79c:	f002 f9f6 	bl	800db8c <RCCEx_PLL2_Config>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b7a6:	e00f      	b.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b7a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7ac:	3328      	adds	r3, #40	; 0x28
 800b7ae:	2100      	movs	r1, #0
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f002 fa9d 	bl	800dcf0 <RCCEx_PLL3_Config>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b7bc:	e004      	b.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7be:	2301      	movs	r3, #1
 800b7c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b7c4:	e000      	b.n	800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b7c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d10a      	bne.n	800b7e6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b7d0:	4b6e      	ldr	r3, [pc, #440]	; (800b98c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b7d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7d4:	f023 0107 	bic.w	r1, r3, #7
 800b7d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7de:	4a6b      	ldr	r2, [pc, #428]	; (800b98c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b7e0:	430b      	orrs	r3, r1
 800b7e2:	6513      	str	r3, [r2, #80]	; 0x50
 800b7e4:	e003      	b.n	800b7ee <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7ea:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b7ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f6:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800b7fa:	f04f 0b00 	mov.w	fp, #0
 800b7fe:	ea5a 030b 	orrs.w	r3, sl, fp
 800b802:	d05b      	beq.n	800b8bc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b804:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b808:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b80c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800b810:	d03b      	beq.n	800b88a <HAL_RCCEx_PeriphCLKConfig+0x202>
 800b812:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800b816:	d834      	bhi.n	800b882 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b818:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b81c:	d037      	beq.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800b81e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b822:	d82e      	bhi.n	800b882 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b824:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b828:	d033      	beq.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800b82a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b82e:	d828      	bhi.n	800b882 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b830:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b834:	d01a      	beq.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800b836:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b83a:	d822      	bhi.n	800b882 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d003      	beq.n	800b848 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800b840:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b844:	d007      	beq.n	800b856 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800b846:	e01c      	b.n	800b882 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b848:	4b50      	ldr	r3, [pc, #320]	; (800b98c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b84c:	4a4f      	ldr	r2, [pc, #316]	; (800b98c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b84e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b852:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b854:	e01e      	b.n	800b894 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b856:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b85a:	3308      	adds	r3, #8
 800b85c:	2100      	movs	r1, #0
 800b85e:	4618      	mov	r0, r3
 800b860:	f002 f994 	bl	800db8c <RCCEx_PLL2_Config>
 800b864:	4603      	mov	r3, r0
 800b866:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b86a:	e013      	b.n	800b894 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b86c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b870:	3328      	adds	r3, #40	; 0x28
 800b872:	2100      	movs	r1, #0
 800b874:	4618      	mov	r0, r3
 800b876:	f002 fa3b 	bl	800dcf0 <RCCEx_PLL3_Config>
 800b87a:	4603      	mov	r3, r0
 800b87c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b880:	e008      	b.n	800b894 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b882:	2301      	movs	r3, #1
 800b884:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b888:	e004      	b.n	800b894 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b88a:	bf00      	nop
 800b88c:	e002      	b.n	800b894 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b88e:	bf00      	nop
 800b890:	e000      	b.n	800b894 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800b892:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b894:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d10b      	bne.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b89c:	4b3b      	ldr	r3, [pc, #236]	; (800b98c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b89e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8a0:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b8a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b8ac:	4a37      	ldr	r2, [pc, #220]	; (800b98c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b8ae:	430b      	orrs	r3, r1
 800b8b0:	6593      	str	r3, [r2, #88]	; 0x58
 800b8b2:	e003      	b.n	800b8bc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8b8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b8bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c4:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b8c8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b8d2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b8d6:	460b      	mov	r3, r1
 800b8d8:	4313      	orrs	r3, r2
 800b8da:	d05d      	beq.n	800b998 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b8dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b8e4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800b8e8:	d03b      	beq.n	800b962 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800b8ea:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800b8ee:	d834      	bhi.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b8f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b8f4:	d037      	beq.n	800b966 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800b8f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b8fa:	d82e      	bhi.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b8fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b900:	d033      	beq.n	800b96a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800b902:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b906:	d828      	bhi.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b908:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b90c:	d01a      	beq.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800b90e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b912:	d822      	bhi.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b914:	2b00      	cmp	r3, #0
 800b916:	d003      	beq.n	800b920 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800b918:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b91c:	d007      	beq.n	800b92e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800b91e:	e01c      	b.n	800b95a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b920:	4b1a      	ldr	r3, [pc, #104]	; (800b98c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b924:	4a19      	ldr	r2, [pc, #100]	; (800b98c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b926:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b92a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b92c:	e01e      	b.n	800b96c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b92e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b932:	3308      	adds	r3, #8
 800b934:	2100      	movs	r1, #0
 800b936:	4618      	mov	r0, r3
 800b938:	f002 f928 	bl	800db8c <RCCEx_PLL2_Config>
 800b93c:	4603      	mov	r3, r0
 800b93e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b942:	e013      	b.n	800b96c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b944:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b948:	3328      	adds	r3, #40	; 0x28
 800b94a:	2100      	movs	r1, #0
 800b94c:	4618      	mov	r0, r3
 800b94e:	f002 f9cf 	bl	800dcf0 <RCCEx_PLL3_Config>
 800b952:	4603      	mov	r3, r0
 800b954:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b958:	e008      	b.n	800b96c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b95a:	2301      	movs	r3, #1
 800b95c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b960:	e004      	b.n	800b96c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b962:	bf00      	nop
 800b964:	e002      	b.n	800b96c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b966:	bf00      	nop
 800b968:	e000      	b.n	800b96c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800b96a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b96c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b970:	2b00      	cmp	r3, #0
 800b972:	d10d      	bne.n	800b990 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b974:	4b05      	ldr	r3, [pc, #20]	; (800b98c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b978:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b97c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b980:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b984:	4a01      	ldr	r2, [pc, #4]	; (800b98c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800b986:	430b      	orrs	r3, r1
 800b988:	6593      	str	r3, [r2, #88]	; 0x58
 800b98a:	e005      	b.n	800b998 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800b98c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b990:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b994:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b998:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b9a4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b9ae:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b9b2:	460b      	mov	r3, r1
 800b9b4:	4313      	orrs	r3, r2
 800b9b6:	d03a      	beq.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800b9b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9be:	2b30      	cmp	r3, #48	; 0x30
 800b9c0:	d01f      	beq.n	800ba02 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800b9c2:	2b30      	cmp	r3, #48	; 0x30
 800b9c4:	d819      	bhi.n	800b9fa <HAL_RCCEx_PeriphCLKConfig+0x372>
 800b9c6:	2b20      	cmp	r3, #32
 800b9c8:	d00c      	beq.n	800b9e4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800b9ca:	2b20      	cmp	r3, #32
 800b9cc:	d815      	bhi.n	800b9fa <HAL_RCCEx_PeriphCLKConfig+0x372>
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d019      	beq.n	800ba06 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b9d2:	2b10      	cmp	r3, #16
 800b9d4:	d111      	bne.n	800b9fa <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9d6:	4baa      	ldr	r3, [pc, #680]	; (800bc80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b9d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9da:	4aa9      	ldr	r2, [pc, #676]	; (800bc80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b9dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b9e2:	e011      	b.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b9e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9e8:	3308      	adds	r3, #8
 800b9ea:	2102      	movs	r1, #2
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f002 f8cd 	bl	800db8c <RCCEx_PLL2_Config>
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800b9f8:	e006      	b.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ba00:	e002      	b.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800ba02:	bf00      	nop
 800ba04:	e000      	b.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800ba06:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d10a      	bne.n	800ba26 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800ba10:	4b9b      	ldr	r3, [pc, #620]	; (800bc80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba14:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800ba18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba1e:	4a98      	ldr	r2, [pc, #608]	; (800bc80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba20:	430b      	orrs	r3, r1
 800ba22:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ba24:	e003      	b.n	800ba2e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba26:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba2a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ba2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba36:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800ba3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ba3e:	2300      	movs	r3, #0
 800ba40:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ba44:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800ba48:	460b      	mov	r3, r1
 800ba4a:	4313      	orrs	r3, r2
 800ba4c:	d051      	beq.n	800baf2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ba4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba58:	d035      	beq.n	800bac6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800ba5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba5e:	d82e      	bhi.n	800babe <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ba60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ba64:	d031      	beq.n	800baca <HAL_RCCEx_PeriphCLKConfig+0x442>
 800ba66:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ba6a:	d828      	bhi.n	800babe <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ba6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba70:	d01a      	beq.n	800baa8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800ba72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba76:	d822      	bhi.n	800babe <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d003      	beq.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800ba7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba80:	d007      	beq.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800ba82:	e01c      	b.n	800babe <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba84:	4b7e      	ldr	r3, [pc, #504]	; (800bc80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba88:	4a7d      	ldr	r2, [pc, #500]	; (800bc80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ba90:	e01c      	b.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ba92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba96:	3308      	adds	r3, #8
 800ba98:	2100      	movs	r1, #0
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f002 f876 	bl	800db8c <RCCEx_PLL2_Config>
 800baa0:	4603      	mov	r3, r0
 800baa2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800baa6:	e011      	b.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800baa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baac:	3328      	adds	r3, #40	; 0x28
 800baae:	2100      	movs	r1, #0
 800bab0:	4618      	mov	r0, r3
 800bab2:	f002 f91d 	bl	800dcf0 <RCCEx_PLL3_Config>
 800bab6:	4603      	mov	r3, r0
 800bab8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800babc:	e006      	b.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800babe:	2301      	movs	r3, #1
 800bac0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bac4:	e002      	b.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800bac6:	bf00      	nop
 800bac8:	e000      	b.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800baca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bacc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d10a      	bne.n	800baea <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bad4:	4b6a      	ldr	r3, [pc, #424]	; (800bc80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bad8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800badc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bae2:	4a67      	ldr	r2, [pc, #412]	; (800bc80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bae4:	430b      	orrs	r3, r1
 800bae6:	6513      	str	r3, [r2, #80]	; 0x50
 800bae8:	e003      	b.n	800baf2 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800baee:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800baf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bafa:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800bafe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bb02:	2300      	movs	r3, #0
 800bb04:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bb08:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800bb0c:	460b      	mov	r3, r1
 800bb0e:	4313      	orrs	r3, r2
 800bb10:	d053      	beq.n	800bbba <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800bb12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bb1c:	d033      	beq.n	800bb86 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800bb1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bb22:	d82c      	bhi.n	800bb7e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bb24:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bb28:	d02f      	beq.n	800bb8a <HAL_RCCEx_PeriphCLKConfig+0x502>
 800bb2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800bb2e:	d826      	bhi.n	800bb7e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bb30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bb34:	d02b      	beq.n	800bb8e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800bb36:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800bb3a:	d820      	bhi.n	800bb7e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bb3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb40:	d012      	beq.n	800bb68 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800bb42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb46:	d81a      	bhi.n	800bb7e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d022      	beq.n	800bb92 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800bb4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb50:	d115      	bne.n	800bb7e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bb52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb56:	3308      	adds	r3, #8
 800bb58:	2101      	movs	r1, #1
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f002 f816 	bl	800db8c <RCCEx_PLL2_Config>
 800bb60:	4603      	mov	r3, r0
 800bb62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bb66:	e015      	b.n	800bb94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bb68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb6c:	3328      	adds	r3, #40	; 0x28
 800bb6e:	2101      	movs	r1, #1
 800bb70:	4618      	mov	r0, r3
 800bb72:	f002 f8bd 	bl	800dcf0 <RCCEx_PLL3_Config>
 800bb76:	4603      	mov	r3, r0
 800bb78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bb7c:	e00a      	b.n	800bb94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb7e:	2301      	movs	r3, #1
 800bb80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bb84:	e006      	b.n	800bb94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bb86:	bf00      	nop
 800bb88:	e004      	b.n	800bb94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bb8a:	bf00      	nop
 800bb8c:	e002      	b.n	800bb94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bb8e:	bf00      	nop
 800bb90:	e000      	b.n	800bb94 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bb92:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d10a      	bne.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bb9c:	4b38      	ldr	r3, [pc, #224]	; (800bc80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bba0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800bba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bbaa:	4a35      	ldr	r2, [pc, #212]	; (800bc80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bbac:	430b      	orrs	r3, r1
 800bbae:	6513      	str	r3, [r2, #80]	; 0x50
 800bbb0:	e003      	b.n	800bbba <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbb2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbb6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bbba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc2:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800bbc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bbca:	2300      	movs	r3, #0
 800bbcc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bbd0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800bbd4:	460b      	mov	r3, r1
 800bbd6:	4313      	orrs	r3, r2
 800bbd8:	d058      	beq.n	800bc8c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800bbda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbde:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bbe2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bbe6:	d033      	beq.n	800bc50 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800bbe8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bbec:	d82c      	bhi.n	800bc48 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bbee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbf2:	d02f      	beq.n	800bc54 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800bbf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbf8:	d826      	bhi.n	800bc48 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bbfa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bbfe:	d02b      	beq.n	800bc58 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800bc00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bc04:	d820      	bhi.n	800bc48 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bc06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc0a:	d012      	beq.n	800bc32 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800bc0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc10:	d81a      	bhi.n	800bc48 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d022      	beq.n	800bc5c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800bc16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bc1a:	d115      	bne.n	800bc48 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bc1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc20:	3308      	adds	r3, #8
 800bc22:	2101      	movs	r1, #1
 800bc24:	4618      	mov	r0, r3
 800bc26:	f001 ffb1 	bl	800db8c <RCCEx_PLL2_Config>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bc30:	e015      	b.n	800bc5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bc32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc36:	3328      	adds	r3, #40	; 0x28
 800bc38:	2101      	movs	r1, #1
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f002 f858 	bl	800dcf0 <RCCEx_PLL3_Config>
 800bc40:	4603      	mov	r3, r0
 800bc42:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bc46:	e00a      	b.n	800bc5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800bc48:	2301      	movs	r3, #1
 800bc4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bc4e:	e006      	b.n	800bc5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bc50:	bf00      	nop
 800bc52:	e004      	b.n	800bc5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bc54:	bf00      	nop
 800bc56:	e002      	b.n	800bc5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bc58:	bf00      	nop
 800bc5a:	e000      	b.n	800bc5e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bc5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc5e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d10e      	bne.n	800bc84 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bc66:	4b06      	ldr	r3, [pc, #24]	; (800bc80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc6a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bc6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc72:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800bc76:	4a02      	ldr	r2, [pc, #8]	; (800bc80 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc78:	430b      	orrs	r3, r1
 800bc7a:	6593      	str	r3, [r2, #88]	; 0x58
 800bc7c:	e006      	b.n	800bc8c <HAL_RCCEx_PeriphCLKConfig+0x604>
 800bc7e:	bf00      	nop
 800bc80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc84:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc88:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bc8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc94:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800bc98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bca2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800bca6:	460b      	mov	r3, r1
 800bca8:	4313      	orrs	r3, r2
 800bcaa:	d037      	beq.n	800bd1c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800bcac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcb6:	d00e      	beq.n	800bcd6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800bcb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcbc:	d816      	bhi.n	800bcec <HAL_RCCEx_PeriphCLKConfig+0x664>
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d018      	beq.n	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800bcc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bcc6:	d111      	bne.n	800bcec <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bcc8:	4bc4      	ldr	r3, [pc, #784]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bcca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bccc:	4ac3      	ldr	r2, [pc, #780]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bcce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bcd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bcd4:	e00f      	b.n	800bcf6 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bcd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcda:	3308      	adds	r3, #8
 800bcdc:	2101      	movs	r1, #1
 800bcde:	4618      	mov	r0, r3
 800bce0:	f001 ff54 	bl	800db8c <RCCEx_PLL2_Config>
 800bce4:	4603      	mov	r3, r0
 800bce6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bcea:	e004      	b.n	800bcf6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bcec:	2301      	movs	r3, #1
 800bcee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bcf2:	e000      	b.n	800bcf6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800bcf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcf6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d10a      	bne.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bcfe:	4bb7      	ldr	r3, [pc, #732]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd02:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bd06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd0c:	4ab3      	ldr	r2, [pc, #716]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd0e:	430b      	orrs	r3, r1
 800bd10:	6513      	str	r3, [r2, #80]	; 0x50
 800bd12:	e003      	b.n	800bd1c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd18:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bd1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd24:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800bd28:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800bd32:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800bd36:	460b      	mov	r3, r1
 800bd38:	4313      	orrs	r3, r2
 800bd3a:	d039      	beq.n	800bdb0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800bd3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bd42:	2b03      	cmp	r3, #3
 800bd44:	d81c      	bhi.n	800bd80 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800bd46:	a201      	add	r2, pc, #4	; (adr r2, 800bd4c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800bd48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd4c:	0800bd89 	.word	0x0800bd89
 800bd50:	0800bd5d 	.word	0x0800bd5d
 800bd54:	0800bd6b 	.word	0x0800bd6b
 800bd58:	0800bd89 	.word	0x0800bd89
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd5c:	4b9f      	ldr	r3, [pc, #636]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd60:	4a9e      	ldr	r2, [pc, #632]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bd68:	e00f      	b.n	800bd8a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bd6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd6e:	3308      	adds	r3, #8
 800bd70:	2102      	movs	r1, #2
 800bd72:	4618      	mov	r0, r3
 800bd74:	f001 ff0a 	bl	800db8c <RCCEx_PLL2_Config>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bd7e:	e004      	b.n	800bd8a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bd80:	2301      	movs	r3, #1
 800bd82:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bd86:	e000      	b.n	800bd8a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800bd88:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd8a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d10a      	bne.n	800bda8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bd92:	4b92      	ldr	r3, [pc, #584]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd96:	f023 0103 	bic.w	r1, r3, #3
 800bd9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bda0:	4a8e      	ldr	r2, [pc, #568]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bda2:	430b      	orrs	r3, r1
 800bda4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bda6:	e003      	b.n	800bdb0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bda8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bdac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bdb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800bdbc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bdc6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800bdca:	460b      	mov	r3, r1
 800bdcc:	4313      	orrs	r3, r2
 800bdce:	f000 8099 	beq.w	800bf04 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bdd2:	4b83      	ldr	r3, [pc, #524]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	4a82      	ldr	r2, [pc, #520]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800bdd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bddc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800bdde:	f7f8 f919 	bl	8004014 <HAL_GetTick>
 800bde2:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bde6:	e00b      	b.n	800be00 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bde8:	f7f8 f914 	bl	8004014 <HAL_GetTick>
 800bdec:	4602      	mov	r2, r0
 800bdee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800bdf2:	1ad3      	subs	r3, r2, r3
 800bdf4:	2b64      	cmp	r3, #100	; 0x64
 800bdf6:	d903      	bls.n	800be00 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800bdf8:	2303      	movs	r3, #3
 800bdfa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bdfe:	e005      	b.n	800be0c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800be00:	4b77      	ldr	r3, [pc, #476]	; (800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d0ed      	beq.n	800bde8 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800be0c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be10:	2b00      	cmp	r3, #0
 800be12:	d173      	bne.n	800befc <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800be14:	4b71      	ldr	r3, [pc, #452]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800be18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800be20:	4053      	eors	r3, r2
 800be22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be26:	2b00      	cmp	r3, #0
 800be28:	d015      	beq.n	800be56 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800be2a:	4b6c      	ldr	r3, [pc, #432]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be32:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800be36:	4b69      	ldr	r3, [pc, #420]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be3a:	4a68      	ldr	r2, [pc, #416]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800be40:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800be42:	4b66      	ldr	r3, [pc, #408]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be46:	4a65      	ldr	r2, [pc, #404]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800be4c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800be4e:	4a63      	ldr	r2, [pc, #396]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800be54:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800be56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800be5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be62:	d118      	bne.n	800be96 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be64:	f7f8 f8d6 	bl	8004014 <HAL_GetTick>
 800be68:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800be6c:	e00d      	b.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800be6e:	f7f8 f8d1 	bl	8004014 <HAL_GetTick>
 800be72:	4602      	mov	r2, r0
 800be74:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800be78:	1ad2      	subs	r2, r2, r3
 800be7a:	f241 3388 	movw	r3, #5000	; 0x1388
 800be7e:	429a      	cmp	r2, r3
 800be80:	d903      	bls.n	800be8a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800be82:	2303      	movs	r3, #3
 800be84:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800be88:	e005      	b.n	800be96 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800be8a:	4b54      	ldr	r3, [pc, #336]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be8e:	f003 0302 	and.w	r3, r3, #2
 800be92:	2b00      	cmp	r3, #0
 800be94:	d0eb      	beq.n	800be6e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800be96:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d129      	bne.n	800bef2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800be9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bea2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800beaa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800beae:	d10e      	bne.n	800bece <HAL_RCCEx_PeriphCLKConfig+0x846>
 800beb0:	4b4a      	ldr	r3, [pc, #296]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800beb2:	691b      	ldr	r3, [r3, #16]
 800beb4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800beb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bebc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bec0:	091a      	lsrs	r2, r3, #4
 800bec2:	4b48      	ldr	r3, [pc, #288]	; (800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800bec4:	4013      	ands	r3, r2
 800bec6:	4a45      	ldr	r2, [pc, #276]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bec8:	430b      	orrs	r3, r1
 800beca:	6113      	str	r3, [r2, #16]
 800becc:	e005      	b.n	800beda <HAL_RCCEx_PeriphCLKConfig+0x852>
 800bece:	4b43      	ldr	r3, [pc, #268]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bed0:	691b      	ldr	r3, [r3, #16]
 800bed2:	4a42      	ldr	r2, [pc, #264]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bed4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bed8:	6113      	str	r3, [r2, #16]
 800beda:	4b40      	ldr	r3, [pc, #256]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bedc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800bede:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bee2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800bee6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800beea:	4a3c      	ldr	r2, [pc, #240]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800beec:	430b      	orrs	r3, r1
 800beee:	6713      	str	r3, [r2, #112]	; 0x70
 800bef0:	e008      	b.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bef2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bef6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800befa:	e003      	b.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800befc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bf00:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bf04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf0c:	f002 0301 	and.w	r3, r2, #1
 800bf10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bf14:	2300      	movs	r3, #0
 800bf16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800bf1a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800bf1e:	460b      	mov	r3, r1
 800bf20:	4313      	orrs	r3, r2
 800bf22:	f000 808f 	beq.w	800c044 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800bf26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf2c:	2b28      	cmp	r3, #40	; 0x28
 800bf2e:	d871      	bhi.n	800c014 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800bf30:	a201      	add	r2, pc, #4	; (adr r2, 800bf38 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800bf32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf36:	bf00      	nop
 800bf38:	0800c01d 	.word	0x0800c01d
 800bf3c:	0800c015 	.word	0x0800c015
 800bf40:	0800c015 	.word	0x0800c015
 800bf44:	0800c015 	.word	0x0800c015
 800bf48:	0800c015 	.word	0x0800c015
 800bf4c:	0800c015 	.word	0x0800c015
 800bf50:	0800c015 	.word	0x0800c015
 800bf54:	0800c015 	.word	0x0800c015
 800bf58:	0800bfe9 	.word	0x0800bfe9
 800bf5c:	0800c015 	.word	0x0800c015
 800bf60:	0800c015 	.word	0x0800c015
 800bf64:	0800c015 	.word	0x0800c015
 800bf68:	0800c015 	.word	0x0800c015
 800bf6c:	0800c015 	.word	0x0800c015
 800bf70:	0800c015 	.word	0x0800c015
 800bf74:	0800c015 	.word	0x0800c015
 800bf78:	0800bfff 	.word	0x0800bfff
 800bf7c:	0800c015 	.word	0x0800c015
 800bf80:	0800c015 	.word	0x0800c015
 800bf84:	0800c015 	.word	0x0800c015
 800bf88:	0800c015 	.word	0x0800c015
 800bf8c:	0800c015 	.word	0x0800c015
 800bf90:	0800c015 	.word	0x0800c015
 800bf94:	0800c015 	.word	0x0800c015
 800bf98:	0800c01d 	.word	0x0800c01d
 800bf9c:	0800c015 	.word	0x0800c015
 800bfa0:	0800c015 	.word	0x0800c015
 800bfa4:	0800c015 	.word	0x0800c015
 800bfa8:	0800c015 	.word	0x0800c015
 800bfac:	0800c015 	.word	0x0800c015
 800bfb0:	0800c015 	.word	0x0800c015
 800bfb4:	0800c015 	.word	0x0800c015
 800bfb8:	0800c01d 	.word	0x0800c01d
 800bfbc:	0800c015 	.word	0x0800c015
 800bfc0:	0800c015 	.word	0x0800c015
 800bfc4:	0800c015 	.word	0x0800c015
 800bfc8:	0800c015 	.word	0x0800c015
 800bfcc:	0800c015 	.word	0x0800c015
 800bfd0:	0800c015 	.word	0x0800c015
 800bfd4:	0800c015 	.word	0x0800c015
 800bfd8:	0800c01d 	.word	0x0800c01d
 800bfdc:	58024400 	.word	0x58024400
 800bfe0:	58024800 	.word	0x58024800
 800bfe4:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bfe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfec:	3308      	adds	r3, #8
 800bfee:	2101      	movs	r1, #1
 800bff0:	4618      	mov	r0, r3
 800bff2:	f001 fdcb 	bl	800db8c <RCCEx_PLL2_Config>
 800bff6:	4603      	mov	r3, r0
 800bff8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800bffc:	e00f      	b.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c002:	3328      	adds	r3, #40	; 0x28
 800c004:	2101      	movs	r1, #1
 800c006:	4618      	mov	r0, r3
 800c008:	f001 fe72 	bl	800dcf0 <RCCEx_PLL3_Config>
 800c00c:	4603      	mov	r3, r0
 800c00e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c012:	e004      	b.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c014:	2301      	movs	r3, #1
 800c016:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c01a:	e000      	b.n	800c01e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800c01c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c01e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c022:	2b00      	cmp	r3, #0
 800c024:	d10a      	bne.n	800c03c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c026:	4bbf      	ldr	r3, [pc, #764]	; (800c324 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c02a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800c02e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c032:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c034:	4abb      	ldr	r2, [pc, #748]	; (800c324 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c036:	430b      	orrs	r3, r1
 800c038:	6553      	str	r3, [r2, #84]	; 0x54
 800c03a:	e003      	b.n	800c044 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c03c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c040:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c044:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c04c:	f002 0302 	and.w	r3, r2, #2
 800c050:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c054:	2300      	movs	r3, #0
 800c056:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c05a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800c05e:	460b      	mov	r3, r1
 800c060:	4313      	orrs	r3, r2
 800c062:	d041      	beq.n	800c0e8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c068:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c06a:	2b05      	cmp	r3, #5
 800c06c:	d824      	bhi.n	800c0b8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800c06e:	a201      	add	r2, pc, #4	; (adr r2, 800c074 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800c070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c074:	0800c0c1 	.word	0x0800c0c1
 800c078:	0800c08d 	.word	0x0800c08d
 800c07c:	0800c0a3 	.word	0x0800c0a3
 800c080:	0800c0c1 	.word	0x0800c0c1
 800c084:	0800c0c1 	.word	0x0800c0c1
 800c088:	0800c0c1 	.word	0x0800c0c1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c08c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c090:	3308      	adds	r3, #8
 800c092:	2101      	movs	r1, #1
 800c094:	4618      	mov	r0, r3
 800c096:	f001 fd79 	bl	800db8c <RCCEx_PLL2_Config>
 800c09a:	4603      	mov	r3, r0
 800c09c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c0a0:	e00f      	b.n	800c0c2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c0a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0a6:	3328      	adds	r3, #40	; 0x28
 800c0a8:	2101      	movs	r1, #1
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f001 fe20 	bl	800dcf0 <RCCEx_PLL3_Config>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c0b6:	e004      	b.n	800c0c2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c0b8:	2301      	movs	r3, #1
 800c0ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c0be:	e000      	b.n	800c0c2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800c0c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c0c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d10a      	bne.n	800c0e0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c0ca:	4b96      	ldr	r3, [pc, #600]	; (800c324 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c0cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0ce:	f023 0107 	bic.w	r1, r3, #7
 800c0d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c0d8:	4a92      	ldr	r2, [pc, #584]	; (800c324 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c0da:	430b      	orrs	r3, r1
 800c0dc:	6553      	str	r3, [r2, #84]	; 0x54
 800c0de:	e003      	b.n	800c0e8 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c0e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c0e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f0:	f002 0304 	and.w	r3, r2, #4
 800c0f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c0fe:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c102:	460b      	mov	r3, r1
 800c104:	4313      	orrs	r3, r2
 800c106:	d044      	beq.n	800c192 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c108:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c10c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c110:	2b05      	cmp	r3, #5
 800c112:	d825      	bhi.n	800c160 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800c114:	a201      	add	r2, pc, #4	; (adr r2, 800c11c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800c116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c11a:	bf00      	nop
 800c11c:	0800c169 	.word	0x0800c169
 800c120:	0800c135 	.word	0x0800c135
 800c124:	0800c14b 	.word	0x0800c14b
 800c128:	0800c169 	.word	0x0800c169
 800c12c:	0800c169 	.word	0x0800c169
 800c130:	0800c169 	.word	0x0800c169
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c134:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c138:	3308      	adds	r3, #8
 800c13a:	2101      	movs	r1, #1
 800c13c:	4618      	mov	r0, r3
 800c13e:	f001 fd25 	bl	800db8c <RCCEx_PLL2_Config>
 800c142:	4603      	mov	r3, r0
 800c144:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c148:	e00f      	b.n	800c16a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c14a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c14e:	3328      	adds	r3, #40	; 0x28
 800c150:	2101      	movs	r1, #1
 800c152:	4618      	mov	r0, r3
 800c154:	f001 fdcc 	bl	800dcf0 <RCCEx_PLL3_Config>
 800c158:	4603      	mov	r3, r0
 800c15a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c15e:	e004      	b.n	800c16a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c160:	2301      	movs	r3, #1
 800c162:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c166:	e000      	b.n	800c16a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800c168:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c16a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d10b      	bne.n	800c18a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c172:	4b6c      	ldr	r3, [pc, #432]	; (800c324 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c176:	f023 0107 	bic.w	r1, r3, #7
 800c17a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c17e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c182:	4a68      	ldr	r2, [pc, #416]	; (800c324 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c184:	430b      	orrs	r3, r1
 800c186:	6593      	str	r3, [r2, #88]	; 0x58
 800c188:	e003      	b.n	800c192 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c18a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c18e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c192:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c19a:	f002 0320 	and.w	r3, r2, #32
 800c19e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c1a8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800c1ac:	460b      	mov	r3, r1
 800c1ae:	4313      	orrs	r3, r2
 800c1b0:	d055      	beq.n	800c25e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c1b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c1be:	d033      	beq.n	800c228 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800c1c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c1c4:	d82c      	bhi.n	800c220 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c1c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1ca:	d02f      	beq.n	800c22c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c1cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1d0:	d826      	bhi.n	800c220 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c1d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c1d6:	d02b      	beq.n	800c230 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c1d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c1dc:	d820      	bhi.n	800c220 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c1de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1e2:	d012      	beq.n	800c20a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800c1e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1e8:	d81a      	bhi.n	800c220 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d022      	beq.n	800c234 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c1ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c1f2:	d115      	bne.n	800c220 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c1f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1f8:	3308      	adds	r3, #8
 800c1fa:	2100      	movs	r1, #0
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f001 fcc5 	bl	800db8c <RCCEx_PLL2_Config>
 800c202:	4603      	mov	r3, r0
 800c204:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c208:	e015      	b.n	800c236 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c20a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c20e:	3328      	adds	r3, #40	; 0x28
 800c210:	2102      	movs	r1, #2
 800c212:	4618      	mov	r0, r3
 800c214:	f001 fd6c 	bl	800dcf0 <RCCEx_PLL3_Config>
 800c218:	4603      	mov	r3, r0
 800c21a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c21e:	e00a      	b.n	800c236 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c220:	2301      	movs	r3, #1
 800c222:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c226:	e006      	b.n	800c236 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c228:	bf00      	nop
 800c22a:	e004      	b.n	800c236 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c22c:	bf00      	nop
 800c22e:	e002      	b.n	800c236 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c230:	bf00      	nop
 800c232:	e000      	b.n	800c236 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c234:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c236:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d10b      	bne.n	800c256 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c23e:	4b39      	ldr	r3, [pc, #228]	; (800c324 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c242:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800c246:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c24a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c24e:	4a35      	ldr	r2, [pc, #212]	; (800c324 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c250:	430b      	orrs	r3, r1
 800c252:	6553      	str	r3, [r2, #84]	; 0x54
 800c254:	e003      	b.n	800c25e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c256:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c25a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c25e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c266:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800c26a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c26e:	2300      	movs	r3, #0
 800c270:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c274:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800c278:	460b      	mov	r3, r1
 800c27a:	4313      	orrs	r3, r2
 800c27c:	d058      	beq.n	800c330 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c27e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c282:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c286:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c28a:	d033      	beq.n	800c2f4 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800c28c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c290:	d82c      	bhi.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c296:	d02f      	beq.n	800c2f8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c29c:	d826      	bhi.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c29e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c2a2:	d02b      	beq.n	800c2fc <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c2a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c2a8:	d820      	bhi.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c2aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c2ae:	d012      	beq.n	800c2d6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800c2b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c2b4:	d81a      	bhi.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d022      	beq.n	800c300 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c2ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c2be:	d115      	bne.n	800c2ec <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c2c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2c4:	3308      	adds	r3, #8
 800c2c6:	2100      	movs	r1, #0
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f001 fc5f 	bl	800db8c <RCCEx_PLL2_Config>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c2d4:	e015      	b.n	800c302 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c2d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2da:	3328      	adds	r3, #40	; 0x28
 800c2dc:	2102      	movs	r1, #2
 800c2de:	4618      	mov	r0, r3
 800c2e0:	f001 fd06 	bl	800dcf0 <RCCEx_PLL3_Config>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c2ea:	e00a      	b.n	800c302 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c2f2:	e006      	b.n	800c302 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c2f4:	bf00      	nop
 800c2f6:	e004      	b.n	800c302 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c2f8:	bf00      	nop
 800c2fa:	e002      	b.n	800c302 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c2fc:	bf00      	nop
 800c2fe:	e000      	b.n	800c302 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c300:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c302:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c306:	2b00      	cmp	r3, #0
 800c308:	d10e      	bne.n	800c328 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c30a:	4b06      	ldr	r3, [pc, #24]	; (800c324 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c30c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c30e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800c312:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c316:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c31a:	4a02      	ldr	r2, [pc, #8]	; (800c324 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c31c:	430b      	orrs	r3, r1
 800c31e:	6593      	str	r3, [r2, #88]	; 0x58
 800c320:	e006      	b.n	800c330 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800c322:	bf00      	nop
 800c324:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c328:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c32c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c330:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c338:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800c33c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c340:	2300      	movs	r3, #0
 800c342:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c346:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800c34a:	460b      	mov	r3, r1
 800c34c:	4313      	orrs	r3, r2
 800c34e:	d055      	beq.n	800c3fc <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c350:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c354:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c358:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c35c:	d033      	beq.n	800c3c6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800c35e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c362:	d82c      	bhi.n	800c3be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c364:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c368:	d02f      	beq.n	800c3ca <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c36a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c36e:	d826      	bhi.n	800c3be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c370:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c374:	d02b      	beq.n	800c3ce <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c376:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c37a:	d820      	bhi.n	800c3be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c37c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c380:	d012      	beq.n	800c3a8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800c382:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c386:	d81a      	bhi.n	800c3be <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d022      	beq.n	800c3d2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c38c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c390:	d115      	bne.n	800c3be <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c392:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c396:	3308      	adds	r3, #8
 800c398:	2100      	movs	r1, #0
 800c39a:	4618      	mov	r0, r3
 800c39c:	f001 fbf6 	bl	800db8c <RCCEx_PLL2_Config>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c3a6:	e015      	b.n	800c3d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c3a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3ac:	3328      	adds	r3, #40	; 0x28
 800c3ae:	2102      	movs	r1, #2
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f001 fc9d 	bl	800dcf0 <RCCEx_PLL3_Config>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c3bc:	e00a      	b.n	800c3d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c3be:	2301      	movs	r3, #1
 800c3c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c3c4:	e006      	b.n	800c3d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c3c6:	bf00      	nop
 800c3c8:	e004      	b.n	800c3d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c3ca:	bf00      	nop
 800c3cc:	e002      	b.n	800c3d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c3ce:	bf00      	nop
 800c3d0:	e000      	b.n	800c3d4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c3d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c3d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d10b      	bne.n	800c3f4 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c3dc:	4ba0      	ldr	r3, [pc, #640]	; (800c660 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c3de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3e0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800c3e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c3ec:	4a9c      	ldr	r2, [pc, #624]	; (800c660 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c3ee:	430b      	orrs	r3, r1
 800c3f0:	6593      	str	r3, [r2, #88]	; 0x58
 800c3f2:	e003      	b.n	800c3fc <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c3f8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800c3fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c404:	f002 0308 	and.w	r3, r2, #8
 800c408:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c40c:	2300      	movs	r3, #0
 800c40e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c412:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800c416:	460b      	mov	r3, r1
 800c418:	4313      	orrs	r3, r2
 800c41a:	d01e      	beq.n	800c45a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800c41c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c420:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c428:	d10c      	bne.n	800c444 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c42a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c42e:	3328      	adds	r3, #40	; 0x28
 800c430:	2102      	movs	r1, #2
 800c432:	4618      	mov	r0, r3
 800c434:	f001 fc5c 	bl	800dcf0 <RCCEx_PLL3_Config>
 800c438:	4603      	mov	r3, r0
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d002      	beq.n	800c444 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800c43e:	2301      	movs	r3, #1
 800c440:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800c444:	4b86      	ldr	r3, [pc, #536]	; (800c660 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c448:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c44c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c450:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c454:	4a82      	ldr	r2, [pc, #520]	; (800c660 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c456:	430b      	orrs	r3, r1
 800c458:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c45a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c462:	f002 0310 	and.w	r3, r2, #16
 800c466:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c46a:	2300      	movs	r3, #0
 800c46c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c470:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800c474:	460b      	mov	r3, r1
 800c476:	4313      	orrs	r3, r2
 800c478:	d01e      	beq.n	800c4b8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c47a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c47e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c482:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c486:	d10c      	bne.n	800c4a2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c488:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c48c:	3328      	adds	r3, #40	; 0x28
 800c48e:	2102      	movs	r1, #2
 800c490:	4618      	mov	r0, r3
 800c492:	f001 fc2d 	bl	800dcf0 <RCCEx_PLL3_Config>
 800c496:	4603      	mov	r3, r0
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d002      	beq.n	800c4a2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800c49c:	2301      	movs	r3, #1
 800c49e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c4a2:	4b6f      	ldr	r3, [pc, #444]	; (800c660 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c4a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c4aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c4b2:	4a6b      	ldr	r2, [pc, #428]	; (800c660 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c4b4:	430b      	orrs	r3, r1
 800c4b6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c4b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800c4c4:	67bb      	str	r3, [r7, #120]	; 0x78
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c4ca:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800c4ce:	460b      	mov	r3, r1
 800c4d0:	4313      	orrs	r3, r2
 800c4d2:	d03e      	beq.n	800c552 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c4d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c4dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4e0:	d022      	beq.n	800c528 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c4e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4e6:	d81b      	bhi.n	800c520 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d003      	beq.n	800c4f4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800c4ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4f0:	d00b      	beq.n	800c50a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800c4f2:	e015      	b.n	800c520 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c4f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4f8:	3308      	adds	r3, #8
 800c4fa:	2100      	movs	r1, #0
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f001 fb45 	bl	800db8c <RCCEx_PLL2_Config>
 800c502:	4603      	mov	r3, r0
 800c504:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c508:	e00f      	b.n	800c52a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c50a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c50e:	3328      	adds	r3, #40	; 0x28
 800c510:	2102      	movs	r1, #2
 800c512:	4618      	mov	r0, r3
 800c514:	f001 fbec 	bl	800dcf0 <RCCEx_PLL3_Config>
 800c518:	4603      	mov	r3, r0
 800c51a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c51e:	e004      	b.n	800c52a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c520:	2301      	movs	r3, #1
 800c522:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c526:	e000      	b.n	800c52a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800c528:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c52a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d10b      	bne.n	800c54a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c532:	4b4b      	ldr	r3, [pc, #300]	; (800c660 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c536:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800c53a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c53e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c542:	4a47      	ldr	r2, [pc, #284]	; (800c660 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c544:	430b      	orrs	r3, r1
 800c546:	6593      	str	r3, [r2, #88]	; 0x58
 800c548:	e003      	b.n	800c552 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c54a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c54e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c552:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c55a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800c55e:	673b      	str	r3, [r7, #112]	; 0x70
 800c560:	2300      	movs	r3, #0
 800c562:	677b      	str	r3, [r7, #116]	; 0x74
 800c564:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800c568:	460b      	mov	r3, r1
 800c56a:	4313      	orrs	r3, r2
 800c56c:	d03b      	beq.n	800c5e6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c56e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c572:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c576:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c57a:	d01f      	beq.n	800c5bc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c57c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c580:	d818      	bhi.n	800c5b4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800c582:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c586:	d003      	beq.n	800c590 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800c588:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c58c:	d007      	beq.n	800c59e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800c58e:	e011      	b.n	800c5b4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c590:	4b33      	ldr	r3, [pc, #204]	; (800c660 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c594:	4a32      	ldr	r2, [pc, #200]	; (800c660 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c596:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c59a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c59c:	e00f      	b.n	800c5be <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c59e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5a2:	3328      	adds	r3, #40	; 0x28
 800c5a4:	2101      	movs	r1, #1
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f001 fba2 	bl	800dcf0 <RCCEx_PLL3_Config>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800c5b2:	e004      	b.n	800c5be <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c5b4:	2301      	movs	r3, #1
 800c5b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c5ba:	e000      	b.n	800c5be <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800c5bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c5be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d10b      	bne.n	800c5de <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c5c6:	4b26      	ldr	r3, [pc, #152]	; (800c660 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c5c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5ca:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800c5ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c5d6:	4a22      	ldr	r2, [pc, #136]	; (800c660 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c5d8:	430b      	orrs	r3, r1
 800c5da:	6553      	str	r3, [r2, #84]	; 0x54
 800c5dc:	e003      	b.n	800c5e6 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c5e2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c5e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ee:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800c5f2:	66bb      	str	r3, [r7, #104]	; 0x68
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c5f8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c5fc:	460b      	mov	r3, r1
 800c5fe:	4313      	orrs	r3, r2
 800c600:	d034      	beq.n	800c66c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c602:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d003      	beq.n	800c614 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800c60c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c610:	d007      	beq.n	800c622 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800c612:	e011      	b.n	800c638 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c614:	4b12      	ldr	r3, [pc, #72]	; (800c660 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c618:	4a11      	ldr	r2, [pc, #68]	; (800c660 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c61a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c61e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c620:	e00e      	b.n	800c640 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c622:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c626:	3308      	adds	r3, #8
 800c628:	2102      	movs	r1, #2
 800c62a:	4618      	mov	r0, r3
 800c62c:	f001 faae 	bl	800db8c <RCCEx_PLL2_Config>
 800c630:	4603      	mov	r3, r0
 800c632:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c636:	e003      	b.n	800c640 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800c638:	2301      	movs	r3, #1
 800c63a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c63e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c640:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c644:	2b00      	cmp	r3, #0
 800c646:	d10d      	bne.n	800c664 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c648:	4b05      	ldr	r3, [pc, #20]	; (800c660 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c64a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c64c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c650:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c656:	4a02      	ldr	r2, [pc, #8]	; (800c660 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c658:	430b      	orrs	r3, r1
 800c65a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c65c:	e006      	b.n	800c66c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800c65e:	bf00      	nop
 800c660:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c664:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c668:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c66c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c670:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c674:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c678:	663b      	str	r3, [r7, #96]	; 0x60
 800c67a:	2300      	movs	r3, #0
 800c67c:	667b      	str	r3, [r7, #100]	; 0x64
 800c67e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c682:	460b      	mov	r3, r1
 800c684:	4313      	orrs	r3, r2
 800c686:	d00c      	beq.n	800c6a2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c688:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c68c:	3328      	adds	r3, #40	; 0x28
 800c68e:	2102      	movs	r1, #2
 800c690:	4618      	mov	r0, r3
 800c692:	f001 fb2d 	bl	800dcf0 <RCCEx_PLL3_Config>
 800c696:	4603      	mov	r3, r0
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d002      	beq.n	800c6a2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800c69c:	2301      	movs	r3, #1
 800c69e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c6a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6aa:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c6ae:	65bb      	str	r3, [r7, #88]	; 0x58
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c6b4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c6b8:	460b      	mov	r3, r1
 800c6ba:	4313      	orrs	r3, r2
 800c6bc:	d036      	beq.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c6be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c6c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c6c8:	d018      	beq.n	800c6fc <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800c6ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c6ce:	d811      	bhi.n	800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c6d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c6d4:	d014      	beq.n	800c700 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800c6d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c6da:	d80b      	bhi.n	800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d011      	beq.n	800c704 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800c6e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6e4:	d106      	bne.n	800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c6e6:	4bb7      	ldr	r3, [pc, #732]	; (800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c6e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ea:	4ab6      	ldr	r2, [pc, #728]	; (800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c6ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c6f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c6f2:	e008      	b.n	800c706 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800c6fa:	e004      	b.n	800c706 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c6fc:	bf00      	nop
 800c6fe:	e002      	b.n	800c706 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c700:	bf00      	nop
 800c702:	e000      	b.n	800c706 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800c704:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c706:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d10a      	bne.n	800c724 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c70e:	4bad      	ldr	r3, [pc, #692]	; (800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c712:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c716:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c71a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c71c:	4aa9      	ldr	r2, [pc, #676]	; (800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c71e:	430b      	orrs	r3, r1
 800c720:	6553      	str	r3, [r2, #84]	; 0x54
 800c722:	e003      	b.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c724:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c728:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c72c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c734:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c738:	653b      	str	r3, [r7, #80]	; 0x50
 800c73a:	2300      	movs	r3, #0
 800c73c:	657b      	str	r3, [r7, #84]	; 0x54
 800c73e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c742:	460b      	mov	r3, r1
 800c744:	4313      	orrs	r3, r2
 800c746:	d009      	beq.n	800c75c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c748:	4b9e      	ldr	r3, [pc, #632]	; (800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c74a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c74c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c750:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c756:	4a9b      	ldr	r2, [pc, #620]	; (800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c758:	430b      	orrs	r3, r1
 800c75a:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c75c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c764:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c768:	64bb      	str	r3, [r7, #72]	; 0x48
 800c76a:	2300      	movs	r3, #0
 800c76c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c76e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c772:	460b      	mov	r3, r1
 800c774:	4313      	orrs	r3, r2
 800c776:	d009      	beq.n	800c78c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c778:	4b92      	ldr	r3, [pc, #584]	; (800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c77a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c77c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c780:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c784:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c786:	4a8f      	ldr	r2, [pc, #572]	; (800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c788:	430b      	orrs	r3, r1
 800c78a:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c78c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c794:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c798:	643b      	str	r3, [r7, #64]	; 0x40
 800c79a:	2300      	movs	r3, #0
 800c79c:	647b      	str	r3, [r7, #68]	; 0x44
 800c79e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c7a2:	460b      	mov	r3, r1
 800c7a4:	4313      	orrs	r3, r2
 800c7a6:	d00e      	beq.n	800c7c6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c7a8:	4b86      	ldr	r3, [pc, #536]	; (800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c7aa:	691b      	ldr	r3, [r3, #16]
 800c7ac:	4a85      	ldr	r2, [pc, #532]	; (800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c7ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c7b2:	6113      	str	r3, [r2, #16]
 800c7b4:	4b83      	ldr	r3, [pc, #524]	; (800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c7b6:	6919      	ldr	r1, [r3, #16]
 800c7b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c7c0:	4a80      	ldr	r2, [pc, #512]	; (800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c7c2:	430b      	orrs	r3, r1
 800c7c4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c7c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ce:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c7d2:	63bb      	str	r3, [r7, #56]	; 0x38
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c7d8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c7dc:	460b      	mov	r3, r1
 800c7de:	4313      	orrs	r3, r2
 800c7e0:	d009      	beq.n	800c7f6 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c7e2:	4b78      	ldr	r3, [pc, #480]	; (800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c7e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7e6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c7ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7f0:	4a74      	ldr	r2, [pc, #464]	; (800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c7f2:	430b      	orrs	r3, r1
 800c7f4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c7f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7fe:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c802:	633b      	str	r3, [r7, #48]	; 0x30
 800c804:	2300      	movs	r3, #0
 800c806:	637b      	str	r3, [r7, #52]	; 0x34
 800c808:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c80c:	460b      	mov	r3, r1
 800c80e:	4313      	orrs	r3, r2
 800c810:	d00a      	beq.n	800c828 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c812:	4b6c      	ldr	r3, [pc, #432]	; (800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c816:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c81a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c81e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c822:	4a68      	ldr	r2, [pc, #416]	; (800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800c824:	430b      	orrs	r3, r1
 800c826:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c830:	2100      	movs	r1, #0
 800c832:	62b9      	str	r1, [r7, #40]	; 0x28
 800c834:	f003 0301 	and.w	r3, r3, #1
 800c838:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c83a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c83e:	460b      	mov	r3, r1
 800c840:	4313      	orrs	r3, r2
 800c842:	d011      	beq.n	800c868 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c844:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c848:	3308      	adds	r3, #8
 800c84a:	2100      	movs	r1, #0
 800c84c:	4618      	mov	r0, r3
 800c84e:	f001 f99d 	bl	800db8c <RCCEx_PLL2_Config>
 800c852:	4603      	mov	r3, r0
 800c854:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c858:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d003      	beq.n	800c868 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c860:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c864:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c868:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c870:	2100      	movs	r1, #0
 800c872:	6239      	str	r1, [r7, #32]
 800c874:	f003 0302 	and.w	r3, r3, #2
 800c878:	627b      	str	r3, [r7, #36]	; 0x24
 800c87a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c87e:	460b      	mov	r3, r1
 800c880:	4313      	orrs	r3, r2
 800c882:	d011      	beq.n	800c8a8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c884:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c888:	3308      	adds	r3, #8
 800c88a:	2101      	movs	r1, #1
 800c88c:	4618      	mov	r0, r3
 800c88e:	f001 f97d 	bl	800db8c <RCCEx_PLL2_Config>
 800c892:	4603      	mov	r3, r0
 800c894:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c898:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d003      	beq.n	800c8a8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c8a4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c8a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b0:	2100      	movs	r1, #0
 800c8b2:	61b9      	str	r1, [r7, #24]
 800c8b4:	f003 0304 	and.w	r3, r3, #4
 800c8b8:	61fb      	str	r3, [r7, #28]
 800c8ba:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c8be:	460b      	mov	r3, r1
 800c8c0:	4313      	orrs	r3, r2
 800c8c2:	d011      	beq.n	800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c8c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8c8:	3308      	adds	r3, #8
 800c8ca:	2102      	movs	r1, #2
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f001 f95d 	bl	800db8c <RCCEx_PLL2_Config>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c8d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d003      	beq.n	800c8e8 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c8e4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c8e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f0:	2100      	movs	r1, #0
 800c8f2:	6139      	str	r1, [r7, #16]
 800c8f4:	f003 0308 	and.w	r3, r3, #8
 800c8f8:	617b      	str	r3, [r7, #20]
 800c8fa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c8fe:	460b      	mov	r3, r1
 800c900:	4313      	orrs	r3, r2
 800c902:	d011      	beq.n	800c928 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c904:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c908:	3328      	adds	r3, #40	; 0x28
 800c90a:	2100      	movs	r1, #0
 800c90c:	4618      	mov	r0, r3
 800c90e:	f001 f9ef 	bl	800dcf0 <RCCEx_PLL3_Config>
 800c912:	4603      	mov	r3, r0
 800c914:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800c918:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d003      	beq.n	800c928 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c920:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c924:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c928:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c930:	2100      	movs	r1, #0
 800c932:	60b9      	str	r1, [r7, #8]
 800c934:	f003 0310 	and.w	r3, r3, #16
 800c938:	60fb      	str	r3, [r7, #12]
 800c93a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c93e:	460b      	mov	r3, r1
 800c940:	4313      	orrs	r3, r2
 800c942:	d011      	beq.n	800c968 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c944:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c948:	3328      	adds	r3, #40	; 0x28
 800c94a:	2101      	movs	r1, #1
 800c94c:	4618      	mov	r0, r3
 800c94e:	f001 f9cf 	bl	800dcf0 <RCCEx_PLL3_Config>
 800c952:	4603      	mov	r3, r0
 800c954:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c958:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d003      	beq.n	800c968 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c960:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c964:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c970:	2100      	movs	r1, #0
 800c972:	6039      	str	r1, [r7, #0]
 800c974:	f003 0320 	and.w	r3, r3, #32
 800c978:	607b      	str	r3, [r7, #4]
 800c97a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c97e:	460b      	mov	r3, r1
 800c980:	4313      	orrs	r3, r2
 800c982:	d011      	beq.n	800c9a8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c984:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c988:	3328      	adds	r3, #40	; 0x28
 800c98a:	2102      	movs	r1, #2
 800c98c:	4618      	mov	r0, r3
 800c98e:	f001 f9af 	bl	800dcf0 <RCCEx_PLL3_Config>
 800c992:	4603      	mov	r3, r0
 800c994:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800c998:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d003      	beq.n	800c9a8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9a0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800c9a4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800c9a8:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d101      	bne.n	800c9b4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	e000      	b.n	800c9b6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800c9b4:	2301      	movs	r3, #1
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c9c2:	bf00      	nop
 800c9c4:	58024400 	.word	0x58024400

0800c9c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b090      	sub	sp, #64	; 0x40
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c9d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9d6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c9da:	430b      	orrs	r3, r1
 800c9dc:	f040 8094 	bne.w	800cb08 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c9e0:	4b9b      	ldr	r3, [pc, #620]	; (800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c9e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9e4:	f003 0307 	and.w	r3, r3, #7
 800c9e8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ec:	2b04      	cmp	r3, #4
 800c9ee:	f200 8087 	bhi.w	800cb00 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c9f2:	a201      	add	r2, pc, #4	; (adr r2, 800c9f8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c9f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9f8:	0800ca0d 	.word	0x0800ca0d
 800c9fc:	0800ca35 	.word	0x0800ca35
 800ca00:	0800ca5d 	.word	0x0800ca5d
 800ca04:	0800caf9 	.word	0x0800caf9
 800ca08:	0800ca85 	.word	0x0800ca85
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ca0c:	4b90      	ldr	r3, [pc, #576]	; (800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ca18:	d108      	bne.n	800ca2c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ca1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f000 ff62 	bl	800d8e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ca24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca28:	f000 bc93 	b.w	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca30:	f000 bc8f 	b.w	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ca34:	4b86      	ldr	r3, [pc, #536]	; (800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca40:	d108      	bne.n	800ca54 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca42:	f107 0318 	add.w	r3, r7, #24
 800ca46:	4618      	mov	r0, r3
 800ca48:	f000 fca6 	bl	800d398 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ca4c:	69bb      	ldr	r3, [r7, #24]
 800ca4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca50:	f000 bc7f 	b.w	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ca54:	2300      	movs	r3, #0
 800ca56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca58:	f000 bc7b 	b.w	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ca5c:	4b7c      	ldr	r3, [pc, #496]	; (800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca68:	d108      	bne.n	800ca7c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca6a:	f107 030c 	add.w	r3, r7, #12
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f000 fde6 	bl	800d640 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca78:	f000 bc6b 	b.w	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca80:	f000 bc67 	b.w	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ca84:	4b72      	ldr	r3, [pc, #456]	; (800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ca86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ca8c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ca8e:	4b70      	ldr	r3, [pc, #448]	; (800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	f003 0304 	and.w	r3, r3, #4
 800ca96:	2b04      	cmp	r3, #4
 800ca98:	d10c      	bne.n	800cab4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800ca9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d109      	bne.n	800cab4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800caa0:	4b6b      	ldr	r3, [pc, #428]	; (800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	08db      	lsrs	r3, r3, #3
 800caa6:	f003 0303 	and.w	r3, r3, #3
 800caaa:	4a6a      	ldr	r2, [pc, #424]	; (800cc54 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800caac:	fa22 f303 	lsr.w	r3, r2, r3
 800cab0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cab2:	e01f      	b.n	800caf4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cab4:	4b66      	ldr	r3, [pc, #408]	; (800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cabc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cac0:	d106      	bne.n	800cad0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800cac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cac4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cac8:	d102      	bne.n	800cad0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800caca:	4b63      	ldr	r3, [pc, #396]	; (800cc58 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800cacc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cace:	e011      	b.n	800caf4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cad0:	4b5f      	ldr	r3, [pc, #380]	; (800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cad8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cadc:	d106      	bne.n	800caec <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800cade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cae0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cae4:	d102      	bne.n	800caec <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cae6:	4b5d      	ldr	r3, [pc, #372]	; (800cc5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cae8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800caea:	e003      	b.n	800caf4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800caec:	2300      	movs	r3, #0
 800caee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800caf0:	f000 bc2f 	b.w	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800caf4:	f000 bc2d 	b.w	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800caf8:	4b59      	ldr	r3, [pc, #356]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800cafa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cafc:	f000 bc29 	b.w	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800cb00:	2300      	movs	r3, #0
 800cb02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb04:	f000 bc25 	b.w	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800cb08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb0c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800cb10:	430b      	orrs	r3, r1
 800cb12:	f040 80a7 	bne.w	800cc64 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800cb16:	4b4e      	ldr	r3, [pc, #312]	; (800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb1a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800cb1e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800cb20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cb26:	d054      	beq.n	800cbd2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800cb28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cb2e:	f200 808b 	bhi.w	800cc48 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800cb32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb34:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800cb38:	f000 8083 	beq.w	800cc42 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800cb3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb3e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800cb42:	f200 8081 	bhi.w	800cc48 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800cb46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cb4c:	d02f      	beq.n	800cbae <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800cb4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cb54:	d878      	bhi.n	800cc48 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800cb56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d004      	beq.n	800cb66 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800cb5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cb62:	d012      	beq.n	800cb8a <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800cb64:	e070      	b.n	800cc48 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cb66:	4b3a      	ldr	r3, [pc, #232]	; (800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cb72:	d107      	bne.n	800cb84 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cb74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cb78:	4618      	mov	r0, r3
 800cb7a:	f000 feb5 	bl	800d8e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cb7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb82:	e3e6      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cb84:	2300      	movs	r3, #0
 800cb86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb88:	e3e3      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cb8a:	4b31      	ldr	r3, [pc, #196]	; (800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cb96:	d107      	bne.n	800cba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cb98:	f107 0318 	add.w	r3, r7, #24
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	f000 fbfb 	bl	800d398 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cba2:	69bb      	ldr	r3, [r7, #24]
 800cba4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cba6:	e3d4      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cba8:	2300      	movs	r3, #0
 800cbaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbac:	e3d1      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cbae:	4b28      	ldr	r3, [pc, #160]	; (800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cbb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbba:	d107      	bne.n	800cbcc <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cbbc:	f107 030c 	add.w	r3, r7, #12
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f000 fd3d 	bl	800d640 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbca:	e3c2      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cbcc:	2300      	movs	r3, #0
 800cbce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbd0:	e3bf      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cbd2:	4b1f      	ldr	r3, [pc, #124]	; (800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cbd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbd6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cbda:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cbdc:	4b1c      	ldr	r3, [pc, #112]	; (800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	f003 0304 	and.w	r3, r3, #4
 800cbe4:	2b04      	cmp	r3, #4
 800cbe6:	d10c      	bne.n	800cc02 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800cbe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d109      	bne.n	800cc02 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cbee:	4b18      	ldr	r3, [pc, #96]	; (800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	08db      	lsrs	r3, r3, #3
 800cbf4:	f003 0303 	and.w	r3, r3, #3
 800cbf8:	4a16      	ldr	r2, [pc, #88]	; (800cc54 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800cbfa:	fa22 f303 	lsr.w	r3, r2, r3
 800cbfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc00:	e01e      	b.n	800cc40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cc02:	4b13      	ldr	r3, [pc, #76]	; (800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc0e:	d106      	bne.n	800cc1e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800cc10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cc16:	d102      	bne.n	800cc1e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cc18:	4b0f      	ldr	r3, [pc, #60]	; (800cc58 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800cc1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc1c:	e010      	b.n	800cc40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cc1e:	4b0c      	ldr	r3, [pc, #48]	; (800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc2a:	d106      	bne.n	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800cc2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc32:	d102      	bne.n	800cc3a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cc34:	4b09      	ldr	r3, [pc, #36]	; (800cc5c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cc36:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc38:	e002      	b.n	800cc40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cc3e:	e388      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cc40:	e387      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cc42:	4b07      	ldr	r3, [pc, #28]	; (800cc60 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800cc44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc46:	e384      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800cc48:	2300      	movs	r3, #0
 800cc4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc4c:	e381      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cc4e:	bf00      	nop
 800cc50:	58024400 	.word	0x58024400
 800cc54:	03d09000 	.word	0x03d09000
 800cc58:	003d0900 	.word	0x003d0900
 800cc5c:	02faf080 	.word	0x02faf080
 800cc60:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800cc64:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc68:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800cc6c:	430b      	orrs	r3, r1
 800cc6e:	f040 809c 	bne.w	800cdaa <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800cc72:	4b9e      	ldr	r3, [pc, #632]	; (800ceec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cc74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc76:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800cc7a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800cc7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cc82:	d054      	beq.n	800cd2e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800cc84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cc8a:	f200 808b 	bhi.w	800cda4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800cc8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc90:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cc94:	f000 8083 	beq.w	800cd9e <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800cc98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc9a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800cc9e:	f200 8081 	bhi.w	800cda4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800cca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cca8:	d02f      	beq.n	800cd0a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800ccaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ccb0:	d878      	bhi.n	800cda4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800ccb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d004      	beq.n	800ccc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800ccb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ccbe:	d012      	beq.n	800cce6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800ccc0:	e070      	b.n	800cda4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ccc2:	4b8a      	ldr	r3, [pc, #552]	; (800ceec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ccca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ccce:	d107      	bne.n	800cce0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ccd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f000 fe07 	bl	800d8e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ccda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccde:	e338      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cce0:	2300      	movs	r3, #0
 800cce2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cce4:	e335      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cce6:	4b81      	ldr	r3, [pc, #516]	; (800ceec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ccee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ccf2:	d107      	bne.n	800cd04 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ccf4:	f107 0318 	add.w	r3, r7, #24
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f000 fb4d 	bl	800d398 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ccfe:	69bb      	ldr	r3, [r7, #24]
 800cd00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd02:	e326      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cd04:	2300      	movs	r3, #0
 800cd06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd08:	e323      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cd0a:	4b78      	ldr	r3, [pc, #480]	; (800ceec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cd12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd16:	d107      	bne.n	800cd28 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd18:	f107 030c 	add.w	r3, r7, #12
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f000 fc8f 	bl	800d640 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd26:	e314      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cd28:	2300      	movs	r3, #0
 800cd2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd2c:	e311      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cd2e:	4b6f      	ldr	r3, [pc, #444]	; (800ceec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cd30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cd36:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cd38:	4b6c      	ldr	r3, [pc, #432]	; (800ceec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	f003 0304 	and.w	r3, r3, #4
 800cd40:	2b04      	cmp	r3, #4
 800cd42:	d10c      	bne.n	800cd5e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800cd44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d109      	bne.n	800cd5e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd4a:	4b68      	ldr	r3, [pc, #416]	; (800ceec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	08db      	lsrs	r3, r3, #3
 800cd50:	f003 0303 	and.w	r3, r3, #3
 800cd54:	4a66      	ldr	r2, [pc, #408]	; (800cef0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800cd56:	fa22 f303 	lsr.w	r3, r2, r3
 800cd5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd5c:	e01e      	b.n	800cd9c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cd5e:	4b63      	ldr	r3, [pc, #396]	; (800ceec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd6a:	d106      	bne.n	800cd7a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800cd6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd72:	d102      	bne.n	800cd7a <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cd74:	4b5f      	ldr	r3, [pc, #380]	; (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800cd76:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd78:	e010      	b.n	800cd9c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cd7a:	4b5c      	ldr	r3, [pc, #368]	; (800ceec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cd86:	d106      	bne.n	800cd96 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800cd88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd8e:	d102      	bne.n	800cd96 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cd90:	4b59      	ldr	r3, [pc, #356]	; (800cef8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800cd92:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd94:	e002      	b.n	800cd9c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cd96:	2300      	movs	r3, #0
 800cd98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cd9a:	e2da      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cd9c:	e2d9      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cd9e:	4b57      	ldr	r3, [pc, #348]	; (800cefc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800cda0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cda2:	e2d6      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800cda4:	2300      	movs	r3, #0
 800cda6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cda8:	e2d3      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800cdaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cdae:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800cdb2:	430b      	orrs	r3, r1
 800cdb4:	f040 80a7 	bne.w	800cf06 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800cdb8:	4b4c      	ldr	r3, [pc, #304]	; (800ceec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cdba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cdbc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800cdc0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cdc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cdc8:	d055      	beq.n	800ce76 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800cdca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cdd0:	f200 8096 	bhi.w	800cf00 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cdd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdd6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cdda:	f000 8084 	beq.w	800cee6 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800cdde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cde0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cde4:	f200 808c 	bhi.w	800cf00 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cde8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cdee:	d030      	beq.n	800ce52 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800cdf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cdf6:	f200 8083 	bhi.w	800cf00 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800cdfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d004      	beq.n	800ce0a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800ce00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce06:	d012      	beq.n	800ce2e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800ce08:	e07a      	b.n	800cf00 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ce0a:	4b38      	ldr	r3, [pc, #224]	; (800ceec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ce16:	d107      	bne.n	800ce28 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ce18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f000 fd63 	bl	800d8e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ce22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce26:	e294      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ce28:	2300      	movs	r3, #0
 800ce2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce2c:	e291      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce2e:	4b2f      	ldr	r3, [pc, #188]	; (800ceec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ce3a:	d107      	bne.n	800ce4c <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce3c:	f107 0318 	add.w	r3, r7, #24
 800ce40:	4618      	mov	r0, r3
 800ce42:	f000 faa9 	bl	800d398 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ce46:	69bb      	ldr	r3, [r7, #24]
 800ce48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce4a:	e282      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce50:	e27f      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ce52:	4b26      	ldr	r3, [pc, #152]	; (800ceec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce5e:	d107      	bne.n	800ce70 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce60:	f107 030c 	add.w	r3, r7, #12
 800ce64:	4618      	mov	r0, r3
 800ce66:	f000 fbeb 	bl	800d640 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce6e:	e270      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ce70:	2300      	movs	r3, #0
 800ce72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce74:	e26d      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ce76:	4b1d      	ldr	r3, [pc, #116]	; (800ceec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ce7e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ce80:	4b1a      	ldr	r3, [pc, #104]	; (800ceec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	f003 0304 	and.w	r3, r3, #4
 800ce88:	2b04      	cmp	r3, #4
 800ce8a:	d10c      	bne.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800ce8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d109      	bne.n	800cea6 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce92:	4b16      	ldr	r3, [pc, #88]	; (800ceec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	08db      	lsrs	r3, r3, #3
 800ce98:	f003 0303 	and.w	r3, r3, #3
 800ce9c:	4a14      	ldr	r2, [pc, #80]	; (800cef0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800ce9e:	fa22 f303 	lsr.w	r3, r2, r3
 800cea2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cea4:	e01e      	b.n	800cee4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cea6:	4b11      	ldr	r3, [pc, #68]	; (800ceec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ceae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ceb2:	d106      	bne.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800ceb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ceb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ceba:	d102      	bne.n	800cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cebc:	4b0d      	ldr	r3, [pc, #52]	; (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800cebe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cec0:	e010      	b.n	800cee4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cec2:	4b0a      	ldr	r3, [pc, #40]	; (800ceec <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ceca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cece:	d106      	bne.n	800cede <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800ced0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ced2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ced6:	d102      	bne.n	800cede <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ced8:	4b07      	ldr	r3, [pc, #28]	; (800cef8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ceda:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cedc:	e002      	b.n	800cee4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cede:	2300      	movs	r3, #0
 800cee0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cee2:	e236      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cee4:	e235      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cee6:	4b05      	ldr	r3, [pc, #20]	; (800cefc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800cee8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ceea:	e232      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ceec:	58024400 	.word	0x58024400
 800cef0:	03d09000 	.word	0x03d09000
 800cef4:	003d0900 	.word	0x003d0900
 800cef8:	02faf080 	.word	0x02faf080
 800cefc:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800cf00:	2300      	movs	r3, #0
 800cf02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf04:	e225      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800cf06:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf0a:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800cf0e:	430b      	orrs	r3, r1
 800cf10:	f040 8085 	bne.w	800d01e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800cf14:	4b9c      	ldr	r3, [pc, #624]	; (800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cf16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf18:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800cf1c:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800cf1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cf24:	d06b      	beq.n	800cffe <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800cf26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800cf2c:	d874      	bhi.n	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800cf2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cf34:	d056      	beq.n	800cfe4 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800cf36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf38:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cf3c:	d86c      	bhi.n	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800cf3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf40:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cf44:	d03b      	beq.n	800cfbe <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800cf46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf48:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800cf4c:	d864      	bhi.n	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800cf4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf54:	d021      	beq.n	800cf9a <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800cf56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cf5c:	d85c      	bhi.n	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800cf5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d004      	beq.n	800cf6e <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800cf64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf6a:	d004      	beq.n	800cf76 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800cf6c:	e054      	b.n	800d018 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800cf6e:	f7fe fb5f 	bl	800b630 <HAL_RCC_GetPCLK1Freq>
 800cf72:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cf74:	e1ed      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cf76:	4b84      	ldr	r3, [pc, #528]	; (800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cf82:	d107      	bne.n	800cf94 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf84:	f107 0318 	add.w	r3, r7, #24
 800cf88:	4618      	mov	r0, r3
 800cf8a:	f000 fa05 	bl	800d398 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cf8e:	69fb      	ldr	r3, [r7, #28]
 800cf90:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf92:	e1de      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cf94:	2300      	movs	r3, #0
 800cf96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf98:	e1db      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cf9a:	4b7b      	ldr	r3, [pc, #492]	; (800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cfa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cfa6:	d107      	bne.n	800cfb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cfa8:	f107 030c 	add.w	r3, r7, #12
 800cfac:	4618      	mov	r0, r3
 800cfae:	f000 fb47 	bl	800d640 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cfb2:	693b      	ldr	r3, [r7, #16]
 800cfb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfb6:	e1cc      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cfb8:	2300      	movs	r3, #0
 800cfba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfbc:	e1c9      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cfbe:	4b72      	ldr	r3, [pc, #456]	; (800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	f003 0304 	and.w	r3, r3, #4
 800cfc6:	2b04      	cmp	r3, #4
 800cfc8:	d109      	bne.n	800cfde <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cfca:	4b6f      	ldr	r3, [pc, #444]	; (800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	08db      	lsrs	r3, r3, #3
 800cfd0:	f003 0303 	and.w	r3, r3, #3
 800cfd4:	4a6d      	ldr	r2, [pc, #436]	; (800d18c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800cfd6:	fa22 f303 	lsr.w	r3, r2, r3
 800cfda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfdc:	e1b9      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cfe2:	e1b6      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cfe4:	4b68      	ldr	r3, [pc, #416]	; (800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cff0:	d102      	bne.n	800cff8 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800cff2:	4b67      	ldr	r3, [pc, #412]	; (800d190 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800cff4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cff6:	e1ac      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cff8:	2300      	movs	r3, #0
 800cffa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cffc:	e1a9      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cffe:	4b62      	ldr	r3, [pc, #392]	; (800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d006:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d00a:	d102      	bne.n	800d012 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800d00c:	4b61      	ldr	r3, [pc, #388]	; (800d194 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800d00e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d010:	e19f      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d012:	2300      	movs	r3, #0
 800d014:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d016:	e19c      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d018:	2300      	movs	r3, #0
 800d01a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d01c:	e199      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800d01e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d022:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800d026:	430b      	orrs	r3, r1
 800d028:	d173      	bne.n	800d112 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800d02a:	4b57      	ldr	r3, [pc, #348]	; (800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d02c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d02e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d032:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d036:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d03a:	d02f      	beq.n	800d09c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800d03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d03e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d042:	d863      	bhi.n	800d10c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800d044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d046:	2b00      	cmp	r3, #0
 800d048:	d004      	beq.n	800d054 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800d04a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d04c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d050:	d012      	beq.n	800d078 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800d052:	e05b      	b.n	800d10c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d054:	4b4c      	ldr	r3, [pc, #304]	; (800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d05c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d060:	d107      	bne.n	800d072 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d062:	f107 0318 	add.w	r3, r7, #24
 800d066:	4618      	mov	r0, r3
 800d068:	f000 f996 	bl	800d398 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d06c:	69bb      	ldr	r3, [r7, #24]
 800d06e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d070:	e16f      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d072:	2300      	movs	r3, #0
 800d074:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d076:	e16c      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d078:	4b43      	ldr	r3, [pc, #268]	; (800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d080:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d084:	d107      	bne.n	800d096 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d086:	f107 030c 	add.w	r3, r7, #12
 800d08a:	4618      	mov	r0, r3
 800d08c:	f000 fad8 	bl	800d640 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800d090:	697b      	ldr	r3, [r7, #20]
 800d092:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d094:	e15d      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d096:	2300      	movs	r3, #0
 800d098:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d09a:	e15a      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d09c:	4b3a      	ldr	r3, [pc, #232]	; (800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d09e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d0a4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d0a6:	4b38      	ldr	r3, [pc, #224]	; (800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	f003 0304 	and.w	r3, r3, #4
 800d0ae:	2b04      	cmp	r3, #4
 800d0b0:	d10c      	bne.n	800d0cc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800d0b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d109      	bne.n	800d0cc <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d0b8:	4b33      	ldr	r3, [pc, #204]	; (800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	08db      	lsrs	r3, r3, #3
 800d0be:	f003 0303 	and.w	r3, r3, #3
 800d0c2:	4a32      	ldr	r2, [pc, #200]	; (800d18c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800d0c4:	fa22 f303 	lsr.w	r3, r2, r3
 800d0c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d0ca:	e01e      	b.n	800d10a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d0cc:	4b2e      	ldr	r3, [pc, #184]	; (800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d0d8:	d106      	bne.n	800d0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800d0da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d0e0:	d102      	bne.n	800d0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d0e2:	4b2b      	ldr	r3, [pc, #172]	; (800d190 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800d0e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d0e6:	e010      	b.n	800d10a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d0e8:	4b27      	ldr	r3, [pc, #156]	; (800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d0f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d0f4:	d106      	bne.n	800d104 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800d0f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d0fc:	d102      	bne.n	800d104 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d0fe:	4b25      	ldr	r3, [pc, #148]	; (800d194 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800d100:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d102:	e002      	b.n	800d10a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d104:	2300      	movs	r3, #0
 800d106:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800d108:	e123      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d10a:	e122      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d10c:	2300      	movs	r3, #0
 800d10e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d110:	e11f      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d112:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d116:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800d11a:	430b      	orrs	r3, r1
 800d11c:	d13c      	bne.n	800d198 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800d11e:	4b1a      	ldr	r3, [pc, #104]	; (800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d126:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d004      	beq.n	800d138 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800d12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d134:	d012      	beq.n	800d15c <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800d136:	e023      	b.n	800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d138:	4b13      	ldr	r3, [pc, #76]	; (800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d140:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d144:	d107      	bne.n	800d156 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d14a:	4618      	mov	r0, r3
 800d14c:	f000 fbcc 	bl	800d8e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d152:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d154:	e0fd      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d156:	2300      	movs	r3, #0
 800d158:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d15a:	e0fa      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d15c:	4b0a      	ldr	r3, [pc, #40]	; (800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d164:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d168:	d107      	bne.n	800d17a <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d16a:	f107 0318 	add.w	r3, r7, #24
 800d16e:	4618      	mov	r0, r3
 800d170:	f000 f912 	bl	800d398 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d174:	6a3b      	ldr	r3, [r7, #32]
 800d176:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d178:	e0eb      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d17a:	2300      	movs	r3, #0
 800d17c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d17e:	e0e8      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d180:	2300      	movs	r3, #0
 800d182:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d184:	e0e5      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d186:	bf00      	nop
 800d188:	58024400 	.word	0x58024400
 800d18c:	03d09000 	.word	0x03d09000
 800d190:	003d0900 	.word	0x003d0900
 800d194:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800d198:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d19c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800d1a0:	430b      	orrs	r3, r1
 800d1a2:	f040 8085 	bne.w	800d2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800d1a6:	4b6d      	ldr	r3, [pc, #436]	; (800d35c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d1a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1aa:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800d1ae:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d1b6:	d06b      	beq.n	800d290 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800d1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d1be:	d874      	bhi.n	800d2aa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d1c6:	d056      	beq.n	800d276 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800d1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d1ce:	d86c      	bhi.n	800d2aa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d1d6:	d03b      	beq.n	800d250 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800d1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d1de:	d864      	bhi.n	800d2aa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d1e6:	d021      	beq.n	800d22c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800d1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d1ee:	d85c      	bhi.n	800d2aa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d004      	beq.n	800d200 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800d1f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d1fc:	d004      	beq.n	800d208 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800d1fe:	e054      	b.n	800d2aa <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800d200:	f000 f8b4 	bl	800d36c <HAL_RCCEx_GetD3PCLK1Freq>
 800d204:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d206:	e0a4      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d208:	4b54      	ldr	r3, [pc, #336]	; (800d35c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d210:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d214:	d107      	bne.n	800d226 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d216:	f107 0318 	add.w	r3, r7, #24
 800d21a:	4618      	mov	r0, r3
 800d21c:	f000 f8bc 	bl	800d398 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d220:	69fb      	ldr	r3, [r7, #28]
 800d222:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d224:	e095      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d226:	2300      	movs	r3, #0
 800d228:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d22a:	e092      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d22c:	4b4b      	ldr	r3, [pc, #300]	; (800d35c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d234:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d238:	d107      	bne.n	800d24a <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d23a:	f107 030c 	add.w	r3, r7, #12
 800d23e:	4618      	mov	r0, r3
 800d240:	f000 f9fe 	bl	800d640 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d244:	693b      	ldr	r3, [r7, #16]
 800d246:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d248:	e083      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d24a:	2300      	movs	r3, #0
 800d24c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d24e:	e080      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d250:	4b42      	ldr	r3, [pc, #264]	; (800d35c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	f003 0304 	and.w	r3, r3, #4
 800d258:	2b04      	cmp	r3, #4
 800d25a:	d109      	bne.n	800d270 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d25c:	4b3f      	ldr	r3, [pc, #252]	; (800d35c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	08db      	lsrs	r3, r3, #3
 800d262:	f003 0303 	and.w	r3, r3, #3
 800d266:	4a3e      	ldr	r2, [pc, #248]	; (800d360 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800d268:	fa22 f303 	lsr.w	r3, r2, r3
 800d26c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d26e:	e070      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d270:	2300      	movs	r3, #0
 800d272:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d274:	e06d      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d276:	4b39      	ldr	r3, [pc, #228]	; (800d35c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d27e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d282:	d102      	bne.n	800d28a <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800d284:	4b37      	ldr	r3, [pc, #220]	; (800d364 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d286:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d288:	e063      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d28a:	2300      	movs	r3, #0
 800d28c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d28e:	e060      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d290:	4b32      	ldr	r3, [pc, #200]	; (800d35c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d298:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d29c:	d102      	bne.n	800d2a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800d29e:	4b32      	ldr	r3, [pc, #200]	; (800d368 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d2a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d2a2:	e056      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2a8:	e053      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2ae:	e050      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d2b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d2b4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800d2b8:	430b      	orrs	r3, r1
 800d2ba:	d148      	bne.n	800d34e <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d2bc:	4b27      	ldr	r3, [pc, #156]	; (800d35c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d2be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d2c4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800d2c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d2cc:	d02a      	beq.n	800d324 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800d2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d2d4:	d838      	bhi.n	800d348 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800d2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d004      	beq.n	800d2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800d2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d2e2:	d00d      	beq.n	800d300 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800d2e4:	e030      	b.n	800d348 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d2e6:	4b1d      	ldr	r3, [pc, #116]	; (800d35c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d2ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d2f2:	d102      	bne.n	800d2fa <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800d2f4:	4b1c      	ldr	r3, [pc, #112]	; (800d368 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d2f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d2f8:	e02b      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d2fe:	e028      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d300:	4b16      	ldr	r3, [pc, #88]	; (800d35c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d308:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d30c:	d107      	bne.n	800d31e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d30e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d312:	4618      	mov	r0, r3
 800d314:	f000 fae8 	bl	800d8e8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d31a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d31c:	e019      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d31e:	2300      	movs	r3, #0
 800d320:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d322:	e016      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d324:	4b0d      	ldr	r3, [pc, #52]	; (800d35c <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d32c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d330:	d107      	bne.n	800d342 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d332:	f107 0318 	add.w	r3, r7, #24
 800d336:	4618      	mov	r0, r3
 800d338:	f000 f82e 	bl	800d398 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d33c:	69fb      	ldr	r3, [r7, #28]
 800d33e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d340:	e007      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d342:	2300      	movs	r3, #0
 800d344:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d346:	e004      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d348:	2300      	movs	r3, #0
 800d34a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d34c:	e001      	b.n	800d352 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800d34e:	2300      	movs	r3, #0
 800d350:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800d352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d354:	4618      	mov	r0, r3
 800d356:	3740      	adds	r7, #64	; 0x40
 800d358:	46bd      	mov	sp, r7
 800d35a:	bd80      	pop	{r7, pc}
 800d35c:	58024400 	.word	0x58024400
 800d360:	03d09000 	.word	0x03d09000
 800d364:	003d0900 	.word	0x003d0900
 800d368:	02faf080 	.word	0x02faf080

0800d36c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d370:	f7fe f92e 	bl	800b5d0 <HAL_RCC_GetHCLKFreq>
 800d374:	4602      	mov	r2, r0
 800d376:	4b06      	ldr	r3, [pc, #24]	; (800d390 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d378:	6a1b      	ldr	r3, [r3, #32]
 800d37a:	091b      	lsrs	r3, r3, #4
 800d37c:	f003 0307 	and.w	r3, r3, #7
 800d380:	4904      	ldr	r1, [pc, #16]	; (800d394 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d382:	5ccb      	ldrb	r3, [r1, r3]
 800d384:	f003 031f 	and.w	r3, r3, #31
 800d388:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d38c:	4618      	mov	r0, r3
 800d38e:	bd80      	pop	{r7, pc}
 800d390:	58024400 	.word	0x58024400
 800d394:	0801f7b0 	.word	0x0801f7b0

0800d398 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d398:	b480      	push	{r7}
 800d39a:	b089      	sub	sp, #36	; 0x24
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d3a0:	4ba1      	ldr	r3, [pc, #644]	; (800d628 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d3a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3a4:	f003 0303 	and.w	r3, r3, #3
 800d3a8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d3aa:	4b9f      	ldr	r3, [pc, #636]	; (800d628 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d3ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3ae:	0b1b      	lsrs	r3, r3, #12
 800d3b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d3b4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d3b6:	4b9c      	ldr	r3, [pc, #624]	; (800d628 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d3b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3ba:	091b      	lsrs	r3, r3, #4
 800d3bc:	f003 0301 	and.w	r3, r3, #1
 800d3c0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d3c2:	4b99      	ldr	r3, [pc, #612]	; (800d628 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d3c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3c6:	08db      	lsrs	r3, r3, #3
 800d3c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d3cc:	693a      	ldr	r2, [r7, #16]
 800d3ce:	fb02 f303 	mul.w	r3, r2, r3
 800d3d2:	ee07 3a90 	vmov	s15, r3
 800d3d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d3de:	697b      	ldr	r3, [r7, #20]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	f000 8111 	beq.w	800d608 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d3e6:	69bb      	ldr	r3, [r7, #24]
 800d3e8:	2b02      	cmp	r3, #2
 800d3ea:	f000 8083 	beq.w	800d4f4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d3ee:	69bb      	ldr	r3, [r7, #24]
 800d3f0:	2b02      	cmp	r3, #2
 800d3f2:	f200 80a1 	bhi.w	800d538 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d3f6:	69bb      	ldr	r3, [r7, #24]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d003      	beq.n	800d404 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d3fc:	69bb      	ldr	r3, [r7, #24]
 800d3fe:	2b01      	cmp	r3, #1
 800d400:	d056      	beq.n	800d4b0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d402:	e099      	b.n	800d538 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d404:	4b88      	ldr	r3, [pc, #544]	; (800d628 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	f003 0320 	and.w	r3, r3, #32
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d02d      	beq.n	800d46c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d410:	4b85      	ldr	r3, [pc, #532]	; (800d628 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	08db      	lsrs	r3, r3, #3
 800d416:	f003 0303 	and.w	r3, r3, #3
 800d41a:	4a84      	ldr	r2, [pc, #528]	; (800d62c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d41c:	fa22 f303 	lsr.w	r3, r2, r3
 800d420:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d422:	68bb      	ldr	r3, [r7, #8]
 800d424:	ee07 3a90 	vmov	s15, r3
 800d428:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d42c:	697b      	ldr	r3, [r7, #20]
 800d42e:	ee07 3a90 	vmov	s15, r3
 800d432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d43a:	4b7b      	ldr	r3, [pc, #492]	; (800d628 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d43c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d43e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d442:	ee07 3a90 	vmov	s15, r3
 800d446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d44a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d44e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d630 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d452:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d45a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d45e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d462:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d466:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d46a:	e087      	b.n	800d57c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d46c:	697b      	ldr	r3, [r7, #20]
 800d46e:	ee07 3a90 	vmov	s15, r3
 800d472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d476:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d634 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d47a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d47e:	4b6a      	ldr	r3, [pc, #424]	; (800d628 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d486:	ee07 3a90 	vmov	s15, r3
 800d48a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d48e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d492:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d630 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d49a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d49e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d4a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d4ae:	e065      	b.n	800d57c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d4b0:	697b      	ldr	r3, [r7, #20]
 800d4b2:	ee07 3a90 	vmov	s15, r3
 800d4b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d638 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d4be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4c2:	4b59      	ldr	r3, [pc, #356]	; (800d628 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4ca:	ee07 3a90 	vmov	s15, r3
 800d4ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d630 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d4da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d4e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d4f2:	e043      	b.n	800d57c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d4f4:	697b      	ldr	r3, [r7, #20]
 800d4f6:	ee07 3a90 	vmov	s15, r3
 800d4fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d63c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d506:	4b48      	ldr	r3, [pc, #288]	; (800d628 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d50a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d50e:	ee07 3a90 	vmov	s15, r3
 800d512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d516:	ed97 6a03 	vldr	s12, [r7, #12]
 800d51a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d630 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d51e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d526:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d52a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d52e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d532:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d536:	e021      	b.n	800d57c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d538:	697b      	ldr	r3, [r7, #20]
 800d53a:	ee07 3a90 	vmov	s15, r3
 800d53e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d542:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d638 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d54a:	4b37      	ldr	r3, [pc, #220]	; (800d628 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d54c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d54e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d552:	ee07 3a90 	vmov	s15, r3
 800d556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d55a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d55e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d630 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d562:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d56a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d56e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d572:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d576:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d57a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d57c:	4b2a      	ldr	r3, [pc, #168]	; (800d628 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d57e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d580:	0a5b      	lsrs	r3, r3, #9
 800d582:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d586:	ee07 3a90 	vmov	s15, r3
 800d58a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d58e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d592:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d596:	edd7 6a07 	vldr	s13, [r7, #28]
 800d59a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d59e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d5a2:	ee17 2a90 	vmov	r2, s15
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d5aa:	4b1f      	ldr	r3, [pc, #124]	; (800d628 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d5ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5ae:	0c1b      	lsrs	r3, r3, #16
 800d5b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5b4:	ee07 3a90 	vmov	s15, r3
 800d5b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d5c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d5c4:	edd7 6a07 	vldr	s13, [r7, #28]
 800d5c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d5cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d5d0:	ee17 2a90 	vmov	r2, s15
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d5d8:	4b13      	ldr	r3, [pc, #76]	; (800d628 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d5da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5dc:	0e1b      	lsrs	r3, r3, #24
 800d5de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5e2:	ee07 3a90 	vmov	s15, r3
 800d5e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d5ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d5f2:	edd7 6a07 	vldr	s13, [r7, #28]
 800d5f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d5fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d5fe:	ee17 2a90 	vmov	r2, s15
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d606:	e008      	b.n	800d61a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2200      	movs	r2, #0
 800d60c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2200      	movs	r2, #0
 800d612:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2200      	movs	r2, #0
 800d618:	609a      	str	r2, [r3, #8]
}
 800d61a:	bf00      	nop
 800d61c:	3724      	adds	r7, #36	; 0x24
 800d61e:	46bd      	mov	sp, r7
 800d620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d624:	4770      	bx	lr
 800d626:	bf00      	nop
 800d628:	58024400 	.word	0x58024400
 800d62c:	03d09000 	.word	0x03d09000
 800d630:	46000000 	.word	0x46000000
 800d634:	4c742400 	.word	0x4c742400
 800d638:	4a742400 	.word	0x4a742400
 800d63c:	4c3ebc20 	.word	0x4c3ebc20

0800d640 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d640:	b480      	push	{r7}
 800d642:	b089      	sub	sp, #36	; 0x24
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d648:	4ba1      	ldr	r3, [pc, #644]	; (800d8d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d64a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d64c:	f003 0303 	and.w	r3, r3, #3
 800d650:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d652:	4b9f      	ldr	r3, [pc, #636]	; (800d8d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d656:	0d1b      	lsrs	r3, r3, #20
 800d658:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d65c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d65e:	4b9c      	ldr	r3, [pc, #624]	; (800d8d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d662:	0a1b      	lsrs	r3, r3, #8
 800d664:	f003 0301 	and.w	r3, r3, #1
 800d668:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d66a:	4b99      	ldr	r3, [pc, #612]	; (800d8d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d66c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d66e:	08db      	lsrs	r3, r3, #3
 800d670:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d674:	693a      	ldr	r2, [r7, #16]
 800d676:	fb02 f303 	mul.w	r3, r2, r3
 800d67a:	ee07 3a90 	vmov	s15, r3
 800d67e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d682:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d686:	697b      	ldr	r3, [r7, #20]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	f000 8111 	beq.w	800d8b0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d68e:	69bb      	ldr	r3, [r7, #24]
 800d690:	2b02      	cmp	r3, #2
 800d692:	f000 8083 	beq.w	800d79c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d696:	69bb      	ldr	r3, [r7, #24]
 800d698:	2b02      	cmp	r3, #2
 800d69a:	f200 80a1 	bhi.w	800d7e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d69e:	69bb      	ldr	r3, [r7, #24]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d003      	beq.n	800d6ac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d6a4:	69bb      	ldr	r3, [r7, #24]
 800d6a6:	2b01      	cmp	r3, #1
 800d6a8:	d056      	beq.n	800d758 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d6aa:	e099      	b.n	800d7e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d6ac:	4b88      	ldr	r3, [pc, #544]	; (800d8d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	f003 0320 	and.w	r3, r3, #32
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d02d      	beq.n	800d714 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d6b8:	4b85      	ldr	r3, [pc, #532]	; (800d8d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	08db      	lsrs	r3, r3, #3
 800d6be:	f003 0303 	and.w	r3, r3, #3
 800d6c2:	4a84      	ldr	r2, [pc, #528]	; (800d8d4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d6c4:	fa22 f303 	lsr.w	r3, r2, r3
 800d6c8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d6ca:	68bb      	ldr	r3, [r7, #8]
 800d6cc:	ee07 3a90 	vmov	s15, r3
 800d6d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6d4:	697b      	ldr	r3, [r7, #20]
 800d6d6:	ee07 3a90 	vmov	s15, r3
 800d6da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6e2:	4b7b      	ldr	r3, [pc, #492]	; (800d8d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d6e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6ea:	ee07 3a90 	vmov	s15, r3
 800d6ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6f6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d8d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d6fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d6fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d702:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d706:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d70a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d70e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d712:	e087      	b.n	800d824 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d714:	697b      	ldr	r3, [r7, #20]
 800d716:	ee07 3a90 	vmov	s15, r3
 800d71a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d71e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d8dc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d726:	4b6a      	ldr	r3, [pc, #424]	; (800d8d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d72a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d72e:	ee07 3a90 	vmov	s15, r3
 800d732:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d736:	ed97 6a03 	vldr	s12, [r7, #12]
 800d73a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d8d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d73e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d742:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d746:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d74a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d74e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d752:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d756:	e065      	b.n	800d824 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d758:	697b      	ldr	r3, [r7, #20]
 800d75a:	ee07 3a90 	vmov	s15, r3
 800d75e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d762:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d8e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d766:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d76a:	4b59      	ldr	r3, [pc, #356]	; (800d8d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d76c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d76e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d772:	ee07 3a90 	vmov	s15, r3
 800d776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d77a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d77e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d8d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d782:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d786:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d78a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d78e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d792:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d796:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d79a:	e043      	b.n	800d824 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d79c:	697b      	ldr	r3, [r7, #20]
 800d79e:	ee07 3a90 	vmov	s15, r3
 800d7a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7a6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d8e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d7aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d7ae:	4b48      	ldr	r3, [pc, #288]	; (800d8d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d7b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7b6:	ee07 3a90 	vmov	s15, r3
 800d7ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d7be:	ed97 6a03 	vldr	s12, [r7, #12]
 800d7c2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d8d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d7c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d7ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d7ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d7d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d7de:	e021      	b.n	800d824 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d7e0:	697b      	ldr	r3, [r7, #20]
 800d7e2:	ee07 3a90 	vmov	s15, r3
 800d7e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7ea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d8e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d7ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d7f2:	4b37      	ldr	r3, [pc, #220]	; (800d8d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d7f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7fa:	ee07 3a90 	vmov	s15, r3
 800d7fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d802:	ed97 6a03 	vldr	s12, [r7, #12]
 800d806:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d8d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d80a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d80e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d812:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d81a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d81e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d822:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d824:	4b2a      	ldr	r3, [pc, #168]	; (800d8d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d828:	0a5b      	lsrs	r3, r3, #9
 800d82a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d82e:	ee07 3a90 	vmov	s15, r3
 800d832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d836:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d83a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d83e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d842:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d846:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d84a:	ee17 2a90 	vmov	r2, s15
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d852:	4b1f      	ldr	r3, [pc, #124]	; (800d8d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d856:	0c1b      	lsrs	r3, r3, #16
 800d858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d85c:	ee07 3a90 	vmov	s15, r3
 800d860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d864:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d868:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d86c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d870:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d874:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d878:	ee17 2a90 	vmov	r2, s15
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d880:	4b13      	ldr	r3, [pc, #76]	; (800d8d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d884:	0e1b      	lsrs	r3, r3, #24
 800d886:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d88a:	ee07 3a90 	vmov	s15, r3
 800d88e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d892:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d896:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d89a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d89e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d8a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8a6:	ee17 2a90 	vmov	r2, s15
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d8ae:	e008      	b.n	800d8c2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2200      	movs	r2, #0
 800d8c0:	609a      	str	r2, [r3, #8]
}
 800d8c2:	bf00      	nop
 800d8c4:	3724      	adds	r7, #36	; 0x24
 800d8c6:	46bd      	mov	sp, r7
 800d8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8cc:	4770      	bx	lr
 800d8ce:	bf00      	nop
 800d8d0:	58024400 	.word	0x58024400
 800d8d4:	03d09000 	.word	0x03d09000
 800d8d8:	46000000 	.word	0x46000000
 800d8dc:	4c742400 	.word	0x4c742400
 800d8e0:	4a742400 	.word	0x4a742400
 800d8e4:	4c3ebc20 	.word	0x4c3ebc20

0800d8e8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d8e8:	b480      	push	{r7}
 800d8ea:	b089      	sub	sp, #36	; 0x24
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d8f0:	4ba0      	ldr	r3, [pc, #640]	; (800db74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d8f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8f4:	f003 0303 	and.w	r3, r3, #3
 800d8f8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d8fa:	4b9e      	ldr	r3, [pc, #632]	; (800db74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d8fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8fe:	091b      	lsrs	r3, r3, #4
 800d900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d904:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d906:	4b9b      	ldr	r3, [pc, #620]	; (800db74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d90a:	f003 0301 	and.w	r3, r3, #1
 800d90e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d910:	4b98      	ldr	r3, [pc, #608]	; (800db74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d914:	08db      	lsrs	r3, r3, #3
 800d916:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d91a:	693a      	ldr	r2, [r7, #16]
 800d91c:	fb02 f303 	mul.w	r3, r2, r3
 800d920:	ee07 3a90 	vmov	s15, r3
 800d924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d928:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	f000 8111 	beq.w	800db56 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d934:	69bb      	ldr	r3, [r7, #24]
 800d936:	2b02      	cmp	r3, #2
 800d938:	f000 8083 	beq.w	800da42 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d93c:	69bb      	ldr	r3, [r7, #24]
 800d93e:	2b02      	cmp	r3, #2
 800d940:	f200 80a1 	bhi.w	800da86 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d944:	69bb      	ldr	r3, [r7, #24]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d003      	beq.n	800d952 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d94a:	69bb      	ldr	r3, [r7, #24]
 800d94c:	2b01      	cmp	r3, #1
 800d94e:	d056      	beq.n	800d9fe <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d950:	e099      	b.n	800da86 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d952:	4b88      	ldr	r3, [pc, #544]	; (800db74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	f003 0320 	and.w	r3, r3, #32
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d02d      	beq.n	800d9ba <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d95e:	4b85      	ldr	r3, [pc, #532]	; (800db74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	08db      	lsrs	r3, r3, #3
 800d964:	f003 0303 	and.w	r3, r3, #3
 800d968:	4a83      	ldr	r2, [pc, #524]	; (800db78 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d96a:	fa22 f303 	lsr.w	r3, r2, r3
 800d96e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	ee07 3a90 	vmov	s15, r3
 800d976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d97a:	697b      	ldr	r3, [r7, #20]
 800d97c:	ee07 3a90 	vmov	s15, r3
 800d980:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d984:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d988:	4b7a      	ldr	r3, [pc, #488]	; (800db74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d98a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d98c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d990:	ee07 3a90 	vmov	s15, r3
 800d994:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d998:	ed97 6a03 	vldr	s12, [r7, #12]
 800d99c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800db7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d9a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d9ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9b4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d9b8:	e087      	b.n	800daca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d9ba:	697b      	ldr	r3, [r7, #20]
 800d9bc:	ee07 3a90 	vmov	s15, r3
 800d9c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9c4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800db80 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d9c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9cc:	4b69      	ldr	r3, [pc, #420]	; (800db74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d9ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9d4:	ee07 3a90 	vmov	s15, r3
 800d9d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9dc:	ed97 6a03 	vldr	s12, [r7, #12]
 800d9e0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800db7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d9e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d9f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9f8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d9fc:	e065      	b.n	800daca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d9fe:	697b      	ldr	r3, [r7, #20]
 800da00:	ee07 3a90 	vmov	s15, r3
 800da04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da08:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800db84 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800da0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da10:	4b58      	ldr	r3, [pc, #352]	; (800db74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da18:	ee07 3a90 	vmov	s15, r3
 800da1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da20:	ed97 6a03 	vldr	s12, [r7, #12]
 800da24:	eddf 5a55 	vldr	s11, [pc, #340]	; 800db7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800da28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da38:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da3c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da40:	e043      	b.n	800daca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800da42:	697b      	ldr	r3, [r7, #20]
 800da44:	ee07 3a90 	vmov	s15, r3
 800da48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da4c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800db88 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800da50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da54:	4b47      	ldr	r3, [pc, #284]	; (800db74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da5c:	ee07 3a90 	vmov	s15, r3
 800da60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da64:	ed97 6a03 	vldr	s12, [r7, #12]
 800da68:	eddf 5a44 	vldr	s11, [pc, #272]	; 800db7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800da6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da80:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da84:	e021      	b.n	800daca <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800da86:	697b      	ldr	r3, [r7, #20]
 800da88:	ee07 3a90 	vmov	s15, r3
 800da8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da90:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800db80 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800da94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da98:	4b36      	ldr	r3, [pc, #216]	; (800db74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800daa0:	ee07 3a90 	vmov	s15, r3
 800daa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800daa8:	ed97 6a03 	vldr	s12, [r7, #12]
 800daac:	eddf 5a33 	vldr	s11, [pc, #204]	; 800db7c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dab0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dab4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dab8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dabc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dac0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dac4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dac8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800daca:	4b2a      	ldr	r3, [pc, #168]	; (800db74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dacc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dace:	0a5b      	lsrs	r3, r3, #9
 800dad0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dad4:	ee07 3a90 	vmov	s15, r3
 800dad8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dadc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dae0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dae4:	edd7 6a07 	vldr	s13, [r7, #28]
 800dae8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800daec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800daf0:	ee17 2a90 	vmov	r2, s15
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800daf8:	4b1e      	ldr	r3, [pc, #120]	; (800db74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dafa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dafc:	0c1b      	lsrs	r3, r3, #16
 800dafe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db02:	ee07 3a90 	vmov	s15, r3
 800db06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800db0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800db12:	edd7 6a07 	vldr	s13, [r7, #28]
 800db16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db1e:	ee17 2a90 	vmov	r2, s15
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800db26:	4b13      	ldr	r3, [pc, #76]	; (800db74 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db2a:	0e1b      	lsrs	r3, r3, #24
 800db2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db30:	ee07 3a90 	vmov	s15, r3
 800db34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800db3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800db40:	edd7 6a07 	vldr	s13, [r7, #28]
 800db44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db4c:	ee17 2a90 	vmov	r2, s15
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800db54:	e008      	b.n	800db68 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	2200      	movs	r2, #0
 800db5a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2200      	movs	r2, #0
 800db60:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	2200      	movs	r2, #0
 800db66:	609a      	str	r2, [r3, #8]
}
 800db68:	bf00      	nop
 800db6a:	3724      	adds	r7, #36	; 0x24
 800db6c:	46bd      	mov	sp, r7
 800db6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db72:	4770      	bx	lr
 800db74:	58024400 	.word	0x58024400
 800db78:	03d09000 	.word	0x03d09000
 800db7c:	46000000 	.word	0x46000000
 800db80:	4c742400 	.word	0x4c742400
 800db84:	4a742400 	.word	0x4a742400
 800db88:	4c3ebc20 	.word	0x4c3ebc20

0800db8c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b084      	sub	sp, #16
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
 800db94:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800db96:	2300      	movs	r3, #0
 800db98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800db9a:	4b53      	ldr	r3, [pc, #332]	; (800dce8 <RCCEx_PLL2_Config+0x15c>)
 800db9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db9e:	f003 0303 	and.w	r3, r3, #3
 800dba2:	2b03      	cmp	r3, #3
 800dba4:	d101      	bne.n	800dbaa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800dba6:	2301      	movs	r3, #1
 800dba8:	e099      	b.n	800dcde <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800dbaa:	4b4f      	ldr	r3, [pc, #316]	; (800dce8 <RCCEx_PLL2_Config+0x15c>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	4a4e      	ldr	r2, [pc, #312]	; (800dce8 <RCCEx_PLL2_Config+0x15c>)
 800dbb0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800dbb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dbb6:	f7f6 fa2d 	bl	8004014 <HAL_GetTick>
 800dbba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dbbc:	e008      	b.n	800dbd0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dbbe:	f7f6 fa29 	bl	8004014 <HAL_GetTick>
 800dbc2:	4602      	mov	r2, r0
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	1ad3      	subs	r3, r2, r3
 800dbc8:	2b02      	cmp	r3, #2
 800dbca:	d901      	bls.n	800dbd0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800dbcc:	2303      	movs	r3, #3
 800dbce:	e086      	b.n	800dcde <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dbd0:	4b45      	ldr	r3, [pc, #276]	; (800dce8 <RCCEx_PLL2_Config+0x15c>)
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d1f0      	bne.n	800dbbe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800dbdc:	4b42      	ldr	r3, [pc, #264]	; (800dce8 <RCCEx_PLL2_Config+0x15c>)
 800dbde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbe0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	031b      	lsls	r3, r3, #12
 800dbea:	493f      	ldr	r1, [pc, #252]	; (800dce8 <RCCEx_PLL2_Config+0x15c>)
 800dbec:	4313      	orrs	r3, r2
 800dbee:	628b      	str	r3, [r1, #40]	; 0x28
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	685b      	ldr	r3, [r3, #4]
 800dbf4:	3b01      	subs	r3, #1
 800dbf6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	689b      	ldr	r3, [r3, #8]
 800dbfe:	3b01      	subs	r3, #1
 800dc00:	025b      	lsls	r3, r3, #9
 800dc02:	b29b      	uxth	r3, r3
 800dc04:	431a      	orrs	r2, r3
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	68db      	ldr	r3, [r3, #12]
 800dc0a:	3b01      	subs	r3, #1
 800dc0c:	041b      	lsls	r3, r3, #16
 800dc0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800dc12:	431a      	orrs	r2, r3
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	691b      	ldr	r3, [r3, #16]
 800dc18:	3b01      	subs	r3, #1
 800dc1a:	061b      	lsls	r3, r3, #24
 800dc1c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800dc20:	4931      	ldr	r1, [pc, #196]	; (800dce8 <RCCEx_PLL2_Config+0x15c>)
 800dc22:	4313      	orrs	r3, r2
 800dc24:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800dc26:	4b30      	ldr	r3, [pc, #192]	; (800dce8 <RCCEx_PLL2_Config+0x15c>)
 800dc28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc2a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	695b      	ldr	r3, [r3, #20]
 800dc32:	492d      	ldr	r1, [pc, #180]	; (800dce8 <RCCEx_PLL2_Config+0x15c>)
 800dc34:	4313      	orrs	r3, r2
 800dc36:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800dc38:	4b2b      	ldr	r3, [pc, #172]	; (800dce8 <RCCEx_PLL2_Config+0x15c>)
 800dc3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc3c:	f023 0220 	bic.w	r2, r3, #32
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	699b      	ldr	r3, [r3, #24]
 800dc44:	4928      	ldr	r1, [pc, #160]	; (800dce8 <RCCEx_PLL2_Config+0x15c>)
 800dc46:	4313      	orrs	r3, r2
 800dc48:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800dc4a:	4b27      	ldr	r3, [pc, #156]	; (800dce8 <RCCEx_PLL2_Config+0x15c>)
 800dc4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc4e:	4a26      	ldr	r2, [pc, #152]	; (800dce8 <RCCEx_PLL2_Config+0x15c>)
 800dc50:	f023 0310 	bic.w	r3, r3, #16
 800dc54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800dc56:	4b24      	ldr	r3, [pc, #144]	; (800dce8 <RCCEx_PLL2_Config+0x15c>)
 800dc58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc5a:	4b24      	ldr	r3, [pc, #144]	; (800dcec <RCCEx_PLL2_Config+0x160>)
 800dc5c:	4013      	ands	r3, r2
 800dc5e:	687a      	ldr	r2, [r7, #4]
 800dc60:	69d2      	ldr	r2, [r2, #28]
 800dc62:	00d2      	lsls	r2, r2, #3
 800dc64:	4920      	ldr	r1, [pc, #128]	; (800dce8 <RCCEx_PLL2_Config+0x15c>)
 800dc66:	4313      	orrs	r3, r2
 800dc68:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800dc6a:	4b1f      	ldr	r3, [pc, #124]	; (800dce8 <RCCEx_PLL2_Config+0x15c>)
 800dc6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc6e:	4a1e      	ldr	r2, [pc, #120]	; (800dce8 <RCCEx_PLL2_Config+0x15c>)
 800dc70:	f043 0310 	orr.w	r3, r3, #16
 800dc74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d106      	bne.n	800dc8a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800dc7c:	4b1a      	ldr	r3, [pc, #104]	; (800dce8 <RCCEx_PLL2_Config+0x15c>)
 800dc7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc80:	4a19      	ldr	r2, [pc, #100]	; (800dce8 <RCCEx_PLL2_Config+0x15c>)
 800dc82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dc86:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dc88:	e00f      	b.n	800dcaa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	2b01      	cmp	r3, #1
 800dc8e:	d106      	bne.n	800dc9e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800dc90:	4b15      	ldr	r3, [pc, #84]	; (800dce8 <RCCEx_PLL2_Config+0x15c>)
 800dc92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc94:	4a14      	ldr	r2, [pc, #80]	; (800dce8 <RCCEx_PLL2_Config+0x15c>)
 800dc96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dc9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800dc9c:	e005      	b.n	800dcaa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800dc9e:	4b12      	ldr	r3, [pc, #72]	; (800dce8 <RCCEx_PLL2_Config+0x15c>)
 800dca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dca2:	4a11      	ldr	r2, [pc, #68]	; (800dce8 <RCCEx_PLL2_Config+0x15c>)
 800dca4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dca8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800dcaa:	4b0f      	ldr	r3, [pc, #60]	; (800dce8 <RCCEx_PLL2_Config+0x15c>)
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	4a0e      	ldr	r2, [pc, #56]	; (800dce8 <RCCEx_PLL2_Config+0x15c>)
 800dcb0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dcb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dcb6:	f7f6 f9ad 	bl	8004014 <HAL_GetTick>
 800dcba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dcbc:	e008      	b.n	800dcd0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dcbe:	f7f6 f9a9 	bl	8004014 <HAL_GetTick>
 800dcc2:	4602      	mov	r2, r0
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	1ad3      	subs	r3, r2, r3
 800dcc8:	2b02      	cmp	r3, #2
 800dcca:	d901      	bls.n	800dcd0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800dccc:	2303      	movs	r3, #3
 800dcce:	e006      	b.n	800dcde <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dcd0:	4b05      	ldr	r3, [pc, #20]	; (800dce8 <RCCEx_PLL2_Config+0x15c>)
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d0f0      	beq.n	800dcbe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800dcdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcde:	4618      	mov	r0, r3
 800dce0:	3710      	adds	r7, #16
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}
 800dce6:	bf00      	nop
 800dce8:	58024400 	.word	0x58024400
 800dcec:	ffff0007 	.word	0xffff0007

0800dcf0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b084      	sub	sp, #16
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
 800dcf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dcfe:	4b53      	ldr	r3, [pc, #332]	; (800de4c <RCCEx_PLL3_Config+0x15c>)
 800dd00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd02:	f003 0303 	and.w	r3, r3, #3
 800dd06:	2b03      	cmp	r3, #3
 800dd08:	d101      	bne.n	800dd0e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800dd0a:	2301      	movs	r3, #1
 800dd0c:	e099      	b.n	800de42 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800dd0e:	4b4f      	ldr	r3, [pc, #316]	; (800de4c <RCCEx_PLL3_Config+0x15c>)
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	4a4e      	ldr	r2, [pc, #312]	; (800de4c <RCCEx_PLL3_Config+0x15c>)
 800dd14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dd18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dd1a:	f7f6 f97b 	bl	8004014 <HAL_GetTick>
 800dd1e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dd20:	e008      	b.n	800dd34 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dd22:	f7f6 f977 	bl	8004014 <HAL_GetTick>
 800dd26:	4602      	mov	r2, r0
 800dd28:	68bb      	ldr	r3, [r7, #8]
 800dd2a:	1ad3      	subs	r3, r2, r3
 800dd2c:	2b02      	cmp	r3, #2
 800dd2e:	d901      	bls.n	800dd34 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800dd30:	2303      	movs	r3, #3
 800dd32:	e086      	b.n	800de42 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dd34:	4b45      	ldr	r3, [pc, #276]	; (800de4c <RCCEx_PLL3_Config+0x15c>)
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d1f0      	bne.n	800dd22 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800dd40:	4b42      	ldr	r3, [pc, #264]	; (800de4c <RCCEx_PLL3_Config+0x15c>)
 800dd42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd44:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	051b      	lsls	r3, r3, #20
 800dd4e:	493f      	ldr	r1, [pc, #252]	; (800de4c <RCCEx_PLL3_Config+0x15c>)
 800dd50:	4313      	orrs	r3, r2
 800dd52:	628b      	str	r3, [r1, #40]	; 0x28
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	685b      	ldr	r3, [r3, #4]
 800dd58:	3b01      	subs	r3, #1
 800dd5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	689b      	ldr	r3, [r3, #8]
 800dd62:	3b01      	subs	r3, #1
 800dd64:	025b      	lsls	r3, r3, #9
 800dd66:	b29b      	uxth	r3, r3
 800dd68:	431a      	orrs	r2, r3
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	68db      	ldr	r3, [r3, #12]
 800dd6e:	3b01      	subs	r3, #1
 800dd70:	041b      	lsls	r3, r3, #16
 800dd72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800dd76:	431a      	orrs	r2, r3
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	691b      	ldr	r3, [r3, #16]
 800dd7c:	3b01      	subs	r3, #1
 800dd7e:	061b      	lsls	r3, r3, #24
 800dd80:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800dd84:	4931      	ldr	r1, [pc, #196]	; (800de4c <RCCEx_PLL3_Config+0x15c>)
 800dd86:	4313      	orrs	r3, r2
 800dd88:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800dd8a:	4b30      	ldr	r3, [pc, #192]	; (800de4c <RCCEx_PLL3_Config+0x15c>)
 800dd8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd8e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	695b      	ldr	r3, [r3, #20]
 800dd96:	492d      	ldr	r1, [pc, #180]	; (800de4c <RCCEx_PLL3_Config+0x15c>)
 800dd98:	4313      	orrs	r3, r2
 800dd9a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800dd9c:	4b2b      	ldr	r3, [pc, #172]	; (800de4c <RCCEx_PLL3_Config+0x15c>)
 800dd9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dda0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	699b      	ldr	r3, [r3, #24]
 800dda8:	4928      	ldr	r1, [pc, #160]	; (800de4c <RCCEx_PLL3_Config+0x15c>)
 800ddaa:	4313      	orrs	r3, r2
 800ddac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ddae:	4b27      	ldr	r3, [pc, #156]	; (800de4c <RCCEx_PLL3_Config+0x15c>)
 800ddb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddb2:	4a26      	ldr	r2, [pc, #152]	; (800de4c <RCCEx_PLL3_Config+0x15c>)
 800ddb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ddb8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ddba:	4b24      	ldr	r3, [pc, #144]	; (800de4c <RCCEx_PLL3_Config+0x15c>)
 800ddbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ddbe:	4b24      	ldr	r3, [pc, #144]	; (800de50 <RCCEx_PLL3_Config+0x160>)
 800ddc0:	4013      	ands	r3, r2
 800ddc2:	687a      	ldr	r2, [r7, #4]
 800ddc4:	69d2      	ldr	r2, [r2, #28]
 800ddc6:	00d2      	lsls	r2, r2, #3
 800ddc8:	4920      	ldr	r1, [pc, #128]	; (800de4c <RCCEx_PLL3_Config+0x15c>)
 800ddca:	4313      	orrs	r3, r2
 800ddcc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ddce:	4b1f      	ldr	r3, [pc, #124]	; (800de4c <RCCEx_PLL3_Config+0x15c>)
 800ddd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddd2:	4a1e      	ldr	r2, [pc, #120]	; (800de4c <RCCEx_PLL3_Config+0x15c>)
 800ddd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ddd8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d106      	bne.n	800ddee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800dde0:	4b1a      	ldr	r3, [pc, #104]	; (800de4c <RCCEx_PLL3_Config+0x15c>)
 800dde2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dde4:	4a19      	ldr	r2, [pc, #100]	; (800de4c <RCCEx_PLL3_Config+0x15c>)
 800dde6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ddea:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ddec:	e00f      	b.n	800de0e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	2b01      	cmp	r3, #1
 800ddf2:	d106      	bne.n	800de02 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ddf4:	4b15      	ldr	r3, [pc, #84]	; (800de4c <RCCEx_PLL3_Config+0x15c>)
 800ddf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddf8:	4a14      	ldr	r2, [pc, #80]	; (800de4c <RCCEx_PLL3_Config+0x15c>)
 800ddfa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ddfe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800de00:	e005      	b.n	800de0e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800de02:	4b12      	ldr	r3, [pc, #72]	; (800de4c <RCCEx_PLL3_Config+0x15c>)
 800de04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de06:	4a11      	ldr	r2, [pc, #68]	; (800de4c <RCCEx_PLL3_Config+0x15c>)
 800de08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800de0c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800de0e:	4b0f      	ldr	r3, [pc, #60]	; (800de4c <RCCEx_PLL3_Config+0x15c>)
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	4a0e      	ldr	r2, [pc, #56]	; (800de4c <RCCEx_PLL3_Config+0x15c>)
 800de14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800de18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800de1a:	f7f6 f8fb 	bl	8004014 <HAL_GetTick>
 800de1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800de20:	e008      	b.n	800de34 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800de22:	f7f6 f8f7 	bl	8004014 <HAL_GetTick>
 800de26:	4602      	mov	r2, r0
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	1ad3      	subs	r3, r2, r3
 800de2c:	2b02      	cmp	r3, #2
 800de2e:	d901      	bls.n	800de34 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800de30:	2303      	movs	r3, #3
 800de32:	e006      	b.n	800de42 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800de34:	4b05      	ldr	r3, [pc, #20]	; (800de4c <RCCEx_PLL3_Config+0x15c>)
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d0f0      	beq.n	800de22 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800de40:	7bfb      	ldrb	r3, [r7, #15]
}
 800de42:	4618      	mov	r0, r3
 800de44:	3710      	adds	r7, #16
 800de46:	46bd      	mov	sp, r7
 800de48:	bd80      	pop	{r7, pc}
 800de4a:	bf00      	nop
 800de4c:	58024400 	.word	0x58024400
 800de50:	ffff0007 	.word	0xffff0007

0800de54 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b08a      	sub	sp, #40	; 0x28
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d101      	bne.n	800de66 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800de62:	2301      	movs	r3, #1
 800de64:	e075      	b.n	800df52 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800de6c:	b2db      	uxtb	r3, r3
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d105      	bne.n	800de7e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	2200      	movs	r2, #0
 800de76:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800de78:	6878      	ldr	r0, [r7, #4]
 800de7a:	f7f5 f963 	bl	8003144 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	2204      	movs	r2, #4
 800de82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800de86:	6878      	ldr	r0, [r7, #4]
 800de88:	f000 f868 	bl	800df5c <HAL_SD_InitCard>
 800de8c:	4603      	mov	r3, r0
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d001      	beq.n	800de96 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800de92:	2301      	movs	r3, #1
 800de94:	e05d      	b.n	800df52 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800de96:	f107 0308 	add.w	r3, r7, #8
 800de9a:	4619      	mov	r1, r3
 800de9c:	6878      	ldr	r0, [r7, #4]
 800de9e:	f000 fdaf 	bl	800ea00 <HAL_SD_GetCardStatus>
 800dea2:	4603      	mov	r3, r0
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d001      	beq.n	800deac <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800dea8:	2301      	movs	r3, #1
 800deaa:	e052      	b.n	800df52 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800deac:	7e3b      	ldrb	r3, [r7, #24]
 800deae:	b2db      	uxtb	r3, r3
 800deb0:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800deb2:	7e7b      	ldrb	r3, [r7, #25]
 800deb4:	b2db      	uxtb	r3, r3
 800deb6:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800debc:	2b01      	cmp	r3, #1
 800debe:	d10a      	bne.n	800ded6 <HAL_SD_Init+0x82>
 800dec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d102      	bne.n	800decc <HAL_SD_Init+0x78>
 800dec6:	6a3b      	ldr	r3, [r7, #32]
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d004      	beq.n	800ded6 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ded2:	659a      	str	r2, [r3, #88]	; 0x58
 800ded4:	e00b      	b.n	800deee <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deda:	2b01      	cmp	r3, #1
 800dedc:	d104      	bne.n	800dee8 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dee4:	659a      	str	r2, [r3, #88]	; 0x58
 800dee6:	e002      	b.n	800deee <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	2200      	movs	r2, #0
 800deec:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	68db      	ldr	r3, [r3, #12]
 800def2:	4619      	mov	r1, r3
 800def4:	6878      	ldr	r0, [r7, #4]
 800def6:	f000 fe6d 	bl	800ebd4 <HAL_SD_ConfigWideBusOperation>
 800defa:	4603      	mov	r3, r0
 800defc:	2b00      	cmp	r3, #0
 800defe:	d001      	beq.n	800df04 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800df00:	2301      	movs	r3, #1
 800df02:	e026      	b.n	800df52 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800df04:	f7f6 f886 	bl	8004014 <HAL_GetTick>
 800df08:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800df0a:	e011      	b.n	800df30 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800df0c:	f7f6 f882 	bl	8004014 <HAL_GetTick>
 800df10:	4602      	mov	r2, r0
 800df12:	69fb      	ldr	r3, [r7, #28]
 800df14:	1ad3      	subs	r3, r2, r3
 800df16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df1a:	d109      	bne.n	800df30 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800df22:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2201      	movs	r2, #1
 800df28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800df2c:	2303      	movs	r3, #3
 800df2e:	e010      	b.n	800df52 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800df30:	6878      	ldr	r0, [r7, #4]
 800df32:	f000 ff61 	bl	800edf8 <HAL_SD_GetCardState>
 800df36:	4603      	mov	r3, r0
 800df38:	2b04      	cmp	r3, #4
 800df3a:	d1e7      	bne.n	800df0c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	2200      	movs	r2, #0
 800df40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	2200      	movs	r2, #0
 800df46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2201      	movs	r2, #1
 800df4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800df50:	2300      	movs	r3, #0
}
 800df52:	4618      	mov	r0, r3
 800df54:	3728      	adds	r7, #40	; 0x28
 800df56:	46bd      	mov	sp, r7
 800df58:	bd80      	pop	{r7, pc}
	...

0800df5c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800df5c:	b590      	push	{r4, r7, lr}
 800df5e:	b08d      	sub	sp, #52	; 0x34
 800df60:	af02      	add	r7, sp, #8
 800df62:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800df64:	2300      	movs	r3, #0
 800df66:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800df68:	2300      	movs	r3, #0
 800df6a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800df6c:	2300      	movs	r3, #0
 800df6e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800df70:	2300      	movs	r3, #0
 800df72:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800df74:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800df78:	f04f 0100 	mov.w	r1, #0
 800df7c:	f7fe fd24 	bl	800c9c8 <HAL_RCCEx_GetPeriphCLKFreq>
 800df80:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800df82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df84:	2b00      	cmp	r3, #0
 800df86:	d109      	bne.n	800df9c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	2201      	movs	r2, #1
 800df8c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800df96:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800df98:	2301      	movs	r3, #1
 800df9a:	e070      	b.n	800e07e <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800df9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df9e:	0a1b      	lsrs	r3, r3, #8
 800dfa0:	4a39      	ldr	r2, [pc, #228]	; (800e088 <HAL_SD_InitCard+0x12c>)
 800dfa2:	fba2 2303 	umull	r2, r3, r2, r3
 800dfa6:	091b      	lsrs	r3, r3, #4
 800dfa8:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681c      	ldr	r4, [r3, #0]
 800dfae:	466a      	mov	r2, sp
 800dfb0:	f107 0318 	add.w	r3, r7, #24
 800dfb4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800dfb8:	e882 0003 	stmia.w	r2, {r0, r1}
 800dfbc:	f107 030c 	add.w	r3, r7, #12
 800dfc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dfc2:	4620      	mov	r0, r4
 800dfc4:	f004 fec4 	bl	8012d50 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	4618      	mov	r0, r3
 800dfce:	f004 ff07 	bl	8012de0 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800dfd2:	69fb      	ldr	r3, [r7, #28]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d005      	beq.n	800dfe4 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800dfd8:	69fb      	ldr	r3, [r7, #28]
 800dfda:	005b      	lsls	r3, r3, #1
 800dfdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfde:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfe2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800dfe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d007      	beq.n	800dffa <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800dfea:	4a28      	ldr	r2, [pc, #160]	; (800e08c <HAL_SD_InitCard+0x130>)
 800dfec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfee:	fbb2 f3f3 	udiv	r3, r2, r3
 800dff2:	3301      	adds	r3, #1
 800dff4:	4618      	mov	r0, r3
 800dff6:	f7f6 f819 	bl	800402c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800dffa:	6878      	ldr	r0, [r7, #4]
 800dffc:	f000 ffea 	bl	800efd4 <SD_PowerON>
 800e000:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e002:	6a3b      	ldr	r3, [r7, #32]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d00b      	beq.n	800e020 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2201      	movs	r2, #1
 800e00c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e014:	6a3b      	ldr	r3, [r7, #32]
 800e016:	431a      	orrs	r2, r3
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e01c:	2301      	movs	r3, #1
 800e01e:	e02e      	b.n	800e07e <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800e020:	6878      	ldr	r0, [r7, #4]
 800e022:	f000 ff09 	bl	800ee38 <SD_InitCard>
 800e026:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e028:	6a3b      	ldr	r3, [r7, #32]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d00b      	beq.n	800e046 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	2201      	movs	r2, #1
 800e032:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e03a:	6a3b      	ldr	r3, [r7, #32]
 800e03c:	431a      	orrs	r2, r3
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e042:	2301      	movs	r3, #1
 800e044:	e01b      	b.n	800e07e <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e04e:	4618      	mov	r0, r3
 800e050:	f004 ff5c 	bl	8012f0c <SDMMC_CmdBlockLength>
 800e054:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e056:	6a3b      	ldr	r3, [r7, #32]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d00f      	beq.n	800e07c <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	4a0b      	ldr	r2, [pc, #44]	; (800e090 <HAL_SD_InitCard+0x134>)
 800e062:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e068:	6a3b      	ldr	r3, [r7, #32]
 800e06a:	431a      	orrs	r2, r3
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	2201      	movs	r2, #1
 800e074:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800e078:	2301      	movs	r3, #1
 800e07a:	e000      	b.n	800e07e <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800e07c:	2300      	movs	r3, #0
}
 800e07e:	4618      	mov	r0, r3
 800e080:	372c      	adds	r7, #44	; 0x2c
 800e082:	46bd      	mov	sp, r7
 800e084:	bd90      	pop	{r4, r7, pc}
 800e086:	bf00      	nop
 800e088:	014f8b59 	.word	0x014f8b59
 800e08c:	00012110 	.word	0x00012110
 800e090:	1fe00fff 	.word	0x1fe00fff

0800e094 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b08c      	sub	sp, #48	; 0x30
 800e098:	af00      	add	r7, sp, #0
 800e09a:	60f8      	str	r0, [r7, #12]
 800e09c:	60b9      	str	r1, [r7, #8]
 800e09e:	607a      	str	r2, [r7, #4]
 800e0a0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800e0a6:	68bb      	ldr	r3, [r7, #8]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d107      	bne.n	800e0bc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0b0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e0b8:	2301      	movs	r3, #1
 800e0ba:	e08d      	b.n	800e1d8 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e0c2:	b2db      	uxtb	r3, r3
 800e0c4:	2b01      	cmp	r3, #1
 800e0c6:	f040 8086 	bne.w	800e1d6 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e0d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	441a      	add	r2, r3
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0da:	429a      	cmp	r2, r3
 800e0dc:	d907      	bls.n	800e0ee <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0e2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800e0ea:	2301      	movs	r3, #1
 800e0ec:	e074      	b.n	800e1d8 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	2203      	movs	r2, #3
 800e0f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	68ba      	ldr	r2, [r7, #8]
 800e102:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	025a      	lsls	r2, r3, #9
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e110:	2b01      	cmp	r3, #1
 800e112:	d002      	beq.n	800e11a <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800e114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e116:	025b      	lsls	r3, r3, #9
 800e118:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e11a:	f04f 33ff 	mov.w	r3, #4294967295
 800e11e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	025b      	lsls	r3, r3, #9
 800e124:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e126:	2390      	movs	r3, #144	; 0x90
 800e128:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e12a:	2302      	movs	r3, #2
 800e12c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e12e:	2300      	movs	r3, #0
 800e130:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800e132:	2300      	movs	r3, #0
 800e134:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	f107 0210 	add.w	r2, r7, #16
 800e13e:	4611      	mov	r1, r2
 800e140:	4618      	mov	r0, r3
 800e142:	f004 feb7 	bl	8012eb4 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	68da      	ldr	r2, [r3, #12]
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e154:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	68ba      	ldr	r2, [r7, #8]
 800e15c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	2201      	movs	r2, #1
 800e164:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	2b01      	cmp	r3, #1
 800e16a:	d90a      	bls.n	800e182 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	2282      	movs	r2, #130	; 0x82
 800e170:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e178:	4618      	mov	r0, r3
 800e17a:	f004 ff0d 	bl	8012f98 <SDMMC_CmdReadMultiBlock>
 800e17e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e180:	e009      	b.n	800e196 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	2281      	movs	r2, #129	; 0x81
 800e186:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e18e:	4618      	mov	r0, r3
 800e190:	f004 fedf 	bl	8012f52 <SDMMC_CmdReadSingleBlock>
 800e194:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800e196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d012      	beq.n	800e1c2 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	4a0f      	ldr	r2, [pc, #60]	; (800e1e0 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800e1a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1aa:	431a      	orrs	r2, r3
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	2201      	movs	r2, #1
 800e1b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800e1be:	2301      	movs	r3, #1
 800e1c0:	e00a      	b.n	800e1d8 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800e1d0:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	e000      	b.n	800e1d8 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800e1d6:	2302      	movs	r3, #2
  }
}
 800e1d8:	4618      	mov	r0, r3
 800e1da:	3730      	adds	r7, #48	; 0x30
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	bd80      	pop	{r7, pc}
 800e1e0:	1fe00fff 	.word	0x1fe00fff

0800e1e4 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b08c      	sub	sp, #48	; 0x30
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	60f8      	str	r0, [r7, #12]
 800e1ec:	60b9      	str	r1, [r7, #8]
 800e1ee:	607a      	str	r2, [r7, #4]
 800e1f0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d107      	bne.n	800e20c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e200:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e208:	2301      	movs	r3, #1
 800e20a:	e08d      	b.n	800e328 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e212:	b2db      	uxtb	r3, r3
 800e214:	2b01      	cmp	r3, #1
 800e216:	f040 8086 	bne.w	800e326 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	2200      	movs	r2, #0
 800e21e:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e220:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	441a      	add	r2, r3
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e22a:	429a      	cmp	r2, r3
 800e22c:	d907      	bls.n	800e23e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e232:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800e23a:	2301      	movs	r3, #1
 800e23c:	e074      	b.n	800e328 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	2203      	movs	r2, #3
 800e242:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	2200      	movs	r2, #0
 800e24c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	68ba      	ldr	r2, [r7, #8]
 800e252:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800e254:	683b      	ldr	r3, [r7, #0]
 800e256:	025a      	lsls	r2, r3, #9
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e260:	2b01      	cmp	r3, #1
 800e262:	d002      	beq.n	800e26a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800e264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e266:	025b      	lsls	r3, r3, #9
 800e268:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e26a:	f04f 33ff 	mov.w	r3, #4294967295
 800e26e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800e270:	683b      	ldr	r3, [r7, #0]
 800e272:	025b      	lsls	r3, r3, #9
 800e274:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e276:	2390      	movs	r3, #144	; 0x90
 800e278:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800e27a:	2300      	movs	r3, #0
 800e27c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e27e:	2300      	movs	r3, #0
 800e280:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800e282:	2300      	movs	r3, #0
 800e284:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	f107 0210 	add.w	r2, r7, #16
 800e28e:	4611      	mov	r1, r2
 800e290:	4618      	mov	r0, r3
 800e292:	f004 fe0f 	bl	8012eb4 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	68da      	ldr	r2, [r3, #12]
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e2a4:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	68ba      	ldr	r2, [r7, #8]
 800e2ac:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	2201      	movs	r2, #1
 800e2b4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800e2b6:	683b      	ldr	r3, [r7, #0]
 800e2b8:	2b01      	cmp	r3, #1
 800e2ba:	d90a      	bls.n	800e2d2 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	22a0      	movs	r2, #160	; 0xa0
 800e2c0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	f004 feab 	bl	8013024 <SDMMC_CmdWriteMultiBlock>
 800e2ce:	62f8      	str	r0, [r7, #44]	; 0x2c
 800e2d0:	e009      	b.n	800e2e6 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	2290      	movs	r2, #144	; 0x90
 800e2d6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f004 fe7d 	bl	8012fde <SDMMC_CmdWriteSingleBlock>
 800e2e4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800e2e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d012      	beq.n	800e312 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	4a0f      	ldr	r2, [pc, #60]	; (800e330 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800e2f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2fa:	431a      	orrs	r2, r3
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	2201      	movs	r2, #1
 800e304:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	2200      	movs	r2, #0
 800e30c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800e30e:	2301      	movs	r3, #1
 800e310:	e00a      	b.n	800e328 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800e320:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800e322:	2300      	movs	r3, #0
 800e324:	e000      	b.n	800e328 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800e326:	2302      	movs	r3, #2
  }
}
 800e328:	4618      	mov	r0, r3
 800e32a:	3730      	adds	r7, #48	; 0x30
 800e32c:	46bd      	mov	sp, r7
 800e32e:	bd80      	pop	{r7, pc}
 800e330:	1fe00fff 	.word	0x1fe00fff

0800e334 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b084      	sub	sp, #16
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e340:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e348:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d008      	beq.n	800e362 <HAL_SD_IRQHandler+0x2e>
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	f003 0308 	and.w	r3, r3, #8
 800e356:	2b00      	cmp	r3, #0
 800e358:	d003      	beq.n	800e362 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800e35a:	6878      	ldr	r0, [r7, #4]
 800e35c:	f001 f926 	bl	800f5ac <SD_Read_IT>
 800e360:	e19a      	b.n	800e698 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	f000 80ac 	beq.w	800e4ca <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e37a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681a      	ldr	r2, [r3, #0]
 800e386:	4b59      	ldr	r3, [pc, #356]	; (800e4ec <HAL_SD_IRQHandler+0x1b8>)
 800e388:	400b      	ands	r3, r1
 800e38a:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e39a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	68da      	ldr	r2, [r3, #12]
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e3aa:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	f003 0308 	and.w	r3, r3, #8
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d038      	beq.n	800e428 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	f003 0302 	and.w	r3, r3, #2
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d104      	bne.n	800e3ca <HAL_SD_IRQHandler+0x96>
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	f003 0320 	and.w	r3, r3, #32
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d011      	beq.n	800e3ee <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	4618      	mov	r0, r3
 800e3d0:	f004 fe4c 	bl	801306c <SDMMC_CmdStopTransfer>
 800e3d4:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800e3d6:	68bb      	ldr	r3, [r7, #8]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d008      	beq.n	800e3ee <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e3e0:	68bb      	ldr	r3, [r7, #8]
 800e3e2:	431a      	orrs	r2, r3
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800e3e8:	6878      	ldr	r0, [r7, #4]
 800e3ea:	f000 f95b 	bl	800e6a4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	4a3f      	ldr	r2, [pc, #252]	; (800e4f0 <HAL_SD_IRQHandler+0x1bc>)
 800e3f4:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	2201      	movs	r2, #1
 800e3fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	2200      	movs	r2, #0
 800e402:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	f003 0301 	and.w	r3, r3, #1
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d104      	bne.n	800e418 <HAL_SD_IRQHandler+0xe4>
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	f003 0302 	and.w	r3, r3, #2
 800e414:	2b00      	cmp	r3, #0
 800e416:	d003      	beq.n	800e420 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800e418:	6878      	ldr	r0, [r7, #4]
 800e41a:	f006 fe55 	bl	80150c8 <HAL_SD_RxCpltCallback>
 800e41e:	e13b      	b.n	800e698 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800e420:	6878      	ldr	r0, [r7, #4]
 800e422:	f006 fe47 	bl	80150b4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800e426:	e137      	b.n	800e698 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e42e:	2b00      	cmp	r3, #0
 800e430:	f000 8132 	beq.w	800e698 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	2200      	movs	r2, #0
 800e43a:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	2200      	movs	r2, #0
 800e442:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	2200      	movs	r2, #0
 800e44a:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	f003 0302 	and.w	r3, r3, #2
 800e452:	2b00      	cmp	r3, #0
 800e454:	d104      	bne.n	800e460 <HAL_SD_IRQHandler+0x12c>
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	f003 0320 	and.w	r3, r3, #32
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d011      	beq.n	800e484 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	4618      	mov	r0, r3
 800e466:	f004 fe01 	bl	801306c <SDMMC_CmdStopTransfer>
 800e46a:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800e46c:	68bb      	ldr	r3, [r7, #8]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d008      	beq.n	800e484 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e476:	68bb      	ldr	r3, [r7, #8]
 800e478:	431a      	orrs	r2, r3
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800e47e:	6878      	ldr	r0, [r7, #4]
 800e480:	f000 f910 	bl	800e6a4 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	2201      	movs	r2, #1
 800e488:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	2200      	movs	r2, #0
 800e490:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	f003 0310 	and.w	r3, r3, #16
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d104      	bne.n	800e4a6 <HAL_SD_IRQHandler+0x172>
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	f003 0320 	and.w	r3, r3, #32
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d002      	beq.n	800e4ac <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800e4a6:	6878      	ldr	r0, [r7, #4]
 800e4a8:	f006 fe04 	bl	80150b4 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	f003 0301 	and.w	r3, r3, #1
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d105      	bne.n	800e4c2 <HAL_SD_IRQHandler+0x18e>
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	f003 0302 	and.w	r3, r3, #2
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	f000 80eb 	beq.w	800e698 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f006 fe00 	bl	80150c8 <HAL_SD_RxCpltCallback>
}
 800e4c8:	e0e6      	b.n	800e698 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d00d      	beq.n	800e4f4 <HAL_SD_IRQHandler+0x1c0>
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	f003 0308 	and.w	r3, r3, #8
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d008      	beq.n	800e4f4 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800e4e2:	6878      	ldr	r0, [r7, #4]
 800e4e4:	f001 f8a8 	bl	800f638 <SD_Write_IT>
 800e4e8:	e0d6      	b.n	800e698 <HAL_SD_IRQHandler+0x364>
 800e4ea:	bf00      	nop
 800e4ec:	ffff3ec5 	.word	0xffff3ec5
 800e4f0:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4fa:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	f000 809d 	beq.w	800e63e <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e50a:	f003 0302 	and.w	r3, r3, #2
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d005      	beq.n	800e51e <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e516:	f043 0202 	orr.w	r2, r3, #2
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e524:	f003 0308 	and.w	r3, r3, #8
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d005      	beq.n	800e538 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e530:	f043 0208 	orr.w	r2, r3, #8
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e53e:	f003 0320 	and.w	r3, r3, #32
 800e542:	2b00      	cmp	r3, #0
 800e544:	d005      	beq.n	800e552 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e54a:	f043 0220 	orr.w	r2, r3, #32
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e558:	f003 0310 	and.w	r3, r3, #16
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d005      	beq.n	800e56c <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e564:	f043 0210 	orr.w	r2, r3, #16
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	4a4b      	ldr	r2, [pc, #300]	; (800e6a0 <HAL_SD_IRQHandler+0x36c>)
 800e572:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800e582:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	68da      	ldr	r2, [r3, #12]
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e592:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e5a2:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	68da      	ldr	r2, [r3, #12]
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e5b2:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	f004 fd57 	bl	801306c <SDMMC_CmdStopTransfer>
 800e5be:	4602      	mov	r2, r0
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5c4:	431a      	orrs	r2, r3
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	68da      	ldr	r2, [r3, #12]
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e5d8:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e5e2:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	f003 0308 	and.w	r3, r3, #8
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d00a      	beq.n	800e604 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	2201      	movs	r2, #1
 800e5f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800e5fc:	6878      	ldr	r0, [r7, #4]
 800e5fe:	f000 f851 	bl	800e6a4 <HAL_SD_ErrorCallback>
}
 800e602:	e049      	b.n	800e698 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d044      	beq.n	800e698 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e612:	2b00      	cmp	r3, #0
 800e614:	d040      	beq.n	800e698 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e624:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	2200      	movs	r2, #0
 800e62c:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	2201      	movs	r2, #1
 800e632:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800e636:	6878      	ldr	r0, [r7, #4]
 800e638:	f000 f834 	bl	800e6a4 <HAL_SD_ErrorCallback>
}
 800e63c:	e02c      	b.n	800e698 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d025      	beq.n	800e698 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e654:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e65c:	f003 0304 	and.w	r3, r3, #4
 800e660:	2b00      	cmp	r3, #0
 800e662:	d10c      	bne.n	800e67e <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	f003 0320 	and.w	r3, r3, #32
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d003      	beq.n	800e676 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800e66e:	6878      	ldr	r0, [r7, #4]
 800e670:	f001 f84a 	bl	800f708 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800e674:	e010      	b.n	800e698 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800e676:	6878      	ldr	r0, [r7, #4]
 800e678:	f001 f832 	bl	800f6e0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800e67c:	e00c      	b.n	800e698 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	f003 0320 	and.w	r3, r3, #32
 800e684:	2b00      	cmp	r3, #0
 800e686:	d003      	beq.n	800e690 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800e688:	6878      	ldr	r0, [r7, #4]
 800e68a:	f001 f833 	bl	800f6f4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800e68e:	e003      	b.n	800e698 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800e690:	6878      	ldr	r0, [r7, #4]
 800e692:	f001 f81b 	bl	800f6cc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800e696:	e7ff      	b.n	800e698 <HAL_SD_IRQHandler+0x364>
 800e698:	bf00      	nop
 800e69a:	3710      	adds	r7, #16
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bd80      	pop	{r7, pc}
 800e6a0:	18000f3a 	.word	0x18000f3a

0800e6a4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800e6a4:	b480      	push	{r7}
 800e6a6:	b083      	sub	sp, #12
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800e6ac:	bf00      	nop
 800e6ae:	370c      	adds	r7, #12
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b6:	4770      	bx	lr

0800e6b8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800e6b8:	b480      	push	{r7}
 800e6ba:	b083      	sub	sp, #12
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	6078      	str	r0, [r7, #4]
 800e6c0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e6c6:	0f9b      	lsrs	r3, r3, #30
 800e6c8:	b2da      	uxtb	r2, r3
 800e6ca:	683b      	ldr	r3, [r7, #0]
 800e6cc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e6d2:	0e9b      	lsrs	r3, r3, #26
 800e6d4:	b2db      	uxtb	r3, r3
 800e6d6:	f003 030f 	and.w	r3, r3, #15
 800e6da:	b2da      	uxtb	r2, r3
 800e6dc:	683b      	ldr	r3, [r7, #0]
 800e6de:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e6e4:	0e1b      	lsrs	r3, r3, #24
 800e6e6:	b2db      	uxtb	r3, r3
 800e6e8:	f003 0303 	and.w	r3, r3, #3
 800e6ec:	b2da      	uxtb	r2, r3
 800e6ee:	683b      	ldr	r3, [r7, #0]
 800e6f0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e6f6:	0c1b      	lsrs	r3, r3, #16
 800e6f8:	b2da      	uxtb	r2, r3
 800e6fa:	683b      	ldr	r3, [r7, #0]
 800e6fc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e702:	0a1b      	lsrs	r3, r3, #8
 800e704:	b2da      	uxtb	r2, r3
 800e706:	683b      	ldr	r3, [r7, #0]
 800e708:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e70e:	b2da      	uxtb	r2, r3
 800e710:	683b      	ldr	r3, [r7, #0]
 800e712:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e718:	0d1b      	lsrs	r3, r3, #20
 800e71a:	b29a      	uxth	r2, r3
 800e71c:	683b      	ldr	r3, [r7, #0]
 800e71e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e724:	0c1b      	lsrs	r3, r3, #16
 800e726:	b2db      	uxtb	r3, r3
 800e728:	f003 030f 	and.w	r3, r3, #15
 800e72c:	b2da      	uxtb	r2, r3
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e736:	0bdb      	lsrs	r3, r3, #15
 800e738:	b2db      	uxtb	r3, r3
 800e73a:	f003 0301 	and.w	r3, r3, #1
 800e73e:	b2da      	uxtb	r2, r3
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e748:	0b9b      	lsrs	r3, r3, #14
 800e74a:	b2db      	uxtb	r3, r3
 800e74c:	f003 0301 	and.w	r3, r3, #1
 800e750:	b2da      	uxtb	r2, r3
 800e752:	683b      	ldr	r3, [r7, #0]
 800e754:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e75a:	0b5b      	lsrs	r3, r3, #13
 800e75c:	b2db      	uxtb	r3, r3
 800e75e:	f003 0301 	and.w	r3, r3, #1
 800e762:	b2da      	uxtb	r2, r3
 800e764:	683b      	ldr	r3, [r7, #0]
 800e766:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e76c:	0b1b      	lsrs	r3, r3, #12
 800e76e:	b2db      	uxtb	r3, r3
 800e770:	f003 0301 	and.w	r3, r3, #1
 800e774:	b2da      	uxtb	r2, r3
 800e776:	683b      	ldr	r3, [r7, #0]
 800e778:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800e77a:	683b      	ldr	r3, [r7, #0]
 800e77c:	2200      	movs	r2, #0
 800e77e:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e784:	2b00      	cmp	r3, #0
 800e786:	d163      	bne.n	800e850 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e78c:	009a      	lsls	r2, r3, #2
 800e78e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800e792:	4013      	ands	r3, r2
 800e794:	687a      	ldr	r2, [r7, #4]
 800e796:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800e798:	0f92      	lsrs	r2, r2, #30
 800e79a:	431a      	orrs	r2, r3
 800e79c:	683b      	ldr	r3, [r7, #0]
 800e79e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7a4:	0edb      	lsrs	r3, r3, #27
 800e7a6:	b2db      	uxtb	r3, r3
 800e7a8:	f003 0307 	and.w	r3, r3, #7
 800e7ac:	b2da      	uxtb	r2, r3
 800e7ae:	683b      	ldr	r3, [r7, #0]
 800e7b0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7b6:	0e1b      	lsrs	r3, r3, #24
 800e7b8:	b2db      	uxtb	r3, r3
 800e7ba:	f003 0307 	and.w	r3, r3, #7
 800e7be:	b2da      	uxtb	r2, r3
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7c8:	0d5b      	lsrs	r3, r3, #21
 800e7ca:	b2db      	uxtb	r3, r3
 800e7cc:	f003 0307 	and.w	r3, r3, #7
 800e7d0:	b2da      	uxtb	r2, r3
 800e7d2:	683b      	ldr	r3, [r7, #0]
 800e7d4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7da:	0c9b      	lsrs	r3, r3, #18
 800e7dc:	b2db      	uxtb	r3, r3
 800e7de:	f003 0307 	and.w	r3, r3, #7
 800e7e2:	b2da      	uxtb	r2, r3
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7ec:	0bdb      	lsrs	r3, r3, #15
 800e7ee:	b2db      	uxtb	r3, r3
 800e7f0:	f003 0307 	and.w	r3, r3, #7
 800e7f4:	b2da      	uxtb	r2, r3
 800e7f6:	683b      	ldr	r3, [r7, #0]
 800e7f8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800e7fa:	683b      	ldr	r3, [r7, #0]
 800e7fc:	691b      	ldr	r3, [r3, #16]
 800e7fe:	1c5a      	adds	r2, r3, #1
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800e804:	683b      	ldr	r3, [r7, #0]
 800e806:	7e1b      	ldrb	r3, [r3, #24]
 800e808:	b2db      	uxtb	r3, r3
 800e80a:	f003 0307 	and.w	r3, r3, #7
 800e80e:	3302      	adds	r3, #2
 800e810:	2201      	movs	r2, #1
 800e812:	fa02 f303 	lsl.w	r3, r2, r3
 800e816:	687a      	ldr	r2, [r7, #4]
 800e818:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e81a:	fb03 f202 	mul.w	r2, r3, r2
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800e822:	683b      	ldr	r3, [r7, #0]
 800e824:	7a1b      	ldrb	r3, [r3, #8]
 800e826:	b2db      	uxtb	r3, r3
 800e828:	f003 030f 	and.w	r3, r3, #15
 800e82c:	2201      	movs	r2, #1
 800e82e:	409a      	lsls	r2, r3
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e838:	687a      	ldr	r2, [r7, #4]
 800e83a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800e83c:	0a52      	lsrs	r2, r2, #9
 800e83e:	fb03 f202 	mul.w	r2, r3, r2
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e84c:	655a      	str	r2, [r3, #84]	; 0x54
 800e84e:	e031      	b.n	800e8b4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e854:	2b01      	cmp	r3, #1
 800e856:	d11d      	bne.n	800e894 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e85c:	041b      	lsls	r3, r3, #16
 800e85e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e866:	0c1b      	lsrs	r3, r3, #16
 800e868:	431a      	orrs	r2, r3
 800e86a:	683b      	ldr	r3, [r7, #0]
 800e86c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800e86e:	683b      	ldr	r3, [r7, #0]
 800e870:	691b      	ldr	r3, [r3, #16]
 800e872:	3301      	adds	r3, #1
 800e874:	029a      	lsls	r2, r3, #10
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e888:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	655a      	str	r2, [r3, #84]	; 0x54
 800e892:	e00f      	b.n	800e8b4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	4a58      	ldr	r2, [pc, #352]	; (800e9fc <HAL_SD_GetCardCSD+0x344>)
 800e89a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	2201      	movs	r2, #1
 800e8ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800e8b0:	2301      	movs	r3, #1
 800e8b2:	e09d      	b.n	800e9f0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8b8:	0b9b      	lsrs	r3, r3, #14
 800e8ba:	b2db      	uxtb	r3, r3
 800e8bc:	f003 0301 	and.w	r3, r3, #1
 800e8c0:	b2da      	uxtb	r2, r3
 800e8c2:	683b      	ldr	r3, [r7, #0]
 800e8c4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8ca:	09db      	lsrs	r3, r3, #7
 800e8cc:	b2db      	uxtb	r3, r3
 800e8ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e8d2:	b2da      	uxtb	r2, r3
 800e8d4:	683b      	ldr	r3, [r7, #0]
 800e8d6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e8dc:	b2db      	uxtb	r3, r3
 800e8de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e8e2:	b2da      	uxtb	r2, r3
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e8ec:	0fdb      	lsrs	r3, r3, #31
 800e8ee:	b2da      	uxtb	r2, r3
 800e8f0:	683b      	ldr	r3, [r7, #0]
 800e8f2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e8f8:	0f5b      	lsrs	r3, r3, #29
 800e8fa:	b2db      	uxtb	r3, r3
 800e8fc:	f003 0303 	and.w	r3, r3, #3
 800e900:	b2da      	uxtb	r2, r3
 800e902:	683b      	ldr	r3, [r7, #0]
 800e904:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e90a:	0e9b      	lsrs	r3, r3, #26
 800e90c:	b2db      	uxtb	r3, r3
 800e90e:	f003 0307 	and.w	r3, r3, #7
 800e912:	b2da      	uxtb	r2, r3
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e91c:	0d9b      	lsrs	r3, r3, #22
 800e91e:	b2db      	uxtb	r3, r3
 800e920:	f003 030f 	and.w	r3, r3, #15
 800e924:	b2da      	uxtb	r2, r3
 800e926:	683b      	ldr	r3, [r7, #0]
 800e928:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e92e:	0d5b      	lsrs	r3, r3, #21
 800e930:	b2db      	uxtb	r3, r3
 800e932:	f003 0301 	and.w	r3, r3, #1
 800e936:	b2da      	uxtb	r2, r3
 800e938:	683b      	ldr	r3, [r7, #0]
 800e93a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	2200      	movs	r2, #0
 800e942:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e94a:	0c1b      	lsrs	r3, r3, #16
 800e94c:	b2db      	uxtb	r3, r3
 800e94e:	f003 0301 	and.w	r3, r3, #1
 800e952:	b2da      	uxtb	r2, r3
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e95e:	0bdb      	lsrs	r3, r3, #15
 800e960:	b2db      	uxtb	r3, r3
 800e962:	f003 0301 	and.w	r3, r3, #1
 800e966:	b2da      	uxtb	r2, r3
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e972:	0b9b      	lsrs	r3, r3, #14
 800e974:	b2db      	uxtb	r3, r3
 800e976:	f003 0301 	and.w	r3, r3, #1
 800e97a:	b2da      	uxtb	r2, r3
 800e97c:	683b      	ldr	r3, [r7, #0]
 800e97e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e986:	0b5b      	lsrs	r3, r3, #13
 800e988:	b2db      	uxtb	r3, r3
 800e98a:	f003 0301 	and.w	r3, r3, #1
 800e98e:	b2da      	uxtb	r2, r3
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e99a:	0b1b      	lsrs	r3, r3, #12
 800e99c:	b2db      	uxtb	r3, r3
 800e99e:	f003 0301 	and.w	r3, r3, #1
 800e9a2:	b2da      	uxtb	r2, r3
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e9ae:	0a9b      	lsrs	r3, r3, #10
 800e9b0:	b2db      	uxtb	r3, r3
 800e9b2:	f003 0303 	and.w	r3, r3, #3
 800e9b6:	b2da      	uxtb	r2, r3
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e9c2:	0a1b      	lsrs	r3, r3, #8
 800e9c4:	b2db      	uxtb	r3, r3
 800e9c6:	f003 0303 	and.w	r3, r3, #3
 800e9ca:	b2da      	uxtb	r2, r3
 800e9cc:	683b      	ldr	r3, [r7, #0]
 800e9ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e9d6:	085b      	lsrs	r3, r3, #1
 800e9d8:	b2db      	uxtb	r3, r3
 800e9da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e9de:	b2da      	uxtb	r2, r3
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800e9e6:	683b      	ldr	r3, [r7, #0]
 800e9e8:	2201      	movs	r2, #1
 800e9ea:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800e9ee:	2300      	movs	r3, #0
}
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	370c      	adds	r7, #12
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fa:	4770      	bx	lr
 800e9fc:	1fe00fff 	.word	0x1fe00fff

0800ea00 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b094      	sub	sp, #80	; 0x50
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
 800ea08:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ea16:	b2db      	uxtb	r3, r3
 800ea18:	2b03      	cmp	r3, #3
 800ea1a:	d101      	bne.n	800ea20 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800ea1c:	2301      	movs	r3, #1
 800ea1e:	e0a7      	b.n	800eb70 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800ea20:	f107 0308 	add.w	r3, r7, #8
 800ea24:	4619      	mov	r1, r3
 800ea26:	6878      	ldr	r0, [r7, #4]
 800ea28:	f000 fb62 	bl	800f0f0 <SD_SendSDStatus>
 800ea2c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800ea2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d011      	beq.n	800ea58 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	4a4f      	ldr	r2, [pc, #316]	; (800eb78 <HAL_SD_GetCardStatus+0x178>)
 800ea3a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea42:	431a      	orrs	r2, r3
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2201      	movs	r2, #1
 800ea4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800ea50:	2301      	movs	r3, #1
 800ea52:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ea56:	e070      	b.n	800eb3a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800ea58:	68bb      	ldr	r3, [r7, #8]
 800ea5a:	099b      	lsrs	r3, r3, #6
 800ea5c:	b2db      	uxtb	r3, r3
 800ea5e:	f003 0303 	and.w	r3, r3, #3
 800ea62:	b2da      	uxtb	r2, r3
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800ea68:	68bb      	ldr	r3, [r7, #8]
 800ea6a:	095b      	lsrs	r3, r3, #5
 800ea6c:	b2db      	uxtb	r3, r3
 800ea6e:	f003 0301 	and.w	r3, r3, #1
 800ea72:	b2da      	uxtb	r2, r3
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800ea78:	68bb      	ldr	r3, [r7, #8]
 800ea7a:	0a1b      	lsrs	r3, r3, #8
 800ea7c:	b29b      	uxth	r3, r3
 800ea7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ea82:	b29a      	uxth	r2, r3
 800ea84:	68bb      	ldr	r3, [r7, #8]
 800ea86:	0e1b      	lsrs	r3, r3, #24
 800ea88:	b29b      	uxth	r3, r3
 800ea8a:	4313      	orrs	r3, r2
 800ea8c:	b29a      	uxth	r2, r3
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	061a      	lsls	r2, r3, #24
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	021b      	lsls	r3, r3, #8
 800ea9a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ea9e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	0a1b      	lsrs	r3, r3, #8
 800eaa4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800eaa8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	0e1b      	lsrs	r3, r3, #24
 800eaae:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800eab0:	683b      	ldr	r3, [r7, #0]
 800eab2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800eab4:	693b      	ldr	r3, [r7, #16]
 800eab6:	b2da      	uxtb	r2, r3
 800eab8:	683b      	ldr	r3, [r7, #0]
 800eaba:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800eabc:	693b      	ldr	r3, [r7, #16]
 800eabe:	0a1b      	lsrs	r3, r3, #8
 800eac0:	b2da      	uxtb	r2, r3
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800eac6:	693b      	ldr	r3, [r7, #16]
 800eac8:	0d1b      	lsrs	r3, r3, #20
 800eaca:	b2db      	uxtb	r3, r3
 800eacc:	f003 030f 	and.w	r3, r3, #15
 800ead0:	b2da      	uxtb	r2, r3
 800ead2:	683b      	ldr	r3, [r7, #0]
 800ead4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800ead6:	693b      	ldr	r3, [r7, #16]
 800ead8:	0c1b      	lsrs	r3, r3, #16
 800eada:	b29b      	uxth	r3, r3
 800eadc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800eae0:	b29a      	uxth	r2, r3
 800eae2:	697b      	ldr	r3, [r7, #20]
 800eae4:	b29b      	uxth	r3, r3
 800eae6:	b2db      	uxtb	r3, r3
 800eae8:	b29b      	uxth	r3, r3
 800eaea:	4313      	orrs	r3, r2
 800eaec:	b29a      	uxth	r2, r3
 800eaee:	683b      	ldr	r3, [r7, #0]
 800eaf0:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800eaf2:	697b      	ldr	r3, [r7, #20]
 800eaf4:	0a9b      	lsrs	r3, r3, #10
 800eaf6:	b2db      	uxtb	r3, r3
 800eaf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eafc:	b2da      	uxtb	r2, r3
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800eb02:	697b      	ldr	r3, [r7, #20]
 800eb04:	0a1b      	lsrs	r3, r3, #8
 800eb06:	b2db      	uxtb	r3, r3
 800eb08:	f003 0303 	and.w	r3, r3, #3
 800eb0c:	b2da      	uxtb	r2, r3
 800eb0e:	683b      	ldr	r3, [r7, #0]
 800eb10:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800eb12:	697b      	ldr	r3, [r7, #20]
 800eb14:	091b      	lsrs	r3, r3, #4
 800eb16:	b2db      	uxtb	r3, r3
 800eb18:	f003 030f 	and.w	r3, r3, #15
 800eb1c:	b2da      	uxtb	r2, r3
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800eb22:	697b      	ldr	r3, [r7, #20]
 800eb24:	b2db      	uxtb	r3, r3
 800eb26:	f003 030f 	and.w	r3, r3, #15
 800eb2a:	b2da      	uxtb	r2, r3
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800eb30:	69bb      	ldr	r3, [r7, #24]
 800eb32:	0e1b      	lsrs	r3, r3, #24
 800eb34:	b2da      	uxtb	r2, r3
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800eb42:	4618      	mov	r0, r3
 800eb44:	f004 f9e2 	bl	8012f0c <SDMMC_CmdBlockLength>
 800eb48:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800eb4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d00d      	beq.n	800eb6c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	4a08      	ldr	r2, [pc, #32]	; (800eb78 <HAL_SD_GetCardStatus+0x178>)
 800eb56:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eb5c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	2201      	movs	r2, #1
 800eb62:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800eb66:	2301      	movs	r3, #1
 800eb68:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800eb6c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800eb70:	4618      	mov	r0, r3
 800eb72:	3750      	adds	r7, #80	; 0x50
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}
 800eb78:	1fe00fff 	.word	0x1fe00fff

0800eb7c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800eb7c:	b480      	push	{r7}
 800eb7e:	b083      	sub	sp, #12
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
 800eb84:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800eb9a:	683b      	ldr	r3, [r7, #0]
 800eb9c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eba2:	683b      	ldr	r3, [r7, #0]
 800eba4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ebaa:	683b      	ldr	r3, [r7, #0]
 800ebac:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ebb2:	683b      	ldr	r3, [r7, #0]
 800ebb4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800ebc6:	2300      	movs	r3, #0
}
 800ebc8:	4618      	mov	r0, r3
 800ebca:	370c      	adds	r7, #12
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd2:	4770      	bx	lr

0800ebd4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800ebd4:	b590      	push	{r4, r7, lr}
 800ebd6:	b08d      	sub	sp, #52	; 0x34
 800ebd8:	af02      	add	r7, sp, #8
 800ebda:	6078      	str	r0, [r7, #4]
 800ebdc:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800ebde:	2300      	movs	r3, #0
 800ebe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	2203      	movs	r2, #3
 800ebe8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebf0:	2b03      	cmp	r3, #3
 800ebf2:	d02e      	beq.n	800ec52 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800ebf4:	683b      	ldr	r3, [r7, #0]
 800ebf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ebfa:	d106      	bne.n	800ec0a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec00:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	635a      	str	r2, [r3, #52]	; 0x34
 800ec08:	e029      	b.n	800ec5e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ec10:	d10a      	bne.n	800ec28 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ec12:	6878      	ldr	r0, [r7, #4]
 800ec14:	f000 fb64 	bl	800f2e0 <SD_WideBus_Enable>
 800ec18:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ec1e:	6a3b      	ldr	r3, [r7, #32]
 800ec20:	431a      	orrs	r2, r3
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	635a      	str	r2, [r3, #52]	; 0x34
 800ec26:	e01a      	b.n	800ec5e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d10a      	bne.n	800ec44 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ec2e:	6878      	ldr	r0, [r7, #4]
 800ec30:	f000 fba1 	bl	800f376 <SD_WideBus_Disable>
 800ec34:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ec3a:	6a3b      	ldr	r3, [r7, #32]
 800ec3c:	431a      	orrs	r2, r3
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	635a      	str	r2, [r3, #52]	; 0x34
 800ec42:	e00c      	b.n	800ec5e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec48:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	635a      	str	r2, [r3, #52]	; 0x34
 800ec50:	e005      	b.n	800ec5e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec56:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d007      	beq.n	800ec76 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	4a5f      	ldr	r2, [pc, #380]	; (800ede8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800ec6c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800ec6e:	2301      	movs	r3, #1
 800ec70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ec74:	e096      	b.n	800eda4 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800ec76:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800ec7a:	f04f 0100 	mov.w	r1, #0
 800ec7e:	f7fd fea3 	bl	800c9c8 <HAL_RCCEx_GetPeriphCLKFreq>
 800ec82:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800ec84:	69fb      	ldr	r3, [r7, #28]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	f000 8083 	beq.w	800ed92 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	685b      	ldr	r3, [r3, #4]
 800ec90:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	689b      	ldr	r3, [r3, #8]
 800ec96:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800ec98:	683b      	ldr	r3, [r7, #0]
 800ec9a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	691b      	ldr	r3, [r3, #16]
 800eca0:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	695a      	ldr	r2, [r3, #20]
 800eca6:	69fb      	ldr	r3, [r7, #28]
 800eca8:	4950      	ldr	r1, [pc, #320]	; (800edec <HAL_SD_ConfigWideBusOperation+0x218>)
 800ecaa:	fba1 1303 	umull	r1, r3, r1, r3
 800ecae:	0e1b      	lsrs	r3, r3, #24
 800ecb0:	429a      	cmp	r2, r3
 800ecb2:	d303      	bcc.n	800ecbc <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	695b      	ldr	r3, [r3, #20]
 800ecb8:	61bb      	str	r3, [r7, #24]
 800ecba:	e05a      	b.n	800ed72 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ecc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ecc4:	d103      	bne.n	800ecce <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	695b      	ldr	r3, [r3, #20]
 800ecca:	61bb      	str	r3, [r7, #24]
 800eccc:	e051      	b.n	800ed72 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ecd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ecd6:	d126      	bne.n	800ed26 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	695b      	ldr	r3, [r3, #20]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d10e      	bne.n	800ecfe <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800ece0:	69fb      	ldr	r3, [r7, #28]
 800ece2:	4a43      	ldr	r2, [pc, #268]	; (800edf0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ece4:	4293      	cmp	r3, r2
 800ece6:	d906      	bls.n	800ecf6 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ece8:	69fb      	ldr	r3, [r7, #28]
 800ecea:	4a40      	ldr	r2, [pc, #256]	; (800edec <HAL_SD_ConfigWideBusOperation+0x218>)
 800ecec:	fba2 2303 	umull	r2, r3, r2, r3
 800ecf0:	0e5b      	lsrs	r3, r3, #25
 800ecf2:	61bb      	str	r3, [r7, #24]
 800ecf4:	e03d      	b.n	800ed72 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	695b      	ldr	r3, [r3, #20]
 800ecfa:	61bb      	str	r3, [r7, #24]
 800ecfc:	e039      	b.n	800ed72 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	695b      	ldr	r3, [r3, #20]
 800ed02:	005b      	lsls	r3, r3, #1
 800ed04:	69fa      	ldr	r2, [r7, #28]
 800ed06:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed0a:	4a39      	ldr	r2, [pc, #228]	; (800edf0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ed0c:	4293      	cmp	r3, r2
 800ed0e:	d906      	bls.n	800ed1e <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ed10:	69fb      	ldr	r3, [r7, #28]
 800ed12:	4a36      	ldr	r2, [pc, #216]	; (800edec <HAL_SD_ConfigWideBusOperation+0x218>)
 800ed14:	fba2 2303 	umull	r2, r3, r2, r3
 800ed18:	0e5b      	lsrs	r3, r3, #25
 800ed1a:	61bb      	str	r3, [r7, #24]
 800ed1c:	e029      	b.n	800ed72 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	695b      	ldr	r3, [r3, #20]
 800ed22:	61bb      	str	r3, [r7, #24]
 800ed24:	e025      	b.n	800ed72 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	695b      	ldr	r3, [r3, #20]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d10e      	bne.n	800ed4c <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800ed2e:	69fb      	ldr	r3, [r7, #28]
 800ed30:	4a30      	ldr	r2, [pc, #192]	; (800edf4 <HAL_SD_ConfigWideBusOperation+0x220>)
 800ed32:	4293      	cmp	r3, r2
 800ed34:	d906      	bls.n	800ed44 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ed36:	69fb      	ldr	r3, [r7, #28]
 800ed38:	4a2c      	ldr	r2, [pc, #176]	; (800edec <HAL_SD_ConfigWideBusOperation+0x218>)
 800ed3a:	fba2 2303 	umull	r2, r3, r2, r3
 800ed3e:	0e1b      	lsrs	r3, r3, #24
 800ed40:	61bb      	str	r3, [r7, #24]
 800ed42:	e016      	b.n	800ed72 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	695b      	ldr	r3, [r3, #20]
 800ed48:	61bb      	str	r3, [r7, #24]
 800ed4a:	e012      	b.n	800ed72 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	695b      	ldr	r3, [r3, #20]
 800ed50:	005b      	lsls	r3, r3, #1
 800ed52:	69fa      	ldr	r2, [r7, #28]
 800ed54:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed58:	4a26      	ldr	r2, [pc, #152]	; (800edf4 <HAL_SD_ConfigWideBusOperation+0x220>)
 800ed5a:	4293      	cmp	r3, r2
 800ed5c:	d906      	bls.n	800ed6c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ed5e:	69fb      	ldr	r3, [r7, #28]
 800ed60:	4a22      	ldr	r2, [pc, #136]	; (800edec <HAL_SD_ConfigWideBusOperation+0x218>)
 800ed62:	fba2 2303 	umull	r2, r3, r2, r3
 800ed66:	0e1b      	lsrs	r3, r3, #24
 800ed68:	61bb      	str	r3, [r7, #24]
 800ed6a:	e002      	b.n	800ed72 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	695b      	ldr	r3, [r3, #20]
 800ed70:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681c      	ldr	r4, [r3, #0]
 800ed76:	466a      	mov	r2, sp
 800ed78:	f107 0314 	add.w	r3, r7, #20
 800ed7c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ed80:	e882 0003 	stmia.w	r2, {r0, r1}
 800ed84:	f107 0308 	add.w	r3, r7, #8
 800ed88:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ed8a:	4620      	mov	r0, r4
 800ed8c:	f003 ffe0 	bl	8012d50 <SDMMC_Init>
 800ed90:	e008      	b.n	800eda4 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed96:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800ed9e:	2301      	movs	r3, #1
 800eda0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800edac:	4618      	mov	r0, r3
 800edae:	f004 f8ad 	bl	8012f0c <SDMMC_CmdBlockLength>
 800edb2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800edb4:	6a3b      	ldr	r3, [r7, #32]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d00c      	beq.n	800edd4 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	4a0a      	ldr	r2, [pc, #40]	; (800ede8 <HAL_SD_ConfigWideBusOperation+0x214>)
 800edc0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800edc6:	6a3b      	ldr	r3, [r7, #32]
 800edc8:	431a      	orrs	r2, r3
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800edce:	2301      	movs	r3, #1
 800edd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	2201      	movs	r2, #1
 800edd8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800eddc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ede0:	4618      	mov	r0, r3
 800ede2:	372c      	adds	r7, #44	; 0x2c
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd90      	pop	{r4, r7, pc}
 800ede8:	1fe00fff 	.word	0x1fe00fff
 800edec:	55e63b89 	.word	0x55e63b89
 800edf0:	02faf080 	.word	0x02faf080
 800edf4:	017d7840 	.word	0x017d7840

0800edf8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b086      	sub	sp, #24
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800ee00:	2300      	movs	r3, #0
 800ee02:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ee04:	f107 030c 	add.w	r3, r7, #12
 800ee08:	4619      	mov	r1, r3
 800ee0a:	6878      	ldr	r0, [r7, #4]
 800ee0c:	f000 fa40 	bl	800f290 <SD_SendStatus>
 800ee10:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ee12:	697b      	ldr	r3, [r7, #20]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d005      	beq.n	800ee24 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ee1c:	697b      	ldr	r3, [r7, #20]
 800ee1e:	431a      	orrs	r2, r3
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	0a5b      	lsrs	r3, r3, #9
 800ee28:	f003 030f 	and.w	r3, r3, #15
 800ee2c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ee2e:	693b      	ldr	r3, [r7, #16]
}
 800ee30:	4618      	mov	r0, r3
 800ee32:	3718      	adds	r7, #24
 800ee34:	46bd      	mov	sp, r7
 800ee36:	bd80      	pop	{r7, pc}

0800ee38 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b090      	sub	sp, #64	; 0x40
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800ee40:	2300      	movs	r3, #0
 800ee42:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800ee44:	f7f5 f8e6 	bl	8004014 <HAL_GetTick>
 800ee48:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	4618      	mov	r0, r3
 800ee50:	f003 ffd7 	bl	8012e02 <SDMMC_GetPowerState>
 800ee54:	4603      	mov	r3, r0
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d102      	bne.n	800ee60 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ee5a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800ee5e:	e0b5      	b.n	800efcc <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee64:	2b03      	cmp	r3, #3
 800ee66:	d02e      	beq.n	800eec6 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	f004 fa22 	bl	80132b6 <SDMMC_CmdSendCID>
 800ee72:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800ee74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d001      	beq.n	800ee7e <SD_InitCard+0x46>
    {
      return errorstate;
 800ee7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee7c:	e0a6      	b.n	800efcc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	2100      	movs	r1, #0
 800ee84:	4618      	mov	r0, r3
 800ee86:	f004 f802 	bl	8012e8e <SDMMC_GetResponse>
 800ee8a:	4602      	mov	r2, r0
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	2104      	movs	r1, #4
 800ee96:	4618      	mov	r0, r3
 800ee98:	f003 fff9 	bl	8012e8e <SDMMC_GetResponse>
 800ee9c:	4602      	mov	r2, r0
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	2108      	movs	r1, #8
 800eea8:	4618      	mov	r0, r3
 800eeaa:	f003 fff0 	bl	8012e8e <SDMMC_GetResponse>
 800eeae:	4602      	mov	r2, r0
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	210c      	movs	r1, #12
 800eeba:	4618      	mov	r0, r3
 800eebc:	f003 ffe7 	bl	8012e8e <SDMMC_GetResponse>
 800eec0:	4602      	mov	r2, r0
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eeca:	2b03      	cmp	r3, #3
 800eecc:	d01d      	beq.n	800ef0a <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800eece:	e019      	b.n	800ef04 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	f107 020a 	add.w	r2, r7, #10
 800eed8:	4611      	mov	r1, r2
 800eeda:	4618      	mov	r0, r3
 800eedc:	f004 fa2a 	bl	8013334 <SDMMC_CmdSetRelAdd>
 800eee0:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800eee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d001      	beq.n	800eeec <SD_InitCard+0xb4>
      {
        return errorstate;
 800eee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeea:	e06f      	b.n	800efcc <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800eeec:	f7f5 f892 	bl	8004014 <HAL_GetTick>
 800eef0:	4602      	mov	r2, r0
 800eef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eef4:	1ad3      	subs	r3, r2, r3
 800eef6:	f241 3287 	movw	r2, #4999	; 0x1387
 800eefa:	4293      	cmp	r3, r2
 800eefc:	d902      	bls.n	800ef04 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800eefe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ef02:	e063      	b.n	800efcc <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800ef04:	897b      	ldrh	r3, [r7, #10]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d0e2      	beq.n	800eed0 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef0e:	2b03      	cmp	r3, #3
 800ef10:	d036      	beq.n	800ef80 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ef12:	897b      	ldrh	r3, [r7, #10]
 800ef14:	461a      	mov	r2, r3
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	681a      	ldr	r2, [r3, #0]
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef22:	041b      	lsls	r3, r3, #16
 800ef24:	4619      	mov	r1, r3
 800ef26:	4610      	mov	r0, r2
 800ef28:	f004 f9e4 	bl	80132f4 <SDMMC_CmdSendCSD>
 800ef2c:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800ef2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d001      	beq.n	800ef38 <SD_InitCard+0x100>
    {
      return errorstate;
 800ef34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef36:	e049      	b.n	800efcc <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	2100      	movs	r1, #0
 800ef3e:	4618      	mov	r0, r3
 800ef40:	f003 ffa5 	bl	8012e8e <SDMMC_GetResponse>
 800ef44:	4602      	mov	r2, r0
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	2104      	movs	r1, #4
 800ef50:	4618      	mov	r0, r3
 800ef52:	f003 ff9c 	bl	8012e8e <SDMMC_GetResponse>
 800ef56:	4602      	mov	r2, r0
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	2108      	movs	r1, #8
 800ef62:	4618      	mov	r0, r3
 800ef64:	f003 ff93 	bl	8012e8e <SDMMC_GetResponse>
 800ef68:	4602      	mov	r2, r0
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	210c      	movs	r1, #12
 800ef74:	4618      	mov	r0, r3
 800ef76:	f003 ff8a 	bl	8012e8e <SDMMC_GetResponse>
 800ef7a:	4602      	mov	r2, r0
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	2104      	movs	r1, #4
 800ef86:	4618      	mov	r0, r3
 800ef88:	f003 ff81 	bl	8012e8e <SDMMC_GetResponse>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	0d1a      	lsrs	r2, r3, #20
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ef94:	f107 030c 	add.w	r3, r7, #12
 800ef98:	4619      	mov	r1, r3
 800ef9a:	6878      	ldr	r0, [r7, #4]
 800ef9c:	f7ff fb8c 	bl	800e6b8 <HAL_SD_GetCardCSD>
 800efa0:	4603      	mov	r3, r0
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d002      	beq.n	800efac <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800efa6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800efaa:	e00f      	b.n	800efcc <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	681a      	ldr	r2, [r3, #0]
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800efb4:	041b      	lsls	r3, r3, #16
 800efb6:	4619      	mov	r1, r3
 800efb8:	4610      	mov	r0, r2
 800efba:	f004 f893 	bl	80130e4 <SDMMC_CmdSelDesel>
 800efbe:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800efc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d001      	beq.n	800efca <SD_InitCard+0x192>
  {
    return errorstate;
 800efc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efc8:	e000      	b.n	800efcc <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800efca:	2300      	movs	r3, #0
}
 800efcc:	4618      	mov	r0, r3
 800efce:	3740      	adds	r7, #64	; 0x40
 800efd0:	46bd      	mov	sp, r7
 800efd2:	bd80      	pop	{r7, pc}

0800efd4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b086      	sub	sp, #24
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800efdc:	2300      	movs	r3, #0
 800efde:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800efe0:	2300      	movs	r3, #0
 800efe2:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800efe4:	2300      	movs	r3, #0
 800efe6:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	4618      	mov	r0, r3
 800efee:	f004 f89c 	bl	801312a <SDMMC_CmdGoIdleState>
 800eff2:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d001      	beq.n	800effe <SD_PowerON+0x2a>
  {
    return errorstate;
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	e072      	b.n	800f0e4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	4618      	mov	r0, r3
 800f004:	f004 f8af 	bl	8013166 <SDMMC_CmdOperCond>
 800f008:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f010:	d10d      	bne.n	800f02e <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	2200      	movs	r2, #0
 800f016:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	4618      	mov	r0, r3
 800f01e:	f004 f884 	bl	801312a <SDMMC_CmdGoIdleState>
 800f022:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	2b00      	cmp	r3, #0
 800f028:	d004      	beq.n	800f034 <SD_PowerON+0x60>
    {
      return errorstate;
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	e05a      	b.n	800f0e4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	2201      	movs	r2, #1
 800f032:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f038:	2b01      	cmp	r3, #1
 800f03a:	d137      	bne.n	800f0ac <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	2100      	movs	r1, #0
 800f042:	4618      	mov	r0, r3
 800f044:	f004 f8af 	bl	80131a6 <SDMMC_CmdAppCommand>
 800f048:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d02d      	beq.n	800f0ac <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f050:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f054:	e046      	b.n	800f0e4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	2100      	movs	r1, #0
 800f05c:	4618      	mov	r0, r3
 800f05e:	f004 f8a2 	bl	80131a6 <SDMMC_CmdAppCommand>
 800f062:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d001      	beq.n	800f06e <SD_PowerON+0x9a>
    {
      return errorstate;
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	e03a      	b.n	800f0e4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	491e      	ldr	r1, [pc, #120]	; (800f0ec <SD_PowerON+0x118>)
 800f074:	4618      	mov	r0, r3
 800f076:	f004 f8b9 	bl	80131ec <SDMMC_CmdAppOperCommand>
 800f07a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d002      	beq.n	800f088 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800f082:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f086:	e02d      	b.n	800f0e4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	2100      	movs	r1, #0
 800f08e:	4618      	mov	r0, r3
 800f090:	f003 fefd 	bl	8012e8e <SDMMC_GetResponse>
 800f094:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800f096:	697b      	ldr	r3, [r7, #20]
 800f098:	0fdb      	lsrs	r3, r3, #31
 800f09a:	2b01      	cmp	r3, #1
 800f09c:	d101      	bne.n	800f0a2 <SD_PowerON+0xce>
 800f09e:	2301      	movs	r3, #1
 800f0a0:	e000      	b.n	800f0a4 <SD_PowerON+0xd0>
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	613b      	str	r3, [r7, #16]

    count++;
 800f0a6:	68bb      	ldr	r3, [r7, #8]
 800f0a8:	3301      	adds	r3, #1
 800f0aa:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800f0ac:	68bb      	ldr	r3, [r7, #8]
 800f0ae:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f0b2:	4293      	cmp	r3, r2
 800f0b4:	d802      	bhi.n	800f0bc <SD_PowerON+0xe8>
 800f0b6:	693b      	ldr	r3, [r7, #16]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d0cc      	beq.n	800f056 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f0c2:	4293      	cmp	r3, r2
 800f0c4:	d902      	bls.n	800f0cc <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800f0c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800f0ca:	e00b      	b.n	800f0e4 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800f0d2:	697b      	ldr	r3, [r7, #20]
 800f0d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d002      	beq.n	800f0e2 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	2201      	movs	r2, #1
 800f0e0:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800f0e2:	2300      	movs	r3, #0
}
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	3718      	adds	r7, #24
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	bd80      	pop	{r7, pc}
 800f0ec:	c1100000 	.word	0xc1100000

0800f0f0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b08c      	sub	sp, #48	; 0x30
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]
 800f0f8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f0fa:	f7f4 ff8b 	bl	8004014 <HAL_GetTick>
 800f0fe:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	2100      	movs	r1, #0
 800f10a:	4618      	mov	r0, r3
 800f10c:	f003 febf 	bl	8012e8e <SDMMC_GetResponse>
 800f110:	4603      	mov	r3, r0
 800f112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f116:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f11a:	d102      	bne.n	800f122 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f11c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f120:	e0b0      	b.n	800f284 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	2140      	movs	r1, #64	; 0x40
 800f128:	4618      	mov	r0, r3
 800f12a:	f003 feef 	bl	8012f0c <SDMMC_CmdBlockLength>
 800f12e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f130:	6a3b      	ldr	r3, [r7, #32]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d005      	beq.n	800f142 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800f13e:	6a3b      	ldr	r3, [r7, #32]
 800f140:	e0a0      	b.n	800f284 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	681a      	ldr	r2, [r3, #0]
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f14a:	041b      	lsls	r3, r3, #16
 800f14c:	4619      	mov	r1, r3
 800f14e:	4610      	mov	r0, r2
 800f150:	f004 f829 	bl	80131a6 <SDMMC_CmdAppCommand>
 800f154:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f156:	6a3b      	ldr	r3, [r7, #32]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d005      	beq.n	800f168 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800f164:	6a3b      	ldr	r3, [r7, #32]
 800f166:	e08d      	b.n	800f284 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f168:	f04f 33ff 	mov.w	r3, #4294967295
 800f16c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800f16e:	2340      	movs	r3, #64	; 0x40
 800f170:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800f172:	2360      	movs	r3, #96	; 0x60
 800f174:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f176:	2302      	movs	r3, #2
 800f178:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f17a:	2300      	movs	r3, #0
 800f17c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800f17e:	2301      	movs	r3, #1
 800f180:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	f107 0208 	add.w	r2, r7, #8
 800f18a:	4611      	mov	r1, r2
 800f18c:	4618      	mov	r0, r3
 800f18e:	f003 fe91 	bl	8012eb4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	4618      	mov	r0, r3
 800f198:	f004 f911 	bl	80133be <SDMMC_CmdStatusRegister>
 800f19c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f19e:	6a3b      	ldr	r3, [r7, #32]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d02b      	beq.n	800f1fc <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800f1ac:	6a3b      	ldr	r3, [r7, #32]
 800f1ae:	e069      	b.n	800f284 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d013      	beq.n	800f1e6 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800f1be:	2300      	movs	r3, #0
 800f1c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f1c2:	e00d      	b.n	800f1e0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	f003 fdeb 	bl	8012da4 <SDMMC_ReadFIFO>
 800f1ce:	4602      	mov	r2, r0
 800f1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1d2:	601a      	str	r2, [r3, #0]
        pData++;
 800f1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1d6:	3304      	adds	r3, #4
 800f1d8:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800f1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1dc:	3301      	adds	r3, #1
 800f1de:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1e2:	2b07      	cmp	r3, #7
 800f1e4:	d9ee      	bls.n	800f1c4 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f1e6:	f7f4 ff15 	bl	8004014 <HAL_GetTick>
 800f1ea:	4602      	mov	r2, r0
 800f1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ee:	1ad3      	subs	r3, r2, r3
 800f1f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1f4:	d102      	bne.n	800f1fc <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f1f6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f1fa:	e043      	b.n	800f284 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f202:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800f206:	2b00      	cmp	r3, #0
 800f208:	d0d2      	beq.n	800f1b0 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f210:	f003 0308 	and.w	r3, r3, #8
 800f214:	2b00      	cmp	r3, #0
 800f216:	d001      	beq.n	800f21c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f218:	2308      	movs	r3, #8
 800f21a:	e033      	b.n	800f284 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f222:	f003 0302 	and.w	r3, r3, #2
 800f226:	2b00      	cmp	r3, #0
 800f228:	d001      	beq.n	800f22e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f22a:	2302      	movs	r3, #2
 800f22c:	e02a      	b.n	800f284 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f234:	f003 0320 	and.w	r3, r3, #32
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d017      	beq.n	800f26c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800f23c:	2320      	movs	r3, #32
 800f23e:	e021      	b.n	800f284 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	4618      	mov	r0, r3
 800f246:	f003 fdad 	bl	8012da4 <SDMMC_ReadFIFO>
 800f24a:	4602      	mov	r2, r0
 800f24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f24e:	601a      	str	r2, [r3, #0]
    pData++;
 800f250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f252:	3304      	adds	r3, #4
 800f254:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f256:	f7f4 fedd 	bl	8004014 <HAL_GetTick>
 800f25a:	4602      	mov	r2, r0
 800f25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f25e:	1ad3      	subs	r3, r2, r3
 800f260:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f264:	d102      	bne.n	800f26c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f266:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f26a:	e00b      	b.n	800f284 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f272:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f276:	2b00      	cmp	r3, #0
 800f278:	d1e2      	bne.n	800f240 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	4a03      	ldr	r2, [pc, #12]	; (800f28c <SD_SendSDStatus+0x19c>)
 800f280:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800f282:	2300      	movs	r3, #0
}
 800f284:	4618      	mov	r0, r3
 800f286:	3730      	adds	r7, #48	; 0x30
 800f288:	46bd      	mov	sp, r7
 800f28a:	bd80      	pop	{r7, pc}
 800f28c:	18000f3a 	.word	0x18000f3a

0800f290 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b084      	sub	sp, #16
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
 800f298:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800f29a:	683b      	ldr	r3, [r7, #0]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d102      	bne.n	800f2a6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800f2a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f2a4:	e018      	b.n	800f2d8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	681a      	ldr	r2, [r3, #0]
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2ae:	041b      	lsls	r3, r3, #16
 800f2b0:	4619      	mov	r1, r3
 800f2b2:	4610      	mov	r0, r2
 800f2b4:	f004 f860 	bl	8013378 <SDMMC_CmdSendStatus>
 800f2b8:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d001      	beq.n	800f2c4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	e009      	b.n	800f2d8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	2100      	movs	r1, #0
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	f003 fddf 	bl	8012e8e <SDMMC_GetResponse>
 800f2d0:	4602      	mov	r2, r0
 800f2d2:	683b      	ldr	r3, [r7, #0]
 800f2d4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800f2d6:	2300      	movs	r3, #0
}
 800f2d8:	4618      	mov	r0, r3
 800f2da:	3710      	adds	r7, #16
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	bd80      	pop	{r7, pc}

0800f2e0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b086      	sub	sp, #24
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	60fb      	str	r3, [r7, #12]
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	2100      	movs	r1, #0
 800f2f6:	4618      	mov	r0, r3
 800f2f8:	f003 fdc9 	bl	8012e8e <SDMMC_GetResponse>
 800f2fc:	4603      	mov	r3, r0
 800f2fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f302:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f306:	d102      	bne.n	800f30e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f308:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f30c:	e02f      	b.n	800f36e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f30e:	f107 030c 	add.w	r3, r7, #12
 800f312:	4619      	mov	r1, r3
 800f314:	6878      	ldr	r0, [r7, #4]
 800f316:	f000 f879 	bl	800f40c <SD_FindSCR>
 800f31a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f31c:	697b      	ldr	r3, [r7, #20]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d001      	beq.n	800f326 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800f322:	697b      	ldr	r3, [r7, #20]
 800f324:	e023      	b.n	800f36e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f326:	693b      	ldr	r3, [r7, #16]
 800f328:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d01c      	beq.n	800f36a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	681a      	ldr	r2, [r3, #0]
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f338:	041b      	lsls	r3, r3, #16
 800f33a:	4619      	mov	r1, r3
 800f33c:	4610      	mov	r0, r2
 800f33e:	f003 ff32 	bl	80131a6 <SDMMC_CmdAppCommand>
 800f342:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f344:	697b      	ldr	r3, [r7, #20]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d001      	beq.n	800f34e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800f34a:	697b      	ldr	r3, [r7, #20]
 800f34c:	e00f      	b.n	800f36e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	2102      	movs	r1, #2
 800f354:	4618      	mov	r0, r3
 800f356:	f003 ff69 	bl	801322c <SDMMC_CmdBusWidth>
 800f35a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f35c:	697b      	ldr	r3, [r7, #20]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d001      	beq.n	800f366 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800f362:	697b      	ldr	r3, [r7, #20]
 800f364:	e003      	b.n	800f36e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f366:	2300      	movs	r3, #0
 800f368:	e001      	b.n	800f36e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f36a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f36e:	4618      	mov	r0, r3
 800f370:	3718      	adds	r7, #24
 800f372:	46bd      	mov	sp, r7
 800f374:	bd80      	pop	{r7, pc}

0800f376 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800f376:	b580      	push	{r7, lr}
 800f378:	b086      	sub	sp, #24
 800f37a:	af00      	add	r7, sp, #0
 800f37c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800f37e:	2300      	movs	r3, #0
 800f380:	60fb      	str	r3, [r7, #12]
 800f382:	2300      	movs	r3, #0
 800f384:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	2100      	movs	r1, #0
 800f38c:	4618      	mov	r0, r3
 800f38e:	f003 fd7e 	bl	8012e8e <SDMMC_GetResponse>
 800f392:	4603      	mov	r3, r0
 800f394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f398:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800f39c:	d102      	bne.n	800f3a4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800f39e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f3a2:	e02f      	b.n	800f404 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800f3a4:	f107 030c 	add.w	r3, r7, #12
 800f3a8:	4619      	mov	r1, r3
 800f3aa:	6878      	ldr	r0, [r7, #4]
 800f3ac:	f000 f82e 	bl	800f40c <SD_FindSCR>
 800f3b0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800f3b2:	697b      	ldr	r3, [r7, #20]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d001      	beq.n	800f3bc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800f3b8:	697b      	ldr	r3, [r7, #20]
 800f3ba:	e023      	b.n	800f404 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800f3bc:	693b      	ldr	r3, [r7, #16]
 800f3be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d01c      	beq.n	800f400 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	681a      	ldr	r2, [r3, #0]
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3ce:	041b      	lsls	r3, r3, #16
 800f3d0:	4619      	mov	r1, r3
 800f3d2:	4610      	mov	r0, r2
 800f3d4:	f003 fee7 	bl	80131a6 <SDMMC_CmdAppCommand>
 800f3d8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f3da:	697b      	ldr	r3, [r7, #20]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d001      	beq.n	800f3e4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800f3e0:	697b      	ldr	r3, [r7, #20]
 800f3e2:	e00f      	b.n	800f404 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	2100      	movs	r1, #0
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	f003 ff1e 	bl	801322c <SDMMC_CmdBusWidth>
 800f3f0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800f3f2:	697b      	ldr	r3, [r7, #20]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d001      	beq.n	800f3fc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800f3f8:	697b      	ldr	r3, [r7, #20]
 800f3fa:	e003      	b.n	800f404 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	e001      	b.n	800f404 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800f400:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800f404:	4618      	mov	r0, r3
 800f406:	3718      	adds	r7, #24
 800f408:	46bd      	mov	sp, r7
 800f40a:	bd80      	pop	{r7, pc}

0800f40c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b08e      	sub	sp, #56	; 0x38
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
 800f414:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800f416:	f7f4 fdfd 	bl	8004014 <HAL_GetTick>
 800f41a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800f41c:	2300      	movs	r3, #0
 800f41e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800f420:	2300      	movs	r3, #0
 800f422:	60bb      	str	r3, [r7, #8]
 800f424:	2300      	movs	r3, #0
 800f426:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800f428:	683b      	ldr	r3, [r7, #0]
 800f42a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	2108      	movs	r1, #8
 800f432:	4618      	mov	r0, r3
 800f434:	f003 fd6a 	bl	8012f0c <SDMMC_CmdBlockLength>
 800f438:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d001      	beq.n	800f444 <SD_FindSCR+0x38>
  {
    return errorstate;
 800f440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f442:	e0ad      	b.n	800f5a0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	681a      	ldr	r2, [r3, #0]
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f44c:	041b      	lsls	r3, r3, #16
 800f44e:	4619      	mov	r1, r3
 800f450:	4610      	mov	r0, r2
 800f452:	f003 fea8 	bl	80131a6 <SDMMC_CmdAppCommand>
 800f456:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d001      	beq.n	800f462 <SD_FindSCR+0x56>
  {
    return errorstate;
 800f45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f460:	e09e      	b.n	800f5a0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800f462:	f04f 33ff 	mov.w	r3, #4294967295
 800f466:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800f468:	2308      	movs	r3, #8
 800f46a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800f46c:	2330      	movs	r3, #48	; 0x30
 800f46e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800f470:	2302      	movs	r3, #2
 800f472:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800f474:	2300      	movs	r3, #0
 800f476:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800f478:	2301      	movs	r3, #1
 800f47a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	f107 0210 	add.w	r2, r7, #16
 800f484:	4611      	mov	r1, r2
 800f486:	4618      	mov	r0, r3
 800f488:	f003 fd14 	bl	8012eb4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	4618      	mov	r0, r3
 800f492:	f003 feee 	bl	8013272 <SDMMC_CmdSendSCR>
 800f496:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800f498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d027      	beq.n	800f4ee <SD_FindSCR+0xe2>
  {
    return errorstate;
 800f49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4a0:	e07e      	b.n	800f5a0 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d113      	bne.n	800f4d8 <SD_FindSCR+0xcc>
 800f4b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d110      	bne.n	800f4d8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	f003 fc72 	bl	8012da4 <SDMMC_ReadFIFO>
 800f4c0:	4603      	mov	r3, r0
 800f4c2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	f003 fc6b 	bl	8012da4 <SDMMC_ReadFIFO>
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	60fb      	str	r3, [r7, #12]
      index++;
 800f4d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4d4:	3301      	adds	r3, #1
 800f4d6:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800f4d8:	f7f4 fd9c 	bl	8004014 <HAL_GetTick>
 800f4dc:	4602      	mov	r2, r0
 800f4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4e0:	1ad3      	subs	r3, r2, r3
 800f4e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4e6:	d102      	bne.n	800f4ee <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800f4e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f4ec:	e058      	b.n	800f5a0 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f4f4:	f240 532a 	movw	r3, #1322	; 0x52a
 800f4f8:	4013      	ands	r3, r2
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d0d1      	beq.n	800f4a2 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f504:	f003 0308 	and.w	r3, r3, #8
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d005      	beq.n	800f518 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	2208      	movs	r2, #8
 800f512:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800f514:	2308      	movs	r3, #8
 800f516:	e043      	b.n	800f5a0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	681b      	ldr	r3, [r3, #0]
 800f51c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f51e:	f003 0302 	and.w	r3, r3, #2
 800f522:	2b00      	cmp	r3, #0
 800f524:	d005      	beq.n	800f532 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	2202      	movs	r2, #2
 800f52c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800f52e:	2302      	movs	r3, #2
 800f530:	e036      	b.n	800f5a0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f538:	f003 0320 	and.w	r3, r3, #32
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d005      	beq.n	800f54c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	2220      	movs	r2, #32
 800f546:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800f548:	2320      	movs	r3, #32
 800f54a:	e029      	b.n	800f5a0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	4a15      	ldr	r2, [pc, #84]	; (800f5a8 <SD_FindSCR+0x19c>)
 800f552:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	061a      	lsls	r2, r3, #24
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	021b      	lsls	r3, r3, #8
 800f55c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f560:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	0a1b      	lsrs	r3, r3, #8
 800f566:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f56a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	0e1b      	lsrs	r3, r3, #24
 800f570:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800f572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f574:	601a      	str	r2, [r3, #0]
    scr++;
 800f576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f578:	3304      	adds	r3, #4
 800f57a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f57c:	68bb      	ldr	r3, [r7, #8]
 800f57e:	061a      	lsls	r2, r3, #24
 800f580:	68bb      	ldr	r3, [r7, #8]
 800f582:	021b      	lsls	r3, r3, #8
 800f584:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f588:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f58a:	68bb      	ldr	r3, [r7, #8]
 800f58c:	0a1b      	lsrs	r3, r3, #8
 800f58e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f592:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f594:	68bb      	ldr	r3, [r7, #8]
 800f596:	0e1b      	lsrs	r3, r3, #24
 800f598:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800f59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f59c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800f59e:	2300      	movs	r3, #0
}
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	3738      	adds	r7, #56	; 0x38
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	bd80      	pop	{r7, pc}
 800f5a8:	18000f3a 	.word	0x18000f3a

0800f5ac <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800f5ac:	b580      	push	{r7, lr}
 800f5ae:	b086      	sub	sp, #24
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5b8:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5be:	2b1f      	cmp	r3, #31
 800f5c0:	d936      	bls.n	800f630 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	617b      	str	r3, [r7, #20]
 800f5c6:	e027      	b.n	800f618 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	f003 fbe9 	bl	8012da4 <SDMMC_ReadFIFO>
 800f5d2:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	b2da      	uxtb	r2, r3
 800f5d8:	693b      	ldr	r3, [r7, #16]
 800f5da:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f5dc:	693b      	ldr	r3, [r7, #16]
 800f5de:	3301      	adds	r3, #1
 800f5e0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	0a1b      	lsrs	r3, r3, #8
 800f5e6:	b2da      	uxtb	r2, r3
 800f5e8:	693b      	ldr	r3, [r7, #16]
 800f5ea:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f5ec:	693b      	ldr	r3, [r7, #16]
 800f5ee:	3301      	adds	r3, #1
 800f5f0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	0c1b      	lsrs	r3, r3, #16
 800f5f6:	b2da      	uxtb	r2, r3
 800f5f8:	693b      	ldr	r3, [r7, #16]
 800f5fa:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f5fc:	693b      	ldr	r3, [r7, #16]
 800f5fe:	3301      	adds	r3, #1
 800f600:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	0e1b      	lsrs	r3, r3, #24
 800f606:	b2da      	uxtb	r2, r3
 800f608:	693b      	ldr	r3, [r7, #16]
 800f60a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f60c:	693b      	ldr	r3, [r7, #16]
 800f60e:	3301      	adds	r3, #1
 800f610:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800f612:	697b      	ldr	r3, [r7, #20]
 800f614:	3301      	adds	r3, #1
 800f616:	617b      	str	r3, [r7, #20]
 800f618:	697b      	ldr	r3, [r7, #20]
 800f61a:	2b07      	cmp	r3, #7
 800f61c:	d9d4      	bls.n	800f5c8 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	693a      	ldr	r2, [r7, #16]
 800f622:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f628:	f1a3 0220 	sub.w	r2, r3, #32
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800f630:	bf00      	nop
 800f632:	3718      	adds	r7, #24
 800f634:	46bd      	mov	sp, r7
 800f636:	bd80      	pop	{r7, pc}

0800f638 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800f638:	b580      	push	{r7, lr}
 800f63a:	b086      	sub	sp, #24
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	69db      	ldr	r3, [r3, #28]
 800f644:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	6a1b      	ldr	r3, [r3, #32]
 800f64a:	2b1f      	cmp	r3, #31
 800f64c:	d93a      	bls.n	800f6c4 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800f64e:	2300      	movs	r3, #0
 800f650:	617b      	str	r3, [r7, #20]
 800f652:	e02b      	b.n	800f6ac <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800f654:	693b      	ldr	r3, [r7, #16]
 800f656:	781b      	ldrb	r3, [r3, #0]
 800f658:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f65a:	693b      	ldr	r3, [r7, #16]
 800f65c:	3301      	adds	r3, #1
 800f65e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800f660:	693b      	ldr	r3, [r7, #16]
 800f662:	781b      	ldrb	r3, [r3, #0]
 800f664:	021a      	lsls	r2, r3, #8
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	4313      	orrs	r3, r2
 800f66a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f66c:	693b      	ldr	r3, [r7, #16]
 800f66e:	3301      	adds	r3, #1
 800f670:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800f672:	693b      	ldr	r3, [r7, #16]
 800f674:	781b      	ldrb	r3, [r3, #0]
 800f676:	041a      	lsls	r2, r3, #16
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	4313      	orrs	r3, r2
 800f67c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f67e:	693b      	ldr	r3, [r7, #16]
 800f680:	3301      	adds	r3, #1
 800f682:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800f684:	693b      	ldr	r3, [r7, #16]
 800f686:	781b      	ldrb	r3, [r3, #0]
 800f688:	061a      	lsls	r2, r3, #24
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	4313      	orrs	r3, r2
 800f68e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f690:	693b      	ldr	r3, [r7, #16]
 800f692:	3301      	adds	r3, #1
 800f694:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	f107 020c 	add.w	r2, r7, #12
 800f69e:	4611      	mov	r1, r2
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	f003 fb8c 	bl	8012dbe <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800f6a6:	697b      	ldr	r3, [r7, #20]
 800f6a8:	3301      	adds	r3, #1
 800f6aa:	617b      	str	r3, [r7, #20]
 800f6ac:	697b      	ldr	r3, [r7, #20]
 800f6ae:	2b07      	cmp	r3, #7
 800f6b0:	d9d0      	bls.n	800f654 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	693a      	ldr	r2, [r7, #16]
 800f6b6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	6a1b      	ldr	r3, [r3, #32]
 800f6bc:	f1a3 0220 	sub.w	r2, r3, #32
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	621a      	str	r2, [r3, #32]
  }
}
 800f6c4:	bf00      	nop
 800f6c6:	3718      	adds	r7, #24
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	bd80      	pop	{r7, pc}

0800f6cc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800f6cc:	b480      	push	{r7}
 800f6ce:	b083      	sub	sp, #12
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800f6d4:	bf00      	nop
 800f6d6:	370c      	adds	r7, #12
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6de:	4770      	bx	lr

0800f6e0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800f6e0:	b480      	push	{r7}
 800f6e2:	b083      	sub	sp, #12
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800f6e8:	bf00      	nop
 800f6ea:	370c      	adds	r7, #12
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f2:	4770      	bx	lr

0800f6f4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800f6f4:	b480      	push	{r7}
 800f6f6:	b083      	sub	sp, #12
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800f6fc:	bf00      	nop
 800f6fe:	370c      	adds	r7, #12
 800f700:	46bd      	mov	sp, r7
 800f702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f706:	4770      	bx	lr

0800f708 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800f708:	b480      	push	{r7}
 800f70a:	b083      	sub	sp, #12
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800f710:	bf00      	nop
 800f712:	370c      	adds	r7, #12
 800f714:	46bd      	mov	sp, r7
 800f716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71a:	4770      	bx	lr

0800f71c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b084      	sub	sp, #16
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d101      	bne.n	800f72e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800f72a:	2301      	movs	r3, #1
 800f72c:	e10f      	b.n	800f94e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	2200      	movs	r2, #0
 800f732:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	4a87      	ldr	r2, [pc, #540]	; (800f958 <HAL_SPI_Init+0x23c>)
 800f73a:	4293      	cmp	r3, r2
 800f73c:	d00f      	beq.n	800f75e <HAL_SPI_Init+0x42>
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	4a86      	ldr	r2, [pc, #536]	; (800f95c <HAL_SPI_Init+0x240>)
 800f744:	4293      	cmp	r3, r2
 800f746:	d00a      	beq.n	800f75e <HAL_SPI_Init+0x42>
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	4a84      	ldr	r2, [pc, #528]	; (800f960 <HAL_SPI_Init+0x244>)
 800f74e:	4293      	cmp	r3, r2
 800f750:	d005      	beq.n	800f75e <HAL_SPI_Init+0x42>
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	68db      	ldr	r3, [r3, #12]
 800f756:	2b0f      	cmp	r3, #15
 800f758:	d901      	bls.n	800f75e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800f75a:	2301      	movs	r3, #1
 800f75c:	e0f7      	b.n	800f94e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800f75e:	6878      	ldr	r0, [r7, #4]
 800f760:	f000 fd5a 	bl	8010218 <SPI_GetPacketSize>
 800f764:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	4a7b      	ldr	r2, [pc, #492]	; (800f958 <HAL_SPI_Init+0x23c>)
 800f76c:	4293      	cmp	r3, r2
 800f76e:	d00c      	beq.n	800f78a <HAL_SPI_Init+0x6e>
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	4a79      	ldr	r2, [pc, #484]	; (800f95c <HAL_SPI_Init+0x240>)
 800f776:	4293      	cmp	r3, r2
 800f778:	d007      	beq.n	800f78a <HAL_SPI_Init+0x6e>
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	4a78      	ldr	r2, [pc, #480]	; (800f960 <HAL_SPI_Init+0x244>)
 800f780:	4293      	cmp	r3, r2
 800f782:	d002      	beq.n	800f78a <HAL_SPI_Init+0x6e>
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	2b08      	cmp	r3, #8
 800f788:	d811      	bhi.n	800f7ae <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f78e:	4a72      	ldr	r2, [pc, #456]	; (800f958 <HAL_SPI_Init+0x23c>)
 800f790:	4293      	cmp	r3, r2
 800f792:	d009      	beq.n	800f7a8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	4a70      	ldr	r2, [pc, #448]	; (800f95c <HAL_SPI_Init+0x240>)
 800f79a:	4293      	cmp	r3, r2
 800f79c:	d004      	beq.n	800f7a8 <HAL_SPI_Init+0x8c>
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	4a6f      	ldr	r2, [pc, #444]	; (800f960 <HAL_SPI_Init+0x244>)
 800f7a4:	4293      	cmp	r3, r2
 800f7a6:	d104      	bne.n	800f7b2 <HAL_SPI_Init+0x96>
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	2b10      	cmp	r3, #16
 800f7ac:	d901      	bls.n	800f7b2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800f7ae:	2301      	movs	r3, #1
 800f7b0:	e0cd      	b.n	800f94e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f7b8:	b2db      	uxtb	r3, r3
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d106      	bne.n	800f7cc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f7c6:	6878      	ldr	r0, [r7, #4]
 800f7c8:	f7f3 fd94 	bl	80032f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	2202      	movs	r2, #2
 800f7d0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	681a      	ldr	r2, [r3, #0]
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	f022 0201 	bic.w	r2, r2, #1
 800f7e2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	689b      	ldr	r3, [r3, #8]
 800f7ea:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800f7ee:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	699b      	ldr	r3, [r3, #24]
 800f7f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f7f8:	d119      	bne.n	800f82e <HAL_SPI_Init+0x112>
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	685b      	ldr	r3, [r3, #4]
 800f7fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f802:	d103      	bne.n	800f80c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d008      	beq.n	800f81e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f810:	2b00      	cmp	r3, #0
 800f812:	d10c      	bne.n	800f82e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f818:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f81c:	d107      	bne.n	800f82e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	681a      	ldr	r2, [r3, #0]
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f82c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	685b      	ldr	r3, [r3, #4]
 800f832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f836:	2b00      	cmp	r3, #0
 800f838:	d00f      	beq.n	800f85a <HAL_SPI_Init+0x13e>
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	68db      	ldr	r3, [r3, #12]
 800f83e:	2b06      	cmp	r3, #6
 800f840:	d90b      	bls.n	800f85a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	430a      	orrs	r2, r1
 800f856:	601a      	str	r2, [r3, #0]
 800f858:	e007      	b.n	800f86a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	681a      	ldr	r2, [r3, #0]
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f868:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	69da      	ldr	r2, [r3, #28]
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f872:	431a      	orrs	r2, r3
 800f874:	68bb      	ldr	r3, [r7, #8]
 800f876:	431a      	orrs	r2, r3
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f87c:	ea42 0103 	orr.w	r1, r2, r3
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	68da      	ldr	r2, [r3, #12]
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	430a      	orrs	r2, r1
 800f88a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f894:	431a      	orrs	r2, r3
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f89a:	431a      	orrs	r2, r3
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	699b      	ldr	r3, [r3, #24]
 800f8a0:	431a      	orrs	r2, r3
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	691b      	ldr	r3, [r3, #16]
 800f8a6:	431a      	orrs	r2, r3
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	695b      	ldr	r3, [r3, #20]
 800f8ac:	431a      	orrs	r2, r3
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	6a1b      	ldr	r3, [r3, #32]
 800f8b2:	431a      	orrs	r2, r3
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	685b      	ldr	r3, [r3, #4]
 800f8b8:	431a      	orrs	r2, r3
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f8be:	431a      	orrs	r2, r3
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	689b      	ldr	r3, [r3, #8]
 800f8c4:	431a      	orrs	r2, r3
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f8ca:	ea42 0103 	orr.w	r1, r2, r3
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	430a      	orrs	r2, r1
 800f8d8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	685b      	ldr	r3, [r3, #4]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d113      	bne.n	800f90a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	689b      	ldr	r3, [r3, #8]
 800f8e8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f8f4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	689b      	ldr	r3, [r3, #8]
 800f8fc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f908:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	f022 0201 	bic.w	r2, r2, #1
 800f918:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	685b      	ldr	r3, [r3, #4]
 800f91e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f922:	2b00      	cmp	r3, #0
 800f924:	d00a      	beq.n	800f93c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	68db      	ldr	r3, [r3, #12]
 800f92c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	430a      	orrs	r2, r1
 800f93a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	2200      	movs	r2, #0
 800f940:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	2201      	movs	r2, #1
 800f948:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800f94c:	2300      	movs	r3, #0
}
 800f94e:	4618      	mov	r0, r3
 800f950:	3710      	adds	r7, #16
 800f952:	46bd      	mov	sp, r7
 800f954:	bd80      	pop	{r7, pc}
 800f956:	bf00      	nop
 800f958:	40013000 	.word	0x40013000
 800f95c:	40003800 	.word	0x40003800
 800f960:	40003c00 	.word	0x40003c00

0800f964 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f964:	b580      	push	{r7, lr}
 800f966:	b08a      	sub	sp, #40	; 0x28
 800f968:	af02      	add	r7, sp, #8
 800f96a:	60f8      	str	r0, [r7, #12]
 800f96c:	60b9      	str	r1, [r7, #8]
 800f96e:	603b      	str	r3, [r7, #0]
 800f970:	4613      	mov	r3, r2
 800f972:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	3320      	adds	r3, #32
 800f97a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f97c:	2300      	movs	r3, #0
 800f97e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f986:	2b01      	cmp	r3, #1
 800f988:	d101      	bne.n	800f98e <HAL_SPI_Transmit+0x2a>
 800f98a:	2302      	movs	r3, #2
 800f98c:	e1e1      	b.n	800fd52 <HAL_SPI_Transmit+0x3ee>
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	2201      	movs	r2, #1
 800f992:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f996:	f7f4 fb3d 	bl	8004014 <HAL_GetTick>
 800f99a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f9a2:	b2db      	uxtb	r3, r3
 800f9a4:	2b01      	cmp	r3, #1
 800f9a6:	d007      	beq.n	800f9b8 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800f9a8:	2302      	movs	r3, #2
 800f9aa:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f9b4:	7efb      	ldrb	r3, [r7, #27]
 800f9b6:	e1cc      	b.n	800fd52 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f9b8:	68bb      	ldr	r3, [r7, #8]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d002      	beq.n	800f9c4 <HAL_SPI_Transmit+0x60>
 800f9be:	88fb      	ldrh	r3, [r7, #6]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d107      	bne.n	800f9d4 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800f9c4:	2301      	movs	r3, #1
 800f9c6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f9d0:	7efb      	ldrb	r3, [r7, #27]
 800f9d2:	e1be      	b.n	800fd52 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	2203      	movs	r2, #3
 800f9d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	2200      	movs	r2, #0
 800f9e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	68ba      	ldr	r2, [r7, #8]
 800f9e8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	88fa      	ldrh	r2, [r7, #6]
 800f9ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	88fa      	ldrh	r2, [r7, #6]
 800f9f6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	2200      	movs	r2, #0
 800fa04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	2200      	movs	r2, #0
 800fa0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	2200      	movs	r2, #0
 800fa14:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	2200      	movs	r2, #0
 800fa1a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	689b      	ldr	r3, [r3, #8]
 800fa20:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800fa24:	d108      	bne.n	800fa38 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	681a      	ldr	r2, [r3, #0]
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fa34:	601a      	str	r2, [r3, #0]
 800fa36:	e009      	b.n	800fa4c <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	68db      	ldr	r3, [r3, #12]
 800fa3e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800fa4a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	685a      	ldr	r2, [r3, #4]
 800fa52:	4b96      	ldr	r3, [pc, #600]	; (800fcac <HAL_SPI_Transmit+0x348>)
 800fa54:	4013      	ands	r3, r2
 800fa56:	88f9      	ldrh	r1, [r7, #6]
 800fa58:	68fa      	ldr	r2, [r7, #12]
 800fa5a:	6812      	ldr	r2, [r2, #0]
 800fa5c:	430b      	orrs	r3, r1
 800fa5e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	681a      	ldr	r2, [r3, #0]
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	f042 0201 	orr.w	r2, r2, #1
 800fa6e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	685b      	ldr	r3, [r3, #4]
 800fa74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fa78:	d107      	bne.n	800fa8a <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	681a      	ldr	r2, [r3, #0]
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fa88:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	68db      	ldr	r3, [r3, #12]
 800fa8e:	2b0f      	cmp	r3, #15
 800fa90:	d947      	bls.n	800fb22 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800fa92:	e03f      	b.n	800fb14 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	695b      	ldr	r3, [r3, #20]
 800fa9a:	f003 0302 	and.w	r3, r3, #2
 800fa9e:	2b02      	cmp	r3, #2
 800faa0:	d114      	bne.n	800facc <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	6812      	ldr	r2, [r2, #0]
 800faac:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fab2:	1d1a      	adds	r2, r3, #4
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fabe:	b29b      	uxth	r3, r3
 800fac0:	3b01      	subs	r3, #1
 800fac2:	b29a      	uxth	r2, r3
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800faca:	e023      	b.n	800fb14 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800facc:	f7f4 faa2 	bl	8004014 <HAL_GetTick>
 800fad0:	4602      	mov	r2, r0
 800fad2:	697b      	ldr	r3, [r7, #20]
 800fad4:	1ad3      	subs	r3, r2, r3
 800fad6:	683a      	ldr	r2, [r7, #0]
 800fad8:	429a      	cmp	r2, r3
 800fada:	d803      	bhi.n	800fae4 <HAL_SPI_Transmit+0x180>
 800fadc:	683b      	ldr	r3, [r7, #0]
 800fade:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fae2:	d102      	bne.n	800faea <HAL_SPI_Transmit+0x186>
 800fae4:	683b      	ldr	r3, [r7, #0]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d114      	bne.n	800fb14 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800faea:	68f8      	ldr	r0, [r7, #12]
 800faec:	f000 fac6 	bl	801007c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	2200      	movs	r2, #0
 800faf4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fafe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	2201      	movs	r2, #1
 800fb0c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800fb10:	2303      	movs	r3, #3
 800fb12:	e11e      	b.n	800fd52 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fb1a:	b29b      	uxth	r3, r3
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d1b9      	bne.n	800fa94 <HAL_SPI_Transmit+0x130>
 800fb20:	e0f1      	b.n	800fd06 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	68db      	ldr	r3, [r3, #12]
 800fb26:	2b07      	cmp	r3, #7
 800fb28:	f240 80e6 	bls.w	800fcf8 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800fb2c:	e05d      	b.n	800fbea <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	695b      	ldr	r3, [r3, #20]
 800fb34:	f003 0302 	and.w	r3, r3, #2
 800fb38:	2b02      	cmp	r3, #2
 800fb3a:	d132      	bne.n	800fba2 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fb42:	b29b      	uxth	r3, r3
 800fb44:	2b01      	cmp	r3, #1
 800fb46:	d918      	bls.n	800fb7a <HAL_SPI_Transmit+0x216>
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d014      	beq.n	800fb7a <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	6812      	ldr	r2, [r2, #0]
 800fb5a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fb60:	1d1a      	adds	r2, r3, #4
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fb6c:	b29b      	uxth	r3, r3
 800fb6e:	3b02      	subs	r3, #2
 800fb70:	b29a      	uxth	r2, r3
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fb78:	e037      	b.n	800fbea <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fb7e:	881a      	ldrh	r2, [r3, #0]
 800fb80:	69fb      	ldr	r3, [r7, #28]
 800fb82:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fb88:	1c9a      	adds	r2, r3, #2
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fb94:	b29b      	uxth	r3, r3
 800fb96:	3b01      	subs	r3, #1
 800fb98:	b29a      	uxth	r2, r3
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fba0:	e023      	b.n	800fbea <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fba2:	f7f4 fa37 	bl	8004014 <HAL_GetTick>
 800fba6:	4602      	mov	r2, r0
 800fba8:	697b      	ldr	r3, [r7, #20]
 800fbaa:	1ad3      	subs	r3, r2, r3
 800fbac:	683a      	ldr	r2, [r7, #0]
 800fbae:	429a      	cmp	r2, r3
 800fbb0:	d803      	bhi.n	800fbba <HAL_SPI_Transmit+0x256>
 800fbb2:	683b      	ldr	r3, [r7, #0]
 800fbb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbb8:	d102      	bne.n	800fbc0 <HAL_SPI_Transmit+0x25c>
 800fbba:	683b      	ldr	r3, [r7, #0]
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d114      	bne.n	800fbea <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fbc0:	68f8      	ldr	r0, [r7, #12]
 800fbc2:	f000 fa5b 	bl	801007c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	2200      	movs	r2, #0
 800fbca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fbd4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	2201      	movs	r2, #1
 800fbe2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800fbe6:	2303      	movs	r3, #3
 800fbe8:	e0b3      	b.n	800fd52 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fbf0:	b29b      	uxth	r3, r3
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d19b      	bne.n	800fb2e <HAL_SPI_Transmit+0x1ca>
 800fbf6:	e086      	b.n	800fd06 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	695b      	ldr	r3, [r3, #20]
 800fbfe:	f003 0302 	and.w	r3, r3, #2
 800fc02:	2b02      	cmp	r3, #2
 800fc04:	d154      	bne.n	800fcb0 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fc0c:	b29b      	uxth	r3, r3
 800fc0e:	2b03      	cmp	r3, #3
 800fc10:	d918      	bls.n	800fc44 <HAL_SPI_Transmit+0x2e0>
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc16:	2b40      	cmp	r3, #64	; 0x40
 800fc18:	d914      	bls.n	800fc44 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	6812      	ldr	r2, [r2, #0]
 800fc24:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fc2a:	1d1a      	adds	r2, r3, #4
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fc36:	b29b      	uxth	r3, r3
 800fc38:	3b04      	subs	r3, #4
 800fc3a:	b29a      	uxth	r2, r3
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fc42:	e059      	b.n	800fcf8 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fc4a:	b29b      	uxth	r3, r3
 800fc4c:	2b01      	cmp	r3, #1
 800fc4e:	d917      	bls.n	800fc80 <HAL_SPI_Transmit+0x31c>
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d013      	beq.n	800fc80 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fc5c:	881a      	ldrh	r2, [r3, #0]
 800fc5e:	69fb      	ldr	r3, [r7, #28]
 800fc60:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fc66:	1c9a      	adds	r2, r3, #2
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fc72:	b29b      	uxth	r3, r3
 800fc74:	3b02      	subs	r3, #2
 800fc76:	b29a      	uxth	r2, r3
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fc7e:	e03b      	b.n	800fcf8 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	3320      	adds	r3, #32
 800fc8a:	7812      	ldrb	r2, [r2, #0]
 800fc8c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fc92:	1c5a      	adds	r2, r3, #1
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fc9e:	b29b      	uxth	r3, r3
 800fca0:	3b01      	subs	r3, #1
 800fca2:	b29a      	uxth	r2, r3
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800fcaa:	e025      	b.n	800fcf8 <HAL_SPI_Transmit+0x394>
 800fcac:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fcb0:	f7f4 f9b0 	bl	8004014 <HAL_GetTick>
 800fcb4:	4602      	mov	r2, r0
 800fcb6:	697b      	ldr	r3, [r7, #20]
 800fcb8:	1ad3      	subs	r3, r2, r3
 800fcba:	683a      	ldr	r2, [r7, #0]
 800fcbc:	429a      	cmp	r2, r3
 800fcbe:	d803      	bhi.n	800fcc8 <HAL_SPI_Transmit+0x364>
 800fcc0:	683b      	ldr	r3, [r7, #0]
 800fcc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcc6:	d102      	bne.n	800fcce <HAL_SPI_Transmit+0x36a>
 800fcc8:	683b      	ldr	r3, [r7, #0]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d114      	bne.n	800fcf8 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fcce:	68f8      	ldr	r0, [r7, #12]
 800fcd0:	f000 f9d4 	bl	801007c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	2200      	movs	r2, #0
 800fcd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fce2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	2201      	movs	r2, #1
 800fcf0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800fcf4:	2303      	movs	r3, #3
 800fcf6:	e02c      	b.n	800fd52 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fcfe:	b29b      	uxth	r3, r3
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	f47f af79 	bne.w	800fbf8 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800fd06:	697b      	ldr	r3, [r7, #20]
 800fd08:	9300      	str	r3, [sp, #0]
 800fd0a:	683b      	ldr	r3, [r7, #0]
 800fd0c:	2200      	movs	r2, #0
 800fd0e:	2108      	movs	r1, #8
 800fd10:	68f8      	ldr	r0, [r7, #12]
 800fd12:	f000 fa53 	bl	80101bc <SPI_WaitOnFlagUntilTimeout>
 800fd16:	4603      	mov	r3, r0
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d007      	beq.n	800fd2c <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd22:	f043 0220 	orr.w	r2, r3, #32
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800fd2c:	68f8      	ldr	r0, [r7, #12]
 800fd2e:	f000 f9a5 	bl	801007c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	2200      	movs	r2, #0
 800fd36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	2201      	movs	r2, #1
 800fd3e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d001      	beq.n	800fd50 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800fd4c:	2301      	movs	r3, #1
 800fd4e:	e000      	b.n	800fd52 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800fd50:	7efb      	ldrb	r3, [r7, #27]
}
 800fd52:	4618      	mov	r0, r3
 800fd54:	3720      	adds	r7, #32
 800fd56:	46bd      	mov	sp, r7
 800fd58:	bd80      	pop	{r7, pc}
 800fd5a:	bf00      	nop

0800fd5c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fd5c:	b580      	push	{r7, lr}
 800fd5e:	b088      	sub	sp, #32
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	60f8      	str	r0, [r7, #12]
 800fd64:	60b9      	str	r1, [r7, #8]
 800fd66:	603b      	str	r3, [r7, #0]
 800fd68:	4613      	mov	r3, r2
 800fd6a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	3330      	adds	r3, #48	; 0x30
 800fd76:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fd7e:	2b01      	cmp	r3, #1
 800fd80:	d101      	bne.n	800fd86 <HAL_SPI_Receive+0x2a>
 800fd82:	2302      	movs	r3, #2
 800fd84:	e173      	b.n	801006e <HAL_SPI_Receive+0x312>
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	2201      	movs	r2, #1
 800fd8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fd8e:	f7f4 f941 	bl	8004014 <HAL_GetTick>
 800fd92:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800fd9a:	b2db      	uxtb	r3, r3
 800fd9c:	2b01      	cmp	r3, #1
 800fd9e:	d007      	beq.n	800fdb0 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800fda0:	2302      	movs	r3, #2
 800fda2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	2200      	movs	r2, #0
 800fda8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800fdac:	7ffb      	ldrb	r3, [r7, #31]
 800fdae:	e15e      	b.n	801006e <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800fdb0:	68bb      	ldr	r3, [r7, #8]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d002      	beq.n	800fdbc <HAL_SPI_Receive+0x60>
 800fdb6:	88fb      	ldrh	r3, [r7, #6]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d107      	bne.n	800fdcc <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800fdbc:	2301      	movs	r3, #1
 800fdbe:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800fdc8:	7ffb      	ldrb	r3, [r7, #31]
 800fdca:	e150      	b.n	801006e <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	2204      	movs	r2, #4
 800fdd0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	68ba      	ldr	r2, [r7, #8]
 800fde0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	88fa      	ldrh	r2, [r7, #6]
 800fde6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	88fa      	ldrh	r2, [r7, #6]
 800fdee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	2200      	movs	r2, #0
 800fdfc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	2200      	movs	r2, #0
 800fe04:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	2200      	movs	r2, #0
 800fe0c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	2200      	movs	r2, #0
 800fe12:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	689b      	ldr	r3, [r3, #8]
 800fe18:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800fe1c:	d108      	bne.n	800fe30 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	681a      	ldr	r2, [r3, #0]
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800fe2c:	601a      	str	r2, [r3, #0]
 800fe2e:	e009      	b.n	800fe44 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	68db      	ldr	r3, [r3, #12]
 800fe36:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800fe42:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	685a      	ldr	r2, [r3, #4]
 800fe4a:	4b8b      	ldr	r3, [pc, #556]	; (8010078 <HAL_SPI_Receive+0x31c>)
 800fe4c:	4013      	ands	r3, r2
 800fe4e:	88f9      	ldrh	r1, [r7, #6]
 800fe50:	68fa      	ldr	r2, [r7, #12]
 800fe52:	6812      	ldr	r2, [r2, #0]
 800fe54:	430b      	orrs	r3, r1
 800fe56:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	681a      	ldr	r2, [r3, #0]
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	f042 0201 	orr.w	r2, r2, #1
 800fe66:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	685b      	ldr	r3, [r3, #4]
 800fe6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fe70:	d107      	bne.n	800fe82 <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	681a      	ldr	r2, [r3, #0]
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fe80:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	68db      	ldr	r3, [r3, #12]
 800fe86:	2b0f      	cmp	r3, #15
 800fe88:	d948      	bls.n	800ff1c <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800fe8a:	e040      	b.n	800ff0e <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	695a      	ldr	r2, [r3, #20]
 800fe92:	f248 0308 	movw	r3, #32776	; 0x8008
 800fe96:	4013      	ands	r3, r2
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d014      	beq.n	800fec6 <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	681a      	ldr	r2, [r3, #0]
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fea4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800fea6:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800feac:	1d1a      	adds	r2, r3, #4
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800feb8:	b29b      	uxth	r3, r3
 800feba:	3b01      	subs	r3, #1
 800febc:	b29a      	uxth	r2, r3
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800fec4:	e023      	b.n	800ff0e <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fec6:	f7f4 f8a5 	bl	8004014 <HAL_GetTick>
 800feca:	4602      	mov	r2, r0
 800fecc:	697b      	ldr	r3, [r7, #20]
 800fece:	1ad3      	subs	r3, r2, r3
 800fed0:	683a      	ldr	r2, [r7, #0]
 800fed2:	429a      	cmp	r2, r3
 800fed4:	d803      	bhi.n	800fede <HAL_SPI_Receive+0x182>
 800fed6:	683b      	ldr	r3, [r7, #0]
 800fed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fedc:	d102      	bne.n	800fee4 <HAL_SPI_Receive+0x188>
 800fede:	683b      	ldr	r3, [r7, #0]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d114      	bne.n	800ff0e <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fee4:	68f8      	ldr	r0, [r7, #12]
 800fee6:	f000 f8c9 	bl	801007c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	2200      	movs	r2, #0
 800feee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fef8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	2201      	movs	r2, #1
 800ff06:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ff0a:	2303      	movs	r3, #3
 800ff0c:	e0af      	b.n	801006e <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ff14:	b29b      	uxth	r3, r3
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d1b8      	bne.n	800fe8c <HAL_SPI_Receive+0x130>
 800ff1a:	e095      	b.n	8010048 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	68db      	ldr	r3, [r3, #12]
 800ff20:	2b07      	cmp	r3, #7
 800ff22:	f240 808b 	bls.w	801003c <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ff26:	e03f      	b.n	800ffa8 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	695b      	ldr	r3, [r3, #20]
 800ff2e:	f003 0301 	and.w	r3, r3, #1
 800ff32:	2b01      	cmp	r3, #1
 800ff34:	d114      	bne.n	800ff60 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ff3a:	69ba      	ldr	r2, [r7, #24]
 800ff3c:	8812      	ldrh	r2, [r2, #0]
 800ff3e:	b292      	uxth	r2, r2
 800ff40:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ff46:	1c9a      	adds	r2, r3, #2
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ff52:	b29b      	uxth	r3, r3
 800ff54:	3b01      	subs	r3, #1
 800ff56:	b29a      	uxth	r2, r3
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ff5e:	e023      	b.n	800ffa8 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ff60:	f7f4 f858 	bl	8004014 <HAL_GetTick>
 800ff64:	4602      	mov	r2, r0
 800ff66:	697b      	ldr	r3, [r7, #20]
 800ff68:	1ad3      	subs	r3, r2, r3
 800ff6a:	683a      	ldr	r2, [r7, #0]
 800ff6c:	429a      	cmp	r2, r3
 800ff6e:	d803      	bhi.n	800ff78 <HAL_SPI_Receive+0x21c>
 800ff70:	683b      	ldr	r3, [r7, #0]
 800ff72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff76:	d102      	bne.n	800ff7e <HAL_SPI_Receive+0x222>
 800ff78:	683b      	ldr	r3, [r7, #0]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d114      	bne.n	800ffa8 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ff7e:	68f8      	ldr	r0, [r7, #12]
 800ff80:	f000 f87c 	bl	801007c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	2200      	movs	r2, #0
 800ff88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ff92:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	2201      	movs	r2, #1
 800ffa0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ffa4:	2303      	movs	r3, #3
 800ffa6:	e062      	b.n	801006e <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ffae:	b29b      	uxth	r3, r3
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d1b9      	bne.n	800ff28 <HAL_SPI_Receive+0x1cc>
 800ffb4:	e048      	b.n	8010048 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	695b      	ldr	r3, [r3, #20]
 800ffbc:	f003 0301 	and.w	r3, r3, #1
 800ffc0:	2b01      	cmp	r3, #1
 800ffc2:	d117      	bne.n	800fff4 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ffd0:	7812      	ldrb	r2, [r2, #0]
 800ffd2:	b2d2      	uxtb	r2, r2
 800ffd4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ffda:	1c5a      	adds	r2, r3, #1
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ffe6:	b29b      	uxth	r3, r3
 800ffe8:	3b01      	subs	r3, #1
 800ffea:	b29a      	uxth	r2, r3
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800fff2:	e023      	b.n	801003c <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fff4:	f7f4 f80e 	bl	8004014 <HAL_GetTick>
 800fff8:	4602      	mov	r2, r0
 800fffa:	697b      	ldr	r3, [r7, #20]
 800fffc:	1ad3      	subs	r3, r2, r3
 800fffe:	683a      	ldr	r2, [r7, #0]
 8010000:	429a      	cmp	r2, r3
 8010002:	d803      	bhi.n	801000c <HAL_SPI_Receive+0x2b0>
 8010004:	683b      	ldr	r3, [r7, #0]
 8010006:	f1b3 3fff 	cmp.w	r3, #4294967295
 801000a:	d102      	bne.n	8010012 <HAL_SPI_Receive+0x2b6>
 801000c:	683b      	ldr	r3, [r7, #0]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d114      	bne.n	801003c <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8010012:	68f8      	ldr	r0, [r7, #12]
 8010014:	f000 f832 	bl	801007c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	2200      	movs	r2, #0
 801001c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010026:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	2201      	movs	r2, #1
 8010034:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8010038:	2303      	movs	r3, #3
 801003a:	e018      	b.n	801006e <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010042:	b29b      	uxth	r3, r3
 8010044:	2b00      	cmp	r3, #0
 8010046:	d1b6      	bne.n	800ffb6 <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8010048:	68f8      	ldr	r0, [r7, #12]
 801004a:	f000 f817 	bl	801007c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	2200      	movs	r2, #0
 8010052:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	2201      	movs	r2, #1
 801005a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010064:	2b00      	cmp	r3, #0
 8010066:	d001      	beq.n	801006c <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 8010068:	2301      	movs	r3, #1
 801006a:	e000      	b.n	801006e <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 801006c:	7ffb      	ldrb	r3, [r7, #31]
}
 801006e:	4618      	mov	r0, r3
 8010070:	3720      	adds	r7, #32
 8010072:	46bd      	mov	sp, r7
 8010074:	bd80      	pop	{r7, pc}
 8010076:	bf00      	nop
 8010078:	ffff0000 	.word	0xffff0000

0801007c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 801007c:	b480      	push	{r7}
 801007e:	b085      	sub	sp, #20
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	695b      	ldr	r3, [r3, #20]
 801008a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	699a      	ldr	r2, [r3, #24]
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	f042 0208 	orr.w	r2, r2, #8
 801009a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	699a      	ldr	r2, [r3, #24]
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	f042 0210 	orr.w	r2, r2, #16
 80100aa:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	681a      	ldr	r2, [r3, #0]
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	f022 0201 	bic.w	r2, r2, #1
 80100ba:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	6919      	ldr	r1, [r3, #16]
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	681a      	ldr	r2, [r3, #0]
 80100c6:	4b3c      	ldr	r3, [pc, #240]	; (80101b8 <SPI_CloseTransfer+0x13c>)
 80100c8:	400b      	ands	r3, r1
 80100ca:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	689a      	ldr	r2, [r3, #8]
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80100da:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80100e2:	b2db      	uxtb	r3, r3
 80100e4:	2b04      	cmp	r3, #4
 80100e6:	d014      	beq.n	8010112 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	f003 0320 	and.w	r3, r3, #32
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d00f      	beq.n	8010112 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80100f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	699a      	ldr	r2, [r3, #24]
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	f042 0220 	orr.w	r2, r2, #32
 8010110:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8010118:	b2db      	uxtb	r3, r3
 801011a:	2b03      	cmp	r3, #3
 801011c:	d014      	beq.n	8010148 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010124:	2b00      	cmp	r3, #0
 8010126:	d00f      	beq.n	8010148 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801012e:	f043 0204 	orr.w	r2, r3, #4
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	699a      	ldr	r2, [r3, #24]
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010146:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801014e:	2b00      	cmp	r3, #0
 8010150:	d00f      	beq.n	8010172 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010158:	f043 0201 	orr.w	r2, r3, #1
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	699a      	ldr	r2, [r3, #24]
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010170:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010178:	2b00      	cmp	r3, #0
 801017a:	d00f      	beq.n	801019c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010182:	f043 0208 	orr.w	r2, r3, #8
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	699a      	ldr	r2, [r3, #24]
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801019a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	2200      	movs	r2, #0
 80101a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	2200      	movs	r2, #0
 80101a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80101ac:	bf00      	nop
 80101ae:	3714      	adds	r7, #20
 80101b0:	46bd      	mov	sp, r7
 80101b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b6:	4770      	bx	lr
 80101b8:	fffffc90 	.word	0xfffffc90

080101bc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80101bc:	b580      	push	{r7, lr}
 80101be:	b084      	sub	sp, #16
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	60f8      	str	r0, [r7, #12]
 80101c4:	60b9      	str	r1, [r7, #8]
 80101c6:	603b      	str	r3, [r7, #0]
 80101c8:	4613      	mov	r3, r2
 80101ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80101cc:	e010      	b.n	80101f0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80101ce:	f7f3 ff21 	bl	8004014 <HAL_GetTick>
 80101d2:	4602      	mov	r2, r0
 80101d4:	69bb      	ldr	r3, [r7, #24]
 80101d6:	1ad3      	subs	r3, r2, r3
 80101d8:	683a      	ldr	r2, [r7, #0]
 80101da:	429a      	cmp	r2, r3
 80101dc:	d803      	bhi.n	80101e6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80101de:	683b      	ldr	r3, [r7, #0]
 80101e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101e4:	d102      	bne.n	80101ec <SPI_WaitOnFlagUntilTimeout+0x30>
 80101e6:	683b      	ldr	r3, [r7, #0]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d101      	bne.n	80101f0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80101ec:	2303      	movs	r3, #3
 80101ee:	e00f      	b.n	8010210 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	695a      	ldr	r2, [r3, #20]
 80101f6:	68bb      	ldr	r3, [r7, #8]
 80101f8:	4013      	ands	r3, r2
 80101fa:	68ba      	ldr	r2, [r7, #8]
 80101fc:	429a      	cmp	r2, r3
 80101fe:	bf0c      	ite	eq
 8010200:	2301      	moveq	r3, #1
 8010202:	2300      	movne	r3, #0
 8010204:	b2db      	uxtb	r3, r3
 8010206:	461a      	mov	r2, r3
 8010208:	79fb      	ldrb	r3, [r7, #7]
 801020a:	429a      	cmp	r2, r3
 801020c:	d0df      	beq.n	80101ce <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 801020e:	2300      	movs	r3, #0
}
 8010210:	4618      	mov	r0, r3
 8010212:	3710      	adds	r7, #16
 8010214:	46bd      	mov	sp, r7
 8010216:	bd80      	pop	{r7, pc}

08010218 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8010218:	b480      	push	{r7}
 801021a:	b085      	sub	sp, #20
 801021c:	af00      	add	r7, sp, #0
 801021e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010224:	095b      	lsrs	r3, r3, #5
 8010226:	3301      	adds	r3, #1
 8010228:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	68db      	ldr	r3, [r3, #12]
 801022e:	3301      	adds	r3, #1
 8010230:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8010232:	68bb      	ldr	r3, [r7, #8]
 8010234:	3307      	adds	r3, #7
 8010236:	08db      	lsrs	r3, r3, #3
 8010238:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 801023a:	68bb      	ldr	r3, [r7, #8]
 801023c:	68fa      	ldr	r2, [r7, #12]
 801023e:	fb02 f303 	mul.w	r3, r2, r3
}
 8010242:	4618      	mov	r0, r3
 8010244:	3714      	adds	r7, #20
 8010246:	46bd      	mov	sp, r7
 8010248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801024c:	4770      	bx	lr

0801024e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801024e:	b580      	push	{r7, lr}
 8010250:	b082      	sub	sp, #8
 8010252:	af00      	add	r7, sp, #0
 8010254:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d101      	bne.n	8010260 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801025c:	2301      	movs	r3, #1
 801025e:	e049      	b.n	80102f4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010266:	b2db      	uxtb	r3, r3
 8010268:	2b00      	cmp	r3, #0
 801026a:	d106      	bne.n	801027a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	2200      	movs	r2, #0
 8010270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010274:	6878      	ldr	r0, [r7, #4]
 8010276:	f7f3 fa8f 	bl	8003798 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	2202      	movs	r2, #2
 801027e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	681a      	ldr	r2, [r3, #0]
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	3304      	adds	r3, #4
 801028a:	4619      	mov	r1, r3
 801028c:	4610      	mov	r0, r2
 801028e:	f000 ff29 	bl	80110e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	2201      	movs	r2, #1
 8010296:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	2201      	movs	r2, #1
 801029e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	2201      	movs	r2, #1
 80102a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	2201      	movs	r2, #1
 80102ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	2201      	movs	r2, #1
 80102b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	2201      	movs	r2, #1
 80102be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	2201      	movs	r2, #1
 80102c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	2201      	movs	r2, #1
 80102ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	2201      	movs	r2, #1
 80102d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	2201      	movs	r2, #1
 80102de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	2201      	movs	r2, #1
 80102e6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	2201      	movs	r2, #1
 80102ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80102f2:	2300      	movs	r3, #0
}
 80102f4:	4618      	mov	r0, r3
 80102f6:	3708      	adds	r7, #8
 80102f8:	46bd      	mov	sp, r7
 80102fa:	bd80      	pop	{r7, pc}

080102fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b082      	sub	sp, #8
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	2b00      	cmp	r3, #0
 8010308:	d101      	bne.n	801030e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801030a:	2301      	movs	r3, #1
 801030c:	e049      	b.n	80103a2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010314:	b2db      	uxtb	r3, r3
 8010316:	2b00      	cmp	r3, #0
 8010318:	d106      	bne.n	8010328 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	2200      	movs	r2, #0
 801031e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010322:	6878      	ldr	r0, [r7, #4]
 8010324:	f7f3 f8a2 	bl	800346c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	2202      	movs	r2, #2
 801032c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	681a      	ldr	r2, [r3, #0]
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	3304      	adds	r3, #4
 8010338:	4619      	mov	r1, r3
 801033a:	4610      	mov	r0, r2
 801033c:	f000 fed2 	bl	80110e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	2201      	movs	r2, #1
 8010344:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	2201      	movs	r2, #1
 801034c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	2201      	movs	r2, #1
 8010354:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	2201      	movs	r2, #1
 801035c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	2201      	movs	r2, #1
 8010364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	2201      	movs	r2, #1
 801036c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	2201      	movs	r2, #1
 8010374:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	2201      	movs	r2, #1
 801037c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	2201      	movs	r2, #1
 8010384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	2201      	movs	r2, #1
 801038c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	2201      	movs	r2, #1
 8010394:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	2201      	movs	r2, #1
 801039c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80103a0:	2300      	movs	r3, #0
}
 80103a2:	4618      	mov	r0, r3
 80103a4:	3708      	adds	r7, #8
 80103a6:	46bd      	mov	sp, r7
 80103a8:	bd80      	pop	{r7, pc}
	...

080103ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b084      	sub	sp, #16
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
 80103b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80103b6:	683b      	ldr	r3, [r7, #0]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d109      	bne.n	80103d0 <HAL_TIM_PWM_Start+0x24>
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80103c2:	b2db      	uxtb	r3, r3
 80103c4:	2b01      	cmp	r3, #1
 80103c6:	bf14      	ite	ne
 80103c8:	2301      	movne	r3, #1
 80103ca:	2300      	moveq	r3, #0
 80103cc:	b2db      	uxtb	r3, r3
 80103ce:	e03c      	b.n	801044a <HAL_TIM_PWM_Start+0x9e>
 80103d0:	683b      	ldr	r3, [r7, #0]
 80103d2:	2b04      	cmp	r3, #4
 80103d4:	d109      	bne.n	80103ea <HAL_TIM_PWM_Start+0x3e>
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80103dc:	b2db      	uxtb	r3, r3
 80103de:	2b01      	cmp	r3, #1
 80103e0:	bf14      	ite	ne
 80103e2:	2301      	movne	r3, #1
 80103e4:	2300      	moveq	r3, #0
 80103e6:	b2db      	uxtb	r3, r3
 80103e8:	e02f      	b.n	801044a <HAL_TIM_PWM_Start+0x9e>
 80103ea:	683b      	ldr	r3, [r7, #0]
 80103ec:	2b08      	cmp	r3, #8
 80103ee:	d109      	bne.n	8010404 <HAL_TIM_PWM_Start+0x58>
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80103f6:	b2db      	uxtb	r3, r3
 80103f8:	2b01      	cmp	r3, #1
 80103fa:	bf14      	ite	ne
 80103fc:	2301      	movne	r3, #1
 80103fe:	2300      	moveq	r3, #0
 8010400:	b2db      	uxtb	r3, r3
 8010402:	e022      	b.n	801044a <HAL_TIM_PWM_Start+0x9e>
 8010404:	683b      	ldr	r3, [r7, #0]
 8010406:	2b0c      	cmp	r3, #12
 8010408:	d109      	bne.n	801041e <HAL_TIM_PWM_Start+0x72>
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010410:	b2db      	uxtb	r3, r3
 8010412:	2b01      	cmp	r3, #1
 8010414:	bf14      	ite	ne
 8010416:	2301      	movne	r3, #1
 8010418:	2300      	moveq	r3, #0
 801041a:	b2db      	uxtb	r3, r3
 801041c:	e015      	b.n	801044a <HAL_TIM_PWM_Start+0x9e>
 801041e:	683b      	ldr	r3, [r7, #0]
 8010420:	2b10      	cmp	r3, #16
 8010422:	d109      	bne.n	8010438 <HAL_TIM_PWM_Start+0x8c>
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801042a:	b2db      	uxtb	r3, r3
 801042c:	2b01      	cmp	r3, #1
 801042e:	bf14      	ite	ne
 8010430:	2301      	movne	r3, #1
 8010432:	2300      	moveq	r3, #0
 8010434:	b2db      	uxtb	r3, r3
 8010436:	e008      	b.n	801044a <HAL_TIM_PWM_Start+0x9e>
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801043e:	b2db      	uxtb	r3, r3
 8010440:	2b01      	cmp	r3, #1
 8010442:	bf14      	ite	ne
 8010444:	2301      	movne	r3, #1
 8010446:	2300      	moveq	r3, #0
 8010448:	b2db      	uxtb	r3, r3
 801044a:	2b00      	cmp	r3, #0
 801044c:	d001      	beq.n	8010452 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801044e:	2301      	movs	r3, #1
 8010450:	e0ab      	b.n	80105aa <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010452:	683b      	ldr	r3, [r7, #0]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d104      	bne.n	8010462 <HAL_TIM_PWM_Start+0xb6>
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	2202      	movs	r2, #2
 801045c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010460:	e023      	b.n	80104aa <HAL_TIM_PWM_Start+0xfe>
 8010462:	683b      	ldr	r3, [r7, #0]
 8010464:	2b04      	cmp	r3, #4
 8010466:	d104      	bne.n	8010472 <HAL_TIM_PWM_Start+0xc6>
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	2202      	movs	r2, #2
 801046c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010470:	e01b      	b.n	80104aa <HAL_TIM_PWM_Start+0xfe>
 8010472:	683b      	ldr	r3, [r7, #0]
 8010474:	2b08      	cmp	r3, #8
 8010476:	d104      	bne.n	8010482 <HAL_TIM_PWM_Start+0xd6>
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	2202      	movs	r2, #2
 801047c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010480:	e013      	b.n	80104aa <HAL_TIM_PWM_Start+0xfe>
 8010482:	683b      	ldr	r3, [r7, #0]
 8010484:	2b0c      	cmp	r3, #12
 8010486:	d104      	bne.n	8010492 <HAL_TIM_PWM_Start+0xe6>
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	2202      	movs	r2, #2
 801048c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010490:	e00b      	b.n	80104aa <HAL_TIM_PWM_Start+0xfe>
 8010492:	683b      	ldr	r3, [r7, #0]
 8010494:	2b10      	cmp	r3, #16
 8010496:	d104      	bne.n	80104a2 <HAL_TIM_PWM_Start+0xf6>
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	2202      	movs	r2, #2
 801049c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80104a0:	e003      	b.n	80104aa <HAL_TIM_PWM_Start+0xfe>
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	2202      	movs	r2, #2
 80104a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	2201      	movs	r2, #1
 80104b0:	6839      	ldr	r1, [r7, #0]
 80104b2:	4618      	mov	r0, r3
 80104b4:	f001 f992 	bl	80117dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	4a3d      	ldr	r2, [pc, #244]	; (80105b4 <HAL_TIM_PWM_Start+0x208>)
 80104be:	4293      	cmp	r3, r2
 80104c0:	d013      	beq.n	80104ea <HAL_TIM_PWM_Start+0x13e>
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	4a3c      	ldr	r2, [pc, #240]	; (80105b8 <HAL_TIM_PWM_Start+0x20c>)
 80104c8:	4293      	cmp	r3, r2
 80104ca:	d00e      	beq.n	80104ea <HAL_TIM_PWM_Start+0x13e>
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	4a3a      	ldr	r2, [pc, #232]	; (80105bc <HAL_TIM_PWM_Start+0x210>)
 80104d2:	4293      	cmp	r3, r2
 80104d4:	d009      	beq.n	80104ea <HAL_TIM_PWM_Start+0x13e>
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	4a39      	ldr	r2, [pc, #228]	; (80105c0 <HAL_TIM_PWM_Start+0x214>)
 80104dc:	4293      	cmp	r3, r2
 80104de:	d004      	beq.n	80104ea <HAL_TIM_PWM_Start+0x13e>
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	4a37      	ldr	r2, [pc, #220]	; (80105c4 <HAL_TIM_PWM_Start+0x218>)
 80104e6:	4293      	cmp	r3, r2
 80104e8:	d101      	bne.n	80104ee <HAL_TIM_PWM_Start+0x142>
 80104ea:	2301      	movs	r3, #1
 80104ec:	e000      	b.n	80104f0 <HAL_TIM_PWM_Start+0x144>
 80104ee:	2300      	movs	r3, #0
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d007      	beq.n	8010504 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010502:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	4a2a      	ldr	r2, [pc, #168]	; (80105b4 <HAL_TIM_PWM_Start+0x208>)
 801050a:	4293      	cmp	r3, r2
 801050c:	d02c      	beq.n	8010568 <HAL_TIM_PWM_Start+0x1bc>
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010516:	d027      	beq.n	8010568 <HAL_TIM_PWM_Start+0x1bc>
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	4a2a      	ldr	r2, [pc, #168]	; (80105c8 <HAL_TIM_PWM_Start+0x21c>)
 801051e:	4293      	cmp	r3, r2
 8010520:	d022      	beq.n	8010568 <HAL_TIM_PWM_Start+0x1bc>
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	4a29      	ldr	r2, [pc, #164]	; (80105cc <HAL_TIM_PWM_Start+0x220>)
 8010528:	4293      	cmp	r3, r2
 801052a:	d01d      	beq.n	8010568 <HAL_TIM_PWM_Start+0x1bc>
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	4a27      	ldr	r2, [pc, #156]	; (80105d0 <HAL_TIM_PWM_Start+0x224>)
 8010532:	4293      	cmp	r3, r2
 8010534:	d018      	beq.n	8010568 <HAL_TIM_PWM_Start+0x1bc>
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	4a1f      	ldr	r2, [pc, #124]	; (80105b8 <HAL_TIM_PWM_Start+0x20c>)
 801053c:	4293      	cmp	r3, r2
 801053e:	d013      	beq.n	8010568 <HAL_TIM_PWM_Start+0x1bc>
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	4a23      	ldr	r2, [pc, #140]	; (80105d4 <HAL_TIM_PWM_Start+0x228>)
 8010546:	4293      	cmp	r3, r2
 8010548:	d00e      	beq.n	8010568 <HAL_TIM_PWM_Start+0x1bc>
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	4a1b      	ldr	r2, [pc, #108]	; (80105bc <HAL_TIM_PWM_Start+0x210>)
 8010550:	4293      	cmp	r3, r2
 8010552:	d009      	beq.n	8010568 <HAL_TIM_PWM_Start+0x1bc>
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	4a1f      	ldr	r2, [pc, #124]	; (80105d8 <HAL_TIM_PWM_Start+0x22c>)
 801055a:	4293      	cmp	r3, r2
 801055c:	d004      	beq.n	8010568 <HAL_TIM_PWM_Start+0x1bc>
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	4a1e      	ldr	r2, [pc, #120]	; (80105dc <HAL_TIM_PWM_Start+0x230>)
 8010564:	4293      	cmp	r3, r2
 8010566:	d115      	bne.n	8010594 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	689a      	ldr	r2, [r3, #8]
 801056e:	4b1c      	ldr	r3, [pc, #112]	; (80105e0 <HAL_TIM_PWM_Start+0x234>)
 8010570:	4013      	ands	r3, r2
 8010572:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	2b06      	cmp	r3, #6
 8010578:	d015      	beq.n	80105a6 <HAL_TIM_PWM_Start+0x1fa>
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010580:	d011      	beq.n	80105a6 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	681a      	ldr	r2, [r3, #0]
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	f042 0201 	orr.w	r2, r2, #1
 8010590:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010592:	e008      	b.n	80105a6 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	681a      	ldr	r2, [r3, #0]
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	f042 0201 	orr.w	r2, r2, #1
 80105a2:	601a      	str	r2, [r3, #0]
 80105a4:	e000      	b.n	80105a8 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80105a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80105a8:	2300      	movs	r3, #0
}
 80105aa:	4618      	mov	r0, r3
 80105ac:	3710      	adds	r7, #16
 80105ae:	46bd      	mov	sp, r7
 80105b0:	bd80      	pop	{r7, pc}
 80105b2:	bf00      	nop
 80105b4:	40010000 	.word	0x40010000
 80105b8:	40010400 	.word	0x40010400
 80105bc:	40014000 	.word	0x40014000
 80105c0:	40014400 	.word	0x40014400
 80105c4:	40014800 	.word	0x40014800
 80105c8:	40000400 	.word	0x40000400
 80105cc:	40000800 	.word	0x40000800
 80105d0:	40000c00 	.word	0x40000c00
 80105d4:	40001800 	.word	0x40001800
 80105d8:	4000e000 	.word	0x4000e000
 80105dc:	4000e400 	.word	0x4000e400
 80105e0:	00010007 	.word	0x00010007

080105e4 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80105e4:	b580      	push	{r7, lr}
 80105e6:	b086      	sub	sp, #24
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	60f8      	str	r0, [r7, #12]
 80105ec:	60b9      	str	r1, [r7, #8]
 80105ee:	607a      	str	r2, [r7, #4]
 80105f0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80105f2:	2300      	movs	r3, #0
 80105f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80105f6:	68bb      	ldr	r3, [r7, #8]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d109      	bne.n	8010610 <HAL_TIM_PWM_Start_DMA+0x2c>
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010602:	b2db      	uxtb	r3, r3
 8010604:	2b02      	cmp	r3, #2
 8010606:	bf0c      	ite	eq
 8010608:	2301      	moveq	r3, #1
 801060a:	2300      	movne	r3, #0
 801060c:	b2db      	uxtb	r3, r3
 801060e:	e03c      	b.n	801068a <HAL_TIM_PWM_Start_DMA+0xa6>
 8010610:	68bb      	ldr	r3, [r7, #8]
 8010612:	2b04      	cmp	r3, #4
 8010614:	d109      	bne.n	801062a <HAL_TIM_PWM_Start_DMA+0x46>
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801061c:	b2db      	uxtb	r3, r3
 801061e:	2b02      	cmp	r3, #2
 8010620:	bf0c      	ite	eq
 8010622:	2301      	moveq	r3, #1
 8010624:	2300      	movne	r3, #0
 8010626:	b2db      	uxtb	r3, r3
 8010628:	e02f      	b.n	801068a <HAL_TIM_PWM_Start_DMA+0xa6>
 801062a:	68bb      	ldr	r3, [r7, #8]
 801062c:	2b08      	cmp	r3, #8
 801062e:	d109      	bne.n	8010644 <HAL_TIM_PWM_Start_DMA+0x60>
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010636:	b2db      	uxtb	r3, r3
 8010638:	2b02      	cmp	r3, #2
 801063a:	bf0c      	ite	eq
 801063c:	2301      	moveq	r3, #1
 801063e:	2300      	movne	r3, #0
 8010640:	b2db      	uxtb	r3, r3
 8010642:	e022      	b.n	801068a <HAL_TIM_PWM_Start_DMA+0xa6>
 8010644:	68bb      	ldr	r3, [r7, #8]
 8010646:	2b0c      	cmp	r3, #12
 8010648:	d109      	bne.n	801065e <HAL_TIM_PWM_Start_DMA+0x7a>
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010650:	b2db      	uxtb	r3, r3
 8010652:	2b02      	cmp	r3, #2
 8010654:	bf0c      	ite	eq
 8010656:	2301      	moveq	r3, #1
 8010658:	2300      	movne	r3, #0
 801065a:	b2db      	uxtb	r3, r3
 801065c:	e015      	b.n	801068a <HAL_TIM_PWM_Start_DMA+0xa6>
 801065e:	68bb      	ldr	r3, [r7, #8]
 8010660:	2b10      	cmp	r3, #16
 8010662:	d109      	bne.n	8010678 <HAL_TIM_PWM_Start_DMA+0x94>
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801066a:	b2db      	uxtb	r3, r3
 801066c:	2b02      	cmp	r3, #2
 801066e:	bf0c      	ite	eq
 8010670:	2301      	moveq	r3, #1
 8010672:	2300      	movne	r3, #0
 8010674:	b2db      	uxtb	r3, r3
 8010676:	e008      	b.n	801068a <HAL_TIM_PWM_Start_DMA+0xa6>
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801067e:	b2db      	uxtb	r3, r3
 8010680:	2b02      	cmp	r3, #2
 8010682:	bf0c      	ite	eq
 8010684:	2301      	moveq	r3, #1
 8010686:	2300      	movne	r3, #0
 8010688:	b2db      	uxtb	r3, r3
 801068a:	2b00      	cmp	r3, #0
 801068c:	d001      	beq.n	8010692 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 801068e:	2302      	movs	r3, #2
 8010690:	e1ba      	b.n	8010a08 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8010692:	68bb      	ldr	r3, [r7, #8]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d109      	bne.n	80106ac <HAL_TIM_PWM_Start_DMA+0xc8>
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801069e:	b2db      	uxtb	r3, r3
 80106a0:	2b01      	cmp	r3, #1
 80106a2:	bf0c      	ite	eq
 80106a4:	2301      	moveq	r3, #1
 80106a6:	2300      	movne	r3, #0
 80106a8:	b2db      	uxtb	r3, r3
 80106aa:	e03c      	b.n	8010726 <HAL_TIM_PWM_Start_DMA+0x142>
 80106ac:	68bb      	ldr	r3, [r7, #8]
 80106ae:	2b04      	cmp	r3, #4
 80106b0:	d109      	bne.n	80106c6 <HAL_TIM_PWM_Start_DMA+0xe2>
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80106b8:	b2db      	uxtb	r3, r3
 80106ba:	2b01      	cmp	r3, #1
 80106bc:	bf0c      	ite	eq
 80106be:	2301      	moveq	r3, #1
 80106c0:	2300      	movne	r3, #0
 80106c2:	b2db      	uxtb	r3, r3
 80106c4:	e02f      	b.n	8010726 <HAL_TIM_PWM_Start_DMA+0x142>
 80106c6:	68bb      	ldr	r3, [r7, #8]
 80106c8:	2b08      	cmp	r3, #8
 80106ca:	d109      	bne.n	80106e0 <HAL_TIM_PWM_Start_DMA+0xfc>
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80106d2:	b2db      	uxtb	r3, r3
 80106d4:	2b01      	cmp	r3, #1
 80106d6:	bf0c      	ite	eq
 80106d8:	2301      	moveq	r3, #1
 80106da:	2300      	movne	r3, #0
 80106dc:	b2db      	uxtb	r3, r3
 80106de:	e022      	b.n	8010726 <HAL_TIM_PWM_Start_DMA+0x142>
 80106e0:	68bb      	ldr	r3, [r7, #8]
 80106e2:	2b0c      	cmp	r3, #12
 80106e4:	d109      	bne.n	80106fa <HAL_TIM_PWM_Start_DMA+0x116>
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80106ec:	b2db      	uxtb	r3, r3
 80106ee:	2b01      	cmp	r3, #1
 80106f0:	bf0c      	ite	eq
 80106f2:	2301      	moveq	r3, #1
 80106f4:	2300      	movne	r3, #0
 80106f6:	b2db      	uxtb	r3, r3
 80106f8:	e015      	b.n	8010726 <HAL_TIM_PWM_Start_DMA+0x142>
 80106fa:	68bb      	ldr	r3, [r7, #8]
 80106fc:	2b10      	cmp	r3, #16
 80106fe:	d109      	bne.n	8010714 <HAL_TIM_PWM_Start_DMA+0x130>
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010706:	b2db      	uxtb	r3, r3
 8010708:	2b01      	cmp	r3, #1
 801070a:	bf0c      	ite	eq
 801070c:	2301      	moveq	r3, #1
 801070e:	2300      	movne	r3, #0
 8010710:	b2db      	uxtb	r3, r3
 8010712:	e008      	b.n	8010726 <HAL_TIM_PWM_Start_DMA+0x142>
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801071a:	b2db      	uxtb	r3, r3
 801071c:	2b01      	cmp	r3, #1
 801071e:	bf0c      	ite	eq
 8010720:	2301      	moveq	r3, #1
 8010722:	2300      	movne	r3, #0
 8010724:	b2db      	uxtb	r3, r3
 8010726:	2b00      	cmp	r3, #0
 8010728:	d034      	beq.n	8010794 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d002      	beq.n	8010736 <HAL_TIM_PWM_Start_DMA+0x152>
 8010730:	887b      	ldrh	r3, [r7, #2]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d101      	bne.n	801073a <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8010736:	2301      	movs	r3, #1
 8010738:	e166      	b.n	8010a08 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801073a:	68bb      	ldr	r3, [r7, #8]
 801073c:	2b00      	cmp	r3, #0
 801073e:	d104      	bne.n	801074a <HAL_TIM_PWM_Start_DMA+0x166>
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	2202      	movs	r2, #2
 8010744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010748:	e026      	b.n	8010798 <HAL_TIM_PWM_Start_DMA+0x1b4>
 801074a:	68bb      	ldr	r3, [r7, #8]
 801074c:	2b04      	cmp	r3, #4
 801074e:	d104      	bne.n	801075a <HAL_TIM_PWM_Start_DMA+0x176>
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	2202      	movs	r2, #2
 8010754:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010758:	e01e      	b.n	8010798 <HAL_TIM_PWM_Start_DMA+0x1b4>
 801075a:	68bb      	ldr	r3, [r7, #8]
 801075c:	2b08      	cmp	r3, #8
 801075e:	d104      	bne.n	801076a <HAL_TIM_PWM_Start_DMA+0x186>
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	2202      	movs	r2, #2
 8010764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010768:	e016      	b.n	8010798 <HAL_TIM_PWM_Start_DMA+0x1b4>
 801076a:	68bb      	ldr	r3, [r7, #8]
 801076c:	2b0c      	cmp	r3, #12
 801076e:	d104      	bne.n	801077a <HAL_TIM_PWM_Start_DMA+0x196>
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	2202      	movs	r2, #2
 8010774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010778:	e00e      	b.n	8010798 <HAL_TIM_PWM_Start_DMA+0x1b4>
 801077a:	68bb      	ldr	r3, [r7, #8]
 801077c:	2b10      	cmp	r3, #16
 801077e:	d104      	bne.n	801078a <HAL_TIM_PWM_Start_DMA+0x1a6>
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	2202      	movs	r2, #2
 8010784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010788:	e006      	b.n	8010798 <HAL_TIM_PWM_Start_DMA+0x1b4>
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	2202      	movs	r2, #2
 801078e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010792:	e001      	b.n	8010798 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8010794:	2301      	movs	r3, #1
 8010796:	e137      	b.n	8010a08 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 8010798:	68bb      	ldr	r3, [r7, #8]
 801079a:	2b0c      	cmp	r3, #12
 801079c:	f200 80ae 	bhi.w	80108fc <HAL_TIM_PWM_Start_DMA+0x318>
 80107a0:	a201      	add	r2, pc, #4	; (adr r2, 80107a8 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80107a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107a6:	bf00      	nop
 80107a8:	080107dd 	.word	0x080107dd
 80107ac:	080108fd 	.word	0x080108fd
 80107b0:	080108fd 	.word	0x080108fd
 80107b4:	080108fd 	.word	0x080108fd
 80107b8:	08010825 	.word	0x08010825
 80107bc:	080108fd 	.word	0x080108fd
 80107c0:	080108fd 	.word	0x080108fd
 80107c4:	080108fd 	.word	0x080108fd
 80107c8:	0801086d 	.word	0x0801086d
 80107cc:	080108fd 	.word	0x080108fd
 80107d0:	080108fd 	.word	0x080108fd
 80107d4:	080108fd 	.word	0x080108fd
 80107d8:	080108b5 	.word	0x080108b5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107e0:	4a8b      	ldr	r2, [pc, #556]	; (8010a10 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80107e2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107e8:	4a8a      	ldr	r2, [pc, #552]	; (8010a14 <HAL_TIM_PWM_Start_DMA+0x430>)
 80107ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107f0:	4a89      	ldr	r2, [pc, #548]	; (8010a18 <HAL_TIM_PWM_Start_DMA+0x434>)
 80107f2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80107f8:	6879      	ldr	r1, [r7, #4]
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	3334      	adds	r3, #52	; 0x34
 8010800:	461a      	mov	r2, r3
 8010802:	887b      	ldrh	r3, [r7, #2]
 8010804:	f7f6 f872 	bl	80068ec <HAL_DMA_Start_IT>
 8010808:	4603      	mov	r3, r0
 801080a:	2b00      	cmp	r3, #0
 801080c:	d001      	beq.n	8010812 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 801080e:	2301      	movs	r3, #1
 8010810:	e0fa      	b.n	8010a08 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	68da      	ldr	r2, [r3, #12]
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010820:	60da      	str	r2, [r3, #12]
      break;
 8010822:	e06e      	b.n	8010902 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010828:	4a79      	ldr	r2, [pc, #484]	; (8010a10 <HAL_TIM_PWM_Start_DMA+0x42c>)
 801082a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010830:	4a78      	ldr	r2, [pc, #480]	; (8010a14 <HAL_TIM_PWM_Start_DMA+0x430>)
 8010832:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010838:	4a77      	ldr	r2, [pc, #476]	; (8010a18 <HAL_TIM_PWM_Start_DMA+0x434>)
 801083a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8010840:	6879      	ldr	r1, [r7, #4]
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	3338      	adds	r3, #56	; 0x38
 8010848:	461a      	mov	r2, r3
 801084a:	887b      	ldrh	r3, [r7, #2]
 801084c:	f7f6 f84e 	bl	80068ec <HAL_DMA_Start_IT>
 8010850:	4603      	mov	r3, r0
 8010852:	2b00      	cmp	r3, #0
 8010854:	d001      	beq.n	801085a <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8010856:	2301      	movs	r3, #1
 8010858:	e0d6      	b.n	8010a08 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	68da      	ldr	r2, [r3, #12]
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010868:	60da      	str	r2, [r3, #12]
      break;
 801086a:	e04a      	b.n	8010902 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010870:	4a67      	ldr	r2, [pc, #412]	; (8010a10 <HAL_TIM_PWM_Start_DMA+0x42c>)
 8010872:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010878:	4a66      	ldr	r2, [pc, #408]	; (8010a14 <HAL_TIM_PWM_Start_DMA+0x430>)
 801087a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010880:	4a65      	ldr	r2, [pc, #404]	; (8010a18 <HAL_TIM_PWM_Start_DMA+0x434>)
 8010882:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8010888:	6879      	ldr	r1, [r7, #4]
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	333c      	adds	r3, #60	; 0x3c
 8010890:	461a      	mov	r2, r3
 8010892:	887b      	ldrh	r3, [r7, #2]
 8010894:	f7f6 f82a 	bl	80068ec <HAL_DMA_Start_IT>
 8010898:	4603      	mov	r3, r0
 801089a:	2b00      	cmp	r3, #0
 801089c:	d001      	beq.n	80108a2 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 801089e:	2301      	movs	r3, #1
 80108a0:	e0b2      	b.n	8010a08 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	68da      	ldr	r2, [r3, #12]
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80108b0:	60da      	str	r2, [r3, #12]
      break;
 80108b2:	e026      	b.n	8010902 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108b8:	4a55      	ldr	r2, [pc, #340]	; (8010a10 <HAL_TIM_PWM_Start_DMA+0x42c>)
 80108ba:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108c0:	4a54      	ldr	r2, [pc, #336]	; (8010a14 <HAL_TIM_PWM_Start_DMA+0x430>)
 80108c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108c8:	4a53      	ldr	r2, [pc, #332]	; (8010a18 <HAL_TIM_PWM_Start_DMA+0x434>)
 80108ca:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80108d0:	6879      	ldr	r1, [r7, #4]
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	3340      	adds	r3, #64	; 0x40
 80108d8:	461a      	mov	r2, r3
 80108da:	887b      	ldrh	r3, [r7, #2]
 80108dc:	f7f6 f806 	bl	80068ec <HAL_DMA_Start_IT>
 80108e0:	4603      	mov	r3, r0
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d001      	beq.n	80108ea <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80108e6:	2301      	movs	r3, #1
 80108e8:	e08e      	b.n	8010a08 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	68da      	ldr	r2, [r3, #12]
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80108f8:	60da      	str	r2, [r3, #12]
      break;
 80108fa:	e002      	b.n	8010902 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80108fc:	2301      	movs	r3, #1
 80108fe:	75fb      	strb	r3, [r7, #23]
      break;
 8010900:	bf00      	nop
  }

  if (status == HAL_OK)
 8010902:	7dfb      	ldrb	r3, [r7, #23]
 8010904:	2b00      	cmp	r3, #0
 8010906:	d17e      	bne.n	8010a06 <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	2201      	movs	r2, #1
 801090e:	68b9      	ldr	r1, [r7, #8]
 8010910:	4618      	mov	r0, r3
 8010912:	f000 ff63 	bl	80117dc <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	4a40      	ldr	r2, [pc, #256]	; (8010a1c <HAL_TIM_PWM_Start_DMA+0x438>)
 801091c:	4293      	cmp	r3, r2
 801091e:	d013      	beq.n	8010948 <HAL_TIM_PWM_Start_DMA+0x364>
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	4a3e      	ldr	r2, [pc, #248]	; (8010a20 <HAL_TIM_PWM_Start_DMA+0x43c>)
 8010926:	4293      	cmp	r3, r2
 8010928:	d00e      	beq.n	8010948 <HAL_TIM_PWM_Start_DMA+0x364>
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	4a3d      	ldr	r2, [pc, #244]	; (8010a24 <HAL_TIM_PWM_Start_DMA+0x440>)
 8010930:	4293      	cmp	r3, r2
 8010932:	d009      	beq.n	8010948 <HAL_TIM_PWM_Start_DMA+0x364>
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	4a3b      	ldr	r2, [pc, #236]	; (8010a28 <HAL_TIM_PWM_Start_DMA+0x444>)
 801093a:	4293      	cmp	r3, r2
 801093c:	d004      	beq.n	8010948 <HAL_TIM_PWM_Start_DMA+0x364>
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	4a3a      	ldr	r2, [pc, #232]	; (8010a2c <HAL_TIM_PWM_Start_DMA+0x448>)
 8010944:	4293      	cmp	r3, r2
 8010946:	d101      	bne.n	801094c <HAL_TIM_PWM_Start_DMA+0x368>
 8010948:	2301      	movs	r3, #1
 801094a:	e000      	b.n	801094e <HAL_TIM_PWM_Start_DMA+0x36a>
 801094c:	2300      	movs	r3, #0
 801094e:	2b00      	cmp	r3, #0
 8010950:	d007      	beq.n	8010962 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010960:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	4a2d      	ldr	r2, [pc, #180]	; (8010a1c <HAL_TIM_PWM_Start_DMA+0x438>)
 8010968:	4293      	cmp	r3, r2
 801096a:	d02c      	beq.n	80109c6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010974:	d027      	beq.n	80109c6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	4a2d      	ldr	r2, [pc, #180]	; (8010a30 <HAL_TIM_PWM_Start_DMA+0x44c>)
 801097c:	4293      	cmp	r3, r2
 801097e:	d022      	beq.n	80109c6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	4a2b      	ldr	r2, [pc, #172]	; (8010a34 <HAL_TIM_PWM_Start_DMA+0x450>)
 8010986:	4293      	cmp	r3, r2
 8010988:	d01d      	beq.n	80109c6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	4a2a      	ldr	r2, [pc, #168]	; (8010a38 <HAL_TIM_PWM_Start_DMA+0x454>)
 8010990:	4293      	cmp	r3, r2
 8010992:	d018      	beq.n	80109c6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	4a21      	ldr	r2, [pc, #132]	; (8010a20 <HAL_TIM_PWM_Start_DMA+0x43c>)
 801099a:	4293      	cmp	r3, r2
 801099c:	d013      	beq.n	80109c6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	4a26      	ldr	r2, [pc, #152]	; (8010a3c <HAL_TIM_PWM_Start_DMA+0x458>)
 80109a4:	4293      	cmp	r3, r2
 80109a6:	d00e      	beq.n	80109c6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	4a1d      	ldr	r2, [pc, #116]	; (8010a24 <HAL_TIM_PWM_Start_DMA+0x440>)
 80109ae:	4293      	cmp	r3, r2
 80109b0:	d009      	beq.n	80109c6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	4a22      	ldr	r2, [pc, #136]	; (8010a40 <HAL_TIM_PWM_Start_DMA+0x45c>)
 80109b8:	4293      	cmp	r3, r2
 80109ba:	d004      	beq.n	80109c6 <HAL_TIM_PWM_Start_DMA+0x3e2>
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	4a20      	ldr	r2, [pc, #128]	; (8010a44 <HAL_TIM_PWM_Start_DMA+0x460>)
 80109c2:	4293      	cmp	r3, r2
 80109c4:	d115      	bne.n	80109f2 <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	689a      	ldr	r2, [r3, #8]
 80109cc:	4b1e      	ldr	r3, [pc, #120]	; (8010a48 <HAL_TIM_PWM_Start_DMA+0x464>)
 80109ce:	4013      	ands	r3, r2
 80109d0:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80109d2:	693b      	ldr	r3, [r7, #16]
 80109d4:	2b06      	cmp	r3, #6
 80109d6:	d015      	beq.n	8010a04 <HAL_TIM_PWM_Start_DMA+0x420>
 80109d8:	693b      	ldr	r3, [r7, #16]
 80109da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80109de:	d011      	beq.n	8010a04 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	681a      	ldr	r2, [r3, #0]
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	f042 0201 	orr.w	r2, r2, #1
 80109ee:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80109f0:	e008      	b.n	8010a04 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	681a      	ldr	r2, [r3, #0]
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	f042 0201 	orr.w	r2, r2, #1
 8010a00:	601a      	str	r2, [r3, #0]
 8010a02:	e000      	b.n	8010a06 <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010a04:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8010a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a08:	4618      	mov	r0, r3
 8010a0a:	3718      	adds	r7, #24
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	bd80      	pop	{r7, pc}
 8010a10:	08010fd3 	.word	0x08010fd3
 8010a14:	0801107b 	.word	0x0801107b
 8010a18:	08010f41 	.word	0x08010f41
 8010a1c:	40010000 	.word	0x40010000
 8010a20:	40010400 	.word	0x40010400
 8010a24:	40014000 	.word	0x40014000
 8010a28:	40014400 	.word	0x40014400
 8010a2c:	40014800 	.word	0x40014800
 8010a30:	40000400 	.word	0x40000400
 8010a34:	40000800 	.word	0x40000800
 8010a38:	40000c00 	.word	0x40000c00
 8010a3c:	40001800 	.word	0x40001800
 8010a40:	4000e000 	.word	0x4000e000
 8010a44:	4000e400 	.word	0x4000e400
 8010a48:	00010007 	.word	0x00010007

08010a4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010a4c:	b580      	push	{r7, lr}
 8010a4e:	b082      	sub	sp, #8
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	691b      	ldr	r3, [r3, #16]
 8010a5a:	f003 0302 	and.w	r3, r3, #2
 8010a5e:	2b02      	cmp	r3, #2
 8010a60:	d122      	bne.n	8010aa8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	68db      	ldr	r3, [r3, #12]
 8010a68:	f003 0302 	and.w	r3, r3, #2
 8010a6c:	2b02      	cmp	r3, #2
 8010a6e:	d11b      	bne.n	8010aa8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	f06f 0202 	mvn.w	r2, #2
 8010a78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	2201      	movs	r2, #1
 8010a7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	699b      	ldr	r3, [r3, #24]
 8010a86:	f003 0303 	and.w	r3, r3, #3
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d003      	beq.n	8010a96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010a8e:	6878      	ldr	r0, [r7, #4]
 8010a90:	f000 fa24 	bl	8010edc <HAL_TIM_IC_CaptureCallback>
 8010a94:	e005      	b.n	8010aa2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010a96:	6878      	ldr	r0, [r7, #4]
 8010a98:	f000 fa16 	bl	8010ec8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010a9c:	6878      	ldr	r0, [r7, #4]
 8010a9e:	f000 fa27 	bl	8010ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	2200      	movs	r2, #0
 8010aa6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	691b      	ldr	r3, [r3, #16]
 8010aae:	f003 0304 	and.w	r3, r3, #4
 8010ab2:	2b04      	cmp	r3, #4
 8010ab4:	d122      	bne.n	8010afc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	68db      	ldr	r3, [r3, #12]
 8010abc:	f003 0304 	and.w	r3, r3, #4
 8010ac0:	2b04      	cmp	r3, #4
 8010ac2:	d11b      	bne.n	8010afc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	f06f 0204 	mvn.w	r2, #4
 8010acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	2202      	movs	r2, #2
 8010ad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	699b      	ldr	r3, [r3, #24]
 8010ada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d003      	beq.n	8010aea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010ae2:	6878      	ldr	r0, [r7, #4]
 8010ae4:	f000 f9fa 	bl	8010edc <HAL_TIM_IC_CaptureCallback>
 8010ae8:	e005      	b.n	8010af6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010aea:	6878      	ldr	r0, [r7, #4]
 8010aec:	f000 f9ec 	bl	8010ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010af0:	6878      	ldr	r0, [r7, #4]
 8010af2:	f000 f9fd 	bl	8010ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	2200      	movs	r2, #0
 8010afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	691b      	ldr	r3, [r3, #16]
 8010b02:	f003 0308 	and.w	r3, r3, #8
 8010b06:	2b08      	cmp	r3, #8
 8010b08:	d122      	bne.n	8010b50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	68db      	ldr	r3, [r3, #12]
 8010b10:	f003 0308 	and.w	r3, r3, #8
 8010b14:	2b08      	cmp	r3, #8
 8010b16:	d11b      	bne.n	8010b50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	f06f 0208 	mvn.w	r2, #8
 8010b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	2204      	movs	r2, #4
 8010b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	69db      	ldr	r3, [r3, #28]
 8010b2e:	f003 0303 	and.w	r3, r3, #3
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d003      	beq.n	8010b3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010b36:	6878      	ldr	r0, [r7, #4]
 8010b38:	f000 f9d0 	bl	8010edc <HAL_TIM_IC_CaptureCallback>
 8010b3c:	e005      	b.n	8010b4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010b3e:	6878      	ldr	r0, [r7, #4]
 8010b40:	f000 f9c2 	bl	8010ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010b44:	6878      	ldr	r0, [r7, #4]
 8010b46:	f000 f9d3 	bl	8010ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	2200      	movs	r2, #0
 8010b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	691b      	ldr	r3, [r3, #16]
 8010b56:	f003 0310 	and.w	r3, r3, #16
 8010b5a:	2b10      	cmp	r3, #16
 8010b5c:	d122      	bne.n	8010ba4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	68db      	ldr	r3, [r3, #12]
 8010b64:	f003 0310 	and.w	r3, r3, #16
 8010b68:	2b10      	cmp	r3, #16
 8010b6a:	d11b      	bne.n	8010ba4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	f06f 0210 	mvn.w	r2, #16
 8010b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	2208      	movs	r2, #8
 8010b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	69db      	ldr	r3, [r3, #28]
 8010b82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d003      	beq.n	8010b92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010b8a:	6878      	ldr	r0, [r7, #4]
 8010b8c:	f000 f9a6 	bl	8010edc <HAL_TIM_IC_CaptureCallback>
 8010b90:	e005      	b.n	8010b9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010b92:	6878      	ldr	r0, [r7, #4]
 8010b94:	f000 f998 	bl	8010ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010b98:	6878      	ldr	r0, [r7, #4]
 8010b9a:	f000 f9a9 	bl	8010ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	2200      	movs	r2, #0
 8010ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	691b      	ldr	r3, [r3, #16]
 8010baa:	f003 0301 	and.w	r3, r3, #1
 8010bae:	2b01      	cmp	r3, #1
 8010bb0:	d10e      	bne.n	8010bd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	68db      	ldr	r3, [r3, #12]
 8010bb8:	f003 0301 	and.w	r3, r3, #1
 8010bbc:	2b01      	cmp	r3, #1
 8010bbe:	d107      	bne.n	8010bd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	f06f 0201 	mvn.w	r2, #1
 8010bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010bca:	6878      	ldr	r0, [r7, #4]
 8010bcc:	f000 f972 	bl	8010eb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	691b      	ldr	r3, [r3, #16]
 8010bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010bda:	2b80      	cmp	r3, #128	; 0x80
 8010bdc:	d10e      	bne.n	8010bfc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	68db      	ldr	r3, [r3, #12]
 8010be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010be8:	2b80      	cmp	r3, #128	; 0x80
 8010bea:	d107      	bne.n	8010bfc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010bf6:	6878      	ldr	r0, [r7, #4]
 8010bf8:	f000 febc 	bl	8011974 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	691b      	ldr	r3, [r3, #16]
 8010c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010c06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010c0a:	d10e      	bne.n	8010c2a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	68db      	ldr	r3, [r3, #12]
 8010c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c16:	2b80      	cmp	r3, #128	; 0x80
 8010c18:	d107      	bne.n	8010c2a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8010c22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010c24:	6878      	ldr	r0, [r7, #4]
 8010c26:	f000 feaf 	bl	8011988 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	691b      	ldr	r3, [r3, #16]
 8010c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c34:	2b40      	cmp	r3, #64	; 0x40
 8010c36:	d10e      	bne.n	8010c56 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	68db      	ldr	r3, [r3, #12]
 8010c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010c42:	2b40      	cmp	r3, #64	; 0x40
 8010c44:	d107      	bne.n	8010c56 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010c4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010c50:	6878      	ldr	r0, [r7, #4]
 8010c52:	f000 f961 	bl	8010f18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	691b      	ldr	r3, [r3, #16]
 8010c5c:	f003 0320 	and.w	r3, r3, #32
 8010c60:	2b20      	cmp	r3, #32
 8010c62:	d10e      	bne.n	8010c82 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	68db      	ldr	r3, [r3, #12]
 8010c6a:	f003 0320 	and.w	r3, r3, #32
 8010c6e:	2b20      	cmp	r3, #32
 8010c70:	d107      	bne.n	8010c82 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	f06f 0220 	mvn.w	r2, #32
 8010c7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010c7c:	6878      	ldr	r0, [r7, #4]
 8010c7e:	f000 fe6f 	bl	8011960 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010c82:	bf00      	nop
 8010c84:	3708      	adds	r7, #8
 8010c86:	46bd      	mov	sp, r7
 8010c88:	bd80      	pop	{r7, pc}
	...

08010c8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b086      	sub	sp, #24
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	60f8      	str	r0, [r7, #12]
 8010c94:	60b9      	str	r1, [r7, #8]
 8010c96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010c98:	2300      	movs	r3, #0
 8010c9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010ca2:	2b01      	cmp	r3, #1
 8010ca4:	d101      	bne.n	8010caa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8010ca6:	2302      	movs	r3, #2
 8010ca8:	e0ff      	b.n	8010eaa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	2201      	movs	r2, #1
 8010cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	2b14      	cmp	r3, #20
 8010cb6:	f200 80f0 	bhi.w	8010e9a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8010cba:	a201      	add	r2, pc, #4	; (adr r2, 8010cc0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8010cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cc0:	08010d15 	.word	0x08010d15
 8010cc4:	08010e9b 	.word	0x08010e9b
 8010cc8:	08010e9b 	.word	0x08010e9b
 8010ccc:	08010e9b 	.word	0x08010e9b
 8010cd0:	08010d55 	.word	0x08010d55
 8010cd4:	08010e9b 	.word	0x08010e9b
 8010cd8:	08010e9b 	.word	0x08010e9b
 8010cdc:	08010e9b 	.word	0x08010e9b
 8010ce0:	08010d97 	.word	0x08010d97
 8010ce4:	08010e9b 	.word	0x08010e9b
 8010ce8:	08010e9b 	.word	0x08010e9b
 8010cec:	08010e9b 	.word	0x08010e9b
 8010cf0:	08010dd7 	.word	0x08010dd7
 8010cf4:	08010e9b 	.word	0x08010e9b
 8010cf8:	08010e9b 	.word	0x08010e9b
 8010cfc:	08010e9b 	.word	0x08010e9b
 8010d00:	08010e19 	.word	0x08010e19
 8010d04:	08010e9b 	.word	0x08010e9b
 8010d08:	08010e9b 	.word	0x08010e9b
 8010d0c:	08010e9b 	.word	0x08010e9b
 8010d10:	08010e59 	.word	0x08010e59
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	68b9      	ldr	r1, [r7, #8]
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	f000 fa88 	bl	8011230 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	699a      	ldr	r2, [r3, #24]
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	f042 0208 	orr.w	r2, r2, #8
 8010d2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	681b      	ldr	r3, [r3, #0]
 8010d34:	699a      	ldr	r2, [r3, #24]
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	f022 0204 	bic.w	r2, r2, #4
 8010d3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	6999      	ldr	r1, [r3, #24]
 8010d46:	68bb      	ldr	r3, [r7, #8]
 8010d48:	691a      	ldr	r2, [r3, #16]
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	430a      	orrs	r2, r1
 8010d50:	619a      	str	r2, [r3, #24]
      break;
 8010d52:	e0a5      	b.n	8010ea0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	68b9      	ldr	r1, [r7, #8]
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	f000 faf8 	bl	8011350 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	699a      	ldr	r2, [r3, #24]
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010d6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	699a      	ldr	r2, [r3, #24]
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010d7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	6999      	ldr	r1, [r3, #24]
 8010d86:	68bb      	ldr	r3, [r7, #8]
 8010d88:	691b      	ldr	r3, [r3, #16]
 8010d8a:	021a      	lsls	r2, r3, #8
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	430a      	orrs	r2, r1
 8010d92:	619a      	str	r2, [r3, #24]
      break;
 8010d94:	e084      	b.n	8010ea0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	68b9      	ldr	r1, [r7, #8]
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	f000 fb61 	bl	8011464 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	69da      	ldr	r2, [r3, #28]
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	f042 0208 	orr.w	r2, r2, #8
 8010db0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	69da      	ldr	r2, [r3, #28]
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	f022 0204 	bic.w	r2, r2, #4
 8010dc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	69d9      	ldr	r1, [r3, #28]
 8010dc8:	68bb      	ldr	r3, [r7, #8]
 8010dca:	691a      	ldr	r2, [r3, #16]
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	430a      	orrs	r2, r1
 8010dd2:	61da      	str	r2, [r3, #28]
      break;
 8010dd4:	e064      	b.n	8010ea0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	68b9      	ldr	r1, [r7, #8]
 8010ddc:	4618      	mov	r0, r3
 8010dde:	f000 fbc9 	bl	8011574 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	69da      	ldr	r2, [r3, #28]
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010df0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	69da      	ldr	r2, [r3, #28]
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010e00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	69d9      	ldr	r1, [r3, #28]
 8010e08:	68bb      	ldr	r3, [r7, #8]
 8010e0a:	691b      	ldr	r3, [r3, #16]
 8010e0c:	021a      	lsls	r2, r3, #8
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	430a      	orrs	r2, r1
 8010e14:	61da      	str	r2, [r3, #28]
      break;
 8010e16:	e043      	b.n	8010ea0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	68b9      	ldr	r1, [r7, #8]
 8010e1e:	4618      	mov	r0, r3
 8010e20:	f000 fc12 	bl	8011648 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	f042 0208 	orr.w	r2, r2, #8
 8010e32:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	f022 0204 	bic.w	r2, r2, #4
 8010e42:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010e4a:	68bb      	ldr	r3, [r7, #8]
 8010e4c:	691a      	ldr	r2, [r3, #16]
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	681b      	ldr	r3, [r3, #0]
 8010e52:	430a      	orrs	r2, r1
 8010e54:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010e56:	e023      	b.n	8010ea0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	68b9      	ldr	r1, [r7, #8]
 8010e5e:	4618      	mov	r0, r3
 8010e60:	f000 fc56 	bl	8011710 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	681b      	ldr	r3, [r3, #0]
 8010e68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010e72:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010e82:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010e8a:	68bb      	ldr	r3, [r7, #8]
 8010e8c:	691b      	ldr	r3, [r3, #16]
 8010e8e:	021a      	lsls	r2, r3, #8
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	430a      	orrs	r2, r1
 8010e96:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010e98:	e002      	b.n	8010ea0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8010e9a:	2301      	movs	r3, #1
 8010e9c:	75fb      	strb	r3, [r7, #23]
      break;
 8010e9e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	2200      	movs	r2, #0
 8010ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010ea8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010eaa:	4618      	mov	r0, r3
 8010eac:	3718      	adds	r7, #24
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	bd80      	pop	{r7, pc}
 8010eb2:	bf00      	nop

08010eb4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010eb4:	b480      	push	{r7}
 8010eb6:	b083      	sub	sp, #12
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8010ebc:	bf00      	nop
 8010ebe:	370c      	adds	r7, #12
 8010ec0:	46bd      	mov	sp, r7
 8010ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec6:	4770      	bx	lr

08010ec8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010ec8:	b480      	push	{r7}
 8010eca:	b083      	sub	sp, #12
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010ed0:	bf00      	nop
 8010ed2:	370c      	adds	r7, #12
 8010ed4:	46bd      	mov	sp, r7
 8010ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eda:	4770      	bx	lr

08010edc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010edc:	b480      	push	{r7}
 8010ede:	b083      	sub	sp, #12
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010ee4:	bf00      	nop
 8010ee6:	370c      	adds	r7, #12
 8010ee8:	46bd      	mov	sp, r7
 8010eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eee:	4770      	bx	lr

08010ef0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010ef0:	b480      	push	{r7}
 8010ef2:	b083      	sub	sp, #12
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010ef8:	bf00      	nop
 8010efa:	370c      	adds	r7, #12
 8010efc:	46bd      	mov	sp, r7
 8010efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f02:	4770      	bx	lr

08010f04 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8010f04:	b480      	push	{r7}
 8010f06:	b083      	sub	sp, #12
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8010f0c:	bf00      	nop
 8010f0e:	370c      	adds	r7, #12
 8010f10:	46bd      	mov	sp, r7
 8010f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f16:	4770      	bx	lr

08010f18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010f18:	b480      	push	{r7}
 8010f1a:	b083      	sub	sp, #12
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010f20:	bf00      	nop
 8010f22:	370c      	adds	r7, #12
 8010f24:	46bd      	mov	sp, r7
 8010f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f2a:	4770      	bx	lr

08010f2c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8010f2c:	b480      	push	{r7}
 8010f2e:	b083      	sub	sp, #12
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8010f34:	bf00      	nop
 8010f36:	370c      	adds	r7, #12
 8010f38:	46bd      	mov	sp, r7
 8010f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f3e:	4770      	bx	lr

08010f40 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8010f40:	b580      	push	{r7, lr}
 8010f42:	b084      	sub	sp, #16
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f4c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f52:	687a      	ldr	r2, [r7, #4]
 8010f54:	429a      	cmp	r2, r3
 8010f56:	d107      	bne.n	8010f68 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	2201      	movs	r2, #1
 8010f5c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	2201      	movs	r2, #1
 8010f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010f66:	e02a      	b.n	8010fbe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f6c:	687a      	ldr	r2, [r7, #4]
 8010f6e:	429a      	cmp	r2, r3
 8010f70:	d107      	bne.n	8010f82 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	2202      	movs	r2, #2
 8010f76:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	2201      	movs	r2, #1
 8010f7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010f80:	e01d      	b.n	8010fbe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f86:	687a      	ldr	r2, [r7, #4]
 8010f88:	429a      	cmp	r2, r3
 8010f8a:	d107      	bne.n	8010f9c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	2204      	movs	r2, #4
 8010f90:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	2201      	movs	r2, #1
 8010f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010f9a:	e010      	b.n	8010fbe <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fa0:	687a      	ldr	r2, [r7, #4]
 8010fa2:	429a      	cmp	r2, r3
 8010fa4:	d107      	bne.n	8010fb6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	2208      	movs	r2, #8
 8010faa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	2201      	movs	r2, #1
 8010fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010fb4:	e003      	b.n	8010fbe <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	2201      	movs	r2, #1
 8010fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8010fbe:	68f8      	ldr	r0, [r7, #12]
 8010fc0:	f7ff ffb4 	bl	8010f2c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	2200      	movs	r2, #0
 8010fc8:	771a      	strb	r2, [r3, #28]
}
 8010fca:	bf00      	nop
 8010fcc:	3710      	adds	r7, #16
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	bd80      	pop	{r7, pc}

08010fd2 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8010fd2:	b580      	push	{r7, lr}
 8010fd4:	b084      	sub	sp, #16
 8010fd6:	af00      	add	r7, sp, #0
 8010fd8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fde:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fe4:	687a      	ldr	r2, [r7, #4]
 8010fe6:	429a      	cmp	r2, r3
 8010fe8:	d10b      	bne.n	8011002 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	2201      	movs	r2, #1
 8010fee:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	69db      	ldr	r3, [r3, #28]
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d136      	bne.n	8011066 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	2201      	movs	r2, #1
 8010ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011000:	e031      	b.n	8011066 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011006:	687a      	ldr	r2, [r7, #4]
 8011008:	429a      	cmp	r2, r3
 801100a:	d10b      	bne.n	8011024 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	2202      	movs	r2, #2
 8011010:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	69db      	ldr	r3, [r3, #28]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d125      	bne.n	8011066 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	2201      	movs	r2, #1
 801101e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011022:	e020      	b.n	8011066 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011028:	687a      	ldr	r2, [r7, #4]
 801102a:	429a      	cmp	r2, r3
 801102c:	d10b      	bne.n	8011046 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	2204      	movs	r2, #4
 8011032:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	69db      	ldr	r3, [r3, #28]
 8011038:	2b00      	cmp	r3, #0
 801103a:	d114      	bne.n	8011066 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	2201      	movs	r2, #1
 8011040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011044:	e00f      	b.n	8011066 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801104a:	687a      	ldr	r2, [r7, #4]
 801104c:	429a      	cmp	r2, r3
 801104e:	d10a      	bne.n	8011066 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	2208      	movs	r2, #8
 8011054:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	69db      	ldr	r3, [r3, #28]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d103      	bne.n	8011066 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	2201      	movs	r2, #1
 8011062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011066:	68f8      	ldr	r0, [r7, #12]
 8011068:	f7ff ff42 	bl	8010ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	2200      	movs	r2, #0
 8011070:	771a      	strb	r2, [r3, #28]
}
 8011072:	bf00      	nop
 8011074:	3710      	adds	r7, #16
 8011076:	46bd      	mov	sp, r7
 8011078:	bd80      	pop	{r7, pc}

0801107a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 801107a:	b580      	push	{r7, lr}
 801107c:	b084      	sub	sp, #16
 801107e:	af00      	add	r7, sp, #0
 8011080:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011086:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801108c:	687a      	ldr	r2, [r7, #4]
 801108e:	429a      	cmp	r2, r3
 8011090:	d103      	bne.n	801109a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	2201      	movs	r2, #1
 8011096:	771a      	strb	r2, [r3, #28]
 8011098:	e019      	b.n	80110ce <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801109e:	687a      	ldr	r2, [r7, #4]
 80110a0:	429a      	cmp	r2, r3
 80110a2:	d103      	bne.n	80110ac <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80110a4:	68fb      	ldr	r3, [r7, #12]
 80110a6:	2202      	movs	r2, #2
 80110a8:	771a      	strb	r2, [r3, #28]
 80110aa:	e010      	b.n	80110ce <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110b0:	687a      	ldr	r2, [r7, #4]
 80110b2:	429a      	cmp	r2, r3
 80110b4:	d103      	bne.n	80110be <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	2204      	movs	r2, #4
 80110ba:	771a      	strb	r2, [r3, #28]
 80110bc:	e007      	b.n	80110ce <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110c2:	687a      	ldr	r2, [r7, #4]
 80110c4:	429a      	cmp	r2, r3
 80110c6:	d102      	bne.n	80110ce <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	2208      	movs	r2, #8
 80110cc:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80110ce:	68f8      	ldr	r0, [r7, #12]
 80110d0:	f7ff ff18 	bl	8010f04 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	2200      	movs	r2, #0
 80110d8:	771a      	strb	r2, [r3, #28]
}
 80110da:	bf00      	nop
 80110dc:	3710      	adds	r7, #16
 80110de:	46bd      	mov	sp, r7
 80110e0:	bd80      	pop	{r7, pc}
	...

080110e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80110e4:	b480      	push	{r7}
 80110e6:	b085      	sub	sp, #20
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	6078      	str	r0, [r7, #4]
 80110ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	4a44      	ldr	r2, [pc, #272]	; (8011208 <TIM_Base_SetConfig+0x124>)
 80110f8:	4293      	cmp	r3, r2
 80110fa:	d013      	beq.n	8011124 <TIM_Base_SetConfig+0x40>
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011102:	d00f      	beq.n	8011124 <TIM_Base_SetConfig+0x40>
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	4a41      	ldr	r2, [pc, #260]	; (801120c <TIM_Base_SetConfig+0x128>)
 8011108:	4293      	cmp	r3, r2
 801110a:	d00b      	beq.n	8011124 <TIM_Base_SetConfig+0x40>
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	4a40      	ldr	r2, [pc, #256]	; (8011210 <TIM_Base_SetConfig+0x12c>)
 8011110:	4293      	cmp	r3, r2
 8011112:	d007      	beq.n	8011124 <TIM_Base_SetConfig+0x40>
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	4a3f      	ldr	r2, [pc, #252]	; (8011214 <TIM_Base_SetConfig+0x130>)
 8011118:	4293      	cmp	r3, r2
 801111a:	d003      	beq.n	8011124 <TIM_Base_SetConfig+0x40>
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	4a3e      	ldr	r2, [pc, #248]	; (8011218 <TIM_Base_SetConfig+0x134>)
 8011120:	4293      	cmp	r3, r2
 8011122:	d108      	bne.n	8011136 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801112a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801112c:	683b      	ldr	r3, [r7, #0]
 801112e:	685b      	ldr	r3, [r3, #4]
 8011130:	68fa      	ldr	r2, [r7, #12]
 8011132:	4313      	orrs	r3, r2
 8011134:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	4a33      	ldr	r2, [pc, #204]	; (8011208 <TIM_Base_SetConfig+0x124>)
 801113a:	4293      	cmp	r3, r2
 801113c:	d027      	beq.n	801118e <TIM_Base_SetConfig+0xaa>
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011144:	d023      	beq.n	801118e <TIM_Base_SetConfig+0xaa>
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	4a30      	ldr	r2, [pc, #192]	; (801120c <TIM_Base_SetConfig+0x128>)
 801114a:	4293      	cmp	r3, r2
 801114c:	d01f      	beq.n	801118e <TIM_Base_SetConfig+0xaa>
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	4a2f      	ldr	r2, [pc, #188]	; (8011210 <TIM_Base_SetConfig+0x12c>)
 8011152:	4293      	cmp	r3, r2
 8011154:	d01b      	beq.n	801118e <TIM_Base_SetConfig+0xaa>
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	4a2e      	ldr	r2, [pc, #184]	; (8011214 <TIM_Base_SetConfig+0x130>)
 801115a:	4293      	cmp	r3, r2
 801115c:	d017      	beq.n	801118e <TIM_Base_SetConfig+0xaa>
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	4a2d      	ldr	r2, [pc, #180]	; (8011218 <TIM_Base_SetConfig+0x134>)
 8011162:	4293      	cmp	r3, r2
 8011164:	d013      	beq.n	801118e <TIM_Base_SetConfig+0xaa>
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	4a2c      	ldr	r2, [pc, #176]	; (801121c <TIM_Base_SetConfig+0x138>)
 801116a:	4293      	cmp	r3, r2
 801116c:	d00f      	beq.n	801118e <TIM_Base_SetConfig+0xaa>
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	4a2b      	ldr	r2, [pc, #172]	; (8011220 <TIM_Base_SetConfig+0x13c>)
 8011172:	4293      	cmp	r3, r2
 8011174:	d00b      	beq.n	801118e <TIM_Base_SetConfig+0xaa>
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	4a2a      	ldr	r2, [pc, #168]	; (8011224 <TIM_Base_SetConfig+0x140>)
 801117a:	4293      	cmp	r3, r2
 801117c:	d007      	beq.n	801118e <TIM_Base_SetConfig+0xaa>
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	4a29      	ldr	r2, [pc, #164]	; (8011228 <TIM_Base_SetConfig+0x144>)
 8011182:	4293      	cmp	r3, r2
 8011184:	d003      	beq.n	801118e <TIM_Base_SetConfig+0xaa>
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	4a28      	ldr	r2, [pc, #160]	; (801122c <TIM_Base_SetConfig+0x148>)
 801118a:	4293      	cmp	r3, r2
 801118c:	d108      	bne.n	80111a0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011194:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011196:	683b      	ldr	r3, [r7, #0]
 8011198:	68db      	ldr	r3, [r3, #12]
 801119a:	68fa      	ldr	r2, [r7, #12]
 801119c:	4313      	orrs	r3, r2
 801119e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80111a6:	683b      	ldr	r3, [r7, #0]
 80111a8:	695b      	ldr	r3, [r3, #20]
 80111aa:	4313      	orrs	r3, r2
 80111ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	68fa      	ldr	r2, [r7, #12]
 80111b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80111b4:	683b      	ldr	r3, [r7, #0]
 80111b6:	689a      	ldr	r2, [r3, #8]
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80111bc:	683b      	ldr	r3, [r7, #0]
 80111be:	681a      	ldr	r2, [r3, #0]
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	4a10      	ldr	r2, [pc, #64]	; (8011208 <TIM_Base_SetConfig+0x124>)
 80111c8:	4293      	cmp	r3, r2
 80111ca:	d00f      	beq.n	80111ec <TIM_Base_SetConfig+0x108>
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	4a12      	ldr	r2, [pc, #72]	; (8011218 <TIM_Base_SetConfig+0x134>)
 80111d0:	4293      	cmp	r3, r2
 80111d2:	d00b      	beq.n	80111ec <TIM_Base_SetConfig+0x108>
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	4a11      	ldr	r2, [pc, #68]	; (801121c <TIM_Base_SetConfig+0x138>)
 80111d8:	4293      	cmp	r3, r2
 80111da:	d007      	beq.n	80111ec <TIM_Base_SetConfig+0x108>
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	4a10      	ldr	r2, [pc, #64]	; (8011220 <TIM_Base_SetConfig+0x13c>)
 80111e0:	4293      	cmp	r3, r2
 80111e2:	d003      	beq.n	80111ec <TIM_Base_SetConfig+0x108>
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	4a0f      	ldr	r2, [pc, #60]	; (8011224 <TIM_Base_SetConfig+0x140>)
 80111e8:	4293      	cmp	r3, r2
 80111ea:	d103      	bne.n	80111f4 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80111ec:	683b      	ldr	r3, [r7, #0]
 80111ee:	691a      	ldr	r2, [r3, #16]
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	2201      	movs	r2, #1
 80111f8:	615a      	str	r2, [r3, #20]
}
 80111fa:	bf00      	nop
 80111fc:	3714      	adds	r7, #20
 80111fe:	46bd      	mov	sp, r7
 8011200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011204:	4770      	bx	lr
 8011206:	bf00      	nop
 8011208:	40010000 	.word	0x40010000
 801120c:	40000400 	.word	0x40000400
 8011210:	40000800 	.word	0x40000800
 8011214:	40000c00 	.word	0x40000c00
 8011218:	40010400 	.word	0x40010400
 801121c:	40014000 	.word	0x40014000
 8011220:	40014400 	.word	0x40014400
 8011224:	40014800 	.word	0x40014800
 8011228:	4000e000 	.word	0x4000e000
 801122c:	4000e400 	.word	0x4000e400

08011230 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011230:	b480      	push	{r7}
 8011232:	b087      	sub	sp, #28
 8011234:	af00      	add	r7, sp, #0
 8011236:	6078      	str	r0, [r7, #4]
 8011238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	6a1b      	ldr	r3, [r3, #32]
 801123e:	f023 0201 	bic.w	r2, r3, #1
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	6a1b      	ldr	r3, [r3, #32]
 801124a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	685b      	ldr	r3, [r3, #4]
 8011250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	699b      	ldr	r3, [r3, #24]
 8011256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8011258:	68fa      	ldr	r2, [r7, #12]
 801125a:	4b37      	ldr	r3, [pc, #220]	; (8011338 <TIM_OC1_SetConfig+0x108>)
 801125c:	4013      	ands	r3, r2
 801125e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	f023 0303 	bic.w	r3, r3, #3
 8011266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011268:	683b      	ldr	r3, [r7, #0]
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	68fa      	ldr	r2, [r7, #12]
 801126e:	4313      	orrs	r3, r2
 8011270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8011272:	697b      	ldr	r3, [r7, #20]
 8011274:	f023 0302 	bic.w	r3, r3, #2
 8011278:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801127a:	683b      	ldr	r3, [r7, #0]
 801127c:	689b      	ldr	r3, [r3, #8]
 801127e:	697a      	ldr	r2, [r7, #20]
 8011280:	4313      	orrs	r3, r2
 8011282:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	4a2d      	ldr	r2, [pc, #180]	; (801133c <TIM_OC1_SetConfig+0x10c>)
 8011288:	4293      	cmp	r3, r2
 801128a:	d00f      	beq.n	80112ac <TIM_OC1_SetConfig+0x7c>
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	4a2c      	ldr	r2, [pc, #176]	; (8011340 <TIM_OC1_SetConfig+0x110>)
 8011290:	4293      	cmp	r3, r2
 8011292:	d00b      	beq.n	80112ac <TIM_OC1_SetConfig+0x7c>
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	4a2b      	ldr	r2, [pc, #172]	; (8011344 <TIM_OC1_SetConfig+0x114>)
 8011298:	4293      	cmp	r3, r2
 801129a:	d007      	beq.n	80112ac <TIM_OC1_SetConfig+0x7c>
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	4a2a      	ldr	r2, [pc, #168]	; (8011348 <TIM_OC1_SetConfig+0x118>)
 80112a0:	4293      	cmp	r3, r2
 80112a2:	d003      	beq.n	80112ac <TIM_OC1_SetConfig+0x7c>
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	4a29      	ldr	r2, [pc, #164]	; (801134c <TIM_OC1_SetConfig+0x11c>)
 80112a8:	4293      	cmp	r3, r2
 80112aa:	d10c      	bne.n	80112c6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80112ac:	697b      	ldr	r3, [r7, #20]
 80112ae:	f023 0308 	bic.w	r3, r3, #8
 80112b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80112b4:	683b      	ldr	r3, [r7, #0]
 80112b6:	68db      	ldr	r3, [r3, #12]
 80112b8:	697a      	ldr	r2, [r7, #20]
 80112ba:	4313      	orrs	r3, r2
 80112bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80112be:	697b      	ldr	r3, [r7, #20]
 80112c0:	f023 0304 	bic.w	r3, r3, #4
 80112c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	4a1c      	ldr	r2, [pc, #112]	; (801133c <TIM_OC1_SetConfig+0x10c>)
 80112ca:	4293      	cmp	r3, r2
 80112cc:	d00f      	beq.n	80112ee <TIM_OC1_SetConfig+0xbe>
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	4a1b      	ldr	r2, [pc, #108]	; (8011340 <TIM_OC1_SetConfig+0x110>)
 80112d2:	4293      	cmp	r3, r2
 80112d4:	d00b      	beq.n	80112ee <TIM_OC1_SetConfig+0xbe>
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	4a1a      	ldr	r2, [pc, #104]	; (8011344 <TIM_OC1_SetConfig+0x114>)
 80112da:	4293      	cmp	r3, r2
 80112dc:	d007      	beq.n	80112ee <TIM_OC1_SetConfig+0xbe>
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	4a19      	ldr	r2, [pc, #100]	; (8011348 <TIM_OC1_SetConfig+0x118>)
 80112e2:	4293      	cmp	r3, r2
 80112e4:	d003      	beq.n	80112ee <TIM_OC1_SetConfig+0xbe>
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	4a18      	ldr	r2, [pc, #96]	; (801134c <TIM_OC1_SetConfig+0x11c>)
 80112ea:	4293      	cmp	r3, r2
 80112ec:	d111      	bne.n	8011312 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80112ee:	693b      	ldr	r3, [r7, #16]
 80112f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80112f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80112f6:	693b      	ldr	r3, [r7, #16]
 80112f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80112fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80112fe:	683b      	ldr	r3, [r7, #0]
 8011300:	695b      	ldr	r3, [r3, #20]
 8011302:	693a      	ldr	r2, [r7, #16]
 8011304:	4313      	orrs	r3, r2
 8011306:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8011308:	683b      	ldr	r3, [r7, #0]
 801130a:	699b      	ldr	r3, [r3, #24]
 801130c:	693a      	ldr	r2, [r7, #16]
 801130e:	4313      	orrs	r3, r2
 8011310:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	693a      	ldr	r2, [r7, #16]
 8011316:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	68fa      	ldr	r2, [r7, #12]
 801131c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801131e:	683b      	ldr	r3, [r7, #0]
 8011320:	685a      	ldr	r2, [r3, #4]
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	697a      	ldr	r2, [r7, #20]
 801132a:	621a      	str	r2, [r3, #32]
}
 801132c:	bf00      	nop
 801132e:	371c      	adds	r7, #28
 8011330:	46bd      	mov	sp, r7
 8011332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011336:	4770      	bx	lr
 8011338:	fffeff8f 	.word	0xfffeff8f
 801133c:	40010000 	.word	0x40010000
 8011340:	40010400 	.word	0x40010400
 8011344:	40014000 	.word	0x40014000
 8011348:	40014400 	.word	0x40014400
 801134c:	40014800 	.word	0x40014800

08011350 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011350:	b480      	push	{r7}
 8011352:	b087      	sub	sp, #28
 8011354:	af00      	add	r7, sp, #0
 8011356:	6078      	str	r0, [r7, #4]
 8011358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	6a1b      	ldr	r3, [r3, #32]
 801135e:	f023 0210 	bic.w	r2, r3, #16
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	6a1b      	ldr	r3, [r3, #32]
 801136a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	685b      	ldr	r3, [r3, #4]
 8011370:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	699b      	ldr	r3, [r3, #24]
 8011376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011378:	68fa      	ldr	r2, [r7, #12]
 801137a:	4b34      	ldr	r3, [pc, #208]	; (801144c <TIM_OC2_SetConfig+0xfc>)
 801137c:	4013      	ands	r3, r2
 801137e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011386:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011388:	683b      	ldr	r3, [r7, #0]
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	021b      	lsls	r3, r3, #8
 801138e:	68fa      	ldr	r2, [r7, #12]
 8011390:	4313      	orrs	r3, r2
 8011392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8011394:	697b      	ldr	r3, [r7, #20]
 8011396:	f023 0320 	bic.w	r3, r3, #32
 801139a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801139c:	683b      	ldr	r3, [r7, #0]
 801139e:	689b      	ldr	r3, [r3, #8]
 80113a0:	011b      	lsls	r3, r3, #4
 80113a2:	697a      	ldr	r2, [r7, #20]
 80113a4:	4313      	orrs	r3, r2
 80113a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	4a29      	ldr	r2, [pc, #164]	; (8011450 <TIM_OC2_SetConfig+0x100>)
 80113ac:	4293      	cmp	r3, r2
 80113ae:	d003      	beq.n	80113b8 <TIM_OC2_SetConfig+0x68>
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	4a28      	ldr	r2, [pc, #160]	; (8011454 <TIM_OC2_SetConfig+0x104>)
 80113b4:	4293      	cmp	r3, r2
 80113b6:	d10d      	bne.n	80113d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80113b8:	697b      	ldr	r3, [r7, #20]
 80113ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80113be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80113c0:	683b      	ldr	r3, [r7, #0]
 80113c2:	68db      	ldr	r3, [r3, #12]
 80113c4:	011b      	lsls	r3, r3, #4
 80113c6:	697a      	ldr	r2, [r7, #20]
 80113c8:	4313      	orrs	r3, r2
 80113ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80113cc:	697b      	ldr	r3, [r7, #20]
 80113ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80113d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	4a1e      	ldr	r2, [pc, #120]	; (8011450 <TIM_OC2_SetConfig+0x100>)
 80113d8:	4293      	cmp	r3, r2
 80113da:	d00f      	beq.n	80113fc <TIM_OC2_SetConfig+0xac>
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	4a1d      	ldr	r2, [pc, #116]	; (8011454 <TIM_OC2_SetConfig+0x104>)
 80113e0:	4293      	cmp	r3, r2
 80113e2:	d00b      	beq.n	80113fc <TIM_OC2_SetConfig+0xac>
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	4a1c      	ldr	r2, [pc, #112]	; (8011458 <TIM_OC2_SetConfig+0x108>)
 80113e8:	4293      	cmp	r3, r2
 80113ea:	d007      	beq.n	80113fc <TIM_OC2_SetConfig+0xac>
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	4a1b      	ldr	r2, [pc, #108]	; (801145c <TIM_OC2_SetConfig+0x10c>)
 80113f0:	4293      	cmp	r3, r2
 80113f2:	d003      	beq.n	80113fc <TIM_OC2_SetConfig+0xac>
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	4a1a      	ldr	r2, [pc, #104]	; (8011460 <TIM_OC2_SetConfig+0x110>)
 80113f8:	4293      	cmp	r3, r2
 80113fa:	d113      	bne.n	8011424 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80113fc:	693b      	ldr	r3, [r7, #16]
 80113fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011402:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8011404:	693b      	ldr	r3, [r7, #16]
 8011406:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801140a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801140c:	683b      	ldr	r3, [r7, #0]
 801140e:	695b      	ldr	r3, [r3, #20]
 8011410:	009b      	lsls	r3, r3, #2
 8011412:	693a      	ldr	r2, [r7, #16]
 8011414:	4313      	orrs	r3, r2
 8011416:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011418:	683b      	ldr	r3, [r7, #0]
 801141a:	699b      	ldr	r3, [r3, #24]
 801141c:	009b      	lsls	r3, r3, #2
 801141e:	693a      	ldr	r2, [r7, #16]
 8011420:	4313      	orrs	r3, r2
 8011422:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	693a      	ldr	r2, [r7, #16]
 8011428:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	68fa      	ldr	r2, [r7, #12]
 801142e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8011430:	683b      	ldr	r3, [r7, #0]
 8011432:	685a      	ldr	r2, [r3, #4]
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	697a      	ldr	r2, [r7, #20]
 801143c:	621a      	str	r2, [r3, #32]
}
 801143e:	bf00      	nop
 8011440:	371c      	adds	r7, #28
 8011442:	46bd      	mov	sp, r7
 8011444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011448:	4770      	bx	lr
 801144a:	bf00      	nop
 801144c:	feff8fff 	.word	0xfeff8fff
 8011450:	40010000 	.word	0x40010000
 8011454:	40010400 	.word	0x40010400
 8011458:	40014000 	.word	0x40014000
 801145c:	40014400 	.word	0x40014400
 8011460:	40014800 	.word	0x40014800

08011464 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011464:	b480      	push	{r7}
 8011466:	b087      	sub	sp, #28
 8011468:	af00      	add	r7, sp, #0
 801146a:	6078      	str	r0, [r7, #4]
 801146c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	6a1b      	ldr	r3, [r3, #32]
 8011472:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	6a1b      	ldr	r3, [r3, #32]
 801147e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	685b      	ldr	r3, [r3, #4]
 8011484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	69db      	ldr	r3, [r3, #28]
 801148a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801148c:	68fa      	ldr	r2, [r7, #12]
 801148e:	4b33      	ldr	r3, [pc, #204]	; (801155c <TIM_OC3_SetConfig+0xf8>)
 8011490:	4013      	ands	r3, r2
 8011492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	f023 0303 	bic.w	r3, r3, #3
 801149a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801149c:	683b      	ldr	r3, [r7, #0]
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	68fa      	ldr	r2, [r7, #12]
 80114a2:	4313      	orrs	r3, r2
 80114a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80114a6:	697b      	ldr	r3, [r7, #20]
 80114a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80114ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80114ae:	683b      	ldr	r3, [r7, #0]
 80114b0:	689b      	ldr	r3, [r3, #8]
 80114b2:	021b      	lsls	r3, r3, #8
 80114b4:	697a      	ldr	r2, [r7, #20]
 80114b6:	4313      	orrs	r3, r2
 80114b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	4a28      	ldr	r2, [pc, #160]	; (8011560 <TIM_OC3_SetConfig+0xfc>)
 80114be:	4293      	cmp	r3, r2
 80114c0:	d003      	beq.n	80114ca <TIM_OC3_SetConfig+0x66>
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	4a27      	ldr	r2, [pc, #156]	; (8011564 <TIM_OC3_SetConfig+0x100>)
 80114c6:	4293      	cmp	r3, r2
 80114c8:	d10d      	bne.n	80114e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80114ca:	697b      	ldr	r3, [r7, #20]
 80114cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80114d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80114d2:	683b      	ldr	r3, [r7, #0]
 80114d4:	68db      	ldr	r3, [r3, #12]
 80114d6:	021b      	lsls	r3, r3, #8
 80114d8:	697a      	ldr	r2, [r7, #20]
 80114da:	4313      	orrs	r3, r2
 80114dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80114de:	697b      	ldr	r3, [r7, #20]
 80114e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80114e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	4a1d      	ldr	r2, [pc, #116]	; (8011560 <TIM_OC3_SetConfig+0xfc>)
 80114ea:	4293      	cmp	r3, r2
 80114ec:	d00f      	beq.n	801150e <TIM_OC3_SetConfig+0xaa>
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	4a1c      	ldr	r2, [pc, #112]	; (8011564 <TIM_OC3_SetConfig+0x100>)
 80114f2:	4293      	cmp	r3, r2
 80114f4:	d00b      	beq.n	801150e <TIM_OC3_SetConfig+0xaa>
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	4a1b      	ldr	r2, [pc, #108]	; (8011568 <TIM_OC3_SetConfig+0x104>)
 80114fa:	4293      	cmp	r3, r2
 80114fc:	d007      	beq.n	801150e <TIM_OC3_SetConfig+0xaa>
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	4a1a      	ldr	r2, [pc, #104]	; (801156c <TIM_OC3_SetConfig+0x108>)
 8011502:	4293      	cmp	r3, r2
 8011504:	d003      	beq.n	801150e <TIM_OC3_SetConfig+0xaa>
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	4a19      	ldr	r2, [pc, #100]	; (8011570 <TIM_OC3_SetConfig+0x10c>)
 801150a:	4293      	cmp	r3, r2
 801150c:	d113      	bne.n	8011536 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801150e:	693b      	ldr	r3, [r7, #16]
 8011510:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011514:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8011516:	693b      	ldr	r3, [r7, #16]
 8011518:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801151c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801151e:	683b      	ldr	r3, [r7, #0]
 8011520:	695b      	ldr	r3, [r3, #20]
 8011522:	011b      	lsls	r3, r3, #4
 8011524:	693a      	ldr	r2, [r7, #16]
 8011526:	4313      	orrs	r3, r2
 8011528:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801152a:	683b      	ldr	r3, [r7, #0]
 801152c:	699b      	ldr	r3, [r3, #24]
 801152e:	011b      	lsls	r3, r3, #4
 8011530:	693a      	ldr	r2, [r7, #16]
 8011532:	4313      	orrs	r3, r2
 8011534:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	693a      	ldr	r2, [r7, #16]
 801153a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	68fa      	ldr	r2, [r7, #12]
 8011540:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8011542:	683b      	ldr	r3, [r7, #0]
 8011544:	685a      	ldr	r2, [r3, #4]
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	697a      	ldr	r2, [r7, #20]
 801154e:	621a      	str	r2, [r3, #32]
}
 8011550:	bf00      	nop
 8011552:	371c      	adds	r7, #28
 8011554:	46bd      	mov	sp, r7
 8011556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801155a:	4770      	bx	lr
 801155c:	fffeff8f 	.word	0xfffeff8f
 8011560:	40010000 	.word	0x40010000
 8011564:	40010400 	.word	0x40010400
 8011568:	40014000 	.word	0x40014000
 801156c:	40014400 	.word	0x40014400
 8011570:	40014800 	.word	0x40014800

08011574 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8011574:	b480      	push	{r7}
 8011576:	b087      	sub	sp, #28
 8011578:	af00      	add	r7, sp, #0
 801157a:	6078      	str	r0, [r7, #4]
 801157c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	6a1b      	ldr	r3, [r3, #32]
 8011582:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	6a1b      	ldr	r3, [r3, #32]
 801158e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	685b      	ldr	r3, [r3, #4]
 8011594:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	69db      	ldr	r3, [r3, #28]
 801159a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801159c:	68fa      	ldr	r2, [r7, #12]
 801159e:	4b24      	ldr	r3, [pc, #144]	; (8011630 <TIM_OC4_SetConfig+0xbc>)
 80115a0:	4013      	ands	r3, r2
 80115a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80115aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80115ac:	683b      	ldr	r3, [r7, #0]
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	021b      	lsls	r3, r3, #8
 80115b2:	68fa      	ldr	r2, [r7, #12]
 80115b4:	4313      	orrs	r3, r2
 80115b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80115b8:	693b      	ldr	r3, [r7, #16]
 80115ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80115be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80115c0:	683b      	ldr	r3, [r7, #0]
 80115c2:	689b      	ldr	r3, [r3, #8]
 80115c4:	031b      	lsls	r3, r3, #12
 80115c6:	693a      	ldr	r2, [r7, #16]
 80115c8:	4313      	orrs	r3, r2
 80115ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	4a19      	ldr	r2, [pc, #100]	; (8011634 <TIM_OC4_SetConfig+0xc0>)
 80115d0:	4293      	cmp	r3, r2
 80115d2:	d00f      	beq.n	80115f4 <TIM_OC4_SetConfig+0x80>
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	4a18      	ldr	r2, [pc, #96]	; (8011638 <TIM_OC4_SetConfig+0xc4>)
 80115d8:	4293      	cmp	r3, r2
 80115da:	d00b      	beq.n	80115f4 <TIM_OC4_SetConfig+0x80>
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	4a17      	ldr	r2, [pc, #92]	; (801163c <TIM_OC4_SetConfig+0xc8>)
 80115e0:	4293      	cmp	r3, r2
 80115e2:	d007      	beq.n	80115f4 <TIM_OC4_SetConfig+0x80>
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	4a16      	ldr	r2, [pc, #88]	; (8011640 <TIM_OC4_SetConfig+0xcc>)
 80115e8:	4293      	cmp	r3, r2
 80115ea:	d003      	beq.n	80115f4 <TIM_OC4_SetConfig+0x80>
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	4a15      	ldr	r2, [pc, #84]	; (8011644 <TIM_OC4_SetConfig+0xd0>)
 80115f0:	4293      	cmp	r3, r2
 80115f2:	d109      	bne.n	8011608 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80115f4:	697b      	ldr	r3, [r7, #20]
 80115f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80115fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80115fc:	683b      	ldr	r3, [r7, #0]
 80115fe:	695b      	ldr	r3, [r3, #20]
 8011600:	019b      	lsls	r3, r3, #6
 8011602:	697a      	ldr	r2, [r7, #20]
 8011604:	4313      	orrs	r3, r2
 8011606:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	697a      	ldr	r2, [r7, #20]
 801160c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	68fa      	ldr	r2, [r7, #12]
 8011612:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011614:	683b      	ldr	r3, [r7, #0]
 8011616:	685a      	ldr	r2, [r3, #4]
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	693a      	ldr	r2, [r7, #16]
 8011620:	621a      	str	r2, [r3, #32]
}
 8011622:	bf00      	nop
 8011624:	371c      	adds	r7, #28
 8011626:	46bd      	mov	sp, r7
 8011628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801162c:	4770      	bx	lr
 801162e:	bf00      	nop
 8011630:	feff8fff 	.word	0xfeff8fff
 8011634:	40010000 	.word	0x40010000
 8011638:	40010400 	.word	0x40010400
 801163c:	40014000 	.word	0x40014000
 8011640:	40014400 	.word	0x40014400
 8011644:	40014800 	.word	0x40014800

08011648 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011648:	b480      	push	{r7}
 801164a:	b087      	sub	sp, #28
 801164c:	af00      	add	r7, sp, #0
 801164e:	6078      	str	r0, [r7, #4]
 8011650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	6a1b      	ldr	r3, [r3, #32]
 8011656:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	6a1b      	ldr	r3, [r3, #32]
 8011662:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	685b      	ldr	r3, [r3, #4]
 8011668:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801166e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8011670:	68fa      	ldr	r2, [r7, #12]
 8011672:	4b21      	ldr	r3, [pc, #132]	; (80116f8 <TIM_OC5_SetConfig+0xb0>)
 8011674:	4013      	ands	r3, r2
 8011676:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011678:	683b      	ldr	r3, [r7, #0]
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	68fa      	ldr	r2, [r7, #12]
 801167e:	4313      	orrs	r3, r2
 8011680:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8011682:	693b      	ldr	r3, [r7, #16]
 8011684:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8011688:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801168a:	683b      	ldr	r3, [r7, #0]
 801168c:	689b      	ldr	r3, [r3, #8]
 801168e:	041b      	lsls	r3, r3, #16
 8011690:	693a      	ldr	r2, [r7, #16]
 8011692:	4313      	orrs	r3, r2
 8011694:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	4a18      	ldr	r2, [pc, #96]	; (80116fc <TIM_OC5_SetConfig+0xb4>)
 801169a:	4293      	cmp	r3, r2
 801169c:	d00f      	beq.n	80116be <TIM_OC5_SetConfig+0x76>
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	4a17      	ldr	r2, [pc, #92]	; (8011700 <TIM_OC5_SetConfig+0xb8>)
 80116a2:	4293      	cmp	r3, r2
 80116a4:	d00b      	beq.n	80116be <TIM_OC5_SetConfig+0x76>
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	4a16      	ldr	r2, [pc, #88]	; (8011704 <TIM_OC5_SetConfig+0xbc>)
 80116aa:	4293      	cmp	r3, r2
 80116ac:	d007      	beq.n	80116be <TIM_OC5_SetConfig+0x76>
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	4a15      	ldr	r2, [pc, #84]	; (8011708 <TIM_OC5_SetConfig+0xc0>)
 80116b2:	4293      	cmp	r3, r2
 80116b4:	d003      	beq.n	80116be <TIM_OC5_SetConfig+0x76>
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	4a14      	ldr	r2, [pc, #80]	; (801170c <TIM_OC5_SetConfig+0xc4>)
 80116ba:	4293      	cmp	r3, r2
 80116bc:	d109      	bne.n	80116d2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80116be:	697b      	ldr	r3, [r7, #20]
 80116c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80116c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80116c6:	683b      	ldr	r3, [r7, #0]
 80116c8:	695b      	ldr	r3, [r3, #20]
 80116ca:	021b      	lsls	r3, r3, #8
 80116cc:	697a      	ldr	r2, [r7, #20]
 80116ce:	4313      	orrs	r3, r2
 80116d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	697a      	ldr	r2, [r7, #20]
 80116d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	68fa      	ldr	r2, [r7, #12]
 80116dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80116de:	683b      	ldr	r3, [r7, #0]
 80116e0:	685a      	ldr	r2, [r3, #4]
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	693a      	ldr	r2, [r7, #16]
 80116ea:	621a      	str	r2, [r3, #32]
}
 80116ec:	bf00      	nop
 80116ee:	371c      	adds	r7, #28
 80116f0:	46bd      	mov	sp, r7
 80116f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f6:	4770      	bx	lr
 80116f8:	fffeff8f 	.word	0xfffeff8f
 80116fc:	40010000 	.word	0x40010000
 8011700:	40010400 	.word	0x40010400
 8011704:	40014000 	.word	0x40014000
 8011708:	40014400 	.word	0x40014400
 801170c:	40014800 	.word	0x40014800

08011710 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8011710:	b480      	push	{r7}
 8011712:	b087      	sub	sp, #28
 8011714:	af00      	add	r7, sp, #0
 8011716:	6078      	str	r0, [r7, #4]
 8011718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	6a1b      	ldr	r3, [r3, #32]
 801171e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	6a1b      	ldr	r3, [r3, #32]
 801172a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	685b      	ldr	r3, [r3, #4]
 8011730:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8011738:	68fa      	ldr	r2, [r7, #12]
 801173a:	4b22      	ldr	r3, [pc, #136]	; (80117c4 <TIM_OC6_SetConfig+0xb4>)
 801173c:	4013      	ands	r3, r2
 801173e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011740:	683b      	ldr	r3, [r7, #0]
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	021b      	lsls	r3, r3, #8
 8011746:	68fa      	ldr	r2, [r7, #12]
 8011748:	4313      	orrs	r3, r2
 801174a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801174c:	693b      	ldr	r3, [r7, #16]
 801174e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011752:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8011754:	683b      	ldr	r3, [r7, #0]
 8011756:	689b      	ldr	r3, [r3, #8]
 8011758:	051b      	lsls	r3, r3, #20
 801175a:	693a      	ldr	r2, [r7, #16]
 801175c:	4313      	orrs	r3, r2
 801175e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	4a19      	ldr	r2, [pc, #100]	; (80117c8 <TIM_OC6_SetConfig+0xb8>)
 8011764:	4293      	cmp	r3, r2
 8011766:	d00f      	beq.n	8011788 <TIM_OC6_SetConfig+0x78>
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	4a18      	ldr	r2, [pc, #96]	; (80117cc <TIM_OC6_SetConfig+0xbc>)
 801176c:	4293      	cmp	r3, r2
 801176e:	d00b      	beq.n	8011788 <TIM_OC6_SetConfig+0x78>
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	4a17      	ldr	r2, [pc, #92]	; (80117d0 <TIM_OC6_SetConfig+0xc0>)
 8011774:	4293      	cmp	r3, r2
 8011776:	d007      	beq.n	8011788 <TIM_OC6_SetConfig+0x78>
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	4a16      	ldr	r2, [pc, #88]	; (80117d4 <TIM_OC6_SetConfig+0xc4>)
 801177c:	4293      	cmp	r3, r2
 801177e:	d003      	beq.n	8011788 <TIM_OC6_SetConfig+0x78>
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	4a15      	ldr	r2, [pc, #84]	; (80117d8 <TIM_OC6_SetConfig+0xc8>)
 8011784:	4293      	cmp	r3, r2
 8011786:	d109      	bne.n	801179c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8011788:	697b      	ldr	r3, [r7, #20]
 801178a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801178e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011790:	683b      	ldr	r3, [r7, #0]
 8011792:	695b      	ldr	r3, [r3, #20]
 8011794:	029b      	lsls	r3, r3, #10
 8011796:	697a      	ldr	r2, [r7, #20]
 8011798:	4313      	orrs	r3, r2
 801179a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	697a      	ldr	r2, [r7, #20]
 80117a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	68fa      	ldr	r2, [r7, #12]
 80117a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80117a8:	683b      	ldr	r3, [r7, #0]
 80117aa:	685a      	ldr	r2, [r3, #4]
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	693a      	ldr	r2, [r7, #16]
 80117b4:	621a      	str	r2, [r3, #32]
}
 80117b6:	bf00      	nop
 80117b8:	371c      	adds	r7, #28
 80117ba:	46bd      	mov	sp, r7
 80117bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c0:	4770      	bx	lr
 80117c2:	bf00      	nop
 80117c4:	feff8fff 	.word	0xfeff8fff
 80117c8:	40010000 	.word	0x40010000
 80117cc:	40010400 	.word	0x40010400
 80117d0:	40014000 	.word	0x40014000
 80117d4:	40014400 	.word	0x40014400
 80117d8:	40014800 	.word	0x40014800

080117dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80117dc:	b480      	push	{r7}
 80117de:	b087      	sub	sp, #28
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	60f8      	str	r0, [r7, #12]
 80117e4:	60b9      	str	r1, [r7, #8]
 80117e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80117e8:	68bb      	ldr	r3, [r7, #8]
 80117ea:	f003 031f 	and.w	r3, r3, #31
 80117ee:	2201      	movs	r2, #1
 80117f0:	fa02 f303 	lsl.w	r3, r2, r3
 80117f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	6a1a      	ldr	r2, [r3, #32]
 80117fa:	697b      	ldr	r3, [r7, #20]
 80117fc:	43db      	mvns	r3, r3
 80117fe:	401a      	ands	r2, r3
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	6a1a      	ldr	r2, [r3, #32]
 8011808:	68bb      	ldr	r3, [r7, #8]
 801180a:	f003 031f 	and.w	r3, r3, #31
 801180e:	6879      	ldr	r1, [r7, #4]
 8011810:	fa01 f303 	lsl.w	r3, r1, r3
 8011814:	431a      	orrs	r2, r3
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	621a      	str	r2, [r3, #32]
}
 801181a:	bf00      	nop
 801181c:	371c      	adds	r7, #28
 801181e:	46bd      	mov	sp, r7
 8011820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011824:	4770      	bx	lr
	...

08011828 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011828:	b480      	push	{r7}
 801182a:	b085      	sub	sp, #20
 801182c:	af00      	add	r7, sp, #0
 801182e:	6078      	str	r0, [r7, #4]
 8011830:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011838:	2b01      	cmp	r3, #1
 801183a:	d101      	bne.n	8011840 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801183c:	2302      	movs	r3, #2
 801183e:	e077      	b.n	8011930 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	2201      	movs	r2, #1
 8011844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	2202      	movs	r2, #2
 801184c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	685b      	ldr	r3, [r3, #4]
 8011856:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	689b      	ldr	r3, [r3, #8]
 801185e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	4a35      	ldr	r2, [pc, #212]	; (801193c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8011866:	4293      	cmp	r3, r2
 8011868:	d004      	beq.n	8011874 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	4a34      	ldr	r2, [pc, #208]	; (8011940 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011870:	4293      	cmp	r3, r2
 8011872:	d108      	bne.n	8011886 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801187a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801187c:	683b      	ldr	r3, [r7, #0]
 801187e:	685b      	ldr	r3, [r3, #4]
 8011880:	68fa      	ldr	r2, [r7, #12]
 8011882:	4313      	orrs	r3, r2
 8011884:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801188c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801188e:	683b      	ldr	r3, [r7, #0]
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	68fa      	ldr	r2, [r7, #12]
 8011894:	4313      	orrs	r3, r2
 8011896:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	68fa      	ldr	r2, [r7, #12]
 801189e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	4a25      	ldr	r2, [pc, #148]	; (801193c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80118a6:	4293      	cmp	r3, r2
 80118a8:	d02c      	beq.n	8011904 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80118b2:	d027      	beq.n	8011904 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	4a22      	ldr	r2, [pc, #136]	; (8011944 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80118ba:	4293      	cmp	r3, r2
 80118bc:	d022      	beq.n	8011904 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	4a21      	ldr	r2, [pc, #132]	; (8011948 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80118c4:	4293      	cmp	r3, r2
 80118c6:	d01d      	beq.n	8011904 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	4a1f      	ldr	r2, [pc, #124]	; (801194c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80118ce:	4293      	cmp	r3, r2
 80118d0:	d018      	beq.n	8011904 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	4a1a      	ldr	r2, [pc, #104]	; (8011940 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80118d8:	4293      	cmp	r3, r2
 80118da:	d013      	beq.n	8011904 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	4a1b      	ldr	r2, [pc, #108]	; (8011950 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80118e2:	4293      	cmp	r3, r2
 80118e4:	d00e      	beq.n	8011904 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	4a1a      	ldr	r2, [pc, #104]	; (8011954 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80118ec:	4293      	cmp	r3, r2
 80118ee:	d009      	beq.n	8011904 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	4a18      	ldr	r2, [pc, #96]	; (8011958 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80118f6:	4293      	cmp	r3, r2
 80118f8:	d004      	beq.n	8011904 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	4a17      	ldr	r2, [pc, #92]	; (801195c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8011900:	4293      	cmp	r3, r2
 8011902:	d10c      	bne.n	801191e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011904:	68bb      	ldr	r3, [r7, #8]
 8011906:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801190a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801190c:	683b      	ldr	r3, [r7, #0]
 801190e:	689b      	ldr	r3, [r3, #8]
 8011910:	68ba      	ldr	r2, [r7, #8]
 8011912:	4313      	orrs	r3, r2
 8011914:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	68ba      	ldr	r2, [r7, #8]
 801191c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	2201      	movs	r2, #1
 8011922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	2200      	movs	r2, #0
 801192a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801192e:	2300      	movs	r3, #0
}
 8011930:	4618      	mov	r0, r3
 8011932:	3714      	adds	r7, #20
 8011934:	46bd      	mov	sp, r7
 8011936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801193a:	4770      	bx	lr
 801193c:	40010000 	.word	0x40010000
 8011940:	40010400 	.word	0x40010400
 8011944:	40000400 	.word	0x40000400
 8011948:	40000800 	.word	0x40000800
 801194c:	40000c00 	.word	0x40000c00
 8011950:	40001800 	.word	0x40001800
 8011954:	40014000 	.word	0x40014000
 8011958:	4000e000 	.word	0x4000e000
 801195c:	4000e400 	.word	0x4000e400

08011960 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011960:	b480      	push	{r7}
 8011962:	b083      	sub	sp, #12
 8011964:	af00      	add	r7, sp, #0
 8011966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011968:	bf00      	nop
 801196a:	370c      	adds	r7, #12
 801196c:	46bd      	mov	sp, r7
 801196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011972:	4770      	bx	lr

08011974 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011974:	b480      	push	{r7}
 8011976:	b083      	sub	sp, #12
 8011978:	af00      	add	r7, sp, #0
 801197a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801197c:	bf00      	nop
 801197e:	370c      	adds	r7, #12
 8011980:	46bd      	mov	sp, r7
 8011982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011986:	4770      	bx	lr

08011988 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8011988:	b480      	push	{r7}
 801198a:	b083      	sub	sp, #12
 801198c:	af00      	add	r7, sp, #0
 801198e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8011990:	bf00      	nop
 8011992:	370c      	adds	r7, #12
 8011994:	46bd      	mov	sp, r7
 8011996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801199a:	4770      	bx	lr

0801199c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801199c:	b580      	push	{r7, lr}
 801199e:	b082      	sub	sp, #8
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d101      	bne.n	80119ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80119aa:	2301      	movs	r3, #1
 80119ac:	e042      	b.n	8011a34 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d106      	bne.n	80119c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	2200      	movs	r2, #0
 80119bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80119c0:	6878      	ldr	r0, [r7, #4]
 80119c2:	f7f1 ffe7 	bl	8003994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	2224      	movs	r2, #36	; 0x24
 80119ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	681b      	ldr	r3, [r3, #0]
 80119d2:	681a      	ldr	r2, [r3, #0]
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	681b      	ldr	r3, [r3, #0]
 80119d8:	f022 0201 	bic.w	r2, r2, #1
 80119dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80119de:	6878      	ldr	r0, [r7, #4]
 80119e0:	f000 f82c 	bl	8011a3c <UART_SetConfig>
 80119e4:	4603      	mov	r3, r0
 80119e6:	2b01      	cmp	r3, #1
 80119e8:	d101      	bne.n	80119ee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80119ea:	2301      	movs	r3, #1
 80119ec:	e022      	b.n	8011a34 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d002      	beq.n	80119fc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80119f6:	6878      	ldr	r0, [r7, #4]
 80119f8:	f000 fe8c 	bl	8012714 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	685a      	ldr	r2, [r3, #4]
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011a0a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	689a      	ldr	r2, [r3, #8]
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011a1a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	681a      	ldr	r2, [r3, #0]
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	f042 0201 	orr.w	r2, r2, #1
 8011a2a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011a2c:	6878      	ldr	r0, [r7, #4]
 8011a2e:	f000 ff13 	bl	8012858 <UART_CheckIdleState>
 8011a32:	4603      	mov	r3, r0
}
 8011a34:	4618      	mov	r0, r3
 8011a36:	3708      	adds	r7, #8
 8011a38:	46bd      	mov	sp, r7
 8011a3a:	bd80      	pop	{r7, pc}

08011a3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011a40:	b092      	sub	sp, #72	; 0x48
 8011a42:	af00      	add	r7, sp, #0
 8011a44:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011a46:	2300      	movs	r3, #0
 8011a48:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011a4c:	697b      	ldr	r3, [r7, #20]
 8011a4e:	689a      	ldr	r2, [r3, #8]
 8011a50:	697b      	ldr	r3, [r7, #20]
 8011a52:	691b      	ldr	r3, [r3, #16]
 8011a54:	431a      	orrs	r2, r3
 8011a56:	697b      	ldr	r3, [r7, #20]
 8011a58:	695b      	ldr	r3, [r3, #20]
 8011a5a:	431a      	orrs	r2, r3
 8011a5c:	697b      	ldr	r3, [r7, #20]
 8011a5e:	69db      	ldr	r3, [r3, #28]
 8011a60:	4313      	orrs	r3, r2
 8011a62:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011a64:	697b      	ldr	r3, [r7, #20]
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	681a      	ldr	r2, [r3, #0]
 8011a6a:	4bbe      	ldr	r3, [pc, #760]	; (8011d64 <UART_SetConfig+0x328>)
 8011a6c:	4013      	ands	r3, r2
 8011a6e:	697a      	ldr	r2, [r7, #20]
 8011a70:	6812      	ldr	r2, [r2, #0]
 8011a72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011a74:	430b      	orrs	r3, r1
 8011a76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011a78:	697b      	ldr	r3, [r7, #20]
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	685b      	ldr	r3, [r3, #4]
 8011a7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011a82:	697b      	ldr	r3, [r7, #20]
 8011a84:	68da      	ldr	r2, [r3, #12]
 8011a86:	697b      	ldr	r3, [r7, #20]
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	430a      	orrs	r2, r1
 8011a8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011a8e:	697b      	ldr	r3, [r7, #20]
 8011a90:	699b      	ldr	r3, [r3, #24]
 8011a92:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011a94:	697b      	ldr	r3, [r7, #20]
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	4ab3      	ldr	r2, [pc, #716]	; (8011d68 <UART_SetConfig+0x32c>)
 8011a9a:	4293      	cmp	r3, r2
 8011a9c:	d004      	beq.n	8011aa8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011a9e:	697b      	ldr	r3, [r7, #20]
 8011aa0:	6a1b      	ldr	r3, [r3, #32]
 8011aa2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011aa4:	4313      	orrs	r3, r2
 8011aa6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011aa8:	697b      	ldr	r3, [r7, #20]
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	689a      	ldr	r2, [r3, #8]
 8011aae:	4baf      	ldr	r3, [pc, #700]	; (8011d6c <UART_SetConfig+0x330>)
 8011ab0:	4013      	ands	r3, r2
 8011ab2:	697a      	ldr	r2, [r7, #20]
 8011ab4:	6812      	ldr	r2, [r2, #0]
 8011ab6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011ab8:	430b      	orrs	r3, r1
 8011aba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011abc:	697b      	ldr	r3, [r7, #20]
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ac2:	f023 010f 	bic.w	r1, r3, #15
 8011ac6:	697b      	ldr	r3, [r7, #20]
 8011ac8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011aca:	697b      	ldr	r3, [r7, #20]
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	430a      	orrs	r2, r1
 8011ad0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011ad2:	697b      	ldr	r3, [r7, #20]
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	4aa6      	ldr	r2, [pc, #664]	; (8011d70 <UART_SetConfig+0x334>)
 8011ad8:	4293      	cmp	r3, r2
 8011ada:	d177      	bne.n	8011bcc <UART_SetConfig+0x190>
 8011adc:	4ba5      	ldr	r3, [pc, #660]	; (8011d74 <UART_SetConfig+0x338>)
 8011ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ae0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011ae4:	2b28      	cmp	r3, #40	; 0x28
 8011ae6:	d86d      	bhi.n	8011bc4 <UART_SetConfig+0x188>
 8011ae8:	a201      	add	r2, pc, #4	; (adr r2, 8011af0 <UART_SetConfig+0xb4>)
 8011aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011aee:	bf00      	nop
 8011af0:	08011b95 	.word	0x08011b95
 8011af4:	08011bc5 	.word	0x08011bc5
 8011af8:	08011bc5 	.word	0x08011bc5
 8011afc:	08011bc5 	.word	0x08011bc5
 8011b00:	08011bc5 	.word	0x08011bc5
 8011b04:	08011bc5 	.word	0x08011bc5
 8011b08:	08011bc5 	.word	0x08011bc5
 8011b0c:	08011bc5 	.word	0x08011bc5
 8011b10:	08011b9d 	.word	0x08011b9d
 8011b14:	08011bc5 	.word	0x08011bc5
 8011b18:	08011bc5 	.word	0x08011bc5
 8011b1c:	08011bc5 	.word	0x08011bc5
 8011b20:	08011bc5 	.word	0x08011bc5
 8011b24:	08011bc5 	.word	0x08011bc5
 8011b28:	08011bc5 	.word	0x08011bc5
 8011b2c:	08011bc5 	.word	0x08011bc5
 8011b30:	08011ba5 	.word	0x08011ba5
 8011b34:	08011bc5 	.word	0x08011bc5
 8011b38:	08011bc5 	.word	0x08011bc5
 8011b3c:	08011bc5 	.word	0x08011bc5
 8011b40:	08011bc5 	.word	0x08011bc5
 8011b44:	08011bc5 	.word	0x08011bc5
 8011b48:	08011bc5 	.word	0x08011bc5
 8011b4c:	08011bc5 	.word	0x08011bc5
 8011b50:	08011bad 	.word	0x08011bad
 8011b54:	08011bc5 	.word	0x08011bc5
 8011b58:	08011bc5 	.word	0x08011bc5
 8011b5c:	08011bc5 	.word	0x08011bc5
 8011b60:	08011bc5 	.word	0x08011bc5
 8011b64:	08011bc5 	.word	0x08011bc5
 8011b68:	08011bc5 	.word	0x08011bc5
 8011b6c:	08011bc5 	.word	0x08011bc5
 8011b70:	08011bb5 	.word	0x08011bb5
 8011b74:	08011bc5 	.word	0x08011bc5
 8011b78:	08011bc5 	.word	0x08011bc5
 8011b7c:	08011bc5 	.word	0x08011bc5
 8011b80:	08011bc5 	.word	0x08011bc5
 8011b84:	08011bc5 	.word	0x08011bc5
 8011b88:	08011bc5 	.word	0x08011bc5
 8011b8c:	08011bc5 	.word	0x08011bc5
 8011b90:	08011bbd 	.word	0x08011bbd
 8011b94:	2301      	movs	r3, #1
 8011b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011b9a:	e326      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011b9c:	2304      	movs	r3, #4
 8011b9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ba2:	e322      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011ba4:	2308      	movs	r3, #8
 8011ba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011baa:	e31e      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011bac:	2310      	movs	r3, #16
 8011bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bb2:	e31a      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011bb4:	2320      	movs	r3, #32
 8011bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bba:	e316      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011bbc:	2340      	movs	r3, #64	; 0x40
 8011bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bc2:	e312      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011bc4:	2380      	movs	r3, #128	; 0x80
 8011bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011bca:	e30e      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011bcc:	697b      	ldr	r3, [r7, #20]
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	4a69      	ldr	r2, [pc, #420]	; (8011d78 <UART_SetConfig+0x33c>)
 8011bd2:	4293      	cmp	r3, r2
 8011bd4:	d130      	bne.n	8011c38 <UART_SetConfig+0x1fc>
 8011bd6:	4b67      	ldr	r3, [pc, #412]	; (8011d74 <UART_SetConfig+0x338>)
 8011bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011bda:	f003 0307 	and.w	r3, r3, #7
 8011bde:	2b05      	cmp	r3, #5
 8011be0:	d826      	bhi.n	8011c30 <UART_SetConfig+0x1f4>
 8011be2:	a201      	add	r2, pc, #4	; (adr r2, 8011be8 <UART_SetConfig+0x1ac>)
 8011be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011be8:	08011c01 	.word	0x08011c01
 8011bec:	08011c09 	.word	0x08011c09
 8011bf0:	08011c11 	.word	0x08011c11
 8011bf4:	08011c19 	.word	0x08011c19
 8011bf8:	08011c21 	.word	0x08011c21
 8011bfc:	08011c29 	.word	0x08011c29
 8011c00:	2300      	movs	r3, #0
 8011c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c06:	e2f0      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011c08:	2304      	movs	r3, #4
 8011c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c0e:	e2ec      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011c10:	2308      	movs	r3, #8
 8011c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c16:	e2e8      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011c18:	2310      	movs	r3, #16
 8011c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c1e:	e2e4      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011c20:	2320      	movs	r3, #32
 8011c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c26:	e2e0      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011c28:	2340      	movs	r3, #64	; 0x40
 8011c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c2e:	e2dc      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011c30:	2380      	movs	r3, #128	; 0x80
 8011c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c36:	e2d8      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011c38:	697b      	ldr	r3, [r7, #20]
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	4a4f      	ldr	r2, [pc, #316]	; (8011d7c <UART_SetConfig+0x340>)
 8011c3e:	4293      	cmp	r3, r2
 8011c40:	d130      	bne.n	8011ca4 <UART_SetConfig+0x268>
 8011c42:	4b4c      	ldr	r3, [pc, #304]	; (8011d74 <UART_SetConfig+0x338>)
 8011c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011c46:	f003 0307 	and.w	r3, r3, #7
 8011c4a:	2b05      	cmp	r3, #5
 8011c4c:	d826      	bhi.n	8011c9c <UART_SetConfig+0x260>
 8011c4e:	a201      	add	r2, pc, #4	; (adr r2, 8011c54 <UART_SetConfig+0x218>)
 8011c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c54:	08011c6d 	.word	0x08011c6d
 8011c58:	08011c75 	.word	0x08011c75
 8011c5c:	08011c7d 	.word	0x08011c7d
 8011c60:	08011c85 	.word	0x08011c85
 8011c64:	08011c8d 	.word	0x08011c8d
 8011c68:	08011c95 	.word	0x08011c95
 8011c6c:	2300      	movs	r3, #0
 8011c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c72:	e2ba      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011c74:	2304      	movs	r3, #4
 8011c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c7a:	e2b6      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011c7c:	2308      	movs	r3, #8
 8011c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c82:	e2b2      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011c84:	2310      	movs	r3, #16
 8011c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c8a:	e2ae      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011c8c:	2320      	movs	r3, #32
 8011c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c92:	e2aa      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011c94:	2340      	movs	r3, #64	; 0x40
 8011c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011c9a:	e2a6      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011c9c:	2380      	movs	r3, #128	; 0x80
 8011c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ca2:	e2a2      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011ca4:	697b      	ldr	r3, [r7, #20]
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	4a35      	ldr	r2, [pc, #212]	; (8011d80 <UART_SetConfig+0x344>)
 8011caa:	4293      	cmp	r3, r2
 8011cac:	d130      	bne.n	8011d10 <UART_SetConfig+0x2d4>
 8011cae:	4b31      	ldr	r3, [pc, #196]	; (8011d74 <UART_SetConfig+0x338>)
 8011cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011cb2:	f003 0307 	and.w	r3, r3, #7
 8011cb6:	2b05      	cmp	r3, #5
 8011cb8:	d826      	bhi.n	8011d08 <UART_SetConfig+0x2cc>
 8011cba:	a201      	add	r2, pc, #4	; (adr r2, 8011cc0 <UART_SetConfig+0x284>)
 8011cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cc0:	08011cd9 	.word	0x08011cd9
 8011cc4:	08011ce1 	.word	0x08011ce1
 8011cc8:	08011ce9 	.word	0x08011ce9
 8011ccc:	08011cf1 	.word	0x08011cf1
 8011cd0:	08011cf9 	.word	0x08011cf9
 8011cd4:	08011d01 	.word	0x08011d01
 8011cd8:	2300      	movs	r3, #0
 8011cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cde:	e284      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011ce0:	2304      	movs	r3, #4
 8011ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ce6:	e280      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011ce8:	2308      	movs	r3, #8
 8011cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cee:	e27c      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011cf0:	2310      	movs	r3, #16
 8011cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cf6:	e278      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011cf8:	2320      	movs	r3, #32
 8011cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011cfe:	e274      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011d00:	2340      	movs	r3, #64	; 0x40
 8011d02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d06:	e270      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011d08:	2380      	movs	r3, #128	; 0x80
 8011d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d0e:	e26c      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011d10:	697b      	ldr	r3, [r7, #20]
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	4a1b      	ldr	r2, [pc, #108]	; (8011d84 <UART_SetConfig+0x348>)
 8011d16:	4293      	cmp	r3, r2
 8011d18:	d142      	bne.n	8011da0 <UART_SetConfig+0x364>
 8011d1a:	4b16      	ldr	r3, [pc, #88]	; (8011d74 <UART_SetConfig+0x338>)
 8011d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011d1e:	f003 0307 	and.w	r3, r3, #7
 8011d22:	2b05      	cmp	r3, #5
 8011d24:	d838      	bhi.n	8011d98 <UART_SetConfig+0x35c>
 8011d26:	a201      	add	r2, pc, #4	; (adr r2, 8011d2c <UART_SetConfig+0x2f0>)
 8011d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d2c:	08011d45 	.word	0x08011d45
 8011d30:	08011d4d 	.word	0x08011d4d
 8011d34:	08011d55 	.word	0x08011d55
 8011d38:	08011d5d 	.word	0x08011d5d
 8011d3c:	08011d89 	.word	0x08011d89
 8011d40:	08011d91 	.word	0x08011d91
 8011d44:	2300      	movs	r3, #0
 8011d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d4a:	e24e      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011d4c:	2304      	movs	r3, #4
 8011d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d52:	e24a      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011d54:	2308      	movs	r3, #8
 8011d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d5a:	e246      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011d5c:	2310      	movs	r3, #16
 8011d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d62:	e242      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011d64:	cfff69f3 	.word	0xcfff69f3
 8011d68:	58000c00 	.word	0x58000c00
 8011d6c:	11fff4ff 	.word	0x11fff4ff
 8011d70:	40011000 	.word	0x40011000
 8011d74:	58024400 	.word	0x58024400
 8011d78:	40004400 	.word	0x40004400
 8011d7c:	40004800 	.word	0x40004800
 8011d80:	40004c00 	.word	0x40004c00
 8011d84:	40005000 	.word	0x40005000
 8011d88:	2320      	movs	r3, #32
 8011d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d8e:	e22c      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011d90:	2340      	movs	r3, #64	; 0x40
 8011d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d96:	e228      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011d98:	2380      	movs	r3, #128	; 0x80
 8011d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011d9e:	e224      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011da0:	697b      	ldr	r3, [r7, #20]
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	4ab1      	ldr	r2, [pc, #708]	; (801206c <UART_SetConfig+0x630>)
 8011da6:	4293      	cmp	r3, r2
 8011da8:	d176      	bne.n	8011e98 <UART_SetConfig+0x45c>
 8011daa:	4bb1      	ldr	r3, [pc, #708]	; (8012070 <UART_SetConfig+0x634>)
 8011dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011dae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011db2:	2b28      	cmp	r3, #40	; 0x28
 8011db4:	d86c      	bhi.n	8011e90 <UART_SetConfig+0x454>
 8011db6:	a201      	add	r2, pc, #4	; (adr r2, 8011dbc <UART_SetConfig+0x380>)
 8011db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011dbc:	08011e61 	.word	0x08011e61
 8011dc0:	08011e91 	.word	0x08011e91
 8011dc4:	08011e91 	.word	0x08011e91
 8011dc8:	08011e91 	.word	0x08011e91
 8011dcc:	08011e91 	.word	0x08011e91
 8011dd0:	08011e91 	.word	0x08011e91
 8011dd4:	08011e91 	.word	0x08011e91
 8011dd8:	08011e91 	.word	0x08011e91
 8011ddc:	08011e69 	.word	0x08011e69
 8011de0:	08011e91 	.word	0x08011e91
 8011de4:	08011e91 	.word	0x08011e91
 8011de8:	08011e91 	.word	0x08011e91
 8011dec:	08011e91 	.word	0x08011e91
 8011df0:	08011e91 	.word	0x08011e91
 8011df4:	08011e91 	.word	0x08011e91
 8011df8:	08011e91 	.word	0x08011e91
 8011dfc:	08011e71 	.word	0x08011e71
 8011e00:	08011e91 	.word	0x08011e91
 8011e04:	08011e91 	.word	0x08011e91
 8011e08:	08011e91 	.word	0x08011e91
 8011e0c:	08011e91 	.word	0x08011e91
 8011e10:	08011e91 	.word	0x08011e91
 8011e14:	08011e91 	.word	0x08011e91
 8011e18:	08011e91 	.word	0x08011e91
 8011e1c:	08011e79 	.word	0x08011e79
 8011e20:	08011e91 	.word	0x08011e91
 8011e24:	08011e91 	.word	0x08011e91
 8011e28:	08011e91 	.word	0x08011e91
 8011e2c:	08011e91 	.word	0x08011e91
 8011e30:	08011e91 	.word	0x08011e91
 8011e34:	08011e91 	.word	0x08011e91
 8011e38:	08011e91 	.word	0x08011e91
 8011e3c:	08011e81 	.word	0x08011e81
 8011e40:	08011e91 	.word	0x08011e91
 8011e44:	08011e91 	.word	0x08011e91
 8011e48:	08011e91 	.word	0x08011e91
 8011e4c:	08011e91 	.word	0x08011e91
 8011e50:	08011e91 	.word	0x08011e91
 8011e54:	08011e91 	.word	0x08011e91
 8011e58:	08011e91 	.word	0x08011e91
 8011e5c:	08011e89 	.word	0x08011e89
 8011e60:	2301      	movs	r3, #1
 8011e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e66:	e1c0      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011e68:	2304      	movs	r3, #4
 8011e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e6e:	e1bc      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011e70:	2308      	movs	r3, #8
 8011e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e76:	e1b8      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011e78:	2310      	movs	r3, #16
 8011e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e7e:	e1b4      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011e80:	2320      	movs	r3, #32
 8011e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e86:	e1b0      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011e88:	2340      	movs	r3, #64	; 0x40
 8011e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e8e:	e1ac      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011e90:	2380      	movs	r3, #128	; 0x80
 8011e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011e96:	e1a8      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011e98:	697b      	ldr	r3, [r7, #20]
 8011e9a:	681b      	ldr	r3, [r3, #0]
 8011e9c:	4a75      	ldr	r2, [pc, #468]	; (8012074 <UART_SetConfig+0x638>)
 8011e9e:	4293      	cmp	r3, r2
 8011ea0:	d130      	bne.n	8011f04 <UART_SetConfig+0x4c8>
 8011ea2:	4b73      	ldr	r3, [pc, #460]	; (8012070 <UART_SetConfig+0x634>)
 8011ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ea6:	f003 0307 	and.w	r3, r3, #7
 8011eaa:	2b05      	cmp	r3, #5
 8011eac:	d826      	bhi.n	8011efc <UART_SetConfig+0x4c0>
 8011eae:	a201      	add	r2, pc, #4	; (adr r2, 8011eb4 <UART_SetConfig+0x478>)
 8011eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011eb4:	08011ecd 	.word	0x08011ecd
 8011eb8:	08011ed5 	.word	0x08011ed5
 8011ebc:	08011edd 	.word	0x08011edd
 8011ec0:	08011ee5 	.word	0x08011ee5
 8011ec4:	08011eed 	.word	0x08011eed
 8011ec8:	08011ef5 	.word	0x08011ef5
 8011ecc:	2300      	movs	r3, #0
 8011ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ed2:	e18a      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011ed4:	2304      	movs	r3, #4
 8011ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011eda:	e186      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011edc:	2308      	movs	r3, #8
 8011ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ee2:	e182      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011ee4:	2310      	movs	r3, #16
 8011ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011eea:	e17e      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011eec:	2320      	movs	r3, #32
 8011eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011ef2:	e17a      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011ef4:	2340      	movs	r3, #64	; 0x40
 8011ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011efa:	e176      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011efc:	2380      	movs	r3, #128	; 0x80
 8011efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f02:	e172      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011f04:	697b      	ldr	r3, [r7, #20]
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	4a5b      	ldr	r2, [pc, #364]	; (8012078 <UART_SetConfig+0x63c>)
 8011f0a:	4293      	cmp	r3, r2
 8011f0c:	d130      	bne.n	8011f70 <UART_SetConfig+0x534>
 8011f0e:	4b58      	ldr	r3, [pc, #352]	; (8012070 <UART_SetConfig+0x634>)
 8011f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011f12:	f003 0307 	and.w	r3, r3, #7
 8011f16:	2b05      	cmp	r3, #5
 8011f18:	d826      	bhi.n	8011f68 <UART_SetConfig+0x52c>
 8011f1a:	a201      	add	r2, pc, #4	; (adr r2, 8011f20 <UART_SetConfig+0x4e4>)
 8011f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f20:	08011f39 	.word	0x08011f39
 8011f24:	08011f41 	.word	0x08011f41
 8011f28:	08011f49 	.word	0x08011f49
 8011f2c:	08011f51 	.word	0x08011f51
 8011f30:	08011f59 	.word	0x08011f59
 8011f34:	08011f61 	.word	0x08011f61
 8011f38:	2300      	movs	r3, #0
 8011f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f3e:	e154      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011f40:	2304      	movs	r3, #4
 8011f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f46:	e150      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011f48:	2308      	movs	r3, #8
 8011f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f4e:	e14c      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011f50:	2310      	movs	r3, #16
 8011f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f56:	e148      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011f58:	2320      	movs	r3, #32
 8011f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f5e:	e144      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011f60:	2340      	movs	r3, #64	; 0x40
 8011f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f66:	e140      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011f68:	2380      	movs	r3, #128	; 0x80
 8011f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011f6e:	e13c      	b.n	80121ea <UART_SetConfig+0x7ae>
 8011f70:	697b      	ldr	r3, [r7, #20]
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	4a41      	ldr	r2, [pc, #260]	; (801207c <UART_SetConfig+0x640>)
 8011f76:	4293      	cmp	r3, r2
 8011f78:	f040 8082 	bne.w	8012080 <UART_SetConfig+0x644>
 8011f7c:	4b3c      	ldr	r3, [pc, #240]	; (8012070 <UART_SetConfig+0x634>)
 8011f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011f80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011f84:	2b28      	cmp	r3, #40	; 0x28
 8011f86:	d86d      	bhi.n	8012064 <UART_SetConfig+0x628>
 8011f88:	a201      	add	r2, pc, #4	; (adr r2, 8011f90 <UART_SetConfig+0x554>)
 8011f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f8e:	bf00      	nop
 8011f90:	08012035 	.word	0x08012035
 8011f94:	08012065 	.word	0x08012065
 8011f98:	08012065 	.word	0x08012065
 8011f9c:	08012065 	.word	0x08012065
 8011fa0:	08012065 	.word	0x08012065
 8011fa4:	08012065 	.word	0x08012065
 8011fa8:	08012065 	.word	0x08012065
 8011fac:	08012065 	.word	0x08012065
 8011fb0:	0801203d 	.word	0x0801203d
 8011fb4:	08012065 	.word	0x08012065
 8011fb8:	08012065 	.word	0x08012065
 8011fbc:	08012065 	.word	0x08012065
 8011fc0:	08012065 	.word	0x08012065
 8011fc4:	08012065 	.word	0x08012065
 8011fc8:	08012065 	.word	0x08012065
 8011fcc:	08012065 	.word	0x08012065
 8011fd0:	08012045 	.word	0x08012045
 8011fd4:	08012065 	.word	0x08012065
 8011fd8:	08012065 	.word	0x08012065
 8011fdc:	08012065 	.word	0x08012065
 8011fe0:	08012065 	.word	0x08012065
 8011fe4:	08012065 	.word	0x08012065
 8011fe8:	08012065 	.word	0x08012065
 8011fec:	08012065 	.word	0x08012065
 8011ff0:	0801204d 	.word	0x0801204d
 8011ff4:	08012065 	.word	0x08012065
 8011ff8:	08012065 	.word	0x08012065
 8011ffc:	08012065 	.word	0x08012065
 8012000:	08012065 	.word	0x08012065
 8012004:	08012065 	.word	0x08012065
 8012008:	08012065 	.word	0x08012065
 801200c:	08012065 	.word	0x08012065
 8012010:	08012055 	.word	0x08012055
 8012014:	08012065 	.word	0x08012065
 8012018:	08012065 	.word	0x08012065
 801201c:	08012065 	.word	0x08012065
 8012020:	08012065 	.word	0x08012065
 8012024:	08012065 	.word	0x08012065
 8012028:	08012065 	.word	0x08012065
 801202c:	08012065 	.word	0x08012065
 8012030:	0801205d 	.word	0x0801205d
 8012034:	2301      	movs	r3, #1
 8012036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801203a:	e0d6      	b.n	80121ea <UART_SetConfig+0x7ae>
 801203c:	2304      	movs	r3, #4
 801203e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012042:	e0d2      	b.n	80121ea <UART_SetConfig+0x7ae>
 8012044:	2308      	movs	r3, #8
 8012046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801204a:	e0ce      	b.n	80121ea <UART_SetConfig+0x7ae>
 801204c:	2310      	movs	r3, #16
 801204e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012052:	e0ca      	b.n	80121ea <UART_SetConfig+0x7ae>
 8012054:	2320      	movs	r3, #32
 8012056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801205a:	e0c6      	b.n	80121ea <UART_SetConfig+0x7ae>
 801205c:	2340      	movs	r3, #64	; 0x40
 801205e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012062:	e0c2      	b.n	80121ea <UART_SetConfig+0x7ae>
 8012064:	2380      	movs	r3, #128	; 0x80
 8012066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801206a:	e0be      	b.n	80121ea <UART_SetConfig+0x7ae>
 801206c:	40011400 	.word	0x40011400
 8012070:	58024400 	.word	0x58024400
 8012074:	40007800 	.word	0x40007800
 8012078:	40007c00 	.word	0x40007c00
 801207c:	40011800 	.word	0x40011800
 8012080:	697b      	ldr	r3, [r7, #20]
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	4aad      	ldr	r2, [pc, #692]	; (801233c <UART_SetConfig+0x900>)
 8012086:	4293      	cmp	r3, r2
 8012088:	d176      	bne.n	8012178 <UART_SetConfig+0x73c>
 801208a:	4bad      	ldr	r3, [pc, #692]	; (8012340 <UART_SetConfig+0x904>)
 801208c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801208e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012092:	2b28      	cmp	r3, #40	; 0x28
 8012094:	d86c      	bhi.n	8012170 <UART_SetConfig+0x734>
 8012096:	a201      	add	r2, pc, #4	; (adr r2, 801209c <UART_SetConfig+0x660>)
 8012098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801209c:	08012141 	.word	0x08012141
 80120a0:	08012171 	.word	0x08012171
 80120a4:	08012171 	.word	0x08012171
 80120a8:	08012171 	.word	0x08012171
 80120ac:	08012171 	.word	0x08012171
 80120b0:	08012171 	.word	0x08012171
 80120b4:	08012171 	.word	0x08012171
 80120b8:	08012171 	.word	0x08012171
 80120bc:	08012149 	.word	0x08012149
 80120c0:	08012171 	.word	0x08012171
 80120c4:	08012171 	.word	0x08012171
 80120c8:	08012171 	.word	0x08012171
 80120cc:	08012171 	.word	0x08012171
 80120d0:	08012171 	.word	0x08012171
 80120d4:	08012171 	.word	0x08012171
 80120d8:	08012171 	.word	0x08012171
 80120dc:	08012151 	.word	0x08012151
 80120e0:	08012171 	.word	0x08012171
 80120e4:	08012171 	.word	0x08012171
 80120e8:	08012171 	.word	0x08012171
 80120ec:	08012171 	.word	0x08012171
 80120f0:	08012171 	.word	0x08012171
 80120f4:	08012171 	.word	0x08012171
 80120f8:	08012171 	.word	0x08012171
 80120fc:	08012159 	.word	0x08012159
 8012100:	08012171 	.word	0x08012171
 8012104:	08012171 	.word	0x08012171
 8012108:	08012171 	.word	0x08012171
 801210c:	08012171 	.word	0x08012171
 8012110:	08012171 	.word	0x08012171
 8012114:	08012171 	.word	0x08012171
 8012118:	08012171 	.word	0x08012171
 801211c:	08012161 	.word	0x08012161
 8012120:	08012171 	.word	0x08012171
 8012124:	08012171 	.word	0x08012171
 8012128:	08012171 	.word	0x08012171
 801212c:	08012171 	.word	0x08012171
 8012130:	08012171 	.word	0x08012171
 8012134:	08012171 	.word	0x08012171
 8012138:	08012171 	.word	0x08012171
 801213c:	08012169 	.word	0x08012169
 8012140:	2301      	movs	r3, #1
 8012142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012146:	e050      	b.n	80121ea <UART_SetConfig+0x7ae>
 8012148:	2304      	movs	r3, #4
 801214a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801214e:	e04c      	b.n	80121ea <UART_SetConfig+0x7ae>
 8012150:	2308      	movs	r3, #8
 8012152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012156:	e048      	b.n	80121ea <UART_SetConfig+0x7ae>
 8012158:	2310      	movs	r3, #16
 801215a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801215e:	e044      	b.n	80121ea <UART_SetConfig+0x7ae>
 8012160:	2320      	movs	r3, #32
 8012162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012166:	e040      	b.n	80121ea <UART_SetConfig+0x7ae>
 8012168:	2340      	movs	r3, #64	; 0x40
 801216a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801216e:	e03c      	b.n	80121ea <UART_SetConfig+0x7ae>
 8012170:	2380      	movs	r3, #128	; 0x80
 8012172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012176:	e038      	b.n	80121ea <UART_SetConfig+0x7ae>
 8012178:	697b      	ldr	r3, [r7, #20]
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	4a71      	ldr	r2, [pc, #452]	; (8012344 <UART_SetConfig+0x908>)
 801217e:	4293      	cmp	r3, r2
 8012180:	d130      	bne.n	80121e4 <UART_SetConfig+0x7a8>
 8012182:	4b6f      	ldr	r3, [pc, #444]	; (8012340 <UART_SetConfig+0x904>)
 8012184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012186:	f003 0307 	and.w	r3, r3, #7
 801218a:	2b05      	cmp	r3, #5
 801218c:	d826      	bhi.n	80121dc <UART_SetConfig+0x7a0>
 801218e:	a201      	add	r2, pc, #4	; (adr r2, 8012194 <UART_SetConfig+0x758>)
 8012190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012194:	080121ad 	.word	0x080121ad
 8012198:	080121b5 	.word	0x080121b5
 801219c:	080121bd 	.word	0x080121bd
 80121a0:	080121c5 	.word	0x080121c5
 80121a4:	080121cd 	.word	0x080121cd
 80121a8:	080121d5 	.word	0x080121d5
 80121ac:	2302      	movs	r3, #2
 80121ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80121b2:	e01a      	b.n	80121ea <UART_SetConfig+0x7ae>
 80121b4:	2304      	movs	r3, #4
 80121b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80121ba:	e016      	b.n	80121ea <UART_SetConfig+0x7ae>
 80121bc:	2308      	movs	r3, #8
 80121be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80121c2:	e012      	b.n	80121ea <UART_SetConfig+0x7ae>
 80121c4:	2310      	movs	r3, #16
 80121c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80121ca:	e00e      	b.n	80121ea <UART_SetConfig+0x7ae>
 80121cc:	2320      	movs	r3, #32
 80121ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80121d2:	e00a      	b.n	80121ea <UART_SetConfig+0x7ae>
 80121d4:	2340      	movs	r3, #64	; 0x40
 80121d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80121da:	e006      	b.n	80121ea <UART_SetConfig+0x7ae>
 80121dc:	2380      	movs	r3, #128	; 0x80
 80121de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80121e2:	e002      	b.n	80121ea <UART_SetConfig+0x7ae>
 80121e4:	2380      	movs	r3, #128	; 0x80
 80121e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80121ea:	697b      	ldr	r3, [r7, #20]
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	4a55      	ldr	r2, [pc, #340]	; (8012344 <UART_SetConfig+0x908>)
 80121f0:	4293      	cmp	r3, r2
 80121f2:	f040 80f8 	bne.w	80123e6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80121f6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80121fa:	2b20      	cmp	r3, #32
 80121fc:	dc46      	bgt.n	801228c <UART_SetConfig+0x850>
 80121fe:	2b02      	cmp	r3, #2
 8012200:	db75      	blt.n	80122ee <UART_SetConfig+0x8b2>
 8012202:	3b02      	subs	r3, #2
 8012204:	2b1e      	cmp	r3, #30
 8012206:	d872      	bhi.n	80122ee <UART_SetConfig+0x8b2>
 8012208:	a201      	add	r2, pc, #4	; (adr r2, 8012210 <UART_SetConfig+0x7d4>)
 801220a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801220e:	bf00      	nop
 8012210:	08012293 	.word	0x08012293
 8012214:	080122ef 	.word	0x080122ef
 8012218:	0801229b 	.word	0x0801229b
 801221c:	080122ef 	.word	0x080122ef
 8012220:	080122ef 	.word	0x080122ef
 8012224:	080122ef 	.word	0x080122ef
 8012228:	080122ab 	.word	0x080122ab
 801222c:	080122ef 	.word	0x080122ef
 8012230:	080122ef 	.word	0x080122ef
 8012234:	080122ef 	.word	0x080122ef
 8012238:	080122ef 	.word	0x080122ef
 801223c:	080122ef 	.word	0x080122ef
 8012240:	080122ef 	.word	0x080122ef
 8012244:	080122ef 	.word	0x080122ef
 8012248:	080122bb 	.word	0x080122bb
 801224c:	080122ef 	.word	0x080122ef
 8012250:	080122ef 	.word	0x080122ef
 8012254:	080122ef 	.word	0x080122ef
 8012258:	080122ef 	.word	0x080122ef
 801225c:	080122ef 	.word	0x080122ef
 8012260:	080122ef 	.word	0x080122ef
 8012264:	080122ef 	.word	0x080122ef
 8012268:	080122ef 	.word	0x080122ef
 801226c:	080122ef 	.word	0x080122ef
 8012270:	080122ef 	.word	0x080122ef
 8012274:	080122ef 	.word	0x080122ef
 8012278:	080122ef 	.word	0x080122ef
 801227c:	080122ef 	.word	0x080122ef
 8012280:	080122ef 	.word	0x080122ef
 8012284:	080122ef 	.word	0x080122ef
 8012288:	080122e1 	.word	0x080122e1
 801228c:	2b40      	cmp	r3, #64	; 0x40
 801228e:	d02a      	beq.n	80122e6 <UART_SetConfig+0x8aa>
 8012290:	e02d      	b.n	80122ee <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8012292:	f7fb f86b 	bl	800d36c <HAL_RCCEx_GetD3PCLK1Freq>
 8012296:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012298:	e02f      	b.n	80122fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801229a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801229e:	4618      	mov	r0, r3
 80122a0:	f7fb f87a 	bl	800d398 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80122a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80122a8:	e027      	b.n	80122fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80122aa:	f107 0318 	add.w	r3, r7, #24
 80122ae:	4618      	mov	r0, r3
 80122b0:	f7fb f9c6 	bl	800d640 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80122b4:	69fb      	ldr	r3, [r7, #28]
 80122b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80122b8:	e01f      	b.n	80122fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80122ba:	4b21      	ldr	r3, [pc, #132]	; (8012340 <UART_SetConfig+0x904>)
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	f003 0320 	and.w	r3, r3, #32
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d009      	beq.n	80122da <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80122c6:	4b1e      	ldr	r3, [pc, #120]	; (8012340 <UART_SetConfig+0x904>)
 80122c8:	681b      	ldr	r3, [r3, #0]
 80122ca:	08db      	lsrs	r3, r3, #3
 80122cc:	f003 0303 	and.w	r3, r3, #3
 80122d0:	4a1d      	ldr	r2, [pc, #116]	; (8012348 <UART_SetConfig+0x90c>)
 80122d2:	fa22 f303 	lsr.w	r3, r2, r3
 80122d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80122d8:	e00f      	b.n	80122fa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80122da:	4b1b      	ldr	r3, [pc, #108]	; (8012348 <UART_SetConfig+0x90c>)
 80122dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80122de:	e00c      	b.n	80122fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80122e0:	4b1a      	ldr	r3, [pc, #104]	; (801234c <UART_SetConfig+0x910>)
 80122e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80122e4:	e009      	b.n	80122fa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80122e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80122ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80122ec:	e005      	b.n	80122fa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80122ee:	2300      	movs	r3, #0
 80122f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80122f2:	2301      	movs	r3, #1
 80122f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80122f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80122fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	f000 81ee 	beq.w	80126de <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8012302:	697b      	ldr	r3, [r7, #20]
 8012304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012306:	4a12      	ldr	r2, [pc, #72]	; (8012350 <UART_SetConfig+0x914>)
 8012308:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801230c:	461a      	mov	r2, r3
 801230e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012310:	fbb3 f3f2 	udiv	r3, r3, r2
 8012314:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8012316:	697b      	ldr	r3, [r7, #20]
 8012318:	685a      	ldr	r2, [r3, #4]
 801231a:	4613      	mov	r3, r2
 801231c:	005b      	lsls	r3, r3, #1
 801231e:	4413      	add	r3, r2
 8012320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012322:	429a      	cmp	r2, r3
 8012324:	d305      	bcc.n	8012332 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8012326:	697b      	ldr	r3, [r7, #20]
 8012328:	685b      	ldr	r3, [r3, #4]
 801232a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801232c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801232e:	429a      	cmp	r2, r3
 8012330:	d910      	bls.n	8012354 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8012332:	2301      	movs	r3, #1
 8012334:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8012338:	e1d1      	b.n	80126de <UART_SetConfig+0xca2>
 801233a:	bf00      	nop
 801233c:	40011c00 	.word	0x40011c00
 8012340:	58024400 	.word	0x58024400
 8012344:	58000c00 	.word	0x58000c00
 8012348:	03d09000 	.word	0x03d09000
 801234c:	003d0900 	.word	0x003d0900
 8012350:	0801f7c8 	.word	0x0801f7c8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8012354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012356:	2200      	movs	r2, #0
 8012358:	60bb      	str	r3, [r7, #8]
 801235a:	60fa      	str	r2, [r7, #12]
 801235c:	697b      	ldr	r3, [r7, #20]
 801235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012360:	4ac0      	ldr	r2, [pc, #768]	; (8012664 <UART_SetConfig+0xc28>)
 8012362:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012366:	b29b      	uxth	r3, r3
 8012368:	2200      	movs	r2, #0
 801236a:	603b      	str	r3, [r7, #0]
 801236c:	607a      	str	r2, [r7, #4]
 801236e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012372:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8012376:	f7ee f9ef 	bl	8000758 <__aeabi_uldivmod>
 801237a:	4602      	mov	r2, r0
 801237c:	460b      	mov	r3, r1
 801237e:	4610      	mov	r0, r2
 8012380:	4619      	mov	r1, r3
 8012382:	f04f 0200 	mov.w	r2, #0
 8012386:	f04f 0300 	mov.w	r3, #0
 801238a:	020b      	lsls	r3, r1, #8
 801238c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8012390:	0202      	lsls	r2, r0, #8
 8012392:	6979      	ldr	r1, [r7, #20]
 8012394:	6849      	ldr	r1, [r1, #4]
 8012396:	0849      	lsrs	r1, r1, #1
 8012398:	2000      	movs	r0, #0
 801239a:	460c      	mov	r4, r1
 801239c:	4605      	mov	r5, r0
 801239e:	eb12 0804 	adds.w	r8, r2, r4
 80123a2:	eb43 0905 	adc.w	r9, r3, r5
 80123a6:	697b      	ldr	r3, [r7, #20]
 80123a8:	685b      	ldr	r3, [r3, #4]
 80123aa:	2200      	movs	r2, #0
 80123ac:	469a      	mov	sl, r3
 80123ae:	4693      	mov	fp, r2
 80123b0:	4652      	mov	r2, sl
 80123b2:	465b      	mov	r3, fp
 80123b4:	4640      	mov	r0, r8
 80123b6:	4649      	mov	r1, r9
 80123b8:	f7ee f9ce 	bl	8000758 <__aeabi_uldivmod>
 80123bc:	4602      	mov	r2, r0
 80123be:	460b      	mov	r3, r1
 80123c0:	4613      	mov	r3, r2
 80123c2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80123c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80123ca:	d308      	bcc.n	80123de <UART_SetConfig+0x9a2>
 80123cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80123d2:	d204      	bcs.n	80123de <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80123d4:	697b      	ldr	r3, [r7, #20]
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80123da:	60da      	str	r2, [r3, #12]
 80123dc:	e17f      	b.n	80126de <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80123de:	2301      	movs	r3, #1
 80123e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80123e4:	e17b      	b.n	80126de <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80123e6:	697b      	ldr	r3, [r7, #20]
 80123e8:	69db      	ldr	r3, [r3, #28]
 80123ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80123ee:	f040 80bd 	bne.w	801256c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80123f2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80123f6:	2b20      	cmp	r3, #32
 80123f8:	dc48      	bgt.n	801248c <UART_SetConfig+0xa50>
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	db7b      	blt.n	80124f6 <UART_SetConfig+0xaba>
 80123fe:	2b20      	cmp	r3, #32
 8012400:	d879      	bhi.n	80124f6 <UART_SetConfig+0xaba>
 8012402:	a201      	add	r2, pc, #4	; (adr r2, 8012408 <UART_SetConfig+0x9cc>)
 8012404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012408:	08012493 	.word	0x08012493
 801240c:	0801249b 	.word	0x0801249b
 8012410:	080124f7 	.word	0x080124f7
 8012414:	080124f7 	.word	0x080124f7
 8012418:	080124a3 	.word	0x080124a3
 801241c:	080124f7 	.word	0x080124f7
 8012420:	080124f7 	.word	0x080124f7
 8012424:	080124f7 	.word	0x080124f7
 8012428:	080124b3 	.word	0x080124b3
 801242c:	080124f7 	.word	0x080124f7
 8012430:	080124f7 	.word	0x080124f7
 8012434:	080124f7 	.word	0x080124f7
 8012438:	080124f7 	.word	0x080124f7
 801243c:	080124f7 	.word	0x080124f7
 8012440:	080124f7 	.word	0x080124f7
 8012444:	080124f7 	.word	0x080124f7
 8012448:	080124c3 	.word	0x080124c3
 801244c:	080124f7 	.word	0x080124f7
 8012450:	080124f7 	.word	0x080124f7
 8012454:	080124f7 	.word	0x080124f7
 8012458:	080124f7 	.word	0x080124f7
 801245c:	080124f7 	.word	0x080124f7
 8012460:	080124f7 	.word	0x080124f7
 8012464:	080124f7 	.word	0x080124f7
 8012468:	080124f7 	.word	0x080124f7
 801246c:	080124f7 	.word	0x080124f7
 8012470:	080124f7 	.word	0x080124f7
 8012474:	080124f7 	.word	0x080124f7
 8012478:	080124f7 	.word	0x080124f7
 801247c:	080124f7 	.word	0x080124f7
 8012480:	080124f7 	.word	0x080124f7
 8012484:	080124f7 	.word	0x080124f7
 8012488:	080124e9 	.word	0x080124e9
 801248c:	2b40      	cmp	r3, #64	; 0x40
 801248e:	d02e      	beq.n	80124ee <UART_SetConfig+0xab2>
 8012490:	e031      	b.n	80124f6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012492:	f7f9 f8cd 	bl	800b630 <HAL_RCC_GetPCLK1Freq>
 8012496:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012498:	e033      	b.n	8012502 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801249a:	f7f9 f8df 	bl	800b65c <HAL_RCC_GetPCLK2Freq>
 801249e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80124a0:	e02f      	b.n	8012502 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80124a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80124a6:	4618      	mov	r0, r3
 80124a8:	f7fa ff76 	bl	800d398 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80124ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80124b0:	e027      	b.n	8012502 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80124b2:	f107 0318 	add.w	r3, r7, #24
 80124b6:	4618      	mov	r0, r3
 80124b8:	f7fb f8c2 	bl	800d640 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80124bc:	69fb      	ldr	r3, [r7, #28]
 80124be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80124c0:	e01f      	b.n	8012502 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80124c2:	4b69      	ldr	r3, [pc, #420]	; (8012668 <UART_SetConfig+0xc2c>)
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	f003 0320 	and.w	r3, r3, #32
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d009      	beq.n	80124e2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80124ce:	4b66      	ldr	r3, [pc, #408]	; (8012668 <UART_SetConfig+0xc2c>)
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	08db      	lsrs	r3, r3, #3
 80124d4:	f003 0303 	and.w	r3, r3, #3
 80124d8:	4a64      	ldr	r2, [pc, #400]	; (801266c <UART_SetConfig+0xc30>)
 80124da:	fa22 f303 	lsr.w	r3, r2, r3
 80124de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80124e0:	e00f      	b.n	8012502 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80124e2:	4b62      	ldr	r3, [pc, #392]	; (801266c <UART_SetConfig+0xc30>)
 80124e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80124e6:	e00c      	b.n	8012502 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80124e8:	4b61      	ldr	r3, [pc, #388]	; (8012670 <UART_SetConfig+0xc34>)
 80124ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80124ec:	e009      	b.n	8012502 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80124ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80124f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80124f4:	e005      	b.n	8012502 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80124f6:	2300      	movs	r3, #0
 80124f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80124fa:	2301      	movs	r3, #1
 80124fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8012500:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8012502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012504:	2b00      	cmp	r3, #0
 8012506:	f000 80ea 	beq.w	80126de <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801250a:	697b      	ldr	r3, [r7, #20]
 801250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801250e:	4a55      	ldr	r2, [pc, #340]	; (8012664 <UART_SetConfig+0xc28>)
 8012510:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012514:	461a      	mov	r2, r3
 8012516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012518:	fbb3 f3f2 	udiv	r3, r3, r2
 801251c:	005a      	lsls	r2, r3, #1
 801251e:	697b      	ldr	r3, [r7, #20]
 8012520:	685b      	ldr	r3, [r3, #4]
 8012522:	085b      	lsrs	r3, r3, #1
 8012524:	441a      	add	r2, r3
 8012526:	697b      	ldr	r3, [r7, #20]
 8012528:	685b      	ldr	r3, [r3, #4]
 801252a:	fbb2 f3f3 	udiv	r3, r2, r3
 801252e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012532:	2b0f      	cmp	r3, #15
 8012534:	d916      	bls.n	8012564 <UART_SetConfig+0xb28>
 8012536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801253c:	d212      	bcs.n	8012564 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801253e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012540:	b29b      	uxth	r3, r3
 8012542:	f023 030f 	bic.w	r3, r3, #15
 8012546:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801254a:	085b      	lsrs	r3, r3, #1
 801254c:	b29b      	uxth	r3, r3
 801254e:	f003 0307 	and.w	r3, r3, #7
 8012552:	b29a      	uxth	r2, r3
 8012554:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012556:	4313      	orrs	r3, r2
 8012558:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 801255a:	697b      	ldr	r3, [r7, #20]
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8012560:	60da      	str	r2, [r3, #12]
 8012562:	e0bc      	b.n	80126de <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8012564:	2301      	movs	r3, #1
 8012566:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801256a:	e0b8      	b.n	80126de <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 801256c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012570:	2b20      	cmp	r3, #32
 8012572:	dc4b      	bgt.n	801260c <UART_SetConfig+0xbd0>
 8012574:	2b00      	cmp	r3, #0
 8012576:	f2c0 8087 	blt.w	8012688 <UART_SetConfig+0xc4c>
 801257a:	2b20      	cmp	r3, #32
 801257c:	f200 8084 	bhi.w	8012688 <UART_SetConfig+0xc4c>
 8012580:	a201      	add	r2, pc, #4	; (adr r2, 8012588 <UART_SetConfig+0xb4c>)
 8012582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012586:	bf00      	nop
 8012588:	08012613 	.word	0x08012613
 801258c:	0801261b 	.word	0x0801261b
 8012590:	08012689 	.word	0x08012689
 8012594:	08012689 	.word	0x08012689
 8012598:	08012623 	.word	0x08012623
 801259c:	08012689 	.word	0x08012689
 80125a0:	08012689 	.word	0x08012689
 80125a4:	08012689 	.word	0x08012689
 80125a8:	08012633 	.word	0x08012633
 80125ac:	08012689 	.word	0x08012689
 80125b0:	08012689 	.word	0x08012689
 80125b4:	08012689 	.word	0x08012689
 80125b8:	08012689 	.word	0x08012689
 80125bc:	08012689 	.word	0x08012689
 80125c0:	08012689 	.word	0x08012689
 80125c4:	08012689 	.word	0x08012689
 80125c8:	08012643 	.word	0x08012643
 80125cc:	08012689 	.word	0x08012689
 80125d0:	08012689 	.word	0x08012689
 80125d4:	08012689 	.word	0x08012689
 80125d8:	08012689 	.word	0x08012689
 80125dc:	08012689 	.word	0x08012689
 80125e0:	08012689 	.word	0x08012689
 80125e4:	08012689 	.word	0x08012689
 80125e8:	08012689 	.word	0x08012689
 80125ec:	08012689 	.word	0x08012689
 80125f0:	08012689 	.word	0x08012689
 80125f4:	08012689 	.word	0x08012689
 80125f8:	08012689 	.word	0x08012689
 80125fc:	08012689 	.word	0x08012689
 8012600:	08012689 	.word	0x08012689
 8012604:	08012689 	.word	0x08012689
 8012608:	0801267b 	.word	0x0801267b
 801260c:	2b40      	cmp	r3, #64	; 0x40
 801260e:	d037      	beq.n	8012680 <UART_SetConfig+0xc44>
 8012610:	e03a      	b.n	8012688 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012612:	f7f9 f80d 	bl	800b630 <HAL_RCC_GetPCLK1Freq>
 8012616:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012618:	e03c      	b.n	8012694 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801261a:	f7f9 f81f 	bl	800b65c <HAL_RCC_GetPCLK2Freq>
 801261e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8012620:	e038      	b.n	8012694 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012626:	4618      	mov	r0, r3
 8012628:	f7fa feb6 	bl	800d398 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801262c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801262e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012630:	e030      	b.n	8012694 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012632:	f107 0318 	add.w	r3, r7, #24
 8012636:	4618      	mov	r0, r3
 8012638:	f7fb f802 	bl	800d640 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801263c:	69fb      	ldr	r3, [r7, #28]
 801263e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012640:	e028      	b.n	8012694 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012642:	4b09      	ldr	r3, [pc, #36]	; (8012668 <UART_SetConfig+0xc2c>)
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	f003 0320 	and.w	r3, r3, #32
 801264a:	2b00      	cmp	r3, #0
 801264c:	d012      	beq.n	8012674 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801264e:	4b06      	ldr	r3, [pc, #24]	; (8012668 <UART_SetConfig+0xc2c>)
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	08db      	lsrs	r3, r3, #3
 8012654:	f003 0303 	and.w	r3, r3, #3
 8012658:	4a04      	ldr	r2, [pc, #16]	; (801266c <UART_SetConfig+0xc30>)
 801265a:	fa22 f303 	lsr.w	r3, r2, r3
 801265e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8012660:	e018      	b.n	8012694 <UART_SetConfig+0xc58>
 8012662:	bf00      	nop
 8012664:	0801f7c8 	.word	0x0801f7c8
 8012668:	58024400 	.word	0x58024400
 801266c:	03d09000 	.word	0x03d09000
 8012670:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8012674:	4b24      	ldr	r3, [pc, #144]	; (8012708 <UART_SetConfig+0xccc>)
 8012676:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012678:	e00c      	b.n	8012694 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801267a:	4b24      	ldr	r3, [pc, #144]	; (801270c <UART_SetConfig+0xcd0>)
 801267c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801267e:	e009      	b.n	8012694 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012680:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012684:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012686:	e005      	b.n	8012694 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8012688:	2300      	movs	r3, #0
 801268a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801268c:	2301      	movs	r3, #1
 801268e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8012692:	bf00      	nop
    }

    if (pclk != 0U)
 8012694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012696:	2b00      	cmp	r3, #0
 8012698:	d021      	beq.n	80126de <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801269a:	697b      	ldr	r3, [r7, #20]
 801269c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801269e:	4a1c      	ldr	r2, [pc, #112]	; (8012710 <UART_SetConfig+0xcd4>)
 80126a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80126a4:	461a      	mov	r2, r3
 80126a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126a8:	fbb3 f2f2 	udiv	r2, r3, r2
 80126ac:	697b      	ldr	r3, [r7, #20]
 80126ae:	685b      	ldr	r3, [r3, #4]
 80126b0:	085b      	lsrs	r3, r3, #1
 80126b2:	441a      	add	r2, r3
 80126b4:	697b      	ldr	r3, [r7, #20]
 80126b6:	685b      	ldr	r3, [r3, #4]
 80126b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80126bc:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80126be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126c0:	2b0f      	cmp	r3, #15
 80126c2:	d909      	bls.n	80126d8 <UART_SetConfig+0xc9c>
 80126c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80126ca:	d205      	bcs.n	80126d8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80126cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126ce:	b29a      	uxth	r2, r3
 80126d0:	697b      	ldr	r3, [r7, #20]
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	60da      	str	r2, [r3, #12]
 80126d6:	e002      	b.n	80126de <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80126d8:	2301      	movs	r3, #1
 80126da:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80126de:	697b      	ldr	r3, [r7, #20]
 80126e0:	2201      	movs	r2, #1
 80126e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80126e6:	697b      	ldr	r3, [r7, #20]
 80126e8:	2201      	movs	r2, #1
 80126ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80126ee:	697b      	ldr	r3, [r7, #20]
 80126f0:	2200      	movs	r2, #0
 80126f2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80126f4:	697b      	ldr	r3, [r7, #20]
 80126f6:	2200      	movs	r2, #0
 80126f8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80126fa:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80126fe:	4618      	mov	r0, r3
 8012700:	3748      	adds	r7, #72	; 0x48
 8012702:	46bd      	mov	sp, r7
 8012704:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012708:	03d09000 	.word	0x03d09000
 801270c:	003d0900 	.word	0x003d0900
 8012710:	0801f7c8 	.word	0x0801f7c8

08012714 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012714:	b480      	push	{r7}
 8012716:	b083      	sub	sp, #12
 8012718:	af00      	add	r7, sp, #0
 801271a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012720:	f003 0301 	and.w	r3, r3, #1
 8012724:	2b00      	cmp	r3, #0
 8012726:	d00a      	beq.n	801273e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	685b      	ldr	r3, [r3, #4]
 801272e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	430a      	orrs	r2, r1
 801273c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012742:	f003 0302 	and.w	r3, r3, #2
 8012746:	2b00      	cmp	r3, #0
 8012748:	d00a      	beq.n	8012760 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	685b      	ldr	r3, [r3, #4]
 8012750:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	681b      	ldr	r3, [r3, #0]
 801275c:	430a      	orrs	r2, r1
 801275e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012764:	f003 0304 	and.w	r3, r3, #4
 8012768:	2b00      	cmp	r3, #0
 801276a:	d00a      	beq.n	8012782 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	685b      	ldr	r3, [r3, #4]
 8012772:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	430a      	orrs	r2, r1
 8012780:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012786:	f003 0308 	and.w	r3, r3, #8
 801278a:	2b00      	cmp	r3, #0
 801278c:	d00a      	beq.n	80127a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	685b      	ldr	r3, [r3, #4]
 8012794:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	430a      	orrs	r2, r1
 80127a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127a8:	f003 0310 	and.w	r3, r3, #16
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d00a      	beq.n	80127c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	689b      	ldr	r3, [r3, #8]
 80127b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	430a      	orrs	r2, r1
 80127c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127ca:	f003 0320 	and.w	r3, r3, #32
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d00a      	beq.n	80127e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	689b      	ldr	r3, [r3, #8]
 80127d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	430a      	orrs	r2, r1
 80127e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d01a      	beq.n	801282a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	685b      	ldr	r3, [r3, #4]
 80127fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	430a      	orrs	r2, r1
 8012808:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801280e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012812:	d10a      	bne.n	801282a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	685b      	ldr	r3, [r3, #4]
 801281a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	430a      	orrs	r2, r1
 8012828:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801282e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012832:	2b00      	cmp	r3, #0
 8012834:	d00a      	beq.n	801284c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	685b      	ldr	r3, [r3, #4]
 801283c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	430a      	orrs	r2, r1
 801284a:	605a      	str	r2, [r3, #4]
  }
}
 801284c:	bf00      	nop
 801284e:	370c      	adds	r7, #12
 8012850:	46bd      	mov	sp, r7
 8012852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012856:	4770      	bx	lr

08012858 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012858:	b580      	push	{r7, lr}
 801285a:	b098      	sub	sp, #96	; 0x60
 801285c:	af02      	add	r7, sp, #8
 801285e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	2200      	movs	r2, #0
 8012864:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012868:	f7f1 fbd4 	bl	8004014 <HAL_GetTick>
 801286c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	f003 0308 	and.w	r3, r3, #8
 8012878:	2b08      	cmp	r3, #8
 801287a:	d12f      	bne.n	80128dc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801287c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012880:	9300      	str	r3, [sp, #0]
 8012882:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012884:	2200      	movs	r2, #0
 8012886:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801288a:	6878      	ldr	r0, [r7, #4]
 801288c:	f000 f88e 	bl	80129ac <UART_WaitOnFlagUntilTimeout>
 8012890:	4603      	mov	r3, r0
 8012892:	2b00      	cmp	r3, #0
 8012894:	d022      	beq.n	80128dc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801289c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801289e:	e853 3f00 	ldrex	r3, [r3]
 80128a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80128a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80128a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80128aa:	653b      	str	r3, [r7, #80]	; 0x50
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	461a      	mov	r2, r3
 80128b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80128b4:	647b      	str	r3, [r7, #68]	; 0x44
 80128b6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80128ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80128bc:	e841 2300 	strex	r3, r2, [r1]
 80128c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80128c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d1e6      	bne.n	8012896 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	2220      	movs	r2, #32
 80128cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	2200      	movs	r2, #0
 80128d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80128d8:	2303      	movs	r3, #3
 80128da:	e063      	b.n	80129a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	f003 0304 	and.w	r3, r3, #4
 80128e6:	2b04      	cmp	r3, #4
 80128e8:	d149      	bne.n	801297e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80128ea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80128ee:	9300      	str	r3, [sp, #0]
 80128f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80128f2:	2200      	movs	r2, #0
 80128f4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80128f8:	6878      	ldr	r0, [r7, #4]
 80128fa:	f000 f857 	bl	80129ac <UART_WaitOnFlagUntilTimeout>
 80128fe:	4603      	mov	r3, r0
 8012900:	2b00      	cmp	r3, #0
 8012902:	d03c      	beq.n	801297e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801290c:	e853 3f00 	ldrex	r3, [r3]
 8012910:	623b      	str	r3, [r7, #32]
   return(result);
 8012912:	6a3b      	ldr	r3, [r7, #32]
 8012914:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012918:	64fb      	str	r3, [r7, #76]	; 0x4c
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	461a      	mov	r2, r3
 8012920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012922:	633b      	str	r3, [r7, #48]	; 0x30
 8012924:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012926:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801292a:	e841 2300 	strex	r3, r2, [r1]
 801292e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8012930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012932:	2b00      	cmp	r3, #0
 8012934:	d1e6      	bne.n	8012904 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	3308      	adds	r3, #8
 801293c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801293e:	693b      	ldr	r3, [r7, #16]
 8012940:	e853 3f00 	ldrex	r3, [r3]
 8012944:	60fb      	str	r3, [r7, #12]
   return(result);
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	f023 0301 	bic.w	r3, r3, #1
 801294c:	64bb      	str	r3, [r7, #72]	; 0x48
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	3308      	adds	r3, #8
 8012954:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012956:	61fa      	str	r2, [r7, #28]
 8012958:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801295a:	69b9      	ldr	r1, [r7, #24]
 801295c:	69fa      	ldr	r2, [r7, #28]
 801295e:	e841 2300 	strex	r3, r2, [r1]
 8012962:	617b      	str	r3, [r7, #20]
   return(result);
 8012964:	697b      	ldr	r3, [r7, #20]
 8012966:	2b00      	cmp	r3, #0
 8012968:	d1e5      	bne.n	8012936 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	2220      	movs	r2, #32
 801296e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	2200      	movs	r2, #0
 8012976:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801297a:	2303      	movs	r3, #3
 801297c:	e012      	b.n	80129a4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	2220      	movs	r2, #32
 8012982:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	2220      	movs	r2, #32
 801298a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	2200      	movs	r2, #0
 8012992:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	2200      	movs	r2, #0
 8012998:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	2200      	movs	r2, #0
 801299e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80129a2:	2300      	movs	r3, #0
}
 80129a4:	4618      	mov	r0, r3
 80129a6:	3758      	adds	r7, #88	; 0x58
 80129a8:	46bd      	mov	sp, r7
 80129aa:	bd80      	pop	{r7, pc}

080129ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80129ac:	b580      	push	{r7, lr}
 80129ae:	b084      	sub	sp, #16
 80129b0:	af00      	add	r7, sp, #0
 80129b2:	60f8      	str	r0, [r7, #12]
 80129b4:	60b9      	str	r1, [r7, #8]
 80129b6:	603b      	str	r3, [r7, #0]
 80129b8:	4613      	mov	r3, r2
 80129ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80129bc:	e049      	b.n	8012a52 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80129be:	69bb      	ldr	r3, [r7, #24]
 80129c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129c4:	d045      	beq.n	8012a52 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80129c6:	f7f1 fb25 	bl	8004014 <HAL_GetTick>
 80129ca:	4602      	mov	r2, r0
 80129cc:	683b      	ldr	r3, [r7, #0]
 80129ce:	1ad3      	subs	r3, r2, r3
 80129d0:	69ba      	ldr	r2, [r7, #24]
 80129d2:	429a      	cmp	r2, r3
 80129d4:	d302      	bcc.n	80129dc <UART_WaitOnFlagUntilTimeout+0x30>
 80129d6:	69bb      	ldr	r3, [r7, #24]
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d101      	bne.n	80129e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80129dc:	2303      	movs	r3, #3
 80129de:	e048      	b.n	8012a72 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	f003 0304 	and.w	r3, r3, #4
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d031      	beq.n	8012a52 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	69db      	ldr	r3, [r3, #28]
 80129f4:	f003 0308 	and.w	r3, r3, #8
 80129f8:	2b08      	cmp	r3, #8
 80129fa:	d110      	bne.n	8012a1e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	2208      	movs	r2, #8
 8012a02:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8012a04:	68f8      	ldr	r0, [r7, #12]
 8012a06:	f000 f839 	bl	8012a7c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	2208      	movs	r2, #8
 8012a0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	2200      	movs	r2, #0
 8012a16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8012a1a:	2301      	movs	r3, #1
 8012a1c:	e029      	b.n	8012a72 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	69db      	ldr	r3, [r3, #28]
 8012a24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012a28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012a2c:	d111      	bne.n	8012a52 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	681b      	ldr	r3, [r3, #0]
 8012a32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012a36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8012a38:	68f8      	ldr	r0, [r7, #12]
 8012a3a:	f000 f81f 	bl	8012a7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	2220      	movs	r2, #32
 8012a42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012a46:	68fb      	ldr	r3, [r7, #12]
 8012a48:	2200      	movs	r2, #0
 8012a4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8012a4e:	2303      	movs	r3, #3
 8012a50:	e00f      	b.n	8012a72 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	69da      	ldr	r2, [r3, #28]
 8012a58:	68bb      	ldr	r3, [r7, #8]
 8012a5a:	4013      	ands	r3, r2
 8012a5c:	68ba      	ldr	r2, [r7, #8]
 8012a5e:	429a      	cmp	r2, r3
 8012a60:	bf0c      	ite	eq
 8012a62:	2301      	moveq	r3, #1
 8012a64:	2300      	movne	r3, #0
 8012a66:	b2db      	uxtb	r3, r3
 8012a68:	461a      	mov	r2, r3
 8012a6a:	79fb      	ldrb	r3, [r7, #7]
 8012a6c:	429a      	cmp	r2, r3
 8012a6e:	d0a6      	beq.n	80129be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012a70:	2300      	movs	r3, #0
}
 8012a72:	4618      	mov	r0, r3
 8012a74:	3710      	adds	r7, #16
 8012a76:	46bd      	mov	sp, r7
 8012a78:	bd80      	pop	{r7, pc}
	...

08012a7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012a7c:	b480      	push	{r7}
 8012a7e:	b095      	sub	sp, #84	; 0x54
 8012a80:	af00      	add	r7, sp, #0
 8012a82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a8c:	e853 3f00 	ldrex	r3, [r3]
 8012a90:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012a98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	461a      	mov	r2, r3
 8012aa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012aa2:	643b      	str	r3, [r7, #64]	; 0x40
 8012aa4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012aa6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012aa8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012aaa:	e841 2300 	strex	r3, r2, [r1]
 8012aae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d1e6      	bne.n	8012a84 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	3308      	adds	r3, #8
 8012abc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012abe:	6a3b      	ldr	r3, [r7, #32]
 8012ac0:	e853 3f00 	ldrex	r3, [r3]
 8012ac4:	61fb      	str	r3, [r7, #28]
   return(result);
 8012ac6:	69fa      	ldr	r2, [r7, #28]
 8012ac8:	4b1e      	ldr	r3, [pc, #120]	; (8012b44 <UART_EndRxTransfer+0xc8>)
 8012aca:	4013      	ands	r3, r2
 8012acc:	64bb      	str	r3, [r7, #72]	; 0x48
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	3308      	adds	r3, #8
 8012ad4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012ad6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012ad8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ada:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012adc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012ade:	e841 2300 	strex	r3, r2, [r1]
 8012ae2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d1e5      	bne.n	8012ab6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012aee:	2b01      	cmp	r3, #1
 8012af0:	d118      	bne.n	8012b24 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012af8:	68fb      	ldr	r3, [r7, #12]
 8012afa:	e853 3f00 	ldrex	r3, [r3]
 8012afe:	60bb      	str	r3, [r7, #8]
   return(result);
 8012b00:	68bb      	ldr	r3, [r7, #8]
 8012b02:	f023 0310 	bic.w	r3, r3, #16
 8012b06:	647b      	str	r3, [r7, #68]	; 0x44
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	461a      	mov	r2, r3
 8012b0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012b10:	61bb      	str	r3, [r7, #24]
 8012b12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012b14:	6979      	ldr	r1, [r7, #20]
 8012b16:	69ba      	ldr	r2, [r7, #24]
 8012b18:	e841 2300 	strex	r3, r2, [r1]
 8012b1c:	613b      	str	r3, [r7, #16]
   return(result);
 8012b1e:	693b      	ldr	r3, [r7, #16]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d1e6      	bne.n	8012af2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	2220      	movs	r2, #32
 8012b28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	2200      	movs	r2, #0
 8012b30:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	2200      	movs	r2, #0
 8012b36:	675a      	str	r2, [r3, #116]	; 0x74
}
 8012b38:	bf00      	nop
 8012b3a:	3754      	adds	r7, #84	; 0x54
 8012b3c:	46bd      	mov	sp, r7
 8012b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b42:	4770      	bx	lr
 8012b44:	effffffe 	.word	0xeffffffe

08012b48 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012b48:	b480      	push	{r7}
 8012b4a:	b085      	sub	sp, #20
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012b56:	2b01      	cmp	r3, #1
 8012b58:	d101      	bne.n	8012b5e <HAL_UARTEx_DisableFifoMode+0x16>
 8012b5a:	2302      	movs	r3, #2
 8012b5c:	e027      	b.n	8012bae <HAL_UARTEx_DisableFifoMode+0x66>
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	2201      	movs	r2, #1
 8012b62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	2224      	movs	r2, #36	; 0x24
 8012b6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	681a      	ldr	r2, [r3, #0]
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	681b      	ldr	r3, [r3, #0]
 8012b80:	f022 0201 	bic.w	r2, r2, #1
 8012b84:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012b8c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	2200      	movs	r2, #0
 8012b92:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	68fa      	ldr	r2, [r7, #12]
 8012b9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	2220      	movs	r2, #32
 8012ba0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	2200      	movs	r2, #0
 8012ba8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012bac:	2300      	movs	r3, #0
}
 8012bae:	4618      	mov	r0, r3
 8012bb0:	3714      	adds	r7, #20
 8012bb2:	46bd      	mov	sp, r7
 8012bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bb8:	4770      	bx	lr

08012bba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012bba:	b580      	push	{r7, lr}
 8012bbc:	b084      	sub	sp, #16
 8012bbe:	af00      	add	r7, sp, #0
 8012bc0:	6078      	str	r0, [r7, #4]
 8012bc2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012bca:	2b01      	cmp	r3, #1
 8012bcc:	d101      	bne.n	8012bd2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8012bce:	2302      	movs	r3, #2
 8012bd0:	e02d      	b.n	8012c2e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	2201      	movs	r2, #1
 8012bd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	2224      	movs	r2, #36	; 0x24
 8012bde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	681a      	ldr	r2, [r3, #0]
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	f022 0201 	bic.w	r2, r2, #1
 8012bf8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	689b      	ldr	r3, [r3, #8]
 8012c00:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	683a      	ldr	r2, [r7, #0]
 8012c0a:	430a      	orrs	r2, r1
 8012c0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012c0e:	6878      	ldr	r0, [r7, #4]
 8012c10:	f000 f850 	bl	8012cb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	68fa      	ldr	r2, [r7, #12]
 8012c1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	2220      	movs	r2, #32
 8012c20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	2200      	movs	r2, #0
 8012c28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012c2c:	2300      	movs	r3, #0
}
 8012c2e:	4618      	mov	r0, r3
 8012c30:	3710      	adds	r7, #16
 8012c32:	46bd      	mov	sp, r7
 8012c34:	bd80      	pop	{r7, pc}

08012c36 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012c36:	b580      	push	{r7, lr}
 8012c38:	b084      	sub	sp, #16
 8012c3a:	af00      	add	r7, sp, #0
 8012c3c:	6078      	str	r0, [r7, #4]
 8012c3e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012c46:	2b01      	cmp	r3, #1
 8012c48:	d101      	bne.n	8012c4e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012c4a:	2302      	movs	r3, #2
 8012c4c:	e02d      	b.n	8012caa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	2201      	movs	r2, #1
 8012c52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	2224      	movs	r2, #36	; 0x24
 8012c5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	681a      	ldr	r2, [r3, #0]
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	f022 0201 	bic.w	r2, r2, #1
 8012c74:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	689b      	ldr	r3, [r3, #8]
 8012c7c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	683a      	ldr	r2, [r7, #0]
 8012c86:	430a      	orrs	r2, r1
 8012c88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012c8a:	6878      	ldr	r0, [r7, #4]
 8012c8c:	f000 f812 	bl	8012cb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	68fa      	ldr	r2, [r7, #12]
 8012c96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	2220      	movs	r2, #32
 8012c9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	2200      	movs	r2, #0
 8012ca4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012ca8:	2300      	movs	r3, #0
}
 8012caa:	4618      	mov	r0, r3
 8012cac:	3710      	adds	r7, #16
 8012cae:	46bd      	mov	sp, r7
 8012cb0:	bd80      	pop	{r7, pc}
	...

08012cb4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012cb4:	b480      	push	{r7}
 8012cb6:	b085      	sub	sp, #20
 8012cb8:	af00      	add	r7, sp, #0
 8012cba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d108      	bne.n	8012cd6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	2201      	movs	r2, #1
 8012cc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	2201      	movs	r2, #1
 8012cd0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012cd4:	e031      	b.n	8012d3a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012cd6:	2310      	movs	r3, #16
 8012cd8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012cda:	2310      	movs	r3, #16
 8012cdc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	689b      	ldr	r3, [r3, #8]
 8012ce4:	0e5b      	lsrs	r3, r3, #25
 8012ce6:	b2db      	uxtb	r3, r3
 8012ce8:	f003 0307 	and.w	r3, r3, #7
 8012cec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	689b      	ldr	r3, [r3, #8]
 8012cf4:	0f5b      	lsrs	r3, r3, #29
 8012cf6:	b2db      	uxtb	r3, r3
 8012cf8:	f003 0307 	and.w	r3, r3, #7
 8012cfc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012cfe:	7bbb      	ldrb	r3, [r7, #14]
 8012d00:	7b3a      	ldrb	r2, [r7, #12]
 8012d02:	4911      	ldr	r1, [pc, #68]	; (8012d48 <UARTEx_SetNbDataToProcess+0x94>)
 8012d04:	5c8a      	ldrb	r2, [r1, r2]
 8012d06:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012d0a:	7b3a      	ldrb	r2, [r7, #12]
 8012d0c:	490f      	ldr	r1, [pc, #60]	; (8012d4c <UARTEx_SetNbDataToProcess+0x98>)
 8012d0e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012d10:	fb93 f3f2 	sdiv	r3, r3, r2
 8012d14:	b29a      	uxth	r2, r3
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012d1c:	7bfb      	ldrb	r3, [r7, #15]
 8012d1e:	7b7a      	ldrb	r2, [r7, #13]
 8012d20:	4909      	ldr	r1, [pc, #36]	; (8012d48 <UARTEx_SetNbDataToProcess+0x94>)
 8012d22:	5c8a      	ldrb	r2, [r1, r2]
 8012d24:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012d28:	7b7a      	ldrb	r2, [r7, #13]
 8012d2a:	4908      	ldr	r1, [pc, #32]	; (8012d4c <UARTEx_SetNbDataToProcess+0x98>)
 8012d2c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012d2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8012d32:	b29a      	uxth	r2, r3
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012d3a:	bf00      	nop
 8012d3c:	3714      	adds	r7, #20
 8012d3e:	46bd      	mov	sp, r7
 8012d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d44:	4770      	bx	lr
 8012d46:	bf00      	nop
 8012d48:	0801f7e0 	.word	0x0801f7e0
 8012d4c:	0801f7e8 	.word	0x0801f7e8

08012d50 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8012d50:	b084      	sub	sp, #16
 8012d52:	b480      	push	{r7}
 8012d54:	b085      	sub	sp, #20
 8012d56:	af00      	add	r7, sp, #0
 8012d58:	6078      	str	r0, [r7, #4]
 8012d5a:	f107 001c 	add.w	r0, r7, #28
 8012d5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8012d62:	2300      	movs	r3, #0
 8012d64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8012d66:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8012d68:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8012d6a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8012d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8012d6e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8012d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8012d72:	431a      	orrs	r2, r3
             Init.ClockDiv
 8012d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8012d76:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8012d78:	68fa      	ldr	r2, [r7, #12]
 8012d7a:	4313      	orrs	r3, r2
 8012d7c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	685a      	ldr	r2, [r3, #4]
 8012d82:	4b07      	ldr	r3, [pc, #28]	; (8012da0 <SDMMC_Init+0x50>)
 8012d84:	4013      	ands	r3, r2
 8012d86:	68fa      	ldr	r2, [r7, #12]
 8012d88:	431a      	orrs	r2, r3
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8012d8e:	2300      	movs	r3, #0
}
 8012d90:	4618      	mov	r0, r3
 8012d92:	3714      	adds	r7, #20
 8012d94:	46bd      	mov	sp, r7
 8012d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d9a:	b004      	add	sp, #16
 8012d9c:	4770      	bx	lr
 8012d9e:	bf00      	nop
 8012da0:	ffc02c00 	.word	0xffc02c00

08012da4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8012da4:	b480      	push	{r7}
 8012da6:	b083      	sub	sp, #12
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8012db2:	4618      	mov	r0, r3
 8012db4:	370c      	adds	r7, #12
 8012db6:	46bd      	mov	sp, r7
 8012db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dbc:	4770      	bx	lr

08012dbe <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8012dbe:	b480      	push	{r7}
 8012dc0:	b083      	sub	sp, #12
 8012dc2:	af00      	add	r7, sp, #0
 8012dc4:	6078      	str	r0, [r7, #4]
 8012dc6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8012dc8:	683b      	ldr	r3, [r7, #0]
 8012dca:	681a      	ldr	r2, [r3, #0]
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8012dd2:	2300      	movs	r3, #0
}
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	370c      	adds	r7, #12
 8012dd8:	46bd      	mov	sp, r7
 8012dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dde:	4770      	bx	lr

08012de0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8012de0:	b480      	push	{r7}
 8012de2:	b083      	sub	sp, #12
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	f043 0203 	orr.w	r2, r3, #3
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8012df4:	2300      	movs	r3, #0
}
 8012df6:	4618      	mov	r0, r3
 8012df8:	370c      	adds	r7, #12
 8012dfa:	46bd      	mov	sp, r7
 8012dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e00:	4770      	bx	lr

08012e02 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8012e02:	b480      	push	{r7}
 8012e04:	b083      	sub	sp, #12
 8012e06:	af00      	add	r7, sp, #0
 8012e08:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	f003 0303 	and.w	r3, r3, #3
}
 8012e12:	4618      	mov	r0, r3
 8012e14:	370c      	adds	r7, #12
 8012e16:	46bd      	mov	sp, r7
 8012e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e1c:	4770      	bx	lr
	...

08012e20 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8012e20:	b480      	push	{r7}
 8012e22:	b085      	sub	sp, #20
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	6078      	str	r0, [r7, #4]
 8012e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012e2a:	2300      	movs	r3, #0
 8012e2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8012e2e:	683b      	ldr	r3, [r7, #0]
 8012e30:	681a      	ldr	r2, [r3, #0]
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012e36:	683b      	ldr	r3, [r7, #0]
 8012e38:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8012e3a:	683b      	ldr	r3, [r7, #0]
 8012e3c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012e3e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8012e40:	683b      	ldr	r3, [r7, #0]
 8012e42:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8012e44:	431a      	orrs	r2, r3
                       Command->CPSM);
 8012e46:	683b      	ldr	r3, [r7, #0]
 8012e48:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8012e4a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012e4c:	68fa      	ldr	r2, [r7, #12]
 8012e4e:	4313      	orrs	r3, r2
 8012e50:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	68da      	ldr	r2, [r3, #12]
 8012e56:	4b06      	ldr	r3, [pc, #24]	; (8012e70 <SDMMC_SendCommand+0x50>)
 8012e58:	4013      	ands	r3, r2
 8012e5a:	68fa      	ldr	r2, [r7, #12]
 8012e5c:	431a      	orrs	r2, r3
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012e62:	2300      	movs	r3, #0
}
 8012e64:	4618      	mov	r0, r3
 8012e66:	3714      	adds	r7, #20
 8012e68:	46bd      	mov	sp, r7
 8012e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e6e:	4770      	bx	lr
 8012e70:	fffee0c0 	.word	0xfffee0c0

08012e74 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8012e74:	b480      	push	{r7}
 8012e76:	b083      	sub	sp, #12
 8012e78:	af00      	add	r7, sp, #0
 8012e7a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	691b      	ldr	r3, [r3, #16]
 8012e80:	b2db      	uxtb	r3, r3
}
 8012e82:	4618      	mov	r0, r3
 8012e84:	370c      	adds	r7, #12
 8012e86:	46bd      	mov	sp, r7
 8012e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e8c:	4770      	bx	lr

08012e8e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8012e8e:	b480      	push	{r7}
 8012e90:	b085      	sub	sp, #20
 8012e92:	af00      	add	r7, sp, #0
 8012e94:	6078      	str	r0, [r7, #4]
 8012e96:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	3314      	adds	r3, #20
 8012e9c:	461a      	mov	r2, r3
 8012e9e:	683b      	ldr	r3, [r7, #0]
 8012ea0:	4413      	add	r3, r2
 8012ea2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	681b      	ldr	r3, [r3, #0]
}
 8012ea8:	4618      	mov	r0, r3
 8012eaa:	3714      	adds	r7, #20
 8012eac:	46bd      	mov	sp, r7
 8012eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb2:	4770      	bx	lr

08012eb4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8012eb4:	b480      	push	{r7}
 8012eb6:	b085      	sub	sp, #20
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	6078      	str	r0, [r7, #4]
 8012ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012ebe:	2300      	movs	r3, #0
 8012ec0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8012ec2:	683b      	ldr	r3, [r7, #0]
 8012ec4:	681a      	ldr	r2, [r3, #0]
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8012eca:	683b      	ldr	r3, [r7, #0]
 8012ecc:	685a      	ldr	r2, [r3, #4]
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012ed2:	683b      	ldr	r3, [r7, #0]
 8012ed4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8012ed6:	683b      	ldr	r3, [r7, #0]
 8012ed8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012eda:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8012edc:	683b      	ldr	r3, [r7, #0]
 8012ede:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8012ee0:	431a      	orrs	r2, r3
                       Data->DPSM);
 8012ee2:	683b      	ldr	r3, [r7, #0]
 8012ee4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8012ee6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012ee8:	68fa      	ldr	r2, [r7, #12]
 8012eea:	4313      	orrs	r3, r2
 8012eec:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ef2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	431a      	orrs	r2, r3
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8012efe:	2300      	movs	r3, #0

}
 8012f00:	4618      	mov	r0, r3
 8012f02:	3714      	adds	r7, #20
 8012f04:	46bd      	mov	sp, r7
 8012f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f0a:	4770      	bx	lr

08012f0c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8012f0c:	b580      	push	{r7, lr}
 8012f0e:	b088      	sub	sp, #32
 8012f10:	af00      	add	r7, sp, #0
 8012f12:	6078      	str	r0, [r7, #4]
 8012f14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8012f16:	683b      	ldr	r3, [r7, #0]
 8012f18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8012f1a:	2310      	movs	r3, #16
 8012f1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012f1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012f22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012f24:	2300      	movs	r3, #0
 8012f26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012f28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012f2c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012f2e:	f107 0308 	add.w	r3, r7, #8
 8012f32:	4619      	mov	r1, r3
 8012f34:	6878      	ldr	r0, [r7, #4]
 8012f36:	f7ff ff73 	bl	8012e20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8012f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8012f3e:	2110      	movs	r1, #16
 8012f40:	6878      	ldr	r0, [r7, #4]
 8012f42:	f000 fa5f 	bl	8013404 <SDMMC_GetCmdResp1>
 8012f46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012f48:	69fb      	ldr	r3, [r7, #28]
}
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	3720      	adds	r7, #32
 8012f4e:	46bd      	mov	sp, r7
 8012f50:	bd80      	pop	{r7, pc}

08012f52 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012f52:	b580      	push	{r7, lr}
 8012f54:	b088      	sub	sp, #32
 8012f56:	af00      	add	r7, sp, #0
 8012f58:	6078      	str	r0, [r7, #4]
 8012f5a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012f5c:	683b      	ldr	r3, [r7, #0]
 8012f5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8012f60:	2311      	movs	r3, #17
 8012f62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012f64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012f68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012f6a:	2300      	movs	r3, #0
 8012f6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012f6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012f72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012f74:	f107 0308 	add.w	r3, r7, #8
 8012f78:	4619      	mov	r1, r3
 8012f7a:	6878      	ldr	r0, [r7, #4]
 8012f7c:	f7ff ff50 	bl	8012e20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8012f84:	2111      	movs	r1, #17
 8012f86:	6878      	ldr	r0, [r7, #4]
 8012f88:	f000 fa3c 	bl	8013404 <SDMMC_GetCmdResp1>
 8012f8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012f8e:	69fb      	ldr	r3, [r7, #28]
}
 8012f90:	4618      	mov	r0, r3
 8012f92:	3720      	adds	r7, #32
 8012f94:	46bd      	mov	sp, r7
 8012f96:	bd80      	pop	{r7, pc}

08012f98 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012f98:	b580      	push	{r7, lr}
 8012f9a:	b088      	sub	sp, #32
 8012f9c:	af00      	add	r7, sp, #0
 8012f9e:	6078      	str	r0, [r7, #4]
 8012fa0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012fa2:	683b      	ldr	r3, [r7, #0]
 8012fa4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8012fa6:	2312      	movs	r3, #18
 8012fa8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012faa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012fae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012fb0:	2300      	movs	r3, #0
 8012fb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012fb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012fb8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012fba:	f107 0308 	add.w	r3, r7, #8
 8012fbe:	4619      	mov	r1, r3
 8012fc0:	6878      	ldr	r0, [r7, #4]
 8012fc2:	f7ff ff2d 	bl	8012e20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8012fca:	2112      	movs	r1, #18
 8012fcc:	6878      	ldr	r0, [r7, #4]
 8012fce:	f000 fa19 	bl	8013404 <SDMMC_GetCmdResp1>
 8012fd2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012fd4:	69fb      	ldr	r3, [r7, #28]
}
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	3720      	adds	r7, #32
 8012fda:	46bd      	mov	sp, r7
 8012fdc:	bd80      	pop	{r7, pc}

08012fde <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012fde:	b580      	push	{r7, lr}
 8012fe0:	b088      	sub	sp, #32
 8012fe2:	af00      	add	r7, sp, #0
 8012fe4:	6078      	str	r0, [r7, #4]
 8012fe6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012fe8:	683b      	ldr	r3, [r7, #0]
 8012fea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8012fec:	2318      	movs	r3, #24
 8012fee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012ff0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012ff4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012ff6:	2300      	movs	r3, #0
 8012ff8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012ffa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012ffe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013000:	f107 0308 	add.w	r3, r7, #8
 8013004:	4619      	mov	r1, r3
 8013006:	6878      	ldr	r0, [r7, #4]
 8013008:	f7ff ff0a 	bl	8012e20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801300c:	f241 3288 	movw	r2, #5000	; 0x1388
 8013010:	2118      	movs	r1, #24
 8013012:	6878      	ldr	r0, [r7, #4]
 8013014:	f000 f9f6 	bl	8013404 <SDMMC_GetCmdResp1>
 8013018:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801301a:	69fb      	ldr	r3, [r7, #28]
}
 801301c:	4618      	mov	r0, r3
 801301e:	3720      	adds	r7, #32
 8013020:	46bd      	mov	sp, r7
 8013022:	bd80      	pop	{r7, pc}

08013024 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8013024:	b580      	push	{r7, lr}
 8013026:	b088      	sub	sp, #32
 8013028:	af00      	add	r7, sp, #0
 801302a:	6078      	str	r0, [r7, #4]
 801302c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801302e:	683b      	ldr	r3, [r7, #0]
 8013030:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8013032:	2319      	movs	r3, #25
 8013034:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013036:	f44f 7380 	mov.w	r3, #256	; 0x100
 801303a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801303c:	2300      	movs	r3, #0
 801303e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013040:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013044:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013046:	f107 0308 	add.w	r3, r7, #8
 801304a:	4619      	mov	r1, r3
 801304c:	6878      	ldr	r0, [r7, #4]
 801304e:	f7ff fee7 	bl	8012e20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8013052:	f241 3288 	movw	r2, #5000	; 0x1388
 8013056:	2119      	movs	r1, #25
 8013058:	6878      	ldr	r0, [r7, #4]
 801305a:	f000 f9d3 	bl	8013404 <SDMMC_GetCmdResp1>
 801305e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013060:	69fb      	ldr	r3, [r7, #28]
}
 8013062:	4618      	mov	r0, r3
 8013064:	3720      	adds	r7, #32
 8013066:	46bd      	mov	sp, r7
 8013068:	bd80      	pop	{r7, pc}
	...

0801306c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 801306c:	b580      	push	{r7, lr}
 801306e:	b088      	sub	sp, #32
 8013070:	af00      	add	r7, sp, #0
 8013072:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8013074:	2300      	movs	r3, #0
 8013076:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8013078:	230c      	movs	r3, #12
 801307a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801307c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013080:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013082:	2300      	movs	r3, #0
 8013084:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013086:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801308a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	68db      	ldr	r3, [r3, #12]
 8013090:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	68db      	ldr	r3, [r3, #12]
 801309c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80130a4:	f107 0308 	add.w	r3, r7, #8
 80130a8:	4619      	mov	r1, r3
 80130aa:	6878      	ldr	r0, [r7, #4]
 80130ac:	f7ff feb8 	bl	8012e20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80130b0:	4a0b      	ldr	r2, [pc, #44]	; (80130e0 <SDMMC_CmdStopTransfer+0x74>)
 80130b2:	210c      	movs	r1, #12
 80130b4:	6878      	ldr	r0, [r7, #4]
 80130b6:	f000 f9a5 	bl	8013404 <SDMMC_GetCmdResp1>
 80130ba:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	68db      	ldr	r3, [r3, #12]
 80130c0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80130c8:	69fb      	ldr	r3, [r7, #28]
 80130ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80130ce:	d101      	bne.n	80130d4 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80130d0:	2300      	movs	r3, #0
 80130d2:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80130d4:	69fb      	ldr	r3, [r7, #28]
}
 80130d6:	4618      	mov	r0, r3
 80130d8:	3720      	adds	r7, #32
 80130da:	46bd      	mov	sp, r7
 80130dc:	bd80      	pop	{r7, pc}
 80130de:	bf00      	nop
 80130e0:	05f5e100 	.word	0x05f5e100

080130e4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80130e4:	b580      	push	{r7, lr}
 80130e6:	b088      	sub	sp, #32
 80130e8:	af00      	add	r7, sp, #0
 80130ea:	6078      	str	r0, [r7, #4]
 80130ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80130ee:	683b      	ldr	r3, [r7, #0]
 80130f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80130f2:	2307      	movs	r3, #7
 80130f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80130f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80130fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80130fc:	2300      	movs	r3, #0
 80130fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013100:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013104:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013106:	f107 0308 	add.w	r3, r7, #8
 801310a:	4619      	mov	r1, r3
 801310c:	6878      	ldr	r0, [r7, #4]
 801310e:	f7ff fe87 	bl	8012e20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8013112:	f241 3288 	movw	r2, #5000	; 0x1388
 8013116:	2107      	movs	r1, #7
 8013118:	6878      	ldr	r0, [r7, #4]
 801311a:	f000 f973 	bl	8013404 <SDMMC_GetCmdResp1>
 801311e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013120:	69fb      	ldr	r3, [r7, #28]
}
 8013122:	4618      	mov	r0, r3
 8013124:	3720      	adds	r7, #32
 8013126:	46bd      	mov	sp, r7
 8013128:	bd80      	pop	{r7, pc}

0801312a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 801312a:	b580      	push	{r7, lr}
 801312c:	b088      	sub	sp, #32
 801312e:	af00      	add	r7, sp, #0
 8013130:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8013132:	2300      	movs	r3, #0
 8013134:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8013136:	2300      	movs	r3, #0
 8013138:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 801313a:	2300      	movs	r3, #0
 801313c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801313e:	2300      	movs	r3, #0
 8013140:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013142:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013146:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013148:	f107 0308 	add.w	r3, r7, #8
 801314c:	4619      	mov	r1, r3
 801314e:	6878      	ldr	r0, [r7, #4]
 8013150:	f7ff fe66 	bl	8012e20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8013154:	6878      	ldr	r0, [r7, #4]
 8013156:	f000 fb97 	bl	8013888 <SDMMC_GetCmdError>
 801315a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801315c:	69fb      	ldr	r3, [r7, #28]
}
 801315e:	4618      	mov	r0, r3
 8013160:	3720      	adds	r7, #32
 8013162:	46bd      	mov	sp, r7
 8013164:	bd80      	pop	{r7, pc}

08013166 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8013166:	b580      	push	{r7, lr}
 8013168:	b088      	sub	sp, #32
 801316a:	af00      	add	r7, sp, #0
 801316c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801316e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8013172:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8013174:	2308      	movs	r3, #8
 8013176:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013178:	f44f 7380 	mov.w	r3, #256	; 0x100
 801317c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801317e:	2300      	movs	r3, #0
 8013180:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013182:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013186:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013188:	f107 0308 	add.w	r3, r7, #8
 801318c:	4619      	mov	r1, r3
 801318e:	6878      	ldr	r0, [r7, #4]
 8013190:	f7ff fe46 	bl	8012e20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8013194:	6878      	ldr	r0, [r7, #4]
 8013196:	f000 fb29 	bl	80137ec <SDMMC_GetCmdResp7>
 801319a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801319c:	69fb      	ldr	r3, [r7, #28]
}
 801319e:	4618      	mov	r0, r3
 80131a0:	3720      	adds	r7, #32
 80131a2:	46bd      	mov	sp, r7
 80131a4:	bd80      	pop	{r7, pc}

080131a6 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80131a6:	b580      	push	{r7, lr}
 80131a8:	b088      	sub	sp, #32
 80131aa:	af00      	add	r7, sp, #0
 80131ac:	6078      	str	r0, [r7, #4]
 80131ae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80131b0:	683b      	ldr	r3, [r7, #0]
 80131b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80131b4:	2337      	movs	r3, #55	; 0x37
 80131b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80131b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80131bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80131be:	2300      	movs	r3, #0
 80131c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80131c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80131c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80131c8:	f107 0308 	add.w	r3, r7, #8
 80131cc:	4619      	mov	r1, r3
 80131ce:	6878      	ldr	r0, [r7, #4]
 80131d0:	f7ff fe26 	bl	8012e20 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80131d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80131d8:	2137      	movs	r1, #55	; 0x37
 80131da:	6878      	ldr	r0, [r7, #4]
 80131dc:	f000 f912 	bl	8013404 <SDMMC_GetCmdResp1>
 80131e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80131e2:	69fb      	ldr	r3, [r7, #28]
}
 80131e4:	4618      	mov	r0, r3
 80131e6:	3720      	adds	r7, #32
 80131e8:	46bd      	mov	sp, r7
 80131ea:	bd80      	pop	{r7, pc}

080131ec <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80131ec:	b580      	push	{r7, lr}
 80131ee:	b088      	sub	sp, #32
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	6078      	str	r0, [r7, #4]
 80131f4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80131f6:	683b      	ldr	r3, [r7, #0]
 80131f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80131fa:	2329      	movs	r3, #41	; 0x29
 80131fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80131fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013202:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013204:	2300      	movs	r3, #0
 8013206:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013208:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801320c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801320e:	f107 0308 	add.w	r3, r7, #8
 8013212:	4619      	mov	r1, r3
 8013214:	6878      	ldr	r0, [r7, #4]
 8013216:	f7ff fe03 	bl	8012e20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 801321a:	6878      	ldr	r0, [r7, #4]
 801321c:	f000 fa2e 	bl	801367c <SDMMC_GetCmdResp3>
 8013220:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013222:	69fb      	ldr	r3, [r7, #28]
}
 8013224:	4618      	mov	r0, r3
 8013226:	3720      	adds	r7, #32
 8013228:	46bd      	mov	sp, r7
 801322a:	bd80      	pop	{r7, pc}

0801322c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 801322c:	b580      	push	{r7, lr}
 801322e:	b088      	sub	sp, #32
 8013230:	af00      	add	r7, sp, #0
 8013232:	6078      	str	r0, [r7, #4]
 8013234:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8013236:	683b      	ldr	r3, [r7, #0]
 8013238:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801323a:	2306      	movs	r3, #6
 801323c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801323e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013242:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013244:	2300      	movs	r3, #0
 8013246:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013248:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801324c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801324e:	f107 0308 	add.w	r3, r7, #8
 8013252:	4619      	mov	r1, r3
 8013254:	6878      	ldr	r0, [r7, #4]
 8013256:	f7ff fde3 	bl	8012e20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 801325a:	f241 3288 	movw	r2, #5000	; 0x1388
 801325e:	2106      	movs	r1, #6
 8013260:	6878      	ldr	r0, [r7, #4]
 8013262:	f000 f8cf 	bl	8013404 <SDMMC_GetCmdResp1>
 8013266:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013268:	69fb      	ldr	r3, [r7, #28]
}
 801326a:	4618      	mov	r0, r3
 801326c:	3720      	adds	r7, #32
 801326e:	46bd      	mov	sp, r7
 8013270:	bd80      	pop	{r7, pc}

08013272 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8013272:	b580      	push	{r7, lr}
 8013274:	b088      	sub	sp, #32
 8013276:	af00      	add	r7, sp, #0
 8013278:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801327a:	2300      	movs	r3, #0
 801327c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801327e:	2333      	movs	r3, #51	; 0x33
 8013280:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013282:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013286:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013288:	2300      	movs	r3, #0
 801328a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801328c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013290:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013292:	f107 0308 	add.w	r3, r7, #8
 8013296:	4619      	mov	r1, r3
 8013298:	6878      	ldr	r0, [r7, #4]
 801329a:	f7ff fdc1 	bl	8012e20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 801329e:	f241 3288 	movw	r2, #5000	; 0x1388
 80132a2:	2133      	movs	r1, #51	; 0x33
 80132a4:	6878      	ldr	r0, [r7, #4]
 80132a6:	f000 f8ad 	bl	8013404 <SDMMC_GetCmdResp1>
 80132aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80132ac:	69fb      	ldr	r3, [r7, #28]
}
 80132ae:	4618      	mov	r0, r3
 80132b0:	3720      	adds	r7, #32
 80132b2:	46bd      	mov	sp, r7
 80132b4:	bd80      	pop	{r7, pc}

080132b6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80132b6:	b580      	push	{r7, lr}
 80132b8:	b088      	sub	sp, #32
 80132ba:	af00      	add	r7, sp, #0
 80132bc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80132be:	2300      	movs	r3, #0
 80132c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80132c2:	2302      	movs	r3, #2
 80132c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80132c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80132ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80132cc:	2300      	movs	r3, #0
 80132ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80132d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80132d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80132d6:	f107 0308 	add.w	r3, r7, #8
 80132da:	4619      	mov	r1, r3
 80132dc:	6878      	ldr	r0, [r7, #4]
 80132de:	f7ff fd9f 	bl	8012e20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80132e2:	6878      	ldr	r0, [r7, #4]
 80132e4:	f000 f980 	bl	80135e8 <SDMMC_GetCmdResp2>
 80132e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80132ea:	69fb      	ldr	r3, [r7, #28]
}
 80132ec:	4618      	mov	r0, r3
 80132ee:	3720      	adds	r7, #32
 80132f0:	46bd      	mov	sp, r7
 80132f2:	bd80      	pop	{r7, pc}

080132f4 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80132f4:	b580      	push	{r7, lr}
 80132f6:	b088      	sub	sp, #32
 80132f8:	af00      	add	r7, sp, #0
 80132fa:	6078      	str	r0, [r7, #4]
 80132fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80132fe:	683b      	ldr	r3, [r7, #0]
 8013300:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8013302:	2309      	movs	r3, #9
 8013304:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8013306:	f44f 7340 	mov.w	r3, #768	; 0x300
 801330a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801330c:	2300      	movs	r3, #0
 801330e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013310:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013314:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013316:	f107 0308 	add.w	r3, r7, #8
 801331a:	4619      	mov	r1, r3
 801331c:	6878      	ldr	r0, [r7, #4]
 801331e:	f7ff fd7f 	bl	8012e20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8013322:	6878      	ldr	r0, [r7, #4]
 8013324:	f000 f960 	bl	80135e8 <SDMMC_GetCmdResp2>
 8013328:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801332a:	69fb      	ldr	r3, [r7, #28]
}
 801332c:	4618      	mov	r0, r3
 801332e:	3720      	adds	r7, #32
 8013330:	46bd      	mov	sp, r7
 8013332:	bd80      	pop	{r7, pc}

08013334 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8013334:	b580      	push	{r7, lr}
 8013336:	b088      	sub	sp, #32
 8013338:	af00      	add	r7, sp, #0
 801333a:	6078      	str	r0, [r7, #4]
 801333c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801333e:	2300      	movs	r3, #0
 8013340:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8013342:	2303      	movs	r3, #3
 8013344:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8013346:	f44f 7380 	mov.w	r3, #256	; 0x100
 801334a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801334c:	2300      	movs	r3, #0
 801334e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013354:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8013356:	f107 0308 	add.w	r3, r7, #8
 801335a:	4619      	mov	r1, r3
 801335c:	6878      	ldr	r0, [r7, #4]
 801335e:	f7ff fd5f 	bl	8012e20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8013362:	683a      	ldr	r2, [r7, #0]
 8013364:	2103      	movs	r1, #3
 8013366:	6878      	ldr	r0, [r7, #4]
 8013368:	f000 f9c8 	bl	80136fc <SDMMC_GetCmdResp6>
 801336c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801336e:	69fb      	ldr	r3, [r7, #28]
}
 8013370:	4618      	mov	r0, r3
 8013372:	3720      	adds	r7, #32
 8013374:	46bd      	mov	sp, r7
 8013376:	bd80      	pop	{r7, pc}

08013378 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8013378:	b580      	push	{r7, lr}
 801337a:	b088      	sub	sp, #32
 801337c:	af00      	add	r7, sp, #0
 801337e:	6078      	str	r0, [r7, #4]
 8013380:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8013382:	683b      	ldr	r3, [r7, #0]
 8013384:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8013386:	230d      	movs	r3, #13
 8013388:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801338a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801338e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8013390:	2300      	movs	r3, #0
 8013392:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8013394:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013398:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801339a:	f107 0308 	add.w	r3, r7, #8
 801339e:	4619      	mov	r1, r3
 80133a0:	6878      	ldr	r0, [r7, #4]
 80133a2:	f7ff fd3d 	bl	8012e20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80133a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80133aa:	210d      	movs	r1, #13
 80133ac:	6878      	ldr	r0, [r7, #4]
 80133ae:	f000 f829 	bl	8013404 <SDMMC_GetCmdResp1>
 80133b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80133b4:	69fb      	ldr	r3, [r7, #28]
}
 80133b6:	4618      	mov	r0, r3
 80133b8:	3720      	adds	r7, #32
 80133ba:	46bd      	mov	sp, r7
 80133bc:	bd80      	pop	{r7, pc}

080133be <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80133be:	b580      	push	{r7, lr}
 80133c0:	b088      	sub	sp, #32
 80133c2:	af00      	add	r7, sp, #0
 80133c4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80133c6:	2300      	movs	r3, #0
 80133c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80133ca:	230d      	movs	r3, #13
 80133cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80133ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80133d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80133d4:	2300      	movs	r3, #0
 80133d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80133d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80133dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80133de:	f107 0308 	add.w	r3, r7, #8
 80133e2:	4619      	mov	r1, r3
 80133e4:	6878      	ldr	r0, [r7, #4]
 80133e6:	f7ff fd1b 	bl	8012e20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80133ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80133ee:	210d      	movs	r1, #13
 80133f0:	6878      	ldr	r0, [r7, #4]
 80133f2:	f000 f807 	bl	8013404 <SDMMC_GetCmdResp1>
 80133f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80133f8:	69fb      	ldr	r3, [r7, #28]
}
 80133fa:	4618      	mov	r0, r3
 80133fc:	3720      	adds	r7, #32
 80133fe:	46bd      	mov	sp, r7
 8013400:	bd80      	pop	{r7, pc}
	...

08013404 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8013404:	b580      	push	{r7, lr}
 8013406:	b088      	sub	sp, #32
 8013408:	af00      	add	r7, sp, #0
 801340a:	60f8      	str	r0, [r7, #12]
 801340c:	460b      	mov	r3, r1
 801340e:	607a      	str	r2, [r7, #4]
 8013410:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8013412:	4b70      	ldr	r3, [pc, #448]	; (80135d4 <SDMMC_GetCmdResp1+0x1d0>)
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	4a70      	ldr	r2, [pc, #448]	; (80135d8 <SDMMC_GetCmdResp1+0x1d4>)
 8013418:	fba2 2303 	umull	r2, r3, r2, r3
 801341c:	0a5a      	lsrs	r2, r3, #9
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	fb02 f303 	mul.w	r3, r2, r3
 8013424:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8013426:	69fb      	ldr	r3, [r7, #28]
 8013428:	1e5a      	subs	r2, r3, #1
 801342a:	61fa      	str	r2, [r7, #28]
 801342c:	2b00      	cmp	r3, #0
 801342e:	d102      	bne.n	8013436 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013430:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013434:	e0c9      	b.n	80135ca <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801343a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 801343c:	69ba      	ldr	r2, [r7, #24]
 801343e:	4b67      	ldr	r3, [pc, #412]	; (80135dc <SDMMC_GetCmdResp1+0x1d8>)
 8013440:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013442:	2b00      	cmp	r3, #0
 8013444:	d0ef      	beq.n	8013426 <SDMMC_GetCmdResp1+0x22>
 8013446:	69bb      	ldr	r3, [r7, #24]
 8013448:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801344c:	2b00      	cmp	r3, #0
 801344e:	d1ea      	bne.n	8013426 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013454:	f003 0304 	and.w	r3, r3, #4
 8013458:	2b00      	cmp	r3, #0
 801345a:	d004      	beq.n	8013466 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	2204      	movs	r2, #4
 8013460:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013462:	2304      	movs	r3, #4
 8013464:	e0b1      	b.n	80135ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801346a:	f003 0301 	and.w	r3, r3, #1
 801346e:	2b00      	cmp	r3, #0
 8013470:	d004      	beq.n	801347c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	2201      	movs	r2, #1
 8013476:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013478:	2301      	movs	r3, #1
 801347a:	e0a6      	b.n	80135ca <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	4a58      	ldr	r2, [pc, #352]	; (80135e0 <SDMMC_GetCmdResp1+0x1dc>)
 8013480:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8013482:	68f8      	ldr	r0, [r7, #12]
 8013484:	f7ff fcf6 	bl	8012e74 <SDMMC_GetCommandResponse>
 8013488:	4603      	mov	r3, r0
 801348a:	461a      	mov	r2, r3
 801348c:	7afb      	ldrb	r3, [r7, #11]
 801348e:	4293      	cmp	r3, r2
 8013490:	d001      	beq.n	8013496 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013492:	2301      	movs	r3, #1
 8013494:	e099      	b.n	80135ca <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8013496:	2100      	movs	r1, #0
 8013498:	68f8      	ldr	r0, [r7, #12]
 801349a:	f7ff fcf8 	bl	8012e8e <SDMMC_GetResponse>
 801349e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80134a0:	697a      	ldr	r2, [r7, #20]
 80134a2:	4b50      	ldr	r3, [pc, #320]	; (80135e4 <SDMMC_GetCmdResp1+0x1e0>)
 80134a4:	4013      	ands	r3, r2
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d101      	bne.n	80134ae <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80134aa:	2300      	movs	r3, #0
 80134ac:	e08d      	b.n	80135ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80134ae:	697b      	ldr	r3, [r7, #20]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	da02      	bge.n	80134ba <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80134b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80134b8:	e087      	b.n	80135ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80134ba:	697b      	ldr	r3, [r7, #20]
 80134bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d001      	beq.n	80134c8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80134c4:	2340      	movs	r3, #64	; 0x40
 80134c6:	e080      	b.n	80135ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80134c8:	697b      	ldr	r3, [r7, #20]
 80134ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d001      	beq.n	80134d6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80134d2:	2380      	movs	r3, #128	; 0x80
 80134d4:	e079      	b.n	80135ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80134d6:	697b      	ldr	r3, [r7, #20]
 80134d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d002      	beq.n	80134e6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80134e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80134e4:	e071      	b.n	80135ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80134e6:	697b      	ldr	r3, [r7, #20]
 80134e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d002      	beq.n	80134f6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80134f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80134f4:	e069      	b.n	80135ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80134f6:	697b      	ldr	r3, [r7, #20]
 80134f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d002      	beq.n	8013506 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8013500:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013504:	e061      	b.n	80135ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8013506:	697b      	ldr	r3, [r7, #20]
 8013508:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801350c:	2b00      	cmp	r3, #0
 801350e:	d002      	beq.n	8013516 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8013510:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013514:	e059      	b.n	80135ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8013516:	697b      	ldr	r3, [r7, #20]
 8013518:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801351c:	2b00      	cmp	r3, #0
 801351e:	d002      	beq.n	8013526 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013520:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013524:	e051      	b.n	80135ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8013526:	697b      	ldr	r3, [r7, #20]
 8013528:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801352c:	2b00      	cmp	r3, #0
 801352e:	d002      	beq.n	8013536 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013530:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013534:	e049      	b.n	80135ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8013536:	697b      	ldr	r3, [r7, #20]
 8013538:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801353c:	2b00      	cmp	r3, #0
 801353e:	d002      	beq.n	8013546 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8013540:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8013544:	e041      	b.n	80135ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8013546:	697b      	ldr	r3, [r7, #20]
 8013548:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801354c:	2b00      	cmp	r3, #0
 801354e:	d002      	beq.n	8013556 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8013550:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013554:	e039      	b.n	80135ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8013556:	697b      	ldr	r3, [r7, #20]
 8013558:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801355c:	2b00      	cmp	r3, #0
 801355e:	d002      	beq.n	8013566 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8013560:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013564:	e031      	b.n	80135ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8013566:	697b      	ldr	r3, [r7, #20]
 8013568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801356c:	2b00      	cmp	r3, #0
 801356e:	d002      	beq.n	8013576 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8013570:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8013574:	e029      	b.n	80135ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8013576:	697b      	ldr	r3, [r7, #20]
 8013578:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801357c:	2b00      	cmp	r3, #0
 801357e:	d002      	beq.n	8013586 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8013580:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013584:	e021      	b.n	80135ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8013586:	697b      	ldr	r3, [r7, #20]
 8013588:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801358c:	2b00      	cmp	r3, #0
 801358e:	d002      	beq.n	8013596 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8013590:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8013594:	e019      	b.n	80135ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8013596:	697b      	ldr	r3, [r7, #20]
 8013598:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801359c:	2b00      	cmp	r3, #0
 801359e:	d002      	beq.n	80135a6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80135a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80135a4:	e011      	b.n	80135ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80135a6:	697b      	ldr	r3, [r7, #20]
 80135a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d002      	beq.n	80135b6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80135b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80135b4:	e009      	b.n	80135ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80135b6:	697b      	ldr	r3, [r7, #20]
 80135b8:	f003 0308 	and.w	r3, r3, #8
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d002      	beq.n	80135c6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80135c0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80135c4:	e001      	b.n	80135ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80135c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80135ca:	4618      	mov	r0, r3
 80135cc:	3720      	adds	r7, #32
 80135ce:	46bd      	mov	sp, r7
 80135d0:	bd80      	pop	{r7, pc}
 80135d2:	bf00      	nop
 80135d4:	24000000 	.word	0x24000000
 80135d8:	10624dd3 	.word	0x10624dd3
 80135dc:	00200045 	.word	0x00200045
 80135e0:	002000c5 	.word	0x002000c5
 80135e4:	fdffe008 	.word	0xfdffe008

080135e8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80135e8:	b480      	push	{r7}
 80135ea:	b085      	sub	sp, #20
 80135ec:	af00      	add	r7, sp, #0
 80135ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80135f0:	4b1f      	ldr	r3, [pc, #124]	; (8013670 <SDMMC_GetCmdResp2+0x88>)
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	4a1f      	ldr	r2, [pc, #124]	; (8013674 <SDMMC_GetCmdResp2+0x8c>)
 80135f6:	fba2 2303 	umull	r2, r3, r2, r3
 80135fa:	0a5b      	lsrs	r3, r3, #9
 80135fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8013600:	fb02 f303 	mul.w	r3, r2, r3
 8013604:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	1e5a      	subs	r2, r3, #1
 801360a:	60fa      	str	r2, [r7, #12]
 801360c:	2b00      	cmp	r3, #0
 801360e:	d102      	bne.n	8013616 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013610:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013614:	e026      	b.n	8013664 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801361a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801361c:	68bb      	ldr	r3, [r7, #8]
 801361e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013622:	2b00      	cmp	r3, #0
 8013624:	d0ef      	beq.n	8013606 <SDMMC_GetCmdResp2+0x1e>
 8013626:	68bb      	ldr	r3, [r7, #8]
 8013628:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801362c:	2b00      	cmp	r3, #0
 801362e:	d1ea      	bne.n	8013606 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013634:	f003 0304 	and.w	r3, r3, #4
 8013638:	2b00      	cmp	r3, #0
 801363a:	d004      	beq.n	8013646 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	2204      	movs	r2, #4
 8013640:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013642:	2304      	movs	r3, #4
 8013644:	e00e      	b.n	8013664 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801364a:	f003 0301 	and.w	r3, r3, #1
 801364e:	2b00      	cmp	r3, #0
 8013650:	d004      	beq.n	801365c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	2201      	movs	r2, #1
 8013656:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013658:	2301      	movs	r3, #1
 801365a:	e003      	b.n	8013664 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	4a06      	ldr	r2, [pc, #24]	; (8013678 <SDMMC_GetCmdResp2+0x90>)
 8013660:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8013662:	2300      	movs	r3, #0
}
 8013664:	4618      	mov	r0, r3
 8013666:	3714      	adds	r7, #20
 8013668:	46bd      	mov	sp, r7
 801366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801366e:	4770      	bx	lr
 8013670:	24000000 	.word	0x24000000
 8013674:	10624dd3 	.word	0x10624dd3
 8013678:	002000c5 	.word	0x002000c5

0801367c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 801367c:	b480      	push	{r7}
 801367e:	b085      	sub	sp, #20
 8013680:	af00      	add	r7, sp, #0
 8013682:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013684:	4b1a      	ldr	r3, [pc, #104]	; (80136f0 <SDMMC_GetCmdResp3+0x74>)
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	4a1a      	ldr	r2, [pc, #104]	; (80136f4 <SDMMC_GetCmdResp3+0x78>)
 801368a:	fba2 2303 	umull	r2, r3, r2, r3
 801368e:	0a5b      	lsrs	r3, r3, #9
 8013690:	f241 3288 	movw	r2, #5000	; 0x1388
 8013694:	fb02 f303 	mul.w	r3, r2, r3
 8013698:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	1e5a      	subs	r2, r3, #1
 801369e:	60fa      	str	r2, [r7, #12]
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d102      	bne.n	80136aa <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80136a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80136a8:	e01b      	b.n	80136e2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80136ae:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80136b0:	68bb      	ldr	r3, [r7, #8]
 80136b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d0ef      	beq.n	801369a <SDMMC_GetCmdResp3+0x1e>
 80136ba:	68bb      	ldr	r3, [r7, #8]
 80136bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d1ea      	bne.n	801369a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80136c8:	f003 0304 	and.w	r3, r3, #4
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d004      	beq.n	80136da <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	2204      	movs	r2, #4
 80136d4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80136d6:	2304      	movs	r3, #4
 80136d8:	e003      	b.n	80136e2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	4a06      	ldr	r2, [pc, #24]	; (80136f8 <SDMMC_GetCmdResp3+0x7c>)
 80136de:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80136e0:	2300      	movs	r3, #0
}
 80136e2:	4618      	mov	r0, r3
 80136e4:	3714      	adds	r7, #20
 80136e6:	46bd      	mov	sp, r7
 80136e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ec:	4770      	bx	lr
 80136ee:	bf00      	nop
 80136f0:	24000000 	.word	0x24000000
 80136f4:	10624dd3 	.word	0x10624dd3
 80136f8:	002000c5 	.word	0x002000c5

080136fc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80136fc:	b580      	push	{r7, lr}
 80136fe:	b088      	sub	sp, #32
 8013700:	af00      	add	r7, sp, #0
 8013702:	60f8      	str	r0, [r7, #12]
 8013704:	460b      	mov	r3, r1
 8013706:	607a      	str	r2, [r7, #4]
 8013708:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801370a:	4b35      	ldr	r3, [pc, #212]	; (80137e0 <SDMMC_GetCmdResp6+0xe4>)
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	4a35      	ldr	r2, [pc, #212]	; (80137e4 <SDMMC_GetCmdResp6+0xe8>)
 8013710:	fba2 2303 	umull	r2, r3, r2, r3
 8013714:	0a5b      	lsrs	r3, r3, #9
 8013716:	f241 3288 	movw	r2, #5000	; 0x1388
 801371a:	fb02 f303 	mul.w	r3, r2, r3
 801371e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8013720:	69fb      	ldr	r3, [r7, #28]
 8013722:	1e5a      	subs	r2, r3, #1
 8013724:	61fa      	str	r2, [r7, #28]
 8013726:	2b00      	cmp	r3, #0
 8013728:	d102      	bne.n	8013730 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801372a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801372e:	e052      	b.n	80137d6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013734:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013736:	69bb      	ldr	r3, [r7, #24]
 8013738:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801373c:	2b00      	cmp	r3, #0
 801373e:	d0ef      	beq.n	8013720 <SDMMC_GetCmdResp6+0x24>
 8013740:	69bb      	ldr	r3, [r7, #24]
 8013742:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013746:	2b00      	cmp	r3, #0
 8013748:	d1ea      	bne.n	8013720 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801374e:	f003 0304 	and.w	r3, r3, #4
 8013752:	2b00      	cmp	r3, #0
 8013754:	d004      	beq.n	8013760 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013756:	68fb      	ldr	r3, [r7, #12]
 8013758:	2204      	movs	r2, #4
 801375a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801375c:	2304      	movs	r3, #4
 801375e:	e03a      	b.n	80137d6 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013764:	f003 0301 	and.w	r3, r3, #1
 8013768:	2b00      	cmp	r3, #0
 801376a:	d004      	beq.n	8013776 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801376c:	68fb      	ldr	r3, [r7, #12]
 801376e:	2201      	movs	r2, #1
 8013770:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013772:	2301      	movs	r3, #1
 8013774:	e02f      	b.n	80137d6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8013776:	68f8      	ldr	r0, [r7, #12]
 8013778:	f7ff fb7c 	bl	8012e74 <SDMMC_GetCommandResponse>
 801377c:	4603      	mov	r3, r0
 801377e:	461a      	mov	r2, r3
 8013780:	7afb      	ldrb	r3, [r7, #11]
 8013782:	4293      	cmp	r3, r2
 8013784:	d001      	beq.n	801378a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013786:	2301      	movs	r3, #1
 8013788:	e025      	b.n	80137d6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801378a:	68fb      	ldr	r3, [r7, #12]
 801378c:	4a16      	ldr	r2, [pc, #88]	; (80137e8 <SDMMC_GetCmdResp6+0xec>)
 801378e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8013790:	2100      	movs	r1, #0
 8013792:	68f8      	ldr	r0, [r7, #12]
 8013794:	f7ff fb7b 	bl	8012e8e <SDMMC_GetResponse>
 8013798:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 801379a:	697b      	ldr	r3, [r7, #20]
 801379c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d106      	bne.n	80137b2 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80137a4:	697b      	ldr	r3, [r7, #20]
 80137a6:	0c1b      	lsrs	r3, r3, #16
 80137a8:	b29a      	uxth	r2, r3
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80137ae:	2300      	movs	r3, #0
 80137b0:	e011      	b.n	80137d6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80137b2:	697b      	ldr	r3, [r7, #20]
 80137b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d002      	beq.n	80137c2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80137bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80137c0:	e009      	b.n	80137d6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80137c2:	697b      	ldr	r3, [r7, #20]
 80137c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d002      	beq.n	80137d2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80137cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80137d0:	e001      	b.n	80137d6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80137d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80137d6:	4618      	mov	r0, r3
 80137d8:	3720      	adds	r7, #32
 80137da:	46bd      	mov	sp, r7
 80137dc:	bd80      	pop	{r7, pc}
 80137de:	bf00      	nop
 80137e0:	24000000 	.word	0x24000000
 80137e4:	10624dd3 	.word	0x10624dd3
 80137e8:	002000c5 	.word	0x002000c5

080137ec <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80137ec:	b480      	push	{r7}
 80137ee:	b085      	sub	sp, #20
 80137f0:	af00      	add	r7, sp, #0
 80137f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80137f4:	4b22      	ldr	r3, [pc, #136]	; (8013880 <SDMMC_GetCmdResp7+0x94>)
 80137f6:	681b      	ldr	r3, [r3, #0]
 80137f8:	4a22      	ldr	r2, [pc, #136]	; (8013884 <SDMMC_GetCmdResp7+0x98>)
 80137fa:	fba2 2303 	umull	r2, r3, r2, r3
 80137fe:	0a5b      	lsrs	r3, r3, #9
 8013800:	f241 3288 	movw	r2, #5000	; 0x1388
 8013804:	fb02 f303 	mul.w	r3, r2, r3
 8013808:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	1e5a      	subs	r2, r3, #1
 801380e:	60fa      	str	r2, [r7, #12]
 8013810:	2b00      	cmp	r3, #0
 8013812:	d102      	bne.n	801381a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013814:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013818:	e02c      	b.n	8013874 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801381e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013820:	68bb      	ldr	r3, [r7, #8]
 8013822:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8013826:	2b00      	cmp	r3, #0
 8013828:	d0ef      	beq.n	801380a <SDMMC_GetCmdResp7+0x1e>
 801382a:	68bb      	ldr	r3, [r7, #8]
 801382c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8013830:	2b00      	cmp	r3, #0
 8013832:	d1ea      	bne.n	801380a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013838:	f003 0304 	and.w	r3, r3, #4
 801383c:	2b00      	cmp	r3, #0
 801383e:	d004      	beq.n	801384a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	2204      	movs	r2, #4
 8013844:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013846:	2304      	movs	r3, #4
 8013848:	e014      	b.n	8013874 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801384e:	f003 0301 	and.w	r3, r3, #1
 8013852:	2b00      	cmp	r3, #0
 8013854:	d004      	beq.n	8013860 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	2201      	movs	r2, #1
 801385a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801385c:	2301      	movs	r3, #1
 801385e:	e009      	b.n	8013874 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013868:	2b00      	cmp	r3, #0
 801386a:	d002      	beq.n	8013872 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	2240      	movs	r2, #64	; 0x40
 8013870:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8013872:	2300      	movs	r3, #0

}
 8013874:	4618      	mov	r0, r3
 8013876:	3714      	adds	r7, #20
 8013878:	46bd      	mov	sp, r7
 801387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801387e:	4770      	bx	lr
 8013880:	24000000 	.word	0x24000000
 8013884:	10624dd3 	.word	0x10624dd3

08013888 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8013888:	b480      	push	{r7}
 801388a:	b085      	sub	sp, #20
 801388c:	af00      	add	r7, sp, #0
 801388e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8013890:	4b11      	ldr	r3, [pc, #68]	; (80138d8 <SDMMC_GetCmdError+0x50>)
 8013892:	681b      	ldr	r3, [r3, #0]
 8013894:	4a11      	ldr	r2, [pc, #68]	; (80138dc <SDMMC_GetCmdError+0x54>)
 8013896:	fba2 2303 	umull	r2, r3, r2, r3
 801389a:	0a5b      	lsrs	r3, r3, #9
 801389c:	f241 3288 	movw	r2, #5000	; 0x1388
 80138a0:	fb02 f303 	mul.w	r3, r2, r3
 80138a4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	1e5a      	subs	r2, r3, #1
 80138aa:	60fa      	str	r2, [r7, #12]
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d102      	bne.n	80138b6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80138b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80138b4:	e009      	b.n	80138ca <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80138ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d0f1      	beq.n	80138a6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	4a06      	ldr	r2, [pc, #24]	; (80138e0 <SDMMC_GetCmdError+0x58>)
 80138c6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80138c8:	2300      	movs	r3, #0
}
 80138ca:	4618      	mov	r0, r3
 80138cc:	3714      	adds	r7, #20
 80138ce:	46bd      	mov	sp, r7
 80138d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d4:	4770      	bx	lr
 80138d6:	bf00      	nop
 80138d8:	24000000 	.word	0x24000000
 80138dc:	10624dd3 	.word	0x10624dd3
 80138e0:	002000c5 	.word	0x002000c5

080138e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80138e4:	b084      	sub	sp, #16
 80138e6:	b580      	push	{r7, lr}
 80138e8:	b084      	sub	sp, #16
 80138ea:	af00      	add	r7, sp, #0
 80138ec:	6078      	str	r0, [r7, #4]
 80138ee:	f107 001c 	add.w	r0, r7, #28
 80138f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80138f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138f8:	2b01      	cmp	r3, #1
 80138fa:	d120      	bne.n	801393e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013900:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	68da      	ldr	r2, [r3, #12]
 801390c:	4b2a      	ldr	r3, [pc, #168]	; (80139b8 <USB_CoreInit+0xd4>)
 801390e:	4013      	ands	r3, r2
 8013910:	687a      	ldr	r2, [r7, #4]
 8013912:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	68db      	ldr	r3, [r3, #12]
 8013918:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8013920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013922:	2b01      	cmp	r3, #1
 8013924:	d105      	bne.n	8013932 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	68db      	ldr	r3, [r3, #12]
 801392a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8013932:	6878      	ldr	r0, [r7, #4]
 8013934:	f001 faf8 	bl	8014f28 <USB_CoreReset>
 8013938:	4603      	mov	r3, r0
 801393a:	73fb      	strb	r3, [r7, #15]
 801393c:	e01a      	b.n	8013974 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	68db      	ldr	r3, [r3, #12]
 8013942:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801394a:	6878      	ldr	r0, [r7, #4]
 801394c:	f001 faec 	bl	8014f28 <USB_CoreReset>
 8013950:	4603      	mov	r3, r0
 8013952:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8013954:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013956:	2b00      	cmp	r3, #0
 8013958:	d106      	bne.n	8013968 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801395e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	639a      	str	r2, [r3, #56]	; 0x38
 8013966:	e005      	b.n	8013974 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801396c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8013974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013976:	2b01      	cmp	r3, #1
 8013978:	d116      	bne.n	80139a8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801397e:	b29a      	uxth	r2, r3
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013988:	4b0c      	ldr	r3, [pc, #48]	; (80139bc <USB_CoreInit+0xd8>)
 801398a:	4313      	orrs	r3, r2
 801398c:	687a      	ldr	r2, [r7, #4]
 801398e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	689b      	ldr	r3, [r3, #8]
 8013994:	f043 0206 	orr.w	r2, r3, #6
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	689b      	ldr	r3, [r3, #8]
 80139a0:	f043 0220 	orr.w	r2, r3, #32
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80139a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80139aa:	4618      	mov	r0, r3
 80139ac:	3710      	adds	r7, #16
 80139ae:	46bd      	mov	sp, r7
 80139b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80139b4:	b004      	add	sp, #16
 80139b6:	4770      	bx	lr
 80139b8:	ffbdffbf 	.word	0xffbdffbf
 80139bc:	03ee0000 	.word	0x03ee0000

080139c0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80139c0:	b480      	push	{r7}
 80139c2:	b087      	sub	sp, #28
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	60f8      	str	r0, [r7, #12]
 80139c8:	60b9      	str	r1, [r7, #8]
 80139ca:	4613      	mov	r3, r2
 80139cc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80139ce:	79fb      	ldrb	r3, [r7, #7]
 80139d0:	2b02      	cmp	r3, #2
 80139d2:	d165      	bne.n	8013aa0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80139d4:	68bb      	ldr	r3, [r7, #8]
 80139d6:	4a41      	ldr	r2, [pc, #260]	; (8013adc <USB_SetTurnaroundTime+0x11c>)
 80139d8:	4293      	cmp	r3, r2
 80139da:	d906      	bls.n	80139ea <USB_SetTurnaroundTime+0x2a>
 80139dc:	68bb      	ldr	r3, [r7, #8]
 80139de:	4a40      	ldr	r2, [pc, #256]	; (8013ae0 <USB_SetTurnaroundTime+0x120>)
 80139e0:	4293      	cmp	r3, r2
 80139e2:	d202      	bcs.n	80139ea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80139e4:	230f      	movs	r3, #15
 80139e6:	617b      	str	r3, [r7, #20]
 80139e8:	e062      	b.n	8013ab0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80139ea:	68bb      	ldr	r3, [r7, #8]
 80139ec:	4a3c      	ldr	r2, [pc, #240]	; (8013ae0 <USB_SetTurnaroundTime+0x120>)
 80139ee:	4293      	cmp	r3, r2
 80139f0:	d306      	bcc.n	8013a00 <USB_SetTurnaroundTime+0x40>
 80139f2:	68bb      	ldr	r3, [r7, #8]
 80139f4:	4a3b      	ldr	r2, [pc, #236]	; (8013ae4 <USB_SetTurnaroundTime+0x124>)
 80139f6:	4293      	cmp	r3, r2
 80139f8:	d202      	bcs.n	8013a00 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80139fa:	230e      	movs	r3, #14
 80139fc:	617b      	str	r3, [r7, #20]
 80139fe:	e057      	b.n	8013ab0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8013a00:	68bb      	ldr	r3, [r7, #8]
 8013a02:	4a38      	ldr	r2, [pc, #224]	; (8013ae4 <USB_SetTurnaroundTime+0x124>)
 8013a04:	4293      	cmp	r3, r2
 8013a06:	d306      	bcc.n	8013a16 <USB_SetTurnaroundTime+0x56>
 8013a08:	68bb      	ldr	r3, [r7, #8]
 8013a0a:	4a37      	ldr	r2, [pc, #220]	; (8013ae8 <USB_SetTurnaroundTime+0x128>)
 8013a0c:	4293      	cmp	r3, r2
 8013a0e:	d202      	bcs.n	8013a16 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8013a10:	230d      	movs	r3, #13
 8013a12:	617b      	str	r3, [r7, #20]
 8013a14:	e04c      	b.n	8013ab0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8013a16:	68bb      	ldr	r3, [r7, #8]
 8013a18:	4a33      	ldr	r2, [pc, #204]	; (8013ae8 <USB_SetTurnaroundTime+0x128>)
 8013a1a:	4293      	cmp	r3, r2
 8013a1c:	d306      	bcc.n	8013a2c <USB_SetTurnaroundTime+0x6c>
 8013a1e:	68bb      	ldr	r3, [r7, #8]
 8013a20:	4a32      	ldr	r2, [pc, #200]	; (8013aec <USB_SetTurnaroundTime+0x12c>)
 8013a22:	4293      	cmp	r3, r2
 8013a24:	d802      	bhi.n	8013a2c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8013a26:	230c      	movs	r3, #12
 8013a28:	617b      	str	r3, [r7, #20]
 8013a2a:	e041      	b.n	8013ab0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8013a2c:	68bb      	ldr	r3, [r7, #8]
 8013a2e:	4a2f      	ldr	r2, [pc, #188]	; (8013aec <USB_SetTurnaroundTime+0x12c>)
 8013a30:	4293      	cmp	r3, r2
 8013a32:	d906      	bls.n	8013a42 <USB_SetTurnaroundTime+0x82>
 8013a34:	68bb      	ldr	r3, [r7, #8]
 8013a36:	4a2e      	ldr	r2, [pc, #184]	; (8013af0 <USB_SetTurnaroundTime+0x130>)
 8013a38:	4293      	cmp	r3, r2
 8013a3a:	d802      	bhi.n	8013a42 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8013a3c:	230b      	movs	r3, #11
 8013a3e:	617b      	str	r3, [r7, #20]
 8013a40:	e036      	b.n	8013ab0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8013a42:	68bb      	ldr	r3, [r7, #8]
 8013a44:	4a2a      	ldr	r2, [pc, #168]	; (8013af0 <USB_SetTurnaroundTime+0x130>)
 8013a46:	4293      	cmp	r3, r2
 8013a48:	d906      	bls.n	8013a58 <USB_SetTurnaroundTime+0x98>
 8013a4a:	68bb      	ldr	r3, [r7, #8]
 8013a4c:	4a29      	ldr	r2, [pc, #164]	; (8013af4 <USB_SetTurnaroundTime+0x134>)
 8013a4e:	4293      	cmp	r3, r2
 8013a50:	d802      	bhi.n	8013a58 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8013a52:	230a      	movs	r3, #10
 8013a54:	617b      	str	r3, [r7, #20]
 8013a56:	e02b      	b.n	8013ab0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8013a58:	68bb      	ldr	r3, [r7, #8]
 8013a5a:	4a26      	ldr	r2, [pc, #152]	; (8013af4 <USB_SetTurnaroundTime+0x134>)
 8013a5c:	4293      	cmp	r3, r2
 8013a5e:	d906      	bls.n	8013a6e <USB_SetTurnaroundTime+0xae>
 8013a60:	68bb      	ldr	r3, [r7, #8]
 8013a62:	4a25      	ldr	r2, [pc, #148]	; (8013af8 <USB_SetTurnaroundTime+0x138>)
 8013a64:	4293      	cmp	r3, r2
 8013a66:	d202      	bcs.n	8013a6e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8013a68:	2309      	movs	r3, #9
 8013a6a:	617b      	str	r3, [r7, #20]
 8013a6c:	e020      	b.n	8013ab0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8013a6e:	68bb      	ldr	r3, [r7, #8]
 8013a70:	4a21      	ldr	r2, [pc, #132]	; (8013af8 <USB_SetTurnaroundTime+0x138>)
 8013a72:	4293      	cmp	r3, r2
 8013a74:	d306      	bcc.n	8013a84 <USB_SetTurnaroundTime+0xc4>
 8013a76:	68bb      	ldr	r3, [r7, #8]
 8013a78:	4a20      	ldr	r2, [pc, #128]	; (8013afc <USB_SetTurnaroundTime+0x13c>)
 8013a7a:	4293      	cmp	r3, r2
 8013a7c:	d802      	bhi.n	8013a84 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8013a7e:	2308      	movs	r3, #8
 8013a80:	617b      	str	r3, [r7, #20]
 8013a82:	e015      	b.n	8013ab0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8013a84:	68bb      	ldr	r3, [r7, #8]
 8013a86:	4a1d      	ldr	r2, [pc, #116]	; (8013afc <USB_SetTurnaroundTime+0x13c>)
 8013a88:	4293      	cmp	r3, r2
 8013a8a:	d906      	bls.n	8013a9a <USB_SetTurnaroundTime+0xda>
 8013a8c:	68bb      	ldr	r3, [r7, #8]
 8013a8e:	4a1c      	ldr	r2, [pc, #112]	; (8013b00 <USB_SetTurnaroundTime+0x140>)
 8013a90:	4293      	cmp	r3, r2
 8013a92:	d202      	bcs.n	8013a9a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8013a94:	2307      	movs	r3, #7
 8013a96:	617b      	str	r3, [r7, #20]
 8013a98:	e00a      	b.n	8013ab0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8013a9a:	2306      	movs	r3, #6
 8013a9c:	617b      	str	r3, [r7, #20]
 8013a9e:	e007      	b.n	8013ab0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8013aa0:	79fb      	ldrb	r3, [r7, #7]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d102      	bne.n	8013aac <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8013aa6:	2309      	movs	r3, #9
 8013aa8:	617b      	str	r3, [r7, #20]
 8013aaa:	e001      	b.n	8013ab0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8013aac:	2309      	movs	r3, #9
 8013aae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8013ab0:	68fb      	ldr	r3, [r7, #12]
 8013ab2:	68db      	ldr	r3, [r3, #12]
 8013ab4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	68da      	ldr	r2, [r3, #12]
 8013ac0:	697b      	ldr	r3, [r7, #20]
 8013ac2:	029b      	lsls	r3, r3, #10
 8013ac4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8013ac8:	431a      	orrs	r2, r3
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8013ace:	2300      	movs	r3, #0
}
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	371c      	adds	r7, #28
 8013ad4:	46bd      	mov	sp, r7
 8013ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ada:	4770      	bx	lr
 8013adc:	00d8acbf 	.word	0x00d8acbf
 8013ae0:	00e4e1c0 	.word	0x00e4e1c0
 8013ae4:	00f42400 	.word	0x00f42400
 8013ae8:	01067380 	.word	0x01067380
 8013aec:	011a499f 	.word	0x011a499f
 8013af0:	01312cff 	.word	0x01312cff
 8013af4:	014ca43f 	.word	0x014ca43f
 8013af8:	016e3600 	.word	0x016e3600
 8013afc:	01a6ab1f 	.word	0x01a6ab1f
 8013b00:	01e84800 	.word	0x01e84800

08013b04 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013b04:	b480      	push	{r7}
 8013b06:	b083      	sub	sp, #12
 8013b08:	af00      	add	r7, sp, #0
 8013b0a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	689b      	ldr	r3, [r3, #8]
 8013b10:	f043 0201 	orr.w	r2, r3, #1
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013b18:	2300      	movs	r3, #0
}
 8013b1a:	4618      	mov	r0, r3
 8013b1c:	370c      	adds	r7, #12
 8013b1e:	46bd      	mov	sp, r7
 8013b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b24:	4770      	bx	lr

08013b26 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013b26:	b480      	push	{r7}
 8013b28:	b083      	sub	sp, #12
 8013b2a:	af00      	add	r7, sp, #0
 8013b2c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	689b      	ldr	r3, [r3, #8]
 8013b32:	f023 0201 	bic.w	r2, r3, #1
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013b3a:	2300      	movs	r3, #0
}
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	370c      	adds	r7, #12
 8013b40:	46bd      	mov	sp, r7
 8013b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b46:	4770      	bx	lr

08013b48 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8013b48:	b580      	push	{r7, lr}
 8013b4a:	b084      	sub	sp, #16
 8013b4c:	af00      	add	r7, sp, #0
 8013b4e:	6078      	str	r0, [r7, #4]
 8013b50:	460b      	mov	r3, r1
 8013b52:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8013b54:	2300      	movs	r3, #0
 8013b56:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	68db      	ldr	r3, [r3, #12]
 8013b5c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8013b64:	78fb      	ldrb	r3, [r7, #3]
 8013b66:	2b01      	cmp	r3, #1
 8013b68:	d115      	bne.n	8013b96 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	68db      	ldr	r3, [r3, #12]
 8013b6e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8013b76:	2001      	movs	r0, #1
 8013b78:	f7f0 fa58 	bl	800402c <HAL_Delay>
      ms++;
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	3301      	adds	r3, #1
 8013b80:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8013b82:	6878      	ldr	r0, [r7, #4]
 8013b84:	f001 f93f 	bl	8014e06 <USB_GetMode>
 8013b88:	4603      	mov	r3, r0
 8013b8a:	2b01      	cmp	r3, #1
 8013b8c:	d01e      	beq.n	8013bcc <USB_SetCurrentMode+0x84>
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	2b31      	cmp	r3, #49	; 0x31
 8013b92:	d9f0      	bls.n	8013b76 <USB_SetCurrentMode+0x2e>
 8013b94:	e01a      	b.n	8013bcc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8013b96:	78fb      	ldrb	r3, [r7, #3]
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d115      	bne.n	8013bc8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	68db      	ldr	r3, [r3, #12]
 8013ba0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8013ba8:	2001      	movs	r0, #1
 8013baa:	f7f0 fa3f 	bl	800402c <HAL_Delay>
      ms++;
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	3301      	adds	r3, #1
 8013bb2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8013bb4:	6878      	ldr	r0, [r7, #4]
 8013bb6:	f001 f926 	bl	8014e06 <USB_GetMode>
 8013bba:	4603      	mov	r3, r0
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d005      	beq.n	8013bcc <USB_SetCurrentMode+0x84>
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	2b31      	cmp	r3, #49	; 0x31
 8013bc4:	d9f0      	bls.n	8013ba8 <USB_SetCurrentMode+0x60>
 8013bc6:	e001      	b.n	8013bcc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8013bc8:	2301      	movs	r3, #1
 8013bca:	e005      	b.n	8013bd8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8013bcc:	68fb      	ldr	r3, [r7, #12]
 8013bce:	2b32      	cmp	r3, #50	; 0x32
 8013bd0:	d101      	bne.n	8013bd6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8013bd2:	2301      	movs	r3, #1
 8013bd4:	e000      	b.n	8013bd8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8013bd6:	2300      	movs	r3, #0
}
 8013bd8:	4618      	mov	r0, r3
 8013bda:	3710      	adds	r7, #16
 8013bdc:	46bd      	mov	sp, r7
 8013bde:	bd80      	pop	{r7, pc}

08013be0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013be0:	b084      	sub	sp, #16
 8013be2:	b580      	push	{r7, lr}
 8013be4:	b086      	sub	sp, #24
 8013be6:	af00      	add	r7, sp, #0
 8013be8:	6078      	str	r0, [r7, #4]
 8013bea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8013bee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8013bf2:	2300      	movs	r3, #0
 8013bf4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8013bfa:	2300      	movs	r3, #0
 8013bfc:	613b      	str	r3, [r7, #16]
 8013bfe:	e009      	b.n	8013c14 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8013c00:	687a      	ldr	r2, [r7, #4]
 8013c02:	693b      	ldr	r3, [r7, #16]
 8013c04:	3340      	adds	r3, #64	; 0x40
 8013c06:	009b      	lsls	r3, r3, #2
 8013c08:	4413      	add	r3, r2
 8013c0a:	2200      	movs	r2, #0
 8013c0c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8013c0e:	693b      	ldr	r3, [r7, #16]
 8013c10:	3301      	adds	r3, #1
 8013c12:	613b      	str	r3, [r7, #16]
 8013c14:	693b      	ldr	r3, [r7, #16]
 8013c16:	2b0e      	cmp	r3, #14
 8013c18:	d9f2      	bls.n	8013c00 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8013c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d11c      	bne.n	8013c5a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c26:	685b      	ldr	r3, [r3, #4]
 8013c28:	68fa      	ldr	r2, [r7, #12]
 8013c2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013c2e:	f043 0302 	orr.w	r3, r3, #2
 8013c32:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c38:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	681b      	ldr	r3, [r3, #0]
 8013c44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	681b      	ldr	r3, [r3, #0]
 8013c50:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	601a      	str	r2, [r3, #0]
 8013c58:	e005      	b.n	8013c66 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c5e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8013c66:	68fb      	ldr	r3, [r7, #12]
 8013c68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013c6c:	461a      	mov	r2, r3
 8013c6e:	2300      	movs	r3, #0
 8013c70:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8013c72:	68fb      	ldr	r3, [r7, #12]
 8013c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c78:	4619      	mov	r1, r3
 8013c7a:	68fb      	ldr	r3, [r7, #12]
 8013c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c80:	461a      	mov	r2, r3
 8013c82:	680b      	ldr	r3, [r1, #0]
 8013c84:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8013c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c88:	2b01      	cmp	r3, #1
 8013c8a:	d10c      	bne.n	8013ca6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8013c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d104      	bne.n	8013c9c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8013c92:	2100      	movs	r1, #0
 8013c94:	6878      	ldr	r0, [r7, #4]
 8013c96:	f000 f965 	bl	8013f64 <USB_SetDevSpeed>
 8013c9a:	e008      	b.n	8013cae <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8013c9c:	2101      	movs	r1, #1
 8013c9e:	6878      	ldr	r0, [r7, #4]
 8013ca0:	f000 f960 	bl	8013f64 <USB_SetDevSpeed>
 8013ca4:	e003      	b.n	8013cae <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8013ca6:	2103      	movs	r1, #3
 8013ca8:	6878      	ldr	r0, [r7, #4]
 8013caa:	f000 f95b 	bl	8013f64 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8013cae:	2110      	movs	r1, #16
 8013cb0:	6878      	ldr	r0, [r7, #4]
 8013cb2:	f000 f8f3 	bl	8013e9c <USB_FlushTxFifo>
 8013cb6:	4603      	mov	r3, r0
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d001      	beq.n	8013cc0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8013cbc:	2301      	movs	r3, #1
 8013cbe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8013cc0:	6878      	ldr	r0, [r7, #4]
 8013cc2:	f000 f91f 	bl	8013f04 <USB_FlushRxFifo>
 8013cc6:	4603      	mov	r3, r0
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d001      	beq.n	8013cd0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8013ccc:	2301      	movs	r3, #1
 8013cce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013cd6:	461a      	mov	r2, r3
 8013cd8:	2300      	movs	r3, #0
 8013cda:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ce2:	461a      	mov	r2, r3
 8013ce4:	2300      	movs	r3, #0
 8013ce6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013cee:	461a      	mov	r2, r3
 8013cf0:	2300      	movs	r3, #0
 8013cf2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013cf4:	2300      	movs	r3, #0
 8013cf6:	613b      	str	r3, [r7, #16]
 8013cf8:	e043      	b.n	8013d82 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013cfa:	693b      	ldr	r3, [r7, #16]
 8013cfc:	015a      	lsls	r2, r3, #5
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	4413      	add	r3, r2
 8013d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013d0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013d10:	d118      	bne.n	8013d44 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8013d12:	693b      	ldr	r3, [r7, #16]
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d10a      	bne.n	8013d2e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8013d18:	693b      	ldr	r3, [r7, #16]
 8013d1a:	015a      	lsls	r2, r3, #5
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	4413      	add	r3, r2
 8013d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d24:	461a      	mov	r2, r3
 8013d26:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013d2a:	6013      	str	r3, [r2, #0]
 8013d2c:	e013      	b.n	8013d56 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8013d2e:	693b      	ldr	r3, [r7, #16]
 8013d30:	015a      	lsls	r2, r3, #5
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	4413      	add	r3, r2
 8013d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d3a:	461a      	mov	r2, r3
 8013d3c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013d40:	6013      	str	r3, [r2, #0]
 8013d42:	e008      	b.n	8013d56 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8013d44:	693b      	ldr	r3, [r7, #16]
 8013d46:	015a      	lsls	r2, r3, #5
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	4413      	add	r3, r2
 8013d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d50:	461a      	mov	r2, r3
 8013d52:	2300      	movs	r3, #0
 8013d54:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8013d56:	693b      	ldr	r3, [r7, #16]
 8013d58:	015a      	lsls	r2, r3, #5
 8013d5a:	68fb      	ldr	r3, [r7, #12]
 8013d5c:	4413      	add	r3, r2
 8013d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d62:	461a      	mov	r2, r3
 8013d64:	2300      	movs	r3, #0
 8013d66:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8013d68:	693b      	ldr	r3, [r7, #16]
 8013d6a:	015a      	lsls	r2, r3, #5
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	4413      	add	r3, r2
 8013d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d74:	461a      	mov	r2, r3
 8013d76:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013d7a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013d7c:	693b      	ldr	r3, [r7, #16]
 8013d7e:	3301      	adds	r3, #1
 8013d80:	613b      	str	r3, [r7, #16]
 8013d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d84:	693a      	ldr	r2, [r7, #16]
 8013d86:	429a      	cmp	r2, r3
 8013d88:	d3b7      	bcc.n	8013cfa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013d8a:	2300      	movs	r3, #0
 8013d8c:	613b      	str	r3, [r7, #16]
 8013d8e:	e043      	b.n	8013e18 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013d90:	693b      	ldr	r3, [r7, #16]
 8013d92:	015a      	lsls	r2, r3, #5
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	4413      	add	r3, r2
 8013d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013da2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013da6:	d118      	bne.n	8013dda <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8013da8:	693b      	ldr	r3, [r7, #16]
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d10a      	bne.n	8013dc4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8013dae:	693b      	ldr	r3, [r7, #16]
 8013db0:	015a      	lsls	r2, r3, #5
 8013db2:	68fb      	ldr	r3, [r7, #12]
 8013db4:	4413      	add	r3, r2
 8013db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013dba:	461a      	mov	r2, r3
 8013dbc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013dc0:	6013      	str	r3, [r2, #0]
 8013dc2:	e013      	b.n	8013dec <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8013dc4:	693b      	ldr	r3, [r7, #16]
 8013dc6:	015a      	lsls	r2, r3, #5
 8013dc8:	68fb      	ldr	r3, [r7, #12]
 8013dca:	4413      	add	r3, r2
 8013dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013dd0:	461a      	mov	r2, r3
 8013dd2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013dd6:	6013      	str	r3, [r2, #0]
 8013dd8:	e008      	b.n	8013dec <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8013dda:	693b      	ldr	r3, [r7, #16]
 8013ddc:	015a      	lsls	r2, r3, #5
 8013dde:	68fb      	ldr	r3, [r7, #12]
 8013de0:	4413      	add	r3, r2
 8013de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013de6:	461a      	mov	r2, r3
 8013de8:	2300      	movs	r3, #0
 8013dea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8013dec:	693b      	ldr	r3, [r7, #16]
 8013dee:	015a      	lsls	r2, r3, #5
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	4413      	add	r3, r2
 8013df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013df8:	461a      	mov	r2, r3
 8013dfa:	2300      	movs	r3, #0
 8013dfc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8013dfe:	693b      	ldr	r3, [r7, #16]
 8013e00:	015a      	lsls	r2, r3, #5
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	4413      	add	r3, r2
 8013e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e0a:	461a      	mov	r2, r3
 8013e0c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013e10:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013e12:	693b      	ldr	r3, [r7, #16]
 8013e14:	3301      	adds	r3, #1
 8013e16:	613b      	str	r3, [r7, #16]
 8013e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e1a:	693a      	ldr	r2, [r7, #16]
 8013e1c:	429a      	cmp	r2, r3
 8013e1e:	d3b7      	bcc.n	8013d90 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8013e20:	68fb      	ldr	r3, [r7, #12]
 8013e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e26:	691b      	ldr	r3, [r3, #16]
 8013e28:	68fa      	ldr	r2, [r7, #12]
 8013e2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013e2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013e32:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	2200      	movs	r2, #0
 8013e38:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8013e40:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8013e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d105      	bne.n	8013e54 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	699b      	ldr	r3, [r3, #24]
 8013e4c:	f043 0210 	orr.w	r2, r3, #16
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	699a      	ldr	r2, [r3, #24]
 8013e58:	4b0e      	ldr	r3, [pc, #56]	; (8013e94 <USB_DevInit+0x2b4>)
 8013e5a:	4313      	orrs	r3, r2
 8013e5c:	687a      	ldr	r2, [r7, #4]
 8013e5e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8013e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d005      	beq.n	8013e72 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	699b      	ldr	r3, [r3, #24]
 8013e6a:	f043 0208 	orr.w	r2, r3, #8
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8013e72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e74:	2b01      	cmp	r3, #1
 8013e76:	d105      	bne.n	8013e84 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	699a      	ldr	r2, [r3, #24]
 8013e7c:	4b06      	ldr	r3, [pc, #24]	; (8013e98 <USB_DevInit+0x2b8>)
 8013e7e:	4313      	orrs	r3, r2
 8013e80:	687a      	ldr	r2, [r7, #4]
 8013e82:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8013e84:	7dfb      	ldrb	r3, [r7, #23]
}
 8013e86:	4618      	mov	r0, r3
 8013e88:	3718      	adds	r7, #24
 8013e8a:	46bd      	mov	sp, r7
 8013e8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013e90:	b004      	add	sp, #16
 8013e92:	4770      	bx	lr
 8013e94:	803c3800 	.word	0x803c3800
 8013e98:	40000004 	.word	0x40000004

08013e9c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8013e9c:	b480      	push	{r7}
 8013e9e:	b085      	sub	sp, #20
 8013ea0:	af00      	add	r7, sp, #0
 8013ea2:	6078      	str	r0, [r7, #4]
 8013ea4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013ea6:	2300      	movs	r3, #0
 8013ea8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	3301      	adds	r3, #1
 8013eae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	4a13      	ldr	r2, [pc, #76]	; (8013f00 <USB_FlushTxFifo+0x64>)
 8013eb4:	4293      	cmp	r3, r2
 8013eb6:	d901      	bls.n	8013ebc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8013eb8:	2303      	movs	r3, #3
 8013eba:	e01b      	b.n	8013ef4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	691b      	ldr	r3, [r3, #16]
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	daf2      	bge.n	8013eaa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8013ec4:	2300      	movs	r3, #0
 8013ec6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8013ec8:	683b      	ldr	r3, [r7, #0]
 8013eca:	019b      	lsls	r3, r3, #6
 8013ecc:	f043 0220 	orr.w	r2, r3, #32
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	3301      	adds	r3, #1
 8013ed8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	4a08      	ldr	r2, [pc, #32]	; (8013f00 <USB_FlushTxFifo+0x64>)
 8013ede:	4293      	cmp	r3, r2
 8013ee0:	d901      	bls.n	8013ee6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8013ee2:	2303      	movs	r3, #3
 8013ee4:	e006      	b.n	8013ef4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	691b      	ldr	r3, [r3, #16]
 8013eea:	f003 0320 	and.w	r3, r3, #32
 8013eee:	2b20      	cmp	r3, #32
 8013ef0:	d0f0      	beq.n	8013ed4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8013ef2:	2300      	movs	r3, #0
}
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	3714      	adds	r7, #20
 8013ef8:	46bd      	mov	sp, r7
 8013efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013efe:	4770      	bx	lr
 8013f00:	00030d40 	.word	0x00030d40

08013f04 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8013f04:	b480      	push	{r7}
 8013f06:	b085      	sub	sp, #20
 8013f08:	af00      	add	r7, sp, #0
 8013f0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013f0c:	2300      	movs	r3, #0
 8013f0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	3301      	adds	r3, #1
 8013f14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	4a11      	ldr	r2, [pc, #68]	; (8013f60 <USB_FlushRxFifo+0x5c>)
 8013f1a:	4293      	cmp	r3, r2
 8013f1c:	d901      	bls.n	8013f22 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8013f1e:	2303      	movs	r3, #3
 8013f20:	e018      	b.n	8013f54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	691b      	ldr	r3, [r3, #16]
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	daf2      	bge.n	8013f10 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8013f2a:	2300      	movs	r3, #0
 8013f2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	2210      	movs	r2, #16
 8013f32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	3301      	adds	r3, #1
 8013f38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013f3a:	68fb      	ldr	r3, [r7, #12]
 8013f3c:	4a08      	ldr	r2, [pc, #32]	; (8013f60 <USB_FlushRxFifo+0x5c>)
 8013f3e:	4293      	cmp	r3, r2
 8013f40:	d901      	bls.n	8013f46 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8013f42:	2303      	movs	r3, #3
 8013f44:	e006      	b.n	8013f54 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	691b      	ldr	r3, [r3, #16]
 8013f4a:	f003 0310 	and.w	r3, r3, #16
 8013f4e:	2b10      	cmp	r3, #16
 8013f50:	d0f0      	beq.n	8013f34 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8013f52:	2300      	movs	r3, #0
}
 8013f54:	4618      	mov	r0, r3
 8013f56:	3714      	adds	r7, #20
 8013f58:	46bd      	mov	sp, r7
 8013f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f5e:	4770      	bx	lr
 8013f60:	00030d40 	.word	0x00030d40

08013f64 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8013f64:	b480      	push	{r7}
 8013f66:	b085      	sub	sp, #20
 8013f68:	af00      	add	r7, sp, #0
 8013f6a:	6078      	str	r0, [r7, #4]
 8013f6c:	460b      	mov	r3, r1
 8013f6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8013f74:	68fb      	ldr	r3, [r7, #12]
 8013f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f7a:	681a      	ldr	r2, [r3, #0]
 8013f7c:	78fb      	ldrb	r3, [r7, #3]
 8013f7e:	68f9      	ldr	r1, [r7, #12]
 8013f80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013f84:	4313      	orrs	r3, r2
 8013f86:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8013f88:	2300      	movs	r3, #0
}
 8013f8a:	4618      	mov	r0, r3
 8013f8c:	3714      	adds	r7, #20
 8013f8e:	46bd      	mov	sp, r7
 8013f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f94:	4770      	bx	lr

08013f96 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8013f96:	b480      	push	{r7}
 8013f98:	b087      	sub	sp, #28
 8013f9a:	af00      	add	r7, sp, #0
 8013f9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8013fa2:	693b      	ldr	r3, [r7, #16]
 8013fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013fa8:	689b      	ldr	r3, [r3, #8]
 8013faa:	f003 0306 	and.w	r3, r3, #6
 8013fae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8013fb0:	68fb      	ldr	r3, [r7, #12]
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d102      	bne.n	8013fbc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8013fb6:	2300      	movs	r3, #0
 8013fb8:	75fb      	strb	r3, [r7, #23]
 8013fba:	e00a      	b.n	8013fd2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	2b02      	cmp	r3, #2
 8013fc0:	d002      	beq.n	8013fc8 <USB_GetDevSpeed+0x32>
 8013fc2:	68fb      	ldr	r3, [r7, #12]
 8013fc4:	2b06      	cmp	r3, #6
 8013fc6:	d102      	bne.n	8013fce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8013fc8:	2302      	movs	r3, #2
 8013fca:	75fb      	strb	r3, [r7, #23]
 8013fcc:	e001      	b.n	8013fd2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8013fce:	230f      	movs	r3, #15
 8013fd0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8013fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8013fd4:	4618      	mov	r0, r3
 8013fd6:	371c      	adds	r7, #28
 8013fd8:	46bd      	mov	sp, r7
 8013fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fde:	4770      	bx	lr

08013fe0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013fe0:	b480      	push	{r7}
 8013fe2:	b085      	sub	sp, #20
 8013fe4:	af00      	add	r7, sp, #0
 8013fe6:	6078      	str	r0, [r7, #4]
 8013fe8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013fee:	683b      	ldr	r3, [r7, #0]
 8013ff0:	781b      	ldrb	r3, [r3, #0]
 8013ff2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013ff4:	683b      	ldr	r3, [r7, #0]
 8013ff6:	785b      	ldrb	r3, [r3, #1]
 8013ff8:	2b01      	cmp	r3, #1
 8013ffa:	d139      	bne.n	8014070 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014002:	69da      	ldr	r2, [r3, #28]
 8014004:	683b      	ldr	r3, [r7, #0]
 8014006:	781b      	ldrb	r3, [r3, #0]
 8014008:	f003 030f 	and.w	r3, r3, #15
 801400c:	2101      	movs	r1, #1
 801400e:	fa01 f303 	lsl.w	r3, r1, r3
 8014012:	b29b      	uxth	r3, r3
 8014014:	68f9      	ldr	r1, [r7, #12]
 8014016:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801401a:	4313      	orrs	r3, r2
 801401c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801401e:	68bb      	ldr	r3, [r7, #8]
 8014020:	015a      	lsls	r2, r3, #5
 8014022:	68fb      	ldr	r3, [r7, #12]
 8014024:	4413      	add	r3, r2
 8014026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801402a:	681b      	ldr	r3, [r3, #0]
 801402c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014030:	2b00      	cmp	r3, #0
 8014032:	d153      	bne.n	80140dc <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014034:	68bb      	ldr	r3, [r7, #8]
 8014036:	015a      	lsls	r2, r3, #5
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	4413      	add	r3, r2
 801403c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014040:	681a      	ldr	r2, [r3, #0]
 8014042:	683b      	ldr	r3, [r7, #0]
 8014044:	689b      	ldr	r3, [r3, #8]
 8014046:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801404a:	683b      	ldr	r3, [r7, #0]
 801404c:	791b      	ldrb	r3, [r3, #4]
 801404e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014050:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8014052:	68bb      	ldr	r3, [r7, #8]
 8014054:	059b      	lsls	r3, r3, #22
 8014056:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014058:	431a      	orrs	r2, r3
 801405a:	68bb      	ldr	r3, [r7, #8]
 801405c:	0159      	lsls	r1, r3, #5
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	440b      	add	r3, r1
 8014062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014066:	4619      	mov	r1, r3
 8014068:	4b20      	ldr	r3, [pc, #128]	; (80140ec <USB_ActivateEndpoint+0x10c>)
 801406a:	4313      	orrs	r3, r2
 801406c:	600b      	str	r3, [r1, #0]
 801406e:	e035      	b.n	80140dc <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8014070:	68fb      	ldr	r3, [r7, #12]
 8014072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014076:	69da      	ldr	r2, [r3, #28]
 8014078:	683b      	ldr	r3, [r7, #0]
 801407a:	781b      	ldrb	r3, [r3, #0]
 801407c:	f003 030f 	and.w	r3, r3, #15
 8014080:	2101      	movs	r1, #1
 8014082:	fa01 f303 	lsl.w	r3, r1, r3
 8014086:	041b      	lsls	r3, r3, #16
 8014088:	68f9      	ldr	r1, [r7, #12]
 801408a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801408e:	4313      	orrs	r3, r2
 8014090:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8014092:	68bb      	ldr	r3, [r7, #8]
 8014094:	015a      	lsls	r2, r3, #5
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	4413      	add	r3, r2
 801409a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d119      	bne.n	80140dc <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80140a8:	68bb      	ldr	r3, [r7, #8]
 80140aa:	015a      	lsls	r2, r3, #5
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	4413      	add	r3, r2
 80140b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140b4:	681a      	ldr	r2, [r3, #0]
 80140b6:	683b      	ldr	r3, [r7, #0]
 80140b8:	689b      	ldr	r3, [r3, #8]
 80140ba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80140be:	683b      	ldr	r3, [r7, #0]
 80140c0:	791b      	ldrb	r3, [r3, #4]
 80140c2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80140c4:	430b      	orrs	r3, r1
 80140c6:	431a      	orrs	r2, r3
 80140c8:	68bb      	ldr	r3, [r7, #8]
 80140ca:	0159      	lsls	r1, r3, #5
 80140cc:	68fb      	ldr	r3, [r7, #12]
 80140ce:	440b      	add	r3, r1
 80140d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140d4:	4619      	mov	r1, r3
 80140d6:	4b05      	ldr	r3, [pc, #20]	; (80140ec <USB_ActivateEndpoint+0x10c>)
 80140d8:	4313      	orrs	r3, r2
 80140da:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80140dc:	2300      	movs	r3, #0
}
 80140de:	4618      	mov	r0, r3
 80140e0:	3714      	adds	r7, #20
 80140e2:	46bd      	mov	sp, r7
 80140e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140e8:	4770      	bx	lr
 80140ea:	bf00      	nop
 80140ec:	10008000 	.word	0x10008000

080140f0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80140f0:	b480      	push	{r7}
 80140f2:	b085      	sub	sp, #20
 80140f4:	af00      	add	r7, sp, #0
 80140f6:	6078      	str	r0, [r7, #4]
 80140f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80140fe:	683b      	ldr	r3, [r7, #0]
 8014100:	781b      	ldrb	r3, [r3, #0]
 8014102:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8014104:	683b      	ldr	r3, [r7, #0]
 8014106:	785b      	ldrb	r3, [r3, #1]
 8014108:	2b01      	cmp	r3, #1
 801410a:	d161      	bne.n	80141d0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801410c:	68bb      	ldr	r3, [r7, #8]
 801410e:	015a      	lsls	r2, r3, #5
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	4413      	add	r3, r2
 8014114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014118:	681b      	ldr	r3, [r3, #0]
 801411a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801411e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014122:	d11f      	bne.n	8014164 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8014124:	68bb      	ldr	r3, [r7, #8]
 8014126:	015a      	lsls	r2, r3, #5
 8014128:	68fb      	ldr	r3, [r7, #12]
 801412a:	4413      	add	r3, r2
 801412c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	68ba      	ldr	r2, [r7, #8]
 8014134:	0151      	lsls	r1, r2, #5
 8014136:	68fa      	ldr	r2, [r7, #12]
 8014138:	440a      	add	r2, r1
 801413a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801413e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014142:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8014144:	68bb      	ldr	r3, [r7, #8]
 8014146:	015a      	lsls	r2, r3, #5
 8014148:	68fb      	ldr	r3, [r7, #12]
 801414a:	4413      	add	r3, r2
 801414c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014150:	681b      	ldr	r3, [r3, #0]
 8014152:	68ba      	ldr	r2, [r7, #8]
 8014154:	0151      	lsls	r1, r2, #5
 8014156:	68fa      	ldr	r2, [r7, #12]
 8014158:	440a      	add	r2, r1
 801415a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801415e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014162:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8014164:	68fb      	ldr	r3, [r7, #12]
 8014166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801416a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801416c:	683b      	ldr	r3, [r7, #0]
 801416e:	781b      	ldrb	r3, [r3, #0]
 8014170:	f003 030f 	and.w	r3, r3, #15
 8014174:	2101      	movs	r1, #1
 8014176:	fa01 f303 	lsl.w	r3, r1, r3
 801417a:	b29b      	uxth	r3, r3
 801417c:	43db      	mvns	r3, r3
 801417e:	68f9      	ldr	r1, [r7, #12]
 8014180:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014184:	4013      	ands	r3, r2
 8014186:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801418e:	69da      	ldr	r2, [r3, #28]
 8014190:	683b      	ldr	r3, [r7, #0]
 8014192:	781b      	ldrb	r3, [r3, #0]
 8014194:	f003 030f 	and.w	r3, r3, #15
 8014198:	2101      	movs	r1, #1
 801419a:	fa01 f303 	lsl.w	r3, r1, r3
 801419e:	b29b      	uxth	r3, r3
 80141a0:	43db      	mvns	r3, r3
 80141a2:	68f9      	ldr	r1, [r7, #12]
 80141a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80141a8:	4013      	ands	r3, r2
 80141aa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80141ac:	68bb      	ldr	r3, [r7, #8]
 80141ae:	015a      	lsls	r2, r3, #5
 80141b0:	68fb      	ldr	r3, [r7, #12]
 80141b2:	4413      	add	r3, r2
 80141b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80141b8:	681a      	ldr	r2, [r3, #0]
 80141ba:	68bb      	ldr	r3, [r7, #8]
 80141bc:	0159      	lsls	r1, r3, #5
 80141be:	68fb      	ldr	r3, [r7, #12]
 80141c0:	440b      	add	r3, r1
 80141c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80141c6:	4619      	mov	r1, r3
 80141c8:	4b35      	ldr	r3, [pc, #212]	; (80142a0 <USB_DeactivateEndpoint+0x1b0>)
 80141ca:	4013      	ands	r3, r2
 80141cc:	600b      	str	r3, [r1, #0]
 80141ce:	e060      	b.n	8014292 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80141d0:	68bb      	ldr	r3, [r7, #8]
 80141d2:	015a      	lsls	r2, r3, #5
 80141d4:	68fb      	ldr	r3, [r7, #12]
 80141d6:	4413      	add	r3, r2
 80141d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80141e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80141e6:	d11f      	bne.n	8014228 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80141e8:	68bb      	ldr	r3, [r7, #8]
 80141ea:	015a      	lsls	r2, r3, #5
 80141ec:	68fb      	ldr	r3, [r7, #12]
 80141ee:	4413      	add	r3, r2
 80141f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80141f4:	681b      	ldr	r3, [r3, #0]
 80141f6:	68ba      	ldr	r2, [r7, #8]
 80141f8:	0151      	lsls	r1, r2, #5
 80141fa:	68fa      	ldr	r2, [r7, #12]
 80141fc:	440a      	add	r2, r1
 80141fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014202:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014206:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8014208:	68bb      	ldr	r3, [r7, #8]
 801420a:	015a      	lsls	r2, r3, #5
 801420c:	68fb      	ldr	r3, [r7, #12]
 801420e:	4413      	add	r3, r2
 8014210:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	68ba      	ldr	r2, [r7, #8]
 8014218:	0151      	lsls	r1, r2, #5
 801421a:	68fa      	ldr	r2, [r7, #12]
 801421c:	440a      	add	r2, r1
 801421e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014222:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014226:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014228:	68fb      	ldr	r3, [r7, #12]
 801422a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801422e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014230:	683b      	ldr	r3, [r7, #0]
 8014232:	781b      	ldrb	r3, [r3, #0]
 8014234:	f003 030f 	and.w	r3, r3, #15
 8014238:	2101      	movs	r1, #1
 801423a:	fa01 f303 	lsl.w	r3, r1, r3
 801423e:	041b      	lsls	r3, r3, #16
 8014240:	43db      	mvns	r3, r3
 8014242:	68f9      	ldr	r1, [r7, #12]
 8014244:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014248:	4013      	ands	r3, r2
 801424a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801424c:	68fb      	ldr	r3, [r7, #12]
 801424e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014252:	69da      	ldr	r2, [r3, #28]
 8014254:	683b      	ldr	r3, [r7, #0]
 8014256:	781b      	ldrb	r3, [r3, #0]
 8014258:	f003 030f 	and.w	r3, r3, #15
 801425c:	2101      	movs	r1, #1
 801425e:	fa01 f303 	lsl.w	r3, r1, r3
 8014262:	041b      	lsls	r3, r3, #16
 8014264:	43db      	mvns	r3, r3
 8014266:	68f9      	ldr	r1, [r7, #12]
 8014268:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801426c:	4013      	ands	r3, r2
 801426e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8014270:	68bb      	ldr	r3, [r7, #8]
 8014272:	015a      	lsls	r2, r3, #5
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	4413      	add	r3, r2
 8014278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801427c:	681a      	ldr	r2, [r3, #0]
 801427e:	68bb      	ldr	r3, [r7, #8]
 8014280:	0159      	lsls	r1, r3, #5
 8014282:	68fb      	ldr	r3, [r7, #12]
 8014284:	440b      	add	r3, r1
 8014286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801428a:	4619      	mov	r1, r3
 801428c:	4b05      	ldr	r3, [pc, #20]	; (80142a4 <USB_DeactivateEndpoint+0x1b4>)
 801428e:	4013      	ands	r3, r2
 8014290:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8014292:	2300      	movs	r3, #0
}
 8014294:	4618      	mov	r0, r3
 8014296:	3714      	adds	r7, #20
 8014298:	46bd      	mov	sp, r7
 801429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801429e:	4770      	bx	lr
 80142a0:	ec337800 	.word	0xec337800
 80142a4:	eff37800 	.word	0xeff37800

080142a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80142a8:	b580      	push	{r7, lr}
 80142aa:	b08a      	sub	sp, #40	; 0x28
 80142ac:	af02      	add	r7, sp, #8
 80142ae:	60f8      	str	r0, [r7, #12]
 80142b0:	60b9      	str	r1, [r7, #8]
 80142b2:	4613      	mov	r3, r2
 80142b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80142b6:	68fb      	ldr	r3, [r7, #12]
 80142b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80142ba:	68bb      	ldr	r3, [r7, #8]
 80142bc:	781b      	ldrb	r3, [r3, #0]
 80142be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80142c0:	68bb      	ldr	r3, [r7, #8]
 80142c2:	785b      	ldrb	r3, [r3, #1]
 80142c4:	2b01      	cmp	r3, #1
 80142c6:	f040 8181 	bne.w	80145cc <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80142ca:	68bb      	ldr	r3, [r7, #8]
 80142cc:	691b      	ldr	r3, [r3, #16]
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d132      	bne.n	8014338 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80142d2:	69bb      	ldr	r3, [r7, #24]
 80142d4:	015a      	lsls	r2, r3, #5
 80142d6:	69fb      	ldr	r3, [r7, #28]
 80142d8:	4413      	add	r3, r2
 80142da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142de:	691a      	ldr	r2, [r3, #16]
 80142e0:	69bb      	ldr	r3, [r7, #24]
 80142e2:	0159      	lsls	r1, r3, #5
 80142e4:	69fb      	ldr	r3, [r7, #28]
 80142e6:	440b      	add	r3, r1
 80142e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142ec:	4619      	mov	r1, r3
 80142ee:	4ba5      	ldr	r3, [pc, #660]	; (8014584 <USB_EPStartXfer+0x2dc>)
 80142f0:	4013      	ands	r3, r2
 80142f2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80142f4:	69bb      	ldr	r3, [r7, #24]
 80142f6:	015a      	lsls	r2, r3, #5
 80142f8:	69fb      	ldr	r3, [r7, #28]
 80142fa:	4413      	add	r3, r2
 80142fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014300:	691b      	ldr	r3, [r3, #16]
 8014302:	69ba      	ldr	r2, [r7, #24]
 8014304:	0151      	lsls	r1, r2, #5
 8014306:	69fa      	ldr	r2, [r7, #28]
 8014308:	440a      	add	r2, r1
 801430a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801430e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014312:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014314:	69bb      	ldr	r3, [r7, #24]
 8014316:	015a      	lsls	r2, r3, #5
 8014318:	69fb      	ldr	r3, [r7, #28]
 801431a:	4413      	add	r3, r2
 801431c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014320:	691a      	ldr	r2, [r3, #16]
 8014322:	69bb      	ldr	r3, [r7, #24]
 8014324:	0159      	lsls	r1, r3, #5
 8014326:	69fb      	ldr	r3, [r7, #28]
 8014328:	440b      	add	r3, r1
 801432a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801432e:	4619      	mov	r1, r3
 8014330:	4b95      	ldr	r3, [pc, #596]	; (8014588 <USB_EPStartXfer+0x2e0>)
 8014332:	4013      	ands	r3, r2
 8014334:	610b      	str	r3, [r1, #16]
 8014336:	e092      	b.n	801445e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014338:	69bb      	ldr	r3, [r7, #24]
 801433a:	015a      	lsls	r2, r3, #5
 801433c:	69fb      	ldr	r3, [r7, #28]
 801433e:	4413      	add	r3, r2
 8014340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014344:	691a      	ldr	r2, [r3, #16]
 8014346:	69bb      	ldr	r3, [r7, #24]
 8014348:	0159      	lsls	r1, r3, #5
 801434a:	69fb      	ldr	r3, [r7, #28]
 801434c:	440b      	add	r3, r1
 801434e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014352:	4619      	mov	r1, r3
 8014354:	4b8c      	ldr	r3, [pc, #560]	; (8014588 <USB_EPStartXfer+0x2e0>)
 8014356:	4013      	ands	r3, r2
 8014358:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801435a:	69bb      	ldr	r3, [r7, #24]
 801435c:	015a      	lsls	r2, r3, #5
 801435e:	69fb      	ldr	r3, [r7, #28]
 8014360:	4413      	add	r3, r2
 8014362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014366:	691a      	ldr	r2, [r3, #16]
 8014368:	69bb      	ldr	r3, [r7, #24]
 801436a:	0159      	lsls	r1, r3, #5
 801436c:	69fb      	ldr	r3, [r7, #28]
 801436e:	440b      	add	r3, r1
 8014370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014374:	4619      	mov	r1, r3
 8014376:	4b83      	ldr	r3, [pc, #524]	; (8014584 <USB_EPStartXfer+0x2dc>)
 8014378:	4013      	ands	r3, r2
 801437a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 801437c:	69bb      	ldr	r3, [r7, #24]
 801437e:	2b00      	cmp	r3, #0
 8014380:	d11a      	bne.n	80143b8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8014382:	68bb      	ldr	r3, [r7, #8]
 8014384:	691a      	ldr	r2, [r3, #16]
 8014386:	68bb      	ldr	r3, [r7, #8]
 8014388:	689b      	ldr	r3, [r3, #8]
 801438a:	429a      	cmp	r2, r3
 801438c:	d903      	bls.n	8014396 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 801438e:	68bb      	ldr	r3, [r7, #8]
 8014390:	689a      	ldr	r2, [r3, #8]
 8014392:	68bb      	ldr	r3, [r7, #8]
 8014394:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014396:	69bb      	ldr	r3, [r7, #24]
 8014398:	015a      	lsls	r2, r3, #5
 801439a:	69fb      	ldr	r3, [r7, #28]
 801439c:	4413      	add	r3, r2
 801439e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143a2:	691b      	ldr	r3, [r3, #16]
 80143a4:	69ba      	ldr	r2, [r7, #24]
 80143a6:	0151      	lsls	r1, r2, #5
 80143a8:	69fa      	ldr	r2, [r7, #28]
 80143aa:	440a      	add	r2, r1
 80143ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80143b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80143b4:	6113      	str	r3, [r2, #16]
 80143b6:	e01b      	b.n	80143f0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80143b8:	69bb      	ldr	r3, [r7, #24]
 80143ba:	015a      	lsls	r2, r3, #5
 80143bc:	69fb      	ldr	r3, [r7, #28]
 80143be:	4413      	add	r3, r2
 80143c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143c4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80143c6:	68bb      	ldr	r3, [r7, #8]
 80143c8:	6919      	ldr	r1, [r3, #16]
 80143ca:	68bb      	ldr	r3, [r7, #8]
 80143cc:	689b      	ldr	r3, [r3, #8]
 80143ce:	440b      	add	r3, r1
 80143d0:	1e59      	subs	r1, r3, #1
 80143d2:	68bb      	ldr	r3, [r7, #8]
 80143d4:	689b      	ldr	r3, [r3, #8]
 80143d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80143da:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80143dc:	4b6b      	ldr	r3, [pc, #428]	; (801458c <USB_EPStartXfer+0x2e4>)
 80143de:	400b      	ands	r3, r1
 80143e0:	69b9      	ldr	r1, [r7, #24]
 80143e2:	0148      	lsls	r0, r1, #5
 80143e4:	69f9      	ldr	r1, [r7, #28]
 80143e6:	4401      	add	r1, r0
 80143e8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80143ec:	4313      	orrs	r3, r2
 80143ee:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80143f0:	69bb      	ldr	r3, [r7, #24]
 80143f2:	015a      	lsls	r2, r3, #5
 80143f4:	69fb      	ldr	r3, [r7, #28]
 80143f6:	4413      	add	r3, r2
 80143f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143fc:	691a      	ldr	r2, [r3, #16]
 80143fe:	68bb      	ldr	r3, [r7, #8]
 8014400:	691b      	ldr	r3, [r3, #16]
 8014402:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014406:	69b9      	ldr	r1, [r7, #24]
 8014408:	0148      	lsls	r0, r1, #5
 801440a:	69f9      	ldr	r1, [r7, #28]
 801440c:	4401      	add	r1, r0
 801440e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8014412:	4313      	orrs	r3, r2
 8014414:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8014416:	68bb      	ldr	r3, [r7, #8]
 8014418:	791b      	ldrb	r3, [r3, #4]
 801441a:	2b01      	cmp	r3, #1
 801441c:	d11f      	bne.n	801445e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801441e:	69bb      	ldr	r3, [r7, #24]
 8014420:	015a      	lsls	r2, r3, #5
 8014422:	69fb      	ldr	r3, [r7, #28]
 8014424:	4413      	add	r3, r2
 8014426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801442a:	691b      	ldr	r3, [r3, #16]
 801442c:	69ba      	ldr	r2, [r7, #24]
 801442e:	0151      	lsls	r1, r2, #5
 8014430:	69fa      	ldr	r2, [r7, #28]
 8014432:	440a      	add	r2, r1
 8014434:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014438:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801443c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801443e:	69bb      	ldr	r3, [r7, #24]
 8014440:	015a      	lsls	r2, r3, #5
 8014442:	69fb      	ldr	r3, [r7, #28]
 8014444:	4413      	add	r3, r2
 8014446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801444a:	691b      	ldr	r3, [r3, #16]
 801444c:	69ba      	ldr	r2, [r7, #24]
 801444e:	0151      	lsls	r1, r2, #5
 8014450:	69fa      	ldr	r2, [r7, #28]
 8014452:	440a      	add	r2, r1
 8014454:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014458:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801445c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801445e:	79fb      	ldrb	r3, [r7, #7]
 8014460:	2b01      	cmp	r3, #1
 8014462:	d14b      	bne.n	80144fc <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8014464:	68bb      	ldr	r3, [r7, #8]
 8014466:	69db      	ldr	r3, [r3, #28]
 8014468:	2b00      	cmp	r3, #0
 801446a:	d009      	beq.n	8014480 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801446c:	69bb      	ldr	r3, [r7, #24]
 801446e:	015a      	lsls	r2, r3, #5
 8014470:	69fb      	ldr	r3, [r7, #28]
 8014472:	4413      	add	r3, r2
 8014474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014478:	461a      	mov	r2, r3
 801447a:	68bb      	ldr	r3, [r7, #8]
 801447c:	69db      	ldr	r3, [r3, #28]
 801447e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8014480:	68bb      	ldr	r3, [r7, #8]
 8014482:	791b      	ldrb	r3, [r3, #4]
 8014484:	2b01      	cmp	r3, #1
 8014486:	d128      	bne.n	80144da <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014488:	69fb      	ldr	r3, [r7, #28]
 801448a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801448e:	689b      	ldr	r3, [r3, #8]
 8014490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014494:	2b00      	cmp	r3, #0
 8014496:	d110      	bne.n	80144ba <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014498:	69bb      	ldr	r3, [r7, #24]
 801449a:	015a      	lsls	r2, r3, #5
 801449c:	69fb      	ldr	r3, [r7, #28]
 801449e:	4413      	add	r3, r2
 80144a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	69ba      	ldr	r2, [r7, #24]
 80144a8:	0151      	lsls	r1, r2, #5
 80144aa:	69fa      	ldr	r2, [r7, #28]
 80144ac:	440a      	add	r2, r1
 80144ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80144b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80144b6:	6013      	str	r3, [r2, #0]
 80144b8:	e00f      	b.n	80144da <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80144ba:	69bb      	ldr	r3, [r7, #24]
 80144bc:	015a      	lsls	r2, r3, #5
 80144be:	69fb      	ldr	r3, [r7, #28]
 80144c0:	4413      	add	r3, r2
 80144c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80144c6:	681b      	ldr	r3, [r3, #0]
 80144c8:	69ba      	ldr	r2, [r7, #24]
 80144ca:	0151      	lsls	r1, r2, #5
 80144cc:	69fa      	ldr	r2, [r7, #28]
 80144ce:	440a      	add	r2, r1
 80144d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80144d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80144d8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80144da:	69bb      	ldr	r3, [r7, #24]
 80144dc:	015a      	lsls	r2, r3, #5
 80144de:	69fb      	ldr	r3, [r7, #28]
 80144e0:	4413      	add	r3, r2
 80144e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80144e6:	681b      	ldr	r3, [r3, #0]
 80144e8:	69ba      	ldr	r2, [r7, #24]
 80144ea:	0151      	lsls	r1, r2, #5
 80144ec:	69fa      	ldr	r2, [r7, #28]
 80144ee:	440a      	add	r2, r1
 80144f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80144f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80144f8:	6013      	str	r3, [r2, #0]
 80144fa:	e16a      	b.n	80147d2 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80144fc:	69bb      	ldr	r3, [r7, #24]
 80144fe:	015a      	lsls	r2, r3, #5
 8014500:	69fb      	ldr	r3, [r7, #28]
 8014502:	4413      	add	r3, r2
 8014504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	69ba      	ldr	r2, [r7, #24]
 801450c:	0151      	lsls	r1, r2, #5
 801450e:	69fa      	ldr	r2, [r7, #28]
 8014510:	440a      	add	r2, r1
 8014512:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014516:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801451a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801451c:	68bb      	ldr	r3, [r7, #8]
 801451e:	791b      	ldrb	r3, [r3, #4]
 8014520:	2b01      	cmp	r3, #1
 8014522:	d015      	beq.n	8014550 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8014524:	68bb      	ldr	r3, [r7, #8]
 8014526:	691b      	ldr	r3, [r3, #16]
 8014528:	2b00      	cmp	r3, #0
 801452a:	f000 8152 	beq.w	80147d2 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801452e:	69fb      	ldr	r3, [r7, #28]
 8014530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014534:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014536:	68bb      	ldr	r3, [r7, #8]
 8014538:	781b      	ldrb	r3, [r3, #0]
 801453a:	f003 030f 	and.w	r3, r3, #15
 801453e:	2101      	movs	r1, #1
 8014540:	fa01 f303 	lsl.w	r3, r1, r3
 8014544:	69f9      	ldr	r1, [r7, #28]
 8014546:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801454a:	4313      	orrs	r3, r2
 801454c:	634b      	str	r3, [r1, #52]	; 0x34
 801454e:	e140      	b.n	80147d2 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014550:	69fb      	ldr	r3, [r7, #28]
 8014552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014556:	689b      	ldr	r3, [r3, #8]
 8014558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801455c:	2b00      	cmp	r3, #0
 801455e:	d117      	bne.n	8014590 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014560:	69bb      	ldr	r3, [r7, #24]
 8014562:	015a      	lsls	r2, r3, #5
 8014564:	69fb      	ldr	r3, [r7, #28]
 8014566:	4413      	add	r3, r2
 8014568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801456c:	681b      	ldr	r3, [r3, #0]
 801456e:	69ba      	ldr	r2, [r7, #24]
 8014570:	0151      	lsls	r1, r2, #5
 8014572:	69fa      	ldr	r2, [r7, #28]
 8014574:	440a      	add	r2, r1
 8014576:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801457a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801457e:	6013      	str	r3, [r2, #0]
 8014580:	e016      	b.n	80145b0 <USB_EPStartXfer+0x308>
 8014582:	bf00      	nop
 8014584:	e007ffff 	.word	0xe007ffff
 8014588:	fff80000 	.word	0xfff80000
 801458c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014590:	69bb      	ldr	r3, [r7, #24]
 8014592:	015a      	lsls	r2, r3, #5
 8014594:	69fb      	ldr	r3, [r7, #28]
 8014596:	4413      	add	r3, r2
 8014598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801459c:	681b      	ldr	r3, [r3, #0]
 801459e:	69ba      	ldr	r2, [r7, #24]
 80145a0:	0151      	lsls	r1, r2, #5
 80145a2:	69fa      	ldr	r2, [r7, #28]
 80145a4:	440a      	add	r2, r1
 80145a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80145aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80145ae:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80145b0:	68bb      	ldr	r3, [r7, #8]
 80145b2:	68d9      	ldr	r1, [r3, #12]
 80145b4:	68bb      	ldr	r3, [r7, #8]
 80145b6:	781a      	ldrb	r2, [r3, #0]
 80145b8:	68bb      	ldr	r3, [r7, #8]
 80145ba:	691b      	ldr	r3, [r3, #16]
 80145bc:	b298      	uxth	r0, r3
 80145be:	79fb      	ldrb	r3, [r7, #7]
 80145c0:	9300      	str	r3, [sp, #0]
 80145c2:	4603      	mov	r3, r0
 80145c4:	68f8      	ldr	r0, [r7, #12]
 80145c6:	f000 f9b9 	bl	801493c <USB_WritePacket>
 80145ca:	e102      	b.n	80147d2 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80145cc:	69bb      	ldr	r3, [r7, #24]
 80145ce:	015a      	lsls	r2, r3, #5
 80145d0:	69fb      	ldr	r3, [r7, #28]
 80145d2:	4413      	add	r3, r2
 80145d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80145d8:	691a      	ldr	r2, [r3, #16]
 80145da:	69bb      	ldr	r3, [r7, #24]
 80145dc:	0159      	lsls	r1, r3, #5
 80145de:	69fb      	ldr	r3, [r7, #28]
 80145e0:	440b      	add	r3, r1
 80145e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80145e6:	4619      	mov	r1, r3
 80145e8:	4b7c      	ldr	r3, [pc, #496]	; (80147dc <USB_EPStartXfer+0x534>)
 80145ea:	4013      	ands	r3, r2
 80145ec:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80145ee:	69bb      	ldr	r3, [r7, #24]
 80145f0:	015a      	lsls	r2, r3, #5
 80145f2:	69fb      	ldr	r3, [r7, #28]
 80145f4:	4413      	add	r3, r2
 80145f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80145fa:	691a      	ldr	r2, [r3, #16]
 80145fc:	69bb      	ldr	r3, [r7, #24]
 80145fe:	0159      	lsls	r1, r3, #5
 8014600:	69fb      	ldr	r3, [r7, #28]
 8014602:	440b      	add	r3, r1
 8014604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014608:	4619      	mov	r1, r3
 801460a:	4b75      	ldr	r3, [pc, #468]	; (80147e0 <USB_EPStartXfer+0x538>)
 801460c:	4013      	ands	r3, r2
 801460e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8014610:	69bb      	ldr	r3, [r7, #24]
 8014612:	2b00      	cmp	r3, #0
 8014614:	d12f      	bne.n	8014676 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8014616:	68bb      	ldr	r3, [r7, #8]
 8014618:	691b      	ldr	r3, [r3, #16]
 801461a:	2b00      	cmp	r3, #0
 801461c:	d003      	beq.n	8014626 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 801461e:	68bb      	ldr	r3, [r7, #8]
 8014620:	689a      	ldr	r2, [r3, #8]
 8014622:	68bb      	ldr	r3, [r7, #8]
 8014624:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8014626:	68bb      	ldr	r3, [r7, #8]
 8014628:	689a      	ldr	r2, [r3, #8]
 801462a:	68bb      	ldr	r3, [r7, #8]
 801462c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 801462e:	69bb      	ldr	r3, [r7, #24]
 8014630:	015a      	lsls	r2, r3, #5
 8014632:	69fb      	ldr	r3, [r7, #28]
 8014634:	4413      	add	r3, r2
 8014636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801463a:	691a      	ldr	r2, [r3, #16]
 801463c:	68bb      	ldr	r3, [r7, #8]
 801463e:	6a1b      	ldr	r3, [r3, #32]
 8014640:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014644:	69b9      	ldr	r1, [r7, #24]
 8014646:	0148      	lsls	r0, r1, #5
 8014648:	69f9      	ldr	r1, [r7, #28]
 801464a:	4401      	add	r1, r0
 801464c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014650:	4313      	orrs	r3, r2
 8014652:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014654:	69bb      	ldr	r3, [r7, #24]
 8014656:	015a      	lsls	r2, r3, #5
 8014658:	69fb      	ldr	r3, [r7, #28]
 801465a:	4413      	add	r3, r2
 801465c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014660:	691b      	ldr	r3, [r3, #16]
 8014662:	69ba      	ldr	r2, [r7, #24]
 8014664:	0151      	lsls	r1, r2, #5
 8014666:	69fa      	ldr	r2, [r7, #28]
 8014668:	440a      	add	r2, r1
 801466a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801466e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014672:	6113      	str	r3, [r2, #16]
 8014674:	e05f      	b.n	8014736 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8014676:	68bb      	ldr	r3, [r7, #8]
 8014678:	691b      	ldr	r3, [r3, #16]
 801467a:	2b00      	cmp	r3, #0
 801467c:	d123      	bne.n	80146c6 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801467e:	69bb      	ldr	r3, [r7, #24]
 8014680:	015a      	lsls	r2, r3, #5
 8014682:	69fb      	ldr	r3, [r7, #28]
 8014684:	4413      	add	r3, r2
 8014686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801468a:	691a      	ldr	r2, [r3, #16]
 801468c:	68bb      	ldr	r3, [r7, #8]
 801468e:	689b      	ldr	r3, [r3, #8]
 8014690:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014694:	69b9      	ldr	r1, [r7, #24]
 8014696:	0148      	lsls	r0, r1, #5
 8014698:	69f9      	ldr	r1, [r7, #28]
 801469a:	4401      	add	r1, r0
 801469c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80146a0:	4313      	orrs	r3, r2
 80146a2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80146a4:	69bb      	ldr	r3, [r7, #24]
 80146a6:	015a      	lsls	r2, r3, #5
 80146a8:	69fb      	ldr	r3, [r7, #28]
 80146aa:	4413      	add	r3, r2
 80146ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80146b0:	691b      	ldr	r3, [r3, #16]
 80146b2:	69ba      	ldr	r2, [r7, #24]
 80146b4:	0151      	lsls	r1, r2, #5
 80146b6:	69fa      	ldr	r2, [r7, #28]
 80146b8:	440a      	add	r2, r1
 80146ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80146be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80146c2:	6113      	str	r3, [r2, #16]
 80146c4:	e037      	b.n	8014736 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80146c6:	68bb      	ldr	r3, [r7, #8]
 80146c8:	691a      	ldr	r2, [r3, #16]
 80146ca:	68bb      	ldr	r3, [r7, #8]
 80146cc:	689b      	ldr	r3, [r3, #8]
 80146ce:	4413      	add	r3, r2
 80146d0:	1e5a      	subs	r2, r3, #1
 80146d2:	68bb      	ldr	r3, [r7, #8]
 80146d4:	689b      	ldr	r3, [r3, #8]
 80146d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80146da:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80146dc:	68bb      	ldr	r3, [r7, #8]
 80146de:	689b      	ldr	r3, [r3, #8]
 80146e0:	8afa      	ldrh	r2, [r7, #22]
 80146e2:	fb03 f202 	mul.w	r2, r3, r2
 80146e6:	68bb      	ldr	r3, [r7, #8]
 80146e8:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80146ea:	69bb      	ldr	r3, [r7, #24]
 80146ec:	015a      	lsls	r2, r3, #5
 80146ee:	69fb      	ldr	r3, [r7, #28]
 80146f0:	4413      	add	r3, r2
 80146f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80146f6:	691a      	ldr	r2, [r3, #16]
 80146f8:	8afb      	ldrh	r3, [r7, #22]
 80146fa:	04d9      	lsls	r1, r3, #19
 80146fc:	4b39      	ldr	r3, [pc, #228]	; (80147e4 <USB_EPStartXfer+0x53c>)
 80146fe:	400b      	ands	r3, r1
 8014700:	69b9      	ldr	r1, [r7, #24]
 8014702:	0148      	lsls	r0, r1, #5
 8014704:	69f9      	ldr	r1, [r7, #28]
 8014706:	4401      	add	r1, r0
 8014708:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801470c:	4313      	orrs	r3, r2
 801470e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8014710:	69bb      	ldr	r3, [r7, #24]
 8014712:	015a      	lsls	r2, r3, #5
 8014714:	69fb      	ldr	r3, [r7, #28]
 8014716:	4413      	add	r3, r2
 8014718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801471c:	691a      	ldr	r2, [r3, #16]
 801471e:	68bb      	ldr	r3, [r7, #8]
 8014720:	6a1b      	ldr	r3, [r3, #32]
 8014722:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014726:	69b9      	ldr	r1, [r7, #24]
 8014728:	0148      	lsls	r0, r1, #5
 801472a:	69f9      	ldr	r1, [r7, #28]
 801472c:	4401      	add	r1, r0
 801472e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014732:	4313      	orrs	r3, r2
 8014734:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8014736:	79fb      	ldrb	r3, [r7, #7]
 8014738:	2b01      	cmp	r3, #1
 801473a:	d10d      	bne.n	8014758 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801473c:	68bb      	ldr	r3, [r7, #8]
 801473e:	68db      	ldr	r3, [r3, #12]
 8014740:	2b00      	cmp	r3, #0
 8014742:	d009      	beq.n	8014758 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8014744:	68bb      	ldr	r3, [r7, #8]
 8014746:	68d9      	ldr	r1, [r3, #12]
 8014748:	69bb      	ldr	r3, [r7, #24]
 801474a:	015a      	lsls	r2, r3, #5
 801474c:	69fb      	ldr	r3, [r7, #28]
 801474e:	4413      	add	r3, r2
 8014750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014754:	460a      	mov	r2, r1
 8014756:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8014758:	68bb      	ldr	r3, [r7, #8]
 801475a:	791b      	ldrb	r3, [r3, #4]
 801475c:	2b01      	cmp	r3, #1
 801475e:	d128      	bne.n	80147b2 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014760:	69fb      	ldr	r3, [r7, #28]
 8014762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014766:	689b      	ldr	r3, [r3, #8]
 8014768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801476c:	2b00      	cmp	r3, #0
 801476e:	d110      	bne.n	8014792 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8014770:	69bb      	ldr	r3, [r7, #24]
 8014772:	015a      	lsls	r2, r3, #5
 8014774:	69fb      	ldr	r3, [r7, #28]
 8014776:	4413      	add	r3, r2
 8014778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801477c:	681b      	ldr	r3, [r3, #0]
 801477e:	69ba      	ldr	r2, [r7, #24]
 8014780:	0151      	lsls	r1, r2, #5
 8014782:	69fa      	ldr	r2, [r7, #28]
 8014784:	440a      	add	r2, r1
 8014786:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801478a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801478e:	6013      	str	r3, [r2, #0]
 8014790:	e00f      	b.n	80147b2 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8014792:	69bb      	ldr	r3, [r7, #24]
 8014794:	015a      	lsls	r2, r3, #5
 8014796:	69fb      	ldr	r3, [r7, #28]
 8014798:	4413      	add	r3, r2
 801479a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	69ba      	ldr	r2, [r7, #24]
 80147a2:	0151      	lsls	r1, r2, #5
 80147a4:	69fa      	ldr	r2, [r7, #28]
 80147a6:	440a      	add	r2, r1
 80147a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80147ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80147b0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80147b2:	69bb      	ldr	r3, [r7, #24]
 80147b4:	015a      	lsls	r2, r3, #5
 80147b6:	69fb      	ldr	r3, [r7, #28]
 80147b8:	4413      	add	r3, r2
 80147ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	69ba      	ldr	r2, [r7, #24]
 80147c2:	0151      	lsls	r1, r2, #5
 80147c4:	69fa      	ldr	r2, [r7, #28]
 80147c6:	440a      	add	r2, r1
 80147c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80147cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80147d0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80147d2:	2300      	movs	r3, #0
}
 80147d4:	4618      	mov	r0, r3
 80147d6:	3720      	adds	r7, #32
 80147d8:	46bd      	mov	sp, r7
 80147da:	bd80      	pop	{r7, pc}
 80147dc:	fff80000 	.word	0xfff80000
 80147e0:	e007ffff 	.word	0xe007ffff
 80147e4:	1ff80000 	.word	0x1ff80000

080147e8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80147e8:	b480      	push	{r7}
 80147ea:	b087      	sub	sp, #28
 80147ec:	af00      	add	r7, sp, #0
 80147ee:	6078      	str	r0, [r7, #4]
 80147f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80147f2:	2300      	movs	r3, #0
 80147f4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80147f6:	2300      	movs	r3, #0
 80147f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80147fe:	683b      	ldr	r3, [r7, #0]
 8014800:	785b      	ldrb	r3, [r3, #1]
 8014802:	2b01      	cmp	r3, #1
 8014804:	d14a      	bne.n	801489c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014806:	683b      	ldr	r3, [r7, #0]
 8014808:	781b      	ldrb	r3, [r3, #0]
 801480a:	015a      	lsls	r2, r3, #5
 801480c:	693b      	ldr	r3, [r7, #16]
 801480e:	4413      	add	r3, r2
 8014810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801481a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801481e:	f040 8086 	bne.w	801492e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8014822:	683b      	ldr	r3, [r7, #0]
 8014824:	781b      	ldrb	r3, [r3, #0]
 8014826:	015a      	lsls	r2, r3, #5
 8014828:	693b      	ldr	r3, [r7, #16]
 801482a:	4413      	add	r3, r2
 801482c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014830:	681b      	ldr	r3, [r3, #0]
 8014832:	683a      	ldr	r2, [r7, #0]
 8014834:	7812      	ldrb	r2, [r2, #0]
 8014836:	0151      	lsls	r1, r2, #5
 8014838:	693a      	ldr	r2, [r7, #16]
 801483a:	440a      	add	r2, r1
 801483c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014840:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014844:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8014846:	683b      	ldr	r3, [r7, #0]
 8014848:	781b      	ldrb	r3, [r3, #0]
 801484a:	015a      	lsls	r2, r3, #5
 801484c:	693b      	ldr	r3, [r7, #16]
 801484e:	4413      	add	r3, r2
 8014850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	683a      	ldr	r2, [r7, #0]
 8014858:	7812      	ldrb	r2, [r2, #0]
 801485a:	0151      	lsls	r1, r2, #5
 801485c:	693a      	ldr	r2, [r7, #16]
 801485e:	440a      	add	r2, r1
 8014860:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014864:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014868:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	3301      	adds	r3, #1
 801486e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	f242 7210 	movw	r2, #10000	; 0x2710
 8014876:	4293      	cmp	r3, r2
 8014878:	d902      	bls.n	8014880 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801487a:	2301      	movs	r3, #1
 801487c:	75fb      	strb	r3, [r7, #23]
          break;
 801487e:	e056      	b.n	801492e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8014880:	683b      	ldr	r3, [r7, #0]
 8014882:	781b      	ldrb	r3, [r3, #0]
 8014884:	015a      	lsls	r2, r3, #5
 8014886:	693b      	ldr	r3, [r7, #16]
 8014888:	4413      	add	r3, r2
 801488a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014894:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014898:	d0e7      	beq.n	801486a <USB_EPStopXfer+0x82>
 801489a:	e048      	b.n	801492e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801489c:	683b      	ldr	r3, [r7, #0]
 801489e:	781b      	ldrb	r3, [r3, #0]
 80148a0:	015a      	lsls	r2, r3, #5
 80148a2:	693b      	ldr	r3, [r7, #16]
 80148a4:	4413      	add	r3, r2
 80148a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80148b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80148b4:	d13b      	bne.n	801492e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80148b6:	683b      	ldr	r3, [r7, #0]
 80148b8:	781b      	ldrb	r3, [r3, #0]
 80148ba:	015a      	lsls	r2, r3, #5
 80148bc:	693b      	ldr	r3, [r7, #16]
 80148be:	4413      	add	r3, r2
 80148c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	683a      	ldr	r2, [r7, #0]
 80148c8:	7812      	ldrb	r2, [r2, #0]
 80148ca:	0151      	lsls	r1, r2, #5
 80148cc:	693a      	ldr	r2, [r7, #16]
 80148ce:	440a      	add	r2, r1
 80148d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80148d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80148d8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80148da:	683b      	ldr	r3, [r7, #0]
 80148dc:	781b      	ldrb	r3, [r3, #0]
 80148de:	015a      	lsls	r2, r3, #5
 80148e0:	693b      	ldr	r3, [r7, #16]
 80148e2:	4413      	add	r3, r2
 80148e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	683a      	ldr	r2, [r7, #0]
 80148ec:	7812      	ldrb	r2, [r2, #0]
 80148ee:	0151      	lsls	r1, r2, #5
 80148f0:	693a      	ldr	r2, [r7, #16]
 80148f2:	440a      	add	r2, r1
 80148f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80148f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80148fc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	3301      	adds	r3, #1
 8014902:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	f242 7210 	movw	r2, #10000	; 0x2710
 801490a:	4293      	cmp	r3, r2
 801490c:	d902      	bls.n	8014914 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801490e:	2301      	movs	r3, #1
 8014910:	75fb      	strb	r3, [r7, #23]
          break;
 8014912:	e00c      	b.n	801492e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8014914:	683b      	ldr	r3, [r7, #0]
 8014916:	781b      	ldrb	r3, [r3, #0]
 8014918:	015a      	lsls	r2, r3, #5
 801491a:	693b      	ldr	r3, [r7, #16]
 801491c:	4413      	add	r3, r2
 801491e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014922:	681b      	ldr	r3, [r3, #0]
 8014924:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014928:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801492c:	d0e7      	beq.n	80148fe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 801492e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014930:	4618      	mov	r0, r3
 8014932:	371c      	adds	r7, #28
 8014934:	46bd      	mov	sp, r7
 8014936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801493a:	4770      	bx	lr

0801493c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801493c:	b480      	push	{r7}
 801493e:	b089      	sub	sp, #36	; 0x24
 8014940:	af00      	add	r7, sp, #0
 8014942:	60f8      	str	r0, [r7, #12]
 8014944:	60b9      	str	r1, [r7, #8]
 8014946:	4611      	mov	r1, r2
 8014948:	461a      	mov	r2, r3
 801494a:	460b      	mov	r3, r1
 801494c:	71fb      	strb	r3, [r7, #7]
 801494e:	4613      	mov	r3, r2
 8014950:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8014956:	68bb      	ldr	r3, [r7, #8]
 8014958:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801495a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801495e:	2b00      	cmp	r3, #0
 8014960:	d123      	bne.n	80149aa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8014962:	88bb      	ldrh	r3, [r7, #4]
 8014964:	3303      	adds	r3, #3
 8014966:	089b      	lsrs	r3, r3, #2
 8014968:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801496a:	2300      	movs	r3, #0
 801496c:	61bb      	str	r3, [r7, #24]
 801496e:	e018      	b.n	80149a2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8014970:	79fb      	ldrb	r3, [r7, #7]
 8014972:	031a      	lsls	r2, r3, #12
 8014974:	697b      	ldr	r3, [r7, #20]
 8014976:	4413      	add	r3, r2
 8014978:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801497c:	461a      	mov	r2, r3
 801497e:	69fb      	ldr	r3, [r7, #28]
 8014980:	681b      	ldr	r3, [r3, #0]
 8014982:	6013      	str	r3, [r2, #0]
      pSrc++;
 8014984:	69fb      	ldr	r3, [r7, #28]
 8014986:	3301      	adds	r3, #1
 8014988:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801498a:	69fb      	ldr	r3, [r7, #28]
 801498c:	3301      	adds	r3, #1
 801498e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014990:	69fb      	ldr	r3, [r7, #28]
 8014992:	3301      	adds	r3, #1
 8014994:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014996:	69fb      	ldr	r3, [r7, #28]
 8014998:	3301      	adds	r3, #1
 801499a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801499c:	69bb      	ldr	r3, [r7, #24]
 801499e:	3301      	adds	r3, #1
 80149a0:	61bb      	str	r3, [r7, #24]
 80149a2:	69ba      	ldr	r2, [r7, #24]
 80149a4:	693b      	ldr	r3, [r7, #16]
 80149a6:	429a      	cmp	r2, r3
 80149a8:	d3e2      	bcc.n	8014970 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80149aa:	2300      	movs	r3, #0
}
 80149ac:	4618      	mov	r0, r3
 80149ae:	3724      	adds	r7, #36	; 0x24
 80149b0:	46bd      	mov	sp, r7
 80149b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149b6:	4770      	bx	lr

080149b8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80149b8:	b480      	push	{r7}
 80149ba:	b08b      	sub	sp, #44	; 0x2c
 80149bc:	af00      	add	r7, sp, #0
 80149be:	60f8      	str	r0, [r7, #12]
 80149c0:	60b9      	str	r1, [r7, #8]
 80149c2:	4613      	mov	r3, r2
 80149c4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80149ca:	68bb      	ldr	r3, [r7, #8]
 80149cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80149ce:	88fb      	ldrh	r3, [r7, #6]
 80149d0:	089b      	lsrs	r3, r3, #2
 80149d2:	b29b      	uxth	r3, r3
 80149d4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80149d6:	88fb      	ldrh	r3, [r7, #6]
 80149d8:	f003 0303 	and.w	r3, r3, #3
 80149dc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80149de:	2300      	movs	r3, #0
 80149e0:	623b      	str	r3, [r7, #32]
 80149e2:	e014      	b.n	8014a0e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80149e4:	69bb      	ldr	r3, [r7, #24]
 80149e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80149ea:	681a      	ldr	r2, [r3, #0]
 80149ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149ee:	601a      	str	r2, [r3, #0]
    pDest++;
 80149f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149f2:	3301      	adds	r3, #1
 80149f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80149f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149f8:	3301      	adds	r3, #1
 80149fa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80149fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149fe:	3301      	adds	r3, #1
 8014a00:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a04:	3301      	adds	r3, #1
 8014a06:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8014a08:	6a3b      	ldr	r3, [r7, #32]
 8014a0a:	3301      	adds	r3, #1
 8014a0c:	623b      	str	r3, [r7, #32]
 8014a0e:	6a3a      	ldr	r2, [r7, #32]
 8014a10:	697b      	ldr	r3, [r7, #20]
 8014a12:	429a      	cmp	r2, r3
 8014a14:	d3e6      	bcc.n	80149e4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8014a16:	8bfb      	ldrh	r3, [r7, #30]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d01e      	beq.n	8014a5a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8014a1c:	2300      	movs	r3, #0
 8014a1e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8014a20:	69bb      	ldr	r3, [r7, #24]
 8014a22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014a26:	461a      	mov	r2, r3
 8014a28:	f107 0310 	add.w	r3, r7, #16
 8014a2c:	6812      	ldr	r2, [r2, #0]
 8014a2e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8014a30:	693a      	ldr	r2, [r7, #16]
 8014a32:	6a3b      	ldr	r3, [r7, #32]
 8014a34:	b2db      	uxtb	r3, r3
 8014a36:	00db      	lsls	r3, r3, #3
 8014a38:	fa22 f303 	lsr.w	r3, r2, r3
 8014a3c:	b2da      	uxtb	r2, r3
 8014a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a40:	701a      	strb	r2, [r3, #0]
      i++;
 8014a42:	6a3b      	ldr	r3, [r7, #32]
 8014a44:	3301      	adds	r3, #1
 8014a46:	623b      	str	r3, [r7, #32]
      pDest++;
 8014a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a4a:	3301      	adds	r3, #1
 8014a4c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8014a4e:	8bfb      	ldrh	r3, [r7, #30]
 8014a50:	3b01      	subs	r3, #1
 8014a52:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8014a54:	8bfb      	ldrh	r3, [r7, #30]
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d1ea      	bne.n	8014a30 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8014a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	372c      	adds	r7, #44	; 0x2c
 8014a60:	46bd      	mov	sp, r7
 8014a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a66:	4770      	bx	lr

08014a68 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014a68:	b480      	push	{r7}
 8014a6a:	b085      	sub	sp, #20
 8014a6c:	af00      	add	r7, sp, #0
 8014a6e:	6078      	str	r0, [r7, #4]
 8014a70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014a76:	683b      	ldr	r3, [r7, #0]
 8014a78:	781b      	ldrb	r3, [r3, #0]
 8014a7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014a7c:	683b      	ldr	r3, [r7, #0]
 8014a7e:	785b      	ldrb	r3, [r3, #1]
 8014a80:	2b01      	cmp	r3, #1
 8014a82:	d12c      	bne.n	8014ade <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014a84:	68bb      	ldr	r3, [r7, #8]
 8014a86:	015a      	lsls	r2, r3, #5
 8014a88:	68fb      	ldr	r3, [r7, #12]
 8014a8a:	4413      	add	r3, r2
 8014a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014a90:	681b      	ldr	r3, [r3, #0]
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	db12      	blt.n	8014abc <USB_EPSetStall+0x54>
 8014a96:	68bb      	ldr	r3, [r7, #8]
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d00f      	beq.n	8014abc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8014a9c:	68bb      	ldr	r3, [r7, #8]
 8014a9e:	015a      	lsls	r2, r3, #5
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	4413      	add	r3, r2
 8014aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	68ba      	ldr	r2, [r7, #8]
 8014aac:	0151      	lsls	r1, r2, #5
 8014aae:	68fa      	ldr	r2, [r7, #12]
 8014ab0:	440a      	add	r2, r1
 8014ab2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014ab6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014aba:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8014abc:	68bb      	ldr	r3, [r7, #8]
 8014abe:	015a      	lsls	r2, r3, #5
 8014ac0:	68fb      	ldr	r3, [r7, #12]
 8014ac2:	4413      	add	r3, r2
 8014ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014ac8:	681b      	ldr	r3, [r3, #0]
 8014aca:	68ba      	ldr	r2, [r7, #8]
 8014acc:	0151      	lsls	r1, r2, #5
 8014ace:	68fa      	ldr	r2, [r7, #12]
 8014ad0:	440a      	add	r2, r1
 8014ad2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014ad6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014ada:	6013      	str	r3, [r2, #0]
 8014adc:	e02b      	b.n	8014b36 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014ade:	68bb      	ldr	r3, [r7, #8]
 8014ae0:	015a      	lsls	r2, r3, #5
 8014ae2:	68fb      	ldr	r3, [r7, #12]
 8014ae4:	4413      	add	r3, r2
 8014ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014aea:	681b      	ldr	r3, [r3, #0]
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	db12      	blt.n	8014b16 <USB_EPSetStall+0xae>
 8014af0:	68bb      	ldr	r3, [r7, #8]
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d00f      	beq.n	8014b16 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8014af6:	68bb      	ldr	r3, [r7, #8]
 8014af8:	015a      	lsls	r2, r3, #5
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	4413      	add	r3, r2
 8014afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	68ba      	ldr	r2, [r7, #8]
 8014b06:	0151      	lsls	r1, r2, #5
 8014b08:	68fa      	ldr	r2, [r7, #12]
 8014b0a:	440a      	add	r2, r1
 8014b0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014b10:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014b14:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8014b16:	68bb      	ldr	r3, [r7, #8]
 8014b18:	015a      	lsls	r2, r3, #5
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	4413      	add	r3, r2
 8014b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	68ba      	ldr	r2, [r7, #8]
 8014b26:	0151      	lsls	r1, r2, #5
 8014b28:	68fa      	ldr	r2, [r7, #12]
 8014b2a:	440a      	add	r2, r1
 8014b2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014b30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014b34:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014b36:	2300      	movs	r3, #0
}
 8014b38:	4618      	mov	r0, r3
 8014b3a:	3714      	adds	r7, #20
 8014b3c:	46bd      	mov	sp, r7
 8014b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b42:	4770      	bx	lr

08014b44 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014b44:	b480      	push	{r7}
 8014b46:	b085      	sub	sp, #20
 8014b48:	af00      	add	r7, sp, #0
 8014b4a:	6078      	str	r0, [r7, #4]
 8014b4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014b52:	683b      	ldr	r3, [r7, #0]
 8014b54:	781b      	ldrb	r3, [r3, #0]
 8014b56:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014b58:	683b      	ldr	r3, [r7, #0]
 8014b5a:	785b      	ldrb	r3, [r3, #1]
 8014b5c:	2b01      	cmp	r3, #1
 8014b5e:	d128      	bne.n	8014bb2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8014b60:	68bb      	ldr	r3, [r7, #8]
 8014b62:	015a      	lsls	r2, r3, #5
 8014b64:	68fb      	ldr	r3, [r7, #12]
 8014b66:	4413      	add	r3, r2
 8014b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014b6c:	681b      	ldr	r3, [r3, #0]
 8014b6e:	68ba      	ldr	r2, [r7, #8]
 8014b70:	0151      	lsls	r1, r2, #5
 8014b72:	68fa      	ldr	r2, [r7, #12]
 8014b74:	440a      	add	r2, r1
 8014b76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014b7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014b7e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014b80:	683b      	ldr	r3, [r7, #0]
 8014b82:	791b      	ldrb	r3, [r3, #4]
 8014b84:	2b03      	cmp	r3, #3
 8014b86:	d003      	beq.n	8014b90 <USB_EPClearStall+0x4c>
 8014b88:	683b      	ldr	r3, [r7, #0]
 8014b8a:	791b      	ldrb	r3, [r3, #4]
 8014b8c:	2b02      	cmp	r3, #2
 8014b8e:	d138      	bne.n	8014c02 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014b90:	68bb      	ldr	r3, [r7, #8]
 8014b92:	015a      	lsls	r2, r3, #5
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	4413      	add	r3, r2
 8014b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014b9c:	681b      	ldr	r3, [r3, #0]
 8014b9e:	68ba      	ldr	r2, [r7, #8]
 8014ba0:	0151      	lsls	r1, r2, #5
 8014ba2:	68fa      	ldr	r2, [r7, #12]
 8014ba4:	440a      	add	r2, r1
 8014ba6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014bae:	6013      	str	r3, [r2, #0]
 8014bb0:	e027      	b.n	8014c02 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8014bb2:	68bb      	ldr	r3, [r7, #8]
 8014bb4:	015a      	lsls	r2, r3, #5
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	4413      	add	r3, r2
 8014bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014bbe:	681b      	ldr	r3, [r3, #0]
 8014bc0:	68ba      	ldr	r2, [r7, #8]
 8014bc2:	0151      	lsls	r1, r2, #5
 8014bc4:	68fa      	ldr	r2, [r7, #12]
 8014bc6:	440a      	add	r2, r1
 8014bc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014bcc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014bd0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014bd2:	683b      	ldr	r3, [r7, #0]
 8014bd4:	791b      	ldrb	r3, [r3, #4]
 8014bd6:	2b03      	cmp	r3, #3
 8014bd8:	d003      	beq.n	8014be2 <USB_EPClearStall+0x9e>
 8014bda:	683b      	ldr	r3, [r7, #0]
 8014bdc:	791b      	ldrb	r3, [r3, #4]
 8014bde:	2b02      	cmp	r3, #2
 8014be0:	d10f      	bne.n	8014c02 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014be2:	68bb      	ldr	r3, [r7, #8]
 8014be4:	015a      	lsls	r2, r3, #5
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	4413      	add	r3, r2
 8014bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014bee:	681b      	ldr	r3, [r3, #0]
 8014bf0:	68ba      	ldr	r2, [r7, #8]
 8014bf2:	0151      	lsls	r1, r2, #5
 8014bf4:	68fa      	ldr	r2, [r7, #12]
 8014bf6:	440a      	add	r2, r1
 8014bf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014bfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014c00:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8014c02:	2300      	movs	r3, #0
}
 8014c04:	4618      	mov	r0, r3
 8014c06:	3714      	adds	r7, #20
 8014c08:	46bd      	mov	sp, r7
 8014c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c0e:	4770      	bx	lr

08014c10 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8014c10:	b480      	push	{r7}
 8014c12:	b085      	sub	sp, #20
 8014c14:	af00      	add	r7, sp, #0
 8014c16:	6078      	str	r0, [r7, #4]
 8014c18:	460b      	mov	r3, r1
 8014c1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8014c20:	68fb      	ldr	r3, [r7, #12]
 8014c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014c26:	681b      	ldr	r3, [r3, #0]
 8014c28:	68fa      	ldr	r2, [r7, #12]
 8014c2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014c2e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8014c32:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014c3a:	681a      	ldr	r2, [r3, #0]
 8014c3c:	78fb      	ldrb	r3, [r7, #3]
 8014c3e:	011b      	lsls	r3, r3, #4
 8014c40:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8014c44:	68f9      	ldr	r1, [r7, #12]
 8014c46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014c4a:	4313      	orrs	r3, r2
 8014c4c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8014c4e:	2300      	movs	r3, #0
}
 8014c50:	4618      	mov	r0, r3
 8014c52:	3714      	adds	r7, #20
 8014c54:	46bd      	mov	sp, r7
 8014c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c5a:	4770      	bx	lr

08014c5c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014c5c:	b480      	push	{r7}
 8014c5e:	b085      	sub	sp, #20
 8014c60:	af00      	add	r7, sp, #0
 8014c62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014c6e:	681b      	ldr	r3, [r3, #0]
 8014c70:	68fa      	ldr	r2, [r7, #12]
 8014c72:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014c76:	f023 0303 	bic.w	r3, r3, #3
 8014c7a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8014c7c:	68fb      	ldr	r3, [r7, #12]
 8014c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014c82:	685b      	ldr	r3, [r3, #4]
 8014c84:	68fa      	ldr	r2, [r7, #12]
 8014c86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014c8a:	f023 0302 	bic.w	r3, r3, #2
 8014c8e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014c90:	2300      	movs	r3, #0
}
 8014c92:	4618      	mov	r0, r3
 8014c94:	3714      	adds	r7, #20
 8014c96:	46bd      	mov	sp, r7
 8014c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c9c:	4770      	bx	lr

08014c9e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014c9e:	b480      	push	{r7}
 8014ca0:	b085      	sub	sp, #20
 8014ca2:	af00      	add	r7, sp, #0
 8014ca4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014caa:	68fb      	ldr	r3, [r7, #12]
 8014cac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014cb0:	681b      	ldr	r3, [r3, #0]
 8014cb2:	68fa      	ldr	r2, [r7, #12]
 8014cb4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014cb8:	f023 0303 	bic.w	r3, r3, #3
 8014cbc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014cc4:	685b      	ldr	r3, [r3, #4]
 8014cc6:	68fa      	ldr	r2, [r7, #12]
 8014cc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014ccc:	f043 0302 	orr.w	r3, r3, #2
 8014cd0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014cd2:	2300      	movs	r3, #0
}
 8014cd4:	4618      	mov	r0, r3
 8014cd6:	3714      	adds	r7, #20
 8014cd8:	46bd      	mov	sp, r7
 8014cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cde:	4770      	bx	lr

08014ce0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8014ce0:	b480      	push	{r7}
 8014ce2:	b085      	sub	sp, #20
 8014ce4:	af00      	add	r7, sp, #0
 8014ce6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	695b      	ldr	r3, [r3, #20]
 8014cec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	699b      	ldr	r3, [r3, #24]
 8014cf2:	68fa      	ldr	r2, [r7, #12]
 8014cf4:	4013      	ands	r3, r2
 8014cf6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8014cf8:	68fb      	ldr	r3, [r7, #12]
}
 8014cfa:	4618      	mov	r0, r3
 8014cfc:	3714      	adds	r7, #20
 8014cfe:	46bd      	mov	sp, r7
 8014d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d04:	4770      	bx	lr

08014d06 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014d06:	b480      	push	{r7}
 8014d08:	b085      	sub	sp, #20
 8014d0a:	af00      	add	r7, sp, #0
 8014d0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014d18:	699b      	ldr	r3, [r3, #24]
 8014d1a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014d1c:	68fb      	ldr	r3, [r7, #12]
 8014d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014d22:	69db      	ldr	r3, [r3, #28]
 8014d24:	68ba      	ldr	r2, [r7, #8]
 8014d26:	4013      	ands	r3, r2
 8014d28:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8014d2a:	68bb      	ldr	r3, [r7, #8]
 8014d2c:	0c1b      	lsrs	r3, r3, #16
}
 8014d2e:	4618      	mov	r0, r3
 8014d30:	3714      	adds	r7, #20
 8014d32:	46bd      	mov	sp, r7
 8014d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d38:	4770      	bx	lr

08014d3a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014d3a:	b480      	push	{r7}
 8014d3c:	b085      	sub	sp, #20
 8014d3e:	af00      	add	r7, sp, #0
 8014d40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014d46:	68fb      	ldr	r3, [r7, #12]
 8014d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014d4c:	699b      	ldr	r3, [r3, #24]
 8014d4e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014d50:	68fb      	ldr	r3, [r7, #12]
 8014d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014d56:	69db      	ldr	r3, [r3, #28]
 8014d58:	68ba      	ldr	r2, [r7, #8]
 8014d5a:	4013      	ands	r3, r2
 8014d5c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8014d5e:	68bb      	ldr	r3, [r7, #8]
 8014d60:	b29b      	uxth	r3, r3
}
 8014d62:	4618      	mov	r0, r3
 8014d64:	3714      	adds	r7, #20
 8014d66:	46bd      	mov	sp, r7
 8014d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d6c:	4770      	bx	lr

08014d6e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014d6e:	b480      	push	{r7}
 8014d70:	b085      	sub	sp, #20
 8014d72:	af00      	add	r7, sp, #0
 8014d74:	6078      	str	r0, [r7, #4]
 8014d76:	460b      	mov	r3, r1
 8014d78:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8014d7e:	78fb      	ldrb	r3, [r7, #3]
 8014d80:	015a      	lsls	r2, r3, #5
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	4413      	add	r3, r2
 8014d86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014d8a:	689b      	ldr	r3, [r3, #8]
 8014d8c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014d94:	695b      	ldr	r3, [r3, #20]
 8014d96:	68ba      	ldr	r2, [r7, #8]
 8014d98:	4013      	ands	r3, r2
 8014d9a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014d9c:	68bb      	ldr	r3, [r7, #8]
}
 8014d9e:	4618      	mov	r0, r3
 8014da0:	3714      	adds	r7, #20
 8014da2:	46bd      	mov	sp, r7
 8014da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014da8:	4770      	bx	lr

08014daa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014daa:	b480      	push	{r7}
 8014dac:	b087      	sub	sp, #28
 8014dae:	af00      	add	r7, sp, #0
 8014db0:	6078      	str	r0, [r7, #4]
 8014db2:	460b      	mov	r3, r1
 8014db4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8014dba:	697b      	ldr	r3, [r7, #20]
 8014dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014dc0:	691b      	ldr	r3, [r3, #16]
 8014dc2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8014dc4:	697b      	ldr	r3, [r7, #20]
 8014dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014dcc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8014dce:	78fb      	ldrb	r3, [r7, #3]
 8014dd0:	f003 030f 	and.w	r3, r3, #15
 8014dd4:	68fa      	ldr	r2, [r7, #12]
 8014dd6:	fa22 f303 	lsr.w	r3, r2, r3
 8014dda:	01db      	lsls	r3, r3, #7
 8014ddc:	b2db      	uxtb	r3, r3
 8014dde:	693a      	ldr	r2, [r7, #16]
 8014de0:	4313      	orrs	r3, r2
 8014de2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8014de4:	78fb      	ldrb	r3, [r7, #3]
 8014de6:	015a      	lsls	r2, r3, #5
 8014de8:	697b      	ldr	r3, [r7, #20]
 8014dea:	4413      	add	r3, r2
 8014dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014df0:	689b      	ldr	r3, [r3, #8]
 8014df2:	693a      	ldr	r2, [r7, #16]
 8014df4:	4013      	ands	r3, r2
 8014df6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014df8:	68bb      	ldr	r3, [r7, #8]
}
 8014dfa:	4618      	mov	r0, r3
 8014dfc:	371c      	adds	r7, #28
 8014dfe:	46bd      	mov	sp, r7
 8014e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e04:	4770      	bx	lr

08014e06 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8014e06:	b480      	push	{r7}
 8014e08:	b083      	sub	sp, #12
 8014e0a:	af00      	add	r7, sp, #0
 8014e0c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	695b      	ldr	r3, [r3, #20]
 8014e12:	f003 0301 	and.w	r3, r3, #1
}
 8014e16:	4618      	mov	r0, r3
 8014e18:	370c      	adds	r7, #12
 8014e1a:	46bd      	mov	sp, r7
 8014e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e20:	4770      	bx	lr
	...

08014e24 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8014e24:	b480      	push	{r7}
 8014e26:	b085      	sub	sp, #20
 8014e28:	af00      	add	r7, sp, #0
 8014e2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014e36:	681a      	ldr	r2, [r3, #0]
 8014e38:	68fb      	ldr	r3, [r7, #12]
 8014e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014e3e:	4619      	mov	r1, r3
 8014e40:	4b09      	ldr	r3, [pc, #36]	; (8014e68 <USB_ActivateSetup+0x44>)
 8014e42:	4013      	ands	r3, r2
 8014e44:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8014e46:	68fb      	ldr	r3, [r7, #12]
 8014e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014e4c:	685b      	ldr	r3, [r3, #4]
 8014e4e:	68fa      	ldr	r2, [r7, #12]
 8014e50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014e58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014e5a:	2300      	movs	r3, #0
}
 8014e5c:	4618      	mov	r0, r3
 8014e5e:	3714      	adds	r7, #20
 8014e60:	46bd      	mov	sp, r7
 8014e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e66:	4770      	bx	lr
 8014e68:	fffff800 	.word	0xfffff800

08014e6c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8014e6c:	b480      	push	{r7}
 8014e6e:	b087      	sub	sp, #28
 8014e70:	af00      	add	r7, sp, #0
 8014e72:	60f8      	str	r0, [r7, #12]
 8014e74:	460b      	mov	r3, r1
 8014e76:	607a      	str	r2, [r7, #4]
 8014e78:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014e7a:	68fb      	ldr	r3, [r7, #12]
 8014e7c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8014e7e:	68fb      	ldr	r3, [r7, #12]
 8014e80:	333c      	adds	r3, #60	; 0x3c
 8014e82:	3304      	adds	r3, #4
 8014e84:	681b      	ldr	r3, [r3, #0]
 8014e86:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8014e88:	693b      	ldr	r3, [r7, #16]
 8014e8a:	4a26      	ldr	r2, [pc, #152]	; (8014f24 <USB_EP0_OutStart+0xb8>)
 8014e8c:	4293      	cmp	r3, r2
 8014e8e:	d90a      	bls.n	8014ea6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014e90:	697b      	ldr	r3, [r7, #20]
 8014e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014e96:	681b      	ldr	r3, [r3, #0]
 8014e98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014e9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014ea0:	d101      	bne.n	8014ea6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8014ea2:	2300      	movs	r3, #0
 8014ea4:	e037      	b.n	8014f16 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8014ea6:	697b      	ldr	r3, [r7, #20]
 8014ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014eac:	461a      	mov	r2, r3
 8014eae:	2300      	movs	r3, #0
 8014eb0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014eb2:	697b      	ldr	r3, [r7, #20]
 8014eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014eb8:	691b      	ldr	r3, [r3, #16]
 8014eba:	697a      	ldr	r2, [r7, #20]
 8014ebc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014ec0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014ec4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8014ec6:	697b      	ldr	r3, [r7, #20]
 8014ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014ecc:	691b      	ldr	r3, [r3, #16]
 8014ece:	697a      	ldr	r2, [r7, #20]
 8014ed0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014ed4:	f043 0318 	orr.w	r3, r3, #24
 8014ed8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8014eda:	697b      	ldr	r3, [r7, #20]
 8014edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014ee0:	691b      	ldr	r3, [r3, #16]
 8014ee2:	697a      	ldr	r2, [r7, #20]
 8014ee4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014ee8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8014eec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8014eee:	7afb      	ldrb	r3, [r7, #11]
 8014ef0:	2b01      	cmp	r3, #1
 8014ef2:	d10f      	bne.n	8014f14 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8014ef4:	697b      	ldr	r3, [r7, #20]
 8014ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014efa:	461a      	mov	r2, r3
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8014f00:	697b      	ldr	r3, [r7, #20]
 8014f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014f06:	681b      	ldr	r3, [r3, #0]
 8014f08:	697a      	ldr	r2, [r7, #20]
 8014f0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014f0e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8014f12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014f14:	2300      	movs	r3, #0
}
 8014f16:	4618      	mov	r0, r3
 8014f18:	371c      	adds	r7, #28
 8014f1a:	46bd      	mov	sp, r7
 8014f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f20:	4770      	bx	lr
 8014f22:	bf00      	nop
 8014f24:	4f54300a 	.word	0x4f54300a

08014f28 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8014f28:	b480      	push	{r7}
 8014f2a:	b085      	sub	sp, #20
 8014f2c:	af00      	add	r7, sp, #0
 8014f2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014f30:	2300      	movs	r3, #0
 8014f32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	3301      	adds	r3, #1
 8014f38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	4a13      	ldr	r2, [pc, #76]	; (8014f8c <USB_CoreReset+0x64>)
 8014f3e:	4293      	cmp	r3, r2
 8014f40:	d901      	bls.n	8014f46 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8014f42:	2303      	movs	r3, #3
 8014f44:	e01b      	b.n	8014f7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	691b      	ldr	r3, [r3, #16]
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	daf2      	bge.n	8014f34 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8014f4e:	2300      	movs	r3, #0
 8014f50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	691b      	ldr	r3, [r3, #16]
 8014f56:	f043 0201 	orr.w	r2, r3, #1
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	3301      	adds	r3, #1
 8014f62:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	4a09      	ldr	r2, [pc, #36]	; (8014f8c <USB_CoreReset+0x64>)
 8014f68:	4293      	cmp	r3, r2
 8014f6a:	d901      	bls.n	8014f70 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8014f6c:	2303      	movs	r3, #3
 8014f6e:	e006      	b.n	8014f7e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	691b      	ldr	r3, [r3, #16]
 8014f74:	f003 0301 	and.w	r3, r3, #1
 8014f78:	2b01      	cmp	r3, #1
 8014f7a:	d0f0      	beq.n	8014f5e <USB_CoreReset+0x36>

  return HAL_OK;
 8014f7c:	2300      	movs	r3, #0
}
 8014f7e:	4618      	mov	r0, r3
 8014f80:	3714      	adds	r7, #20
 8014f82:	46bd      	mov	sp, r7
 8014f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f88:	4770      	bx	lr
 8014f8a:	bf00      	nop
 8014f8c:	00030d40 	.word	0x00030d40

08014f90 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8014f90:	b580      	push	{r7, lr}
 8014f92:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8014f94:	4904      	ldr	r1, [pc, #16]	; (8014fa8 <MX_FATFS_Init+0x18>)
 8014f96:	4805      	ldr	r0, [pc, #20]	; (8014fac <MX_FATFS_Init+0x1c>)
 8014f98:	f005 f906 	bl	801a1a8 <FATFS_LinkDriver>
 8014f9c:	4603      	mov	r3, r0
 8014f9e:	461a      	mov	r2, r3
 8014fa0:	4b03      	ldr	r3, [pc, #12]	; (8014fb0 <MX_FATFS_Init+0x20>)
 8014fa2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8014fa4:	bf00      	nop
 8014fa6:	bd80      	pop	{r7, pc}
 8014fa8:	240016a4 	.word	0x240016a4
 8014fac:	0801f7f0 	.word	0x0801f7f0
 8014fb0:	240016a0 	.word	0x240016a0

08014fb4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8014fb4:	b480      	push	{r7}
 8014fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8014fb8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8014fba:	4618      	mov	r0, r3
 8014fbc:	46bd      	mov	sp, r7
 8014fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fc2:	4770      	bx	lr

08014fc4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8014fc4:	b580      	push	{r7, lr}
 8014fc6:	b082      	sub	sp, #8
 8014fc8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8014fca:	2300      	movs	r3, #0
 8014fcc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8014fce:	f000 f885 	bl	80150dc <BSP_SD_IsDetected>
 8014fd2:	4603      	mov	r3, r0
 8014fd4:	2b01      	cmp	r3, #1
 8014fd6:	d001      	beq.n	8014fdc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8014fd8:	2302      	movs	r3, #2
 8014fda:	e012      	b.n	8015002 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 8014fdc:	480b      	ldr	r0, [pc, #44]	; (801500c <BSP_SD_Init+0x48>)
 8014fde:	f7f8 ff39 	bl	800de54 <HAL_SD_Init>
 8014fe2:	4603      	mov	r3, r0
 8014fe4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8014fe6:	79fb      	ldrb	r3, [r7, #7]
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d109      	bne.n	8015000 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8014fec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8014ff0:	4806      	ldr	r0, [pc, #24]	; (801500c <BSP_SD_Init+0x48>)
 8014ff2:	f7f9 fdef 	bl	800ebd4 <HAL_SD_ConfigWideBusOperation>
 8014ff6:	4603      	mov	r3, r0
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d001      	beq.n	8015000 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8014ffc:	2301      	movs	r3, #1
 8014ffe:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8015000:	79fb      	ldrb	r3, [r7, #7]
}
 8015002:	4618      	mov	r0, r3
 8015004:	3708      	adds	r7, #8
 8015006:	46bd      	mov	sp, r7
 8015008:	bd80      	pop	{r7, pc}
 801500a:	bf00      	nop
 801500c:	24000f3c 	.word	0x24000f3c

08015010 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8015010:	b580      	push	{r7, lr}
 8015012:	b086      	sub	sp, #24
 8015014:	af00      	add	r7, sp, #0
 8015016:	60f8      	str	r0, [r7, #12]
 8015018:	60b9      	str	r1, [r7, #8]
 801501a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801501c:	2300      	movs	r3, #0
 801501e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	68ba      	ldr	r2, [r7, #8]
 8015024:	68f9      	ldr	r1, [r7, #12]
 8015026:	4806      	ldr	r0, [pc, #24]	; (8015040 <BSP_SD_ReadBlocks_DMA+0x30>)
 8015028:	f7f9 f834 	bl	800e094 <HAL_SD_ReadBlocks_DMA>
 801502c:	4603      	mov	r3, r0
 801502e:	2b00      	cmp	r3, #0
 8015030:	d001      	beq.n	8015036 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8015032:	2301      	movs	r3, #1
 8015034:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8015036:	7dfb      	ldrb	r3, [r7, #23]
}
 8015038:	4618      	mov	r0, r3
 801503a:	3718      	adds	r7, #24
 801503c:	46bd      	mov	sp, r7
 801503e:	bd80      	pop	{r7, pc}
 8015040:	24000f3c 	.word	0x24000f3c

08015044 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8015044:	b580      	push	{r7, lr}
 8015046:	b086      	sub	sp, #24
 8015048:	af00      	add	r7, sp, #0
 801504a:	60f8      	str	r0, [r7, #12]
 801504c:	60b9      	str	r1, [r7, #8]
 801504e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8015050:	2300      	movs	r3, #0
 8015052:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	68ba      	ldr	r2, [r7, #8]
 8015058:	68f9      	ldr	r1, [r7, #12]
 801505a:	4806      	ldr	r0, [pc, #24]	; (8015074 <BSP_SD_WriteBlocks_DMA+0x30>)
 801505c:	f7f9 f8c2 	bl	800e1e4 <HAL_SD_WriteBlocks_DMA>
 8015060:	4603      	mov	r3, r0
 8015062:	2b00      	cmp	r3, #0
 8015064:	d001      	beq.n	801506a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8015066:	2301      	movs	r3, #1
 8015068:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801506a:	7dfb      	ldrb	r3, [r7, #23]
}
 801506c:	4618      	mov	r0, r3
 801506e:	3718      	adds	r7, #24
 8015070:	46bd      	mov	sp, r7
 8015072:	bd80      	pop	{r7, pc}
 8015074:	24000f3c 	.word	0x24000f3c

08015078 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8015078:	b580      	push	{r7, lr}
 801507a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801507c:	4805      	ldr	r0, [pc, #20]	; (8015094 <BSP_SD_GetCardState+0x1c>)
 801507e:	f7f9 febb 	bl	800edf8 <HAL_SD_GetCardState>
 8015082:	4603      	mov	r3, r0
 8015084:	2b04      	cmp	r3, #4
 8015086:	bf14      	ite	ne
 8015088:	2301      	movne	r3, #1
 801508a:	2300      	moveq	r3, #0
 801508c:	b2db      	uxtb	r3, r3
}
 801508e:	4618      	mov	r0, r3
 8015090:	bd80      	pop	{r7, pc}
 8015092:	bf00      	nop
 8015094:	24000f3c 	.word	0x24000f3c

08015098 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8015098:	b580      	push	{r7, lr}
 801509a:	b082      	sub	sp, #8
 801509c:	af00      	add	r7, sp, #0
 801509e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 80150a0:	6879      	ldr	r1, [r7, #4]
 80150a2:	4803      	ldr	r0, [pc, #12]	; (80150b0 <BSP_SD_GetCardInfo+0x18>)
 80150a4:	f7f9 fd6a 	bl	800eb7c <HAL_SD_GetCardInfo>
}
 80150a8:	bf00      	nop
 80150aa:	3708      	adds	r7, #8
 80150ac:	46bd      	mov	sp, r7
 80150ae:	bd80      	pop	{r7, pc}
 80150b0:	24000f3c 	.word	0x24000f3c

080150b4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80150b4:	b580      	push	{r7, lr}
 80150b6:	b082      	sub	sp, #8
 80150b8:	af00      	add	r7, sp, #0
 80150ba:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80150bc:	f000 f984 	bl	80153c8 <BSP_SD_WriteCpltCallback>
}
 80150c0:	bf00      	nop
 80150c2:	3708      	adds	r7, #8
 80150c4:	46bd      	mov	sp, r7
 80150c6:	bd80      	pop	{r7, pc}

080150c8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80150c8:	b580      	push	{r7, lr}
 80150ca:	b082      	sub	sp, #8
 80150cc:	af00      	add	r7, sp, #0
 80150ce:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80150d0:	f000 f986 	bl	80153e0 <BSP_SD_ReadCpltCallback>
}
 80150d4:	bf00      	nop
 80150d6:	3708      	adds	r7, #8
 80150d8:	46bd      	mov	sp, r7
 80150da:	bd80      	pop	{r7, pc}

080150dc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80150dc:	b480      	push	{r7}
 80150de:	b083      	sub	sp, #12
 80150e0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80150e2:	2301      	movs	r3, #1
 80150e4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 80150e6:	79fb      	ldrb	r3, [r7, #7]
 80150e8:	b2db      	uxtb	r3, r3
}
 80150ea:	4618      	mov	r0, r3
 80150ec:	370c      	adds	r7, #12
 80150ee:	46bd      	mov	sp, r7
 80150f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150f4:	4770      	bx	lr

080150f6 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80150f6:	b580      	push	{r7, lr}
 80150f8:	b084      	sub	sp, #16
 80150fa:	af00      	add	r7, sp, #0
 80150fc:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80150fe:	f7ee ff89 	bl	8004014 <HAL_GetTick>
 8015102:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8015104:	e006      	b.n	8015114 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8015106:	f7ff ffb7 	bl	8015078 <BSP_SD_GetCardState>
 801510a:	4603      	mov	r3, r0
 801510c:	2b00      	cmp	r3, #0
 801510e:	d101      	bne.n	8015114 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8015110:	2300      	movs	r3, #0
 8015112:	e009      	b.n	8015128 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8015114:	f7ee ff7e 	bl	8004014 <HAL_GetTick>
 8015118:	4602      	mov	r2, r0
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	1ad3      	subs	r3, r2, r3
 801511e:	687a      	ldr	r2, [r7, #4]
 8015120:	429a      	cmp	r2, r3
 8015122:	d8f0      	bhi.n	8015106 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8015124:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015128:	4618      	mov	r0, r3
 801512a:	3710      	adds	r7, #16
 801512c:	46bd      	mov	sp, r7
 801512e:	bd80      	pop	{r7, pc}

08015130 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8015130:	b580      	push	{r7, lr}
 8015132:	b082      	sub	sp, #8
 8015134:	af00      	add	r7, sp, #0
 8015136:	4603      	mov	r3, r0
 8015138:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801513a:	4b0b      	ldr	r3, [pc, #44]	; (8015168 <SD_CheckStatus+0x38>)
 801513c:	2201      	movs	r2, #1
 801513e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8015140:	f7ff ff9a 	bl	8015078 <BSP_SD_GetCardState>
 8015144:	4603      	mov	r3, r0
 8015146:	2b00      	cmp	r3, #0
 8015148:	d107      	bne.n	801515a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801514a:	4b07      	ldr	r3, [pc, #28]	; (8015168 <SD_CheckStatus+0x38>)
 801514c:	781b      	ldrb	r3, [r3, #0]
 801514e:	b2db      	uxtb	r3, r3
 8015150:	f023 0301 	bic.w	r3, r3, #1
 8015154:	b2da      	uxtb	r2, r3
 8015156:	4b04      	ldr	r3, [pc, #16]	; (8015168 <SD_CheckStatus+0x38>)
 8015158:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801515a:	4b03      	ldr	r3, [pc, #12]	; (8015168 <SD_CheckStatus+0x38>)
 801515c:	781b      	ldrb	r3, [r3, #0]
 801515e:	b2db      	uxtb	r3, r3
}
 8015160:	4618      	mov	r0, r3
 8015162:	3708      	adds	r7, #8
 8015164:	46bd      	mov	sp, r7
 8015166:	bd80      	pop	{r7, pc}
 8015168:	2400000d 	.word	0x2400000d

0801516c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801516c:	b580      	push	{r7, lr}
 801516e:	b082      	sub	sp, #8
 8015170:	af00      	add	r7, sp, #0
 8015172:	4603      	mov	r3, r0
 8015174:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8015176:	f7ff ff25 	bl	8014fc4 <BSP_SD_Init>
 801517a:	4603      	mov	r3, r0
 801517c:	2b00      	cmp	r3, #0
 801517e:	d107      	bne.n	8015190 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8015180:	79fb      	ldrb	r3, [r7, #7]
 8015182:	4618      	mov	r0, r3
 8015184:	f7ff ffd4 	bl	8015130 <SD_CheckStatus>
 8015188:	4603      	mov	r3, r0
 801518a:	461a      	mov	r2, r3
 801518c:	4b04      	ldr	r3, [pc, #16]	; (80151a0 <SD_initialize+0x34>)
 801518e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8015190:	4b03      	ldr	r3, [pc, #12]	; (80151a0 <SD_initialize+0x34>)
 8015192:	781b      	ldrb	r3, [r3, #0]
 8015194:	b2db      	uxtb	r3, r3
}
 8015196:	4618      	mov	r0, r3
 8015198:	3708      	adds	r7, #8
 801519a:	46bd      	mov	sp, r7
 801519c:	bd80      	pop	{r7, pc}
 801519e:	bf00      	nop
 80151a0:	2400000d 	.word	0x2400000d

080151a4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80151a4:	b580      	push	{r7, lr}
 80151a6:	b082      	sub	sp, #8
 80151a8:	af00      	add	r7, sp, #0
 80151aa:	4603      	mov	r3, r0
 80151ac:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80151ae:	79fb      	ldrb	r3, [r7, #7]
 80151b0:	4618      	mov	r0, r3
 80151b2:	f7ff ffbd 	bl	8015130 <SD_CheckStatus>
 80151b6:	4603      	mov	r3, r0
}
 80151b8:	4618      	mov	r0, r3
 80151ba:	3708      	adds	r7, #8
 80151bc:	46bd      	mov	sp, r7
 80151be:	bd80      	pop	{r7, pc}

080151c0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80151c0:	b580      	push	{r7, lr}
 80151c2:	b086      	sub	sp, #24
 80151c4:	af00      	add	r7, sp, #0
 80151c6:	60b9      	str	r1, [r7, #8]
 80151c8:	607a      	str	r2, [r7, #4]
 80151ca:	603b      	str	r3, [r7, #0]
 80151cc:	4603      	mov	r3, r0
 80151ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80151d0:	2301      	movs	r3, #1
 80151d2:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80151d4:	f247 5030 	movw	r0, #30000	; 0x7530
 80151d8:	f7ff ff8d 	bl	80150f6 <SD_CheckStatusWithTimeout>
 80151dc:	4603      	mov	r3, r0
 80151de:	2b00      	cmp	r3, #0
 80151e0:	da01      	bge.n	80151e6 <SD_read+0x26>
  {
    return res;
 80151e2:	7dfb      	ldrb	r3, [r7, #23]
 80151e4:	e03b      	b.n	801525e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80151e6:	683a      	ldr	r2, [r7, #0]
 80151e8:	6879      	ldr	r1, [r7, #4]
 80151ea:	68b8      	ldr	r0, [r7, #8]
 80151ec:	f7ff ff10 	bl	8015010 <BSP_SD_ReadBlocks_DMA>
 80151f0:	4603      	mov	r3, r0
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d132      	bne.n	801525c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80151f6:	4b1c      	ldr	r3, [pc, #112]	; (8015268 <SD_read+0xa8>)
 80151f8:	2200      	movs	r2, #0
 80151fa:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80151fc:	f7ee ff0a 	bl	8004014 <HAL_GetTick>
 8015200:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8015202:	bf00      	nop
 8015204:	4b18      	ldr	r3, [pc, #96]	; (8015268 <SD_read+0xa8>)
 8015206:	681b      	ldr	r3, [r3, #0]
 8015208:	2b00      	cmp	r3, #0
 801520a:	d108      	bne.n	801521e <SD_read+0x5e>
 801520c:	f7ee ff02 	bl	8004014 <HAL_GetTick>
 8015210:	4602      	mov	r2, r0
 8015212:	693b      	ldr	r3, [r7, #16]
 8015214:	1ad3      	subs	r3, r2, r3
 8015216:	f247 522f 	movw	r2, #29999	; 0x752f
 801521a:	4293      	cmp	r3, r2
 801521c:	d9f2      	bls.n	8015204 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 801521e:	4b12      	ldr	r3, [pc, #72]	; (8015268 <SD_read+0xa8>)
 8015220:	681b      	ldr	r3, [r3, #0]
 8015222:	2b00      	cmp	r3, #0
 8015224:	d102      	bne.n	801522c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8015226:	2301      	movs	r3, #1
 8015228:	75fb      	strb	r3, [r7, #23]
 801522a:	e017      	b.n	801525c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 801522c:	4b0e      	ldr	r3, [pc, #56]	; (8015268 <SD_read+0xa8>)
 801522e:	2200      	movs	r2, #0
 8015230:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8015232:	f7ee feef 	bl	8004014 <HAL_GetTick>
 8015236:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8015238:	e007      	b.n	801524a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801523a:	f7ff ff1d 	bl	8015078 <BSP_SD_GetCardState>
 801523e:	4603      	mov	r3, r0
 8015240:	2b00      	cmp	r3, #0
 8015242:	d102      	bne.n	801524a <SD_read+0x8a>
          {
            res = RES_OK;
 8015244:	2300      	movs	r3, #0
 8015246:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8015248:	e008      	b.n	801525c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801524a:	f7ee fee3 	bl	8004014 <HAL_GetTick>
 801524e:	4602      	mov	r2, r0
 8015250:	693b      	ldr	r3, [r7, #16]
 8015252:	1ad3      	subs	r3, r2, r3
 8015254:	f247 522f 	movw	r2, #29999	; 0x752f
 8015258:	4293      	cmp	r3, r2
 801525a:	d9ee      	bls.n	801523a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 801525c:	7dfb      	ldrb	r3, [r7, #23]
}
 801525e:	4618      	mov	r0, r3
 8015260:	3718      	adds	r7, #24
 8015262:	46bd      	mov	sp, r7
 8015264:	bd80      	pop	{r7, pc}
 8015266:	bf00      	nop
 8015268:	240016ac 	.word	0x240016ac

0801526c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801526c:	b580      	push	{r7, lr}
 801526e:	b086      	sub	sp, #24
 8015270:	af00      	add	r7, sp, #0
 8015272:	60b9      	str	r1, [r7, #8]
 8015274:	607a      	str	r2, [r7, #4]
 8015276:	603b      	str	r3, [r7, #0]
 8015278:	4603      	mov	r3, r0
 801527a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801527c:	2301      	movs	r3, #1
 801527e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8015280:	4b24      	ldr	r3, [pc, #144]	; (8015314 <SD_write+0xa8>)
 8015282:	2200      	movs	r2, #0
 8015284:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8015286:	f247 5030 	movw	r0, #30000	; 0x7530
 801528a:	f7ff ff34 	bl	80150f6 <SD_CheckStatusWithTimeout>
 801528e:	4603      	mov	r3, r0
 8015290:	2b00      	cmp	r3, #0
 8015292:	da01      	bge.n	8015298 <SD_write+0x2c>
  {
    return res;
 8015294:	7dfb      	ldrb	r3, [r7, #23]
 8015296:	e038      	b.n	801530a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8015298:	683a      	ldr	r2, [r7, #0]
 801529a:	6879      	ldr	r1, [r7, #4]
 801529c:	68b8      	ldr	r0, [r7, #8]
 801529e:	f7ff fed1 	bl	8015044 <BSP_SD_WriteBlocks_DMA>
 80152a2:	4603      	mov	r3, r0
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d12f      	bne.n	8015308 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80152a8:	f7ee feb4 	bl	8004014 <HAL_GetTick>
 80152ac:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80152ae:	bf00      	nop
 80152b0:	4b18      	ldr	r3, [pc, #96]	; (8015314 <SD_write+0xa8>)
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d108      	bne.n	80152ca <SD_write+0x5e>
 80152b8:	f7ee feac 	bl	8004014 <HAL_GetTick>
 80152bc:	4602      	mov	r2, r0
 80152be:	693b      	ldr	r3, [r7, #16]
 80152c0:	1ad3      	subs	r3, r2, r3
 80152c2:	f247 522f 	movw	r2, #29999	; 0x752f
 80152c6:	4293      	cmp	r3, r2
 80152c8:	d9f2      	bls.n	80152b0 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 80152ca:	4b12      	ldr	r3, [pc, #72]	; (8015314 <SD_write+0xa8>)
 80152cc:	681b      	ldr	r3, [r3, #0]
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d102      	bne.n	80152d8 <SD_write+0x6c>
      {
        res = RES_ERROR;
 80152d2:	2301      	movs	r3, #1
 80152d4:	75fb      	strb	r3, [r7, #23]
 80152d6:	e017      	b.n	8015308 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80152d8:	4b0e      	ldr	r3, [pc, #56]	; (8015314 <SD_write+0xa8>)
 80152da:	2200      	movs	r2, #0
 80152dc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80152de:	f7ee fe99 	bl	8004014 <HAL_GetTick>
 80152e2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80152e4:	e007      	b.n	80152f6 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80152e6:	f7ff fec7 	bl	8015078 <BSP_SD_GetCardState>
 80152ea:	4603      	mov	r3, r0
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d102      	bne.n	80152f6 <SD_write+0x8a>
          {
            res = RES_OK;
 80152f0:	2300      	movs	r3, #0
 80152f2:	75fb      	strb	r3, [r7, #23]
            break;
 80152f4:	e008      	b.n	8015308 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80152f6:	f7ee fe8d 	bl	8004014 <HAL_GetTick>
 80152fa:	4602      	mov	r2, r0
 80152fc:	693b      	ldr	r3, [r7, #16]
 80152fe:	1ad3      	subs	r3, r2, r3
 8015300:	f247 522f 	movw	r2, #29999	; 0x752f
 8015304:	4293      	cmp	r3, r2
 8015306:	d9ee      	bls.n	80152e6 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8015308:	7dfb      	ldrb	r3, [r7, #23]
}
 801530a:	4618      	mov	r0, r3
 801530c:	3718      	adds	r7, #24
 801530e:	46bd      	mov	sp, r7
 8015310:	bd80      	pop	{r7, pc}
 8015312:	bf00      	nop
 8015314:	240016a8 	.word	0x240016a8

08015318 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8015318:	b580      	push	{r7, lr}
 801531a:	b08c      	sub	sp, #48	; 0x30
 801531c:	af00      	add	r7, sp, #0
 801531e:	4603      	mov	r3, r0
 8015320:	603a      	str	r2, [r7, #0]
 8015322:	71fb      	strb	r3, [r7, #7]
 8015324:	460b      	mov	r3, r1
 8015326:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8015328:	2301      	movs	r3, #1
 801532a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801532e:	4b25      	ldr	r3, [pc, #148]	; (80153c4 <SD_ioctl+0xac>)
 8015330:	781b      	ldrb	r3, [r3, #0]
 8015332:	b2db      	uxtb	r3, r3
 8015334:	f003 0301 	and.w	r3, r3, #1
 8015338:	2b00      	cmp	r3, #0
 801533a:	d001      	beq.n	8015340 <SD_ioctl+0x28>
 801533c:	2303      	movs	r3, #3
 801533e:	e03c      	b.n	80153ba <SD_ioctl+0xa2>

  switch (cmd)
 8015340:	79bb      	ldrb	r3, [r7, #6]
 8015342:	2b03      	cmp	r3, #3
 8015344:	d834      	bhi.n	80153b0 <SD_ioctl+0x98>
 8015346:	a201      	add	r2, pc, #4	; (adr r2, 801534c <SD_ioctl+0x34>)
 8015348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801534c:	0801535d 	.word	0x0801535d
 8015350:	08015365 	.word	0x08015365
 8015354:	0801537d 	.word	0x0801537d
 8015358:	08015397 	.word	0x08015397
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 801535c:	2300      	movs	r3, #0
 801535e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015362:	e028      	b.n	80153b6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8015364:	f107 0308 	add.w	r3, r7, #8
 8015368:	4618      	mov	r0, r3
 801536a:	f7ff fe95 	bl	8015098 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801536e:	6a3a      	ldr	r2, [r7, #32]
 8015370:	683b      	ldr	r3, [r7, #0]
 8015372:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8015374:	2300      	movs	r3, #0
 8015376:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801537a:	e01c      	b.n	80153b6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801537c:	f107 0308 	add.w	r3, r7, #8
 8015380:	4618      	mov	r0, r3
 8015382:	f7ff fe89 	bl	8015098 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8015386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015388:	b29a      	uxth	r2, r3
 801538a:	683b      	ldr	r3, [r7, #0]
 801538c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801538e:	2300      	movs	r3, #0
 8015390:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8015394:	e00f      	b.n	80153b6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8015396:	f107 0308 	add.w	r3, r7, #8
 801539a:	4618      	mov	r0, r3
 801539c:	f7ff fe7c 	bl	8015098 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80153a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153a2:	0a5a      	lsrs	r2, r3, #9
 80153a4:	683b      	ldr	r3, [r7, #0]
 80153a6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80153a8:	2300      	movs	r3, #0
 80153aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80153ae:	e002      	b.n	80153b6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80153b0:	2304      	movs	r3, #4
 80153b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80153b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80153ba:	4618      	mov	r0, r3
 80153bc:	3730      	adds	r7, #48	; 0x30
 80153be:	46bd      	mov	sp, r7
 80153c0:	bd80      	pop	{r7, pc}
 80153c2:	bf00      	nop
 80153c4:	2400000d 	.word	0x2400000d

080153c8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80153c8:	b480      	push	{r7}
 80153ca:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80153cc:	4b03      	ldr	r3, [pc, #12]	; (80153dc <BSP_SD_WriteCpltCallback+0x14>)
 80153ce:	2201      	movs	r2, #1
 80153d0:	601a      	str	r2, [r3, #0]
}
 80153d2:	bf00      	nop
 80153d4:	46bd      	mov	sp, r7
 80153d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153da:	4770      	bx	lr
 80153dc:	240016a8 	.word	0x240016a8

080153e0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80153e0:	b480      	push	{r7}
 80153e2:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80153e4:	4b03      	ldr	r3, [pc, #12]	; (80153f4 <BSP_SD_ReadCpltCallback+0x14>)
 80153e6:	2201      	movs	r2, #1
 80153e8:	601a      	str	r2, [r3, #0]
}
 80153ea:	bf00      	nop
 80153ec:	46bd      	mov	sp, r7
 80153ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153f2:	4770      	bx	lr
 80153f4:	240016ac 	.word	0x240016ac

080153f8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80153f8:	b580      	push	{r7, lr}
 80153fa:	b084      	sub	sp, #16
 80153fc:	af00      	add	r7, sp, #0
 80153fe:	6078      	str	r0, [r7, #4]
 8015400:	460b      	mov	r3, r1
 8015402:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8015404:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8015408:	f005 fc74 	bl	801acf4 <USBD_static_malloc>
 801540c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801540e:	68fb      	ldr	r3, [r7, #12]
 8015410:	2b00      	cmp	r3, #0
 8015412:	d109      	bne.n	8015428 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	32b0      	adds	r2, #176	; 0xb0
 801541e:	2100      	movs	r1, #0
 8015420:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8015424:	2302      	movs	r3, #2
 8015426:	e0d4      	b.n	80155d2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8015428:	f44f 7207 	mov.w	r2, #540	; 0x21c
 801542c:	2100      	movs	r1, #0
 801542e:	68f8      	ldr	r0, [r7, #12]
 8015430:	f005 fcdc 	bl	801adec <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	32b0      	adds	r2, #176	; 0xb0
 801543e:	68f9      	ldr	r1, [r7, #12]
 8015440:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	32b0      	adds	r2, #176	; 0xb0
 801544e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	7c1b      	ldrb	r3, [r3, #16]
 801545c:	2b00      	cmp	r3, #0
 801545e:	d138      	bne.n	80154d2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8015460:	4b5e      	ldr	r3, [pc, #376]	; (80155dc <USBD_CDC_Init+0x1e4>)
 8015462:	7819      	ldrb	r1, [r3, #0]
 8015464:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015468:	2202      	movs	r2, #2
 801546a:	6878      	ldr	r0, [r7, #4]
 801546c:	f005 fb1f 	bl	801aaae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8015470:	4b5a      	ldr	r3, [pc, #360]	; (80155dc <USBD_CDC_Init+0x1e4>)
 8015472:	781b      	ldrb	r3, [r3, #0]
 8015474:	f003 020f 	and.w	r2, r3, #15
 8015478:	6879      	ldr	r1, [r7, #4]
 801547a:	4613      	mov	r3, r2
 801547c:	009b      	lsls	r3, r3, #2
 801547e:	4413      	add	r3, r2
 8015480:	009b      	lsls	r3, r3, #2
 8015482:	440b      	add	r3, r1
 8015484:	3324      	adds	r3, #36	; 0x24
 8015486:	2201      	movs	r2, #1
 8015488:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801548a:	4b55      	ldr	r3, [pc, #340]	; (80155e0 <USBD_CDC_Init+0x1e8>)
 801548c:	7819      	ldrb	r1, [r3, #0]
 801548e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015492:	2202      	movs	r2, #2
 8015494:	6878      	ldr	r0, [r7, #4]
 8015496:	f005 fb0a 	bl	801aaae <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801549a:	4b51      	ldr	r3, [pc, #324]	; (80155e0 <USBD_CDC_Init+0x1e8>)
 801549c:	781b      	ldrb	r3, [r3, #0]
 801549e:	f003 020f 	and.w	r2, r3, #15
 80154a2:	6879      	ldr	r1, [r7, #4]
 80154a4:	4613      	mov	r3, r2
 80154a6:	009b      	lsls	r3, r3, #2
 80154a8:	4413      	add	r3, r2
 80154aa:	009b      	lsls	r3, r3, #2
 80154ac:	440b      	add	r3, r1
 80154ae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80154b2:	2201      	movs	r2, #1
 80154b4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80154b6:	4b4b      	ldr	r3, [pc, #300]	; (80155e4 <USBD_CDC_Init+0x1ec>)
 80154b8:	781b      	ldrb	r3, [r3, #0]
 80154ba:	f003 020f 	and.w	r2, r3, #15
 80154be:	6879      	ldr	r1, [r7, #4]
 80154c0:	4613      	mov	r3, r2
 80154c2:	009b      	lsls	r3, r3, #2
 80154c4:	4413      	add	r3, r2
 80154c6:	009b      	lsls	r3, r3, #2
 80154c8:	440b      	add	r3, r1
 80154ca:	3326      	adds	r3, #38	; 0x26
 80154cc:	2210      	movs	r2, #16
 80154ce:	801a      	strh	r2, [r3, #0]
 80154d0:	e035      	b.n	801553e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80154d2:	4b42      	ldr	r3, [pc, #264]	; (80155dc <USBD_CDC_Init+0x1e4>)
 80154d4:	7819      	ldrb	r1, [r3, #0]
 80154d6:	2340      	movs	r3, #64	; 0x40
 80154d8:	2202      	movs	r2, #2
 80154da:	6878      	ldr	r0, [r7, #4]
 80154dc:	f005 fae7 	bl	801aaae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80154e0:	4b3e      	ldr	r3, [pc, #248]	; (80155dc <USBD_CDC_Init+0x1e4>)
 80154e2:	781b      	ldrb	r3, [r3, #0]
 80154e4:	f003 020f 	and.w	r2, r3, #15
 80154e8:	6879      	ldr	r1, [r7, #4]
 80154ea:	4613      	mov	r3, r2
 80154ec:	009b      	lsls	r3, r3, #2
 80154ee:	4413      	add	r3, r2
 80154f0:	009b      	lsls	r3, r3, #2
 80154f2:	440b      	add	r3, r1
 80154f4:	3324      	adds	r3, #36	; 0x24
 80154f6:	2201      	movs	r2, #1
 80154f8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80154fa:	4b39      	ldr	r3, [pc, #228]	; (80155e0 <USBD_CDC_Init+0x1e8>)
 80154fc:	7819      	ldrb	r1, [r3, #0]
 80154fe:	2340      	movs	r3, #64	; 0x40
 8015500:	2202      	movs	r2, #2
 8015502:	6878      	ldr	r0, [r7, #4]
 8015504:	f005 fad3 	bl	801aaae <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8015508:	4b35      	ldr	r3, [pc, #212]	; (80155e0 <USBD_CDC_Init+0x1e8>)
 801550a:	781b      	ldrb	r3, [r3, #0]
 801550c:	f003 020f 	and.w	r2, r3, #15
 8015510:	6879      	ldr	r1, [r7, #4]
 8015512:	4613      	mov	r3, r2
 8015514:	009b      	lsls	r3, r3, #2
 8015516:	4413      	add	r3, r2
 8015518:	009b      	lsls	r3, r3, #2
 801551a:	440b      	add	r3, r1
 801551c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015520:	2201      	movs	r2, #1
 8015522:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8015524:	4b2f      	ldr	r3, [pc, #188]	; (80155e4 <USBD_CDC_Init+0x1ec>)
 8015526:	781b      	ldrb	r3, [r3, #0]
 8015528:	f003 020f 	and.w	r2, r3, #15
 801552c:	6879      	ldr	r1, [r7, #4]
 801552e:	4613      	mov	r3, r2
 8015530:	009b      	lsls	r3, r3, #2
 8015532:	4413      	add	r3, r2
 8015534:	009b      	lsls	r3, r3, #2
 8015536:	440b      	add	r3, r1
 8015538:	3326      	adds	r3, #38	; 0x26
 801553a:	2210      	movs	r2, #16
 801553c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801553e:	4b29      	ldr	r3, [pc, #164]	; (80155e4 <USBD_CDC_Init+0x1ec>)
 8015540:	7819      	ldrb	r1, [r3, #0]
 8015542:	2308      	movs	r3, #8
 8015544:	2203      	movs	r2, #3
 8015546:	6878      	ldr	r0, [r7, #4]
 8015548:	f005 fab1 	bl	801aaae <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 801554c:	4b25      	ldr	r3, [pc, #148]	; (80155e4 <USBD_CDC_Init+0x1ec>)
 801554e:	781b      	ldrb	r3, [r3, #0]
 8015550:	f003 020f 	and.w	r2, r3, #15
 8015554:	6879      	ldr	r1, [r7, #4]
 8015556:	4613      	mov	r3, r2
 8015558:	009b      	lsls	r3, r3, #2
 801555a:	4413      	add	r3, r2
 801555c:	009b      	lsls	r3, r3, #2
 801555e:	440b      	add	r3, r1
 8015560:	3324      	adds	r3, #36	; 0x24
 8015562:	2201      	movs	r2, #1
 8015564:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8015566:	68fb      	ldr	r3, [r7, #12]
 8015568:	2200      	movs	r2, #0
 801556a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015574:	687a      	ldr	r2, [r7, #4]
 8015576:	33b0      	adds	r3, #176	; 0xb0
 8015578:	009b      	lsls	r3, r3, #2
 801557a:	4413      	add	r3, r2
 801557c:	685b      	ldr	r3, [r3, #4]
 801557e:	681b      	ldr	r3, [r3, #0]
 8015580:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	2200      	movs	r2, #0
 8015586:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801558a:	68fb      	ldr	r3, [r7, #12]
 801558c:	2200      	movs	r2, #0
 801558e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8015598:	2b00      	cmp	r3, #0
 801559a:	d101      	bne.n	80155a0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 801559c:	2302      	movs	r3, #2
 801559e:	e018      	b.n	80155d2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	7c1b      	ldrb	r3, [r3, #16]
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d10a      	bne.n	80155be <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80155a8:	4b0d      	ldr	r3, [pc, #52]	; (80155e0 <USBD_CDC_Init+0x1e8>)
 80155aa:	7819      	ldrb	r1, [r3, #0]
 80155ac:	68fb      	ldr	r3, [r7, #12]
 80155ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80155b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80155b6:	6878      	ldr	r0, [r7, #4]
 80155b8:	f005 fb68 	bl	801ac8c <USBD_LL_PrepareReceive>
 80155bc:	e008      	b.n	80155d0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80155be:	4b08      	ldr	r3, [pc, #32]	; (80155e0 <USBD_CDC_Init+0x1e8>)
 80155c0:	7819      	ldrb	r1, [r3, #0]
 80155c2:	68fb      	ldr	r3, [r7, #12]
 80155c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80155c8:	2340      	movs	r3, #64	; 0x40
 80155ca:	6878      	ldr	r0, [r7, #4]
 80155cc:	f005 fb5e 	bl	801ac8c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80155d0:	2300      	movs	r3, #0
}
 80155d2:	4618      	mov	r0, r3
 80155d4:	3710      	adds	r7, #16
 80155d6:	46bd      	mov	sp, r7
 80155d8:	bd80      	pop	{r7, pc}
 80155da:	bf00      	nop
 80155dc:	24000097 	.word	0x24000097
 80155e0:	24000098 	.word	0x24000098
 80155e4:	24000099 	.word	0x24000099

080155e8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80155e8:	b580      	push	{r7, lr}
 80155ea:	b082      	sub	sp, #8
 80155ec:	af00      	add	r7, sp, #0
 80155ee:	6078      	str	r0, [r7, #4]
 80155f0:	460b      	mov	r3, r1
 80155f2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80155f4:	4b3a      	ldr	r3, [pc, #232]	; (80156e0 <USBD_CDC_DeInit+0xf8>)
 80155f6:	781b      	ldrb	r3, [r3, #0]
 80155f8:	4619      	mov	r1, r3
 80155fa:	6878      	ldr	r0, [r7, #4]
 80155fc:	f005 fa7d 	bl	801aafa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8015600:	4b37      	ldr	r3, [pc, #220]	; (80156e0 <USBD_CDC_DeInit+0xf8>)
 8015602:	781b      	ldrb	r3, [r3, #0]
 8015604:	f003 020f 	and.w	r2, r3, #15
 8015608:	6879      	ldr	r1, [r7, #4]
 801560a:	4613      	mov	r3, r2
 801560c:	009b      	lsls	r3, r3, #2
 801560e:	4413      	add	r3, r2
 8015610:	009b      	lsls	r3, r3, #2
 8015612:	440b      	add	r3, r1
 8015614:	3324      	adds	r3, #36	; 0x24
 8015616:	2200      	movs	r2, #0
 8015618:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801561a:	4b32      	ldr	r3, [pc, #200]	; (80156e4 <USBD_CDC_DeInit+0xfc>)
 801561c:	781b      	ldrb	r3, [r3, #0]
 801561e:	4619      	mov	r1, r3
 8015620:	6878      	ldr	r0, [r7, #4]
 8015622:	f005 fa6a 	bl	801aafa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8015626:	4b2f      	ldr	r3, [pc, #188]	; (80156e4 <USBD_CDC_DeInit+0xfc>)
 8015628:	781b      	ldrb	r3, [r3, #0]
 801562a:	f003 020f 	and.w	r2, r3, #15
 801562e:	6879      	ldr	r1, [r7, #4]
 8015630:	4613      	mov	r3, r2
 8015632:	009b      	lsls	r3, r3, #2
 8015634:	4413      	add	r3, r2
 8015636:	009b      	lsls	r3, r3, #2
 8015638:	440b      	add	r3, r1
 801563a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801563e:	2200      	movs	r2, #0
 8015640:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8015642:	4b29      	ldr	r3, [pc, #164]	; (80156e8 <USBD_CDC_DeInit+0x100>)
 8015644:	781b      	ldrb	r3, [r3, #0]
 8015646:	4619      	mov	r1, r3
 8015648:	6878      	ldr	r0, [r7, #4]
 801564a:	f005 fa56 	bl	801aafa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801564e:	4b26      	ldr	r3, [pc, #152]	; (80156e8 <USBD_CDC_DeInit+0x100>)
 8015650:	781b      	ldrb	r3, [r3, #0]
 8015652:	f003 020f 	and.w	r2, r3, #15
 8015656:	6879      	ldr	r1, [r7, #4]
 8015658:	4613      	mov	r3, r2
 801565a:	009b      	lsls	r3, r3, #2
 801565c:	4413      	add	r3, r2
 801565e:	009b      	lsls	r3, r3, #2
 8015660:	440b      	add	r3, r1
 8015662:	3324      	adds	r3, #36	; 0x24
 8015664:	2200      	movs	r2, #0
 8015666:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8015668:	4b1f      	ldr	r3, [pc, #124]	; (80156e8 <USBD_CDC_DeInit+0x100>)
 801566a:	781b      	ldrb	r3, [r3, #0]
 801566c:	f003 020f 	and.w	r2, r3, #15
 8015670:	6879      	ldr	r1, [r7, #4]
 8015672:	4613      	mov	r3, r2
 8015674:	009b      	lsls	r3, r3, #2
 8015676:	4413      	add	r3, r2
 8015678:	009b      	lsls	r3, r3, #2
 801567a:	440b      	add	r3, r1
 801567c:	3326      	adds	r3, #38	; 0x26
 801567e:	2200      	movs	r2, #0
 8015680:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	32b0      	adds	r2, #176	; 0xb0
 801568c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015690:	2b00      	cmp	r3, #0
 8015692:	d01f      	beq.n	80156d4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801569a:	687a      	ldr	r2, [r7, #4]
 801569c:	33b0      	adds	r3, #176	; 0xb0
 801569e:	009b      	lsls	r3, r3, #2
 80156a0:	4413      	add	r3, r2
 80156a2:	685b      	ldr	r3, [r3, #4]
 80156a4:	685b      	ldr	r3, [r3, #4]
 80156a6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	32b0      	adds	r2, #176	; 0xb0
 80156b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156b6:	4618      	mov	r0, r3
 80156b8:	f005 fb2a 	bl	801ad10 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	32b0      	adds	r2, #176	; 0xb0
 80156c6:	2100      	movs	r1, #0
 80156c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	2200      	movs	r2, #0
 80156d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80156d4:	2300      	movs	r3, #0
}
 80156d6:	4618      	mov	r0, r3
 80156d8:	3708      	adds	r7, #8
 80156da:	46bd      	mov	sp, r7
 80156dc:	bd80      	pop	{r7, pc}
 80156de:	bf00      	nop
 80156e0:	24000097 	.word	0x24000097
 80156e4:	24000098 	.word	0x24000098
 80156e8:	24000099 	.word	0x24000099

080156ec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80156ec:	b580      	push	{r7, lr}
 80156ee:	b086      	sub	sp, #24
 80156f0:	af00      	add	r7, sp, #0
 80156f2:	6078      	str	r0, [r7, #4]
 80156f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	32b0      	adds	r2, #176	; 0xb0
 8015700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015704:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8015706:	2300      	movs	r3, #0
 8015708:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801570a:	2300      	movs	r3, #0
 801570c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 801570e:	2300      	movs	r3, #0
 8015710:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8015712:	693b      	ldr	r3, [r7, #16]
 8015714:	2b00      	cmp	r3, #0
 8015716:	d101      	bne.n	801571c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8015718:	2303      	movs	r3, #3
 801571a:	e0bf      	b.n	801589c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801571c:	683b      	ldr	r3, [r7, #0]
 801571e:	781b      	ldrb	r3, [r3, #0]
 8015720:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015724:	2b00      	cmp	r3, #0
 8015726:	d050      	beq.n	80157ca <USBD_CDC_Setup+0xde>
 8015728:	2b20      	cmp	r3, #32
 801572a:	f040 80af 	bne.w	801588c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 801572e:	683b      	ldr	r3, [r7, #0]
 8015730:	88db      	ldrh	r3, [r3, #6]
 8015732:	2b00      	cmp	r3, #0
 8015734:	d03a      	beq.n	80157ac <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8015736:	683b      	ldr	r3, [r7, #0]
 8015738:	781b      	ldrb	r3, [r3, #0]
 801573a:	b25b      	sxtb	r3, r3
 801573c:	2b00      	cmp	r3, #0
 801573e:	da1b      	bge.n	8015778 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015746:	687a      	ldr	r2, [r7, #4]
 8015748:	33b0      	adds	r3, #176	; 0xb0
 801574a:	009b      	lsls	r3, r3, #2
 801574c:	4413      	add	r3, r2
 801574e:	685b      	ldr	r3, [r3, #4]
 8015750:	689b      	ldr	r3, [r3, #8]
 8015752:	683a      	ldr	r2, [r7, #0]
 8015754:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8015756:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015758:	683a      	ldr	r2, [r7, #0]
 801575a:	88d2      	ldrh	r2, [r2, #6]
 801575c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801575e:	683b      	ldr	r3, [r7, #0]
 8015760:	88db      	ldrh	r3, [r3, #6]
 8015762:	2b07      	cmp	r3, #7
 8015764:	bf28      	it	cs
 8015766:	2307      	movcs	r3, #7
 8015768:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801576a:	693b      	ldr	r3, [r7, #16]
 801576c:	89fa      	ldrh	r2, [r7, #14]
 801576e:	4619      	mov	r1, r3
 8015770:	6878      	ldr	r0, [r7, #4]
 8015772:	f001 fd89 	bl	8017288 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8015776:	e090      	b.n	801589a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8015778:	683b      	ldr	r3, [r7, #0]
 801577a:	785a      	ldrb	r2, [r3, #1]
 801577c:	693b      	ldr	r3, [r7, #16]
 801577e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8015782:	683b      	ldr	r3, [r7, #0]
 8015784:	88db      	ldrh	r3, [r3, #6]
 8015786:	2b3f      	cmp	r3, #63	; 0x3f
 8015788:	d803      	bhi.n	8015792 <USBD_CDC_Setup+0xa6>
 801578a:	683b      	ldr	r3, [r7, #0]
 801578c:	88db      	ldrh	r3, [r3, #6]
 801578e:	b2da      	uxtb	r2, r3
 8015790:	e000      	b.n	8015794 <USBD_CDC_Setup+0xa8>
 8015792:	2240      	movs	r2, #64	; 0x40
 8015794:	693b      	ldr	r3, [r7, #16]
 8015796:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801579a:	6939      	ldr	r1, [r7, #16]
 801579c:	693b      	ldr	r3, [r7, #16]
 801579e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80157a2:	461a      	mov	r2, r3
 80157a4:	6878      	ldr	r0, [r7, #4]
 80157a6:	f001 fd9b 	bl	80172e0 <USBD_CtlPrepareRx>
      break;
 80157aa:	e076      	b.n	801589a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80157b2:	687a      	ldr	r2, [r7, #4]
 80157b4:	33b0      	adds	r3, #176	; 0xb0
 80157b6:	009b      	lsls	r3, r3, #2
 80157b8:	4413      	add	r3, r2
 80157ba:	685b      	ldr	r3, [r3, #4]
 80157bc:	689b      	ldr	r3, [r3, #8]
 80157be:	683a      	ldr	r2, [r7, #0]
 80157c0:	7850      	ldrb	r0, [r2, #1]
 80157c2:	2200      	movs	r2, #0
 80157c4:	6839      	ldr	r1, [r7, #0]
 80157c6:	4798      	blx	r3
      break;
 80157c8:	e067      	b.n	801589a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80157ca:	683b      	ldr	r3, [r7, #0]
 80157cc:	785b      	ldrb	r3, [r3, #1]
 80157ce:	2b0b      	cmp	r3, #11
 80157d0:	d851      	bhi.n	8015876 <USBD_CDC_Setup+0x18a>
 80157d2:	a201      	add	r2, pc, #4	; (adr r2, 80157d8 <USBD_CDC_Setup+0xec>)
 80157d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157d8:	08015809 	.word	0x08015809
 80157dc:	08015885 	.word	0x08015885
 80157e0:	08015877 	.word	0x08015877
 80157e4:	08015877 	.word	0x08015877
 80157e8:	08015877 	.word	0x08015877
 80157ec:	08015877 	.word	0x08015877
 80157f0:	08015877 	.word	0x08015877
 80157f4:	08015877 	.word	0x08015877
 80157f8:	08015877 	.word	0x08015877
 80157fc:	08015877 	.word	0x08015877
 8015800:	08015833 	.word	0x08015833
 8015804:	0801585d 	.word	0x0801585d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801580e:	b2db      	uxtb	r3, r3
 8015810:	2b03      	cmp	r3, #3
 8015812:	d107      	bne.n	8015824 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8015814:	f107 030a 	add.w	r3, r7, #10
 8015818:	2202      	movs	r2, #2
 801581a:	4619      	mov	r1, r3
 801581c:	6878      	ldr	r0, [r7, #4]
 801581e:	f001 fd33 	bl	8017288 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015822:	e032      	b.n	801588a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015824:	6839      	ldr	r1, [r7, #0]
 8015826:	6878      	ldr	r0, [r7, #4]
 8015828:	f001 fcbd 	bl	80171a6 <USBD_CtlError>
            ret = USBD_FAIL;
 801582c:	2303      	movs	r3, #3
 801582e:	75fb      	strb	r3, [r7, #23]
          break;
 8015830:	e02b      	b.n	801588a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015838:	b2db      	uxtb	r3, r3
 801583a:	2b03      	cmp	r3, #3
 801583c:	d107      	bne.n	801584e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801583e:	f107 030d 	add.w	r3, r7, #13
 8015842:	2201      	movs	r2, #1
 8015844:	4619      	mov	r1, r3
 8015846:	6878      	ldr	r0, [r7, #4]
 8015848:	f001 fd1e 	bl	8017288 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801584c:	e01d      	b.n	801588a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801584e:	6839      	ldr	r1, [r7, #0]
 8015850:	6878      	ldr	r0, [r7, #4]
 8015852:	f001 fca8 	bl	80171a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8015856:	2303      	movs	r3, #3
 8015858:	75fb      	strb	r3, [r7, #23]
          break;
 801585a:	e016      	b.n	801588a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015862:	b2db      	uxtb	r3, r3
 8015864:	2b03      	cmp	r3, #3
 8015866:	d00f      	beq.n	8015888 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8015868:	6839      	ldr	r1, [r7, #0]
 801586a:	6878      	ldr	r0, [r7, #4]
 801586c:	f001 fc9b 	bl	80171a6 <USBD_CtlError>
            ret = USBD_FAIL;
 8015870:	2303      	movs	r3, #3
 8015872:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8015874:	e008      	b.n	8015888 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8015876:	6839      	ldr	r1, [r7, #0]
 8015878:	6878      	ldr	r0, [r7, #4]
 801587a:	f001 fc94 	bl	80171a6 <USBD_CtlError>
          ret = USBD_FAIL;
 801587e:	2303      	movs	r3, #3
 8015880:	75fb      	strb	r3, [r7, #23]
          break;
 8015882:	e002      	b.n	801588a <USBD_CDC_Setup+0x19e>
          break;
 8015884:	bf00      	nop
 8015886:	e008      	b.n	801589a <USBD_CDC_Setup+0x1ae>
          break;
 8015888:	bf00      	nop
      }
      break;
 801588a:	e006      	b.n	801589a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 801588c:	6839      	ldr	r1, [r7, #0]
 801588e:	6878      	ldr	r0, [r7, #4]
 8015890:	f001 fc89 	bl	80171a6 <USBD_CtlError>
      ret = USBD_FAIL;
 8015894:	2303      	movs	r3, #3
 8015896:	75fb      	strb	r3, [r7, #23]
      break;
 8015898:	bf00      	nop
  }

  return (uint8_t)ret;
 801589a:	7dfb      	ldrb	r3, [r7, #23]
}
 801589c:	4618      	mov	r0, r3
 801589e:	3718      	adds	r7, #24
 80158a0:	46bd      	mov	sp, r7
 80158a2:	bd80      	pop	{r7, pc}

080158a4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80158a4:	b580      	push	{r7, lr}
 80158a6:	b084      	sub	sp, #16
 80158a8:	af00      	add	r7, sp, #0
 80158aa:	6078      	str	r0, [r7, #4]
 80158ac:	460b      	mov	r3, r1
 80158ae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80158b6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	32b0      	adds	r2, #176	; 0xb0
 80158c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d101      	bne.n	80158ce <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80158ca:	2303      	movs	r3, #3
 80158cc:	e065      	b.n	801599a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	32b0      	adds	r2, #176	; 0xb0
 80158d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158dc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80158de:	78fb      	ldrb	r3, [r7, #3]
 80158e0:	f003 020f 	and.w	r2, r3, #15
 80158e4:	6879      	ldr	r1, [r7, #4]
 80158e6:	4613      	mov	r3, r2
 80158e8:	009b      	lsls	r3, r3, #2
 80158ea:	4413      	add	r3, r2
 80158ec:	009b      	lsls	r3, r3, #2
 80158ee:	440b      	add	r3, r1
 80158f0:	3318      	adds	r3, #24
 80158f2:	681b      	ldr	r3, [r3, #0]
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d02f      	beq.n	8015958 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80158f8:	78fb      	ldrb	r3, [r7, #3]
 80158fa:	f003 020f 	and.w	r2, r3, #15
 80158fe:	6879      	ldr	r1, [r7, #4]
 8015900:	4613      	mov	r3, r2
 8015902:	009b      	lsls	r3, r3, #2
 8015904:	4413      	add	r3, r2
 8015906:	009b      	lsls	r3, r3, #2
 8015908:	440b      	add	r3, r1
 801590a:	3318      	adds	r3, #24
 801590c:	681a      	ldr	r2, [r3, #0]
 801590e:	78fb      	ldrb	r3, [r7, #3]
 8015910:	f003 010f 	and.w	r1, r3, #15
 8015914:	68f8      	ldr	r0, [r7, #12]
 8015916:	460b      	mov	r3, r1
 8015918:	00db      	lsls	r3, r3, #3
 801591a:	440b      	add	r3, r1
 801591c:	009b      	lsls	r3, r3, #2
 801591e:	4403      	add	r3, r0
 8015920:	3344      	adds	r3, #68	; 0x44
 8015922:	681b      	ldr	r3, [r3, #0]
 8015924:	fbb2 f1f3 	udiv	r1, r2, r3
 8015928:	fb01 f303 	mul.w	r3, r1, r3
 801592c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801592e:	2b00      	cmp	r3, #0
 8015930:	d112      	bne.n	8015958 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8015932:	78fb      	ldrb	r3, [r7, #3]
 8015934:	f003 020f 	and.w	r2, r3, #15
 8015938:	6879      	ldr	r1, [r7, #4]
 801593a:	4613      	mov	r3, r2
 801593c:	009b      	lsls	r3, r3, #2
 801593e:	4413      	add	r3, r2
 8015940:	009b      	lsls	r3, r3, #2
 8015942:	440b      	add	r3, r1
 8015944:	3318      	adds	r3, #24
 8015946:	2200      	movs	r2, #0
 8015948:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801594a:	78f9      	ldrb	r1, [r7, #3]
 801594c:	2300      	movs	r3, #0
 801594e:	2200      	movs	r2, #0
 8015950:	6878      	ldr	r0, [r7, #4]
 8015952:	f005 f97a 	bl	801ac4a <USBD_LL_Transmit>
 8015956:	e01f      	b.n	8015998 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8015958:	68bb      	ldr	r3, [r7, #8]
 801595a:	2200      	movs	r2, #0
 801595c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015966:	687a      	ldr	r2, [r7, #4]
 8015968:	33b0      	adds	r3, #176	; 0xb0
 801596a:	009b      	lsls	r3, r3, #2
 801596c:	4413      	add	r3, r2
 801596e:	685b      	ldr	r3, [r3, #4]
 8015970:	691b      	ldr	r3, [r3, #16]
 8015972:	2b00      	cmp	r3, #0
 8015974:	d010      	beq.n	8015998 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801597c:	687a      	ldr	r2, [r7, #4]
 801597e:	33b0      	adds	r3, #176	; 0xb0
 8015980:	009b      	lsls	r3, r3, #2
 8015982:	4413      	add	r3, r2
 8015984:	685b      	ldr	r3, [r3, #4]
 8015986:	691b      	ldr	r3, [r3, #16]
 8015988:	68ba      	ldr	r2, [r7, #8]
 801598a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801598e:	68ba      	ldr	r2, [r7, #8]
 8015990:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8015994:	78fa      	ldrb	r2, [r7, #3]
 8015996:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8015998:	2300      	movs	r3, #0
}
 801599a:	4618      	mov	r0, r3
 801599c:	3710      	adds	r7, #16
 801599e:	46bd      	mov	sp, r7
 80159a0:	bd80      	pop	{r7, pc}

080159a2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80159a2:	b580      	push	{r7, lr}
 80159a4:	b084      	sub	sp, #16
 80159a6:	af00      	add	r7, sp, #0
 80159a8:	6078      	str	r0, [r7, #4]
 80159aa:	460b      	mov	r3, r1
 80159ac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	32b0      	adds	r2, #176	; 0xb0
 80159b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159bc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	32b0      	adds	r2, #176	; 0xb0
 80159c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d101      	bne.n	80159d4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80159d0:	2303      	movs	r3, #3
 80159d2:	e01a      	b.n	8015a0a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80159d4:	78fb      	ldrb	r3, [r7, #3]
 80159d6:	4619      	mov	r1, r3
 80159d8:	6878      	ldr	r0, [r7, #4]
 80159da:	f005 f978 	bl	801acce <USBD_LL_GetRxDataSize>
 80159de:	4602      	mov	r2, r0
 80159e0:	68fb      	ldr	r3, [r7, #12]
 80159e2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80159ec:	687a      	ldr	r2, [r7, #4]
 80159ee:	33b0      	adds	r3, #176	; 0xb0
 80159f0:	009b      	lsls	r3, r3, #2
 80159f2:	4413      	add	r3, r2
 80159f4:	685b      	ldr	r3, [r3, #4]
 80159f6:	68db      	ldr	r3, [r3, #12]
 80159f8:	68fa      	ldr	r2, [r7, #12]
 80159fa:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80159fe:	68fa      	ldr	r2, [r7, #12]
 8015a00:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8015a04:	4611      	mov	r1, r2
 8015a06:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8015a08:	2300      	movs	r3, #0
}
 8015a0a:	4618      	mov	r0, r3
 8015a0c:	3710      	adds	r7, #16
 8015a0e:	46bd      	mov	sp, r7
 8015a10:	bd80      	pop	{r7, pc}

08015a12 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8015a12:	b580      	push	{r7, lr}
 8015a14:	b084      	sub	sp, #16
 8015a16:	af00      	add	r7, sp, #0
 8015a18:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	32b0      	adds	r2, #176	; 0xb0
 8015a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a28:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015a2a:	68fb      	ldr	r3, [r7, #12]
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d101      	bne.n	8015a34 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8015a30:	2303      	movs	r3, #3
 8015a32:	e025      	b.n	8015a80 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015a3a:	687a      	ldr	r2, [r7, #4]
 8015a3c:	33b0      	adds	r3, #176	; 0xb0
 8015a3e:	009b      	lsls	r3, r3, #2
 8015a40:	4413      	add	r3, r2
 8015a42:	685b      	ldr	r3, [r3, #4]
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d01a      	beq.n	8015a7e <USBD_CDC_EP0_RxReady+0x6c>
 8015a48:	68fb      	ldr	r3, [r7, #12]
 8015a4a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8015a4e:	2bff      	cmp	r3, #255	; 0xff
 8015a50:	d015      	beq.n	8015a7e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015a58:	687a      	ldr	r2, [r7, #4]
 8015a5a:	33b0      	adds	r3, #176	; 0xb0
 8015a5c:	009b      	lsls	r3, r3, #2
 8015a5e:	4413      	add	r3, r2
 8015a60:	685b      	ldr	r3, [r3, #4]
 8015a62:	689b      	ldr	r3, [r3, #8]
 8015a64:	68fa      	ldr	r2, [r7, #12]
 8015a66:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8015a6a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8015a6c:	68fa      	ldr	r2, [r7, #12]
 8015a6e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015a72:	b292      	uxth	r2, r2
 8015a74:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8015a76:	68fb      	ldr	r3, [r7, #12]
 8015a78:	22ff      	movs	r2, #255	; 0xff
 8015a7a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8015a7e:	2300      	movs	r3, #0
}
 8015a80:	4618      	mov	r0, r3
 8015a82:	3710      	adds	r7, #16
 8015a84:	46bd      	mov	sp, r7
 8015a86:	bd80      	pop	{r7, pc}

08015a88 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8015a88:	b580      	push	{r7, lr}
 8015a8a:	b086      	sub	sp, #24
 8015a8c:	af00      	add	r7, sp, #0
 8015a8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015a90:	2182      	movs	r1, #130	; 0x82
 8015a92:	4818      	ldr	r0, [pc, #96]	; (8015af4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015a94:	f000 fd4f 	bl	8016536 <USBD_GetEpDesc>
 8015a98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015a9a:	2101      	movs	r1, #1
 8015a9c:	4815      	ldr	r0, [pc, #84]	; (8015af4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015a9e:	f000 fd4a 	bl	8016536 <USBD_GetEpDesc>
 8015aa2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015aa4:	2181      	movs	r1, #129	; 0x81
 8015aa6:	4813      	ldr	r0, [pc, #76]	; (8015af4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015aa8:	f000 fd45 	bl	8016536 <USBD_GetEpDesc>
 8015aac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015aae:	697b      	ldr	r3, [r7, #20]
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	d002      	beq.n	8015aba <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015ab4:	697b      	ldr	r3, [r7, #20]
 8015ab6:	2210      	movs	r2, #16
 8015ab8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015aba:	693b      	ldr	r3, [r7, #16]
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d006      	beq.n	8015ace <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015ac0:	693b      	ldr	r3, [r7, #16]
 8015ac2:	2200      	movs	r2, #0
 8015ac4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015ac8:	711a      	strb	r2, [r3, #4]
 8015aca:	2200      	movs	r2, #0
 8015acc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015ace:	68fb      	ldr	r3, [r7, #12]
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	d006      	beq.n	8015ae2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015ad4:	68fb      	ldr	r3, [r7, #12]
 8015ad6:	2200      	movs	r2, #0
 8015ad8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015adc:	711a      	strb	r2, [r3, #4]
 8015ade:	2200      	movs	r2, #0
 8015ae0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	2243      	movs	r2, #67	; 0x43
 8015ae6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015ae8:	4b02      	ldr	r3, [pc, #8]	; (8015af4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8015aea:	4618      	mov	r0, r3
 8015aec:	3718      	adds	r7, #24
 8015aee:	46bd      	mov	sp, r7
 8015af0:	bd80      	pop	{r7, pc}
 8015af2:	bf00      	nop
 8015af4:	24000054 	.word	0x24000054

08015af8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8015af8:	b580      	push	{r7, lr}
 8015afa:	b086      	sub	sp, #24
 8015afc:	af00      	add	r7, sp, #0
 8015afe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015b00:	2182      	movs	r1, #130	; 0x82
 8015b02:	4818      	ldr	r0, [pc, #96]	; (8015b64 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015b04:	f000 fd17 	bl	8016536 <USBD_GetEpDesc>
 8015b08:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015b0a:	2101      	movs	r1, #1
 8015b0c:	4815      	ldr	r0, [pc, #84]	; (8015b64 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015b0e:	f000 fd12 	bl	8016536 <USBD_GetEpDesc>
 8015b12:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015b14:	2181      	movs	r1, #129	; 0x81
 8015b16:	4813      	ldr	r0, [pc, #76]	; (8015b64 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015b18:	f000 fd0d 	bl	8016536 <USBD_GetEpDesc>
 8015b1c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015b1e:	697b      	ldr	r3, [r7, #20]
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d002      	beq.n	8015b2a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8015b24:	697b      	ldr	r3, [r7, #20]
 8015b26:	2210      	movs	r2, #16
 8015b28:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015b2a:	693b      	ldr	r3, [r7, #16]
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	d006      	beq.n	8015b3e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015b30:	693b      	ldr	r3, [r7, #16]
 8015b32:	2200      	movs	r2, #0
 8015b34:	711a      	strb	r2, [r3, #4]
 8015b36:	2200      	movs	r2, #0
 8015b38:	f042 0202 	orr.w	r2, r2, #2
 8015b3c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015b3e:	68fb      	ldr	r3, [r7, #12]
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d006      	beq.n	8015b52 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015b44:	68fb      	ldr	r3, [r7, #12]
 8015b46:	2200      	movs	r2, #0
 8015b48:	711a      	strb	r2, [r3, #4]
 8015b4a:	2200      	movs	r2, #0
 8015b4c:	f042 0202 	orr.w	r2, r2, #2
 8015b50:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	2243      	movs	r2, #67	; 0x43
 8015b56:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015b58:	4b02      	ldr	r3, [pc, #8]	; (8015b64 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8015b5a:	4618      	mov	r0, r3
 8015b5c:	3718      	adds	r7, #24
 8015b5e:	46bd      	mov	sp, r7
 8015b60:	bd80      	pop	{r7, pc}
 8015b62:	bf00      	nop
 8015b64:	24000054 	.word	0x24000054

08015b68 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8015b68:	b580      	push	{r7, lr}
 8015b6a:	b086      	sub	sp, #24
 8015b6c:	af00      	add	r7, sp, #0
 8015b6e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015b70:	2182      	movs	r1, #130	; 0x82
 8015b72:	4818      	ldr	r0, [pc, #96]	; (8015bd4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015b74:	f000 fcdf 	bl	8016536 <USBD_GetEpDesc>
 8015b78:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015b7a:	2101      	movs	r1, #1
 8015b7c:	4815      	ldr	r0, [pc, #84]	; (8015bd4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015b7e:	f000 fcda 	bl	8016536 <USBD_GetEpDesc>
 8015b82:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015b84:	2181      	movs	r1, #129	; 0x81
 8015b86:	4813      	ldr	r0, [pc, #76]	; (8015bd4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015b88:	f000 fcd5 	bl	8016536 <USBD_GetEpDesc>
 8015b8c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015b8e:	697b      	ldr	r3, [r7, #20]
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d002      	beq.n	8015b9a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015b94:	697b      	ldr	r3, [r7, #20]
 8015b96:	2210      	movs	r2, #16
 8015b98:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015b9a:	693b      	ldr	r3, [r7, #16]
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	d006      	beq.n	8015bae <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015ba0:	693b      	ldr	r3, [r7, #16]
 8015ba2:	2200      	movs	r2, #0
 8015ba4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015ba8:	711a      	strb	r2, [r3, #4]
 8015baa:	2200      	movs	r2, #0
 8015bac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015bae:	68fb      	ldr	r3, [r7, #12]
 8015bb0:	2b00      	cmp	r3, #0
 8015bb2:	d006      	beq.n	8015bc2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015bb4:	68fb      	ldr	r3, [r7, #12]
 8015bb6:	2200      	movs	r2, #0
 8015bb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015bbc:	711a      	strb	r2, [r3, #4]
 8015bbe:	2200      	movs	r2, #0
 8015bc0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	2243      	movs	r2, #67	; 0x43
 8015bc6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015bc8:	4b02      	ldr	r3, [pc, #8]	; (8015bd4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8015bca:	4618      	mov	r0, r3
 8015bcc:	3718      	adds	r7, #24
 8015bce:	46bd      	mov	sp, r7
 8015bd0:	bd80      	pop	{r7, pc}
 8015bd2:	bf00      	nop
 8015bd4:	24000054 	.word	0x24000054

08015bd8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8015bd8:	b480      	push	{r7}
 8015bda:	b083      	sub	sp, #12
 8015bdc:	af00      	add	r7, sp, #0
 8015bde:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	220a      	movs	r2, #10
 8015be4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8015be6:	4b03      	ldr	r3, [pc, #12]	; (8015bf4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8015be8:	4618      	mov	r0, r3
 8015bea:	370c      	adds	r7, #12
 8015bec:	46bd      	mov	sp, r7
 8015bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bf2:	4770      	bx	lr
 8015bf4:	24000010 	.word	0x24000010

08015bf8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8015bf8:	b480      	push	{r7}
 8015bfa:	b083      	sub	sp, #12
 8015bfc:	af00      	add	r7, sp, #0
 8015bfe:	6078      	str	r0, [r7, #4]
 8015c00:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8015c02:	683b      	ldr	r3, [r7, #0]
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d101      	bne.n	8015c0c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8015c08:	2303      	movs	r3, #3
 8015c0a:	e009      	b.n	8015c20 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015c12:	687a      	ldr	r2, [r7, #4]
 8015c14:	33b0      	adds	r3, #176	; 0xb0
 8015c16:	009b      	lsls	r3, r3, #2
 8015c18:	4413      	add	r3, r2
 8015c1a:	683a      	ldr	r2, [r7, #0]
 8015c1c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8015c1e:	2300      	movs	r3, #0
}
 8015c20:	4618      	mov	r0, r3
 8015c22:	370c      	adds	r7, #12
 8015c24:	46bd      	mov	sp, r7
 8015c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c2a:	4770      	bx	lr

08015c2c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8015c2c:	b480      	push	{r7}
 8015c2e:	b087      	sub	sp, #28
 8015c30:	af00      	add	r7, sp, #0
 8015c32:	60f8      	str	r0, [r7, #12]
 8015c34:	60b9      	str	r1, [r7, #8]
 8015c36:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015c38:	68fb      	ldr	r3, [r7, #12]
 8015c3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015c3e:	68fb      	ldr	r3, [r7, #12]
 8015c40:	32b0      	adds	r2, #176	; 0xb0
 8015c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c46:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015c48:	697b      	ldr	r3, [r7, #20]
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d101      	bne.n	8015c52 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8015c4e:	2303      	movs	r3, #3
 8015c50:	e008      	b.n	8015c64 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8015c52:	697b      	ldr	r3, [r7, #20]
 8015c54:	68ba      	ldr	r2, [r7, #8]
 8015c56:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8015c5a:	697b      	ldr	r3, [r7, #20]
 8015c5c:	687a      	ldr	r2, [r7, #4]
 8015c5e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8015c62:	2300      	movs	r3, #0
}
 8015c64:	4618      	mov	r0, r3
 8015c66:	371c      	adds	r7, #28
 8015c68:	46bd      	mov	sp, r7
 8015c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c6e:	4770      	bx	lr

08015c70 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8015c70:	b480      	push	{r7}
 8015c72:	b085      	sub	sp, #20
 8015c74:	af00      	add	r7, sp, #0
 8015c76:	6078      	str	r0, [r7, #4]
 8015c78:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	32b0      	adds	r2, #176	; 0xb0
 8015c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c88:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015c8a:	68fb      	ldr	r3, [r7, #12]
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d101      	bne.n	8015c94 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8015c90:	2303      	movs	r3, #3
 8015c92:	e004      	b.n	8015c9e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8015c94:	68fb      	ldr	r3, [r7, #12]
 8015c96:	683a      	ldr	r2, [r7, #0]
 8015c98:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8015c9c:	2300      	movs	r3, #0
}
 8015c9e:	4618      	mov	r0, r3
 8015ca0:	3714      	adds	r7, #20
 8015ca2:	46bd      	mov	sp, r7
 8015ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ca8:	4770      	bx	lr
	...

08015cac <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8015cac:	b580      	push	{r7, lr}
 8015cae:	b084      	sub	sp, #16
 8015cb0:	af00      	add	r7, sp, #0
 8015cb2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	32b0      	adds	r2, #176	; 0xb0
 8015cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cc2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8015cc4:	2301      	movs	r3, #1
 8015cc6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8015cc8:	68bb      	ldr	r3, [r7, #8]
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d101      	bne.n	8015cd2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8015cce:	2303      	movs	r3, #3
 8015cd0:	e025      	b.n	8015d1e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8015cd2:	68bb      	ldr	r3, [r7, #8]
 8015cd4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d11f      	bne.n	8015d1c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8015cdc:	68bb      	ldr	r3, [r7, #8]
 8015cde:	2201      	movs	r2, #1
 8015ce0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8015ce4:	4b10      	ldr	r3, [pc, #64]	; (8015d28 <USBD_CDC_TransmitPacket+0x7c>)
 8015ce6:	781b      	ldrb	r3, [r3, #0]
 8015ce8:	f003 020f 	and.w	r2, r3, #15
 8015cec:	68bb      	ldr	r3, [r7, #8]
 8015cee:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8015cf2:	6878      	ldr	r0, [r7, #4]
 8015cf4:	4613      	mov	r3, r2
 8015cf6:	009b      	lsls	r3, r3, #2
 8015cf8:	4413      	add	r3, r2
 8015cfa:	009b      	lsls	r3, r3, #2
 8015cfc:	4403      	add	r3, r0
 8015cfe:	3318      	adds	r3, #24
 8015d00:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8015d02:	4b09      	ldr	r3, [pc, #36]	; (8015d28 <USBD_CDC_TransmitPacket+0x7c>)
 8015d04:	7819      	ldrb	r1, [r3, #0]
 8015d06:	68bb      	ldr	r3, [r7, #8]
 8015d08:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8015d0c:	68bb      	ldr	r3, [r7, #8]
 8015d0e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8015d12:	6878      	ldr	r0, [r7, #4]
 8015d14:	f004 ff99 	bl	801ac4a <USBD_LL_Transmit>

    ret = USBD_OK;
 8015d18:	2300      	movs	r3, #0
 8015d1a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8015d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d1e:	4618      	mov	r0, r3
 8015d20:	3710      	adds	r7, #16
 8015d22:	46bd      	mov	sp, r7
 8015d24:	bd80      	pop	{r7, pc}
 8015d26:	bf00      	nop
 8015d28:	24000097 	.word	0x24000097

08015d2c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8015d2c:	b580      	push	{r7, lr}
 8015d2e:	b084      	sub	sp, #16
 8015d30:	af00      	add	r7, sp, #0
 8015d32:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	32b0      	adds	r2, #176	; 0xb0
 8015d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d42:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	32b0      	adds	r2, #176	; 0xb0
 8015d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d101      	bne.n	8015d5a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8015d56:	2303      	movs	r3, #3
 8015d58:	e018      	b.n	8015d8c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	7c1b      	ldrb	r3, [r3, #16]
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	d10a      	bne.n	8015d78 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015d62:	4b0c      	ldr	r3, [pc, #48]	; (8015d94 <USBD_CDC_ReceivePacket+0x68>)
 8015d64:	7819      	ldrb	r1, [r3, #0]
 8015d66:	68fb      	ldr	r3, [r7, #12]
 8015d68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015d6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015d70:	6878      	ldr	r0, [r7, #4]
 8015d72:	f004 ff8b 	bl	801ac8c <USBD_LL_PrepareReceive>
 8015d76:	e008      	b.n	8015d8a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015d78:	4b06      	ldr	r3, [pc, #24]	; (8015d94 <USBD_CDC_ReceivePacket+0x68>)
 8015d7a:	7819      	ldrb	r1, [r3, #0]
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015d82:	2340      	movs	r3, #64	; 0x40
 8015d84:	6878      	ldr	r0, [r7, #4]
 8015d86:	f004 ff81 	bl	801ac8c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8015d8a:	2300      	movs	r3, #0
}
 8015d8c:	4618      	mov	r0, r3
 8015d8e:	3710      	adds	r7, #16
 8015d90:	46bd      	mov	sp, r7
 8015d92:	bd80      	pop	{r7, pc}
 8015d94:	24000098 	.word	0x24000098

08015d98 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8015d98:	b580      	push	{r7, lr}
 8015d9a:	b086      	sub	sp, #24
 8015d9c:	af00      	add	r7, sp, #0
 8015d9e:	60f8      	str	r0, [r7, #12]
 8015da0:	60b9      	str	r1, [r7, #8]
 8015da2:	4613      	mov	r3, r2
 8015da4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8015da6:	68fb      	ldr	r3, [r7, #12]
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	d101      	bne.n	8015db0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015dac:	2303      	movs	r3, #3
 8015dae:	e01f      	b.n	8015df0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8015db0:	68fb      	ldr	r3, [r7, #12]
 8015db2:	2200      	movs	r2, #0
 8015db4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8015db8:	68fb      	ldr	r3, [r7, #12]
 8015dba:	2200      	movs	r2, #0
 8015dbc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8015dc0:	68fb      	ldr	r3, [r7, #12]
 8015dc2:	2200      	movs	r2, #0
 8015dc4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015dc8:	68bb      	ldr	r3, [r7, #8]
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d003      	beq.n	8015dd6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8015dce:	68fb      	ldr	r3, [r7, #12]
 8015dd0:	68ba      	ldr	r2, [r7, #8]
 8015dd2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015dd6:	68fb      	ldr	r3, [r7, #12]
 8015dd8:	2201      	movs	r2, #1
 8015dda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8015dde:	68fb      	ldr	r3, [r7, #12]
 8015de0:	79fa      	ldrb	r2, [r7, #7]
 8015de2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8015de4:	68f8      	ldr	r0, [r7, #12]
 8015de6:	f004 fdf5 	bl	801a9d4 <USBD_LL_Init>
 8015dea:	4603      	mov	r3, r0
 8015dec:	75fb      	strb	r3, [r7, #23]

  return ret;
 8015dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8015df0:	4618      	mov	r0, r3
 8015df2:	3718      	adds	r7, #24
 8015df4:	46bd      	mov	sp, r7
 8015df6:	bd80      	pop	{r7, pc}

08015df8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015df8:	b580      	push	{r7, lr}
 8015dfa:	b084      	sub	sp, #16
 8015dfc:	af00      	add	r7, sp, #0
 8015dfe:	6078      	str	r0, [r7, #4]
 8015e00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015e02:	2300      	movs	r3, #0
 8015e04:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8015e06:	683b      	ldr	r3, [r7, #0]
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d101      	bne.n	8015e10 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015e0c:	2303      	movs	r3, #3
 8015e0e:	e025      	b.n	8015e5c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	683a      	ldr	r2, [r7, #0]
 8015e14:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	32ae      	adds	r2, #174	; 0xae
 8015e22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	d00f      	beq.n	8015e4c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	32ae      	adds	r2, #174	; 0xae
 8015e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e3c:	f107 020e 	add.w	r2, r7, #14
 8015e40:	4610      	mov	r0, r2
 8015e42:	4798      	blx	r3
 8015e44:	4602      	mov	r2, r0
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015e52:	1c5a      	adds	r2, r3, #1
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8015e5a:	2300      	movs	r3, #0
}
 8015e5c:	4618      	mov	r0, r3
 8015e5e:	3710      	adds	r7, #16
 8015e60:	46bd      	mov	sp, r7
 8015e62:	bd80      	pop	{r7, pc}

08015e64 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8015e64:	b580      	push	{r7, lr}
 8015e66:	b082      	sub	sp, #8
 8015e68:	af00      	add	r7, sp, #0
 8015e6a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8015e6c:	6878      	ldr	r0, [r7, #4]
 8015e6e:	f004 fe03 	bl	801aa78 <USBD_LL_Start>
 8015e72:	4603      	mov	r3, r0
}
 8015e74:	4618      	mov	r0, r3
 8015e76:	3708      	adds	r7, #8
 8015e78:	46bd      	mov	sp, r7
 8015e7a:	bd80      	pop	{r7, pc}

08015e7c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8015e7c:	b480      	push	{r7}
 8015e7e:	b083      	sub	sp, #12
 8015e80:	af00      	add	r7, sp, #0
 8015e82:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015e84:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8015e86:	4618      	mov	r0, r3
 8015e88:	370c      	adds	r7, #12
 8015e8a:	46bd      	mov	sp, r7
 8015e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e90:	4770      	bx	lr

08015e92 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015e92:	b580      	push	{r7, lr}
 8015e94:	b084      	sub	sp, #16
 8015e96:	af00      	add	r7, sp, #0
 8015e98:	6078      	str	r0, [r7, #4]
 8015e9a:	460b      	mov	r3, r1
 8015e9c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015e9e:	2300      	movs	r3, #0
 8015ea0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d009      	beq.n	8015ec0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015eb2:	681b      	ldr	r3, [r3, #0]
 8015eb4:	78fa      	ldrb	r2, [r7, #3]
 8015eb6:	4611      	mov	r1, r2
 8015eb8:	6878      	ldr	r0, [r7, #4]
 8015eba:	4798      	blx	r3
 8015ebc:	4603      	mov	r3, r0
 8015ebe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8015ec2:	4618      	mov	r0, r3
 8015ec4:	3710      	adds	r7, #16
 8015ec6:	46bd      	mov	sp, r7
 8015ec8:	bd80      	pop	{r7, pc}

08015eca <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015eca:	b580      	push	{r7, lr}
 8015ecc:	b084      	sub	sp, #16
 8015ece:	af00      	add	r7, sp, #0
 8015ed0:	6078      	str	r0, [r7, #4]
 8015ed2:	460b      	mov	r3, r1
 8015ed4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015ed6:	2300      	movs	r3, #0
 8015ed8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015ee0:	685b      	ldr	r3, [r3, #4]
 8015ee2:	78fa      	ldrb	r2, [r7, #3]
 8015ee4:	4611      	mov	r1, r2
 8015ee6:	6878      	ldr	r0, [r7, #4]
 8015ee8:	4798      	blx	r3
 8015eea:	4603      	mov	r3, r0
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d001      	beq.n	8015ef4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8015ef0:	2303      	movs	r3, #3
 8015ef2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8015ef6:	4618      	mov	r0, r3
 8015ef8:	3710      	adds	r7, #16
 8015efa:	46bd      	mov	sp, r7
 8015efc:	bd80      	pop	{r7, pc}

08015efe <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015efe:	b580      	push	{r7, lr}
 8015f00:	b084      	sub	sp, #16
 8015f02:	af00      	add	r7, sp, #0
 8015f04:	6078      	str	r0, [r7, #4]
 8015f06:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015f0e:	6839      	ldr	r1, [r7, #0]
 8015f10:	4618      	mov	r0, r3
 8015f12:	f001 f90e 	bl	8017132 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	2201      	movs	r2, #1
 8015f1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8015f24:	461a      	mov	r2, r3
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015f32:	f003 031f 	and.w	r3, r3, #31
 8015f36:	2b02      	cmp	r3, #2
 8015f38:	d01a      	beq.n	8015f70 <USBD_LL_SetupStage+0x72>
 8015f3a:	2b02      	cmp	r3, #2
 8015f3c:	d822      	bhi.n	8015f84 <USBD_LL_SetupStage+0x86>
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d002      	beq.n	8015f48 <USBD_LL_SetupStage+0x4a>
 8015f42:	2b01      	cmp	r3, #1
 8015f44:	d00a      	beq.n	8015f5c <USBD_LL_SetupStage+0x5e>
 8015f46:	e01d      	b.n	8015f84 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015f4e:	4619      	mov	r1, r3
 8015f50:	6878      	ldr	r0, [r7, #4]
 8015f52:	f000 fb65 	bl	8016620 <USBD_StdDevReq>
 8015f56:	4603      	mov	r3, r0
 8015f58:	73fb      	strb	r3, [r7, #15]
      break;
 8015f5a:	e020      	b.n	8015f9e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015f62:	4619      	mov	r1, r3
 8015f64:	6878      	ldr	r0, [r7, #4]
 8015f66:	f000 fbcd 	bl	8016704 <USBD_StdItfReq>
 8015f6a:	4603      	mov	r3, r0
 8015f6c:	73fb      	strb	r3, [r7, #15]
      break;
 8015f6e:	e016      	b.n	8015f9e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015f76:	4619      	mov	r1, r3
 8015f78:	6878      	ldr	r0, [r7, #4]
 8015f7a:	f000 fc2f 	bl	80167dc <USBD_StdEPReq>
 8015f7e:	4603      	mov	r3, r0
 8015f80:	73fb      	strb	r3, [r7, #15]
      break;
 8015f82:	e00c      	b.n	8015f9e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015f8a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015f8e:	b2db      	uxtb	r3, r3
 8015f90:	4619      	mov	r1, r3
 8015f92:	6878      	ldr	r0, [r7, #4]
 8015f94:	f004 fdd0 	bl	801ab38 <USBD_LL_StallEP>
 8015f98:	4603      	mov	r3, r0
 8015f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8015f9c:	bf00      	nop
  }

  return ret;
 8015f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015fa0:	4618      	mov	r0, r3
 8015fa2:	3710      	adds	r7, #16
 8015fa4:	46bd      	mov	sp, r7
 8015fa6:	bd80      	pop	{r7, pc}

08015fa8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015fa8:	b580      	push	{r7, lr}
 8015faa:	b086      	sub	sp, #24
 8015fac:	af00      	add	r7, sp, #0
 8015fae:	60f8      	str	r0, [r7, #12]
 8015fb0:	460b      	mov	r3, r1
 8015fb2:	607a      	str	r2, [r7, #4]
 8015fb4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8015fb6:	2300      	movs	r3, #0
 8015fb8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8015fba:	7afb      	ldrb	r3, [r7, #11]
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d16e      	bne.n	801609e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8015fc0:	68fb      	ldr	r3, [r7, #12]
 8015fc2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015fc6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015fc8:	68fb      	ldr	r3, [r7, #12]
 8015fca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015fce:	2b03      	cmp	r3, #3
 8015fd0:	f040 8098 	bne.w	8016104 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8015fd4:	693b      	ldr	r3, [r7, #16]
 8015fd6:	689a      	ldr	r2, [r3, #8]
 8015fd8:	693b      	ldr	r3, [r7, #16]
 8015fda:	68db      	ldr	r3, [r3, #12]
 8015fdc:	429a      	cmp	r2, r3
 8015fde:	d913      	bls.n	8016008 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8015fe0:	693b      	ldr	r3, [r7, #16]
 8015fe2:	689a      	ldr	r2, [r3, #8]
 8015fe4:	693b      	ldr	r3, [r7, #16]
 8015fe6:	68db      	ldr	r3, [r3, #12]
 8015fe8:	1ad2      	subs	r2, r2, r3
 8015fea:	693b      	ldr	r3, [r7, #16]
 8015fec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8015fee:	693b      	ldr	r3, [r7, #16]
 8015ff0:	68da      	ldr	r2, [r3, #12]
 8015ff2:	693b      	ldr	r3, [r7, #16]
 8015ff4:	689b      	ldr	r3, [r3, #8]
 8015ff6:	4293      	cmp	r3, r2
 8015ff8:	bf28      	it	cs
 8015ffa:	4613      	movcs	r3, r2
 8015ffc:	461a      	mov	r2, r3
 8015ffe:	6879      	ldr	r1, [r7, #4]
 8016000:	68f8      	ldr	r0, [r7, #12]
 8016002:	f001 f98a 	bl	801731a <USBD_CtlContinueRx>
 8016006:	e07d      	b.n	8016104 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8016008:	68fb      	ldr	r3, [r7, #12]
 801600a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801600e:	f003 031f 	and.w	r3, r3, #31
 8016012:	2b02      	cmp	r3, #2
 8016014:	d014      	beq.n	8016040 <USBD_LL_DataOutStage+0x98>
 8016016:	2b02      	cmp	r3, #2
 8016018:	d81d      	bhi.n	8016056 <USBD_LL_DataOutStage+0xae>
 801601a:	2b00      	cmp	r3, #0
 801601c:	d002      	beq.n	8016024 <USBD_LL_DataOutStage+0x7c>
 801601e:	2b01      	cmp	r3, #1
 8016020:	d003      	beq.n	801602a <USBD_LL_DataOutStage+0x82>
 8016022:	e018      	b.n	8016056 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8016024:	2300      	movs	r3, #0
 8016026:	75bb      	strb	r3, [r7, #22]
            break;
 8016028:	e018      	b.n	801605c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801602a:	68fb      	ldr	r3, [r7, #12]
 801602c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8016030:	b2db      	uxtb	r3, r3
 8016032:	4619      	mov	r1, r3
 8016034:	68f8      	ldr	r0, [r7, #12]
 8016036:	f000 fa64 	bl	8016502 <USBD_CoreFindIF>
 801603a:	4603      	mov	r3, r0
 801603c:	75bb      	strb	r3, [r7, #22]
            break;
 801603e:	e00d      	b.n	801605c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8016040:	68fb      	ldr	r3, [r7, #12]
 8016042:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8016046:	b2db      	uxtb	r3, r3
 8016048:	4619      	mov	r1, r3
 801604a:	68f8      	ldr	r0, [r7, #12]
 801604c:	f000 fa66 	bl	801651c <USBD_CoreFindEP>
 8016050:	4603      	mov	r3, r0
 8016052:	75bb      	strb	r3, [r7, #22]
            break;
 8016054:	e002      	b.n	801605c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8016056:	2300      	movs	r3, #0
 8016058:	75bb      	strb	r3, [r7, #22]
            break;
 801605a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 801605c:	7dbb      	ldrb	r3, [r7, #22]
 801605e:	2b00      	cmp	r3, #0
 8016060:	d119      	bne.n	8016096 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016068:	b2db      	uxtb	r3, r3
 801606a:	2b03      	cmp	r3, #3
 801606c:	d113      	bne.n	8016096 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801606e:	7dba      	ldrb	r2, [r7, #22]
 8016070:	68fb      	ldr	r3, [r7, #12]
 8016072:	32ae      	adds	r2, #174	; 0xae
 8016074:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016078:	691b      	ldr	r3, [r3, #16]
 801607a:	2b00      	cmp	r3, #0
 801607c:	d00b      	beq.n	8016096 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801607e:	7dba      	ldrb	r2, [r7, #22]
 8016080:	68fb      	ldr	r3, [r7, #12]
 8016082:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8016086:	7dba      	ldrb	r2, [r7, #22]
 8016088:	68fb      	ldr	r3, [r7, #12]
 801608a:	32ae      	adds	r2, #174	; 0xae
 801608c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016090:	691b      	ldr	r3, [r3, #16]
 8016092:	68f8      	ldr	r0, [r7, #12]
 8016094:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8016096:	68f8      	ldr	r0, [r7, #12]
 8016098:	f001 f950 	bl	801733c <USBD_CtlSendStatus>
 801609c:	e032      	b.n	8016104 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801609e:	7afb      	ldrb	r3, [r7, #11]
 80160a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80160a4:	b2db      	uxtb	r3, r3
 80160a6:	4619      	mov	r1, r3
 80160a8:	68f8      	ldr	r0, [r7, #12]
 80160aa:	f000 fa37 	bl	801651c <USBD_CoreFindEP>
 80160ae:	4603      	mov	r3, r0
 80160b0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80160b2:	7dbb      	ldrb	r3, [r7, #22]
 80160b4:	2bff      	cmp	r3, #255	; 0xff
 80160b6:	d025      	beq.n	8016104 <USBD_LL_DataOutStage+0x15c>
 80160b8:	7dbb      	ldrb	r3, [r7, #22]
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d122      	bne.n	8016104 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80160be:	68fb      	ldr	r3, [r7, #12]
 80160c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80160c4:	b2db      	uxtb	r3, r3
 80160c6:	2b03      	cmp	r3, #3
 80160c8:	d117      	bne.n	80160fa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80160ca:	7dba      	ldrb	r2, [r7, #22]
 80160cc:	68fb      	ldr	r3, [r7, #12]
 80160ce:	32ae      	adds	r2, #174	; 0xae
 80160d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160d4:	699b      	ldr	r3, [r3, #24]
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d00f      	beq.n	80160fa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80160da:	7dba      	ldrb	r2, [r7, #22]
 80160dc:	68fb      	ldr	r3, [r7, #12]
 80160de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80160e2:	7dba      	ldrb	r2, [r7, #22]
 80160e4:	68fb      	ldr	r3, [r7, #12]
 80160e6:	32ae      	adds	r2, #174	; 0xae
 80160e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160ec:	699b      	ldr	r3, [r3, #24]
 80160ee:	7afa      	ldrb	r2, [r7, #11]
 80160f0:	4611      	mov	r1, r2
 80160f2:	68f8      	ldr	r0, [r7, #12]
 80160f4:	4798      	blx	r3
 80160f6:	4603      	mov	r3, r0
 80160f8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80160fa:	7dfb      	ldrb	r3, [r7, #23]
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d001      	beq.n	8016104 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8016100:	7dfb      	ldrb	r3, [r7, #23]
 8016102:	e000      	b.n	8016106 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8016104:	2300      	movs	r3, #0
}
 8016106:	4618      	mov	r0, r3
 8016108:	3718      	adds	r7, #24
 801610a:	46bd      	mov	sp, r7
 801610c:	bd80      	pop	{r7, pc}

0801610e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801610e:	b580      	push	{r7, lr}
 8016110:	b086      	sub	sp, #24
 8016112:	af00      	add	r7, sp, #0
 8016114:	60f8      	str	r0, [r7, #12]
 8016116:	460b      	mov	r3, r1
 8016118:	607a      	str	r2, [r7, #4]
 801611a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 801611c:	7afb      	ldrb	r3, [r7, #11]
 801611e:	2b00      	cmp	r3, #0
 8016120:	d16f      	bne.n	8016202 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8016122:	68fb      	ldr	r3, [r7, #12]
 8016124:	3314      	adds	r3, #20
 8016126:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8016128:	68fb      	ldr	r3, [r7, #12]
 801612a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801612e:	2b02      	cmp	r3, #2
 8016130:	d15a      	bne.n	80161e8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8016132:	693b      	ldr	r3, [r7, #16]
 8016134:	689a      	ldr	r2, [r3, #8]
 8016136:	693b      	ldr	r3, [r7, #16]
 8016138:	68db      	ldr	r3, [r3, #12]
 801613a:	429a      	cmp	r2, r3
 801613c:	d914      	bls.n	8016168 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801613e:	693b      	ldr	r3, [r7, #16]
 8016140:	689a      	ldr	r2, [r3, #8]
 8016142:	693b      	ldr	r3, [r7, #16]
 8016144:	68db      	ldr	r3, [r3, #12]
 8016146:	1ad2      	subs	r2, r2, r3
 8016148:	693b      	ldr	r3, [r7, #16]
 801614a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801614c:	693b      	ldr	r3, [r7, #16]
 801614e:	689b      	ldr	r3, [r3, #8]
 8016150:	461a      	mov	r2, r3
 8016152:	6879      	ldr	r1, [r7, #4]
 8016154:	68f8      	ldr	r0, [r7, #12]
 8016156:	f001 f8b2 	bl	80172be <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801615a:	2300      	movs	r3, #0
 801615c:	2200      	movs	r2, #0
 801615e:	2100      	movs	r1, #0
 8016160:	68f8      	ldr	r0, [r7, #12]
 8016162:	f004 fd93 	bl	801ac8c <USBD_LL_PrepareReceive>
 8016166:	e03f      	b.n	80161e8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8016168:	693b      	ldr	r3, [r7, #16]
 801616a:	68da      	ldr	r2, [r3, #12]
 801616c:	693b      	ldr	r3, [r7, #16]
 801616e:	689b      	ldr	r3, [r3, #8]
 8016170:	429a      	cmp	r2, r3
 8016172:	d11c      	bne.n	80161ae <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8016174:	693b      	ldr	r3, [r7, #16]
 8016176:	685a      	ldr	r2, [r3, #4]
 8016178:	693b      	ldr	r3, [r7, #16]
 801617a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801617c:	429a      	cmp	r2, r3
 801617e:	d316      	bcc.n	80161ae <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8016180:	693b      	ldr	r3, [r7, #16]
 8016182:	685a      	ldr	r2, [r3, #4]
 8016184:	68fb      	ldr	r3, [r7, #12]
 8016186:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801618a:	429a      	cmp	r2, r3
 801618c:	d20f      	bcs.n	80161ae <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801618e:	2200      	movs	r2, #0
 8016190:	2100      	movs	r1, #0
 8016192:	68f8      	ldr	r0, [r7, #12]
 8016194:	f001 f893 	bl	80172be <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	2200      	movs	r2, #0
 801619c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80161a0:	2300      	movs	r3, #0
 80161a2:	2200      	movs	r2, #0
 80161a4:	2100      	movs	r1, #0
 80161a6:	68f8      	ldr	r0, [r7, #12]
 80161a8:	f004 fd70 	bl	801ac8c <USBD_LL_PrepareReceive>
 80161ac:	e01c      	b.n	80161e8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80161b4:	b2db      	uxtb	r3, r3
 80161b6:	2b03      	cmp	r3, #3
 80161b8:	d10f      	bne.n	80161da <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80161ba:	68fb      	ldr	r3, [r7, #12]
 80161bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80161c0:	68db      	ldr	r3, [r3, #12]
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	d009      	beq.n	80161da <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	2200      	movs	r2, #0
 80161ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80161ce:	68fb      	ldr	r3, [r7, #12]
 80161d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80161d4:	68db      	ldr	r3, [r3, #12]
 80161d6:	68f8      	ldr	r0, [r7, #12]
 80161d8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80161da:	2180      	movs	r1, #128	; 0x80
 80161dc:	68f8      	ldr	r0, [r7, #12]
 80161de:	f004 fcab 	bl	801ab38 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80161e2:	68f8      	ldr	r0, [r7, #12]
 80161e4:	f001 f8bd 	bl	8017362 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80161e8:	68fb      	ldr	r3, [r7, #12]
 80161ea:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	d03a      	beq.n	8016268 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80161f2:	68f8      	ldr	r0, [r7, #12]
 80161f4:	f7ff fe42 	bl	8015e7c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80161f8:	68fb      	ldr	r3, [r7, #12]
 80161fa:	2200      	movs	r2, #0
 80161fc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8016200:	e032      	b.n	8016268 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8016202:	7afb      	ldrb	r3, [r7, #11]
 8016204:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8016208:	b2db      	uxtb	r3, r3
 801620a:	4619      	mov	r1, r3
 801620c:	68f8      	ldr	r0, [r7, #12]
 801620e:	f000 f985 	bl	801651c <USBD_CoreFindEP>
 8016212:	4603      	mov	r3, r0
 8016214:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016216:	7dfb      	ldrb	r3, [r7, #23]
 8016218:	2bff      	cmp	r3, #255	; 0xff
 801621a:	d025      	beq.n	8016268 <USBD_LL_DataInStage+0x15a>
 801621c:	7dfb      	ldrb	r3, [r7, #23]
 801621e:	2b00      	cmp	r3, #0
 8016220:	d122      	bne.n	8016268 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016222:	68fb      	ldr	r3, [r7, #12]
 8016224:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016228:	b2db      	uxtb	r3, r3
 801622a:	2b03      	cmp	r3, #3
 801622c:	d11c      	bne.n	8016268 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801622e:	7dfa      	ldrb	r2, [r7, #23]
 8016230:	68fb      	ldr	r3, [r7, #12]
 8016232:	32ae      	adds	r2, #174	; 0xae
 8016234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016238:	695b      	ldr	r3, [r3, #20]
 801623a:	2b00      	cmp	r3, #0
 801623c:	d014      	beq.n	8016268 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801623e:	7dfa      	ldrb	r2, [r7, #23]
 8016240:	68fb      	ldr	r3, [r7, #12]
 8016242:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8016246:	7dfa      	ldrb	r2, [r7, #23]
 8016248:	68fb      	ldr	r3, [r7, #12]
 801624a:	32ae      	adds	r2, #174	; 0xae
 801624c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016250:	695b      	ldr	r3, [r3, #20]
 8016252:	7afa      	ldrb	r2, [r7, #11]
 8016254:	4611      	mov	r1, r2
 8016256:	68f8      	ldr	r0, [r7, #12]
 8016258:	4798      	blx	r3
 801625a:	4603      	mov	r3, r0
 801625c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801625e:	7dbb      	ldrb	r3, [r7, #22]
 8016260:	2b00      	cmp	r3, #0
 8016262:	d001      	beq.n	8016268 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8016264:	7dbb      	ldrb	r3, [r7, #22]
 8016266:	e000      	b.n	801626a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8016268:	2300      	movs	r3, #0
}
 801626a:	4618      	mov	r0, r3
 801626c:	3718      	adds	r7, #24
 801626e:	46bd      	mov	sp, r7
 8016270:	bd80      	pop	{r7, pc}

08016272 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8016272:	b580      	push	{r7, lr}
 8016274:	b084      	sub	sp, #16
 8016276:	af00      	add	r7, sp, #0
 8016278:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801627a:	2300      	movs	r3, #0
 801627c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	2201      	movs	r2, #1
 8016282:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	2200      	movs	r2, #0
 801628a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	2200      	movs	r2, #0
 8016292:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	2200      	movs	r2, #0
 8016298:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	2200      	movs	r2, #0
 80162a0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	d014      	beq.n	80162d8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80162b4:	685b      	ldr	r3, [r3, #4]
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d00e      	beq.n	80162d8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80162c0:	685b      	ldr	r3, [r3, #4]
 80162c2:	687a      	ldr	r2, [r7, #4]
 80162c4:	6852      	ldr	r2, [r2, #4]
 80162c6:	b2d2      	uxtb	r2, r2
 80162c8:	4611      	mov	r1, r2
 80162ca:	6878      	ldr	r0, [r7, #4]
 80162cc:	4798      	blx	r3
 80162ce:	4603      	mov	r3, r0
 80162d0:	2b00      	cmp	r3, #0
 80162d2:	d001      	beq.n	80162d8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80162d4:	2303      	movs	r3, #3
 80162d6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80162d8:	2340      	movs	r3, #64	; 0x40
 80162da:	2200      	movs	r2, #0
 80162dc:	2100      	movs	r1, #0
 80162de:	6878      	ldr	r0, [r7, #4]
 80162e0:	f004 fbe5 	bl	801aaae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	2201      	movs	r2, #1
 80162e8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	2240      	movs	r2, #64	; 0x40
 80162f0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80162f4:	2340      	movs	r3, #64	; 0x40
 80162f6:	2200      	movs	r2, #0
 80162f8:	2180      	movs	r1, #128	; 0x80
 80162fa:	6878      	ldr	r0, [r7, #4]
 80162fc:	f004 fbd7 	bl	801aaae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	2201      	movs	r2, #1
 8016304:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	2240      	movs	r2, #64	; 0x40
 801630a:	621a      	str	r2, [r3, #32]

  return ret;
 801630c:	7bfb      	ldrb	r3, [r7, #15]
}
 801630e:	4618      	mov	r0, r3
 8016310:	3710      	adds	r7, #16
 8016312:	46bd      	mov	sp, r7
 8016314:	bd80      	pop	{r7, pc}

08016316 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8016316:	b480      	push	{r7}
 8016318:	b083      	sub	sp, #12
 801631a:	af00      	add	r7, sp, #0
 801631c:	6078      	str	r0, [r7, #4]
 801631e:	460b      	mov	r3, r1
 8016320:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	78fa      	ldrb	r2, [r7, #3]
 8016326:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8016328:	2300      	movs	r3, #0
}
 801632a:	4618      	mov	r0, r3
 801632c:	370c      	adds	r7, #12
 801632e:	46bd      	mov	sp, r7
 8016330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016334:	4770      	bx	lr

08016336 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8016336:	b480      	push	{r7}
 8016338:	b083      	sub	sp, #12
 801633a:	af00      	add	r7, sp, #0
 801633c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016344:	b2db      	uxtb	r3, r3
 8016346:	2b04      	cmp	r3, #4
 8016348:	d006      	beq.n	8016358 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016350:	b2da      	uxtb	r2, r3
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	2204      	movs	r2, #4
 801635c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8016360:	2300      	movs	r3, #0
}
 8016362:	4618      	mov	r0, r3
 8016364:	370c      	adds	r7, #12
 8016366:	46bd      	mov	sp, r7
 8016368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801636c:	4770      	bx	lr

0801636e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801636e:	b480      	push	{r7}
 8016370:	b083      	sub	sp, #12
 8016372:	af00      	add	r7, sp, #0
 8016374:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801637c:	b2db      	uxtb	r3, r3
 801637e:	2b04      	cmp	r3, #4
 8016380:	d106      	bne.n	8016390 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8016388:	b2da      	uxtb	r2, r3
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8016390:	2300      	movs	r3, #0
}
 8016392:	4618      	mov	r0, r3
 8016394:	370c      	adds	r7, #12
 8016396:	46bd      	mov	sp, r7
 8016398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801639c:	4770      	bx	lr

0801639e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801639e:	b580      	push	{r7, lr}
 80163a0:	b082      	sub	sp, #8
 80163a2:	af00      	add	r7, sp, #0
 80163a4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80163ac:	b2db      	uxtb	r3, r3
 80163ae:	2b03      	cmp	r3, #3
 80163b0:	d110      	bne.n	80163d4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80163b8:	2b00      	cmp	r3, #0
 80163ba:	d00b      	beq.n	80163d4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80163c2:	69db      	ldr	r3, [r3, #28]
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d005      	beq.n	80163d4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80163ce:	69db      	ldr	r3, [r3, #28]
 80163d0:	6878      	ldr	r0, [r7, #4]
 80163d2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80163d4:	2300      	movs	r3, #0
}
 80163d6:	4618      	mov	r0, r3
 80163d8:	3708      	adds	r7, #8
 80163da:	46bd      	mov	sp, r7
 80163dc:	bd80      	pop	{r7, pc}

080163de <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80163de:	b580      	push	{r7, lr}
 80163e0:	b082      	sub	sp, #8
 80163e2:	af00      	add	r7, sp, #0
 80163e4:	6078      	str	r0, [r7, #4]
 80163e6:	460b      	mov	r3, r1
 80163e8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	32ae      	adds	r2, #174	; 0xae
 80163f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d101      	bne.n	8016400 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80163fc:	2303      	movs	r3, #3
 80163fe:	e01c      	b.n	801643a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016406:	b2db      	uxtb	r3, r3
 8016408:	2b03      	cmp	r3, #3
 801640a:	d115      	bne.n	8016438 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	32ae      	adds	r2, #174	; 0xae
 8016416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801641a:	6a1b      	ldr	r3, [r3, #32]
 801641c:	2b00      	cmp	r3, #0
 801641e:	d00b      	beq.n	8016438 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	32ae      	adds	r2, #174	; 0xae
 801642a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801642e:	6a1b      	ldr	r3, [r3, #32]
 8016430:	78fa      	ldrb	r2, [r7, #3]
 8016432:	4611      	mov	r1, r2
 8016434:	6878      	ldr	r0, [r7, #4]
 8016436:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016438:	2300      	movs	r3, #0
}
 801643a:	4618      	mov	r0, r3
 801643c:	3708      	adds	r7, #8
 801643e:	46bd      	mov	sp, r7
 8016440:	bd80      	pop	{r7, pc}

08016442 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8016442:	b580      	push	{r7, lr}
 8016444:	b082      	sub	sp, #8
 8016446:	af00      	add	r7, sp, #0
 8016448:	6078      	str	r0, [r7, #4]
 801644a:	460b      	mov	r3, r1
 801644c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801644e:	687b      	ldr	r3, [r7, #4]
 8016450:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	32ae      	adds	r2, #174	; 0xae
 8016458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801645c:	2b00      	cmp	r3, #0
 801645e:	d101      	bne.n	8016464 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8016460:	2303      	movs	r3, #3
 8016462:	e01c      	b.n	801649e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801646a:	b2db      	uxtb	r3, r3
 801646c:	2b03      	cmp	r3, #3
 801646e:	d115      	bne.n	801649c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	32ae      	adds	r2, #174	; 0xae
 801647a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801647e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016480:	2b00      	cmp	r3, #0
 8016482:	d00b      	beq.n	801649c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801648a:	687b      	ldr	r3, [r7, #4]
 801648c:	32ae      	adds	r2, #174	; 0xae
 801648e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016494:	78fa      	ldrb	r2, [r7, #3]
 8016496:	4611      	mov	r1, r2
 8016498:	6878      	ldr	r0, [r7, #4]
 801649a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801649c:	2300      	movs	r3, #0
}
 801649e:	4618      	mov	r0, r3
 80164a0:	3708      	adds	r7, #8
 80164a2:	46bd      	mov	sp, r7
 80164a4:	bd80      	pop	{r7, pc}

080164a6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80164a6:	b480      	push	{r7}
 80164a8:	b083      	sub	sp, #12
 80164aa:	af00      	add	r7, sp, #0
 80164ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80164ae:	2300      	movs	r3, #0
}
 80164b0:	4618      	mov	r0, r3
 80164b2:	370c      	adds	r7, #12
 80164b4:	46bd      	mov	sp, r7
 80164b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ba:	4770      	bx	lr

080164bc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80164bc:	b580      	push	{r7, lr}
 80164be:	b084      	sub	sp, #16
 80164c0:	af00      	add	r7, sp, #0
 80164c2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80164c4:	2300      	movs	r3, #0
 80164c6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	2201      	movs	r2, #1
 80164cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d00e      	beq.n	80164f8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80164e0:	685b      	ldr	r3, [r3, #4]
 80164e2:	687a      	ldr	r2, [r7, #4]
 80164e4:	6852      	ldr	r2, [r2, #4]
 80164e6:	b2d2      	uxtb	r2, r2
 80164e8:	4611      	mov	r1, r2
 80164ea:	6878      	ldr	r0, [r7, #4]
 80164ec:	4798      	blx	r3
 80164ee:	4603      	mov	r3, r0
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	d001      	beq.n	80164f8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80164f4:	2303      	movs	r3, #3
 80164f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80164f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80164fa:	4618      	mov	r0, r3
 80164fc:	3710      	adds	r7, #16
 80164fe:	46bd      	mov	sp, r7
 8016500:	bd80      	pop	{r7, pc}

08016502 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8016502:	b480      	push	{r7}
 8016504:	b083      	sub	sp, #12
 8016506:	af00      	add	r7, sp, #0
 8016508:	6078      	str	r0, [r7, #4]
 801650a:	460b      	mov	r3, r1
 801650c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801650e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8016510:	4618      	mov	r0, r3
 8016512:	370c      	adds	r7, #12
 8016514:	46bd      	mov	sp, r7
 8016516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801651a:	4770      	bx	lr

0801651c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801651c:	b480      	push	{r7}
 801651e:	b083      	sub	sp, #12
 8016520:	af00      	add	r7, sp, #0
 8016522:	6078      	str	r0, [r7, #4]
 8016524:	460b      	mov	r3, r1
 8016526:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8016528:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801652a:	4618      	mov	r0, r3
 801652c:	370c      	adds	r7, #12
 801652e:	46bd      	mov	sp, r7
 8016530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016534:	4770      	bx	lr

08016536 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8016536:	b580      	push	{r7, lr}
 8016538:	b086      	sub	sp, #24
 801653a:	af00      	add	r7, sp, #0
 801653c:	6078      	str	r0, [r7, #4]
 801653e:	460b      	mov	r3, r1
 8016540:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801654a:	2300      	movs	r3, #0
 801654c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801654e:	68fb      	ldr	r3, [r7, #12]
 8016550:	885b      	ldrh	r3, [r3, #2]
 8016552:	b29a      	uxth	r2, r3
 8016554:	68fb      	ldr	r3, [r7, #12]
 8016556:	781b      	ldrb	r3, [r3, #0]
 8016558:	b29b      	uxth	r3, r3
 801655a:	429a      	cmp	r2, r3
 801655c:	d920      	bls.n	80165a0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 801655e:	68fb      	ldr	r3, [r7, #12]
 8016560:	781b      	ldrb	r3, [r3, #0]
 8016562:	b29b      	uxth	r3, r3
 8016564:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8016566:	e013      	b.n	8016590 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8016568:	f107 030a 	add.w	r3, r7, #10
 801656c:	4619      	mov	r1, r3
 801656e:	6978      	ldr	r0, [r7, #20]
 8016570:	f000 f81b 	bl	80165aa <USBD_GetNextDesc>
 8016574:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8016576:	697b      	ldr	r3, [r7, #20]
 8016578:	785b      	ldrb	r3, [r3, #1]
 801657a:	2b05      	cmp	r3, #5
 801657c:	d108      	bne.n	8016590 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801657e:	697b      	ldr	r3, [r7, #20]
 8016580:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8016582:	693b      	ldr	r3, [r7, #16]
 8016584:	789b      	ldrb	r3, [r3, #2]
 8016586:	78fa      	ldrb	r2, [r7, #3]
 8016588:	429a      	cmp	r2, r3
 801658a:	d008      	beq.n	801659e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801658c:	2300      	movs	r3, #0
 801658e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8016590:	68fb      	ldr	r3, [r7, #12]
 8016592:	885b      	ldrh	r3, [r3, #2]
 8016594:	b29a      	uxth	r2, r3
 8016596:	897b      	ldrh	r3, [r7, #10]
 8016598:	429a      	cmp	r2, r3
 801659a:	d8e5      	bhi.n	8016568 <USBD_GetEpDesc+0x32>
 801659c:	e000      	b.n	80165a0 <USBD_GetEpDesc+0x6a>
          break;
 801659e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80165a0:	693b      	ldr	r3, [r7, #16]
}
 80165a2:	4618      	mov	r0, r3
 80165a4:	3718      	adds	r7, #24
 80165a6:	46bd      	mov	sp, r7
 80165a8:	bd80      	pop	{r7, pc}

080165aa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80165aa:	b480      	push	{r7}
 80165ac:	b085      	sub	sp, #20
 80165ae:	af00      	add	r7, sp, #0
 80165b0:	6078      	str	r0, [r7, #4]
 80165b2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80165b8:	683b      	ldr	r3, [r7, #0]
 80165ba:	881a      	ldrh	r2, [r3, #0]
 80165bc:	68fb      	ldr	r3, [r7, #12]
 80165be:	781b      	ldrb	r3, [r3, #0]
 80165c0:	b29b      	uxth	r3, r3
 80165c2:	4413      	add	r3, r2
 80165c4:	b29a      	uxth	r2, r3
 80165c6:	683b      	ldr	r3, [r7, #0]
 80165c8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80165ca:	68fb      	ldr	r3, [r7, #12]
 80165cc:	781b      	ldrb	r3, [r3, #0]
 80165ce:	461a      	mov	r2, r3
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	4413      	add	r3, r2
 80165d4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80165d6:	68fb      	ldr	r3, [r7, #12]
}
 80165d8:	4618      	mov	r0, r3
 80165da:	3714      	adds	r7, #20
 80165dc:	46bd      	mov	sp, r7
 80165de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165e2:	4770      	bx	lr

080165e4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80165e4:	b480      	push	{r7}
 80165e6:	b087      	sub	sp, #28
 80165e8:	af00      	add	r7, sp, #0
 80165ea:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80165f0:	697b      	ldr	r3, [r7, #20]
 80165f2:	781b      	ldrb	r3, [r3, #0]
 80165f4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80165f6:	697b      	ldr	r3, [r7, #20]
 80165f8:	3301      	adds	r3, #1
 80165fa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80165fc:	697b      	ldr	r3, [r7, #20]
 80165fe:	781b      	ldrb	r3, [r3, #0]
 8016600:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8016602:	8a3b      	ldrh	r3, [r7, #16]
 8016604:	021b      	lsls	r3, r3, #8
 8016606:	b21a      	sxth	r2, r3
 8016608:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801660c:	4313      	orrs	r3, r2
 801660e:	b21b      	sxth	r3, r3
 8016610:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8016612:	89fb      	ldrh	r3, [r7, #14]
}
 8016614:	4618      	mov	r0, r3
 8016616:	371c      	adds	r7, #28
 8016618:	46bd      	mov	sp, r7
 801661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801661e:	4770      	bx	lr

08016620 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016620:	b580      	push	{r7, lr}
 8016622:	b084      	sub	sp, #16
 8016624:	af00      	add	r7, sp, #0
 8016626:	6078      	str	r0, [r7, #4]
 8016628:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801662a:	2300      	movs	r3, #0
 801662c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801662e:	683b      	ldr	r3, [r7, #0]
 8016630:	781b      	ldrb	r3, [r3, #0]
 8016632:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016636:	2b40      	cmp	r3, #64	; 0x40
 8016638:	d005      	beq.n	8016646 <USBD_StdDevReq+0x26>
 801663a:	2b40      	cmp	r3, #64	; 0x40
 801663c:	d857      	bhi.n	80166ee <USBD_StdDevReq+0xce>
 801663e:	2b00      	cmp	r3, #0
 8016640:	d00f      	beq.n	8016662 <USBD_StdDevReq+0x42>
 8016642:	2b20      	cmp	r3, #32
 8016644:	d153      	bne.n	80166ee <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	32ae      	adds	r2, #174	; 0xae
 8016650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016654:	689b      	ldr	r3, [r3, #8]
 8016656:	6839      	ldr	r1, [r7, #0]
 8016658:	6878      	ldr	r0, [r7, #4]
 801665a:	4798      	blx	r3
 801665c:	4603      	mov	r3, r0
 801665e:	73fb      	strb	r3, [r7, #15]
      break;
 8016660:	e04a      	b.n	80166f8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016662:	683b      	ldr	r3, [r7, #0]
 8016664:	785b      	ldrb	r3, [r3, #1]
 8016666:	2b09      	cmp	r3, #9
 8016668:	d83b      	bhi.n	80166e2 <USBD_StdDevReq+0xc2>
 801666a:	a201      	add	r2, pc, #4	; (adr r2, 8016670 <USBD_StdDevReq+0x50>)
 801666c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016670:	080166c5 	.word	0x080166c5
 8016674:	080166d9 	.word	0x080166d9
 8016678:	080166e3 	.word	0x080166e3
 801667c:	080166cf 	.word	0x080166cf
 8016680:	080166e3 	.word	0x080166e3
 8016684:	080166a3 	.word	0x080166a3
 8016688:	08016699 	.word	0x08016699
 801668c:	080166e3 	.word	0x080166e3
 8016690:	080166bb 	.word	0x080166bb
 8016694:	080166ad 	.word	0x080166ad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8016698:	6839      	ldr	r1, [r7, #0]
 801669a:	6878      	ldr	r0, [r7, #4]
 801669c:	f000 fa3c 	bl	8016b18 <USBD_GetDescriptor>
          break;
 80166a0:	e024      	b.n	80166ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80166a2:	6839      	ldr	r1, [r7, #0]
 80166a4:	6878      	ldr	r0, [r7, #4]
 80166a6:	f000 fba1 	bl	8016dec <USBD_SetAddress>
          break;
 80166aa:	e01f      	b.n	80166ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80166ac:	6839      	ldr	r1, [r7, #0]
 80166ae:	6878      	ldr	r0, [r7, #4]
 80166b0:	f000 fbe0 	bl	8016e74 <USBD_SetConfig>
 80166b4:	4603      	mov	r3, r0
 80166b6:	73fb      	strb	r3, [r7, #15]
          break;
 80166b8:	e018      	b.n	80166ec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80166ba:	6839      	ldr	r1, [r7, #0]
 80166bc:	6878      	ldr	r0, [r7, #4]
 80166be:	f000 fc83 	bl	8016fc8 <USBD_GetConfig>
          break;
 80166c2:	e013      	b.n	80166ec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80166c4:	6839      	ldr	r1, [r7, #0]
 80166c6:	6878      	ldr	r0, [r7, #4]
 80166c8:	f000 fcb4 	bl	8017034 <USBD_GetStatus>
          break;
 80166cc:	e00e      	b.n	80166ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80166ce:	6839      	ldr	r1, [r7, #0]
 80166d0:	6878      	ldr	r0, [r7, #4]
 80166d2:	f000 fce3 	bl	801709c <USBD_SetFeature>
          break;
 80166d6:	e009      	b.n	80166ec <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80166d8:	6839      	ldr	r1, [r7, #0]
 80166da:	6878      	ldr	r0, [r7, #4]
 80166dc:	f000 fd07 	bl	80170ee <USBD_ClrFeature>
          break;
 80166e0:	e004      	b.n	80166ec <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80166e2:	6839      	ldr	r1, [r7, #0]
 80166e4:	6878      	ldr	r0, [r7, #4]
 80166e6:	f000 fd5e 	bl	80171a6 <USBD_CtlError>
          break;
 80166ea:	bf00      	nop
      }
      break;
 80166ec:	e004      	b.n	80166f8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80166ee:	6839      	ldr	r1, [r7, #0]
 80166f0:	6878      	ldr	r0, [r7, #4]
 80166f2:	f000 fd58 	bl	80171a6 <USBD_CtlError>
      break;
 80166f6:	bf00      	nop
  }

  return ret;
 80166f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80166fa:	4618      	mov	r0, r3
 80166fc:	3710      	adds	r7, #16
 80166fe:	46bd      	mov	sp, r7
 8016700:	bd80      	pop	{r7, pc}
 8016702:	bf00      	nop

08016704 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016704:	b580      	push	{r7, lr}
 8016706:	b084      	sub	sp, #16
 8016708:	af00      	add	r7, sp, #0
 801670a:	6078      	str	r0, [r7, #4]
 801670c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801670e:	2300      	movs	r3, #0
 8016710:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016712:	683b      	ldr	r3, [r7, #0]
 8016714:	781b      	ldrb	r3, [r3, #0]
 8016716:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801671a:	2b40      	cmp	r3, #64	; 0x40
 801671c:	d005      	beq.n	801672a <USBD_StdItfReq+0x26>
 801671e:	2b40      	cmp	r3, #64	; 0x40
 8016720:	d852      	bhi.n	80167c8 <USBD_StdItfReq+0xc4>
 8016722:	2b00      	cmp	r3, #0
 8016724:	d001      	beq.n	801672a <USBD_StdItfReq+0x26>
 8016726:	2b20      	cmp	r3, #32
 8016728:	d14e      	bne.n	80167c8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016730:	b2db      	uxtb	r3, r3
 8016732:	3b01      	subs	r3, #1
 8016734:	2b02      	cmp	r3, #2
 8016736:	d840      	bhi.n	80167ba <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8016738:	683b      	ldr	r3, [r7, #0]
 801673a:	889b      	ldrh	r3, [r3, #4]
 801673c:	b2db      	uxtb	r3, r3
 801673e:	2b01      	cmp	r3, #1
 8016740:	d836      	bhi.n	80167b0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8016742:	683b      	ldr	r3, [r7, #0]
 8016744:	889b      	ldrh	r3, [r3, #4]
 8016746:	b2db      	uxtb	r3, r3
 8016748:	4619      	mov	r1, r3
 801674a:	6878      	ldr	r0, [r7, #4]
 801674c:	f7ff fed9 	bl	8016502 <USBD_CoreFindIF>
 8016750:	4603      	mov	r3, r0
 8016752:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016754:	7bbb      	ldrb	r3, [r7, #14]
 8016756:	2bff      	cmp	r3, #255	; 0xff
 8016758:	d01d      	beq.n	8016796 <USBD_StdItfReq+0x92>
 801675a:	7bbb      	ldrb	r3, [r7, #14]
 801675c:	2b00      	cmp	r3, #0
 801675e:	d11a      	bne.n	8016796 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8016760:	7bba      	ldrb	r2, [r7, #14]
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	32ae      	adds	r2, #174	; 0xae
 8016766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801676a:	689b      	ldr	r3, [r3, #8]
 801676c:	2b00      	cmp	r3, #0
 801676e:	d00f      	beq.n	8016790 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8016770:	7bba      	ldrb	r2, [r7, #14]
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016778:	7bba      	ldrb	r2, [r7, #14]
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	32ae      	adds	r2, #174	; 0xae
 801677e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016782:	689b      	ldr	r3, [r3, #8]
 8016784:	6839      	ldr	r1, [r7, #0]
 8016786:	6878      	ldr	r0, [r7, #4]
 8016788:	4798      	blx	r3
 801678a:	4603      	mov	r3, r0
 801678c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801678e:	e004      	b.n	801679a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8016790:	2303      	movs	r3, #3
 8016792:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016794:	e001      	b.n	801679a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8016796:	2303      	movs	r3, #3
 8016798:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801679a:	683b      	ldr	r3, [r7, #0]
 801679c:	88db      	ldrh	r3, [r3, #6]
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d110      	bne.n	80167c4 <USBD_StdItfReq+0xc0>
 80167a2:	7bfb      	ldrb	r3, [r7, #15]
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d10d      	bne.n	80167c4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80167a8:	6878      	ldr	r0, [r7, #4]
 80167aa:	f000 fdc7 	bl	801733c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80167ae:	e009      	b.n	80167c4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80167b0:	6839      	ldr	r1, [r7, #0]
 80167b2:	6878      	ldr	r0, [r7, #4]
 80167b4:	f000 fcf7 	bl	80171a6 <USBD_CtlError>
          break;
 80167b8:	e004      	b.n	80167c4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80167ba:	6839      	ldr	r1, [r7, #0]
 80167bc:	6878      	ldr	r0, [r7, #4]
 80167be:	f000 fcf2 	bl	80171a6 <USBD_CtlError>
          break;
 80167c2:	e000      	b.n	80167c6 <USBD_StdItfReq+0xc2>
          break;
 80167c4:	bf00      	nop
      }
      break;
 80167c6:	e004      	b.n	80167d2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80167c8:	6839      	ldr	r1, [r7, #0]
 80167ca:	6878      	ldr	r0, [r7, #4]
 80167cc:	f000 fceb 	bl	80171a6 <USBD_CtlError>
      break;
 80167d0:	bf00      	nop
  }

  return ret;
 80167d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80167d4:	4618      	mov	r0, r3
 80167d6:	3710      	adds	r7, #16
 80167d8:	46bd      	mov	sp, r7
 80167da:	bd80      	pop	{r7, pc}

080167dc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80167dc:	b580      	push	{r7, lr}
 80167de:	b084      	sub	sp, #16
 80167e0:	af00      	add	r7, sp, #0
 80167e2:	6078      	str	r0, [r7, #4]
 80167e4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80167e6:	2300      	movs	r3, #0
 80167e8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80167ea:	683b      	ldr	r3, [r7, #0]
 80167ec:	889b      	ldrh	r3, [r3, #4]
 80167ee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80167f0:	683b      	ldr	r3, [r7, #0]
 80167f2:	781b      	ldrb	r3, [r3, #0]
 80167f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80167f8:	2b40      	cmp	r3, #64	; 0x40
 80167fa:	d007      	beq.n	801680c <USBD_StdEPReq+0x30>
 80167fc:	2b40      	cmp	r3, #64	; 0x40
 80167fe:	f200 817f 	bhi.w	8016b00 <USBD_StdEPReq+0x324>
 8016802:	2b00      	cmp	r3, #0
 8016804:	d02a      	beq.n	801685c <USBD_StdEPReq+0x80>
 8016806:	2b20      	cmp	r3, #32
 8016808:	f040 817a 	bne.w	8016b00 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801680c:	7bbb      	ldrb	r3, [r7, #14]
 801680e:	4619      	mov	r1, r3
 8016810:	6878      	ldr	r0, [r7, #4]
 8016812:	f7ff fe83 	bl	801651c <USBD_CoreFindEP>
 8016816:	4603      	mov	r3, r0
 8016818:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801681a:	7b7b      	ldrb	r3, [r7, #13]
 801681c:	2bff      	cmp	r3, #255	; 0xff
 801681e:	f000 8174 	beq.w	8016b0a <USBD_StdEPReq+0x32e>
 8016822:	7b7b      	ldrb	r3, [r7, #13]
 8016824:	2b00      	cmp	r3, #0
 8016826:	f040 8170 	bne.w	8016b0a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801682a:	7b7a      	ldrb	r2, [r7, #13]
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8016832:	7b7a      	ldrb	r2, [r7, #13]
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	32ae      	adds	r2, #174	; 0xae
 8016838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801683c:	689b      	ldr	r3, [r3, #8]
 801683e:	2b00      	cmp	r3, #0
 8016840:	f000 8163 	beq.w	8016b0a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8016844:	7b7a      	ldrb	r2, [r7, #13]
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	32ae      	adds	r2, #174	; 0xae
 801684a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801684e:	689b      	ldr	r3, [r3, #8]
 8016850:	6839      	ldr	r1, [r7, #0]
 8016852:	6878      	ldr	r0, [r7, #4]
 8016854:	4798      	blx	r3
 8016856:	4603      	mov	r3, r0
 8016858:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801685a:	e156      	b.n	8016b0a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801685c:	683b      	ldr	r3, [r7, #0]
 801685e:	785b      	ldrb	r3, [r3, #1]
 8016860:	2b03      	cmp	r3, #3
 8016862:	d008      	beq.n	8016876 <USBD_StdEPReq+0x9a>
 8016864:	2b03      	cmp	r3, #3
 8016866:	f300 8145 	bgt.w	8016af4 <USBD_StdEPReq+0x318>
 801686a:	2b00      	cmp	r3, #0
 801686c:	f000 809b 	beq.w	80169a6 <USBD_StdEPReq+0x1ca>
 8016870:	2b01      	cmp	r3, #1
 8016872:	d03c      	beq.n	80168ee <USBD_StdEPReq+0x112>
 8016874:	e13e      	b.n	8016af4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801687c:	b2db      	uxtb	r3, r3
 801687e:	2b02      	cmp	r3, #2
 8016880:	d002      	beq.n	8016888 <USBD_StdEPReq+0xac>
 8016882:	2b03      	cmp	r3, #3
 8016884:	d016      	beq.n	80168b4 <USBD_StdEPReq+0xd8>
 8016886:	e02c      	b.n	80168e2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016888:	7bbb      	ldrb	r3, [r7, #14]
 801688a:	2b00      	cmp	r3, #0
 801688c:	d00d      	beq.n	80168aa <USBD_StdEPReq+0xce>
 801688e:	7bbb      	ldrb	r3, [r7, #14]
 8016890:	2b80      	cmp	r3, #128	; 0x80
 8016892:	d00a      	beq.n	80168aa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016894:	7bbb      	ldrb	r3, [r7, #14]
 8016896:	4619      	mov	r1, r3
 8016898:	6878      	ldr	r0, [r7, #4]
 801689a:	f004 f94d 	bl	801ab38 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801689e:	2180      	movs	r1, #128	; 0x80
 80168a0:	6878      	ldr	r0, [r7, #4]
 80168a2:	f004 f949 	bl	801ab38 <USBD_LL_StallEP>
 80168a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80168a8:	e020      	b.n	80168ec <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80168aa:	6839      	ldr	r1, [r7, #0]
 80168ac:	6878      	ldr	r0, [r7, #4]
 80168ae:	f000 fc7a 	bl	80171a6 <USBD_CtlError>
              break;
 80168b2:	e01b      	b.n	80168ec <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80168b4:	683b      	ldr	r3, [r7, #0]
 80168b6:	885b      	ldrh	r3, [r3, #2]
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d10e      	bne.n	80168da <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80168bc:	7bbb      	ldrb	r3, [r7, #14]
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d00b      	beq.n	80168da <USBD_StdEPReq+0xfe>
 80168c2:	7bbb      	ldrb	r3, [r7, #14]
 80168c4:	2b80      	cmp	r3, #128	; 0x80
 80168c6:	d008      	beq.n	80168da <USBD_StdEPReq+0xfe>
 80168c8:	683b      	ldr	r3, [r7, #0]
 80168ca:	88db      	ldrh	r3, [r3, #6]
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d104      	bne.n	80168da <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80168d0:	7bbb      	ldrb	r3, [r7, #14]
 80168d2:	4619      	mov	r1, r3
 80168d4:	6878      	ldr	r0, [r7, #4]
 80168d6:	f004 f92f 	bl	801ab38 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80168da:	6878      	ldr	r0, [r7, #4]
 80168dc:	f000 fd2e 	bl	801733c <USBD_CtlSendStatus>

              break;
 80168e0:	e004      	b.n	80168ec <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80168e2:	6839      	ldr	r1, [r7, #0]
 80168e4:	6878      	ldr	r0, [r7, #4]
 80168e6:	f000 fc5e 	bl	80171a6 <USBD_CtlError>
              break;
 80168ea:	bf00      	nop
          }
          break;
 80168ec:	e107      	b.n	8016afe <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80168f4:	b2db      	uxtb	r3, r3
 80168f6:	2b02      	cmp	r3, #2
 80168f8:	d002      	beq.n	8016900 <USBD_StdEPReq+0x124>
 80168fa:	2b03      	cmp	r3, #3
 80168fc:	d016      	beq.n	801692c <USBD_StdEPReq+0x150>
 80168fe:	e04b      	b.n	8016998 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016900:	7bbb      	ldrb	r3, [r7, #14]
 8016902:	2b00      	cmp	r3, #0
 8016904:	d00d      	beq.n	8016922 <USBD_StdEPReq+0x146>
 8016906:	7bbb      	ldrb	r3, [r7, #14]
 8016908:	2b80      	cmp	r3, #128	; 0x80
 801690a:	d00a      	beq.n	8016922 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801690c:	7bbb      	ldrb	r3, [r7, #14]
 801690e:	4619      	mov	r1, r3
 8016910:	6878      	ldr	r0, [r7, #4]
 8016912:	f004 f911 	bl	801ab38 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016916:	2180      	movs	r1, #128	; 0x80
 8016918:	6878      	ldr	r0, [r7, #4]
 801691a:	f004 f90d 	bl	801ab38 <USBD_LL_StallEP>
 801691e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016920:	e040      	b.n	80169a4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8016922:	6839      	ldr	r1, [r7, #0]
 8016924:	6878      	ldr	r0, [r7, #4]
 8016926:	f000 fc3e 	bl	80171a6 <USBD_CtlError>
              break;
 801692a:	e03b      	b.n	80169a4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801692c:	683b      	ldr	r3, [r7, #0]
 801692e:	885b      	ldrh	r3, [r3, #2]
 8016930:	2b00      	cmp	r3, #0
 8016932:	d136      	bne.n	80169a2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8016934:	7bbb      	ldrb	r3, [r7, #14]
 8016936:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801693a:	2b00      	cmp	r3, #0
 801693c:	d004      	beq.n	8016948 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801693e:	7bbb      	ldrb	r3, [r7, #14]
 8016940:	4619      	mov	r1, r3
 8016942:	6878      	ldr	r0, [r7, #4]
 8016944:	f004 f917 	bl	801ab76 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8016948:	6878      	ldr	r0, [r7, #4]
 801694a:	f000 fcf7 	bl	801733c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801694e:	7bbb      	ldrb	r3, [r7, #14]
 8016950:	4619      	mov	r1, r3
 8016952:	6878      	ldr	r0, [r7, #4]
 8016954:	f7ff fde2 	bl	801651c <USBD_CoreFindEP>
 8016958:	4603      	mov	r3, r0
 801695a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801695c:	7b7b      	ldrb	r3, [r7, #13]
 801695e:	2bff      	cmp	r3, #255	; 0xff
 8016960:	d01f      	beq.n	80169a2 <USBD_StdEPReq+0x1c6>
 8016962:	7b7b      	ldrb	r3, [r7, #13]
 8016964:	2b00      	cmp	r3, #0
 8016966:	d11c      	bne.n	80169a2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8016968:	7b7a      	ldrb	r2, [r7, #13]
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8016970:	7b7a      	ldrb	r2, [r7, #13]
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	32ae      	adds	r2, #174	; 0xae
 8016976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801697a:	689b      	ldr	r3, [r3, #8]
 801697c:	2b00      	cmp	r3, #0
 801697e:	d010      	beq.n	80169a2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016980:	7b7a      	ldrb	r2, [r7, #13]
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	32ae      	adds	r2, #174	; 0xae
 8016986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801698a:	689b      	ldr	r3, [r3, #8]
 801698c:	6839      	ldr	r1, [r7, #0]
 801698e:	6878      	ldr	r0, [r7, #4]
 8016990:	4798      	blx	r3
 8016992:	4603      	mov	r3, r0
 8016994:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8016996:	e004      	b.n	80169a2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8016998:	6839      	ldr	r1, [r7, #0]
 801699a:	6878      	ldr	r0, [r7, #4]
 801699c:	f000 fc03 	bl	80171a6 <USBD_CtlError>
              break;
 80169a0:	e000      	b.n	80169a4 <USBD_StdEPReq+0x1c8>
              break;
 80169a2:	bf00      	nop
          }
          break;
 80169a4:	e0ab      	b.n	8016afe <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80169ac:	b2db      	uxtb	r3, r3
 80169ae:	2b02      	cmp	r3, #2
 80169b0:	d002      	beq.n	80169b8 <USBD_StdEPReq+0x1dc>
 80169b2:	2b03      	cmp	r3, #3
 80169b4:	d032      	beq.n	8016a1c <USBD_StdEPReq+0x240>
 80169b6:	e097      	b.n	8016ae8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80169b8:	7bbb      	ldrb	r3, [r7, #14]
 80169ba:	2b00      	cmp	r3, #0
 80169bc:	d007      	beq.n	80169ce <USBD_StdEPReq+0x1f2>
 80169be:	7bbb      	ldrb	r3, [r7, #14]
 80169c0:	2b80      	cmp	r3, #128	; 0x80
 80169c2:	d004      	beq.n	80169ce <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80169c4:	6839      	ldr	r1, [r7, #0]
 80169c6:	6878      	ldr	r0, [r7, #4]
 80169c8:	f000 fbed 	bl	80171a6 <USBD_CtlError>
                break;
 80169cc:	e091      	b.n	8016af2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80169ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	da0b      	bge.n	80169ee <USBD_StdEPReq+0x212>
 80169d6:	7bbb      	ldrb	r3, [r7, #14]
 80169d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80169dc:	4613      	mov	r3, r2
 80169de:	009b      	lsls	r3, r3, #2
 80169e0:	4413      	add	r3, r2
 80169e2:	009b      	lsls	r3, r3, #2
 80169e4:	3310      	adds	r3, #16
 80169e6:	687a      	ldr	r2, [r7, #4]
 80169e8:	4413      	add	r3, r2
 80169ea:	3304      	adds	r3, #4
 80169ec:	e00b      	b.n	8016a06 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80169ee:	7bbb      	ldrb	r3, [r7, #14]
 80169f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80169f4:	4613      	mov	r3, r2
 80169f6:	009b      	lsls	r3, r3, #2
 80169f8:	4413      	add	r3, r2
 80169fa:	009b      	lsls	r3, r3, #2
 80169fc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016a00:	687a      	ldr	r2, [r7, #4]
 8016a02:	4413      	add	r3, r2
 8016a04:	3304      	adds	r3, #4
 8016a06:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8016a08:	68bb      	ldr	r3, [r7, #8]
 8016a0a:	2200      	movs	r2, #0
 8016a0c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016a0e:	68bb      	ldr	r3, [r7, #8]
 8016a10:	2202      	movs	r2, #2
 8016a12:	4619      	mov	r1, r3
 8016a14:	6878      	ldr	r0, [r7, #4]
 8016a16:	f000 fc37 	bl	8017288 <USBD_CtlSendData>
              break;
 8016a1a:	e06a      	b.n	8016af2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8016a1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016a20:	2b00      	cmp	r3, #0
 8016a22:	da11      	bge.n	8016a48 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016a24:	7bbb      	ldrb	r3, [r7, #14]
 8016a26:	f003 020f 	and.w	r2, r3, #15
 8016a2a:	6879      	ldr	r1, [r7, #4]
 8016a2c:	4613      	mov	r3, r2
 8016a2e:	009b      	lsls	r3, r3, #2
 8016a30:	4413      	add	r3, r2
 8016a32:	009b      	lsls	r3, r3, #2
 8016a34:	440b      	add	r3, r1
 8016a36:	3324      	adds	r3, #36	; 0x24
 8016a38:	881b      	ldrh	r3, [r3, #0]
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	d117      	bne.n	8016a6e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016a3e:	6839      	ldr	r1, [r7, #0]
 8016a40:	6878      	ldr	r0, [r7, #4]
 8016a42:	f000 fbb0 	bl	80171a6 <USBD_CtlError>
                  break;
 8016a46:	e054      	b.n	8016af2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8016a48:	7bbb      	ldrb	r3, [r7, #14]
 8016a4a:	f003 020f 	and.w	r2, r3, #15
 8016a4e:	6879      	ldr	r1, [r7, #4]
 8016a50:	4613      	mov	r3, r2
 8016a52:	009b      	lsls	r3, r3, #2
 8016a54:	4413      	add	r3, r2
 8016a56:	009b      	lsls	r3, r3, #2
 8016a58:	440b      	add	r3, r1
 8016a5a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8016a5e:	881b      	ldrh	r3, [r3, #0]
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	d104      	bne.n	8016a6e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016a64:	6839      	ldr	r1, [r7, #0]
 8016a66:	6878      	ldr	r0, [r7, #4]
 8016a68:	f000 fb9d 	bl	80171a6 <USBD_CtlError>
                  break;
 8016a6c:	e041      	b.n	8016af2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016a6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	da0b      	bge.n	8016a8e <USBD_StdEPReq+0x2b2>
 8016a76:	7bbb      	ldrb	r3, [r7, #14]
 8016a78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016a7c:	4613      	mov	r3, r2
 8016a7e:	009b      	lsls	r3, r3, #2
 8016a80:	4413      	add	r3, r2
 8016a82:	009b      	lsls	r3, r3, #2
 8016a84:	3310      	adds	r3, #16
 8016a86:	687a      	ldr	r2, [r7, #4]
 8016a88:	4413      	add	r3, r2
 8016a8a:	3304      	adds	r3, #4
 8016a8c:	e00b      	b.n	8016aa6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016a8e:	7bbb      	ldrb	r3, [r7, #14]
 8016a90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016a94:	4613      	mov	r3, r2
 8016a96:	009b      	lsls	r3, r3, #2
 8016a98:	4413      	add	r3, r2
 8016a9a:	009b      	lsls	r3, r3, #2
 8016a9c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016aa0:	687a      	ldr	r2, [r7, #4]
 8016aa2:	4413      	add	r3, r2
 8016aa4:	3304      	adds	r3, #4
 8016aa6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8016aa8:	7bbb      	ldrb	r3, [r7, #14]
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d002      	beq.n	8016ab4 <USBD_StdEPReq+0x2d8>
 8016aae:	7bbb      	ldrb	r3, [r7, #14]
 8016ab0:	2b80      	cmp	r3, #128	; 0x80
 8016ab2:	d103      	bne.n	8016abc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8016ab4:	68bb      	ldr	r3, [r7, #8]
 8016ab6:	2200      	movs	r2, #0
 8016ab8:	601a      	str	r2, [r3, #0]
 8016aba:	e00e      	b.n	8016ada <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8016abc:	7bbb      	ldrb	r3, [r7, #14]
 8016abe:	4619      	mov	r1, r3
 8016ac0:	6878      	ldr	r0, [r7, #4]
 8016ac2:	f004 f877 	bl	801abb4 <USBD_LL_IsStallEP>
 8016ac6:	4603      	mov	r3, r0
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d003      	beq.n	8016ad4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8016acc:	68bb      	ldr	r3, [r7, #8]
 8016ace:	2201      	movs	r2, #1
 8016ad0:	601a      	str	r2, [r3, #0]
 8016ad2:	e002      	b.n	8016ada <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8016ad4:	68bb      	ldr	r3, [r7, #8]
 8016ad6:	2200      	movs	r2, #0
 8016ad8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016ada:	68bb      	ldr	r3, [r7, #8]
 8016adc:	2202      	movs	r2, #2
 8016ade:	4619      	mov	r1, r3
 8016ae0:	6878      	ldr	r0, [r7, #4]
 8016ae2:	f000 fbd1 	bl	8017288 <USBD_CtlSendData>
              break;
 8016ae6:	e004      	b.n	8016af2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8016ae8:	6839      	ldr	r1, [r7, #0]
 8016aea:	6878      	ldr	r0, [r7, #4]
 8016aec:	f000 fb5b 	bl	80171a6 <USBD_CtlError>
              break;
 8016af0:	bf00      	nop
          }
          break;
 8016af2:	e004      	b.n	8016afe <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8016af4:	6839      	ldr	r1, [r7, #0]
 8016af6:	6878      	ldr	r0, [r7, #4]
 8016af8:	f000 fb55 	bl	80171a6 <USBD_CtlError>
          break;
 8016afc:	bf00      	nop
      }
      break;
 8016afe:	e005      	b.n	8016b0c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8016b00:	6839      	ldr	r1, [r7, #0]
 8016b02:	6878      	ldr	r0, [r7, #4]
 8016b04:	f000 fb4f 	bl	80171a6 <USBD_CtlError>
      break;
 8016b08:	e000      	b.n	8016b0c <USBD_StdEPReq+0x330>
      break;
 8016b0a:	bf00      	nop
  }

  return ret;
 8016b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b0e:	4618      	mov	r0, r3
 8016b10:	3710      	adds	r7, #16
 8016b12:	46bd      	mov	sp, r7
 8016b14:	bd80      	pop	{r7, pc}
	...

08016b18 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016b18:	b580      	push	{r7, lr}
 8016b1a:	b084      	sub	sp, #16
 8016b1c:	af00      	add	r7, sp, #0
 8016b1e:	6078      	str	r0, [r7, #4]
 8016b20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016b22:	2300      	movs	r3, #0
 8016b24:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8016b26:	2300      	movs	r3, #0
 8016b28:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8016b2a:	2300      	movs	r3, #0
 8016b2c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8016b2e:	683b      	ldr	r3, [r7, #0]
 8016b30:	885b      	ldrh	r3, [r3, #2]
 8016b32:	0a1b      	lsrs	r3, r3, #8
 8016b34:	b29b      	uxth	r3, r3
 8016b36:	3b01      	subs	r3, #1
 8016b38:	2b06      	cmp	r3, #6
 8016b3a:	f200 8128 	bhi.w	8016d8e <USBD_GetDescriptor+0x276>
 8016b3e:	a201      	add	r2, pc, #4	; (adr r2, 8016b44 <USBD_GetDescriptor+0x2c>)
 8016b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b44:	08016b61 	.word	0x08016b61
 8016b48:	08016b79 	.word	0x08016b79
 8016b4c:	08016bb9 	.word	0x08016bb9
 8016b50:	08016d8f 	.word	0x08016d8f
 8016b54:	08016d8f 	.word	0x08016d8f
 8016b58:	08016d2f 	.word	0x08016d2f
 8016b5c:	08016d5b 	.word	0x08016d5b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016b66:	681b      	ldr	r3, [r3, #0]
 8016b68:	687a      	ldr	r2, [r7, #4]
 8016b6a:	7c12      	ldrb	r2, [r2, #16]
 8016b6c:	f107 0108 	add.w	r1, r7, #8
 8016b70:	4610      	mov	r0, r2
 8016b72:	4798      	blx	r3
 8016b74:	60f8      	str	r0, [r7, #12]
      break;
 8016b76:	e112      	b.n	8016d9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	7c1b      	ldrb	r3, [r3, #16]
 8016b7c:	2b00      	cmp	r3, #0
 8016b7e:	d10d      	bne.n	8016b9c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016b88:	f107 0208 	add.w	r2, r7, #8
 8016b8c:	4610      	mov	r0, r2
 8016b8e:	4798      	blx	r3
 8016b90:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016b92:	68fb      	ldr	r3, [r7, #12]
 8016b94:	3301      	adds	r3, #1
 8016b96:	2202      	movs	r2, #2
 8016b98:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8016b9a:	e100      	b.n	8016d9e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ba4:	f107 0208 	add.w	r2, r7, #8
 8016ba8:	4610      	mov	r0, r2
 8016baa:	4798      	blx	r3
 8016bac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016bae:	68fb      	ldr	r3, [r7, #12]
 8016bb0:	3301      	adds	r3, #1
 8016bb2:	2202      	movs	r2, #2
 8016bb4:	701a      	strb	r2, [r3, #0]
      break;
 8016bb6:	e0f2      	b.n	8016d9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8016bb8:	683b      	ldr	r3, [r7, #0]
 8016bba:	885b      	ldrh	r3, [r3, #2]
 8016bbc:	b2db      	uxtb	r3, r3
 8016bbe:	2b05      	cmp	r3, #5
 8016bc0:	f200 80ac 	bhi.w	8016d1c <USBD_GetDescriptor+0x204>
 8016bc4:	a201      	add	r2, pc, #4	; (adr r2, 8016bcc <USBD_GetDescriptor+0xb4>)
 8016bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016bca:	bf00      	nop
 8016bcc:	08016be5 	.word	0x08016be5
 8016bd0:	08016c19 	.word	0x08016c19
 8016bd4:	08016c4d 	.word	0x08016c4d
 8016bd8:	08016c81 	.word	0x08016c81
 8016bdc:	08016cb5 	.word	0x08016cb5
 8016be0:	08016ce9 	.word	0x08016ce9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016bea:	685b      	ldr	r3, [r3, #4]
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	d00b      	beq.n	8016c08 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016bf6:	685b      	ldr	r3, [r3, #4]
 8016bf8:	687a      	ldr	r2, [r7, #4]
 8016bfa:	7c12      	ldrb	r2, [r2, #16]
 8016bfc:	f107 0108 	add.w	r1, r7, #8
 8016c00:	4610      	mov	r0, r2
 8016c02:	4798      	blx	r3
 8016c04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016c06:	e091      	b.n	8016d2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016c08:	6839      	ldr	r1, [r7, #0]
 8016c0a:	6878      	ldr	r0, [r7, #4]
 8016c0c:	f000 facb 	bl	80171a6 <USBD_CtlError>
            err++;
 8016c10:	7afb      	ldrb	r3, [r7, #11]
 8016c12:	3301      	adds	r3, #1
 8016c14:	72fb      	strb	r3, [r7, #11]
          break;
 8016c16:	e089      	b.n	8016d2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016c1e:	689b      	ldr	r3, [r3, #8]
 8016c20:	2b00      	cmp	r3, #0
 8016c22:	d00b      	beq.n	8016c3c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016c2a:	689b      	ldr	r3, [r3, #8]
 8016c2c:	687a      	ldr	r2, [r7, #4]
 8016c2e:	7c12      	ldrb	r2, [r2, #16]
 8016c30:	f107 0108 	add.w	r1, r7, #8
 8016c34:	4610      	mov	r0, r2
 8016c36:	4798      	blx	r3
 8016c38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016c3a:	e077      	b.n	8016d2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016c3c:	6839      	ldr	r1, [r7, #0]
 8016c3e:	6878      	ldr	r0, [r7, #4]
 8016c40:	f000 fab1 	bl	80171a6 <USBD_CtlError>
            err++;
 8016c44:	7afb      	ldrb	r3, [r7, #11]
 8016c46:	3301      	adds	r3, #1
 8016c48:	72fb      	strb	r3, [r7, #11]
          break;
 8016c4a:	e06f      	b.n	8016d2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016c52:	68db      	ldr	r3, [r3, #12]
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	d00b      	beq.n	8016c70 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016c5e:	68db      	ldr	r3, [r3, #12]
 8016c60:	687a      	ldr	r2, [r7, #4]
 8016c62:	7c12      	ldrb	r2, [r2, #16]
 8016c64:	f107 0108 	add.w	r1, r7, #8
 8016c68:	4610      	mov	r0, r2
 8016c6a:	4798      	blx	r3
 8016c6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016c6e:	e05d      	b.n	8016d2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016c70:	6839      	ldr	r1, [r7, #0]
 8016c72:	6878      	ldr	r0, [r7, #4]
 8016c74:	f000 fa97 	bl	80171a6 <USBD_CtlError>
            err++;
 8016c78:	7afb      	ldrb	r3, [r7, #11]
 8016c7a:	3301      	adds	r3, #1
 8016c7c:	72fb      	strb	r3, [r7, #11]
          break;
 8016c7e:	e055      	b.n	8016d2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016c86:	691b      	ldr	r3, [r3, #16]
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	d00b      	beq.n	8016ca4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016c92:	691b      	ldr	r3, [r3, #16]
 8016c94:	687a      	ldr	r2, [r7, #4]
 8016c96:	7c12      	ldrb	r2, [r2, #16]
 8016c98:	f107 0108 	add.w	r1, r7, #8
 8016c9c:	4610      	mov	r0, r2
 8016c9e:	4798      	blx	r3
 8016ca0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016ca2:	e043      	b.n	8016d2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016ca4:	6839      	ldr	r1, [r7, #0]
 8016ca6:	6878      	ldr	r0, [r7, #4]
 8016ca8:	f000 fa7d 	bl	80171a6 <USBD_CtlError>
            err++;
 8016cac:	7afb      	ldrb	r3, [r7, #11]
 8016cae:	3301      	adds	r3, #1
 8016cb0:	72fb      	strb	r3, [r7, #11]
          break;
 8016cb2:	e03b      	b.n	8016d2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016cba:	695b      	ldr	r3, [r3, #20]
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	d00b      	beq.n	8016cd8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016cc6:	695b      	ldr	r3, [r3, #20]
 8016cc8:	687a      	ldr	r2, [r7, #4]
 8016cca:	7c12      	ldrb	r2, [r2, #16]
 8016ccc:	f107 0108 	add.w	r1, r7, #8
 8016cd0:	4610      	mov	r0, r2
 8016cd2:	4798      	blx	r3
 8016cd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016cd6:	e029      	b.n	8016d2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016cd8:	6839      	ldr	r1, [r7, #0]
 8016cda:	6878      	ldr	r0, [r7, #4]
 8016cdc:	f000 fa63 	bl	80171a6 <USBD_CtlError>
            err++;
 8016ce0:	7afb      	ldrb	r3, [r7, #11]
 8016ce2:	3301      	adds	r3, #1
 8016ce4:	72fb      	strb	r3, [r7, #11]
          break;
 8016ce6:	e021      	b.n	8016d2c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016cee:	699b      	ldr	r3, [r3, #24]
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d00b      	beq.n	8016d0c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016cfa:	699b      	ldr	r3, [r3, #24]
 8016cfc:	687a      	ldr	r2, [r7, #4]
 8016cfe:	7c12      	ldrb	r2, [r2, #16]
 8016d00:	f107 0108 	add.w	r1, r7, #8
 8016d04:	4610      	mov	r0, r2
 8016d06:	4798      	blx	r3
 8016d08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016d0a:	e00f      	b.n	8016d2c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016d0c:	6839      	ldr	r1, [r7, #0]
 8016d0e:	6878      	ldr	r0, [r7, #4]
 8016d10:	f000 fa49 	bl	80171a6 <USBD_CtlError>
            err++;
 8016d14:	7afb      	ldrb	r3, [r7, #11]
 8016d16:	3301      	adds	r3, #1
 8016d18:	72fb      	strb	r3, [r7, #11]
          break;
 8016d1a:	e007      	b.n	8016d2c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8016d1c:	6839      	ldr	r1, [r7, #0]
 8016d1e:	6878      	ldr	r0, [r7, #4]
 8016d20:	f000 fa41 	bl	80171a6 <USBD_CtlError>
          err++;
 8016d24:	7afb      	ldrb	r3, [r7, #11]
 8016d26:	3301      	adds	r3, #1
 8016d28:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8016d2a:	bf00      	nop
      }
      break;
 8016d2c:	e037      	b.n	8016d9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	7c1b      	ldrb	r3, [r3, #16]
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	d109      	bne.n	8016d4a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8016d36:	687b      	ldr	r3, [r7, #4]
 8016d38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016d3e:	f107 0208 	add.w	r2, r7, #8
 8016d42:	4610      	mov	r0, r2
 8016d44:	4798      	blx	r3
 8016d46:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016d48:	e029      	b.n	8016d9e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8016d4a:	6839      	ldr	r1, [r7, #0]
 8016d4c:	6878      	ldr	r0, [r7, #4]
 8016d4e:	f000 fa2a 	bl	80171a6 <USBD_CtlError>
        err++;
 8016d52:	7afb      	ldrb	r3, [r7, #11]
 8016d54:	3301      	adds	r3, #1
 8016d56:	72fb      	strb	r3, [r7, #11]
      break;
 8016d58:	e021      	b.n	8016d9e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	7c1b      	ldrb	r3, [r3, #16]
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d10d      	bne.n	8016d7e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016d6a:	f107 0208 	add.w	r2, r7, #8
 8016d6e:	4610      	mov	r0, r2
 8016d70:	4798      	blx	r3
 8016d72:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8016d74:	68fb      	ldr	r3, [r7, #12]
 8016d76:	3301      	adds	r3, #1
 8016d78:	2207      	movs	r2, #7
 8016d7a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016d7c:	e00f      	b.n	8016d9e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8016d7e:	6839      	ldr	r1, [r7, #0]
 8016d80:	6878      	ldr	r0, [r7, #4]
 8016d82:	f000 fa10 	bl	80171a6 <USBD_CtlError>
        err++;
 8016d86:	7afb      	ldrb	r3, [r7, #11]
 8016d88:	3301      	adds	r3, #1
 8016d8a:	72fb      	strb	r3, [r7, #11]
      break;
 8016d8c:	e007      	b.n	8016d9e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8016d8e:	6839      	ldr	r1, [r7, #0]
 8016d90:	6878      	ldr	r0, [r7, #4]
 8016d92:	f000 fa08 	bl	80171a6 <USBD_CtlError>
      err++;
 8016d96:	7afb      	ldrb	r3, [r7, #11]
 8016d98:	3301      	adds	r3, #1
 8016d9a:	72fb      	strb	r3, [r7, #11]
      break;
 8016d9c:	bf00      	nop
  }

  if (err != 0U)
 8016d9e:	7afb      	ldrb	r3, [r7, #11]
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	d11e      	bne.n	8016de2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8016da4:	683b      	ldr	r3, [r7, #0]
 8016da6:	88db      	ldrh	r3, [r3, #6]
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d016      	beq.n	8016dda <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8016dac:	893b      	ldrh	r3, [r7, #8]
 8016dae:	2b00      	cmp	r3, #0
 8016db0:	d00e      	beq.n	8016dd0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8016db2:	683b      	ldr	r3, [r7, #0]
 8016db4:	88da      	ldrh	r2, [r3, #6]
 8016db6:	893b      	ldrh	r3, [r7, #8]
 8016db8:	4293      	cmp	r3, r2
 8016dba:	bf28      	it	cs
 8016dbc:	4613      	movcs	r3, r2
 8016dbe:	b29b      	uxth	r3, r3
 8016dc0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8016dc2:	893b      	ldrh	r3, [r7, #8]
 8016dc4:	461a      	mov	r2, r3
 8016dc6:	68f9      	ldr	r1, [r7, #12]
 8016dc8:	6878      	ldr	r0, [r7, #4]
 8016dca:	f000 fa5d 	bl	8017288 <USBD_CtlSendData>
 8016dce:	e009      	b.n	8016de4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8016dd0:	6839      	ldr	r1, [r7, #0]
 8016dd2:	6878      	ldr	r0, [r7, #4]
 8016dd4:	f000 f9e7 	bl	80171a6 <USBD_CtlError>
 8016dd8:	e004      	b.n	8016de4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8016dda:	6878      	ldr	r0, [r7, #4]
 8016ddc:	f000 faae 	bl	801733c <USBD_CtlSendStatus>
 8016de0:	e000      	b.n	8016de4 <USBD_GetDescriptor+0x2cc>
    return;
 8016de2:	bf00      	nop
  }
}
 8016de4:	3710      	adds	r7, #16
 8016de6:	46bd      	mov	sp, r7
 8016de8:	bd80      	pop	{r7, pc}
 8016dea:	bf00      	nop

08016dec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016dec:	b580      	push	{r7, lr}
 8016dee:	b084      	sub	sp, #16
 8016df0:	af00      	add	r7, sp, #0
 8016df2:	6078      	str	r0, [r7, #4]
 8016df4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8016df6:	683b      	ldr	r3, [r7, #0]
 8016df8:	889b      	ldrh	r3, [r3, #4]
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	d131      	bne.n	8016e62 <USBD_SetAddress+0x76>
 8016dfe:	683b      	ldr	r3, [r7, #0]
 8016e00:	88db      	ldrh	r3, [r3, #6]
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	d12d      	bne.n	8016e62 <USBD_SetAddress+0x76>
 8016e06:	683b      	ldr	r3, [r7, #0]
 8016e08:	885b      	ldrh	r3, [r3, #2]
 8016e0a:	2b7f      	cmp	r3, #127	; 0x7f
 8016e0c:	d829      	bhi.n	8016e62 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8016e0e:	683b      	ldr	r3, [r7, #0]
 8016e10:	885b      	ldrh	r3, [r3, #2]
 8016e12:	b2db      	uxtb	r3, r3
 8016e14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016e18:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016e20:	b2db      	uxtb	r3, r3
 8016e22:	2b03      	cmp	r3, #3
 8016e24:	d104      	bne.n	8016e30 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8016e26:	6839      	ldr	r1, [r7, #0]
 8016e28:	6878      	ldr	r0, [r7, #4]
 8016e2a:	f000 f9bc 	bl	80171a6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016e2e:	e01d      	b.n	8016e6c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	7bfa      	ldrb	r2, [r7, #15]
 8016e34:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016e38:	7bfb      	ldrb	r3, [r7, #15]
 8016e3a:	4619      	mov	r1, r3
 8016e3c:	6878      	ldr	r0, [r7, #4]
 8016e3e:	f003 fee5 	bl	801ac0c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8016e42:	6878      	ldr	r0, [r7, #4]
 8016e44:	f000 fa7a 	bl	801733c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8016e48:	7bfb      	ldrb	r3, [r7, #15]
 8016e4a:	2b00      	cmp	r3, #0
 8016e4c:	d004      	beq.n	8016e58 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	2202      	movs	r2, #2
 8016e52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016e56:	e009      	b.n	8016e6c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	2201      	movs	r2, #1
 8016e5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016e60:	e004      	b.n	8016e6c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8016e62:	6839      	ldr	r1, [r7, #0]
 8016e64:	6878      	ldr	r0, [r7, #4]
 8016e66:	f000 f99e 	bl	80171a6 <USBD_CtlError>
  }
}
 8016e6a:	bf00      	nop
 8016e6c:	bf00      	nop
 8016e6e:	3710      	adds	r7, #16
 8016e70:	46bd      	mov	sp, r7
 8016e72:	bd80      	pop	{r7, pc}

08016e74 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016e74:	b580      	push	{r7, lr}
 8016e76:	b084      	sub	sp, #16
 8016e78:	af00      	add	r7, sp, #0
 8016e7a:	6078      	str	r0, [r7, #4]
 8016e7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016e7e:	2300      	movs	r3, #0
 8016e80:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8016e82:	683b      	ldr	r3, [r7, #0]
 8016e84:	885b      	ldrh	r3, [r3, #2]
 8016e86:	b2da      	uxtb	r2, r3
 8016e88:	4b4e      	ldr	r3, [pc, #312]	; (8016fc4 <USBD_SetConfig+0x150>)
 8016e8a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8016e8c:	4b4d      	ldr	r3, [pc, #308]	; (8016fc4 <USBD_SetConfig+0x150>)
 8016e8e:	781b      	ldrb	r3, [r3, #0]
 8016e90:	2b01      	cmp	r3, #1
 8016e92:	d905      	bls.n	8016ea0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8016e94:	6839      	ldr	r1, [r7, #0]
 8016e96:	6878      	ldr	r0, [r7, #4]
 8016e98:	f000 f985 	bl	80171a6 <USBD_CtlError>
    return USBD_FAIL;
 8016e9c:	2303      	movs	r3, #3
 8016e9e:	e08c      	b.n	8016fba <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016ea6:	b2db      	uxtb	r3, r3
 8016ea8:	2b02      	cmp	r3, #2
 8016eaa:	d002      	beq.n	8016eb2 <USBD_SetConfig+0x3e>
 8016eac:	2b03      	cmp	r3, #3
 8016eae:	d029      	beq.n	8016f04 <USBD_SetConfig+0x90>
 8016eb0:	e075      	b.n	8016f9e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8016eb2:	4b44      	ldr	r3, [pc, #272]	; (8016fc4 <USBD_SetConfig+0x150>)
 8016eb4:	781b      	ldrb	r3, [r3, #0]
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	d020      	beq.n	8016efc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8016eba:	4b42      	ldr	r3, [pc, #264]	; (8016fc4 <USBD_SetConfig+0x150>)
 8016ebc:	781b      	ldrb	r3, [r3, #0]
 8016ebe:	461a      	mov	r2, r3
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016ec4:	4b3f      	ldr	r3, [pc, #252]	; (8016fc4 <USBD_SetConfig+0x150>)
 8016ec6:	781b      	ldrb	r3, [r3, #0]
 8016ec8:	4619      	mov	r1, r3
 8016eca:	6878      	ldr	r0, [r7, #4]
 8016ecc:	f7fe ffe1 	bl	8015e92 <USBD_SetClassConfig>
 8016ed0:	4603      	mov	r3, r0
 8016ed2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8016ed4:	7bfb      	ldrb	r3, [r7, #15]
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	d008      	beq.n	8016eec <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8016eda:	6839      	ldr	r1, [r7, #0]
 8016edc:	6878      	ldr	r0, [r7, #4]
 8016ede:	f000 f962 	bl	80171a6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	2202      	movs	r2, #2
 8016ee6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016eea:	e065      	b.n	8016fb8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016eec:	6878      	ldr	r0, [r7, #4]
 8016eee:	f000 fa25 	bl	801733c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	2203      	movs	r2, #3
 8016ef6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016efa:	e05d      	b.n	8016fb8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016efc:	6878      	ldr	r0, [r7, #4]
 8016efe:	f000 fa1d 	bl	801733c <USBD_CtlSendStatus>
      break;
 8016f02:	e059      	b.n	8016fb8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8016f04:	4b2f      	ldr	r3, [pc, #188]	; (8016fc4 <USBD_SetConfig+0x150>)
 8016f06:	781b      	ldrb	r3, [r3, #0]
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	d112      	bne.n	8016f32 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	2202      	movs	r2, #2
 8016f10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8016f14:	4b2b      	ldr	r3, [pc, #172]	; (8016fc4 <USBD_SetConfig+0x150>)
 8016f16:	781b      	ldrb	r3, [r3, #0]
 8016f18:	461a      	mov	r2, r3
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016f1e:	4b29      	ldr	r3, [pc, #164]	; (8016fc4 <USBD_SetConfig+0x150>)
 8016f20:	781b      	ldrb	r3, [r3, #0]
 8016f22:	4619      	mov	r1, r3
 8016f24:	6878      	ldr	r0, [r7, #4]
 8016f26:	f7fe ffd0 	bl	8015eca <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8016f2a:	6878      	ldr	r0, [r7, #4]
 8016f2c:	f000 fa06 	bl	801733c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016f30:	e042      	b.n	8016fb8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8016f32:	4b24      	ldr	r3, [pc, #144]	; (8016fc4 <USBD_SetConfig+0x150>)
 8016f34:	781b      	ldrb	r3, [r3, #0]
 8016f36:	461a      	mov	r2, r3
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	685b      	ldr	r3, [r3, #4]
 8016f3c:	429a      	cmp	r2, r3
 8016f3e:	d02a      	beq.n	8016f96 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	685b      	ldr	r3, [r3, #4]
 8016f44:	b2db      	uxtb	r3, r3
 8016f46:	4619      	mov	r1, r3
 8016f48:	6878      	ldr	r0, [r7, #4]
 8016f4a:	f7fe ffbe 	bl	8015eca <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8016f4e:	4b1d      	ldr	r3, [pc, #116]	; (8016fc4 <USBD_SetConfig+0x150>)
 8016f50:	781b      	ldrb	r3, [r3, #0]
 8016f52:	461a      	mov	r2, r3
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016f58:	4b1a      	ldr	r3, [pc, #104]	; (8016fc4 <USBD_SetConfig+0x150>)
 8016f5a:	781b      	ldrb	r3, [r3, #0]
 8016f5c:	4619      	mov	r1, r3
 8016f5e:	6878      	ldr	r0, [r7, #4]
 8016f60:	f7fe ff97 	bl	8015e92 <USBD_SetClassConfig>
 8016f64:	4603      	mov	r3, r0
 8016f66:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8016f68:	7bfb      	ldrb	r3, [r7, #15]
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	d00f      	beq.n	8016f8e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8016f6e:	6839      	ldr	r1, [r7, #0]
 8016f70:	6878      	ldr	r0, [r7, #4]
 8016f72:	f000 f918 	bl	80171a6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	685b      	ldr	r3, [r3, #4]
 8016f7a:	b2db      	uxtb	r3, r3
 8016f7c:	4619      	mov	r1, r3
 8016f7e:	6878      	ldr	r0, [r7, #4]
 8016f80:	f7fe ffa3 	bl	8015eca <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	2202      	movs	r2, #2
 8016f88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016f8c:	e014      	b.n	8016fb8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016f8e:	6878      	ldr	r0, [r7, #4]
 8016f90:	f000 f9d4 	bl	801733c <USBD_CtlSendStatus>
      break;
 8016f94:	e010      	b.n	8016fb8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016f96:	6878      	ldr	r0, [r7, #4]
 8016f98:	f000 f9d0 	bl	801733c <USBD_CtlSendStatus>
      break;
 8016f9c:	e00c      	b.n	8016fb8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8016f9e:	6839      	ldr	r1, [r7, #0]
 8016fa0:	6878      	ldr	r0, [r7, #4]
 8016fa2:	f000 f900 	bl	80171a6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016fa6:	4b07      	ldr	r3, [pc, #28]	; (8016fc4 <USBD_SetConfig+0x150>)
 8016fa8:	781b      	ldrb	r3, [r3, #0]
 8016faa:	4619      	mov	r1, r3
 8016fac:	6878      	ldr	r0, [r7, #4]
 8016fae:	f7fe ff8c 	bl	8015eca <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8016fb2:	2303      	movs	r3, #3
 8016fb4:	73fb      	strb	r3, [r7, #15]
      break;
 8016fb6:	bf00      	nop
  }

  return ret;
 8016fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8016fba:	4618      	mov	r0, r3
 8016fbc:	3710      	adds	r7, #16
 8016fbe:	46bd      	mov	sp, r7
 8016fc0:	bd80      	pop	{r7, pc}
 8016fc2:	bf00      	nop
 8016fc4:	240016b0 	.word	0x240016b0

08016fc8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016fc8:	b580      	push	{r7, lr}
 8016fca:	b082      	sub	sp, #8
 8016fcc:	af00      	add	r7, sp, #0
 8016fce:	6078      	str	r0, [r7, #4]
 8016fd0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8016fd2:	683b      	ldr	r3, [r7, #0]
 8016fd4:	88db      	ldrh	r3, [r3, #6]
 8016fd6:	2b01      	cmp	r3, #1
 8016fd8:	d004      	beq.n	8016fe4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8016fda:	6839      	ldr	r1, [r7, #0]
 8016fdc:	6878      	ldr	r0, [r7, #4]
 8016fde:	f000 f8e2 	bl	80171a6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8016fe2:	e023      	b.n	801702c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016fea:	b2db      	uxtb	r3, r3
 8016fec:	2b02      	cmp	r3, #2
 8016fee:	dc02      	bgt.n	8016ff6 <USBD_GetConfig+0x2e>
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	dc03      	bgt.n	8016ffc <USBD_GetConfig+0x34>
 8016ff4:	e015      	b.n	8017022 <USBD_GetConfig+0x5a>
 8016ff6:	2b03      	cmp	r3, #3
 8016ff8:	d00b      	beq.n	8017012 <USBD_GetConfig+0x4a>
 8016ffa:	e012      	b.n	8017022 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	2200      	movs	r2, #0
 8017000:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	3308      	adds	r3, #8
 8017006:	2201      	movs	r2, #1
 8017008:	4619      	mov	r1, r3
 801700a:	6878      	ldr	r0, [r7, #4]
 801700c:	f000 f93c 	bl	8017288 <USBD_CtlSendData>
        break;
 8017010:	e00c      	b.n	801702c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	3304      	adds	r3, #4
 8017016:	2201      	movs	r2, #1
 8017018:	4619      	mov	r1, r3
 801701a:	6878      	ldr	r0, [r7, #4]
 801701c:	f000 f934 	bl	8017288 <USBD_CtlSendData>
        break;
 8017020:	e004      	b.n	801702c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8017022:	6839      	ldr	r1, [r7, #0]
 8017024:	6878      	ldr	r0, [r7, #4]
 8017026:	f000 f8be 	bl	80171a6 <USBD_CtlError>
        break;
 801702a:	bf00      	nop
}
 801702c:	bf00      	nop
 801702e:	3708      	adds	r7, #8
 8017030:	46bd      	mov	sp, r7
 8017032:	bd80      	pop	{r7, pc}

08017034 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017034:	b580      	push	{r7, lr}
 8017036:	b082      	sub	sp, #8
 8017038:	af00      	add	r7, sp, #0
 801703a:	6078      	str	r0, [r7, #4]
 801703c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017044:	b2db      	uxtb	r3, r3
 8017046:	3b01      	subs	r3, #1
 8017048:	2b02      	cmp	r3, #2
 801704a:	d81e      	bhi.n	801708a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801704c:	683b      	ldr	r3, [r7, #0]
 801704e:	88db      	ldrh	r3, [r3, #6]
 8017050:	2b02      	cmp	r3, #2
 8017052:	d004      	beq.n	801705e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8017054:	6839      	ldr	r1, [r7, #0]
 8017056:	6878      	ldr	r0, [r7, #4]
 8017058:	f000 f8a5 	bl	80171a6 <USBD_CtlError>
        break;
 801705c:	e01a      	b.n	8017094 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	2201      	movs	r2, #1
 8017062:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8017064:	687b      	ldr	r3, [r7, #4]
 8017066:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801706a:	2b00      	cmp	r3, #0
 801706c:	d005      	beq.n	801707a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801706e:	687b      	ldr	r3, [r7, #4]
 8017070:	68db      	ldr	r3, [r3, #12]
 8017072:	f043 0202 	orr.w	r2, r3, #2
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	330c      	adds	r3, #12
 801707e:	2202      	movs	r2, #2
 8017080:	4619      	mov	r1, r3
 8017082:	6878      	ldr	r0, [r7, #4]
 8017084:	f000 f900 	bl	8017288 <USBD_CtlSendData>
      break;
 8017088:	e004      	b.n	8017094 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801708a:	6839      	ldr	r1, [r7, #0]
 801708c:	6878      	ldr	r0, [r7, #4]
 801708e:	f000 f88a 	bl	80171a6 <USBD_CtlError>
      break;
 8017092:	bf00      	nop
  }
}
 8017094:	bf00      	nop
 8017096:	3708      	adds	r7, #8
 8017098:	46bd      	mov	sp, r7
 801709a:	bd80      	pop	{r7, pc}

0801709c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801709c:	b580      	push	{r7, lr}
 801709e:	b082      	sub	sp, #8
 80170a0:	af00      	add	r7, sp, #0
 80170a2:	6078      	str	r0, [r7, #4]
 80170a4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80170a6:	683b      	ldr	r3, [r7, #0]
 80170a8:	885b      	ldrh	r3, [r3, #2]
 80170aa:	2b01      	cmp	r3, #1
 80170ac:	d107      	bne.n	80170be <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	2201      	movs	r2, #1
 80170b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80170b6:	6878      	ldr	r0, [r7, #4]
 80170b8:	f000 f940 	bl	801733c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80170bc:	e013      	b.n	80170e6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80170be:	683b      	ldr	r3, [r7, #0]
 80170c0:	885b      	ldrh	r3, [r3, #2]
 80170c2:	2b02      	cmp	r3, #2
 80170c4:	d10b      	bne.n	80170de <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80170c6:	683b      	ldr	r3, [r7, #0]
 80170c8:	889b      	ldrh	r3, [r3, #4]
 80170ca:	0a1b      	lsrs	r3, r3, #8
 80170cc:	b29b      	uxth	r3, r3
 80170ce:	b2da      	uxtb	r2, r3
 80170d0:	687b      	ldr	r3, [r7, #4]
 80170d2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80170d6:	6878      	ldr	r0, [r7, #4]
 80170d8:	f000 f930 	bl	801733c <USBD_CtlSendStatus>
}
 80170dc:	e003      	b.n	80170e6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80170de:	6839      	ldr	r1, [r7, #0]
 80170e0:	6878      	ldr	r0, [r7, #4]
 80170e2:	f000 f860 	bl	80171a6 <USBD_CtlError>
}
 80170e6:	bf00      	nop
 80170e8:	3708      	adds	r7, #8
 80170ea:	46bd      	mov	sp, r7
 80170ec:	bd80      	pop	{r7, pc}

080170ee <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80170ee:	b580      	push	{r7, lr}
 80170f0:	b082      	sub	sp, #8
 80170f2:	af00      	add	r7, sp, #0
 80170f4:	6078      	str	r0, [r7, #4]
 80170f6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80170fe:	b2db      	uxtb	r3, r3
 8017100:	3b01      	subs	r3, #1
 8017102:	2b02      	cmp	r3, #2
 8017104:	d80b      	bhi.n	801711e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017106:	683b      	ldr	r3, [r7, #0]
 8017108:	885b      	ldrh	r3, [r3, #2]
 801710a:	2b01      	cmp	r3, #1
 801710c:	d10c      	bne.n	8017128 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801710e:	687b      	ldr	r3, [r7, #4]
 8017110:	2200      	movs	r2, #0
 8017112:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8017116:	6878      	ldr	r0, [r7, #4]
 8017118:	f000 f910 	bl	801733c <USBD_CtlSendStatus>
      }
      break;
 801711c:	e004      	b.n	8017128 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801711e:	6839      	ldr	r1, [r7, #0]
 8017120:	6878      	ldr	r0, [r7, #4]
 8017122:	f000 f840 	bl	80171a6 <USBD_CtlError>
      break;
 8017126:	e000      	b.n	801712a <USBD_ClrFeature+0x3c>
      break;
 8017128:	bf00      	nop
  }
}
 801712a:	bf00      	nop
 801712c:	3708      	adds	r7, #8
 801712e:	46bd      	mov	sp, r7
 8017130:	bd80      	pop	{r7, pc}

08017132 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8017132:	b580      	push	{r7, lr}
 8017134:	b084      	sub	sp, #16
 8017136:	af00      	add	r7, sp, #0
 8017138:	6078      	str	r0, [r7, #4]
 801713a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801713c:	683b      	ldr	r3, [r7, #0]
 801713e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8017140:	68fb      	ldr	r3, [r7, #12]
 8017142:	781a      	ldrb	r2, [r3, #0]
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8017148:	68fb      	ldr	r3, [r7, #12]
 801714a:	3301      	adds	r3, #1
 801714c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801714e:	68fb      	ldr	r3, [r7, #12]
 8017150:	781a      	ldrb	r2, [r3, #0]
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8017156:	68fb      	ldr	r3, [r7, #12]
 8017158:	3301      	adds	r3, #1
 801715a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801715c:	68f8      	ldr	r0, [r7, #12]
 801715e:	f7ff fa41 	bl	80165e4 <SWAPBYTE>
 8017162:	4603      	mov	r3, r0
 8017164:	461a      	mov	r2, r3
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801716a:	68fb      	ldr	r3, [r7, #12]
 801716c:	3301      	adds	r3, #1
 801716e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8017170:	68fb      	ldr	r3, [r7, #12]
 8017172:	3301      	adds	r3, #1
 8017174:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8017176:	68f8      	ldr	r0, [r7, #12]
 8017178:	f7ff fa34 	bl	80165e4 <SWAPBYTE>
 801717c:	4603      	mov	r3, r0
 801717e:	461a      	mov	r2, r3
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8017184:	68fb      	ldr	r3, [r7, #12]
 8017186:	3301      	adds	r3, #1
 8017188:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801718a:	68fb      	ldr	r3, [r7, #12]
 801718c:	3301      	adds	r3, #1
 801718e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8017190:	68f8      	ldr	r0, [r7, #12]
 8017192:	f7ff fa27 	bl	80165e4 <SWAPBYTE>
 8017196:	4603      	mov	r3, r0
 8017198:	461a      	mov	r2, r3
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	80da      	strh	r2, [r3, #6]
}
 801719e:	bf00      	nop
 80171a0:	3710      	adds	r7, #16
 80171a2:	46bd      	mov	sp, r7
 80171a4:	bd80      	pop	{r7, pc}

080171a6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80171a6:	b580      	push	{r7, lr}
 80171a8:	b082      	sub	sp, #8
 80171aa:	af00      	add	r7, sp, #0
 80171ac:	6078      	str	r0, [r7, #4]
 80171ae:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80171b0:	2180      	movs	r1, #128	; 0x80
 80171b2:	6878      	ldr	r0, [r7, #4]
 80171b4:	f003 fcc0 	bl	801ab38 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80171b8:	2100      	movs	r1, #0
 80171ba:	6878      	ldr	r0, [r7, #4]
 80171bc:	f003 fcbc 	bl	801ab38 <USBD_LL_StallEP>
}
 80171c0:	bf00      	nop
 80171c2:	3708      	adds	r7, #8
 80171c4:	46bd      	mov	sp, r7
 80171c6:	bd80      	pop	{r7, pc}

080171c8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80171c8:	b580      	push	{r7, lr}
 80171ca:	b086      	sub	sp, #24
 80171cc:	af00      	add	r7, sp, #0
 80171ce:	60f8      	str	r0, [r7, #12]
 80171d0:	60b9      	str	r1, [r7, #8]
 80171d2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80171d4:	2300      	movs	r3, #0
 80171d6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80171d8:	68fb      	ldr	r3, [r7, #12]
 80171da:	2b00      	cmp	r3, #0
 80171dc:	d036      	beq.n	801724c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80171de:	68fb      	ldr	r3, [r7, #12]
 80171e0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80171e2:	6938      	ldr	r0, [r7, #16]
 80171e4:	f000 f836 	bl	8017254 <USBD_GetLen>
 80171e8:	4603      	mov	r3, r0
 80171ea:	3301      	adds	r3, #1
 80171ec:	b29b      	uxth	r3, r3
 80171ee:	005b      	lsls	r3, r3, #1
 80171f0:	b29a      	uxth	r2, r3
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80171f6:	7dfb      	ldrb	r3, [r7, #23]
 80171f8:	68ba      	ldr	r2, [r7, #8]
 80171fa:	4413      	add	r3, r2
 80171fc:	687a      	ldr	r2, [r7, #4]
 80171fe:	7812      	ldrb	r2, [r2, #0]
 8017200:	701a      	strb	r2, [r3, #0]
  idx++;
 8017202:	7dfb      	ldrb	r3, [r7, #23]
 8017204:	3301      	adds	r3, #1
 8017206:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8017208:	7dfb      	ldrb	r3, [r7, #23]
 801720a:	68ba      	ldr	r2, [r7, #8]
 801720c:	4413      	add	r3, r2
 801720e:	2203      	movs	r2, #3
 8017210:	701a      	strb	r2, [r3, #0]
  idx++;
 8017212:	7dfb      	ldrb	r3, [r7, #23]
 8017214:	3301      	adds	r3, #1
 8017216:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8017218:	e013      	b.n	8017242 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801721a:	7dfb      	ldrb	r3, [r7, #23]
 801721c:	68ba      	ldr	r2, [r7, #8]
 801721e:	4413      	add	r3, r2
 8017220:	693a      	ldr	r2, [r7, #16]
 8017222:	7812      	ldrb	r2, [r2, #0]
 8017224:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8017226:	693b      	ldr	r3, [r7, #16]
 8017228:	3301      	adds	r3, #1
 801722a:	613b      	str	r3, [r7, #16]
    idx++;
 801722c:	7dfb      	ldrb	r3, [r7, #23]
 801722e:	3301      	adds	r3, #1
 8017230:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8017232:	7dfb      	ldrb	r3, [r7, #23]
 8017234:	68ba      	ldr	r2, [r7, #8]
 8017236:	4413      	add	r3, r2
 8017238:	2200      	movs	r2, #0
 801723a:	701a      	strb	r2, [r3, #0]
    idx++;
 801723c:	7dfb      	ldrb	r3, [r7, #23]
 801723e:	3301      	adds	r3, #1
 8017240:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8017242:	693b      	ldr	r3, [r7, #16]
 8017244:	781b      	ldrb	r3, [r3, #0]
 8017246:	2b00      	cmp	r3, #0
 8017248:	d1e7      	bne.n	801721a <USBD_GetString+0x52>
 801724a:	e000      	b.n	801724e <USBD_GetString+0x86>
    return;
 801724c:	bf00      	nop
  }
}
 801724e:	3718      	adds	r7, #24
 8017250:	46bd      	mov	sp, r7
 8017252:	bd80      	pop	{r7, pc}

08017254 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8017254:	b480      	push	{r7}
 8017256:	b085      	sub	sp, #20
 8017258:	af00      	add	r7, sp, #0
 801725a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801725c:	2300      	movs	r3, #0
 801725e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8017264:	e005      	b.n	8017272 <USBD_GetLen+0x1e>
  {
    len++;
 8017266:	7bfb      	ldrb	r3, [r7, #15]
 8017268:	3301      	adds	r3, #1
 801726a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801726c:	68bb      	ldr	r3, [r7, #8]
 801726e:	3301      	adds	r3, #1
 8017270:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8017272:	68bb      	ldr	r3, [r7, #8]
 8017274:	781b      	ldrb	r3, [r3, #0]
 8017276:	2b00      	cmp	r3, #0
 8017278:	d1f5      	bne.n	8017266 <USBD_GetLen+0x12>
  }

  return len;
 801727a:	7bfb      	ldrb	r3, [r7, #15]
}
 801727c:	4618      	mov	r0, r3
 801727e:	3714      	adds	r7, #20
 8017280:	46bd      	mov	sp, r7
 8017282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017286:	4770      	bx	lr

08017288 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8017288:	b580      	push	{r7, lr}
 801728a:	b084      	sub	sp, #16
 801728c:	af00      	add	r7, sp, #0
 801728e:	60f8      	str	r0, [r7, #12]
 8017290:	60b9      	str	r1, [r7, #8]
 8017292:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8017294:	68fb      	ldr	r3, [r7, #12]
 8017296:	2202      	movs	r2, #2
 8017298:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801729c:	68fb      	ldr	r3, [r7, #12]
 801729e:	687a      	ldr	r2, [r7, #4]
 80172a0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80172a2:	68fb      	ldr	r3, [r7, #12]
 80172a4:	687a      	ldr	r2, [r7, #4]
 80172a6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	68ba      	ldr	r2, [r7, #8]
 80172ac:	2100      	movs	r1, #0
 80172ae:	68f8      	ldr	r0, [r7, #12]
 80172b0:	f003 fccb 	bl	801ac4a <USBD_LL_Transmit>

  return USBD_OK;
 80172b4:	2300      	movs	r3, #0
}
 80172b6:	4618      	mov	r0, r3
 80172b8:	3710      	adds	r7, #16
 80172ba:	46bd      	mov	sp, r7
 80172bc:	bd80      	pop	{r7, pc}

080172be <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80172be:	b580      	push	{r7, lr}
 80172c0:	b084      	sub	sp, #16
 80172c2:	af00      	add	r7, sp, #0
 80172c4:	60f8      	str	r0, [r7, #12]
 80172c6:	60b9      	str	r1, [r7, #8]
 80172c8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80172ca:	687b      	ldr	r3, [r7, #4]
 80172cc:	68ba      	ldr	r2, [r7, #8]
 80172ce:	2100      	movs	r1, #0
 80172d0:	68f8      	ldr	r0, [r7, #12]
 80172d2:	f003 fcba 	bl	801ac4a <USBD_LL_Transmit>

  return USBD_OK;
 80172d6:	2300      	movs	r3, #0
}
 80172d8:	4618      	mov	r0, r3
 80172da:	3710      	adds	r7, #16
 80172dc:	46bd      	mov	sp, r7
 80172de:	bd80      	pop	{r7, pc}

080172e0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80172e0:	b580      	push	{r7, lr}
 80172e2:	b084      	sub	sp, #16
 80172e4:	af00      	add	r7, sp, #0
 80172e6:	60f8      	str	r0, [r7, #12]
 80172e8:	60b9      	str	r1, [r7, #8]
 80172ea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80172ec:	68fb      	ldr	r3, [r7, #12]
 80172ee:	2203      	movs	r2, #3
 80172f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80172f4:	68fb      	ldr	r3, [r7, #12]
 80172f6:	687a      	ldr	r2, [r7, #4]
 80172f8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80172fc:	68fb      	ldr	r3, [r7, #12]
 80172fe:	687a      	ldr	r2, [r7, #4]
 8017300:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	68ba      	ldr	r2, [r7, #8]
 8017308:	2100      	movs	r1, #0
 801730a:	68f8      	ldr	r0, [r7, #12]
 801730c:	f003 fcbe 	bl	801ac8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017310:	2300      	movs	r3, #0
}
 8017312:	4618      	mov	r0, r3
 8017314:	3710      	adds	r7, #16
 8017316:	46bd      	mov	sp, r7
 8017318:	bd80      	pop	{r7, pc}

0801731a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801731a:	b580      	push	{r7, lr}
 801731c:	b084      	sub	sp, #16
 801731e:	af00      	add	r7, sp, #0
 8017320:	60f8      	str	r0, [r7, #12]
 8017322:	60b9      	str	r1, [r7, #8]
 8017324:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	68ba      	ldr	r2, [r7, #8]
 801732a:	2100      	movs	r1, #0
 801732c:	68f8      	ldr	r0, [r7, #12]
 801732e:	f003 fcad 	bl	801ac8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8017332:	2300      	movs	r3, #0
}
 8017334:	4618      	mov	r0, r3
 8017336:	3710      	adds	r7, #16
 8017338:	46bd      	mov	sp, r7
 801733a:	bd80      	pop	{r7, pc}

0801733c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801733c:	b580      	push	{r7, lr}
 801733e:	b082      	sub	sp, #8
 8017340:	af00      	add	r7, sp, #0
 8017342:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8017344:	687b      	ldr	r3, [r7, #4]
 8017346:	2204      	movs	r2, #4
 8017348:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801734c:	2300      	movs	r3, #0
 801734e:	2200      	movs	r2, #0
 8017350:	2100      	movs	r1, #0
 8017352:	6878      	ldr	r0, [r7, #4]
 8017354:	f003 fc79 	bl	801ac4a <USBD_LL_Transmit>

  return USBD_OK;
 8017358:	2300      	movs	r3, #0
}
 801735a:	4618      	mov	r0, r3
 801735c:	3708      	adds	r7, #8
 801735e:	46bd      	mov	sp, r7
 8017360:	bd80      	pop	{r7, pc}

08017362 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8017362:	b580      	push	{r7, lr}
 8017364:	b082      	sub	sp, #8
 8017366:	af00      	add	r7, sp, #0
 8017368:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	2205      	movs	r2, #5
 801736e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8017372:	2300      	movs	r3, #0
 8017374:	2200      	movs	r2, #0
 8017376:	2100      	movs	r1, #0
 8017378:	6878      	ldr	r0, [r7, #4]
 801737a:	f003 fc87 	bl	801ac8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801737e:	2300      	movs	r3, #0
}
 8017380:	4618      	mov	r0, r3
 8017382:	3708      	adds	r7, #8
 8017384:	46bd      	mov	sp, r7
 8017386:	bd80      	pop	{r7, pc}

08017388 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8017388:	b580      	push	{r7, lr}
 801738a:	b084      	sub	sp, #16
 801738c:	af00      	add	r7, sp, #0
 801738e:	4603      	mov	r3, r0
 8017390:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8017392:	79fb      	ldrb	r3, [r7, #7]
 8017394:	4a08      	ldr	r2, [pc, #32]	; (80173b8 <disk_status+0x30>)
 8017396:	009b      	lsls	r3, r3, #2
 8017398:	4413      	add	r3, r2
 801739a:	685b      	ldr	r3, [r3, #4]
 801739c:	685b      	ldr	r3, [r3, #4]
 801739e:	79fa      	ldrb	r2, [r7, #7]
 80173a0:	4905      	ldr	r1, [pc, #20]	; (80173b8 <disk_status+0x30>)
 80173a2:	440a      	add	r2, r1
 80173a4:	7a12      	ldrb	r2, [r2, #8]
 80173a6:	4610      	mov	r0, r2
 80173a8:	4798      	blx	r3
 80173aa:	4603      	mov	r3, r0
 80173ac:	73fb      	strb	r3, [r7, #15]
  return stat;
 80173ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80173b0:	4618      	mov	r0, r3
 80173b2:	3710      	adds	r7, #16
 80173b4:	46bd      	mov	sp, r7
 80173b6:	bd80      	pop	{r7, pc}
 80173b8:	240018dc 	.word	0x240018dc

080173bc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80173bc:	b580      	push	{r7, lr}
 80173be:	b084      	sub	sp, #16
 80173c0:	af00      	add	r7, sp, #0
 80173c2:	4603      	mov	r3, r0
 80173c4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80173c6:	2300      	movs	r3, #0
 80173c8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80173ca:	79fb      	ldrb	r3, [r7, #7]
 80173cc:	4a0d      	ldr	r2, [pc, #52]	; (8017404 <disk_initialize+0x48>)
 80173ce:	5cd3      	ldrb	r3, [r2, r3]
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	d111      	bne.n	80173f8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80173d4:	79fb      	ldrb	r3, [r7, #7]
 80173d6:	4a0b      	ldr	r2, [pc, #44]	; (8017404 <disk_initialize+0x48>)
 80173d8:	2101      	movs	r1, #1
 80173da:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80173dc:	79fb      	ldrb	r3, [r7, #7]
 80173de:	4a09      	ldr	r2, [pc, #36]	; (8017404 <disk_initialize+0x48>)
 80173e0:	009b      	lsls	r3, r3, #2
 80173e2:	4413      	add	r3, r2
 80173e4:	685b      	ldr	r3, [r3, #4]
 80173e6:	681b      	ldr	r3, [r3, #0]
 80173e8:	79fa      	ldrb	r2, [r7, #7]
 80173ea:	4906      	ldr	r1, [pc, #24]	; (8017404 <disk_initialize+0x48>)
 80173ec:	440a      	add	r2, r1
 80173ee:	7a12      	ldrb	r2, [r2, #8]
 80173f0:	4610      	mov	r0, r2
 80173f2:	4798      	blx	r3
 80173f4:	4603      	mov	r3, r0
 80173f6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80173f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80173fa:	4618      	mov	r0, r3
 80173fc:	3710      	adds	r7, #16
 80173fe:	46bd      	mov	sp, r7
 8017400:	bd80      	pop	{r7, pc}
 8017402:	bf00      	nop
 8017404:	240018dc 	.word	0x240018dc

08017408 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8017408:	b590      	push	{r4, r7, lr}
 801740a:	b087      	sub	sp, #28
 801740c:	af00      	add	r7, sp, #0
 801740e:	60b9      	str	r1, [r7, #8]
 8017410:	607a      	str	r2, [r7, #4]
 8017412:	603b      	str	r3, [r7, #0]
 8017414:	4603      	mov	r3, r0
 8017416:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8017418:	7bfb      	ldrb	r3, [r7, #15]
 801741a:	4a0a      	ldr	r2, [pc, #40]	; (8017444 <disk_read+0x3c>)
 801741c:	009b      	lsls	r3, r3, #2
 801741e:	4413      	add	r3, r2
 8017420:	685b      	ldr	r3, [r3, #4]
 8017422:	689c      	ldr	r4, [r3, #8]
 8017424:	7bfb      	ldrb	r3, [r7, #15]
 8017426:	4a07      	ldr	r2, [pc, #28]	; (8017444 <disk_read+0x3c>)
 8017428:	4413      	add	r3, r2
 801742a:	7a18      	ldrb	r0, [r3, #8]
 801742c:	683b      	ldr	r3, [r7, #0]
 801742e:	687a      	ldr	r2, [r7, #4]
 8017430:	68b9      	ldr	r1, [r7, #8]
 8017432:	47a0      	blx	r4
 8017434:	4603      	mov	r3, r0
 8017436:	75fb      	strb	r3, [r7, #23]
  return res;
 8017438:	7dfb      	ldrb	r3, [r7, #23]
}
 801743a:	4618      	mov	r0, r3
 801743c:	371c      	adds	r7, #28
 801743e:	46bd      	mov	sp, r7
 8017440:	bd90      	pop	{r4, r7, pc}
 8017442:	bf00      	nop
 8017444:	240018dc 	.word	0x240018dc

08017448 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8017448:	b590      	push	{r4, r7, lr}
 801744a:	b087      	sub	sp, #28
 801744c:	af00      	add	r7, sp, #0
 801744e:	60b9      	str	r1, [r7, #8]
 8017450:	607a      	str	r2, [r7, #4]
 8017452:	603b      	str	r3, [r7, #0]
 8017454:	4603      	mov	r3, r0
 8017456:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8017458:	7bfb      	ldrb	r3, [r7, #15]
 801745a:	4a0a      	ldr	r2, [pc, #40]	; (8017484 <disk_write+0x3c>)
 801745c:	009b      	lsls	r3, r3, #2
 801745e:	4413      	add	r3, r2
 8017460:	685b      	ldr	r3, [r3, #4]
 8017462:	68dc      	ldr	r4, [r3, #12]
 8017464:	7bfb      	ldrb	r3, [r7, #15]
 8017466:	4a07      	ldr	r2, [pc, #28]	; (8017484 <disk_write+0x3c>)
 8017468:	4413      	add	r3, r2
 801746a:	7a18      	ldrb	r0, [r3, #8]
 801746c:	683b      	ldr	r3, [r7, #0]
 801746e:	687a      	ldr	r2, [r7, #4]
 8017470:	68b9      	ldr	r1, [r7, #8]
 8017472:	47a0      	blx	r4
 8017474:	4603      	mov	r3, r0
 8017476:	75fb      	strb	r3, [r7, #23]
  return res;
 8017478:	7dfb      	ldrb	r3, [r7, #23]
}
 801747a:	4618      	mov	r0, r3
 801747c:	371c      	adds	r7, #28
 801747e:	46bd      	mov	sp, r7
 8017480:	bd90      	pop	{r4, r7, pc}
 8017482:	bf00      	nop
 8017484:	240018dc 	.word	0x240018dc

08017488 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8017488:	b580      	push	{r7, lr}
 801748a:	b084      	sub	sp, #16
 801748c:	af00      	add	r7, sp, #0
 801748e:	4603      	mov	r3, r0
 8017490:	603a      	str	r2, [r7, #0]
 8017492:	71fb      	strb	r3, [r7, #7]
 8017494:	460b      	mov	r3, r1
 8017496:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8017498:	79fb      	ldrb	r3, [r7, #7]
 801749a:	4a09      	ldr	r2, [pc, #36]	; (80174c0 <disk_ioctl+0x38>)
 801749c:	009b      	lsls	r3, r3, #2
 801749e:	4413      	add	r3, r2
 80174a0:	685b      	ldr	r3, [r3, #4]
 80174a2:	691b      	ldr	r3, [r3, #16]
 80174a4:	79fa      	ldrb	r2, [r7, #7]
 80174a6:	4906      	ldr	r1, [pc, #24]	; (80174c0 <disk_ioctl+0x38>)
 80174a8:	440a      	add	r2, r1
 80174aa:	7a10      	ldrb	r0, [r2, #8]
 80174ac:	79b9      	ldrb	r1, [r7, #6]
 80174ae:	683a      	ldr	r2, [r7, #0]
 80174b0:	4798      	blx	r3
 80174b2:	4603      	mov	r3, r0
 80174b4:	73fb      	strb	r3, [r7, #15]
  return res;
 80174b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80174b8:	4618      	mov	r0, r3
 80174ba:	3710      	adds	r7, #16
 80174bc:	46bd      	mov	sp, r7
 80174be:	bd80      	pop	{r7, pc}
 80174c0:	240018dc 	.word	0x240018dc

080174c4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80174c4:	b480      	push	{r7}
 80174c6:	b085      	sub	sp, #20
 80174c8:	af00      	add	r7, sp, #0
 80174ca:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	3301      	adds	r3, #1
 80174d0:	781b      	ldrb	r3, [r3, #0]
 80174d2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80174d4:	89fb      	ldrh	r3, [r7, #14]
 80174d6:	021b      	lsls	r3, r3, #8
 80174d8:	b21a      	sxth	r2, r3
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	781b      	ldrb	r3, [r3, #0]
 80174de:	b21b      	sxth	r3, r3
 80174e0:	4313      	orrs	r3, r2
 80174e2:	b21b      	sxth	r3, r3
 80174e4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80174e6:	89fb      	ldrh	r3, [r7, #14]
}
 80174e8:	4618      	mov	r0, r3
 80174ea:	3714      	adds	r7, #20
 80174ec:	46bd      	mov	sp, r7
 80174ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174f2:	4770      	bx	lr

080174f4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80174f4:	b480      	push	{r7}
 80174f6:	b085      	sub	sp, #20
 80174f8:	af00      	add	r7, sp, #0
 80174fa:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	3303      	adds	r3, #3
 8017500:	781b      	ldrb	r3, [r3, #0]
 8017502:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8017504:	68fb      	ldr	r3, [r7, #12]
 8017506:	021b      	lsls	r3, r3, #8
 8017508:	687a      	ldr	r2, [r7, #4]
 801750a:	3202      	adds	r2, #2
 801750c:	7812      	ldrb	r2, [r2, #0]
 801750e:	4313      	orrs	r3, r2
 8017510:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8017512:	68fb      	ldr	r3, [r7, #12]
 8017514:	021b      	lsls	r3, r3, #8
 8017516:	687a      	ldr	r2, [r7, #4]
 8017518:	3201      	adds	r2, #1
 801751a:	7812      	ldrb	r2, [r2, #0]
 801751c:	4313      	orrs	r3, r2
 801751e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8017520:	68fb      	ldr	r3, [r7, #12]
 8017522:	021b      	lsls	r3, r3, #8
 8017524:	687a      	ldr	r2, [r7, #4]
 8017526:	7812      	ldrb	r2, [r2, #0]
 8017528:	4313      	orrs	r3, r2
 801752a:	60fb      	str	r3, [r7, #12]
	return rv;
 801752c:	68fb      	ldr	r3, [r7, #12]
}
 801752e:	4618      	mov	r0, r3
 8017530:	3714      	adds	r7, #20
 8017532:	46bd      	mov	sp, r7
 8017534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017538:	4770      	bx	lr

0801753a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801753a:	b480      	push	{r7}
 801753c:	b083      	sub	sp, #12
 801753e:	af00      	add	r7, sp, #0
 8017540:	6078      	str	r0, [r7, #4]
 8017542:	460b      	mov	r3, r1
 8017544:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	1c5a      	adds	r2, r3, #1
 801754a:	607a      	str	r2, [r7, #4]
 801754c:	887a      	ldrh	r2, [r7, #2]
 801754e:	b2d2      	uxtb	r2, r2
 8017550:	701a      	strb	r2, [r3, #0]
 8017552:	887b      	ldrh	r3, [r7, #2]
 8017554:	0a1b      	lsrs	r3, r3, #8
 8017556:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	1c5a      	adds	r2, r3, #1
 801755c:	607a      	str	r2, [r7, #4]
 801755e:	887a      	ldrh	r2, [r7, #2]
 8017560:	b2d2      	uxtb	r2, r2
 8017562:	701a      	strb	r2, [r3, #0]
}
 8017564:	bf00      	nop
 8017566:	370c      	adds	r7, #12
 8017568:	46bd      	mov	sp, r7
 801756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801756e:	4770      	bx	lr

08017570 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8017570:	b480      	push	{r7}
 8017572:	b083      	sub	sp, #12
 8017574:	af00      	add	r7, sp, #0
 8017576:	6078      	str	r0, [r7, #4]
 8017578:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	1c5a      	adds	r2, r3, #1
 801757e:	607a      	str	r2, [r7, #4]
 8017580:	683a      	ldr	r2, [r7, #0]
 8017582:	b2d2      	uxtb	r2, r2
 8017584:	701a      	strb	r2, [r3, #0]
 8017586:	683b      	ldr	r3, [r7, #0]
 8017588:	0a1b      	lsrs	r3, r3, #8
 801758a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	1c5a      	adds	r2, r3, #1
 8017590:	607a      	str	r2, [r7, #4]
 8017592:	683a      	ldr	r2, [r7, #0]
 8017594:	b2d2      	uxtb	r2, r2
 8017596:	701a      	strb	r2, [r3, #0]
 8017598:	683b      	ldr	r3, [r7, #0]
 801759a:	0a1b      	lsrs	r3, r3, #8
 801759c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	1c5a      	adds	r2, r3, #1
 80175a2:	607a      	str	r2, [r7, #4]
 80175a4:	683a      	ldr	r2, [r7, #0]
 80175a6:	b2d2      	uxtb	r2, r2
 80175a8:	701a      	strb	r2, [r3, #0]
 80175aa:	683b      	ldr	r3, [r7, #0]
 80175ac:	0a1b      	lsrs	r3, r3, #8
 80175ae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	1c5a      	adds	r2, r3, #1
 80175b4:	607a      	str	r2, [r7, #4]
 80175b6:	683a      	ldr	r2, [r7, #0]
 80175b8:	b2d2      	uxtb	r2, r2
 80175ba:	701a      	strb	r2, [r3, #0]
}
 80175bc:	bf00      	nop
 80175be:	370c      	adds	r7, #12
 80175c0:	46bd      	mov	sp, r7
 80175c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175c6:	4770      	bx	lr

080175c8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80175c8:	b480      	push	{r7}
 80175ca:	b087      	sub	sp, #28
 80175cc:	af00      	add	r7, sp, #0
 80175ce:	60f8      	str	r0, [r7, #12]
 80175d0:	60b9      	str	r1, [r7, #8]
 80175d2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80175d4:	68fb      	ldr	r3, [r7, #12]
 80175d6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80175d8:	68bb      	ldr	r3, [r7, #8]
 80175da:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d00d      	beq.n	80175fe <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80175e2:	693a      	ldr	r2, [r7, #16]
 80175e4:	1c53      	adds	r3, r2, #1
 80175e6:	613b      	str	r3, [r7, #16]
 80175e8:	697b      	ldr	r3, [r7, #20]
 80175ea:	1c59      	adds	r1, r3, #1
 80175ec:	6179      	str	r1, [r7, #20]
 80175ee:	7812      	ldrb	r2, [r2, #0]
 80175f0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	3b01      	subs	r3, #1
 80175f6:	607b      	str	r3, [r7, #4]
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	d1f1      	bne.n	80175e2 <mem_cpy+0x1a>
	}
}
 80175fe:	bf00      	nop
 8017600:	371c      	adds	r7, #28
 8017602:	46bd      	mov	sp, r7
 8017604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017608:	4770      	bx	lr

0801760a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801760a:	b480      	push	{r7}
 801760c:	b087      	sub	sp, #28
 801760e:	af00      	add	r7, sp, #0
 8017610:	60f8      	str	r0, [r7, #12]
 8017612:	60b9      	str	r1, [r7, #8]
 8017614:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8017616:	68fb      	ldr	r3, [r7, #12]
 8017618:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801761a:	697b      	ldr	r3, [r7, #20]
 801761c:	1c5a      	adds	r2, r3, #1
 801761e:	617a      	str	r2, [r7, #20]
 8017620:	68ba      	ldr	r2, [r7, #8]
 8017622:	b2d2      	uxtb	r2, r2
 8017624:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	3b01      	subs	r3, #1
 801762a:	607b      	str	r3, [r7, #4]
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	2b00      	cmp	r3, #0
 8017630:	d1f3      	bne.n	801761a <mem_set+0x10>
}
 8017632:	bf00      	nop
 8017634:	bf00      	nop
 8017636:	371c      	adds	r7, #28
 8017638:	46bd      	mov	sp, r7
 801763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801763e:	4770      	bx	lr

08017640 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8017640:	b480      	push	{r7}
 8017642:	b089      	sub	sp, #36	; 0x24
 8017644:	af00      	add	r7, sp, #0
 8017646:	60f8      	str	r0, [r7, #12]
 8017648:	60b9      	str	r1, [r7, #8]
 801764a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801764c:	68fb      	ldr	r3, [r7, #12]
 801764e:	61fb      	str	r3, [r7, #28]
 8017650:	68bb      	ldr	r3, [r7, #8]
 8017652:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8017654:	2300      	movs	r3, #0
 8017656:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8017658:	69fb      	ldr	r3, [r7, #28]
 801765a:	1c5a      	adds	r2, r3, #1
 801765c:	61fa      	str	r2, [r7, #28]
 801765e:	781b      	ldrb	r3, [r3, #0]
 8017660:	4619      	mov	r1, r3
 8017662:	69bb      	ldr	r3, [r7, #24]
 8017664:	1c5a      	adds	r2, r3, #1
 8017666:	61ba      	str	r2, [r7, #24]
 8017668:	781b      	ldrb	r3, [r3, #0]
 801766a:	1acb      	subs	r3, r1, r3
 801766c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	3b01      	subs	r3, #1
 8017672:	607b      	str	r3, [r7, #4]
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	2b00      	cmp	r3, #0
 8017678:	d002      	beq.n	8017680 <mem_cmp+0x40>
 801767a:	697b      	ldr	r3, [r7, #20]
 801767c:	2b00      	cmp	r3, #0
 801767e:	d0eb      	beq.n	8017658 <mem_cmp+0x18>

	return r;
 8017680:	697b      	ldr	r3, [r7, #20]
}
 8017682:	4618      	mov	r0, r3
 8017684:	3724      	adds	r7, #36	; 0x24
 8017686:	46bd      	mov	sp, r7
 8017688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801768c:	4770      	bx	lr

0801768e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801768e:	b480      	push	{r7}
 8017690:	b083      	sub	sp, #12
 8017692:	af00      	add	r7, sp, #0
 8017694:	6078      	str	r0, [r7, #4]
 8017696:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8017698:	e002      	b.n	80176a0 <chk_chr+0x12>
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	3301      	adds	r3, #1
 801769e:	607b      	str	r3, [r7, #4]
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	781b      	ldrb	r3, [r3, #0]
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	d005      	beq.n	80176b4 <chk_chr+0x26>
 80176a8:	687b      	ldr	r3, [r7, #4]
 80176aa:	781b      	ldrb	r3, [r3, #0]
 80176ac:	461a      	mov	r2, r3
 80176ae:	683b      	ldr	r3, [r7, #0]
 80176b0:	4293      	cmp	r3, r2
 80176b2:	d1f2      	bne.n	801769a <chk_chr+0xc>
	return *str;
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	781b      	ldrb	r3, [r3, #0]
}
 80176b8:	4618      	mov	r0, r3
 80176ba:	370c      	adds	r7, #12
 80176bc:	46bd      	mov	sp, r7
 80176be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176c2:	4770      	bx	lr

080176c4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80176c4:	b480      	push	{r7}
 80176c6:	b085      	sub	sp, #20
 80176c8:	af00      	add	r7, sp, #0
 80176ca:	6078      	str	r0, [r7, #4]
 80176cc:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80176ce:	2300      	movs	r3, #0
 80176d0:	60bb      	str	r3, [r7, #8]
 80176d2:	68bb      	ldr	r3, [r7, #8]
 80176d4:	60fb      	str	r3, [r7, #12]
 80176d6:	e029      	b.n	801772c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80176d8:	4a27      	ldr	r2, [pc, #156]	; (8017778 <chk_lock+0xb4>)
 80176da:	68fb      	ldr	r3, [r7, #12]
 80176dc:	011b      	lsls	r3, r3, #4
 80176de:	4413      	add	r3, r2
 80176e0:	681b      	ldr	r3, [r3, #0]
 80176e2:	2b00      	cmp	r3, #0
 80176e4:	d01d      	beq.n	8017722 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80176e6:	4a24      	ldr	r2, [pc, #144]	; (8017778 <chk_lock+0xb4>)
 80176e8:	68fb      	ldr	r3, [r7, #12]
 80176ea:	011b      	lsls	r3, r3, #4
 80176ec:	4413      	add	r3, r2
 80176ee:	681a      	ldr	r2, [r3, #0]
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	681b      	ldr	r3, [r3, #0]
 80176f4:	429a      	cmp	r2, r3
 80176f6:	d116      	bne.n	8017726 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80176f8:	4a1f      	ldr	r2, [pc, #124]	; (8017778 <chk_lock+0xb4>)
 80176fa:	68fb      	ldr	r3, [r7, #12]
 80176fc:	011b      	lsls	r3, r3, #4
 80176fe:	4413      	add	r3, r2
 8017700:	3304      	adds	r3, #4
 8017702:	681a      	ldr	r2, [r3, #0]
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8017708:	429a      	cmp	r2, r3
 801770a:	d10c      	bne.n	8017726 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801770c:	4a1a      	ldr	r2, [pc, #104]	; (8017778 <chk_lock+0xb4>)
 801770e:	68fb      	ldr	r3, [r7, #12]
 8017710:	011b      	lsls	r3, r3, #4
 8017712:	4413      	add	r3, r2
 8017714:	3308      	adds	r3, #8
 8017716:	681a      	ldr	r2, [r3, #0]
 8017718:	687b      	ldr	r3, [r7, #4]
 801771a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801771c:	429a      	cmp	r2, r3
 801771e:	d102      	bne.n	8017726 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8017720:	e007      	b.n	8017732 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8017722:	2301      	movs	r3, #1
 8017724:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8017726:	68fb      	ldr	r3, [r7, #12]
 8017728:	3301      	adds	r3, #1
 801772a:	60fb      	str	r3, [r7, #12]
 801772c:	68fb      	ldr	r3, [r7, #12]
 801772e:	2b01      	cmp	r3, #1
 8017730:	d9d2      	bls.n	80176d8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8017732:	68fb      	ldr	r3, [r7, #12]
 8017734:	2b02      	cmp	r3, #2
 8017736:	d109      	bne.n	801774c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8017738:	68bb      	ldr	r3, [r7, #8]
 801773a:	2b00      	cmp	r3, #0
 801773c:	d102      	bne.n	8017744 <chk_lock+0x80>
 801773e:	683b      	ldr	r3, [r7, #0]
 8017740:	2b02      	cmp	r3, #2
 8017742:	d101      	bne.n	8017748 <chk_lock+0x84>
 8017744:	2300      	movs	r3, #0
 8017746:	e010      	b.n	801776a <chk_lock+0xa6>
 8017748:	2312      	movs	r3, #18
 801774a:	e00e      	b.n	801776a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 801774c:	683b      	ldr	r3, [r7, #0]
 801774e:	2b00      	cmp	r3, #0
 8017750:	d108      	bne.n	8017764 <chk_lock+0xa0>
 8017752:	4a09      	ldr	r2, [pc, #36]	; (8017778 <chk_lock+0xb4>)
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	011b      	lsls	r3, r3, #4
 8017758:	4413      	add	r3, r2
 801775a:	330c      	adds	r3, #12
 801775c:	881b      	ldrh	r3, [r3, #0]
 801775e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017762:	d101      	bne.n	8017768 <chk_lock+0xa4>
 8017764:	2310      	movs	r3, #16
 8017766:	e000      	b.n	801776a <chk_lock+0xa6>
 8017768:	2300      	movs	r3, #0
}
 801776a:	4618      	mov	r0, r3
 801776c:	3714      	adds	r7, #20
 801776e:	46bd      	mov	sp, r7
 8017770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017774:	4770      	bx	lr
 8017776:	bf00      	nop
 8017778:	240016bc 	.word	0x240016bc

0801777c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801777c:	b480      	push	{r7}
 801777e:	b083      	sub	sp, #12
 8017780:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8017782:	2300      	movs	r3, #0
 8017784:	607b      	str	r3, [r7, #4]
 8017786:	e002      	b.n	801778e <enq_lock+0x12>
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	3301      	adds	r3, #1
 801778c:	607b      	str	r3, [r7, #4]
 801778e:	687b      	ldr	r3, [r7, #4]
 8017790:	2b01      	cmp	r3, #1
 8017792:	d806      	bhi.n	80177a2 <enq_lock+0x26>
 8017794:	4a09      	ldr	r2, [pc, #36]	; (80177bc <enq_lock+0x40>)
 8017796:	687b      	ldr	r3, [r7, #4]
 8017798:	011b      	lsls	r3, r3, #4
 801779a:	4413      	add	r3, r2
 801779c:	681b      	ldr	r3, [r3, #0]
 801779e:	2b00      	cmp	r3, #0
 80177a0:	d1f2      	bne.n	8017788 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	2b02      	cmp	r3, #2
 80177a6:	bf14      	ite	ne
 80177a8:	2301      	movne	r3, #1
 80177aa:	2300      	moveq	r3, #0
 80177ac:	b2db      	uxtb	r3, r3
}
 80177ae:	4618      	mov	r0, r3
 80177b0:	370c      	adds	r7, #12
 80177b2:	46bd      	mov	sp, r7
 80177b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177b8:	4770      	bx	lr
 80177ba:	bf00      	nop
 80177bc:	240016bc 	.word	0x240016bc

080177c0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80177c0:	b480      	push	{r7}
 80177c2:	b085      	sub	sp, #20
 80177c4:	af00      	add	r7, sp, #0
 80177c6:	6078      	str	r0, [r7, #4]
 80177c8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80177ca:	2300      	movs	r3, #0
 80177cc:	60fb      	str	r3, [r7, #12]
 80177ce:	e01f      	b.n	8017810 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80177d0:	4a41      	ldr	r2, [pc, #260]	; (80178d8 <inc_lock+0x118>)
 80177d2:	68fb      	ldr	r3, [r7, #12]
 80177d4:	011b      	lsls	r3, r3, #4
 80177d6:	4413      	add	r3, r2
 80177d8:	681a      	ldr	r2, [r3, #0]
 80177da:	687b      	ldr	r3, [r7, #4]
 80177dc:	681b      	ldr	r3, [r3, #0]
 80177de:	429a      	cmp	r2, r3
 80177e0:	d113      	bne.n	801780a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80177e2:	4a3d      	ldr	r2, [pc, #244]	; (80178d8 <inc_lock+0x118>)
 80177e4:	68fb      	ldr	r3, [r7, #12]
 80177e6:	011b      	lsls	r3, r3, #4
 80177e8:	4413      	add	r3, r2
 80177ea:	3304      	adds	r3, #4
 80177ec:	681a      	ldr	r2, [r3, #0]
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80177f2:	429a      	cmp	r2, r3
 80177f4:	d109      	bne.n	801780a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80177f6:	4a38      	ldr	r2, [pc, #224]	; (80178d8 <inc_lock+0x118>)
 80177f8:	68fb      	ldr	r3, [r7, #12]
 80177fa:	011b      	lsls	r3, r3, #4
 80177fc:	4413      	add	r3, r2
 80177fe:	3308      	adds	r3, #8
 8017800:	681a      	ldr	r2, [r3, #0]
 8017802:	687b      	ldr	r3, [r7, #4]
 8017804:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8017806:	429a      	cmp	r2, r3
 8017808:	d006      	beq.n	8017818 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801780a:	68fb      	ldr	r3, [r7, #12]
 801780c:	3301      	adds	r3, #1
 801780e:	60fb      	str	r3, [r7, #12]
 8017810:	68fb      	ldr	r3, [r7, #12]
 8017812:	2b01      	cmp	r3, #1
 8017814:	d9dc      	bls.n	80177d0 <inc_lock+0x10>
 8017816:	e000      	b.n	801781a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8017818:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801781a:	68fb      	ldr	r3, [r7, #12]
 801781c:	2b02      	cmp	r3, #2
 801781e:	d132      	bne.n	8017886 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8017820:	2300      	movs	r3, #0
 8017822:	60fb      	str	r3, [r7, #12]
 8017824:	e002      	b.n	801782c <inc_lock+0x6c>
 8017826:	68fb      	ldr	r3, [r7, #12]
 8017828:	3301      	adds	r3, #1
 801782a:	60fb      	str	r3, [r7, #12]
 801782c:	68fb      	ldr	r3, [r7, #12]
 801782e:	2b01      	cmp	r3, #1
 8017830:	d806      	bhi.n	8017840 <inc_lock+0x80>
 8017832:	4a29      	ldr	r2, [pc, #164]	; (80178d8 <inc_lock+0x118>)
 8017834:	68fb      	ldr	r3, [r7, #12]
 8017836:	011b      	lsls	r3, r3, #4
 8017838:	4413      	add	r3, r2
 801783a:	681b      	ldr	r3, [r3, #0]
 801783c:	2b00      	cmp	r3, #0
 801783e:	d1f2      	bne.n	8017826 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8017840:	68fb      	ldr	r3, [r7, #12]
 8017842:	2b02      	cmp	r3, #2
 8017844:	d101      	bne.n	801784a <inc_lock+0x8a>
 8017846:	2300      	movs	r3, #0
 8017848:	e040      	b.n	80178cc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	681a      	ldr	r2, [r3, #0]
 801784e:	4922      	ldr	r1, [pc, #136]	; (80178d8 <inc_lock+0x118>)
 8017850:	68fb      	ldr	r3, [r7, #12]
 8017852:	011b      	lsls	r3, r3, #4
 8017854:	440b      	add	r3, r1
 8017856:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	689a      	ldr	r2, [r3, #8]
 801785c:	491e      	ldr	r1, [pc, #120]	; (80178d8 <inc_lock+0x118>)
 801785e:	68fb      	ldr	r3, [r7, #12]
 8017860:	011b      	lsls	r3, r3, #4
 8017862:	440b      	add	r3, r1
 8017864:	3304      	adds	r3, #4
 8017866:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	695a      	ldr	r2, [r3, #20]
 801786c:	491a      	ldr	r1, [pc, #104]	; (80178d8 <inc_lock+0x118>)
 801786e:	68fb      	ldr	r3, [r7, #12]
 8017870:	011b      	lsls	r3, r3, #4
 8017872:	440b      	add	r3, r1
 8017874:	3308      	adds	r3, #8
 8017876:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8017878:	4a17      	ldr	r2, [pc, #92]	; (80178d8 <inc_lock+0x118>)
 801787a:	68fb      	ldr	r3, [r7, #12]
 801787c:	011b      	lsls	r3, r3, #4
 801787e:	4413      	add	r3, r2
 8017880:	330c      	adds	r3, #12
 8017882:	2200      	movs	r2, #0
 8017884:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8017886:	683b      	ldr	r3, [r7, #0]
 8017888:	2b00      	cmp	r3, #0
 801788a:	d009      	beq.n	80178a0 <inc_lock+0xe0>
 801788c:	4a12      	ldr	r2, [pc, #72]	; (80178d8 <inc_lock+0x118>)
 801788e:	68fb      	ldr	r3, [r7, #12]
 8017890:	011b      	lsls	r3, r3, #4
 8017892:	4413      	add	r3, r2
 8017894:	330c      	adds	r3, #12
 8017896:	881b      	ldrh	r3, [r3, #0]
 8017898:	2b00      	cmp	r3, #0
 801789a:	d001      	beq.n	80178a0 <inc_lock+0xe0>
 801789c:	2300      	movs	r3, #0
 801789e:	e015      	b.n	80178cc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80178a0:	683b      	ldr	r3, [r7, #0]
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	d108      	bne.n	80178b8 <inc_lock+0xf8>
 80178a6:	4a0c      	ldr	r2, [pc, #48]	; (80178d8 <inc_lock+0x118>)
 80178a8:	68fb      	ldr	r3, [r7, #12]
 80178aa:	011b      	lsls	r3, r3, #4
 80178ac:	4413      	add	r3, r2
 80178ae:	330c      	adds	r3, #12
 80178b0:	881b      	ldrh	r3, [r3, #0]
 80178b2:	3301      	adds	r3, #1
 80178b4:	b29a      	uxth	r2, r3
 80178b6:	e001      	b.n	80178bc <inc_lock+0xfc>
 80178b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80178bc:	4906      	ldr	r1, [pc, #24]	; (80178d8 <inc_lock+0x118>)
 80178be:	68fb      	ldr	r3, [r7, #12]
 80178c0:	011b      	lsls	r3, r3, #4
 80178c2:	440b      	add	r3, r1
 80178c4:	330c      	adds	r3, #12
 80178c6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80178c8:	68fb      	ldr	r3, [r7, #12]
 80178ca:	3301      	adds	r3, #1
}
 80178cc:	4618      	mov	r0, r3
 80178ce:	3714      	adds	r7, #20
 80178d0:	46bd      	mov	sp, r7
 80178d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178d6:	4770      	bx	lr
 80178d8:	240016bc 	.word	0x240016bc

080178dc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80178dc:	b480      	push	{r7}
 80178de:	b085      	sub	sp, #20
 80178e0:	af00      	add	r7, sp, #0
 80178e2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80178e4:	687b      	ldr	r3, [r7, #4]
 80178e6:	3b01      	subs	r3, #1
 80178e8:	607b      	str	r3, [r7, #4]
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	2b01      	cmp	r3, #1
 80178ee:	d825      	bhi.n	801793c <dec_lock+0x60>
		n = Files[i].ctr;
 80178f0:	4a17      	ldr	r2, [pc, #92]	; (8017950 <dec_lock+0x74>)
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	011b      	lsls	r3, r3, #4
 80178f6:	4413      	add	r3, r2
 80178f8:	330c      	adds	r3, #12
 80178fa:	881b      	ldrh	r3, [r3, #0]
 80178fc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80178fe:	89fb      	ldrh	r3, [r7, #14]
 8017900:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017904:	d101      	bne.n	801790a <dec_lock+0x2e>
 8017906:	2300      	movs	r3, #0
 8017908:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801790a:	89fb      	ldrh	r3, [r7, #14]
 801790c:	2b00      	cmp	r3, #0
 801790e:	d002      	beq.n	8017916 <dec_lock+0x3a>
 8017910:	89fb      	ldrh	r3, [r7, #14]
 8017912:	3b01      	subs	r3, #1
 8017914:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8017916:	4a0e      	ldr	r2, [pc, #56]	; (8017950 <dec_lock+0x74>)
 8017918:	687b      	ldr	r3, [r7, #4]
 801791a:	011b      	lsls	r3, r3, #4
 801791c:	4413      	add	r3, r2
 801791e:	330c      	adds	r3, #12
 8017920:	89fa      	ldrh	r2, [r7, #14]
 8017922:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8017924:	89fb      	ldrh	r3, [r7, #14]
 8017926:	2b00      	cmp	r3, #0
 8017928:	d105      	bne.n	8017936 <dec_lock+0x5a>
 801792a:	4a09      	ldr	r2, [pc, #36]	; (8017950 <dec_lock+0x74>)
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	011b      	lsls	r3, r3, #4
 8017930:	4413      	add	r3, r2
 8017932:	2200      	movs	r2, #0
 8017934:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8017936:	2300      	movs	r3, #0
 8017938:	737b      	strb	r3, [r7, #13]
 801793a:	e001      	b.n	8017940 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801793c:	2302      	movs	r3, #2
 801793e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8017940:	7b7b      	ldrb	r3, [r7, #13]
}
 8017942:	4618      	mov	r0, r3
 8017944:	3714      	adds	r7, #20
 8017946:	46bd      	mov	sp, r7
 8017948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801794c:	4770      	bx	lr
 801794e:	bf00      	nop
 8017950:	240016bc 	.word	0x240016bc

08017954 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8017954:	b480      	push	{r7}
 8017956:	b085      	sub	sp, #20
 8017958:	af00      	add	r7, sp, #0
 801795a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801795c:	2300      	movs	r3, #0
 801795e:	60fb      	str	r3, [r7, #12]
 8017960:	e010      	b.n	8017984 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8017962:	4a0d      	ldr	r2, [pc, #52]	; (8017998 <clear_lock+0x44>)
 8017964:	68fb      	ldr	r3, [r7, #12]
 8017966:	011b      	lsls	r3, r3, #4
 8017968:	4413      	add	r3, r2
 801796a:	681b      	ldr	r3, [r3, #0]
 801796c:	687a      	ldr	r2, [r7, #4]
 801796e:	429a      	cmp	r2, r3
 8017970:	d105      	bne.n	801797e <clear_lock+0x2a>
 8017972:	4a09      	ldr	r2, [pc, #36]	; (8017998 <clear_lock+0x44>)
 8017974:	68fb      	ldr	r3, [r7, #12]
 8017976:	011b      	lsls	r3, r3, #4
 8017978:	4413      	add	r3, r2
 801797a:	2200      	movs	r2, #0
 801797c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801797e:	68fb      	ldr	r3, [r7, #12]
 8017980:	3301      	adds	r3, #1
 8017982:	60fb      	str	r3, [r7, #12]
 8017984:	68fb      	ldr	r3, [r7, #12]
 8017986:	2b01      	cmp	r3, #1
 8017988:	d9eb      	bls.n	8017962 <clear_lock+0xe>
	}
}
 801798a:	bf00      	nop
 801798c:	bf00      	nop
 801798e:	3714      	adds	r7, #20
 8017990:	46bd      	mov	sp, r7
 8017992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017996:	4770      	bx	lr
 8017998:	240016bc 	.word	0x240016bc

0801799c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801799c:	b580      	push	{r7, lr}
 801799e:	b086      	sub	sp, #24
 80179a0:	af00      	add	r7, sp, #0
 80179a2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80179a4:	2300      	movs	r3, #0
 80179a6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	78db      	ldrb	r3, [r3, #3]
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	d034      	beq.n	8017a1a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80179b4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	7858      	ldrb	r0, [r3, #1]
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80179c0:	2301      	movs	r3, #1
 80179c2:	697a      	ldr	r2, [r7, #20]
 80179c4:	f7ff fd40 	bl	8017448 <disk_write>
 80179c8:	4603      	mov	r3, r0
 80179ca:	2b00      	cmp	r3, #0
 80179cc:	d002      	beq.n	80179d4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80179ce:	2301      	movs	r3, #1
 80179d0:	73fb      	strb	r3, [r7, #15]
 80179d2:	e022      	b.n	8017a1a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	2200      	movs	r2, #0
 80179d8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80179de:	697a      	ldr	r2, [r7, #20]
 80179e0:	1ad2      	subs	r2, r2, r3
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	6a1b      	ldr	r3, [r3, #32]
 80179e6:	429a      	cmp	r2, r3
 80179e8:	d217      	bcs.n	8017a1a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	789b      	ldrb	r3, [r3, #2]
 80179ee:	613b      	str	r3, [r7, #16]
 80179f0:	e010      	b.n	8017a14 <sync_window+0x78>
					wsect += fs->fsize;
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	6a1b      	ldr	r3, [r3, #32]
 80179f6:	697a      	ldr	r2, [r7, #20]
 80179f8:	4413      	add	r3, r2
 80179fa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80179fc:	687b      	ldr	r3, [r7, #4]
 80179fe:	7858      	ldrb	r0, [r3, #1]
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017a06:	2301      	movs	r3, #1
 8017a08:	697a      	ldr	r2, [r7, #20]
 8017a0a:	f7ff fd1d 	bl	8017448 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8017a0e:	693b      	ldr	r3, [r7, #16]
 8017a10:	3b01      	subs	r3, #1
 8017a12:	613b      	str	r3, [r7, #16]
 8017a14:	693b      	ldr	r3, [r7, #16]
 8017a16:	2b01      	cmp	r3, #1
 8017a18:	d8eb      	bhi.n	80179f2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8017a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8017a1c:	4618      	mov	r0, r3
 8017a1e:	3718      	adds	r7, #24
 8017a20:	46bd      	mov	sp, r7
 8017a22:	bd80      	pop	{r7, pc}

08017a24 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8017a24:	b580      	push	{r7, lr}
 8017a26:	b084      	sub	sp, #16
 8017a28:	af00      	add	r7, sp, #0
 8017a2a:	6078      	str	r0, [r7, #4]
 8017a2c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8017a2e:	2300      	movs	r3, #0
 8017a30:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017a36:	683a      	ldr	r2, [r7, #0]
 8017a38:	429a      	cmp	r2, r3
 8017a3a:	d01b      	beq.n	8017a74 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8017a3c:	6878      	ldr	r0, [r7, #4]
 8017a3e:	f7ff ffad 	bl	801799c <sync_window>
 8017a42:	4603      	mov	r3, r0
 8017a44:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8017a46:	7bfb      	ldrb	r3, [r7, #15]
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	d113      	bne.n	8017a74 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	7858      	ldrb	r0, [r3, #1]
 8017a50:	687b      	ldr	r3, [r7, #4]
 8017a52:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017a56:	2301      	movs	r3, #1
 8017a58:	683a      	ldr	r2, [r7, #0]
 8017a5a:	f7ff fcd5 	bl	8017408 <disk_read>
 8017a5e:	4603      	mov	r3, r0
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d004      	beq.n	8017a6e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8017a64:	f04f 33ff 	mov.w	r3, #4294967295
 8017a68:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8017a6a:	2301      	movs	r3, #1
 8017a6c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	683a      	ldr	r2, [r7, #0]
 8017a72:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8017a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8017a76:	4618      	mov	r0, r3
 8017a78:	3710      	adds	r7, #16
 8017a7a:	46bd      	mov	sp, r7
 8017a7c:	bd80      	pop	{r7, pc}
	...

08017a80 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8017a80:	b580      	push	{r7, lr}
 8017a82:	b084      	sub	sp, #16
 8017a84:	af00      	add	r7, sp, #0
 8017a86:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8017a88:	6878      	ldr	r0, [r7, #4]
 8017a8a:	f7ff ff87 	bl	801799c <sync_window>
 8017a8e:	4603      	mov	r3, r0
 8017a90:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8017a92:	7bfb      	ldrb	r3, [r7, #15]
 8017a94:	2b00      	cmp	r3, #0
 8017a96:	d159      	bne.n	8017b4c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	781b      	ldrb	r3, [r3, #0]
 8017a9c:	2b03      	cmp	r3, #3
 8017a9e:	d149      	bne.n	8017b34 <sync_fs+0xb4>
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	791b      	ldrb	r3, [r3, #4]
 8017aa4:	2b01      	cmp	r3, #1
 8017aa6:	d145      	bne.n	8017b34 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	899b      	ldrh	r3, [r3, #12]
 8017ab2:	461a      	mov	r2, r3
 8017ab4:	2100      	movs	r1, #0
 8017ab6:	f7ff fda8 	bl	801760a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8017aba:	687b      	ldr	r3, [r7, #4]
 8017abc:	3338      	adds	r3, #56	; 0x38
 8017abe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017ac2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8017ac6:	4618      	mov	r0, r3
 8017ac8:	f7ff fd37 	bl	801753a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	3338      	adds	r3, #56	; 0x38
 8017ad0:	4921      	ldr	r1, [pc, #132]	; (8017b58 <sync_fs+0xd8>)
 8017ad2:	4618      	mov	r0, r3
 8017ad4:	f7ff fd4c 	bl	8017570 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8017ad8:	687b      	ldr	r3, [r7, #4]
 8017ada:	3338      	adds	r3, #56	; 0x38
 8017adc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8017ae0:	491e      	ldr	r1, [pc, #120]	; (8017b5c <sync_fs+0xdc>)
 8017ae2:	4618      	mov	r0, r3
 8017ae4:	f7ff fd44 	bl	8017570 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8017ae8:	687b      	ldr	r3, [r7, #4]
 8017aea:	3338      	adds	r3, #56	; 0x38
 8017aec:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8017af0:	687b      	ldr	r3, [r7, #4]
 8017af2:	699b      	ldr	r3, [r3, #24]
 8017af4:	4619      	mov	r1, r3
 8017af6:	4610      	mov	r0, r2
 8017af8:	f7ff fd3a 	bl	8017570 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8017afc:	687b      	ldr	r3, [r7, #4]
 8017afe:	3338      	adds	r3, #56	; 0x38
 8017b00:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	695b      	ldr	r3, [r3, #20]
 8017b08:	4619      	mov	r1, r3
 8017b0a:	4610      	mov	r0, r2
 8017b0c:	f7ff fd30 	bl	8017570 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8017b10:	687b      	ldr	r3, [r7, #4]
 8017b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b14:	1c5a      	adds	r2, r3, #1
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	7858      	ldrb	r0, [r3, #1]
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017b24:	687b      	ldr	r3, [r7, #4]
 8017b26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8017b28:	2301      	movs	r3, #1
 8017b2a:	f7ff fc8d 	bl	8017448 <disk_write>
			fs->fsi_flag = 0;
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	2200      	movs	r2, #0
 8017b32:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	785b      	ldrb	r3, [r3, #1]
 8017b38:	2200      	movs	r2, #0
 8017b3a:	2100      	movs	r1, #0
 8017b3c:	4618      	mov	r0, r3
 8017b3e:	f7ff fca3 	bl	8017488 <disk_ioctl>
 8017b42:	4603      	mov	r3, r0
 8017b44:	2b00      	cmp	r3, #0
 8017b46:	d001      	beq.n	8017b4c <sync_fs+0xcc>
 8017b48:	2301      	movs	r3, #1
 8017b4a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8017b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8017b4e:	4618      	mov	r0, r3
 8017b50:	3710      	adds	r7, #16
 8017b52:	46bd      	mov	sp, r7
 8017b54:	bd80      	pop	{r7, pc}
 8017b56:	bf00      	nop
 8017b58:	41615252 	.word	0x41615252
 8017b5c:	61417272 	.word	0x61417272

08017b60 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8017b60:	b480      	push	{r7}
 8017b62:	b083      	sub	sp, #12
 8017b64:	af00      	add	r7, sp, #0
 8017b66:	6078      	str	r0, [r7, #4]
 8017b68:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8017b6a:	683b      	ldr	r3, [r7, #0]
 8017b6c:	3b02      	subs	r3, #2
 8017b6e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017b70:	687b      	ldr	r3, [r7, #4]
 8017b72:	69db      	ldr	r3, [r3, #28]
 8017b74:	3b02      	subs	r3, #2
 8017b76:	683a      	ldr	r2, [r7, #0]
 8017b78:	429a      	cmp	r2, r3
 8017b7a:	d301      	bcc.n	8017b80 <clust2sect+0x20>
 8017b7c:	2300      	movs	r3, #0
 8017b7e:	e008      	b.n	8017b92 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8017b80:	687b      	ldr	r3, [r7, #4]
 8017b82:	895b      	ldrh	r3, [r3, #10]
 8017b84:	461a      	mov	r2, r3
 8017b86:	683b      	ldr	r3, [r7, #0]
 8017b88:	fb03 f202 	mul.w	r2, r3, r2
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017b90:	4413      	add	r3, r2
}
 8017b92:	4618      	mov	r0, r3
 8017b94:	370c      	adds	r7, #12
 8017b96:	46bd      	mov	sp, r7
 8017b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b9c:	4770      	bx	lr

08017b9e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8017b9e:	b580      	push	{r7, lr}
 8017ba0:	b086      	sub	sp, #24
 8017ba2:	af00      	add	r7, sp, #0
 8017ba4:	6078      	str	r0, [r7, #4]
 8017ba6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	681b      	ldr	r3, [r3, #0]
 8017bac:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8017bae:	683b      	ldr	r3, [r7, #0]
 8017bb0:	2b01      	cmp	r3, #1
 8017bb2:	d904      	bls.n	8017bbe <get_fat+0x20>
 8017bb4:	693b      	ldr	r3, [r7, #16]
 8017bb6:	69db      	ldr	r3, [r3, #28]
 8017bb8:	683a      	ldr	r2, [r7, #0]
 8017bba:	429a      	cmp	r2, r3
 8017bbc:	d302      	bcc.n	8017bc4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8017bbe:	2301      	movs	r3, #1
 8017bc0:	617b      	str	r3, [r7, #20]
 8017bc2:	e0bb      	b.n	8017d3c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8017bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8017bc8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8017bca:	693b      	ldr	r3, [r7, #16]
 8017bcc:	781b      	ldrb	r3, [r3, #0]
 8017bce:	2b03      	cmp	r3, #3
 8017bd0:	f000 8083 	beq.w	8017cda <get_fat+0x13c>
 8017bd4:	2b03      	cmp	r3, #3
 8017bd6:	f300 80a7 	bgt.w	8017d28 <get_fat+0x18a>
 8017bda:	2b01      	cmp	r3, #1
 8017bdc:	d002      	beq.n	8017be4 <get_fat+0x46>
 8017bde:	2b02      	cmp	r3, #2
 8017be0:	d056      	beq.n	8017c90 <get_fat+0xf2>
 8017be2:	e0a1      	b.n	8017d28 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8017be4:	683b      	ldr	r3, [r7, #0]
 8017be6:	60fb      	str	r3, [r7, #12]
 8017be8:	68fb      	ldr	r3, [r7, #12]
 8017bea:	085b      	lsrs	r3, r3, #1
 8017bec:	68fa      	ldr	r2, [r7, #12]
 8017bee:	4413      	add	r3, r2
 8017bf0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017bf2:	693b      	ldr	r3, [r7, #16]
 8017bf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017bf6:	693b      	ldr	r3, [r7, #16]
 8017bf8:	899b      	ldrh	r3, [r3, #12]
 8017bfa:	4619      	mov	r1, r3
 8017bfc:	68fb      	ldr	r3, [r7, #12]
 8017bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8017c02:	4413      	add	r3, r2
 8017c04:	4619      	mov	r1, r3
 8017c06:	6938      	ldr	r0, [r7, #16]
 8017c08:	f7ff ff0c 	bl	8017a24 <move_window>
 8017c0c:	4603      	mov	r3, r0
 8017c0e:	2b00      	cmp	r3, #0
 8017c10:	f040 808d 	bne.w	8017d2e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8017c14:	68fb      	ldr	r3, [r7, #12]
 8017c16:	1c5a      	adds	r2, r3, #1
 8017c18:	60fa      	str	r2, [r7, #12]
 8017c1a:	693a      	ldr	r2, [r7, #16]
 8017c1c:	8992      	ldrh	r2, [r2, #12]
 8017c1e:	fbb3 f1f2 	udiv	r1, r3, r2
 8017c22:	fb01 f202 	mul.w	r2, r1, r2
 8017c26:	1a9b      	subs	r3, r3, r2
 8017c28:	693a      	ldr	r2, [r7, #16]
 8017c2a:	4413      	add	r3, r2
 8017c2c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017c30:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017c32:	693b      	ldr	r3, [r7, #16]
 8017c34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017c36:	693b      	ldr	r3, [r7, #16]
 8017c38:	899b      	ldrh	r3, [r3, #12]
 8017c3a:	4619      	mov	r1, r3
 8017c3c:	68fb      	ldr	r3, [r7, #12]
 8017c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8017c42:	4413      	add	r3, r2
 8017c44:	4619      	mov	r1, r3
 8017c46:	6938      	ldr	r0, [r7, #16]
 8017c48:	f7ff feec 	bl	8017a24 <move_window>
 8017c4c:	4603      	mov	r3, r0
 8017c4e:	2b00      	cmp	r3, #0
 8017c50:	d16f      	bne.n	8017d32 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8017c52:	693b      	ldr	r3, [r7, #16]
 8017c54:	899b      	ldrh	r3, [r3, #12]
 8017c56:	461a      	mov	r2, r3
 8017c58:	68fb      	ldr	r3, [r7, #12]
 8017c5a:	fbb3 f1f2 	udiv	r1, r3, r2
 8017c5e:	fb01 f202 	mul.w	r2, r1, r2
 8017c62:	1a9b      	subs	r3, r3, r2
 8017c64:	693a      	ldr	r2, [r7, #16]
 8017c66:	4413      	add	r3, r2
 8017c68:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017c6c:	021b      	lsls	r3, r3, #8
 8017c6e:	461a      	mov	r2, r3
 8017c70:	68bb      	ldr	r3, [r7, #8]
 8017c72:	4313      	orrs	r3, r2
 8017c74:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8017c76:	683b      	ldr	r3, [r7, #0]
 8017c78:	f003 0301 	and.w	r3, r3, #1
 8017c7c:	2b00      	cmp	r3, #0
 8017c7e:	d002      	beq.n	8017c86 <get_fat+0xe8>
 8017c80:	68bb      	ldr	r3, [r7, #8]
 8017c82:	091b      	lsrs	r3, r3, #4
 8017c84:	e002      	b.n	8017c8c <get_fat+0xee>
 8017c86:	68bb      	ldr	r3, [r7, #8]
 8017c88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8017c8c:	617b      	str	r3, [r7, #20]
			break;
 8017c8e:	e055      	b.n	8017d3c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8017c90:	693b      	ldr	r3, [r7, #16]
 8017c92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017c94:	693b      	ldr	r3, [r7, #16]
 8017c96:	899b      	ldrh	r3, [r3, #12]
 8017c98:	085b      	lsrs	r3, r3, #1
 8017c9a:	b29b      	uxth	r3, r3
 8017c9c:	4619      	mov	r1, r3
 8017c9e:	683b      	ldr	r3, [r7, #0]
 8017ca0:	fbb3 f3f1 	udiv	r3, r3, r1
 8017ca4:	4413      	add	r3, r2
 8017ca6:	4619      	mov	r1, r3
 8017ca8:	6938      	ldr	r0, [r7, #16]
 8017caa:	f7ff febb 	bl	8017a24 <move_window>
 8017cae:	4603      	mov	r3, r0
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d140      	bne.n	8017d36 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8017cb4:	693b      	ldr	r3, [r7, #16]
 8017cb6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017cba:	683b      	ldr	r3, [r7, #0]
 8017cbc:	005b      	lsls	r3, r3, #1
 8017cbe:	693a      	ldr	r2, [r7, #16]
 8017cc0:	8992      	ldrh	r2, [r2, #12]
 8017cc2:	fbb3 f0f2 	udiv	r0, r3, r2
 8017cc6:	fb00 f202 	mul.w	r2, r0, r2
 8017cca:	1a9b      	subs	r3, r3, r2
 8017ccc:	440b      	add	r3, r1
 8017cce:	4618      	mov	r0, r3
 8017cd0:	f7ff fbf8 	bl	80174c4 <ld_word>
 8017cd4:	4603      	mov	r3, r0
 8017cd6:	617b      	str	r3, [r7, #20]
			break;
 8017cd8:	e030      	b.n	8017d3c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017cda:	693b      	ldr	r3, [r7, #16]
 8017cdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017cde:	693b      	ldr	r3, [r7, #16]
 8017ce0:	899b      	ldrh	r3, [r3, #12]
 8017ce2:	089b      	lsrs	r3, r3, #2
 8017ce4:	b29b      	uxth	r3, r3
 8017ce6:	4619      	mov	r1, r3
 8017ce8:	683b      	ldr	r3, [r7, #0]
 8017cea:	fbb3 f3f1 	udiv	r3, r3, r1
 8017cee:	4413      	add	r3, r2
 8017cf0:	4619      	mov	r1, r3
 8017cf2:	6938      	ldr	r0, [r7, #16]
 8017cf4:	f7ff fe96 	bl	8017a24 <move_window>
 8017cf8:	4603      	mov	r3, r0
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	d11d      	bne.n	8017d3a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8017cfe:	693b      	ldr	r3, [r7, #16]
 8017d00:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017d04:	683b      	ldr	r3, [r7, #0]
 8017d06:	009b      	lsls	r3, r3, #2
 8017d08:	693a      	ldr	r2, [r7, #16]
 8017d0a:	8992      	ldrh	r2, [r2, #12]
 8017d0c:	fbb3 f0f2 	udiv	r0, r3, r2
 8017d10:	fb00 f202 	mul.w	r2, r0, r2
 8017d14:	1a9b      	subs	r3, r3, r2
 8017d16:	440b      	add	r3, r1
 8017d18:	4618      	mov	r0, r3
 8017d1a:	f7ff fbeb 	bl	80174f4 <ld_dword>
 8017d1e:	4603      	mov	r3, r0
 8017d20:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8017d24:	617b      	str	r3, [r7, #20]
			break;
 8017d26:	e009      	b.n	8017d3c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8017d28:	2301      	movs	r3, #1
 8017d2a:	617b      	str	r3, [r7, #20]
 8017d2c:	e006      	b.n	8017d3c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017d2e:	bf00      	nop
 8017d30:	e004      	b.n	8017d3c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017d32:	bf00      	nop
 8017d34:	e002      	b.n	8017d3c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8017d36:	bf00      	nop
 8017d38:	e000      	b.n	8017d3c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017d3a:	bf00      	nop
		}
	}

	return val;
 8017d3c:	697b      	ldr	r3, [r7, #20]
}
 8017d3e:	4618      	mov	r0, r3
 8017d40:	3718      	adds	r7, #24
 8017d42:	46bd      	mov	sp, r7
 8017d44:	bd80      	pop	{r7, pc}

08017d46 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8017d46:	b590      	push	{r4, r7, lr}
 8017d48:	b089      	sub	sp, #36	; 0x24
 8017d4a:	af00      	add	r7, sp, #0
 8017d4c:	60f8      	str	r0, [r7, #12]
 8017d4e:	60b9      	str	r1, [r7, #8]
 8017d50:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8017d52:	2302      	movs	r3, #2
 8017d54:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8017d56:	68bb      	ldr	r3, [r7, #8]
 8017d58:	2b01      	cmp	r3, #1
 8017d5a:	f240 8102 	bls.w	8017f62 <put_fat+0x21c>
 8017d5e:	68fb      	ldr	r3, [r7, #12]
 8017d60:	69db      	ldr	r3, [r3, #28]
 8017d62:	68ba      	ldr	r2, [r7, #8]
 8017d64:	429a      	cmp	r2, r3
 8017d66:	f080 80fc 	bcs.w	8017f62 <put_fat+0x21c>
		switch (fs->fs_type) {
 8017d6a:	68fb      	ldr	r3, [r7, #12]
 8017d6c:	781b      	ldrb	r3, [r3, #0]
 8017d6e:	2b03      	cmp	r3, #3
 8017d70:	f000 80b6 	beq.w	8017ee0 <put_fat+0x19a>
 8017d74:	2b03      	cmp	r3, #3
 8017d76:	f300 80fd 	bgt.w	8017f74 <put_fat+0x22e>
 8017d7a:	2b01      	cmp	r3, #1
 8017d7c:	d003      	beq.n	8017d86 <put_fat+0x40>
 8017d7e:	2b02      	cmp	r3, #2
 8017d80:	f000 8083 	beq.w	8017e8a <put_fat+0x144>
 8017d84:	e0f6      	b.n	8017f74 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8017d86:	68bb      	ldr	r3, [r7, #8]
 8017d88:	61bb      	str	r3, [r7, #24]
 8017d8a:	69bb      	ldr	r3, [r7, #24]
 8017d8c:	085b      	lsrs	r3, r3, #1
 8017d8e:	69ba      	ldr	r2, [r7, #24]
 8017d90:	4413      	add	r3, r2
 8017d92:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8017d94:	68fb      	ldr	r3, [r7, #12]
 8017d96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017d98:	68fb      	ldr	r3, [r7, #12]
 8017d9a:	899b      	ldrh	r3, [r3, #12]
 8017d9c:	4619      	mov	r1, r3
 8017d9e:	69bb      	ldr	r3, [r7, #24]
 8017da0:	fbb3 f3f1 	udiv	r3, r3, r1
 8017da4:	4413      	add	r3, r2
 8017da6:	4619      	mov	r1, r3
 8017da8:	68f8      	ldr	r0, [r7, #12]
 8017daa:	f7ff fe3b 	bl	8017a24 <move_window>
 8017dae:	4603      	mov	r3, r0
 8017db0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017db2:	7ffb      	ldrb	r3, [r7, #31]
 8017db4:	2b00      	cmp	r3, #0
 8017db6:	f040 80d6 	bne.w	8017f66 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8017dba:	68fb      	ldr	r3, [r7, #12]
 8017dbc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017dc0:	69bb      	ldr	r3, [r7, #24]
 8017dc2:	1c5a      	adds	r2, r3, #1
 8017dc4:	61ba      	str	r2, [r7, #24]
 8017dc6:	68fa      	ldr	r2, [r7, #12]
 8017dc8:	8992      	ldrh	r2, [r2, #12]
 8017dca:	fbb3 f0f2 	udiv	r0, r3, r2
 8017dce:	fb00 f202 	mul.w	r2, r0, r2
 8017dd2:	1a9b      	subs	r3, r3, r2
 8017dd4:	440b      	add	r3, r1
 8017dd6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8017dd8:	68bb      	ldr	r3, [r7, #8]
 8017dda:	f003 0301 	and.w	r3, r3, #1
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	d00d      	beq.n	8017dfe <put_fat+0xb8>
 8017de2:	697b      	ldr	r3, [r7, #20]
 8017de4:	781b      	ldrb	r3, [r3, #0]
 8017de6:	b25b      	sxtb	r3, r3
 8017de8:	f003 030f 	and.w	r3, r3, #15
 8017dec:	b25a      	sxtb	r2, r3
 8017dee:	687b      	ldr	r3, [r7, #4]
 8017df0:	b2db      	uxtb	r3, r3
 8017df2:	011b      	lsls	r3, r3, #4
 8017df4:	b25b      	sxtb	r3, r3
 8017df6:	4313      	orrs	r3, r2
 8017df8:	b25b      	sxtb	r3, r3
 8017dfa:	b2db      	uxtb	r3, r3
 8017dfc:	e001      	b.n	8017e02 <put_fat+0xbc>
 8017dfe:	687b      	ldr	r3, [r7, #4]
 8017e00:	b2db      	uxtb	r3, r3
 8017e02:	697a      	ldr	r2, [r7, #20]
 8017e04:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8017e06:	68fb      	ldr	r3, [r7, #12]
 8017e08:	2201      	movs	r2, #1
 8017e0a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8017e0c:	68fb      	ldr	r3, [r7, #12]
 8017e0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017e10:	68fb      	ldr	r3, [r7, #12]
 8017e12:	899b      	ldrh	r3, [r3, #12]
 8017e14:	4619      	mov	r1, r3
 8017e16:	69bb      	ldr	r3, [r7, #24]
 8017e18:	fbb3 f3f1 	udiv	r3, r3, r1
 8017e1c:	4413      	add	r3, r2
 8017e1e:	4619      	mov	r1, r3
 8017e20:	68f8      	ldr	r0, [r7, #12]
 8017e22:	f7ff fdff 	bl	8017a24 <move_window>
 8017e26:	4603      	mov	r3, r0
 8017e28:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017e2a:	7ffb      	ldrb	r3, [r7, #31]
 8017e2c:	2b00      	cmp	r3, #0
 8017e2e:	f040 809c 	bne.w	8017f6a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8017e32:	68fb      	ldr	r3, [r7, #12]
 8017e34:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017e38:	68fb      	ldr	r3, [r7, #12]
 8017e3a:	899b      	ldrh	r3, [r3, #12]
 8017e3c:	461a      	mov	r2, r3
 8017e3e:	69bb      	ldr	r3, [r7, #24]
 8017e40:	fbb3 f0f2 	udiv	r0, r3, r2
 8017e44:	fb00 f202 	mul.w	r2, r0, r2
 8017e48:	1a9b      	subs	r3, r3, r2
 8017e4a:	440b      	add	r3, r1
 8017e4c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8017e4e:	68bb      	ldr	r3, [r7, #8]
 8017e50:	f003 0301 	and.w	r3, r3, #1
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	d003      	beq.n	8017e60 <put_fat+0x11a>
 8017e58:	687b      	ldr	r3, [r7, #4]
 8017e5a:	091b      	lsrs	r3, r3, #4
 8017e5c:	b2db      	uxtb	r3, r3
 8017e5e:	e00e      	b.n	8017e7e <put_fat+0x138>
 8017e60:	697b      	ldr	r3, [r7, #20]
 8017e62:	781b      	ldrb	r3, [r3, #0]
 8017e64:	b25b      	sxtb	r3, r3
 8017e66:	f023 030f 	bic.w	r3, r3, #15
 8017e6a:	b25a      	sxtb	r2, r3
 8017e6c:	687b      	ldr	r3, [r7, #4]
 8017e6e:	0a1b      	lsrs	r3, r3, #8
 8017e70:	b25b      	sxtb	r3, r3
 8017e72:	f003 030f 	and.w	r3, r3, #15
 8017e76:	b25b      	sxtb	r3, r3
 8017e78:	4313      	orrs	r3, r2
 8017e7a:	b25b      	sxtb	r3, r3
 8017e7c:	b2db      	uxtb	r3, r3
 8017e7e:	697a      	ldr	r2, [r7, #20]
 8017e80:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8017e82:	68fb      	ldr	r3, [r7, #12]
 8017e84:	2201      	movs	r2, #1
 8017e86:	70da      	strb	r2, [r3, #3]
			break;
 8017e88:	e074      	b.n	8017f74 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8017e8a:	68fb      	ldr	r3, [r7, #12]
 8017e8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017e8e:	68fb      	ldr	r3, [r7, #12]
 8017e90:	899b      	ldrh	r3, [r3, #12]
 8017e92:	085b      	lsrs	r3, r3, #1
 8017e94:	b29b      	uxth	r3, r3
 8017e96:	4619      	mov	r1, r3
 8017e98:	68bb      	ldr	r3, [r7, #8]
 8017e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8017e9e:	4413      	add	r3, r2
 8017ea0:	4619      	mov	r1, r3
 8017ea2:	68f8      	ldr	r0, [r7, #12]
 8017ea4:	f7ff fdbe 	bl	8017a24 <move_window>
 8017ea8:	4603      	mov	r3, r0
 8017eaa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017eac:	7ffb      	ldrb	r3, [r7, #31]
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	d15d      	bne.n	8017f6e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8017eb2:	68fb      	ldr	r3, [r7, #12]
 8017eb4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017eb8:	68bb      	ldr	r3, [r7, #8]
 8017eba:	005b      	lsls	r3, r3, #1
 8017ebc:	68fa      	ldr	r2, [r7, #12]
 8017ebe:	8992      	ldrh	r2, [r2, #12]
 8017ec0:	fbb3 f0f2 	udiv	r0, r3, r2
 8017ec4:	fb00 f202 	mul.w	r2, r0, r2
 8017ec8:	1a9b      	subs	r3, r3, r2
 8017eca:	440b      	add	r3, r1
 8017ecc:	687a      	ldr	r2, [r7, #4]
 8017ece:	b292      	uxth	r2, r2
 8017ed0:	4611      	mov	r1, r2
 8017ed2:	4618      	mov	r0, r3
 8017ed4:	f7ff fb31 	bl	801753a <st_word>
			fs->wflag = 1;
 8017ed8:	68fb      	ldr	r3, [r7, #12]
 8017eda:	2201      	movs	r2, #1
 8017edc:	70da      	strb	r2, [r3, #3]
			break;
 8017ede:	e049      	b.n	8017f74 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8017ee0:	68fb      	ldr	r3, [r7, #12]
 8017ee2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017ee4:	68fb      	ldr	r3, [r7, #12]
 8017ee6:	899b      	ldrh	r3, [r3, #12]
 8017ee8:	089b      	lsrs	r3, r3, #2
 8017eea:	b29b      	uxth	r3, r3
 8017eec:	4619      	mov	r1, r3
 8017eee:	68bb      	ldr	r3, [r7, #8]
 8017ef0:	fbb3 f3f1 	udiv	r3, r3, r1
 8017ef4:	4413      	add	r3, r2
 8017ef6:	4619      	mov	r1, r3
 8017ef8:	68f8      	ldr	r0, [r7, #12]
 8017efa:	f7ff fd93 	bl	8017a24 <move_window>
 8017efe:	4603      	mov	r3, r0
 8017f00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017f02:	7ffb      	ldrb	r3, [r7, #31]
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	d134      	bne.n	8017f72 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8017f08:	687b      	ldr	r3, [r7, #4]
 8017f0a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8017f0e:	68fb      	ldr	r3, [r7, #12]
 8017f10:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017f14:	68bb      	ldr	r3, [r7, #8]
 8017f16:	009b      	lsls	r3, r3, #2
 8017f18:	68fa      	ldr	r2, [r7, #12]
 8017f1a:	8992      	ldrh	r2, [r2, #12]
 8017f1c:	fbb3 f0f2 	udiv	r0, r3, r2
 8017f20:	fb00 f202 	mul.w	r2, r0, r2
 8017f24:	1a9b      	subs	r3, r3, r2
 8017f26:	440b      	add	r3, r1
 8017f28:	4618      	mov	r0, r3
 8017f2a:	f7ff fae3 	bl	80174f4 <ld_dword>
 8017f2e:	4603      	mov	r3, r0
 8017f30:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8017f34:	4323      	orrs	r3, r4
 8017f36:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8017f38:	68fb      	ldr	r3, [r7, #12]
 8017f3a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017f3e:	68bb      	ldr	r3, [r7, #8]
 8017f40:	009b      	lsls	r3, r3, #2
 8017f42:	68fa      	ldr	r2, [r7, #12]
 8017f44:	8992      	ldrh	r2, [r2, #12]
 8017f46:	fbb3 f0f2 	udiv	r0, r3, r2
 8017f4a:	fb00 f202 	mul.w	r2, r0, r2
 8017f4e:	1a9b      	subs	r3, r3, r2
 8017f50:	440b      	add	r3, r1
 8017f52:	6879      	ldr	r1, [r7, #4]
 8017f54:	4618      	mov	r0, r3
 8017f56:	f7ff fb0b 	bl	8017570 <st_dword>
			fs->wflag = 1;
 8017f5a:	68fb      	ldr	r3, [r7, #12]
 8017f5c:	2201      	movs	r2, #1
 8017f5e:	70da      	strb	r2, [r3, #3]
			break;
 8017f60:	e008      	b.n	8017f74 <put_fat+0x22e>
		}
	}
 8017f62:	bf00      	nop
 8017f64:	e006      	b.n	8017f74 <put_fat+0x22e>
			if (res != FR_OK) break;
 8017f66:	bf00      	nop
 8017f68:	e004      	b.n	8017f74 <put_fat+0x22e>
			if (res != FR_OK) break;
 8017f6a:	bf00      	nop
 8017f6c:	e002      	b.n	8017f74 <put_fat+0x22e>
			if (res != FR_OK) break;
 8017f6e:	bf00      	nop
 8017f70:	e000      	b.n	8017f74 <put_fat+0x22e>
			if (res != FR_OK) break;
 8017f72:	bf00      	nop
	return res;
 8017f74:	7ffb      	ldrb	r3, [r7, #31]
}
 8017f76:	4618      	mov	r0, r3
 8017f78:	3724      	adds	r7, #36	; 0x24
 8017f7a:	46bd      	mov	sp, r7
 8017f7c:	bd90      	pop	{r4, r7, pc}

08017f7e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8017f7e:	b580      	push	{r7, lr}
 8017f80:	b088      	sub	sp, #32
 8017f82:	af00      	add	r7, sp, #0
 8017f84:	60f8      	str	r0, [r7, #12]
 8017f86:	60b9      	str	r1, [r7, #8]
 8017f88:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8017f8a:	2300      	movs	r3, #0
 8017f8c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8017f8e:	68fb      	ldr	r3, [r7, #12]
 8017f90:	681b      	ldr	r3, [r3, #0]
 8017f92:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8017f94:	68bb      	ldr	r3, [r7, #8]
 8017f96:	2b01      	cmp	r3, #1
 8017f98:	d904      	bls.n	8017fa4 <remove_chain+0x26>
 8017f9a:	69bb      	ldr	r3, [r7, #24]
 8017f9c:	69db      	ldr	r3, [r3, #28]
 8017f9e:	68ba      	ldr	r2, [r7, #8]
 8017fa0:	429a      	cmp	r2, r3
 8017fa2:	d301      	bcc.n	8017fa8 <remove_chain+0x2a>
 8017fa4:	2302      	movs	r3, #2
 8017fa6:	e04b      	b.n	8018040 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	d00c      	beq.n	8017fc8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8017fae:	f04f 32ff 	mov.w	r2, #4294967295
 8017fb2:	6879      	ldr	r1, [r7, #4]
 8017fb4:	69b8      	ldr	r0, [r7, #24]
 8017fb6:	f7ff fec6 	bl	8017d46 <put_fat>
 8017fba:	4603      	mov	r3, r0
 8017fbc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8017fbe:	7ffb      	ldrb	r3, [r7, #31]
 8017fc0:	2b00      	cmp	r3, #0
 8017fc2:	d001      	beq.n	8017fc8 <remove_chain+0x4a>
 8017fc4:	7ffb      	ldrb	r3, [r7, #31]
 8017fc6:	e03b      	b.n	8018040 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8017fc8:	68b9      	ldr	r1, [r7, #8]
 8017fca:	68f8      	ldr	r0, [r7, #12]
 8017fcc:	f7ff fde7 	bl	8017b9e <get_fat>
 8017fd0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8017fd2:	697b      	ldr	r3, [r7, #20]
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	d031      	beq.n	801803c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8017fd8:	697b      	ldr	r3, [r7, #20]
 8017fda:	2b01      	cmp	r3, #1
 8017fdc:	d101      	bne.n	8017fe2 <remove_chain+0x64>
 8017fde:	2302      	movs	r3, #2
 8017fe0:	e02e      	b.n	8018040 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8017fe2:	697b      	ldr	r3, [r7, #20]
 8017fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017fe8:	d101      	bne.n	8017fee <remove_chain+0x70>
 8017fea:	2301      	movs	r3, #1
 8017fec:	e028      	b.n	8018040 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8017fee:	2200      	movs	r2, #0
 8017ff0:	68b9      	ldr	r1, [r7, #8]
 8017ff2:	69b8      	ldr	r0, [r7, #24]
 8017ff4:	f7ff fea7 	bl	8017d46 <put_fat>
 8017ff8:	4603      	mov	r3, r0
 8017ffa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8017ffc:	7ffb      	ldrb	r3, [r7, #31]
 8017ffe:	2b00      	cmp	r3, #0
 8018000:	d001      	beq.n	8018006 <remove_chain+0x88>
 8018002:	7ffb      	ldrb	r3, [r7, #31]
 8018004:	e01c      	b.n	8018040 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8018006:	69bb      	ldr	r3, [r7, #24]
 8018008:	699a      	ldr	r2, [r3, #24]
 801800a:	69bb      	ldr	r3, [r7, #24]
 801800c:	69db      	ldr	r3, [r3, #28]
 801800e:	3b02      	subs	r3, #2
 8018010:	429a      	cmp	r2, r3
 8018012:	d20b      	bcs.n	801802c <remove_chain+0xae>
			fs->free_clst++;
 8018014:	69bb      	ldr	r3, [r7, #24]
 8018016:	699b      	ldr	r3, [r3, #24]
 8018018:	1c5a      	adds	r2, r3, #1
 801801a:	69bb      	ldr	r3, [r7, #24]
 801801c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 801801e:	69bb      	ldr	r3, [r7, #24]
 8018020:	791b      	ldrb	r3, [r3, #4]
 8018022:	f043 0301 	orr.w	r3, r3, #1
 8018026:	b2da      	uxtb	r2, r3
 8018028:	69bb      	ldr	r3, [r7, #24]
 801802a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801802c:	697b      	ldr	r3, [r7, #20]
 801802e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8018030:	69bb      	ldr	r3, [r7, #24]
 8018032:	69db      	ldr	r3, [r3, #28]
 8018034:	68ba      	ldr	r2, [r7, #8]
 8018036:	429a      	cmp	r2, r3
 8018038:	d3c6      	bcc.n	8017fc8 <remove_chain+0x4a>
 801803a:	e000      	b.n	801803e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801803c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801803e:	2300      	movs	r3, #0
}
 8018040:	4618      	mov	r0, r3
 8018042:	3720      	adds	r7, #32
 8018044:	46bd      	mov	sp, r7
 8018046:	bd80      	pop	{r7, pc}

08018048 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8018048:	b580      	push	{r7, lr}
 801804a:	b088      	sub	sp, #32
 801804c:	af00      	add	r7, sp, #0
 801804e:	6078      	str	r0, [r7, #4]
 8018050:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8018052:	687b      	ldr	r3, [r7, #4]
 8018054:	681b      	ldr	r3, [r3, #0]
 8018056:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8018058:	683b      	ldr	r3, [r7, #0]
 801805a:	2b00      	cmp	r3, #0
 801805c:	d10d      	bne.n	801807a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801805e:	693b      	ldr	r3, [r7, #16]
 8018060:	695b      	ldr	r3, [r3, #20]
 8018062:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8018064:	69bb      	ldr	r3, [r7, #24]
 8018066:	2b00      	cmp	r3, #0
 8018068:	d004      	beq.n	8018074 <create_chain+0x2c>
 801806a:	693b      	ldr	r3, [r7, #16]
 801806c:	69db      	ldr	r3, [r3, #28]
 801806e:	69ba      	ldr	r2, [r7, #24]
 8018070:	429a      	cmp	r2, r3
 8018072:	d31b      	bcc.n	80180ac <create_chain+0x64>
 8018074:	2301      	movs	r3, #1
 8018076:	61bb      	str	r3, [r7, #24]
 8018078:	e018      	b.n	80180ac <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801807a:	6839      	ldr	r1, [r7, #0]
 801807c:	6878      	ldr	r0, [r7, #4]
 801807e:	f7ff fd8e 	bl	8017b9e <get_fat>
 8018082:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8018084:	68fb      	ldr	r3, [r7, #12]
 8018086:	2b01      	cmp	r3, #1
 8018088:	d801      	bhi.n	801808e <create_chain+0x46>
 801808a:	2301      	movs	r3, #1
 801808c:	e070      	b.n	8018170 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801808e:	68fb      	ldr	r3, [r7, #12]
 8018090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018094:	d101      	bne.n	801809a <create_chain+0x52>
 8018096:	68fb      	ldr	r3, [r7, #12]
 8018098:	e06a      	b.n	8018170 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801809a:	693b      	ldr	r3, [r7, #16]
 801809c:	69db      	ldr	r3, [r3, #28]
 801809e:	68fa      	ldr	r2, [r7, #12]
 80180a0:	429a      	cmp	r2, r3
 80180a2:	d201      	bcs.n	80180a8 <create_chain+0x60>
 80180a4:	68fb      	ldr	r3, [r7, #12]
 80180a6:	e063      	b.n	8018170 <create_chain+0x128>
		scl = clst;
 80180a8:	683b      	ldr	r3, [r7, #0]
 80180aa:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80180ac:	69bb      	ldr	r3, [r7, #24]
 80180ae:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80180b0:	69fb      	ldr	r3, [r7, #28]
 80180b2:	3301      	adds	r3, #1
 80180b4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80180b6:	693b      	ldr	r3, [r7, #16]
 80180b8:	69db      	ldr	r3, [r3, #28]
 80180ba:	69fa      	ldr	r2, [r7, #28]
 80180bc:	429a      	cmp	r2, r3
 80180be:	d307      	bcc.n	80180d0 <create_chain+0x88>
				ncl = 2;
 80180c0:	2302      	movs	r3, #2
 80180c2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80180c4:	69fa      	ldr	r2, [r7, #28]
 80180c6:	69bb      	ldr	r3, [r7, #24]
 80180c8:	429a      	cmp	r2, r3
 80180ca:	d901      	bls.n	80180d0 <create_chain+0x88>
 80180cc:	2300      	movs	r3, #0
 80180ce:	e04f      	b.n	8018170 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80180d0:	69f9      	ldr	r1, [r7, #28]
 80180d2:	6878      	ldr	r0, [r7, #4]
 80180d4:	f7ff fd63 	bl	8017b9e <get_fat>
 80180d8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80180da:	68fb      	ldr	r3, [r7, #12]
 80180dc:	2b00      	cmp	r3, #0
 80180de:	d00e      	beq.n	80180fe <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80180e0:	68fb      	ldr	r3, [r7, #12]
 80180e2:	2b01      	cmp	r3, #1
 80180e4:	d003      	beq.n	80180ee <create_chain+0xa6>
 80180e6:	68fb      	ldr	r3, [r7, #12]
 80180e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80180ec:	d101      	bne.n	80180f2 <create_chain+0xaa>
 80180ee:	68fb      	ldr	r3, [r7, #12]
 80180f0:	e03e      	b.n	8018170 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80180f2:	69fa      	ldr	r2, [r7, #28]
 80180f4:	69bb      	ldr	r3, [r7, #24]
 80180f6:	429a      	cmp	r2, r3
 80180f8:	d1da      	bne.n	80180b0 <create_chain+0x68>
 80180fa:	2300      	movs	r3, #0
 80180fc:	e038      	b.n	8018170 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80180fe:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8018100:	f04f 32ff 	mov.w	r2, #4294967295
 8018104:	69f9      	ldr	r1, [r7, #28]
 8018106:	6938      	ldr	r0, [r7, #16]
 8018108:	f7ff fe1d 	bl	8017d46 <put_fat>
 801810c:	4603      	mov	r3, r0
 801810e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8018110:	7dfb      	ldrb	r3, [r7, #23]
 8018112:	2b00      	cmp	r3, #0
 8018114:	d109      	bne.n	801812a <create_chain+0xe2>
 8018116:	683b      	ldr	r3, [r7, #0]
 8018118:	2b00      	cmp	r3, #0
 801811a:	d006      	beq.n	801812a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801811c:	69fa      	ldr	r2, [r7, #28]
 801811e:	6839      	ldr	r1, [r7, #0]
 8018120:	6938      	ldr	r0, [r7, #16]
 8018122:	f7ff fe10 	bl	8017d46 <put_fat>
 8018126:	4603      	mov	r3, r0
 8018128:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801812a:	7dfb      	ldrb	r3, [r7, #23]
 801812c:	2b00      	cmp	r3, #0
 801812e:	d116      	bne.n	801815e <create_chain+0x116>
		fs->last_clst = ncl;
 8018130:	693b      	ldr	r3, [r7, #16]
 8018132:	69fa      	ldr	r2, [r7, #28]
 8018134:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8018136:	693b      	ldr	r3, [r7, #16]
 8018138:	699a      	ldr	r2, [r3, #24]
 801813a:	693b      	ldr	r3, [r7, #16]
 801813c:	69db      	ldr	r3, [r3, #28]
 801813e:	3b02      	subs	r3, #2
 8018140:	429a      	cmp	r2, r3
 8018142:	d804      	bhi.n	801814e <create_chain+0x106>
 8018144:	693b      	ldr	r3, [r7, #16]
 8018146:	699b      	ldr	r3, [r3, #24]
 8018148:	1e5a      	subs	r2, r3, #1
 801814a:	693b      	ldr	r3, [r7, #16]
 801814c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 801814e:	693b      	ldr	r3, [r7, #16]
 8018150:	791b      	ldrb	r3, [r3, #4]
 8018152:	f043 0301 	orr.w	r3, r3, #1
 8018156:	b2da      	uxtb	r2, r3
 8018158:	693b      	ldr	r3, [r7, #16]
 801815a:	711a      	strb	r2, [r3, #4]
 801815c:	e007      	b.n	801816e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801815e:	7dfb      	ldrb	r3, [r7, #23]
 8018160:	2b01      	cmp	r3, #1
 8018162:	d102      	bne.n	801816a <create_chain+0x122>
 8018164:	f04f 33ff 	mov.w	r3, #4294967295
 8018168:	e000      	b.n	801816c <create_chain+0x124>
 801816a:	2301      	movs	r3, #1
 801816c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801816e:	69fb      	ldr	r3, [r7, #28]
}
 8018170:	4618      	mov	r0, r3
 8018172:	3720      	adds	r7, #32
 8018174:	46bd      	mov	sp, r7
 8018176:	bd80      	pop	{r7, pc}

08018178 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8018178:	b480      	push	{r7}
 801817a:	b087      	sub	sp, #28
 801817c:	af00      	add	r7, sp, #0
 801817e:	6078      	str	r0, [r7, #4]
 8018180:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	681b      	ldr	r3, [r3, #0]
 8018186:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8018188:	687b      	ldr	r3, [r7, #4]
 801818a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801818c:	3304      	adds	r3, #4
 801818e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8018190:	68fb      	ldr	r3, [r7, #12]
 8018192:	899b      	ldrh	r3, [r3, #12]
 8018194:	461a      	mov	r2, r3
 8018196:	683b      	ldr	r3, [r7, #0]
 8018198:	fbb3 f3f2 	udiv	r3, r3, r2
 801819c:	68fa      	ldr	r2, [r7, #12]
 801819e:	8952      	ldrh	r2, [r2, #10]
 80181a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80181a4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80181a6:	693b      	ldr	r3, [r7, #16]
 80181a8:	1d1a      	adds	r2, r3, #4
 80181aa:	613a      	str	r2, [r7, #16]
 80181ac:	681b      	ldr	r3, [r3, #0]
 80181ae:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80181b0:	68bb      	ldr	r3, [r7, #8]
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	d101      	bne.n	80181ba <clmt_clust+0x42>
 80181b6:	2300      	movs	r3, #0
 80181b8:	e010      	b.n	80181dc <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80181ba:	697a      	ldr	r2, [r7, #20]
 80181bc:	68bb      	ldr	r3, [r7, #8]
 80181be:	429a      	cmp	r2, r3
 80181c0:	d307      	bcc.n	80181d2 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80181c2:	697a      	ldr	r2, [r7, #20]
 80181c4:	68bb      	ldr	r3, [r7, #8]
 80181c6:	1ad3      	subs	r3, r2, r3
 80181c8:	617b      	str	r3, [r7, #20]
 80181ca:	693b      	ldr	r3, [r7, #16]
 80181cc:	3304      	adds	r3, #4
 80181ce:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80181d0:	e7e9      	b.n	80181a6 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80181d2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80181d4:	693b      	ldr	r3, [r7, #16]
 80181d6:	681a      	ldr	r2, [r3, #0]
 80181d8:	697b      	ldr	r3, [r7, #20]
 80181da:	4413      	add	r3, r2
}
 80181dc:	4618      	mov	r0, r3
 80181de:	371c      	adds	r7, #28
 80181e0:	46bd      	mov	sp, r7
 80181e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181e6:	4770      	bx	lr

080181e8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80181e8:	b580      	push	{r7, lr}
 80181ea:	b086      	sub	sp, #24
 80181ec:	af00      	add	r7, sp, #0
 80181ee:	6078      	str	r0, [r7, #4]
 80181f0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	681b      	ldr	r3, [r3, #0]
 80181f6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80181f8:	683b      	ldr	r3, [r7, #0]
 80181fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80181fe:	d204      	bcs.n	801820a <dir_sdi+0x22>
 8018200:	683b      	ldr	r3, [r7, #0]
 8018202:	f003 031f 	and.w	r3, r3, #31
 8018206:	2b00      	cmp	r3, #0
 8018208:	d001      	beq.n	801820e <dir_sdi+0x26>
		return FR_INT_ERR;
 801820a:	2302      	movs	r3, #2
 801820c:	e071      	b.n	80182f2 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	683a      	ldr	r2, [r7, #0]
 8018212:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	689b      	ldr	r3, [r3, #8]
 8018218:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801821a:	697b      	ldr	r3, [r7, #20]
 801821c:	2b00      	cmp	r3, #0
 801821e:	d106      	bne.n	801822e <dir_sdi+0x46>
 8018220:	693b      	ldr	r3, [r7, #16]
 8018222:	781b      	ldrb	r3, [r3, #0]
 8018224:	2b02      	cmp	r3, #2
 8018226:	d902      	bls.n	801822e <dir_sdi+0x46>
		clst = fs->dirbase;
 8018228:	693b      	ldr	r3, [r7, #16]
 801822a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801822c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801822e:	697b      	ldr	r3, [r7, #20]
 8018230:	2b00      	cmp	r3, #0
 8018232:	d10c      	bne.n	801824e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8018234:	683b      	ldr	r3, [r7, #0]
 8018236:	095b      	lsrs	r3, r3, #5
 8018238:	693a      	ldr	r2, [r7, #16]
 801823a:	8912      	ldrh	r2, [r2, #8]
 801823c:	4293      	cmp	r3, r2
 801823e:	d301      	bcc.n	8018244 <dir_sdi+0x5c>
 8018240:	2302      	movs	r3, #2
 8018242:	e056      	b.n	80182f2 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8018244:	693b      	ldr	r3, [r7, #16]
 8018246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	61da      	str	r2, [r3, #28]
 801824c:	e02d      	b.n	80182aa <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801824e:	693b      	ldr	r3, [r7, #16]
 8018250:	895b      	ldrh	r3, [r3, #10]
 8018252:	461a      	mov	r2, r3
 8018254:	693b      	ldr	r3, [r7, #16]
 8018256:	899b      	ldrh	r3, [r3, #12]
 8018258:	fb02 f303 	mul.w	r3, r2, r3
 801825c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801825e:	e019      	b.n	8018294 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	6979      	ldr	r1, [r7, #20]
 8018264:	4618      	mov	r0, r3
 8018266:	f7ff fc9a 	bl	8017b9e <get_fat>
 801826a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801826c:	697b      	ldr	r3, [r7, #20]
 801826e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018272:	d101      	bne.n	8018278 <dir_sdi+0x90>
 8018274:	2301      	movs	r3, #1
 8018276:	e03c      	b.n	80182f2 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8018278:	697b      	ldr	r3, [r7, #20]
 801827a:	2b01      	cmp	r3, #1
 801827c:	d904      	bls.n	8018288 <dir_sdi+0xa0>
 801827e:	693b      	ldr	r3, [r7, #16]
 8018280:	69db      	ldr	r3, [r3, #28]
 8018282:	697a      	ldr	r2, [r7, #20]
 8018284:	429a      	cmp	r2, r3
 8018286:	d301      	bcc.n	801828c <dir_sdi+0xa4>
 8018288:	2302      	movs	r3, #2
 801828a:	e032      	b.n	80182f2 <dir_sdi+0x10a>
			ofs -= csz;
 801828c:	683a      	ldr	r2, [r7, #0]
 801828e:	68fb      	ldr	r3, [r7, #12]
 8018290:	1ad3      	subs	r3, r2, r3
 8018292:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8018294:	683a      	ldr	r2, [r7, #0]
 8018296:	68fb      	ldr	r3, [r7, #12]
 8018298:	429a      	cmp	r2, r3
 801829a:	d2e1      	bcs.n	8018260 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 801829c:	6979      	ldr	r1, [r7, #20]
 801829e:	6938      	ldr	r0, [r7, #16]
 80182a0:	f7ff fc5e 	bl	8017b60 <clust2sect>
 80182a4:	4602      	mov	r2, r0
 80182a6:	687b      	ldr	r3, [r7, #4]
 80182a8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	697a      	ldr	r2, [r7, #20]
 80182ae:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	69db      	ldr	r3, [r3, #28]
 80182b4:	2b00      	cmp	r3, #0
 80182b6:	d101      	bne.n	80182bc <dir_sdi+0xd4>
 80182b8:	2302      	movs	r3, #2
 80182ba:	e01a      	b.n	80182f2 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	69da      	ldr	r2, [r3, #28]
 80182c0:	693b      	ldr	r3, [r7, #16]
 80182c2:	899b      	ldrh	r3, [r3, #12]
 80182c4:	4619      	mov	r1, r3
 80182c6:	683b      	ldr	r3, [r7, #0]
 80182c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80182cc:	441a      	add	r2, r3
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80182d2:	693b      	ldr	r3, [r7, #16]
 80182d4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80182d8:	693b      	ldr	r3, [r7, #16]
 80182da:	899b      	ldrh	r3, [r3, #12]
 80182dc:	461a      	mov	r2, r3
 80182de:	683b      	ldr	r3, [r7, #0]
 80182e0:	fbb3 f0f2 	udiv	r0, r3, r2
 80182e4:	fb00 f202 	mul.w	r2, r0, r2
 80182e8:	1a9b      	subs	r3, r3, r2
 80182ea:	18ca      	adds	r2, r1, r3
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80182f0:	2300      	movs	r3, #0
}
 80182f2:	4618      	mov	r0, r3
 80182f4:	3718      	adds	r7, #24
 80182f6:	46bd      	mov	sp, r7
 80182f8:	bd80      	pop	{r7, pc}

080182fa <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80182fa:	b580      	push	{r7, lr}
 80182fc:	b086      	sub	sp, #24
 80182fe:	af00      	add	r7, sp, #0
 8018300:	6078      	str	r0, [r7, #4]
 8018302:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	681b      	ldr	r3, [r3, #0]
 8018308:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	695b      	ldr	r3, [r3, #20]
 801830e:	3320      	adds	r3, #32
 8018310:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8018312:	687b      	ldr	r3, [r7, #4]
 8018314:	69db      	ldr	r3, [r3, #28]
 8018316:	2b00      	cmp	r3, #0
 8018318:	d003      	beq.n	8018322 <dir_next+0x28>
 801831a:	68bb      	ldr	r3, [r7, #8]
 801831c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8018320:	d301      	bcc.n	8018326 <dir_next+0x2c>
 8018322:	2304      	movs	r3, #4
 8018324:	e0bb      	b.n	801849e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8018326:	68fb      	ldr	r3, [r7, #12]
 8018328:	899b      	ldrh	r3, [r3, #12]
 801832a:	461a      	mov	r2, r3
 801832c:	68bb      	ldr	r3, [r7, #8]
 801832e:	fbb3 f1f2 	udiv	r1, r3, r2
 8018332:	fb01 f202 	mul.w	r2, r1, r2
 8018336:	1a9b      	subs	r3, r3, r2
 8018338:	2b00      	cmp	r3, #0
 801833a:	f040 809d 	bne.w	8018478 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	69db      	ldr	r3, [r3, #28]
 8018342:	1c5a      	adds	r2, r3, #1
 8018344:	687b      	ldr	r3, [r7, #4]
 8018346:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	699b      	ldr	r3, [r3, #24]
 801834c:	2b00      	cmp	r3, #0
 801834e:	d10b      	bne.n	8018368 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8018350:	68bb      	ldr	r3, [r7, #8]
 8018352:	095b      	lsrs	r3, r3, #5
 8018354:	68fa      	ldr	r2, [r7, #12]
 8018356:	8912      	ldrh	r2, [r2, #8]
 8018358:	4293      	cmp	r3, r2
 801835a:	f0c0 808d 	bcc.w	8018478 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 801835e:	687b      	ldr	r3, [r7, #4]
 8018360:	2200      	movs	r2, #0
 8018362:	61da      	str	r2, [r3, #28]
 8018364:	2304      	movs	r3, #4
 8018366:	e09a      	b.n	801849e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8018368:	68fb      	ldr	r3, [r7, #12]
 801836a:	899b      	ldrh	r3, [r3, #12]
 801836c:	461a      	mov	r2, r3
 801836e:	68bb      	ldr	r3, [r7, #8]
 8018370:	fbb3 f3f2 	udiv	r3, r3, r2
 8018374:	68fa      	ldr	r2, [r7, #12]
 8018376:	8952      	ldrh	r2, [r2, #10]
 8018378:	3a01      	subs	r2, #1
 801837a:	4013      	ands	r3, r2
 801837c:	2b00      	cmp	r3, #0
 801837e:	d17b      	bne.n	8018478 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8018380:	687a      	ldr	r2, [r7, #4]
 8018382:	687b      	ldr	r3, [r7, #4]
 8018384:	699b      	ldr	r3, [r3, #24]
 8018386:	4619      	mov	r1, r3
 8018388:	4610      	mov	r0, r2
 801838a:	f7ff fc08 	bl	8017b9e <get_fat>
 801838e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8018390:	697b      	ldr	r3, [r7, #20]
 8018392:	2b01      	cmp	r3, #1
 8018394:	d801      	bhi.n	801839a <dir_next+0xa0>
 8018396:	2302      	movs	r3, #2
 8018398:	e081      	b.n	801849e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801839a:	697b      	ldr	r3, [r7, #20]
 801839c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80183a0:	d101      	bne.n	80183a6 <dir_next+0xac>
 80183a2:	2301      	movs	r3, #1
 80183a4:	e07b      	b.n	801849e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80183a6:	68fb      	ldr	r3, [r7, #12]
 80183a8:	69db      	ldr	r3, [r3, #28]
 80183aa:	697a      	ldr	r2, [r7, #20]
 80183ac:	429a      	cmp	r2, r3
 80183ae:	d359      	bcc.n	8018464 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80183b0:	683b      	ldr	r3, [r7, #0]
 80183b2:	2b00      	cmp	r3, #0
 80183b4:	d104      	bne.n	80183c0 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	2200      	movs	r2, #0
 80183ba:	61da      	str	r2, [r3, #28]
 80183bc:	2304      	movs	r3, #4
 80183be:	e06e      	b.n	801849e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80183c0:	687a      	ldr	r2, [r7, #4]
 80183c2:	687b      	ldr	r3, [r7, #4]
 80183c4:	699b      	ldr	r3, [r3, #24]
 80183c6:	4619      	mov	r1, r3
 80183c8:	4610      	mov	r0, r2
 80183ca:	f7ff fe3d 	bl	8018048 <create_chain>
 80183ce:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80183d0:	697b      	ldr	r3, [r7, #20]
 80183d2:	2b00      	cmp	r3, #0
 80183d4:	d101      	bne.n	80183da <dir_next+0xe0>
 80183d6:	2307      	movs	r3, #7
 80183d8:	e061      	b.n	801849e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80183da:	697b      	ldr	r3, [r7, #20]
 80183dc:	2b01      	cmp	r3, #1
 80183de:	d101      	bne.n	80183e4 <dir_next+0xea>
 80183e0:	2302      	movs	r3, #2
 80183e2:	e05c      	b.n	801849e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80183e4:	697b      	ldr	r3, [r7, #20]
 80183e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80183ea:	d101      	bne.n	80183f0 <dir_next+0xf6>
 80183ec:	2301      	movs	r3, #1
 80183ee:	e056      	b.n	801849e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80183f0:	68f8      	ldr	r0, [r7, #12]
 80183f2:	f7ff fad3 	bl	801799c <sync_window>
 80183f6:	4603      	mov	r3, r0
 80183f8:	2b00      	cmp	r3, #0
 80183fa:	d001      	beq.n	8018400 <dir_next+0x106>
 80183fc:	2301      	movs	r3, #1
 80183fe:	e04e      	b.n	801849e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8018400:	68fb      	ldr	r3, [r7, #12]
 8018402:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8018406:	68fb      	ldr	r3, [r7, #12]
 8018408:	899b      	ldrh	r3, [r3, #12]
 801840a:	461a      	mov	r2, r3
 801840c:	2100      	movs	r1, #0
 801840e:	f7ff f8fc 	bl	801760a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8018412:	2300      	movs	r3, #0
 8018414:	613b      	str	r3, [r7, #16]
 8018416:	6979      	ldr	r1, [r7, #20]
 8018418:	68f8      	ldr	r0, [r7, #12]
 801841a:	f7ff fba1 	bl	8017b60 <clust2sect>
 801841e:	4602      	mov	r2, r0
 8018420:	68fb      	ldr	r3, [r7, #12]
 8018422:	635a      	str	r2, [r3, #52]	; 0x34
 8018424:	e012      	b.n	801844c <dir_next+0x152>
						fs->wflag = 1;
 8018426:	68fb      	ldr	r3, [r7, #12]
 8018428:	2201      	movs	r2, #1
 801842a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801842c:	68f8      	ldr	r0, [r7, #12]
 801842e:	f7ff fab5 	bl	801799c <sync_window>
 8018432:	4603      	mov	r3, r0
 8018434:	2b00      	cmp	r3, #0
 8018436:	d001      	beq.n	801843c <dir_next+0x142>
 8018438:	2301      	movs	r3, #1
 801843a:	e030      	b.n	801849e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801843c:	693b      	ldr	r3, [r7, #16]
 801843e:	3301      	adds	r3, #1
 8018440:	613b      	str	r3, [r7, #16]
 8018442:	68fb      	ldr	r3, [r7, #12]
 8018444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018446:	1c5a      	adds	r2, r3, #1
 8018448:	68fb      	ldr	r3, [r7, #12]
 801844a:	635a      	str	r2, [r3, #52]	; 0x34
 801844c:	68fb      	ldr	r3, [r7, #12]
 801844e:	895b      	ldrh	r3, [r3, #10]
 8018450:	461a      	mov	r2, r3
 8018452:	693b      	ldr	r3, [r7, #16]
 8018454:	4293      	cmp	r3, r2
 8018456:	d3e6      	bcc.n	8018426 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8018458:	68fb      	ldr	r3, [r7, #12]
 801845a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801845c:	693b      	ldr	r3, [r7, #16]
 801845e:	1ad2      	subs	r2, r2, r3
 8018460:	68fb      	ldr	r3, [r7, #12]
 8018462:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	697a      	ldr	r2, [r7, #20]
 8018468:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801846a:	6979      	ldr	r1, [r7, #20]
 801846c:	68f8      	ldr	r0, [r7, #12]
 801846e:	f7ff fb77 	bl	8017b60 <clust2sect>
 8018472:	4602      	mov	r2, r0
 8018474:	687b      	ldr	r3, [r7, #4]
 8018476:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8018478:	687b      	ldr	r3, [r7, #4]
 801847a:	68ba      	ldr	r2, [r7, #8]
 801847c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801847e:	68fb      	ldr	r3, [r7, #12]
 8018480:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8018484:	68fb      	ldr	r3, [r7, #12]
 8018486:	899b      	ldrh	r3, [r3, #12]
 8018488:	461a      	mov	r2, r3
 801848a:	68bb      	ldr	r3, [r7, #8]
 801848c:	fbb3 f0f2 	udiv	r0, r3, r2
 8018490:	fb00 f202 	mul.w	r2, r0, r2
 8018494:	1a9b      	subs	r3, r3, r2
 8018496:	18ca      	adds	r2, r1, r3
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801849c:	2300      	movs	r3, #0
}
 801849e:	4618      	mov	r0, r3
 80184a0:	3718      	adds	r7, #24
 80184a2:	46bd      	mov	sp, r7
 80184a4:	bd80      	pop	{r7, pc}

080184a6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80184a6:	b580      	push	{r7, lr}
 80184a8:	b086      	sub	sp, #24
 80184aa:	af00      	add	r7, sp, #0
 80184ac:	6078      	str	r0, [r7, #4]
 80184ae:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80184b0:	687b      	ldr	r3, [r7, #4]
 80184b2:	681b      	ldr	r3, [r3, #0]
 80184b4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80184b6:	2100      	movs	r1, #0
 80184b8:	6878      	ldr	r0, [r7, #4]
 80184ba:	f7ff fe95 	bl	80181e8 <dir_sdi>
 80184be:	4603      	mov	r3, r0
 80184c0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80184c2:	7dfb      	ldrb	r3, [r7, #23]
 80184c4:	2b00      	cmp	r3, #0
 80184c6:	d12b      	bne.n	8018520 <dir_alloc+0x7a>
		n = 0;
 80184c8:	2300      	movs	r3, #0
 80184ca:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	69db      	ldr	r3, [r3, #28]
 80184d0:	4619      	mov	r1, r3
 80184d2:	68f8      	ldr	r0, [r7, #12]
 80184d4:	f7ff faa6 	bl	8017a24 <move_window>
 80184d8:	4603      	mov	r3, r0
 80184da:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80184dc:	7dfb      	ldrb	r3, [r7, #23]
 80184de:	2b00      	cmp	r3, #0
 80184e0:	d11d      	bne.n	801851e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80184e2:	687b      	ldr	r3, [r7, #4]
 80184e4:	6a1b      	ldr	r3, [r3, #32]
 80184e6:	781b      	ldrb	r3, [r3, #0]
 80184e8:	2be5      	cmp	r3, #229	; 0xe5
 80184ea:	d004      	beq.n	80184f6 <dir_alloc+0x50>
 80184ec:	687b      	ldr	r3, [r7, #4]
 80184ee:	6a1b      	ldr	r3, [r3, #32]
 80184f0:	781b      	ldrb	r3, [r3, #0]
 80184f2:	2b00      	cmp	r3, #0
 80184f4:	d107      	bne.n	8018506 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80184f6:	693b      	ldr	r3, [r7, #16]
 80184f8:	3301      	adds	r3, #1
 80184fa:	613b      	str	r3, [r7, #16]
 80184fc:	693a      	ldr	r2, [r7, #16]
 80184fe:	683b      	ldr	r3, [r7, #0]
 8018500:	429a      	cmp	r2, r3
 8018502:	d102      	bne.n	801850a <dir_alloc+0x64>
 8018504:	e00c      	b.n	8018520 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8018506:	2300      	movs	r3, #0
 8018508:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801850a:	2101      	movs	r1, #1
 801850c:	6878      	ldr	r0, [r7, #4]
 801850e:	f7ff fef4 	bl	80182fa <dir_next>
 8018512:	4603      	mov	r3, r0
 8018514:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8018516:	7dfb      	ldrb	r3, [r7, #23]
 8018518:	2b00      	cmp	r3, #0
 801851a:	d0d7      	beq.n	80184cc <dir_alloc+0x26>
 801851c:	e000      	b.n	8018520 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801851e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8018520:	7dfb      	ldrb	r3, [r7, #23]
 8018522:	2b04      	cmp	r3, #4
 8018524:	d101      	bne.n	801852a <dir_alloc+0x84>
 8018526:	2307      	movs	r3, #7
 8018528:	75fb      	strb	r3, [r7, #23]
	return res;
 801852a:	7dfb      	ldrb	r3, [r7, #23]
}
 801852c:	4618      	mov	r0, r3
 801852e:	3718      	adds	r7, #24
 8018530:	46bd      	mov	sp, r7
 8018532:	bd80      	pop	{r7, pc}

08018534 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8018534:	b580      	push	{r7, lr}
 8018536:	b084      	sub	sp, #16
 8018538:	af00      	add	r7, sp, #0
 801853a:	6078      	str	r0, [r7, #4]
 801853c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801853e:	683b      	ldr	r3, [r7, #0]
 8018540:	331a      	adds	r3, #26
 8018542:	4618      	mov	r0, r3
 8018544:	f7fe ffbe 	bl	80174c4 <ld_word>
 8018548:	4603      	mov	r3, r0
 801854a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	781b      	ldrb	r3, [r3, #0]
 8018550:	2b03      	cmp	r3, #3
 8018552:	d109      	bne.n	8018568 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8018554:	683b      	ldr	r3, [r7, #0]
 8018556:	3314      	adds	r3, #20
 8018558:	4618      	mov	r0, r3
 801855a:	f7fe ffb3 	bl	80174c4 <ld_word>
 801855e:	4603      	mov	r3, r0
 8018560:	041b      	lsls	r3, r3, #16
 8018562:	68fa      	ldr	r2, [r7, #12]
 8018564:	4313      	orrs	r3, r2
 8018566:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8018568:	68fb      	ldr	r3, [r7, #12]
}
 801856a:	4618      	mov	r0, r3
 801856c:	3710      	adds	r7, #16
 801856e:	46bd      	mov	sp, r7
 8018570:	bd80      	pop	{r7, pc}

08018572 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8018572:	b580      	push	{r7, lr}
 8018574:	b084      	sub	sp, #16
 8018576:	af00      	add	r7, sp, #0
 8018578:	60f8      	str	r0, [r7, #12]
 801857a:	60b9      	str	r1, [r7, #8]
 801857c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801857e:	68bb      	ldr	r3, [r7, #8]
 8018580:	331a      	adds	r3, #26
 8018582:	687a      	ldr	r2, [r7, #4]
 8018584:	b292      	uxth	r2, r2
 8018586:	4611      	mov	r1, r2
 8018588:	4618      	mov	r0, r3
 801858a:	f7fe ffd6 	bl	801753a <st_word>
	if (fs->fs_type == FS_FAT32) {
 801858e:	68fb      	ldr	r3, [r7, #12]
 8018590:	781b      	ldrb	r3, [r3, #0]
 8018592:	2b03      	cmp	r3, #3
 8018594:	d109      	bne.n	80185aa <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8018596:	68bb      	ldr	r3, [r7, #8]
 8018598:	f103 0214 	add.w	r2, r3, #20
 801859c:	687b      	ldr	r3, [r7, #4]
 801859e:	0c1b      	lsrs	r3, r3, #16
 80185a0:	b29b      	uxth	r3, r3
 80185a2:	4619      	mov	r1, r3
 80185a4:	4610      	mov	r0, r2
 80185a6:	f7fe ffc8 	bl	801753a <st_word>
	}
}
 80185aa:	bf00      	nop
 80185ac:	3710      	adds	r7, #16
 80185ae:	46bd      	mov	sp, r7
 80185b0:	bd80      	pop	{r7, pc}
	...

080185b4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80185b4:	b590      	push	{r4, r7, lr}
 80185b6:	b087      	sub	sp, #28
 80185b8:	af00      	add	r7, sp, #0
 80185ba:	6078      	str	r0, [r7, #4]
 80185bc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80185be:	683b      	ldr	r3, [r7, #0]
 80185c0:	331a      	adds	r3, #26
 80185c2:	4618      	mov	r0, r3
 80185c4:	f7fe ff7e 	bl	80174c4 <ld_word>
 80185c8:	4603      	mov	r3, r0
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	d001      	beq.n	80185d2 <cmp_lfn+0x1e>
 80185ce:	2300      	movs	r3, #0
 80185d0:	e059      	b.n	8018686 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80185d2:	683b      	ldr	r3, [r7, #0]
 80185d4:	781b      	ldrb	r3, [r3, #0]
 80185d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80185da:	1e5a      	subs	r2, r3, #1
 80185dc:	4613      	mov	r3, r2
 80185de:	005b      	lsls	r3, r3, #1
 80185e0:	4413      	add	r3, r2
 80185e2:	009b      	lsls	r3, r3, #2
 80185e4:	4413      	add	r3, r2
 80185e6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80185e8:	2301      	movs	r3, #1
 80185ea:	81fb      	strh	r3, [r7, #14]
 80185ec:	2300      	movs	r3, #0
 80185ee:	613b      	str	r3, [r7, #16]
 80185f0:	e033      	b.n	801865a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80185f2:	4a27      	ldr	r2, [pc, #156]	; (8018690 <cmp_lfn+0xdc>)
 80185f4:	693b      	ldr	r3, [r7, #16]
 80185f6:	4413      	add	r3, r2
 80185f8:	781b      	ldrb	r3, [r3, #0]
 80185fa:	461a      	mov	r2, r3
 80185fc:	683b      	ldr	r3, [r7, #0]
 80185fe:	4413      	add	r3, r2
 8018600:	4618      	mov	r0, r3
 8018602:	f7fe ff5f 	bl	80174c4 <ld_word>
 8018606:	4603      	mov	r3, r0
 8018608:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801860a:	89fb      	ldrh	r3, [r7, #14]
 801860c:	2b00      	cmp	r3, #0
 801860e:	d01a      	beq.n	8018646 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8018610:	697b      	ldr	r3, [r7, #20]
 8018612:	2bfe      	cmp	r3, #254	; 0xfe
 8018614:	d812      	bhi.n	801863c <cmp_lfn+0x88>
 8018616:	89bb      	ldrh	r3, [r7, #12]
 8018618:	4618      	mov	r0, r3
 801861a:	f001 fe11 	bl	801a240 <ff_wtoupper>
 801861e:	4603      	mov	r3, r0
 8018620:	461c      	mov	r4, r3
 8018622:	697b      	ldr	r3, [r7, #20]
 8018624:	1c5a      	adds	r2, r3, #1
 8018626:	617a      	str	r2, [r7, #20]
 8018628:	005b      	lsls	r3, r3, #1
 801862a:	687a      	ldr	r2, [r7, #4]
 801862c:	4413      	add	r3, r2
 801862e:	881b      	ldrh	r3, [r3, #0]
 8018630:	4618      	mov	r0, r3
 8018632:	f001 fe05 	bl	801a240 <ff_wtoupper>
 8018636:	4603      	mov	r3, r0
 8018638:	429c      	cmp	r4, r3
 801863a:	d001      	beq.n	8018640 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 801863c:	2300      	movs	r3, #0
 801863e:	e022      	b.n	8018686 <cmp_lfn+0xd2>
			}
			wc = uc;
 8018640:	89bb      	ldrh	r3, [r7, #12]
 8018642:	81fb      	strh	r3, [r7, #14]
 8018644:	e006      	b.n	8018654 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8018646:	89bb      	ldrh	r3, [r7, #12]
 8018648:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801864c:	4293      	cmp	r3, r2
 801864e:	d001      	beq.n	8018654 <cmp_lfn+0xa0>
 8018650:	2300      	movs	r3, #0
 8018652:	e018      	b.n	8018686 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8018654:	693b      	ldr	r3, [r7, #16]
 8018656:	3301      	adds	r3, #1
 8018658:	613b      	str	r3, [r7, #16]
 801865a:	693b      	ldr	r3, [r7, #16]
 801865c:	2b0c      	cmp	r3, #12
 801865e:	d9c8      	bls.n	80185f2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8018660:	683b      	ldr	r3, [r7, #0]
 8018662:	781b      	ldrb	r3, [r3, #0]
 8018664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018668:	2b00      	cmp	r3, #0
 801866a:	d00b      	beq.n	8018684 <cmp_lfn+0xd0>
 801866c:	89fb      	ldrh	r3, [r7, #14]
 801866e:	2b00      	cmp	r3, #0
 8018670:	d008      	beq.n	8018684 <cmp_lfn+0xd0>
 8018672:	697b      	ldr	r3, [r7, #20]
 8018674:	005b      	lsls	r3, r3, #1
 8018676:	687a      	ldr	r2, [r7, #4]
 8018678:	4413      	add	r3, r2
 801867a:	881b      	ldrh	r3, [r3, #0]
 801867c:	2b00      	cmp	r3, #0
 801867e:	d001      	beq.n	8018684 <cmp_lfn+0xd0>
 8018680:	2300      	movs	r3, #0
 8018682:	e000      	b.n	8018686 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8018684:	2301      	movs	r3, #1
}
 8018686:	4618      	mov	r0, r3
 8018688:	371c      	adds	r7, #28
 801868a:	46bd      	mov	sp, r7
 801868c:	bd90      	pop	{r4, r7, pc}
 801868e:	bf00      	nop
 8018690:	0801f884 	.word	0x0801f884

08018694 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8018694:	b580      	push	{r7, lr}
 8018696:	b088      	sub	sp, #32
 8018698:	af00      	add	r7, sp, #0
 801869a:	60f8      	str	r0, [r7, #12]
 801869c:	60b9      	str	r1, [r7, #8]
 801869e:	4611      	mov	r1, r2
 80186a0:	461a      	mov	r2, r3
 80186a2:	460b      	mov	r3, r1
 80186a4:	71fb      	strb	r3, [r7, #7]
 80186a6:	4613      	mov	r3, r2
 80186a8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80186aa:	68bb      	ldr	r3, [r7, #8]
 80186ac:	330d      	adds	r3, #13
 80186ae:	79ba      	ldrb	r2, [r7, #6]
 80186b0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80186b2:	68bb      	ldr	r3, [r7, #8]
 80186b4:	330b      	adds	r3, #11
 80186b6:	220f      	movs	r2, #15
 80186b8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80186ba:	68bb      	ldr	r3, [r7, #8]
 80186bc:	330c      	adds	r3, #12
 80186be:	2200      	movs	r2, #0
 80186c0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80186c2:	68bb      	ldr	r3, [r7, #8]
 80186c4:	331a      	adds	r3, #26
 80186c6:	2100      	movs	r1, #0
 80186c8:	4618      	mov	r0, r3
 80186ca:	f7fe ff36 	bl	801753a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80186ce:	79fb      	ldrb	r3, [r7, #7]
 80186d0:	1e5a      	subs	r2, r3, #1
 80186d2:	4613      	mov	r3, r2
 80186d4:	005b      	lsls	r3, r3, #1
 80186d6:	4413      	add	r3, r2
 80186d8:	009b      	lsls	r3, r3, #2
 80186da:	4413      	add	r3, r2
 80186dc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80186de:	2300      	movs	r3, #0
 80186e0:	82fb      	strh	r3, [r7, #22]
 80186e2:	2300      	movs	r3, #0
 80186e4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80186e6:	8afb      	ldrh	r3, [r7, #22]
 80186e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80186ec:	4293      	cmp	r3, r2
 80186ee:	d007      	beq.n	8018700 <put_lfn+0x6c>
 80186f0:	69fb      	ldr	r3, [r7, #28]
 80186f2:	1c5a      	adds	r2, r3, #1
 80186f4:	61fa      	str	r2, [r7, #28]
 80186f6:	005b      	lsls	r3, r3, #1
 80186f8:	68fa      	ldr	r2, [r7, #12]
 80186fa:	4413      	add	r3, r2
 80186fc:	881b      	ldrh	r3, [r3, #0]
 80186fe:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8018700:	4a17      	ldr	r2, [pc, #92]	; (8018760 <put_lfn+0xcc>)
 8018702:	69bb      	ldr	r3, [r7, #24]
 8018704:	4413      	add	r3, r2
 8018706:	781b      	ldrb	r3, [r3, #0]
 8018708:	461a      	mov	r2, r3
 801870a:	68bb      	ldr	r3, [r7, #8]
 801870c:	4413      	add	r3, r2
 801870e:	8afa      	ldrh	r2, [r7, #22]
 8018710:	4611      	mov	r1, r2
 8018712:	4618      	mov	r0, r3
 8018714:	f7fe ff11 	bl	801753a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8018718:	8afb      	ldrh	r3, [r7, #22]
 801871a:	2b00      	cmp	r3, #0
 801871c:	d102      	bne.n	8018724 <put_lfn+0x90>
 801871e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018722:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8018724:	69bb      	ldr	r3, [r7, #24]
 8018726:	3301      	adds	r3, #1
 8018728:	61bb      	str	r3, [r7, #24]
 801872a:	69bb      	ldr	r3, [r7, #24]
 801872c:	2b0c      	cmp	r3, #12
 801872e:	d9da      	bls.n	80186e6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8018730:	8afb      	ldrh	r3, [r7, #22]
 8018732:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8018736:	4293      	cmp	r3, r2
 8018738:	d006      	beq.n	8018748 <put_lfn+0xb4>
 801873a:	69fb      	ldr	r3, [r7, #28]
 801873c:	005b      	lsls	r3, r3, #1
 801873e:	68fa      	ldr	r2, [r7, #12]
 8018740:	4413      	add	r3, r2
 8018742:	881b      	ldrh	r3, [r3, #0]
 8018744:	2b00      	cmp	r3, #0
 8018746:	d103      	bne.n	8018750 <put_lfn+0xbc>
 8018748:	79fb      	ldrb	r3, [r7, #7]
 801874a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801874e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8018750:	68bb      	ldr	r3, [r7, #8]
 8018752:	79fa      	ldrb	r2, [r7, #7]
 8018754:	701a      	strb	r2, [r3, #0]
}
 8018756:	bf00      	nop
 8018758:	3720      	adds	r7, #32
 801875a:	46bd      	mov	sp, r7
 801875c:	bd80      	pop	{r7, pc}
 801875e:	bf00      	nop
 8018760:	0801f884 	.word	0x0801f884

08018764 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8018764:	b580      	push	{r7, lr}
 8018766:	b08c      	sub	sp, #48	; 0x30
 8018768:	af00      	add	r7, sp, #0
 801876a:	60f8      	str	r0, [r7, #12]
 801876c:	60b9      	str	r1, [r7, #8]
 801876e:	607a      	str	r2, [r7, #4]
 8018770:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8018772:	220b      	movs	r2, #11
 8018774:	68b9      	ldr	r1, [r7, #8]
 8018776:	68f8      	ldr	r0, [r7, #12]
 8018778:	f7fe ff26 	bl	80175c8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801877c:	683b      	ldr	r3, [r7, #0]
 801877e:	2b05      	cmp	r3, #5
 8018780:	d929      	bls.n	80187d6 <gen_numname+0x72>
		sr = seq;
 8018782:	683b      	ldr	r3, [r7, #0]
 8018784:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8018786:	e020      	b.n	80187ca <gen_numname+0x66>
			wc = *lfn++;
 8018788:	687b      	ldr	r3, [r7, #4]
 801878a:	1c9a      	adds	r2, r3, #2
 801878c:	607a      	str	r2, [r7, #4]
 801878e:	881b      	ldrh	r3, [r3, #0]
 8018790:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8018792:	2300      	movs	r3, #0
 8018794:	62bb      	str	r3, [r7, #40]	; 0x28
 8018796:	e015      	b.n	80187c4 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8018798:	69fb      	ldr	r3, [r7, #28]
 801879a:	005a      	lsls	r2, r3, #1
 801879c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801879e:	f003 0301 	and.w	r3, r3, #1
 80187a2:	4413      	add	r3, r2
 80187a4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80187a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80187a8:	085b      	lsrs	r3, r3, #1
 80187aa:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80187ac:	69fb      	ldr	r3, [r7, #28]
 80187ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80187b2:	2b00      	cmp	r3, #0
 80187b4:	d003      	beq.n	80187be <gen_numname+0x5a>
 80187b6:	69fa      	ldr	r2, [r7, #28]
 80187b8:	4b30      	ldr	r3, [pc, #192]	; (801887c <gen_numname+0x118>)
 80187ba:	4053      	eors	r3, r2
 80187bc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80187be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187c0:	3301      	adds	r3, #1
 80187c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80187c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187c6:	2b0f      	cmp	r3, #15
 80187c8:	d9e6      	bls.n	8018798 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80187ca:	687b      	ldr	r3, [r7, #4]
 80187cc:	881b      	ldrh	r3, [r3, #0]
 80187ce:	2b00      	cmp	r3, #0
 80187d0:	d1da      	bne.n	8018788 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80187d2:	69fb      	ldr	r3, [r7, #28]
 80187d4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80187d6:	2307      	movs	r3, #7
 80187d8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80187da:	683b      	ldr	r3, [r7, #0]
 80187dc:	b2db      	uxtb	r3, r3
 80187de:	f003 030f 	and.w	r3, r3, #15
 80187e2:	b2db      	uxtb	r3, r3
 80187e4:	3330      	adds	r3, #48	; 0x30
 80187e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80187ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80187ee:	2b39      	cmp	r3, #57	; 0x39
 80187f0:	d904      	bls.n	80187fc <gen_numname+0x98>
 80187f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80187f6:	3307      	adds	r3, #7
 80187f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80187fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187fe:	1e5a      	subs	r2, r3, #1
 8018800:	62ba      	str	r2, [r7, #40]	; 0x28
 8018802:	3330      	adds	r3, #48	; 0x30
 8018804:	443b      	add	r3, r7
 8018806:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801880a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801880e:	683b      	ldr	r3, [r7, #0]
 8018810:	091b      	lsrs	r3, r3, #4
 8018812:	603b      	str	r3, [r7, #0]
	} while (seq);
 8018814:	683b      	ldr	r3, [r7, #0]
 8018816:	2b00      	cmp	r3, #0
 8018818:	d1df      	bne.n	80187da <gen_numname+0x76>
	ns[i] = '~';
 801881a:	f107 0214 	add.w	r2, r7, #20
 801881e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018820:	4413      	add	r3, r2
 8018822:	227e      	movs	r2, #126	; 0x7e
 8018824:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8018826:	2300      	movs	r3, #0
 8018828:	627b      	str	r3, [r7, #36]	; 0x24
 801882a:	e002      	b.n	8018832 <gen_numname+0xce>
 801882c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801882e:	3301      	adds	r3, #1
 8018830:	627b      	str	r3, [r7, #36]	; 0x24
 8018832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018836:	429a      	cmp	r2, r3
 8018838:	d205      	bcs.n	8018846 <gen_numname+0xe2>
 801883a:	68fa      	ldr	r2, [r7, #12]
 801883c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801883e:	4413      	add	r3, r2
 8018840:	781b      	ldrb	r3, [r3, #0]
 8018842:	2b20      	cmp	r3, #32
 8018844:	d1f2      	bne.n	801882c <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8018846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018848:	2b07      	cmp	r3, #7
 801884a:	d807      	bhi.n	801885c <gen_numname+0xf8>
 801884c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801884e:	1c5a      	adds	r2, r3, #1
 8018850:	62ba      	str	r2, [r7, #40]	; 0x28
 8018852:	3330      	adds	r3, #48	; 0x30
 8018854:	443b      	add	r3, r7
 8018856:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801885a:	e000      	b.n	801885e <gen_numname+0xfa>
 801885c:	2120      	movs	r1, #32
 801885e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018860:	1c5a      	adds	r2, r3, #1
 8018862:	627a      	str	r2, [r7, #36]	; 0x24
 8018864:	68fa      	ldr	r2, [r7, #12]
 8018866:	4413      	add	r3, r2
 8018868:	460a      	mov	r2, r1
 801886a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 801886c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801886e:	2b07      	cmp	r3, #7
 8018870:	d9e9      	bls.n	8018846 <gen_numname+0xe2>
}
 8018872:	bf00      	nop
 8018874:	bf00      	nop
 8018876:	3730      	adds	r7, #48	; 0x30
 8018878:	46bd      	mov	sp, r7
 801887a:	bd80      	pop	{r7, pc}
 801887c:	00011021 	.word	0x00011021

08018880 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8018880:	b480      	push	{r7}
 8018882:	b085      	sub	sp, #20
 8018884:	af00      	add	r7, sp, #0
 8018886:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8018888:	2300      	movs	r3, #0
 801888a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 801888c:	230b      	movs	r3, #11
 801888e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8018890:	7bfb      	ldrb	r3, [r7, #15]
 8018892:	b2da      	uxtb	r2, r3
 8018894:	0852      	lsrs	r2, r2, #1
 8018896:	01db      	lsls	r3, r3, #7
 8018898:	4313      	orrs	r3, r2
 801889a:	b2da      	uxtb	r2, r3
 801889c:	687b      	ldr	r3, [r7, #4]
 801889e:	1c59      	adds	r1, r3, #1
 80188a0:	6079      	str	r1, [r7, #4]
 80188a2:	781b      	ldrb	r3, [r3, #0]
 80188a4:	4413      	add	r3, r2
 80188a6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80188a8:	68bb      	ldr	r3, [r7, #8]
 80188aa:	3b01      	subs	r3, #1
 80188ac:	60bb      	str	r3, [r7, #8]
 80188ae:	68bb      	ldr	r3, [r7, #8]
 80188b0:	2b00      	cmp	r3, #0
 80188b2:	d1ed      	bne.n	8018890 <sum_sfn+0x10>
	return sum;
 80188b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80188b6:	4618      	mov	r0, r3
 80188b8:	3714      	adds	r7, #20
 80188ba:	46bd      	mov	sp, r7
 80188bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188c0:	4770      	bx	lr

080188c2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80188c2:	b580      	push	{r7, lr}
 80188c4:	b086      	sub	sp, #24
 80188c6:	af00      	add	r7, sp, #0
 80188c8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80188ca:	687b      	ldr	r3, [r7, #4]
 80188cc:	681b      	ldr	r3, [r3, #0]
 80188ce:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80188d0:	2100      	movs	r1, #0
 80188d2:	6878      	ldr	r0, [r7, #4]
 80188d4:	f7ff fc88 	bl	80181e8 <dir_sdi>
 80188d8:	4603      	mov	r3, r0
 80188da:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80188dc:	7dfb      	ldrb	r3, [r7, #23]
 80188de:	2b00      	cmp	r3, #0
 80188e0:	d001      	beq.n	80188e6 <dir_find+0x24>
 80188e2:	7dfb      	ldrb	r3, [r7, #23]
 80188e4:	e0a9      	b.n	8018a3a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80188e6:	23ff      	movs	r3, #255	; 0xff
 80188e8:	753b      	strb	r3, [r7, #20]
 80188ea:	7d3b      	ldrb	r3, [r7, #20]
 80188ec:	757b      	strb	r3, [r7, #21]
 80188ee:	687b      	ldr	r3, [r7, #4]
 80188f0:	f04f 32ff 	mov.w	r2, #4294967295
 80188f4:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80188f6:	687b      	ldr	r3, [r7, #4]
 80188f8:	69db      	ldr	r3, [r3, #28]
 80188fa:	4619      	mov	r1, r3
 80188fc:	6938      	ldr	r0, [r7, #16]
 80188fe:	f7ff f891 	bl	8017a24 <move_window>
 8018902:	4603      	mov	r3, r0
 8018904:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8018906:	7dfb      	ldrb	r3, [r7, #23]
 8018908:	2b00      	cmp	r3, #0
 801890a:	f040 8090 	bne.w	8018a2e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801890e:	687b      	ldr	r3, [r7, #4]
 8018910:	6a1b      	ldr	r3, [r3, #32]
 8018912:	781b      	ldrb	r3, [r3, #0]
 8018914:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8018916:	7dbb      	ldrb	r3, [r7, #22]
 8018918:	2b00      	cmp	r3, #0
 801891a:	d102      	bne.n	8018922 <dir_find+0x60>
 801891c:	2304      	movs	r3, #4
 801891e:	75fb      	strb	r3, [r7, #23]
 8018920:	e08a      	b.n	8018a38 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	6a1b      	ldr	r3, [r3, #32]
 8018926:	330b      	adds	r3, #11
 8018928:	781b      	ldrb	r3, [r3, #0]
 801892a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801892e:	73fb      	strb	r3, [r7, #15]
 8018930:	687b      	ldr	r3, [r7, #4]
 8018932:	7bfa      	ldrb	r2, [r7, #15]
 8018934:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8018936:	7dbb      	ldrb	r3, [r7, #22]
 8018938:	2be5      	cmp	r3, #229	; 0xe5
 801893a:	d007      	beq.n	801894c <dir_find+0x8a>
 801893c:	7bfb      	ldrb	r3, [r7, #15]
 801893e:	f003 0308 	and.w	r3, r3, #8
 8018942:	2b00      	cmp	r3, #0
 8018944:	d009      	beq.n	801895a <dir_find+0x98>
 8018946:	7bfb      	ldrb	r3, [r7, #15]
 8018948:	2b0f      	cmp	r3, #15
 801894a:	d006      	beq.n	801895a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801894c:	23ff      	movs	r3, #255	; 0xff
 801894e:	757b      	strb	r3, [r7, #21]
 8018950:	687b      	ldr	r3, [r7, #4]
 8018952:	f04f 32ff 	mov.w	r2, #4294967295
 8018956:	631a      	str	r2, [r3, #48]	; 0x30
 8018958:	e05e      	b.n	8018a18 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801895a:	7bfb      	ldrb	r3, [r7, #15]
 801895c:	2b0f      	cmp	r3, #15
 801895e:	d136      	bne.n	80189ce <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8018960:	687b      	ldr	r3, [r7, #4]
 8018962:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8018966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801896a:	2b00      	cmp	r3, #0
 801896c:	d154      	bne.n	8018a18 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801896e:	7dbb      	ldrb	r3, [r7, #22]
 8018970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018974:	2b00      	cmp	r3, #0
 8018976:	d00d      	beq.n	8018994 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8018978:	687b      	ldr	r3, [r7, #4]
 801897a:	6a1b      	ldr	r3, [r3, #32]
 801897c:	7b5b      	ldrb	r3, [r3, #13]
 801897e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8018980:	7dbb      	ldrb	r3, [r7, #22]
 8018982:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8018986:	75bb      	strb	r3, [r7, #22]
 8018988:	7dbb      	ldrb	r3, [r7, #22]
 801898a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	695a      	ldr	r2, [r3, #20]
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8018994:	7dba      	ldrb	r2, [r7, #22]
 8018996:	7d7b      	ldrb	r3, [r7, #21]
 8018998:	429a      	cmp	r2, r3
 801899a:	d115      	bne.n	80189c8 <dir_find+0x106>
 801899c:	687b      	ldr	r3, [r7, #4]
 801899e:	6a1b      	ldr	r3, [r3, #32]
 80189a0:	330d      	adds	r3, #13
 80189a2:	781b      	ldrb	r3, [r3, #0]
 80189a4:	7d3a      	ldrb	r2, [r7, #20]
 80189a6:	429a      	cmp	r2, r3
 80189a8:	d10e      	bne.n	80189c8 <dir_find+0x106>
 80189aa:	693b      	ldr	r3, [r7, #16]
 80189ac:	691a      	ldr	r2, [r3, #16]
 80189ae:	687b      	ldr	r3, [r7, #4]
 80189b0:	6a1b      	ldr	r3, [r3, #32]
 80189b2:	4619      	mov	r1, r3
 80189b4:	4610      	mov	r0, r2
 80189b6:	f7ff fdfd 	bl	80185b4 <cmp_lfn>
 80189ba:	4603      	mov	r3, r0
 80189bc:	2b00      	cmp	r3, #0
 80189be:	d003      	beq.n	80189c8 <dir_find+0x106>
 80189c0:	7d7b      	ldrb	r3, [r7, #21]
 80189c2:	3b01      	subs	r3, #1
 80189c4:	b2db      	uxtb	r3, r3
 80189c6:	e000      	b.n	80189ca <dir_find+0x108>
 80189c8:	23ff      	movs	r3, #255	; 0xff
 80189ca:	757b      	strb	r3, [r7, #21]
 80189cc:	e024      	b.n	8018a18 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80189ce:	7d7b      	ldrb	r3, [r7, #21]
 80189d0:	2b00      	cmp	r3, #0
 80189d2:	d109      	bne.n	80189e8 <dir_find+0x126>
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	6a1b      	ldr	r3, [r3, #32]
 80189d8:	4618      	mov	r0, r3
 80189da:	f7ff ff51 	bl	8018880 <sum_sfn>
 80189de:	4603      	mov	r3, r0
 80189e0:	461a      	mov	r2, r3
 80189e2:	7d3b      	ldrb	r3, [r7, #20]
 80189e4:	4293      	cmp	r3, r2
 80189e6:	d024      	beq.n	8018a32 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80189ee:	f003 0301 	and.w	r3, r3, #1
 80189f2:	2b00      	cmp	r3, #0
 80189f4:	d10a      	bne.n	8018a0c <dir_find+0x14a>
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	6a18      	ldr	r0, [r3, #32]
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	3324      	adds	r3, #36	; 0x24
 80189fe:	220b      	movs	r2, #11
 8018a00:	4619      	mov	r1, r3
 8018a02:	f7fe fe1d 	bl	8017640 <mem_cmp>
 8018a06:	4603      	mov	r3, r0
 8018a08:	2b00      	cmp	r3, #0
 8018a0a:	d014      	beq.n	8018a36 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8018a0c:	23ff      	movs	r3, #255	; 0xff
 8018a0e:	757b      	strb	r3, [r7, #21]
 8018a10:	687b      	ldr	r3, [r7, #4]
 8018a12:	f04f 32ff 	mov.w	r2, #4294967295
 8018a16:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8018a18:	2100      	movs	r1, #0
 8018a1a:	6878      	ldr	r0, [r7, #4]
 8018a1c:	f7ff fc6d 	bl	80182fa <dir_next>
 8018a20:	4603      	mov	r3, r0
 8018a22:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8018a24:	7dfb      	ldrb	r3, [r7, #23]
 8018a26:	2b00      	cmp	r3, #0
 8018a28:	f43f af65 	beq.w	80188f6 <dir_find+0x34>
 8018a2c:	e004      	b.n	8018a38 <dir_find+0x176>
		if (res != FR_OK) break;
 8018a2e:	bf00      	nop
 8018a30:	e002      	b.n	8018a38 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8018a32:	bf00      	nop
 8018a34:	e000      	b.n	8018a38 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8018a36:	bf00      	nop

	return res;
 8018a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8018a3a:	4618      	mov	r0, r3
 8018a3c:	3718      	adds	r7, #24
 8018a3e:	46bd      	mov	sp, r7
 8018a40:	bd80      	pop	{r7, pc}
	...

08018a44 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8018a44:	b580      	push	{r7, lr}
 8018a46:	b08c      	sub	sp, #48	; 0x30
 8018a48:	af00      	add	r7, sp, #0
 8018a4a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	681b      	ldr	r3, [r3, #0]
 8018a50:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8018a52:	687b      	ldr	r3, [r7, #4]
 8018a54:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8018a58:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8018a5c:	2b00      	cmp	r3, #0
 8018a5e:	d001      	beq.n	8018a64 <dir_register+0x20>
 8018a60:	2306      	movs	r3, #6
 8018a62:	e0e0      	b.n	8018c26 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8018a64:	2300      	movs	r3, #0
 8018a66:	627b      	str	r3, [r7, #36]	; 0x24
 8018a68:	e002      	b.n	8018a70 <dir_register+0x2c>
 8018a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a6c:	3301      	adds	r3, #1
 8018a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8018a70:	69fb      	ldr	r3, [r7, #28]
 8018a72:	691a      	ldr	r2, [r3, #16]
 8018a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a76:	005b      	lsls	r3, r3, #1
 8018a78:	4413      	add	r3, r2
 8018a7a:	881b      	ldrh	r3, [r3, #0]
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	d1f4      	bne.n	8018a6a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8018a80:	687b      	ldr	r3, [r7, #4]
 8018a82:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8018a86:	f107 030c 	add.w	r3, r7, #12
 8018a8a:	220c      	movs	r2, #12
 8018a8c:	4618      	mov	r0, r3
 8018a8e:	f7fe fd9b 	bl	80175c8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8018a92:	7dfb      	ldrb	r3, [r7, #23]
 8018a94:	f003 0301 	and.w	r3, r3, #1
 8018a98:	2b00      	cmp	r3, #0
 8018a9a:	d032      	beq.n	8018b02 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	2240      	movs	r2, #64	; 0x40
 8018aa0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8018aa4:	2301      	movs	r3, #1
 8018aa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8018aa8:	e016      	b.n	8018ad8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8018aaa:	687b      	ldr	r3, [r7, #4]
 8018aac:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8018ab0:	69fb      	ldr	r3, [r7, #28]
 8018ab2:	691a      	ldr	r2, [r3, #16]
 8018ab4:	f107 010c 	add.w	r1, r7, #12
 8018ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018aba:	f7ff fe53 	bl	8018764 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8018abe:	6878      	ldr	r0, [r7, #4]
 8018ac0:	f7ff feff 	bl	80188c2 <dir_find>
 8018ac4:	4603      	mov	r3, r0
 8018ac6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8018aca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018ace:	2b00      	cmp	r3, #0
 8018ad0:	d106      	bne.n	8018ae0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8018ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ad4:	3301      	adds	r3, #1
 8018ad6:	62bb      	str	r3, [r7, #40]	; 0x28
 8018ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ada:	2b63      	cmp	r3, #99	; 0x63
 8018adc:	d9e5      	bls.n	8018aaa <dir_register+0x66>
 8018ade:	e000      	b.n	8018ae2 <dir_register+0x9e>
			if (res != FR_OK) break;
 8018ae0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8018ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ae4:	2b64      	cmp	r3, #100	; 0x64
 8018ae6:	d101      	bne.n	8018aec <dir_register+0xa8>
 8018ae8:	2307      	movs	r3, #7
 8018aea:	e09c      	b.n	8018c26 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8018aec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018af0:	2b04      	cmp	r3, #4
 8018af2:	d002      	beq.n	8018afa <dir_register+0xb6>
 8018af4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018af8:	e095      	b.n	8018c26 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8018afa:	7dfa      	ldrb	r2, [r7, #23]
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8018b02:	7dfb      	ldrb	r3, [r7, #23]
 8018b04:	f003 0302 	and.w	r3, r3, #2
 8018b08:	2b00      	cmp	r3, #0
 8018b0a:	d007      	beq.n	8018b1c <dir_register+0xd8>
 8018b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b0e:	330c      	adds	r3, #12
 8018b10:	4a47      	ldr	r2, [pc, #284]	; (8018c30 <dir_register+0x1ec>)
 8018b12:	fba2 2303 	umull	r2, r3, r2, r3
 8018b16:	089b      	lsrs	r3, r3, #2
 8018b18:	3301      	adds	r3, #1
 8018b1a:	e000      	b.n	8018b1e <dir_register+0xda>
 8018b1c:	2301      	movs	r3, #1
 8018b1e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8018b20:	6a39      	ldr	r1, [r7, #32]
 8018b22:	6878      	ldr	r0, [r7, #4]
 8018b24:	f7ff fcbf 	bl	80184a6 <dir_alloc>
 8018b28:	4603      	mov	r3, r0
 8018b2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8018b2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018b32:	2b00      	cmp	r3, #0
 8018b34:	d148      	bne.n	8018bc8 <dir_register+0x184>
 8018b36:	6a3b      	ldr	r3, [r7, #32]
 8018b38:	3b01      	subs	r3, #1
 8018b3a:	623b      	str	r3, [r7, #32]
 8018b3c:	6a3b      	ldr	r3, [r7, #32]
 8018b3e:	2b00      	cmp	r3, #0
 8018b40:	d042      	beq.n	8018bc8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8018b42:	687b      	ldr	r3, [r7, #4]
 8018b44:	695a      	ldr	r2, [r3, #20]
 8018b46:	6a3b      	ldr	r3, [r7, #32]
 8018b48:	015b      	lsls	r3, r3, #5
 8018b4a:	1ad3      	subs	r3, r2, r3
 8018b4c:	4619      	mov	r1, r3
 8018b4e:	6878      	ldr	r0, [r7, #4]
 8018b50:	f7ff fb4a 	bl	80181e8 <dir_sdi>
 8018b54:	4603      	mov	r3, r0
 8018b56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8018b5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018b5e:	2b00      	cmp	r3, #0
 8018b60:	d132      	bne.n	8018bc8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8018b62:	687b      	ldr	r3, [r7, #4]
 8018b64:	3324      	adds	r3, #36	; 0x24
 8018b66:	4618      	mov	r0, r3
 8018b68:	f7ff fe8a 	bl	8018880 <sum_sfn>
 8018b6c:	4603      	mov	r3, r0
 8018b6e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	69db      	ldr	r3, [r3, #28]
 8018b74:	4619      	mov	r1, r3
 8018b76:	69f8      	ldr	r0, [r7, #28]
 8018b78:	f7fe ff54 	bl	8017a24 <move_window>
 8018b7c:	4603      	mov	r3, r0
 8018b7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8018b82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	d11d      	bne.n	8018bc6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8018b8a:	69fb      	ldr	r3, [r7, #28]
 8018b8c:	6918      	ldr	r0, [r3, #16]
 8018b8e:	687b      	ldr	r3, [r7, #4]
 8018b90:	6a19      	ldr	r1, [r3, #32]
 8018b92:	6a3b      	ldr	r3, [r7, #32]
 8018b94:	b2da      	uxtb	r2, r3
 8018b96:	7efb      	ldrb	r3, [r7, #27]
 8018b98:	f7ff fd7c 	bl	8018694 <put_lfn>
				fs->wflag = 1;
 8018b9c:	69fb      	ldr	r3, [r7, #28]
 8018b9e:	2201      	movs	r2, #1
 8018ba0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8018ba2:	2100      	movs	r1, #0
 8018ba4:	6878      	ldr	r0, [r7, #4]
 8018ba6:	f7ff fba8 	bl	80182fa <dir_next>
 8018baa:	4603      	mov	r3, r0
 8018bac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8018bb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018bb4:	2b00      	cmp	r3, #0
 8018bb6:	d107      	bne.n	8018bc8 <dir_register+0x184>
 8018bb8:	6a3b      	ldr	r3, [r7, #32]
 8018bba:	3b01      	subs	r3, #1
 8018bbc:	623b      	str	r3, [r7, #32]
 8018bbe:	6a3b      	ldr	r3, [r7, #32]
 8018bc0:	2b00      	cmp	r3, #0
 8018bc2:	d1d5      	bne.n	8018b70 <dir_register+0x12c>
 8018bc4:	e000      	b.n	8018bc8 <dir_register+0x184>
				if (res != FR_OK) break;
 8018bc6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8018bc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018bcc:	2b00      	cmp	r3, #0
 8018bce:	d128      	bne.n	8018c22 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	69db      	ldr	r3, [r3, #28]
 8018bd4:	4619      	mov	r1, r3
 8018bd6:	69f8      	ldr	r0, [r7, #28]
 8018bd8:	f7fe ff24 	bl	8017a24 <move_window>
 8018bdc:	4603      	mov	r3, r0
 8018bde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8018be2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018be6:	2b00      	cmp	r3, #0
 8018be8:	d11b      	bne.n	8018c22 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8018bea:	687b      	ldr	r3, [r7, #4]
 8018bec:	6a1b      	ldr	r3, [r3, #32]
 8018bee:	2220      	movs	r2, #32
 8018bf0:	2100      	movs	r1, #0
 8018bf2:	4618      	mov	r0, r3
 8018bf4:	f7fe fd09 	bl	801760a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8018bf8:	687b      	ldr	r3, [r7, #4]
 8018bfa:	6a18      	ldr	r0, [r3, #32]
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	3324      	adds	r3, #36	; 0x24
 8018c00:	220b      	movs	r2, #11
 8018c02:	4619      	mov	r1, r3
 8018c04:	f7fe fce0 	bl	80175c8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8018c0e:	687b      	ldr	r3, [r7, #4]
 8018c10:	6a1b      	ldr	r3, [r3, #32]
 8018c12:	330c      	adds	r3, #12
 8018c14:	f002 0218 	and.w	r2, r2, #24
 8018c18:	b2d2      	uxtb	r2, r2
 8018c1a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8018c1c:	69fb      	ldr	r3, [r7, #28]
 8018c1e:	2201      	movs	r2, #1
 8018c20:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8018c22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8018c26:	4618      	mov	r0, r3
 8018c28:	3730      	adds	r7, #48	; 0x30
 8018c2a:	46bd      	mov	sp, r7
 8018c2c:	bd80      	pop	{r7, pc}
 8018c2e:	bf00      	nop
 8018c30:	4ec4ec4f 	.word	0x4ec4ec4f

08018c34 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8018c34:	b580      	push	{r7, lr}
 8018c36:	b08a      	sub	sp, #40	; 0x28
 8018c38:	af00      	add	r7, sp, #0
 8018c3a:	6078      	str	r0, [r7, #4]
 8018c3c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8018c3e:	683b      	ldr	r3, [r7, #0]
 8018c40:	681b      	ldr	r3, [r3, #0]
 8018c42:	613b      	str	r3, [r7, #16]
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	681b      	ldr	r3, [r3, #0]
 8018c48:	691b      	ldr	r3, [r3, #16]
 8018c4a:	60fb      	str	r3, [r7, #12]
 8018c4c:	2300      	movs	r3, #0
 8018c4e:	617b      	str	r3, [r7, #20]
 8018c50:	697b      	ldr	r3, [r7, #20]
 8018c52:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8018c54:	69bb      	ldr	r3, [r7, #24]
 8018c56:	1c5a      	adds	r2, r3, #1
 8018c58:	61ba      	str	r2, [r7, #24]
 8018c5a:	693a      	ldr	r2, [r7, #16]
 8018c5c:	4413      	add	r3, r2
 8018c5e:	781b      	ldrb	r3, [r3, #0]
 8018c60:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8018c62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018c64:	2b1f      	cmp	r3, #31
 8018c66:	d940      	bls.n	8018cea <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8018c68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018c6a:	2b2f      	cmp	r3, #47	; 0x2f
 8018c6c:	d006      	beq.n	8018c7c <create_name+0x48>
 8018c6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018c70:	2b5c      	cmp	r3, #92	; 0x5c
 8018c72:	d110      	bne.n	8018c96 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8018c74:	e002      	b.n	8018c7c <create_name+0x48>
 8018c76:	69bb      	ldr	r3, [r7, #24]
 8018c78:	3301      	adds	r3, #1
 8018c7a:	61bb      	str	r3, [r7, #24]
 8018c7c:	693a      	ldr	r2, [r7, #16]
 8018c7e:	69bb      	ldr	r3, [r7, #24]
 8018c80:	4413      	add	r3, r2
 8018c82:	781b      	ldrb	r3, [r3, #0]
 8018c84:	2b2f      	cmp	r3, #47	; 0x2f
 8018c86:	d0f6      	beq.n	8018c76 <create_name+0x42>
 8018c88:	693a      	ldr	r2, [r7, #16]
 8018c8a:	69bb      	ldr	r3, [r7, #24]
 8018c8c:	4413      	add	r3, r2
 8018c8e:	781b      	ldrb	r3, [r3, #0]
 8018c90:	2b5c      	cmp	r3, #92	; 0x5c
 8018c92:	d0f0      	beq.n	8018c76 <create_name+0x42>
			break;
 8018c94:	e02a      	b.n	8018cec <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8018c96:	697b      	ldr	r3, [r7, #20]
 8018c98:	2bfe      	cmp	r3, #254	; 0xfe
 8018c9a:	d901      	bls.n	8018ca0 <create_name+0x6c>
 8018c9c:	2306      	movs	r3, #6
 8018c9e:	e17d      	b.n	8018f9c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8018ca0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018ca2:	b2db      	uxtb	r3, r3
 8018ca4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8018ca6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018ca8:	2101      	movs	r1, #1
 8018caa:	4618      	mov	r0, r3
 8018cac:	f001 fa8c 	bl	801a1c8 <ff_convert>
 8018cb0:	4603      	mov	r3, r0
 8018cb2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8018cb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018cb6:	2b00      	cmp	r3, #0
 8018cb8:	d101      	bne.n	8018cbe <create_name+0x8a>
 8018cba:	2306      	movs	r3, #6
 8018cbc:	e16e      	b.n	8018f9c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8018cbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018cc0:	2b7f      	cmp	r3, #127	; 0x7f
 8018cc2:	d809      	bhi.n	8018cd8 <create_name+0xa4>
 8018cc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018cc6:	4619      	mov	r1, r3
 8018cc8:	488d      	ldr	r0, [pc, #564]	; (8018f00 <create_name+0x2cc>)
 8018cca:	f7fe fce0 	bl	801768e <chk_chr>
 8018cce:	4603      	mov	r3, r0
 8018cd0:	2b00      	cmp	r3, #0
 8018cd2:	d001      	beq.n	8018cd8 <create_name+0xa4>
 8018cd4:	2306      	movs	r3, #6
 8018cd6:	e161      	b.n	8018f9c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8018cd8:	697b      	ldr	r3, [r7, #20]
 8018cda:	1c5a      	adds	r2, r3, #1
 8018cdc:	617a      	str	r2, [r7, #20]
 8018cde:	005b      	lsls	r3, r3, #1
 8018ce0:	68fa      	ldr	r2, [r7, #12]
 8018ce2:	4413      	add	r3, r2
 8018ce4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018ce6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8018ce8:	e7b4      	b.n	8018c54 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8018cea:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8018cec:	693a      	ldr	r2, [r7, #16]
 8018cee:	69bb      	ldr	r3, [r7, #24]
 8018cf0:	441a      	add	r2, r3
 8018cf2:	683b      	ldr	r3, [r7, #0]
 8018cf4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8018cf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018cf8:	2b1f      	cmp	r3, #31
 8018cfa:	d801      	bhi.n	8018d00 <create_name+0xcc>
 8018cfc:	2304      	movs	r3, #4
 8018cfe:	e000      	b.n	8018d02 <create_name+0xce>
 8018d00:	2300      	movs	r3, #0
 8018d02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8018d06:	e011      	b.n	8018d2c <create_name+0xf8>
		w = lfn[di - 1];
 8018d08:	697a      	ldr	r2, [r7, #20]
 8018d0a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018d0e:	4413      	add	r3, r2
 8018d10:	005b      	lsls	r3, r3, #1
 8018d12:	68fa      	ldr	r2, [r7, #12]
 8018d14:	4413      	add	r3, r2
 8018d16:	881b      	ldrh	r3, [r3, #0]
 8018d18:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8018d1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018d1c:	2b20      	cmp	r3, #32
 8018d1e:	d002      	beq.n	8018d26 <create_name+0xf2>
 8018d20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018d22:	2b2e      	cmp	r3, #46	; 0x2e
 8018d24:	d106      	bne.n	8018d34 <create_name+0x100>
		di--;
 8018d26:	697b      	ldr	r3, [r7, #20]
 8018d28:	3b01      	subs	r3, #1
 8018d2a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8018d2c:	697b      	ldr	r3, [r7, #20]
 8018d2e:	2b00      	cmp	r3, #0
 8018d30:	d1ea      	bne.n	8018d08 <create_name+0xd4>
 8018d32:	e000      	b.n	8018d36 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8018d34:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8018d36:	697b      	ldr	r3, [r7, #20]
 8018d38:	005b      	lsls	r3, r3, #1
 8018d3a:	68fa      	ldr	r2, [r7, #12]
 8018d3c:	4413      	add	r3, r2
 8018d3e:	2200      	movs	r2, #0
 8018d40:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8018d42:	697b      	ldr	r3, [r7, #20]
 8018d44:	2b00      	cmp	r3, #0
 8018d46:	d101      	bne.n	8018d4c <create_name+0x118>
 8018d48:	2306      	movs	r3, #6
 8018d4a:	e127      	b.n	8018f9c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8018d4c:	687b      	ldr	r3, [r7, #4]
 8018d4e:	3324      	adds	r3, #36	; 0x24
 8018d50:	220b      	movs	r2, #11
 8018d52:	2120      	movs	r1, #32
 8018d54:	4618      	mov	r0, r3
 8018d56:	f7fe fc58 	bl	801760a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8018d5a:	2300      	movs	r3, #0
 8018d5c:	61bb      	str	r3, [r7, #24]
 8018d5e:	e002      	b.n	8018d66 <create_name+0x132>
 8018d60:	69bb      	ldr	r3, [r7, #24]
 8018d62:	3301      	adds	r3, #1
 8018d64:	61bb      	str	r3, [r7, #24]
 8018d66:	69bb      	ldr	r3, [r7, #24]
 8018d68:	005b      	lsls	r3, r3, #1
 8018d6a:	68fa      	ldr	r2, [r7, #12]
 8018d6c:	4413      	add	r3, r2
 8018d6e:	881b      	ldrh	r3, [r3, #0]
 8018d70:	2b20      	cmp	r3, #32
 8018d72:	d0f5      	beq.n	8018d60 <create_name+0x12c>
 8018d74:	69bb      	ldr	r3, [r7, #24]
 8018d76:	005b      	lsls	r3, r3, #1
 8018d78:	68fa      	ldr	r2, [r7, #12]
 8018d7a:	4413      	add	r3, r2
 8018d7c:	881b      	ldrh	r3, [r3, #0]
 8018d7e:	2b2e      	cmp	r3, #46	; 0x2e
 8018d80:	d0ee      	beq.n	8018d60 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8018d82:	69bb      	ldr	r3, [r7, #24]
 8018d84:	2b00      	cmp	r3, #0
 8018d86:	d009      	beq.n	8018d9c <create_name+0x168>
 8018d88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018d8c:	f043 0303 	orr.w	r3, r3, #3
 8018d90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8018d94:	e002      	b.n	8018d9c <create_name+0x168>
 8018d96:	697b      	ldr	r3, [r7, #20]
 8018d98:	3b01      	subs	r3, #1
 8018d9a:	617b      	str	r3, [r7, #20]
 8018d9c:	697b      	ldr	r3, [r7, #20]
 8018d9e:	2b00      	cmp	r3, #0
 8018da0:	d009      	beq.n	8018db6 <create_name+0x182>
 8018da2:	697a      	ldr	r2, [r7, #20]
 8018da4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018da8:	4413      	add	r3, r2
 8018daa:	005b      	lsls	r3, r3, #1
 8018dac:	68fa      	ldr	r2, [r7, #12]
 8018dae:	4413      	add	r3, r2
 8018db0:	881b      	ldrh	r3, [r3, #0]
 8018db2:	2b2e      	cmp	r3, #46	; 0x2e
 8018db4:	d1ef      	bne.n	8018d96 <create_name+0x162>

	i = b = 0; ni = 8;
 8018db6:	2300      	movs	r3, #0
 8018db8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018dbc:	2300      	movs	r3, #0
 8018dbe:	623b      	str	r3, [r7, #32]
 8018dc0:	2308      	movs	r3, #8
 8018dc2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8018dc4:	69bb      	ldr	r3, [r7, #24]
 8018dc6:	1c5a      	adds	r2, r3, #1
 8018dc8:	61ba      	str	r2, [r7, #24]
 8018dca:	005b      	lsls	r3, r3, #1
 8018dcc:	68fa      	ldr	r2, [r7, #12]
 8018dce:	4413      	add	r3, r2
 8018dd0:	881b      	ldrh	r3, [r3, #0]
 8018dd2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8018dd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018dd6:	2b00      	cmp	r3, #0
 8018dd8:	f000 8090 	beq.w	8018efc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8018ddc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018dde:	2b20      	cmp	r3, #32
 8018de0:	d006      	beq.n	8018df0 <create_name+0x1bc>
 8018de2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018de4:	2b2e      	cmp	r3, #46	; 0x2e
 8018de6:	d10a      	bne.n	8018dfe <create_name+0x1ca>
 8018de8:	69ba      	ldr	r2, [r7, #24]
 8018dea:	697b      	ldr	r3, [r7, #20]
 8018dec:	429a      	cmp	r2, r3
 8018dee:	d006      	beq.n	8018dfe <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8018df0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018df4:	f043 0303 	orr.w	r3, r3, #3
 8018df8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018dfc:	e07d      	b.n	8018efa <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8018dfe:	6a3a      	ldr	r2, [r7, #32]
 8018e00:	69fb      	ldr	r3, [r7, #28]
 8018e02:	429a      	cmp	r2, r3
 8018e04:	d203      	bcs.n	8018e0e <create_name+0x1da>
 8018e06:	69ba      	ldr	r2, [r7, #24]
 8018e08:	697b      	ldr	r3, [r7, #20]
 8018e0a:	429a      	cmp	r2, r3
 8018e0c:	d123      	bne.n	8018e56 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8018e0e:	69fb      	ldr	r3, [r7, #28]
 8018e10:	2b0b      	cmp	r3, #11
 8018e12:	d106      	bne.n	8018e22 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8018e14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018e18:	f043 0303 	orr.w	r3, r3, #3
 8018e1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018e20:	e075      	b.n	8018f0e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8018e22:	69ba      	ldr	r2, [r7, #24]
 8018e24:	697b      	ldr	r3, [r7, #20]
 8018e26:	429a      	cmp	r2, r3
 8018e28:	d005      	beq.n	8018e36 <create_name+0x202>
 8018e2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018e2e:	f043 0303 	orr.w	r3, r3, #3
 8018e32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8018e36:	69ba      	ldr	r2, [r7, #24]
 8018e38:	697b      	ldr	r3, [r7, #20]
 8018e3a:	429a      	cmp	r2, r3
 8018e3c:	d866      	bhi.n	8018f0c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8018e3e:	697b      	ldr	r3, [r7, #20]
 8018e40:	61bb      	str	r3, [r7, #24]
 8018e42:	2308      	movs	r3, #8
 8018e44:	623b      	str	r3, [r7, #32]
 8018e46:	230b      	movs	r3, #11
 8018e48:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8018e4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018e4e:	009b      	lsls	r3, r3, #2
 8018e50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018e54:	e051      	b.n	8018efa <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8018e56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018e58:	2b7f      	cmp	r3, #127	; 0x7f
 8018e5a:	d914      	bls.n	8018e86 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8018e5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018e5e:	2100      	movs	r1, #0
 8018e60:	4618      	mov	r0, r3
 8018e62:	f001 f9b1 	bl	801a1c8 <ff_convert>
 8018e66:	4603      	mov	r3, r0
 8018e68:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8018e6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018e6c:	2b00      	cmp	r3, #0
 8018e6e:	d004      	beq.n	8018e7a <create_name+0x246>
 8018e70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018e72:	3b80      	subs	r3, #128	; 0x80
 8018e74:	4a23      	ldr	r2, [pc, #140]	; (8018f04 <create_name+0x2d0>)
 8018e76:	5cd3      	ldrb	r3, [r2, r3]
 8018e78:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8018e7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018e7e:	f043 0302 	orr.w	r3, r3, #2
 8018e82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8018e86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018e88:	2b00      	cmp	r3, #0
 8018e8a:	d007      	beq.n	8018e9c <create_name+0x268>
 8018e8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018e8e:	4619      	mov	r1, r3
 8018e90:	481d      	ldr	r0, [pc, #116]	; (8018f08 <create_name+0x2d4>)
 8018e92:	f7fe fbfc 	bl	801768e <chk_chr>
 8018e96:	4603      	mov	r3, r0
 8018e98:	2b00      	cmp	r3, #0
 8018e9a:	d008      	beq.n	8018eae <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8018e9c:	235f      	movs	r3, #95	; 0x5f
 8018e9e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8018ea0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018ea4:	f043 0303 	orr.w	r3, r3, #3
 8018ea8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018eac:	e01b      	b.n	8018ee6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8018eae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018eb0:	2b40      	cmp	r3, #64	; 0x40
 8018eb2:	d909      	bls.n	8018ec8 <create_name+0x294>
 8018eb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018eb6:	2b5a      	cmp	r3, #90	; 0x5a
 8018eb8:	d806      	bhi.n	8018ec8 <create_name+0x294>
					b |= 2;
 8018eba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018ebe:	f043 0302 	orr.w	r3, r3, #2
 8018ec2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018ec6:	e00e      	b.n	8018ee6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8018ec8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018eca:	2b60      	cmp	r3, #96	; 0x60
 8018ecc:	d90b      	bls.n	8018ee6 <create_name+0x2b2>
 8018ece:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018ed0:	2b7a      	cmp	r3, #122	; 0x7a
 8018ed2:	d808      	bhi.n	8018ee6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8018ed4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018ed8:	f043 0301 	orr.w	r3, r3, #1
 8018edc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8018ee0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018ee2:	3b20      	subs	r3, #32
 8018ee4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8018ee6:	6a3b      	ldr	r3, [r7, #32]
 8018ee8:	1c5a      	adds	r2, r3, #1
 8018eea:	623a      	str	r2, [r7, #32]
 8018eec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018eee:	b2d1      	uxtb	r1, r2
 8018ef0:	687a      	ldr	r2, [r7, #4]
 8018ef2:	4413      	add	r3, r2
 8018ef4:	460a      	mov	r2, r1
 8018ef6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8018efa:	e763      	b.n	8018dc4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8018efc:	bf00      	nop
 8018efe:	e006      	b.n	8018f0e <create_name+0x2da>
 8018f00:	0801f6bc 	.word	0x0801f6bc
 8018f04:	0801f804 	.word	0x0801f804
 8018f08:	0801f6c8 	.word	0x0801f6c8
			if (si > di) break;			/* No extension */
 8018f0c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8018f0e:	687b      	ldr	r3, [r7, #4]
 8018f10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8018f14:	2be5      	cmp	r3, #229	; 0xe5
 8018f16:	d103      	bne.n	8018f20 <create_name+0x2ec>
 8018f18:	687b      	ldr	r3, [r7, #4]
 8018f1a:	2205      	movs	r2, #5
 8018f1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8018f20:	69fb      	ldr	r3, [r7, #28]
 8018f22:	2b08      	cmp	r3, #8
 8018f24:	d104      	bne.n	8018f30 <create_name+0x2fc>
 8018f26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018f2a:	009b      	lsls	r3, r3, #2
 8018f2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8018f30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018f34:	f003 030c 	and.w	r3, r3, #12
 8018f38:	2b0c      	cmp	r3, #12
 8018f3a:	d005      	beq.n	8018f48 <create_name+0x314>
 8018f3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018f40:	f003 0303 	and.w	r3, r3, #3
 8018f44:	2b03      	cmp	r3, #3
 8018f46:	d105      	bne.n	8018f54 <create_name+0x320>
 8018f48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018f4c:	f043 0302 	orr.w	r3, r3, #2
 8018f50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8018f54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018f58:	f003 0302 	and.w	r3, r3, #2
 8018f5c:	2b00      	cmp	r3, #0
 8018f5e:	d117      	bne.n	8018f90 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8018f60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018f64:	f003 0303 	and.w	r3, r3, #3
 8018f68:	2b01      	cmp	r3, #1
 8018f6a:	d105      	bne.n	8018f78 <create_name+0x344>
 8018f6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018f70:	f043 0310 	orr.w	r3, r3, #16
 8018f74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8018f78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018f7c:	f003 030c 	and.w	r3, r3, #12
 8018f80:	2b04      	cmp	r3, #4
 8018f82:	d105      	bne.n	8018f90 <create_name+0x35c>
 8018f84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018f88:	f043 0308 	orr.w	r3, r3, #8
 8018f8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8018f90:	687b      	ldr	r3, [r7, #4]
 8018f92:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8018f96:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8018f9a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8018f9c:	4618      	mov	r0, r3
 8018f9e:	3728      	adds	r7, #40	; 0x28
 8018fa0:	46bd      	mov	sp, r7
 8018fa2:	bd80      	pop	{r7, pc}

08018fa4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8018fa4:	b580      	push	{r7, lr}
 8018fa6:	b086      	sub	sp, #24
 8018fa8:	af00      	add	r7, sp, #0
 8018faa:	6078      	str	r0, [r7, #4]
 8018fac:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8018fae:	687b      	ldr	r3, [r7, #4]
 8018fb0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8018fb2:	693b      	ldr	r3, [r7, #16]
 8018fb4:	681b      	ldr	r3, [r3, #0]
 8018fb6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8018fb8:	e002      	b.n	8018fc0 <follow_path+0x1c>
 8018fba:	683b      	ldr	r3, [r7, #0]
 8018fbc:	3301      	adds	r3, #1
 8018fbe:	603b      	str	r3, [r7, #0]
 8018fc0:	683b      	ldr	r3, [r7, #0]
 8018fc2:	781b      	ldrb	r3, [r3, #0]
 8018fc4:	2b2f      	cmp	r3, #47	; 0x2f
 8018fc6:	d0f8      	beq.n	8018fba <follow_path+0x16>
 8018fc8:	683b      	ldr	r3, [r7, #0]
 8018fca:	781b      	ldrb	r3, [r3, #0]
 8018fcc:	2b5c      	cmp	r3, #92	; 0x5c
 8018fce:	d0f4      	beq.n	8018fba <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8018fd0:	693b      	ldr	r3, [r7, #16]
 8018fd2:	2200      	movs	r2, #0
 8018fd4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8018fd6:	683b      	ldr	r3, [r7, #0]
 8018fd8:	781b      	ldrb	r3, [r3, #0]
 8018fda:	2b1f      	cmp	r3, #31
 8018fdc:	d80a      	bhi.n	8018ff4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8018fde:	687b      	ldr	r3, [r7, #4]
 8018fe0:	2280      	movs	r2, #128	; 0x80
 8018fe2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8018fe6:	2100      	movs	r1, #0
 8018fe8:	6878      	ldr	r0, [r7, #4]
 8018fea:	f7ff f8fd 	bl	80181e8 <dir_sdi>
 8018fee:	4603      	mov	r3, r0
 8018ff0:	75fb      	strb	r3, [r7, #23]
 8018ff2:	e048      	b.n	8019086 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8018ff4:	463b      	mov	r3, r7
 8018ff6:	4619      	mov	r1, r3
 8018ff8:	6878      	ldr	r0, [r7, #4]
 8018ffa:	f7ff fe1b 	bl	8018c34 <create_name>
 8018ffe:	4603      	mov	r3, r0
 8019000:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8019002:	7dfb      	ldrb	r3, [r7, #23]
 8019004:	2b00      	cmp	r3, #0
 8019006:	d139      	bne.n	801907c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8019008:	6878      	ldr	r0, [r7, #4]
 801900a:	f7ff fc5a 	bl	80188c2 <dir_find>
 801900e:	4603      	mov	r3, r0
 8019010:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8019012:	687b      	ldr	r3, [r7, #4]
 8019014:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8019018:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801901a:	7dfb      	ldrb	r3, [r7, #23]
 801901c:	2b00      	cmp	r3, #0
 801901e:	d00a      	beq.n	8019036 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8019020:	7dfb      	ldrb	r3, [r7, #23]
 8019022:	2b04      	cmp	r3, #4
 8019024:	d12c      	bne.n	8019080 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8019026:	7afb      	ldrb	r3, [r7, #11]
 8019028:	f003 0304 	and.w	r3, r3, #4
 801902c:	2b00      	cmp	r3, #0
 801902e:	d127      	bne.n	8019080 <follow_path+0xdc>
 8019030:	2305      	movs	r3, #5
 8019032:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8019034:	e024      	b.n	8019080 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8019036:	7afb      	ldrb	r3, [r7, #11]
 8019038:	f003 0304 	and.w	r3, r3, #4
 801903c:	2b00      	cmp	r3, #0
 801903e:	d121      	bne.n	8019084 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8019040:	693b      	ldr	r3, [r7, #16]
 8019042:	799b      	ldrb	r3, [r3, #6]
 8019044:	f003 0310 	and.w	r3, r3, #16
 8019048:	2b00      	cmp	r3, #0
 801904a:	d102      	bne.n	8019052 <follow_path+0xae>
				res = FR_NO_PATH; break;
 801904c:	2305      	movs	r3, #5
 801904e:	75fb      	strb	r3, [r7, #23]
 8019050:	e019      	b.n	8019086 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8019052:	68fb      	ldr	r3, [r7, #12]
 8019054:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8019058:	687b      	ldr	r3, [r7, #4]
 801905a:	695b      	ldr	r3, [r3, #20]
 801905c:	68fa      	ldr	r2, [r7, #12]
 801905e:	8992      	ldrh	r2, [r2, #12]
 8019060:	fbb3 f0f2 	udiv	r0, r3, r2
 8019064:	fb00 f202 	mul.w	r2, r0, r2
 8019068:	1a9b      	subs	r3, r3, r2
 801906a:	440b      	add	r3, r1
 801906c:	4619      	mov	r1, r3
 801906e:	68f8      	ldr	r0, [r7, #12]
 8019070:	f7ff fa60 	bl	8018534 <ld_clust>
 8019074:	4602      	mov	r2, r0
 8019076:	693b      	ldr	r3, [r7, #16]
 8019078:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801907a:	e7bb      	b.n	8018ff4 <follow_path+0x50>
			if (res != FR_OK) break;
 801907c:	bf00      	nop
 801907e:	e002      	b.n	8019086 <follow_path+0xe2>
				break;
 8019080:	bf00      	nop
 8019082:	e000      	b.n	8019086 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8019084:	bf00      	nop
			}
		}
	}

	return res;
 8019086:	7dfb      	ldrb	r3, [r7, #23]
}
 8019088:	4618      	mov	r0, r3
 801908a:	3718      	adds	r7, #24
 801908c:	46bd      	mov	sp, r7
 801908e:	bd80      	pop	{r7, pc}

08019090 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8019090:	b480      	push	{r7}
 8019092:	b087      	sub	sp, #28
 8019094:	af00      	add	r7, sp, #0
 8019096:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8019098:	f04f 33ff 	mov.w	r3, #4294967295
 801909c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801909e:	687b      	ldr	r3, [r7, #4]
 80190a0:	681b      	ldr	r3, [r3, #0]
 80190a2:	2b00      	cmp	r3, #0
 80190a4:	d031      	beq.n	801910a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80190a6:	687b      	ldr	r3, [r7, #4]
 80190a8:	681b      	ldr	r3, [r3, #0]
 80190aa:	617b      	str	r3, [r7, #20]
 80190ac:	e002      	b.n	80190b4 <get_ldnumber+0x24>
 80190ae:	697b      	ldr	r3, [r7, #20]
 80190b0:	3301      	adds	r3, #1
 80190b2:	617b      	str	r3, [r7, #20]
 80190b4:	697b      	ldr	r3, [r7, #20]
 80190b6:	781b      	ldrb	r3, [r3, #0]
 80190b8:	2b1f      	cmp	r3, #31
 80190ba:	d903      	bls.n	80190c4 <get_ldnumber+0x34>
 80190bc:	697b      	ldr	r3, [r7, #20]
 80190be:	781b      	ldrb	r3, [r3, #0]
 80190c0:	2b3a      	cmp	r3, #58	; 0x3a
 80190c2:	d1f4      	bne.n	80190ae <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80190c4:	697b      	ldr	r3, [r7, #20]
 80190c6:	781b      	ldrb	r3, [r3, #0]
 80190c8:	2b3a      	cmp	r3, #58	; 0x3a
 80190ca:	d11c      	bne.n	8019106 <get_ldnumber+0x76>
			tp = *path;
 80190cc:	687b      	ldr	r3, [r7, #4]
 80190ce:	681b      	ldr	r3, [r3, #0]
 80190d0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80190d2:	68fb      	ldr	r3, [r7, #12]
 80190d4:	1c5a      	adds	r2, r3, #1
 80190d6:	60fa      	str	r2, [r7, #12]
 80190d8:	781b      	ldrb	r3, [r3, #0]
 80190da:	3b30      	subs	r3, #48	; 0x30
 80190dc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80190de:	68bb      	ldr	r3, [r7, #8]
 80190e0:	2b09      	cmp	r3, #9
 80190e2:	d80e      	bhi.n	8019102 <get_ldnumber+0x72>
 80190e4:	68fa      	ldr	r2, [r7, #12]
 80190e6:	697b      	ldr	r3, [r7, #20]
 80190e8:	429a      	cmp	r2, r3
 80190ea:	d10a      	bne.n	8019102 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80190ec:	68bb      	ldr	r3, [r7, #8]
 80190ee:	2b00      	cmp	r3, #0
 80190f0:	d107      	bne.n	8019102 <get_ldnumber+0x72>
					vol = (int)i;
 80190f2:	68bb      	ldr	r3, [r7, #8]
 80190f4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80190f6:	697b      	ldr	r3, [r7, #20]
 80190f8:	3301      	adds	r3, #1
 80190fa:	617b      	str	r3, [r7, #20]
 80190fc:	687b      	ldr	r3, [r7, #4]
 80190fe:	697a      	ldr	r2, [r7, #20]
 8019100:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8019102:	693b      	ldr	r3, [r7, #16]
 8019104:	e002      	b.n	801910c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8019106:	2300      	movs	r3, #0
 8019108:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801910a:	693b      	ldr	r3, [r7, #16]
}
 801910c:	4618      	mov	r0, r3
 801910e:	371c      	adds	r7, #28
 8019110:	46bd      	mov	sp, r7
 8019112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019116:	4770      	bx	lr

08019118 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8019118:	b580      	push	{r7, lr}
 801911a:	b082      	sub	sp, #8
 801911c:	af00      	add	r7, sp, #0
 801911e:	6078      	str	r0, [r7, #4]
 8019120:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8019122:	687b      	ldr	r3, [r7, #4]
 8019124:	2200      	movs	r2, #0
 8019126:	70da      	strb	r2, [r3, #3]
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	f04f 32ff 	mov.w	r2, #4294967295
 801912e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8019130:	6839      	ldr	r1, [r7, #0]
 8019132:	6878      	ldr	r0, [r7, #4]
 8019134:	f7fe fc76 	bl	8017a24 <move_window>
 8019138:	4603      	mov	r3, r0
 801913a:	2b00      	cmp	r3, #0
 801913c:	d001      	beq.n	8019142 <check_fs+0x2a>
 801913e:	2304      	movs	r3, #4
 8019140:	e038      	b.n	80191b4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8019142:	687b      	ldr	r3, [r7, #4]
 8019144:	3338      	adds	r3, #56	; 0x38
 8019146:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801914a:	4618      	mov	r0, r3
 801914c:	f7fe f9ba 	bl	80174c4 <ld_word>
 8019150:	4603      	mov	r3, r0
 8019152:	461a      	mov	r2, r3
 8019154:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8019158:	429a      	cmp	r2, r3
 801915a:	d001      	beq.n	8019160 <check_fs+0x48>
 801915c:	2303      	movs	r3, #3
 801915e:	e029      	b.n	80191b4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8019160:	687b      	ldr	r3, [r7, #4]
 8019162:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8019166:	2be9      	cmp	r3, #233	; 0xe9
 8019168:	d009      	beq.n	801917e <check_fs+0x66>
 801916a:	687b      	ldr	r3, [r7, #4]
 801916c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8019170:	2beb      	cmp	r3, #235	; 0xeb
 8019172:	d11e      	bne.n	80191b2 <check_fs+0x9a>
 8019174:	687b      	ldr	r3, [r7, #4]
 8019176:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801917a:	2b90      	cmp	r3, #144	; 0x90
 801917c:	d119      	bne.n	80191b2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	3338      	adds	r3, #56	; 0x38
 8019182:	3336      	adds	r3, #54	; 0x36
 8019184:	4618      	mov	r0, r3
 8019186:	f7fe f9b5 	bl	80174f4 <ld_dword>
 801918a:	4603      	mov	r3, r0
 801918c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8019190:	4a0a      	ldr	r2, [pc, #40]	; (80191bc <check_fs+0xa4>)
 8019192:	4293      	cmp	r3, r2
 8019194:	d101      	bne.n	801919a <check_fs+0x82>
 8019196:	2300      	movs	r3, #0
 8019198:	e00c      	b.n	80191b4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801919a:	687b      	ldr	r3, [r7, #4]
 801919c:	3338      	adds	r3, #56	; 0x38
 801919e:	3352      	adds	r3, #82	; 0x52
 80191a0:	4618      	mov	r0, r3
 80191a2:	f7fe f9a7 	bl	80174f4 <ld_dword>
 80191a6:	4603      	mov	r3, r0
 80191a8:	4a05      	ldr	r2, [pc, #20]	; (80191c0 <check_fs+0xa8>)
 80191aa:	4293      	cmp	r3, r2
 80191ac:	d101      	bne.n	80191b2 <check_fs+0x9a>
 80191ae:	2300      	movs	r3, #0
 80191b0:	e000      	b.n	80191b4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80191b2:	2302      	movs	r3, #2
}
 80191b4:	4618      	mov	r0, r3
 80191b6:	3708      	adds	r7, #8
 80191b8:	46bd      	mov	sp, r7
 80191ba:	bd80      	pop	{r7, pc}
 80191bc:	00544146 	.word	0x00544146
 80191c0:	33544146 	.word	0x33544146

080191c4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80191c4:	b580      	push	{r7, lr}
 80191c6:	b096      	sub	sp, #88	; 0x58
 80191c8:	af00      	add	r7, sp, #0
 80191ca:	60f8      	str	r0, [r7, #12]
 80191cc:	60b9      	str	r1, [r7, #8]
 80191ce:	4613      	mov	r3, r2
 80191d0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80191d2:	68bb      	ldr	r3, [r7, #8]
 80191d4:	2200      	movs	r2, #0
 80191d6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80191d8:	68f8      	ldr	r0, [r7, #12]
 80191da:	f7ff ff59 	bl	8019090 <get_ldnumber>
 80191de:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80191e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80191e2:	2b00      	cmp	r3, #0
 80191e4:	da01      	bge.n	80191ea <find_volume+0x26>
 80191e6:	230b      	movs	r3, #11
 80191e8:	e265      	b.n	80196b6 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80191ea:	4a9f      	ldr	r2, [pc, #636]	; (8019468 <find_volume+0x2a4>)
 80191ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80191ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80191f2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80191f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191f6:	2b00      	cmp	r3, #0
 80191f8:	d101      	bne.n	80191fe <find_volume+0x3a>
 80191fa:	230c      	movs	r3, #12
 80191fc:	e25b      	b.n	80196b6 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80191fe:	68bb      	ldr	r3, [r7, #8]
 8019200:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019202:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8019204:	79fb      	ldrb	r3, [r7, #7]
 8019206:	f023 0301 	bic.w	r3, r3, #1
 801920a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801920c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801920e:	781b      	ldrb	r3, [r3, #0]
 8019210:	2b00      	cmp	r3, #0
 8019212:	d01a      	beq.n	801924a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8019214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019216:	785b      	ldrb	r3, [r3, #1]
 8019218:	4618      	mov	r0, r3
 801921a:	f7fe f8b5 	bl	8017388 <disk_status>
 801921e:	4603      	mov	r3, r0
 8019220:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8019224:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8019228:	f003 0301 	and.w	r3, r3, #1
 801922c:	2b00      	cmp	r3, #0
 801922e:	d10c      	bne.n	801924a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8019230:	79fb      	ldrb	r3, [r7, #7]
 8019232:	2b00      	cmp	r3, #0
 8019234:	d007      	beq.n	8019246 <find_volume+0x82>
 8019236:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801923a:	f003 0304 	and.w	r3, r3, #4
 801923e:	2b00      	cmp	r3, #0
 8019240:	d001      	beq.n	8019246 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8019242:	230a      	movs	r3, #10
 8019244:	e237      	b.n	80196b6 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8019246:	2300      	movs	r3, #0
 8019248:	e235      	b.n	80196b6 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801924a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801924c:	2200      	movs	r2, #0
 801924e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8019250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8019252:	b2da      	uxtb	r2, r3
 8019254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019256:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8019258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801925a:	785b      	ldrb	r3, [r3, #1]
 801925c:	4618      	mov	r0, r3
 801925e:	f7fe f8ad 	bl	80173bc <disk_initialize>
 8019262:	4603      	mov	r3, r0
 8019264:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8019268:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801926c:	f003 0301 	and.w	r3, r3, #1
 8019270:	2b00      	cmp	r3, #0
 8019272:	d001      	beq.n	8019278 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8019274:	2303      	movs	r3, #3
 8019276:	e21e      	b.n	80196b6 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8019278:	79fb      	ldrb	r3, [r7, #7]
 801927a:	2b00      	cmp	r3, #0
 801927c:	d007      	beq.n	801928e <find_volume+0xca>
 801927e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8019282:	f003 0304 	and.w	r3, r3, #4
 8019286:	2b00      	cmp	r3, #0
 8019288:	d001      	beq.n	801928e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801928a:	230a      	movs	r3, #10
 801928c:	e213      	b.n	80196b6 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801928e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019290:	7858      	ldrb	r0, [r3, #1]
 8019292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019294:	330c      	adds	r3, #12
 8019296:	461a      	mov	r2, r3
 8019298:	2102      	movs	r1, #2
 801929a:	f7fe f8f5 	bl	8017488 <disk_ioctl>
 801929e:	4603      	mov	r3, r0
 80192a0:	2b00      	cmp	r3, #0
 80192a2:	d001      	beq.n	80192a8 <find_volume+0xe4>
 80192a4:	2301      	movs	r3, #1
 80192a6:	e206      	b.n	80196b6 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80192a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192aa:	899b      	ldrh	r3, [r3, #12]
 80192ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80192b0:	d80d      	bhi.n	80192ce <find_volume+0x10a>
 80192b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192b4:	899b      	ldrh	r3, [r3, #12]
 80192b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80192ba:	d308      	bcc.n	80192ce <find_volume+0x10a>
 80192bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192be:	899b      	ldrh	r3, [r3, #12]
 80192c0:	461a      	mov	r2, r3
 80192c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192c4:	899b      	ldrh	r3, [r3, #12]
 80192c6:	3b01      	subs	r3, #1
 80192c8:	4013      	ands	r3, r2
 80192ca:	2b00      	cmp	r3, #0
 80192cc:	d001      	beq.n	80192d2 <find_volume+0x10e>
 80192ce:	2301      	movs	r3, #1
 80192d0:	e1f1      	b.n	80196b6 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80192d2:	2300      	movs	r3, #0
 80192d4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80192d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80192d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80192da:	f7ff ff1d 	bl	8019118 <check_fs>
 80192de:	4603      	mov	r3, r0
 80192e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80192e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80192e8:	2b02      	cmp	r3, #2
 80192ea:	d149      	bne.n	8019380 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80192ec:	2300      	movs	r3, #0
 80192ee:	643b      	str	r3, [r7, #64]	; 0x40
 80192f0:	e01e      	b.n	8019330 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80192f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80192f4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80192f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80192fa:	011b      	lsls	r3, r3, #4
 80192fc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8019300:	4413      	add	r3, r2
 8019302:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8019304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019306:	3304      	adds	r3, #4
 8019308:	781b      	ldrb	r3, [r3, #0]
 801930a:	2b00      	cmp	r3, #0
 801930c:	d006      	beq.n	801931c <find_volume+0x158>
 801930e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019310:	3308      	adds	r3, #8
 8019312:	4618      	mov	r0, r3
 8019314:	f7fe f8ee 	bl	80174f4 <ld_dword>
 8019318:	4602      	mov	r2, r0
 801931a:	e000      	b.n	801931e <find_volume+0x15a>
 801931c:	2200      	movs	r2, #0
 801931e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019320:	009b      	lsls	r3, r3, #2
 8019322:	3358      	adds	r3, #88	; 0x58
 8019324:	443b      	add	r3, r7
 8019326:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801932a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801932c:	3301      	adds	r3, #1
 801932e:	643b      	str	r3, [r7, #64]	; 0x40
 8019330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019332:	2b03      	cmp	r3, #3
 8019334:	d9dd      	bls.n	80192f2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8019336:	2300      	movs	r3, #0
 8019338:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801933a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801933c:	2b00      	cmp	r3, #0
 801933e:	d002      	beq.n	8019346 <find_volume+0x182>
 8019340:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019342:	3b01      	subs	r3, #1
 8019344:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8019346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019348:	009b      	lsls	r3, r3, #2
 801934a:	3358      	adds	r3, #88	; 0x58
 801934c:	443b      	add	r3, r7
 801934e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8019352:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8019354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019356:	2b00      	cmp	r3, #0
 8019358:	d005      	beq.n	8019366 <find_volume+0x1a2>
 801935a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801935c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801935e:	f7ff fedb 	bl	8019118 <check_fs>
 8019362:	4603      	mov	r3, r0
 8019364:	e000      	b.n	8019368 <find_volume+0x1a4>
 8019366:	2303      	movs	r3, #3
 8019368:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801936c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8019370:	2b01      	cmp	r3, #1
 8019372:	d905      	bls.n	8019380 <find_volume+0x1bc>
 8019374:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8019376:	3301      	adds	r3, #1
 8019378:	643b      	str	r3, [r7, #64]	; 0x40
 801937a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801937c:	2b03      	cmp	r3, #3
 801937e:	d9e2      	bls.n	8019346 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8019380:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8019384:	2b04      	cmp	r3, #4
 8019386:	d101      	bne.n	801938c <find_volume+0x1c8>
 8019388:	2301      	movs	r3, #1
 801938a:	e194      	b.n	80196b6 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801938c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8019390:	2b01      	cmp	r3, #1
 8019392:	d901      	bls.n	8019398 <find_volume+0x1d4>
 8019394:	230d      	movs	r3, #13
 8019396:	e18e      	b.n	80196b6 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8019398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801939a:	3338      	adds	r3, #56	; 0x38
 801939c:	330b      	adds	r3, #11
 801939e:	4618      	mov	r0, r3
 80193a0:	f7fe f890 	bl	80174c4 <ld_word>
 80193a4:	4603      	mov	r3, r0
 80193a6:	461a      	mov	r2, r3
 80193a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193aa:	899b      	ldrh	r3, [r3, #12]
 80193ac:	429a      	cmp	r2, r3
 80193ae:	d001      	beq.n	80193b4 <find_volume+0x1f0>
 80193b0:	230d      	movs	r3, #13
 80193b2:	e180      	b.n	80196b6 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80193b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193b6:	3338      	adds	r3, #56	; 0x38
 80193b8:	3316      	adds	r3, #22
 80193ba:	4618      	mov	r0, r3
 80193bc:	f7fe f882 	bl	80174c4 <ld_word>
 80193c0:	4603      	mov	r3, r0
 80193c2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80193c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80193c6:	2b00      	cmp	r3, #0
 80193c8:	d106      	bne.n	80193d8 <find_volume+0x214>
 80193ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193cc:	3338      	adds	r3, #56	; 0x38
 80193ce:	3324      	adds	r3, #36	; 0x24
 80193d0:	4618      	mov	r0, r3
 80193d2:	f7fe f88f 	bl	80174f4 <ld_dword>
 80193d6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80193d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80193dc:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80193de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193e0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80193e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193e6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80193e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193ea:	789b      	ldrb	r3, [r3, #2]
 80193ec:	2b01      	cmp	r3, #1
 80193ee:	d005      	beq.n	80193fc <find_volume+0x238>
 80193f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193f2:	789b      	ldrb	r3, [r3, #2]
 80193f4:	2b02      	cmp	r3, #2
 80193f6:	d001      	beq.n	80193fc <find_volume+0x238>
 80193f8:	230d      	movs	r3, #13
 80193fa:	e15c      	b.n	80196b6 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80193fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80193fe:	789b      	ldrb	r3, [r3, #2]
 8019400:	461a      	mov	r2, r3
 8019402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019404:	fb02 f303 	mul.w	r3, r2, r3
 8019408:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801940a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801940c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019410:	b29a      	uxth	r2, r3
 8019412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019414:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8019416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019418:	895b      	ldrh	r3, [r3, #10]
 801941a:	2b00      	cmp	r3, #0
 801941c:	d008      	beq.n	8019430 <find_volume+0x26c>
 801941e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019420:	895b      	ldrh	r3, [r3, #10]
 8019422:	461a      	mov	r2, r3
 8019424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019426:	895b      	ldrh	r3, [r3, #10]
 8019428:	3b01      	subs	r3, #1
 801942a:	4013      	ands	r3, r2
 801942c:	2b00      	cmp	r3, #0
 801942e:	d001      	beq.n	8019434 <find_volume+0x270>
 8019430:	230d      	movs	r3, #13
 8019432:	e140      	b.n	80196b6 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8019434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019436:	3338      	adds	r3, #56	; 0x38
 8019438:	3311      	adds	r3, #17
 801943a:	4618      	mov	r0, r3
 801943c:	f7fe f842 	bl	80174c4 <ld_word>
 8019440:	4603      	mov	r3, r0
 8019442:	461a      	mov	r2, r3
 8019444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019446:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8019448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801944a:	891b      	ldrh	r3, [r3, #8]
 801944c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801944e:	8992      	ldrh	r2, [r2, #12]
 8019450:	0952      	lsrs	r2, r2, #5
 8019452:	b292      	uxth	r2, r2
 8019454:	fbb3 f1f2 	udiv	r1, r3, r2
 8019458:	fb01 f202 	mul.w	r2, r1, r2
 801945c:	1a9b      	subs	r3, r3, r2
 801945e:	b29b      	uxth	r3, r3
 8019460:	2b00      	cmp	r3, #0
 8019462:	d003      	beq.n	801946c <find_volume+0x2a8>
 8019464:	230d      	movs	r3, #13
 8019466:	e126      	b.n	80196b6 <find_volume+0x4f2>
 8019468:	240016b4 	.word	0x240016b4

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801946c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801946e:	3338      	adds	r3, #56	; 0x38
 8019470:	3313      	adds	r3, #19
 8019472:	4618      	mov	r0, r3
 8019474:	f7fe f826 	bl	80174c4 <ld_word>
 8019478:	4603      	mov	r3, r0
 801947a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801947c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801947e:	2b00      	cmp	r3, #0
 8019480:	d106      	bne.n	8019490 <find_volume+0x2cc>
 8019482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019484:	3338      	adds	r3, #56	; 0x38
 8019486:	3320      	adds	r3, #32
 8019488:	4618      	mov	r0, r3
 801948a:	f7fe f833 	bl	80174f4 <ld_dword>
 801948e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8019490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019492:	3338      	adds	r3, #56	; 0x38
 8019494:	330e      	adds	r3, #14
 8019496:	4618      	mov	r0, r3
 8019498:	f7fe f814 	bl	80174c4 <ld_word>
 801949c:	4603      	mov	r3, r0
 801949e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80194a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80194a2:	2b00      	cmp	r3, #0
 80194a4:	d101      	bne.n	80194aa <find_volume+0x2e6>
 80194a6:	230d      	movs	r3, #13
 80194a8:	e105      	b.n	80196b6 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80194aa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80194ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80194ae:	4413      	add	r3, r2
 80194b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80194b2:	8911      	ldrh	r1, [r2, #8]
 80194b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80194b6:	8992      	ldrh	r2, [r2, #12]
 80194b8:	0952      	lsrs	r2, r2, #5
 80194ba:	b292      	uxth	r2, r2
 80194bc:	fbb1 f2f2 	udiv	r2, r1, r2
 80194c0:	b292      	uxth	r2, r2
 80194c2:	4413      	add	r3, r2
 80194c4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80194c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80194c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194ca:	429a      	cmp	r2, r3
 80194cc:	d201      	bcs.n	80194d2 <find_volume+0x30e>
 80194ce:	230d      	movs	r3, #13
 80194d0:	e0f1      	b.n	80196b6 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80194d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80194d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194d6:	1ad3      	subs	r3, r2, r3
 80194d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80194da:	8952      	ldrh	r2, [r2, #10]
 80194dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80194e0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80194e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194e4:	2b00      	cmp	r3, #0
 80194e6:	d101      	bne.n	80194ec <find_volume+0x328>
 80194e8:	230d      	movs	r3, #13
 80194ea:	e0e4      	b.n	80196b6 <find_volume+0x4f2>
		fmt = FS_FAT32;
 80194ec:	2303      	movs	r3, #3
 80194ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80194f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194f4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80194f8:	4293      	cmp	r3, r2
 80194fa:	d802      	bhi.n	8019502 <find_volume+0x33e>
 80194fc:	2302      	movs	r3, #2
 80194fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8019502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019504:	f640 72f5 	movw	r2, #4085	; 0xff5
 8019508:	4293      	cmp	r3, r2
 801950a:	d802      	bhi.n	8019512 <find_volume+0x34e>
 801950c:	2301      	movs	r3, #1
 801950e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8019512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019514:	1c9a      	adds	r2, r3, #2
 8019516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019518:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801951a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801951c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801951e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8019520:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8019522:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019524:	441a      	add	r2, r3
 8019526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019528:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801952a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801952c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801952e:	441a      	add	r2, r3
 8019530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019532:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8019534:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8019538:	2b03      	cmp	r3, #3
 801953a:	d11e      	bne.n	801957a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801953c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801953e:	3338      	adds	r3, #56	; 0x38
 8019540:	332a      	adds	r3, #42	; 0x2a
 8019542:	4618      	mov	r0, r3
 8019544:	f7fd ffbe 	bl	80174c4 <ld_word>
 8019548:	4603      	mov	r3, r0
 801954a:	2b00      	cmp	r3, #0
 801954c:	d001      	beq.n	8019552 <find_volume+0x38e>
 801954e:	230d      	movs	r3, #13
 8019550:	e0b1      	b.n	80196b6 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8019552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019554:	891b      	ldrh	r3, [r3, #8]
 8019556:	2b00      	cmp	r3, #0
 8019558:	d001      	beq.n	801955e <find_volume+0x39a>
 801955a:	230d      	movs	r3, #13
 801955c:	e0ab      	b.n	80196b6 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801955e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019560:	3338      	adds	r3, #56	; 0x38
 8019562:	332c      	adds	r3, #44	; 0x2c
 8019564:	4618      	mov	r0, r3
 8019566:	f7fd ffc5 	bl	80174f4 <ld_dword>
 801956a:	4602      	mov	r2, r0
 801956c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801956e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8019570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019572:	69db      	ldr	r3, [r3, #28]
 8019574:	009b      	lsls	r3, r3, #2
 8019576:	647b      	str	r3, [r7, #68]	; 0x44
 8019578:	e01f      	b.n	80195ba <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801957a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801957c:	891b      	ldrh	r3, [r3, #8]
 801957e:	2b00      	cmp	r3, #0
 8019580:	d101      	bne.n	8019586 <find_volume+0x3c2>
 8019582:	230d      	movs	r3, #13
 8019584:	e097      	b.n	80196b6 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8019586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019588:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801958a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801958c:	441a      	add	r2, r3
 801958e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019590:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8019592:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8019596:	2b02      	cmp	r3, #2
 8019598:	d103      	bne.n	80195a2 <find_volume+0x3de>
 801959a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801959c:	69db      	ldr	r3, [r3, #28]
 801959e:	005b      	lsls	r3, r3, #1
 80195a0:	e00a      	b.n	80195b8 <find_volume+0x3f4>
 80195a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195a4:	69da      	ldr	r2, [r3, #28]
 80195a6:	4613      	mov	r3, r2
 80195a8:	005b      	lsls	r3, r3, #1
 80195aa:	4413      	add	r3, r2
 80195ac:	085a      	lsrs	r2, r3, #1
 80195ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195b0:	69db      	ldr	r3, [r3, #28]
 80195b2:	f003 0301 	and.w	r3, r3, #1
 80195b6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80195b8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80195ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195bc:	6a1a      	ldr	r2, [r3, #32]
 80195be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195c0:	899b      	ldrh	r3, [r3, #12]
 80195c2:	4619      	mov	r1, r3
 80195c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80195c6:	440b      	add	r3, r1
 80195c8:	3b01      	subs	r3, #1
 80195ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80195cc:	8989      	ldrh	r1, [r1, #12]
 80195ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80195d2:	429a      	cmp	r2, r3
 80195d4:	d201      	bcs.n	80195da <find_volume+0x416>
 80195d6:	230d      	movs	r3, #13
 80195d8:	e06d      	b.n	80196b6 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80195da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195dc:	f04f 32ff 	mov.w	r2, #4294967295
 80195e0:	619a      	str	r2, [r3, #24]
 80195e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195e4:	699a      	ldr	r2, [r3, #24]
 80195e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195e8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80195ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195ec:	2280      	movs	r2, #128	; 0x80
 80195ee:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80195f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80195f4:	2b03      	cmp	r3, #3
 80195f6:	d149      	bne.n	801968c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80195f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80195fa:	3338      	adds	r3, #56	; 0x38
 80195fc:	3330      	adds	r3, #48	; 0x30
 80195fe:	4618      	mov	r0, r3
 8019600:	f7fd ff60 	bl	80174c4 <ld_word>
 8019604:	4603      	mov	r3, r0
 8019606:	2b01      	cmp	r3, #1
 8019608:	d140      	bne.n	801968c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 801960a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801960c:	3301      	adds	r3, #1
 801960e:	4619      	mov	r1, r3
 8019610:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8019612:	f7fe fa07 	bl	8017a24 <move_window>
 8019616:	4603      	mov	r3, r0
 8019618:	2b00      	cmp	r3, #0
 801961a:	d137      	bne.n	801968c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 801961c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801961e:	2200      	movs	r2, #0
 8019620:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8019622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019624:	3338      	adds	r3, #56	; 0x38
 8019626:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801962a:	4618      	mov	r0, r3
 801962c:	f7fd ff4a 	bl	80174c4 <ld_word>
 8019630:	4603      	mov	r3, r0
 8019632:	461a      	mov	r2, r3
 8019634:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8019638:	429a      	cmp	r2, r3
 801963a:	d127      	bne.n	801968c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801963c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801963e:	3338      	adds	r3, #56	; 0x38
 8019640:	4618      	mov	r0, r3
 8019642:	f7fd ff57 	bl	80174f4 <ld_dword>
 8019646:	4603      	mov	r3, r0
 8019648:	4a1d      	ldr	r2, [pc, #116]	; (80196c0 <find_volume+0x4fc>)
 801964a:	4293      	cmp	r3, r2
 801964c:	d11e      	bne.n	801968c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801964e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019650:	3338      	adds	r3, #56	; 0x38
 8019652:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8019656:	4618      	mov	r0, r3
 8019658:	f7fd ff4c 	bl	80174f4 <ld_dword>
 801965c:	4603      	mov	r3, r0
 801965e:	4a19      	ldr	r2, [pc, #100]	; (80196c4 <find_volume+0x500>)
 8019660:	4293      	cmp	r3, r2
 8019662:	d113      	bne.n	801968c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8019664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019666:	3338      	adds	r3, #56	; 0x38
 8019668:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801966c:	4618      	mov	r0, r3
 801966e:	f7fd ff41 	bl	80174f4 <ld_dword>
 8019672:	4602      	mov	r2, r0
 8019674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019676:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8019678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801967a:	3338      	adds	r3, #56	; 0x38
 801967c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8019680:	4618      	mov	r0, r3
 8019682:	f7fd ff37 	bl	80174f4 <ld_dword>
 8019686:	4602      	mov	r2, r0
 8019688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801968a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801968c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801968e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8019692:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8019694:	4b0c      	ldr	r3, [pc, #48]	; (80196c8 <find_volume+0x504>)
 8019696:	881b      	ldrh	r3, [r3, #0]
 8019698:	3301      	adds	r3, #1
 801969a:	b29a      	uxth	r2, r3
 801969c:	4b0a      	ldr	r3, [pc, #40]	; (80196c8 <find_volume+0x504>)
 801969e:	801a      	strh	r2, [r3, #0]
 80196a0:	4b09      	ldr	r3, [pc, #36]	; (80196c8 <find_volume+0x504>)
 80196a2:	881a      	ldrh	r2, [r3, #0]
 80196a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196a6:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80196a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80196aa:	4a08      	ldr	r2, [pc, #32]	; (80196cc <find_volume+0x508>)
 80196ac:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80196ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80196b0:	f7fe f950 	bl	8017954 <clear_lock>
#endif
	return FR_OK;
 80196b4:	2300      	movs	r3, #0
}
 80196b6:	4618      	mov	r0, r3
 80196b8:	3758      	adds	r7, #88	; 0x58
 80196ba:	46bd      	mov	sp, r7
 80196bc:	bd80      	pop	{r7, pc}
 80196be:	bf00      	nop
 80196c0:	41615252 	.word	0x41615252
 80196c4:	61417272 	.word	0x61417272
 80196c8:	240016b8 	.word	0x240016b8
 80196cc:	240016dc 	.word	0x240016dc

080196d0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80196d0:	b580      	push	{r7, lr}
 80196d2:	b084      	sub	sp, #16
 80196d4:	af00      	add	r7, sp, #0
 80196d6:	6078      	str	r0, [r7, #4]
 80196d8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80196da:	2309      	movs	r3, #9
 80196dc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80196de:	687b      	ldr	r3, [r7, #4]
 80196e0:	2b00      	cmp	r3, #0
 80196e2:	d01c      	beq.n	801971e <validate+0x4e>
 80196e4:	687b      	ldr	r3, [r7, #4]
 80196e6:	681b      	ldr	r3, [r3, #0]
 80196e8:	2b00      	cmp	r3, #0
 80196ea:	d018      	beq.n	801971e <validate+0x4e>
 80196ec:	687b      	ldr	r3, [r7, #4]
 80196ee:	681b      	ldr	r3, [r3, #0]
 80196f0:	781b      	ldrb	r3, [r3, #0]
 80196f2:	2b00      	cmp	r3, #0
 80196f4:	d013      	beq.n	801971e <validate+0x4e>
 80196f6:	687b      	ldr	r3, [r7, #4]
 80196f8:	889a      	ldrh	r2, [r3, #4]
 80196fa:	687b      	ldr	r3, [r7, #4]
 80196fc:	681b      	ldr	r3, [r3, #0]
 80196fe:	88db      	ldrh	r3, [r3, #6]
 8019700:	429a      	cmp	r2, r3
 8019702:	d10c      	bne.n	801971e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8019704:	687b      	ldr	r3, [r7, #4]
 8019706:	681b      	ldr	r3, [r3, #0]
 8019708:	785b      	ldrb	r3, [r3, #1]
 801970a:	4618      	mov	r0, r3
 801970c:	f7fd fe3c 	bl	8017388 <disk_status>
 8019710:	4603      	mov	r3, r0
 8019712:	f003 0301 	and.w	r3, r3, #1
 8019716:	2b00      	cmp	r3, #0
 8019718:	d101      	bne.n	801971e <validate+0x4e>
			res = FR_OK;
 801971a:	2300      	movs	r3, #0
 801971c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801971e:	7bfb      	ldrb	r3, [r7, #15]
 8019720:	2b00      	cmp	r3, #0
 8019722:	d102      	bne.n	801972a <validate+0x5a>
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	681b      	ldr	r3, [r3, #0]
 8019728:	e000      	b.n	801972c <validate+0x5c>
 801972a:	2300      	movs	r3, #0
 801972c:	683a      	ldr	r2, [r7, #0]
 801972e:	6013      	str	r3, [r2, #0]
	return res;
 8019730:	7bfb      	ldrb	r3, [r7, #15]
}
 8019732:	4618      	mov	r0, r3
 8019734:	3710      	adds	r7, #16
 8019736:	46bd      	mov	sp, r7
 8019738:	bd80      	pop	{r7, pc}
	...

0801973c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801973c:	b580      	push	{r7, lr}
 801973e:	b088      	sub	sp, #32
 8019740:	af00      	add	r7, sp, #0
 8019742:	60f8      	str	r0, [r7, #12]
 8019744:	60b9      	str	r1, [r7, #8]
 8019746:	4613      	mov	r3, r2
 8019748:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801974a:	68bb      	ldr	r3, [r7, #8]
 801974c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801974e:	f107 0310 	add.w	r3, r7, #16
 8019752:	4618      	mov	r0, r3
 8019754:	f7ff fc9c 	bl	8019090 <get_ldnumber>
 8019758:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801975a:	69fb      	ldr	r3, [r7, #28]
 801975c:	2b00      	cmp	r3, #0
 801975e:	da01      	bge.n	8019764 <f_mount+0x28>
 8019760:	230b      	movs	r3, #11
 8019762:	e02b      	b.n	80197bc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8019764:	4a17      	ldr	r2, [pc, #92]	; (80197c4 <f_mount+0x88>)
 8019766:	69fb      	ldr	r3, [r7, #28]
 8019768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801976c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801976e:	69bb      	ldr	r3, [r7, #24]
 8019770:	2b00      	cmp	r3, #0
 8019772:	d005      	beq.n	8019780 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8019774:	69b8      	ldr	r0, [r7, #24]
 8019776:	f7fe f8ed 	bl	8017954 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801977a:	69bb      	ldr	r3, [r7, #24]
 801977c:	2200      	movs	r2, #0
 801977e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8019780:	68fb      	ldr	r3, [r7, #12]
 8019782:	2b00      	cmp	r3, #0
 8019784:	d002      	beq.n	801978c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8019786:	68fb      	ldr	r3, [r7, #12]
 8019788:	2200      	movs	r2, #0
 801978a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801978c:	68fa      	ldr	r2, [r7, #12]
 801978e:	490d      	ldr	r1, [pc, #52]	; (80197c4 <f_mount+0x88>)
 8019790:	69fb      	ldr	r3, [r7, #28]
 8019792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8019796:	68fb      	ldr	r3, [r7, #12]
 8019798:	2b00      	cmp	r3, #0
 801979a:	d002      	beq.n	80197a2 <f_mount+0x66>
 801979c:	79fb      	ldrb	r3, [r7, #7]
 801979e:	2b01      	cmp	r3, #1
 80197a0:	d001      	beq.n	80197a6 <f_mount+0x6a>
 80197a2:	2300      	movs	r3, #0
 80197a4:	e00a      	b.n	80197bc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80197a6:	f107 010c 	add.w	r1, r7, #12
 80197aa:	f107 0308 	add.w	r3, r7, #8
 80197ae:	2200      	movs	r2, #0
 80197b0:	4618      	mov	r0, r3
 80197b2:	f7ff fd07 	bl	80191c4 <find_volume>
 80197b6:	4603      	mov	r3, r0
 80197b8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80197ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80197bc:	4618      	mov	r0, r3
 80197be:	3720      	adds	r7, #32
 80197c0:	46bd      	mov	sp, r7
 80197c2:	bd80      	pop	{r7, pc}
 80197c4:	240016b4 	.word	0x240016b4

080197c8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80197c8:	b580      	push	{r7, lr}
 80197ca:	b09a      	sub	sp, #104	; 0x68
 80197cc:	af00      	add	r7, sp, #0
 80197ce:	60f8      	str	r0, [r7, #12]
 80197d0:	60b9      	str	r1, [r7, #8]
 80197d2:	4613      	mov	r3, r2
 80197d4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80197d6:	68fb      	ldr	r3, [r7, #12]
 80197d8:	2b00      	cmp	r3, #0
 80197da:	d101      	bne.n	80197e0 <f_open+0x18>
 80197dc:	2309      	movs	r3, #9
 80197de:	e1bb      	b.n	8019b58 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80197e0:	79fb      	ldrb	r3, [r7, #7]
 80197e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80197e6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80197e8:	79fa      	ldrb	r2, [r7, #7]
 80197ea:	f107 0114 	add.w	r1, r7, #20
 80197ee:	f107 0308 	add.w	r3, r7, #8
 80197f2:	4618      	mov	r0, r3
 80197f4:	f7ff fce6 	bl	80191c4 <find_volume>
 80197f8:	4603      	mov	r3, r0
 80197fa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80197fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019802:	2b00      	cmp	r3, #0
 8019804:	f040 819f 	bne.w	8019b46 <f_open+0x37e>
		dj.obj.fs = fs;
 8019808:	697b      	ldr	r3, [r7, #20]
 801980a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801980c:	68ba      	ldr	r2, [r7, #8]
 801980e:	f107 0318 	add.w	r3, r7, #24
 8019812:	4611      	mov	r1, r2
 8019814:	4618      	mov	r0, r3
 8019816:	f7ff fbc5 	bl	8018fa4 <follow_path>
 801981a:	4603      	mov	r3, r0
 801981c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8019820:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019824:	2b00      	cmp	r3, #0
 8019826:	d11a      	bne.n	801985e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8019828:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801982c:	b25b      	sxtb	r3, r3
 801982e:	2b00      	cmp	r3, #0
 8019830:	da03      	bge.n	801983a <f_open+0x72>
				res = FR_INVALID_NAME;
 8019832:	2306      	movs	r3, #6
 8019834:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8019838:	e011      	b.n	801985e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801983a:	79fb      	ldrb	r3, [r7, #7]
 801983c:	f023 0301 	bic.w	r3, r3, #1
 8019840:	2b00      	cmp	r3, #0
 8019842:	bf14      	ite	ne
 8019844:	2301      	movne	r3, #1
 8019846:	2300      	moveq	r3, #0
 8019848:	b2db      	uxtb	r3, r3
 801984a:	461a      	mov	r2, r3
 801984c:	f107 0318 	add.w	r3, r7, #24
 8019850:	4611      	mov	r1, r2
 8019852:	4618      	mov	r0, r3
 8019854:	f7fd ff36 	bl	80176c4 <chk_lock>
 8019858:	4603      	mov	r3, r0
 801985a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801985e:	79fb      	ldrb	r3, [r7, #7]
 8019860:	f003 031c 	and.w	r3, r3, #28
 8019864:	2b00      	cmp	r3, #0
 8019866:	d07f      	beq.n	8019968 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8019868:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801986c:	2b00      	cmp	r3, #0
 801986e:	d017      	beq.n	80198a0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8019870:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019874:	2b04      	cmp	r3, #4
 8019876:	d10e      	bne.n	8019896 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8019878:	f7fd ff80 	bl	801777c <enq_lock>
 801987c:	4603      	mov	r3, r0
 801987e:	2b00      	cmp	r3, #0
 8019880:	d006      	beq.n	8019890 <f_open+0xc8>
 8019882:	f107 0318 	add.w	r3, r7, #24
 8019886:	4618      	mov	r0, r3
 8019888:	f7ff f8dc 	bl	8018a44 <dir_register>
 801988c:	4603      	mov	r3, r0
 801988e:	e000      	b.n	8019892 <f_open+0xca>
 8019890:	2312      	movs	r3, #18
 8019892:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8019896:	79fb      	ldrb	r3, [r7, #7]
 8019898:	f043 0308 	orr.w	r3, r3, #8
 801989c:	71fb      	strb	r3, [r7, #7]
 801989e:	e010      	b.n	80198c2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80198a0:	7fbb      	ldrb	r3, [r7, #30]
 80198a2:	f003 0311 	and.w	r3, r3, #17
 80198a6:	2b00      	cmp	r3, #0
 80198a8:	d003      	beq.n	80198b2 <f_open+0xea>
					res = FR_DENIED;
 80198aa:	2307      	movs	r3, #7
 80198ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80198b0:	e007      	b.n	80198c2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80198b2:	79fb      	ldrb	r3, [r7, #7]
 80198b4:	f003 0304 	and.w	r3, r3, #4
 80198b8:	2b00      	cmp	r3, #0
 80198ba:	d002      	beq.n	80198c2 <f_open+0xfa>
 80198bc:	2308      	movs	r3, #8
 80198be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80198c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	d168      	bne.n	801999c <f_open+0x1d4>
 80198ca:	79fb      	ldrb	r3, [r7, #7]
 80198cc:	f003 0308 	and.w	r3, r3, #8
 80198d0:	2b00      	cmp	r3, #0
 80198d2:	d063      	beq.n	801999c <f_open+0x1d4>
				dw = GET_FATTIME();
 80198d4:	f7fb fb6e 	bl	8014fb4 <get_fattime>
 80198d8:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80198da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80198dc:	330e      	adds	r3, #14
 80198de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80198e0:	4618      	mov	r0, r3
 80198e2:	f7fd fe45 	bl	8017570 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80198e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80198e8:	3316      	adds	r3, #22
 80198ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80198ec:	4618      	mov	r0, r3
 80198ee:	f7fd fe3f 	bl	8017570 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80198f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80198f4:	330b      	adds	r3, #11
 80198f6:	2220      	movs	r2, #32
 80198f8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80198fa:	697b      	ldr	r3, [r7, #20]
 80198fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80198fe:	4611      	mov	r1, r2
 8019900:	4618      	mov	r0, r3
 8019902:	f7fe fe17 	bl	8018534 <ld_clust>
 8019906:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8019908:	697b      	ldr	r3, [r7, #20]
 801990a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801990c:	2200      	movs	r2, #0
 801990e:	4618      	mov	r0, r3
 8019910:	f7fe fe2f 	bl	8018572 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8019914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019916:	331c      	adds	r3, #28
 8019918:	2100      	movs	r1, #0
 801991a:	4618      	mov	r0, r3
 801991c:	f7fd fe28 	bl	8017570 <st_dword>
					fs->wflag = 1;
 8019920:	697b      	ldr	r3, [r7, #20]
 8019922:	2201      	movs	r2, #1
 8019924:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8019926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019928:	2b00      	cmp	r3, #0
 801992a:	d037      	beq.n	801999c <f_open+0x1d4>
						dw = fs->winsect;
 801992c:	697b      	ldr	r3, [r7, #20]
 801992e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019930:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8019932:	f107 0318 	add.w	r3, r7, #24
 8019936:	2200      	movs	r2, #0
 8019938:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801993a:	4618      	mov	r0, r3
 801993c:	f7fe fb1f 	bl	8017f7e <remove_chain>
 8019940:	4603      	mov	r3, r0
 8019942:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8019946:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801994a:	2b00      	cmp	r3, #0
 801994c:	d126      	bne.n	801999c <f_open+0x1d4>
							res = move_window(fs, dw);
 801994e:	697b      	ldr	r3, [r7, #20]
 8019950:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8019952:	4618      	mov	r0, r3
 8019954:	f7fe f866 	bl	8017a24 <move_window>
 8019958:	4603      	mov	r3, r0
 801995a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801995e:	697b      	ldr	r3, [r7, #20]
 8019960:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019962:	3a01      	subs	r2, #1
 8019964:	615a      	str	r2, [r3, #20]
 8019966:	e019      	b.n	801999c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8019968:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801996c:	2b00      	cmp	r3, #0
 801996e:	d115      	bne.n	801999c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8019970:	7fbb      	ldrb	r3, [r7, #30]
 8019972:	f003 0310 	and.w	r3, r3, #16
 8019976:	2b00      	cmp	r3, #0
 8019978:	d003      	beq.n	8019982 <f_open+0x1ba>
					res = FR_NO_FILE;
 801997a:	2304      	movs	r3, #4
 801997c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8019980:	e00c      	b.n	801999c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8019982:	79fb      	ldrb	r3, [r7, #7]
 8019984:	f003 0302 	and.w	r3, r3, #2
 8019988:	2b00      	cmp	r3, #0
 801998a:	d007      	beq.n	801999c <f_open+0x1d4>
 801998c:	7fbb      	ldrb	r3, [r7, #30]
 801998e:	f003 0301 	and.w	r3, r3, #1
 8019992:	2b00      	cmp	r3, #0
 8019994:	d002      	beq.n	801999c <f_open+0x1d4>
						res = FR_DENIED;
 8019996:	2307      	movs	r3, #7
 8019998:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 801999c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80199a0:	2b00      	cmp	r3, #0
 80199a2:	d128      	bne.n	80199f6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80199a4:	79fb      	ldrb	r3, [r7, #7]
 80199a6:	f003 0308 	and.w	r3, r3, #8
 80199aa:	2b00      	cmp	r3, #0
 80199ac:	d003      	beq.n	80199b6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80199ae:	79fb      	ldrb	r3, [r7, #7]
 80199b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80199b4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80199b6:	697b      	ldr	r3, [r7, #20]
 80199b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80199ba:	68fb      	ldr	r3, [r7, #12]
 80199bc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80199be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80199c0:	68fb      	ldr	r3, [r7, #12]
 80199c2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80199c4:	79fb      	ldrb	r3, [r7, #7]
 80199c6:	f023 0301 	bic.w	r3, r3, #1
 80199ca:	2b00      	cmp	r3, #0
 80199cc:	bf14      	ite	ne
 80199ce:	2301      	movne	r3, #1
 80199d0:	2300      	moveq	r3, #0
 80199d2:	b2db      	uxtb	r3, r3
 80199d4:	461a      	mov	r2, r3
 80199d6:	f107 0318 	add.w	r3, r7, #24
 80199da:	4611      	mov	r1, r2
 80199dc:	4618      	mov	r0, r3
 80199de:	f7fd feef 	bl	80177c0 <inc_lock>
 80199e2:	4602      	mov	r2, r0
 80199e4:	68fb      	ldr	r3, [r7, #12]
 80199e6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80199e8:	68fb      	ldr	r3, [r7, #12]
 80199ea:	691b      	ldr	r3, [r3, #16]
 80199ec:	2b00      	cmp	r3, #0
 80199ee:	d102      	bne.n	80199f6 <f_open+0x22e>
 80199f0:	2302      	movs	r3, #2
 80199f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80199f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80199fa:	2b00      	cmp	r3, #0
 80199fc:	f040 80a3 	bne.w	8019b46 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8019a00:	697b      	ldr	r3, [r7, #20]
 8019a02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8019a04:	4611      	mov	r1, r2
 8019a06:	4618      	mov	r0, r3
 8019a08:	f7fe fd94 	bl	8018534 <ld_clust>
 8019a0c:	4602      	mov	r2, r0
 8019a0e:	68fb      	ldr	r3, [r7, #12]
 8019a10:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8019a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019a14:	331c      	adds	r3, #28
 8019a16:	4618      	mov	r0, r3
 8019a18:	f7fd fd6c 	bl	80174f4 <ld_dword>
 8019a1c:	4602      	mov	r2, r0
 8019a1e:	68fb      	ldr	r3, [r7, #12]
 8019a20:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8019a22:	68fb      	ldr	r3, [r7, #12]
 8019a24:	2200      	movs	r2, #0
 8019a26:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8019a28:	697a      	ldr	r2, [r7, #20]
 8019a2a:	68fb      	ldr	r3, [r7, #12]
 8019a2c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8019a2e:	697b      	ldr	r3, [r7, #20]
 8019a30:	88da      	ldrh	r2, [r3, #6]
 8019a32:	68fb      	ldr	r3, [r7, #12]
 8019a34:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8019a36:	68fb      	ldr	r3, [r7, #12]
 8019a38:	79fa      	ldrb	r2, [r7, #7]
 8019a3a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8019a3c:	68fb      	ldr	r3, [r7, #12]
 8019a3e:	2200      	movs	r2, #0
 8019a40:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8019a42:	68fb      	ldr	r3, [r7, #12]
 8019a44:	2200      	movs	r2, #0
 8019a46:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8019a48:	68fb      	ldr	r3, [r7, #12]
 8019a4a:	2200      	movs	r2, #0
 8019a4c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8019a4e:	68fb      	ldr	r3, [r7, #12]
 8019a50:	3330      	adds	r3, #48	; 0x30
 8019a52:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8019a56:	2100      	movs	r1, #0
 8019a58:	4618      	mov	r0, r3
 8019a5a:	f7fd fdd6 	bl	801760a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8019a5e:	79fb      	ldrb	r3, [r7, #7]
 8019a60:	f003 0320 	and.w	r3, r3, #32
 8019a64:	2b00      	cmp	r3, #0
 8019a66:	d06e      	beq.n	8019b46 <f_open+0x37e>
 8019a68:	68fb      	ldr	r3, [r7, #12]
 8019a6a:	68db      	ldr	r3, [r3, #12]
 8019a6c:	2b00      	cmp	r3, #0
 8019a6e:	d06a      	beq.n	8019b46 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8019a70:	68fb      	ldr	r3, [r7, #12]
 8019a72:	68da      	ldr	r2, [r3, #12]
 8019a74:	68fb      	ldr	r3, [r7, #12]
 8019a76:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8019a78:	697b      	ldr	r3, [r7, #20]
 8019a7a:	895b      	ldrh	r3, [r3, #10]
 8019a7c:	461a      	mov	r2, r3
 8019a7e:	697b      	ldr	r3, [r7, #20]
 8019a80:	899b      	ldrh	r3, [r3, #12]
 8019a82:	fb02 f303 	mul.w	r3, r2, r3
 8019a86:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8019a88:	68fb      	ldr	r3, [r7, #12]
 8019a8a:	689b      	ldr	r3, [r3, #8]
 8019a8c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8019a8e:	68fb      	ldr	r3, [r7, #12]
 8019a90:	68db      	ldr	r3, [r3, #12]
 8019a92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8019a94:	e016      	b.n	8019ac4 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8019a96:	68fb      	ldr	r3, [r7, #12]
 8019a98:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8019a9a:	4618      	mov	r0, r3
 8019a9c:	f7fe f87f 	bl	8017b9e <get_fat>
 8019aa0:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8019aa2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019aa4:	2b01      	cmp	r3, #1
 8019aa6:	d802      	bhi.n	8019aae <f_open+0x2e6>
 8019aa8:	2302      	movs	r3, #2
 8019aaa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8019aae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019ab4:	d102      	bne.n	8019abc <f_open+0x2f4>
 8019ab6:	2301      	movs	r3, #1
 8019ab8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8019abc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8019abe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019ac0:	1ad3      	subs	r3, r2, r3
 8019ac2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8019ac4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019ac8:	2b00      	cmp	r3, #0
 8019aca:	d103      	bne.n	8019ad4 <f_open+0x30c>
 8019acc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8019ace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019ad0:	429a      	cmp	r2, r3
 8019ad2:	d8e0      	bhi.n	8019a96 <f_open+0x2ce>
				}
				fp->clust = clst;
 8019ad4:	68fb      	ldr	r3, [r7, #12]
 8019ad6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8019ad8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8019ada:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	d131      	bne.n	8019b46 <f_open+0x37e>
 8019ae2:	697b      	ldr	r3, [r7, #20]
 8019ae4:	899b      	ldrh	r3, [r3, #12]
 8019ae6:	461a      	mov	r2, r3
 8019ae8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019aea:	fbb3 f1f2 	udiv	r1, r3, r2
 8019aee:	fb01 f202 	mul.w	r2, r1, r2
 8019af2:	1a9b      	subs	r3, r3, r2
 8019af4:	2b00      	cmp	r3, #0
 8019af6:	d026      	beq.n	8019b46 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8019af8:	697b      	ldr	r3, [r7, #20]
 8019afa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8019afc:	4618      	mov	r0, r3
 8019afe:	f7fe f82f 	bl	8017b60 <clust2sect>
 8019b02:	64f8      	str	r0, [r7, #76]	; 0x4c
 8019b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019b06:	2b00      	cmp	r3, #0
 8019b08:	d103      	bne.n	8019b12 <f_open+0x34a>
						res = FR_INT_ERR;
 8019b0a:	2302      	movs	r3, #2
 8019b0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8019b10:	e019      	b.n	8019b46 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8019b12:	697b      	ldr	r3, [r7, #20]
 8019b14:	899b      	ldrh	r3, [r3, #12]
 8019b16:	461a      	mov	r2, r3
 8019b18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019b1a:	fbb3 f2f2 	udiv	r2, r3, r2
 8019b1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019b20:	441a      	add	r2, r3
 8019b22:	68fb      	ldr	r3, [r7, #12]
 8019b24:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8019b26:	697b      	ldr	r3, [r7, #20]
 8019b28:	7858      	ldrb	r0, [r3, #1]
 8019b2a:	68fb      	ldr	r3, [r7, #12]
 8019b2c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019b30:	68fb      	ldr	r3, [r7, #12]
 8019b32:	6a1a      	ldr	r2, [r3, #32]
 8019b34:	2301      	movs	r3, #1
 8019b36:	f7fd fc67 	bl	8017408 <disk_read>
 8019b3a:	4603      	mov	r3, r0
 8019b3c:	2b00      	cmp	r3, #0
 8019b3e:	d002      	beq.n	8019b46 <f_open+0x37e>
 8019b40:	2301      	movs	r3, #1
 8019b42:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8019b46:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8019b4a:	2b00      	cmp	r3, #0
 8019b4c:	d002      	beq.n	8019b54 <f_open+0x38c>
 8019b4e:	68fb      	ldr	r3, [r7, #12]
 8019b50:	2200      	movs	r2, #0
 8019b52:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8019b54:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8019b58:	4618      	mov	r0, r3
 8019b5a:	3768      	adds	r7, #104	; 0x68
 8019b5c:	46bd      	mov	sp, r7
 8019b5e:	bd80      	pop	{r7, pc}

08019b60 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8019b60:	b580      	push	{r7, lr}
 8019b62:	b08c      	sub	sp, #48	; 0x30
 8019b64:	af00      	add	r7, sp, #0
 8019b66:	60f8      	str	r0, [r7, #12]
 8019b68:	60b9      	str	r1, [r7, #8]
 8019b6a:	607a      	str	r2, [r7, #4]
 8019b6c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8019b6e:	68bb      	ldr	r3, [r7, #8]
 8019b70:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8019b72:	683b      	ldr	r3, [r7, #0]
 8019b74:	2200      	movs	r2, #0
 8019b76:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8019b78:	68fb      	ldr	r3, [r7, #12]
 8019b7a:	f107 0210 	add.w	r2, r7, #16
 8019b7e:	4611      	mov	r1, r2
 8019b80:	4618      	mov	r0, r3
 8019b82:	f7ff fda5 	bl	80196d0 <validate>
 8019b86:	4603      	mov	r3, r0
 8019b88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8019b8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019b90:	2b00      	cmp	r3, #0
 8019b92:	d107      	bne.n	8019ba4 <f_write+0x44>
 8019b94:	68fb      	ldr	r3, [r7, #12]
 8019b96:	7d5b      	ldrb	r3, [r3, #21]
 8019b98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8019b9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019ba0:	2b00      	cmp	r3, #0
 8019ba2:	d002      	beq.n	8019baa <f_write+0x4a>
 8019ba4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8019ba8:	e16a      	b.n	8019e80 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8019baa:	68fb      	ldr	r3, [r7, #12]
 8019bac:	7d1b      	ldrb	r3, [r3, #20]
 8019bae:	f003 0302 	and.w	r3, r3, #2
 8019bb2:	2b00      	cmp	r3, #0
 8019bb4:	d101      	bne.n	8019bba <f_write+0x5a>
 8019bb6:	2307      	movs	r3, #7
 8019bb8:	e162      	b.n	8019e80 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8019bba:	68fb      	ldr	r3, [r7, #12]
 8019bbc:	699a      	ldr	r2, [r3, #24]
 8019bbe:	687b      	ldr	r3, [r7, #4]
 8019bc0:	441a      	add	r2, r3
 8019bc2:	68fb      	ldr	r3, [r7, #12]
 8019bc4:	699b      	ldr	r3, [r3, #24]
 8019bc6:	429a      	cmp	r2, r3
 8019bc8:	f080 814c 	bcs.w	8019e64 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8019bcc:	68fb      	ldr	r3, [r7, #12]
 8019bce:	699b      	ldr	r3, [r3, #24]
 8019bd0:	43db      	mvns	r3, r3
 8019bd2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8019bd4:	e146      	b.n	8019e64 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8019bd6:	68fb      	ldr	r3, [r7, #12]
 8019bd8:	699b      	ldr	r3, [r3, #24]
 8019bda:	693a      	ldr	r2, [r7, #16]
 8019bdc:	8992      	ldrh	r2, [r2, #12]
 8019bde:	fbb3 f1f2 	udiv	r1, r3, r2
 8019be2:	fb01 f202 	mul.w	r2, r1, r2
 8019be6:	1a9b      	subs	r3, r3, r2
 8019be8:	2b00      	cmp	r3, #0
 8019bea:	f040 80f1 	bne.w	8019dd0 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8019bee:	68fb      	ldr	r3, [r7, #12]
 8019bf0:	699b      	ldr	r3, [r3, #24]
 8019bf2:	693a      	ldr	r2, [r7, #16]
 8019bf4:	8992      	ldrh	r2, [r2, #12]
 8019bf6:	fbb3 f3f2 	udiv	r3, r3, r2
 8019bfa:	693a      	ldr	r2, [r7, #16]
 8019bfc:	8952      	ldrh	r2, [r2, #10]
 8019bfe:	3a01      	subs	r2, #1
 8019c00:	4013      	ands	r3, r2
 8019c02:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8019c04:	69bb      	ldr	r3, [r7, #24]
 8019c06:	2b00      	cmp	r3, #0
 8019c08:	d143      	bne.n	8019c92 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8019c0a:	68fb      	ldr	r3, [r7, #12]
 8019c0c:	699b      	ldr	r3, [r3, #24]
 8019c0e:	2b00      	cmp	r3, #0
 8019c10:	d10c      	bne.n	8019c2c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8019c12:	68fb      	ldr	r3, [r7, #12]
 8019c14:	689b      	ldr	r3, [r3, #8]
 8019c16:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8019c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c1a:	2b00      	cmp	r3, #0
 8019c1c:	d11a      	bne.n	8019c54 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8019c1e:	68fb      	ldr	r3, [r7, #12]
 8019c20:	2100      	movs	r1, #0
 8019c22:	4618      	mov	r0, r3
 8019c24:	f7fe fa10 	bl	8018048 <create_chain>
 8019c28:	62b8      	str	r0, [r7, #40]	; 0x28
 8019c2a:	e013      	b.n	8019c54 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8019c2c:	68fb      	ldr	r3, [r7, #12]
 8019c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019c30:	2b00      	cmp	r3, #0
 8019c32:	d007      	beq.n	8019c44 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8019c34:	68fb      	ldr	r3, [r7, #12]
 8019c36:	699b      	ldr	r3, [r3, #24]
 8019c38:	4619      	mov	r1, r3
 8019c3a:	68f8      	ldr	r0, [r7, #12]
 8019c3c:	f7fe fa9c 	bl	8018178 <clmt_clust>
 8019c40:	62b8      	str	r0, [r7, #40]	; 0x28
 8019c42:	e007      	b.n	8019c54 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8019c44:	68fa      	ldr	r2, [r7, #12]
 8019c46:	68fb      	ldr	r3, [r7, #12]
 8019c48:	69db      	ldr	r3, [r3, #28]
 8019c4a:	4619      	mov	r1, r3
 8019c4c:	4610      	mov	r0, r2
 8019c4e:	f7fe f9fb 	bl	8018048 <create_chain>
 8019c52:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8019c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c56:	2b00      	cmp	r3, #0
 8019c58:	f000 8109 	beq.w	8019e6e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8019c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c5e:	2b01      	cmp	r3, #1
 8019c60:	d104      	bne.n	8019c6c <f_write+0x10c>
 8019c62:	68fb      	ldr	r3, [r7, #12]
 8019c64:	2202      	movs	r2, #2
 8019c66:	755a      	strb	r2, [r3, #21]
 8019c68:	2302      	movs	r3, #2
 8019c6a:	e109      	b.n	8019e80 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8019c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019c72:	d104      	bne.n	8019c7e <f_write+0x11e>
 8019c74:	68fb      	ldr	r3, [r7, #12]
 8019c76:	2201      	movs	r2, #1
 8019c78:	755a      	strb	r2, [r3, #21]
 8019c7a:	2301      	movs	r3, #1
 8019c7c:	e100      	b.n	8019e80 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8019c7e:	68fb      	ldr	r3, [r7, #12]
 8019c80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019c82:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8019c84:	68fb      	ldr	r3, [r7, #12]
 8019c86:	689b      	ldr	r3, [r3, #8]
 8019c88:	2b00      	cmp	r3, #0
 8019c8a:	d102      	bne.n	8019c92 <f_write+0x132>
 8019c8c:	68fb      	ldr	r3, [r7, #12]
 8019c8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019c90:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8019c92:	68fb      	ldr	r3, [r7, #12]
 8019c94:	7d1b      	ldrb	r3, [r3, #20]
 8019c96:	b25b      	sxtb	r3, r3
 8019c98:	2b00      	cmp	r3, #0
 8019c9a:	da18      	bge.n	8019cce <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8019c9c:	693b      	ldr	r3, [r7, #16]
 8019c9e:	7858      	ldrb	r0, [r3, #1]
 8019ca0:	68fb      	ldr	r3, [r7, #12]
 8019ca2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019ca6:	68fb      	ldr	r3, [r7, #12]
 8019ca8:	6a1a      	ldr	r2, [r3, #32]
 8019caa:	2301      	movs	r3, #1
 8019cac:	f7fd fbcc 	bl	8017448 <disk_write>
 8019cb0:	4603      	mov	r3, r0
 8019cb2:	2b00      	cmp	r3, #0
 8019cb4:	d004      	beq.n	8019cc0 <f_write+0x160>
 8019cb6:	68fb      	ldr	r3, [r7, #12]
 8019cb8:	2201      	movs	r2, #1
 8019cba:	755a      	strb	r2, [r3, #21]
 8019cbc:	2301      	movs	r3, #1
 8019cbe:	e0df      	b.n	8019e80 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8019cc0:	68fb      	ldr	r3, [r7, #12]
 8019cc2:	7d1b      	ldrb	r3, [r3, #20]
 8019cc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019cc8:	b2da      	uxtb	r2, r3
 8019cca:	68fb      	ldr	r3, [r7, #12]
 8019ccc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8019cce:	693a      	ldr	r2, [r7, #16]
 8019cd0:	68fb      	ldr	r3, [r7, #12]
 8019cd2:	69db      	ldr	r3, [r3, #28]
 8019cd4:	4619      	mov	r1, r3
 8019cd6:	4610      	mov	r0, r2
 8019cd8:	f7fd ff42 	bl	8017b60 <clust2sect>
 8019cdc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8019cde:	697b      	ldr	r3, [r7, #20]
 8019ce0:	2b00      	cmp	r3, #0
 8019ce2:	d104      	bne.n	8019cee <f_write+0x18e>
 8019ce4:	68fb      	ldr	r3, [r7, #12]
 8019ce6:	2202      	movs	r2, #2
 8019ce8:	755a      	strb	r2, [r3, #21]
 8019cea:	2302      	movs	r3, #2
 8019cec:	e0c8      	b.n	8019e80 <f_write+0x320>
			sect += csect;
 8019cee:	697a      	ldr	r2, [r7, #20]
 8019cf0:	69bb      	ldr	r3, [r7, #24]
 8019cf2:	4413      	add	r3, r2
 8019cf4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8019cf6:	693b      	ldr	r3, [r7, #16]
 8019cf8:	899b      	ldrh	r3, [r3, #12]
 8019cfa:	461a      	mov	r2, r3
 8019cfc:	687b      	ldr	r3, [r7, #4]
 8019cfe:	fbb3 f3f2 	udiv	r3, r3, r2
 8019d02:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8019d04:	6a3b      	ldr	r3, [r7, #32]
 8019d06:	2b00      	cmp	r3, #0
 8019d08:	d043      	beq.n	8019d92 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8019d0a:	69ba      	ldr	r2, [r7, #24]
 8019d0c:	6a3b      	ldr	r3, [r7, #32]
 8019d0e:	4413      	add	r3, r2
 8019d10:	693a      	ldr	r2, [r7, #16]
 8019d12:	8952      	ldrh	r2, [r2, #10]
 8019d14:	4293      	cmp	r3, r2
 8019d16:	d905      	bls.n	8019d24 <f_write+0x1c4>
					cc = fs->csize - csect;
 8019d18:	693b      	ldr	r3, [r7, #16]
 8019d1a:	895b      	ldrh	r3, [r3, #10]
 8019d1c:	461a      	mov	r2, r3
 8019d1e:	69bb      	ldr	r3, [r7, #24]
 8019d20:	1ad3      	subs	r3, r2, r3
 8019d22:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8019d24:	693b      	ldr	r3, [r7, #16]
 8019d26:	7858      	ldrb	r0, [r3, #1]
 8019d28:	6a3b      	ldr	r3, [r7, #32]
 8019d2a:	697a      	ldr	r2, [r7, #20]
 8019d2c:	69f9      	ldr	r1, [r7, #28]
 8019d2e:	f7fd fb8b 	bl	8017448 <disk_write>
 8019d32:	4603      	mov	r3, r0
 8019d34:	2b00      	cmp	r3, #0
 8019d36:	d004      	beq.n	8019d42 <f_write+0x1e2>
 8019d38:	68fb      	ldr	r3, [r7, #12]
 8019d3a:	2201      	movs	r2, #1
 8019d3c:	755a      	strb	r2, [r3, #21]
 8019d3e:	2301      	movs	r3, #1
 8019d40:	e09e      	b.n	8019e80 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8019d42:	68fb      	ldr	r3, [r7, #12]
 8019d44:	6a1a      	ldr	r2, [r3, #32]
 8019d46:	697b      	ldr	r3, [r7, #20]
 8019d48:	1ad3      	subs	r3, r2, r3
 8019d4a:	6a3a      	ldr	r2, [r7, #32]
 8019d4c:	429a      	cmp	r2, r3
 8019d4e:	d918      	bls.n	8019d82 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8019d50:	68fb      	ldr	r3, [r7, #12]
 8019d52:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8019d56:	68fb      	ldr	r3, [r7, #12]
 8019d58:	6a1a      	ldr	r2, [r3, #32]
 8019d5a:	697b      	ldr	r3, [r7, #20]
 8019d5c:	1ad3      	subs	r3, r2, r3
 8019d5e:	693a      	ldr	r2, [r7, #16]
 8019d60:	8992      	ldrh	r2, [r2, #12]
 8019d62:	fb02 f303 	mul.w	r3, r2, r3
 8019d66:	69fa      	ldr	r2, [r7, #28]
 8019d68:	18d1      	adds	r1, r2, r3
 8019d6a:	693b      	ldr	r3, [r7, #16]
 8019d6c:	899b      	ldrh	r3, [r3, #12]
 8019d6e:	461a      	mov	r2, r3
 8019d70:	f7fd fc2a 	bl	80175c8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8019d74:	68fb      	ldr	r3, [r7, #12]
 8019d76:	7d1b      	ldrb	r3, [r3, #20]
 8019d78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019d7c:	b2da      	uxtb	r2, r3
 8019d7e:	68fb      	ldr	r3, [r7, #12]
 8019d80:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8019d82:	693b      	ldr	r3, [r7, #16]
 8019d84:	899b      	ldrh	r3, [r3, #12]
 8019d86:	461a      	mov	r2, r3
 8019d88:	6a3b      	ldr	r3, [r7, #32]
 8019d8a:	fb02 f303 	mul.w	r3, r2, r3
 8019d8e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8019d90:	e04b      	b.n	8019e2a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8019d92:	68fb      	ldr	r3, [r7, #12]
 8019d94:	6a1b      	ldr	r3, [r3, #32]
 8019d96:	697a      	ldr	r2, [r7, #20]
 8019d98:	429a      	cmp	r2, r3
 8019d9a:	d016      	beq.n	8019dca <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8019d9c:	68fb      	ldr	r3, [r7, #12]
 8019d9e:	699a      	ldr	r2, [r3, #24]
 8019da0:	68fb      	ldr	r3, [r7, #12]
 8019da2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8019da4:	429a      	cmp	r2, r3
 8019da6:	d210      	bcs.n	8019dca <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8019da8:	693b      	ldr	r3, [r7, #16]
 8019daa:	7858      	ldrb	r0, [r3, #1]
 8019dac:	68fb      	ldr	r3, [r7, #12]
 8019dae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019db2:	2301      	movs	r3, #1
 8019db4:	697a      	ldr	r2, [r7, #20]
 8019db6:	f7fd fb27 	bl	8017408 <disk_read>
 8019dba:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8019dbc:	2b00      	cmp	r3, #0
 8019dbe:	d004      	beq.n	8019dca <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8019dc0:	68fb      	ldr	r3, [r7, #12]
 8019dc2:	2201      	movs	r2, #1
 8019dc4:	755a      	strb	r2, [r3, #21]
 8019dc6:	2301      	movs	r3, #1
 8019dc8:	e05a      	b.n	8019e80 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8019dca:	68fb      	ldr	r3, [r7, #12]
 8019dcc:	697a      	ldr	r2, [r7, #20]
 8019dce:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8019dd0:	693b      	ldr	r3, [r7, #16]
 8019dd2:	899b      	ldrh	r3, [r3, #12]
 8019dd4:	4618      	mov	r0, r3
 8019dd6:	68fb      	ldr	r3, [r7, #12]
 8019dd8:	699b      	ldr	r3, [r3, #24]
 8019dda:	693a      	ldr	r2, [r7, #16]
 8019ddc:	8992      	ldrh	r2, [r2, #12]
 8019dde:	fbb3 f1f2 	udiv	r1, r3, r2
 8019de2:	fb01 f202 	mul.w	r2, r1, r2
 8019de6:	1a9b      	subs	r3, r3, r2
 8019de8:	1ac3      	subs	r3, r0, r3
 8019dea:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8019dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	429a      	cmp	r2, r3
 8019df2:	d901      	bls.n	8019df8 <f_write+0x298>
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8019df8:	68fb      	ldr	r3, [r7, #12]
 8019dfa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019dfe:	68fb      	ldr	r3, [r7, #12]
 8019e00:	699b      	ldr	r3, [r3, #24]
 8019e02:	693a      	ldr	r2, [r7, #16]
 8019e04:	8992      	ldrh	r2, [r2, #12]
 8019e06:	fbb3 f0f2 	udiv	r0, r3, r2
 8019e0a:	fb00 f202 	mul.w	r2, r0, r2
 8019e0e:	1a9b      	subs	r3, r3, r2
 8019e10:	440b      	add	r3, r1
 8019e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019e14:	69f9      	ldr	r1, [r7, #28]
 8019e16:	4618      	mov	r0, r3
 8019e18:	f7fd fbd6 	bl	80175c8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8019e1c:	68fb      	ldr	r3, [r7, #12]
 8019e1e:	7d1b      	ldrb	r3, [r3, #20]
 8019e20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8019e24:	b2da      	uxtb	r2, r3
 8019e26:	68fb      	ldr	r3, [r7, #12]
 8019e28:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8019e2a:	69fa      	ldr	r2, [r7, #28]
 8019e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e2e:	4413      	add	r3, r2
 8019e30:	61fb      	str	r3, [r7, #28]
 8019e32:	68fb      	ldr	r3, [r7, #12]
 8019e34:	699a      	ldr	r2, [r3, #24]
 8019e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e38:	441a      	add	r2, r3
 8019e3a:	68fb      	ldr	r3, [r7, #12]
 8019e3c:	619a      	str	r2, [r3, #24]
 8019e3e:	68fb      	ldr	r3, [r7, #12]
 8019e40:	68da      	ldr	r2, [r3, #12]
 8019e42:	68fb      	ldr	r3, [r7, #12]
 8019e44:	699b      	ldr	r3, [r3, #24]
 8019e46:	429a      	cmp	r2, r3
 8019e48:	bf38      	it	cc
 8019e4a:	461a      	movcc	r2, r3
 8019e4c:	68fb      	ldr	r3, [r7, #12]
 8019e4e:	60da      	str	r2, [r3, #12]
 8019e50:	683b      	ldr	r3, [r7, #0]
 8019e52:	681a      	ldr	r2, [r3, #0]
 8019e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e56:	441a      	add	r2, r3
 8019e58:	683b      	ldr	r3, [r7, #0]
 8019e5a:	601a      	str	r2, [r3, #0]
 8019e5c:	687a      	ldr	r2, [r7, #4]
 8019e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e60:	1ad3      	subs	r3, r2, r3
 8019e62:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8019e64:	687b      	ldr	r3, [r7, #4]
 8019e66:	2b00      	cmp	r3, #0
 8019e68:	f47f aeb5 	bne.w	8019bd6 <f_write+0x76>
 8019e6c:	e000      	b.n	8019e70 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8019e6e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8019e70:	68fb      	ldr	r3, [r7, #12]
 8019e72:	7d1b      	ldrb	r3, [r3, #20]
 8019e74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019e78:	b2da      	uxtb	r2, r3
 8019e7a:	68fb      	ldr	r3, [r7, #12]
 8019e7c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8019e7e:	2300      	movs	r3, #0
}
 8019e80:	4618      	mov	r0, r3
 8019e82:	3730      	adds	r7, #48	; 0x30
 8019e84:	46bd      	mov	sp, r7
 8019e86:	bd80      	pop	{r7, pc}

08019e88 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8019e88:	b580      	push	{r7, lr}
 8019e8a:	b086      	sub	sp, #24
 8019e8c:	af00      	add	r7, sp, #0
 8019e8e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8019e90:	687b      	ldr	r3, [r7, #4]
 8019e92:	f107 0208 	add.w	r2, r7, #8
 8019e96:	4611      	mov	r1, r2
 8019e98:	4618      	mov	r0, r3
 8019e9a:	f7ff fc19 	bl	80196d0 <validate>
 8019e9e:	4603      	mov	r3, r0
 8019ea0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8019ea2:	7dfb      	ldrb	r3, [r7, #23]
 8019ea4:	2b00      	cmp	r3, #0
 8019ea6:	d168      	bne.n	8019f7a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8019ea8:	687b      	ldr	r3, [r7, #4]
 8019eaa:	7d1b      	ldrb	r3, [r3, #20]
 8019eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019eb0:	2b00      	cmp	r3, #0
 8019eb2:	d062      	beq.n	8019f7a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8019eb4:	687b      	ldr	r3, [r7, #4]
 8019eb6:	7d1b      	ldrb	r3, [r3, #20]
 8019eb8:	b25b      	sxtb	r3, r3
 8019eba:	2b00      	cmp	r3, #0
 8019ebc:	da15      	bge.n	8019eea <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8019ebe:	68bb      	ldr	r3, [r7, #8]
 8019ec0:	7858      	ldrb	r0, [r3, #1]
 8019ec2:	687b      	ldr	r3, [r7, #4]
 8019ec4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019ec8:	687b      	ldr	r3, [r7, #4]
 8019eca:	6a1a      	ldr	r2, [r3, #32]
 8019ecc:	2301      	movs	r3, #1
 8019ece:	f7fd fabb 	bl	8017448 <disk_write>
 8019ed2:	4603      	mov	r3, r0
 8019ed4:	2b00      	cmp	r3, #0
 8019ed6:	d001      	beq.n	8019edc <f_sync+0x54>
 8019ed8:	2301      	movs	r3, #1
 8019eda:	e04f      	b.n	8019f7c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8019edc:	687b      	ldr	r3, [r7, #4]
 8019ede:	7d1b      	ldrb	r3, [r3, #20]
 8019ee0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019ee4:	b2da      	uxtb	r2, r3
 8019ee6:	687b      	ldr	r3, [r7, #4]
 8019ee8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8019eea:	f7fb f863 	bl	8014fb4 <get_fattime>
 8019eee:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8019ef0:	68ba      	ldr	r2, [r7, #8]
 8019ef2:	687b      	ldr	r3, [r7, #4]
 8019ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ef6:	4619      	mov	r1, r3
 8019ef8:	4610      	mov	r0, r2
 8019efa:	f7fd fd93 	bl	8017a24 <move_window>
 8019efe:	4603      	mov	r3, r0
 8019f00:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8019f02:	7dfb      	ldrb	r3, [r7, #23]
 8019f04:	2b00      	cmp	r3, #0
 8019f06:	d138      	bne.n	8019f7a <f_sync+0xf2>
					dir = fp->dir_ptr;
 8019f08:	687b      	ldr	r3, [r7, #4]
 8019f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019f0c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8019f0e:	68fb      	ldr	r3, [r7, #12]
 8019f10:	330b      	adds	r3, #11
 8019f12:	781a      	ldrb	r2, [r3, #0]
 8019f14:	68fb      	ldr	r3, [r7, #12]
 8019f16:	330b      	adds	r3, #11
 8019f18:	f042 0220 	orr.w	r2, r2, #32
 8019f1c:	b2d2      	uxtb	r2, r2
 8019f1e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8019f20:	687b      	ldr	r3, [r7, #4]
 8019f22:	6818      	ldr	r0, [r3, #0]
 8019f24:	687b      	ldr	r3, [r7, #4]
 8019f26:	689b      	ldr	r3, [r3, #8]
 8019f28:	461a      	mov	r2, r3
 8019f2a:	68f9      	ldr	r1, [r7, #12]
 8019f2c:	f7fe fb21 	bl	8018572 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8019f30:	68fb      	ldr	r3, [r7, #12]
 8019f32:	f103 021c 	add.w	r2, r3, #28
 8019f36:	687b      	ldr	r3, [r7, #4]
 8019f38:	68db      	ldr	r3, [r3, #12]
 8019f3a:	4619      	mov	r1, r3
 8019f3c:	4610      	mov	r0, r2
 8019f3e:	f7fd fb17 	bl	8017570 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8019f42:	68fb      	ldr	r3, [r7, #12]
 8019f44:	3316      	adds	r3, #22
 8019f46:	6939      	ldr	r1, [r7, #16]
 8019f48:	4618      	mov	r0, r3
 8019f4a:	f7fd fb11 	bl	8017570 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8019f4e:	68fb      	ldr	r3, [r7, #12]
 8019f50:	3312      	adds	r3, #18
 8019f52:	2100      	movs	r1, #0
 8019f54:	4618      	mov	r0, r3
 8019f56:	f7fd faf0 	bl	801753a <st_word>
					fs->wflag = 1;
 8019f5a:	68bb      	ldr	r3, [r7, #8]
 8019f5c:	2201      	movs	r2, #1
 8019f5e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8019f60:	68bb      	ldr	r3, [r7, #8]
 8019f62:	4618      	mov	r0, r3
 8019f64:	f7fd fd8c 	bl	8017a80 <sync_fs>
 8019f68:	4603      	mov	r3, r0
 8019f6a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8019f6c:	687b      	ldr	r3, [r7, #4]
 8019f6e:	7d1b      	ldrb	r3, [r3, #20]
 8019f70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8019f74:	b2da      	uxtb	r2, r3
 8019f76:	687b      	ldr	r3, [r7, #4]
 8019f78:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8019f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8019f7c:	4618      	mov	r0, r3
 8019f7e:	3718      	adds	r7, #24
 8019f80:	46bd      	mov	sp, r7
 8019f82:	bd80      	pop	{r7, pc}

08019f84 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8019f84:	b580      	push	{r7, lr}
 8019f86:	b084      	sub	sp, #16
 8019f88:	af00      	add	r7, sp, #0
 8019f8a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8019f8c:	6878      	ldr	r0, [r7, #4]
 8019f8e:	f7ff ff7b 	bl	8019e88 <f_sync>
 8019f92:	4603      	mov	r3, r0
 8019f94:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8019f96:	7bfb      	ldrb	r3, [r7, #15]
 8019f98:	2b00      	cmp	r3, #0
 8019f9a:	d118      	bne.n	8019fce <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8019f9c:	687b      	ldr	r3, [r7, #4]
 8019f9e:	f107 0208 	add.w	r2, r7, #8
 8019fa2:	4611      	mov	r1, r2
 8019fa4:	4618      	mov	r0, r3
 8019fa6:	f7ff fb93 	bl	80196d0 <validate>
 8019faa:	4603      	mov	r3, r0
 8019fac:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8019fae:	7bfb      	ldrb	r3, [r7, #15]
 8019fb0:	2b00      	cmp	r3, #0
 8019fb2:	d10c      	bne.n	8019fce <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8019fb4:	687b      	ldr	r3, [r7, #4]
 8019fb6:	691b      	ldr	r3, [r3, #16]
 8019fb8:	4618      	mov	r0, r3
 8019fba:	f7fd fc8f 	bl	80178dc <dec_lock>
 8019fbe:	4603      	mov	r3, r0
 8019fc0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8019fc2:	7bfb      	ldrb	r3, [r7, #15]
 8019fc4:	2b00      	cmp	r3, #0
 8019fc6:	d102      	bne.n	8019fce <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8019fc8:	687b      	ldr	r3, [r7, #4]
 8019fca:	2200      	movs	r2, #0
 8019fcc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8019fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8019fd0:	4618      	mov	r0, r3
 8019fd2:	3710      	adds	r7, #16
 8019fd4:	46bd      	mov	sp, r7
 8019fd6:	bd80      	pop	{r7, pc}

08019fd8 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8019fd8:	b580      	push	{r7, lr}
 8019fda:	b084      	sub	sp, #16
 8019fdc:	af00      	add	r7, sp, #0
 8019fde:	6078      	str	r0, [r7, #4]
 8019fe0:	460b      	mov	r3, r1
 8019fe2:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8019fe4:	78fb      	ldrb	r3, [r7, #3]
 8019fe6:	2b0a      	cmp	r3, #10
 8019fe8:	d103      	bne.n	8019ff2 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8019fea:	210d      	movs	r1, #13
 8019fec:	6878      	ldr	r0, [r7, #4]
 8019fee:	f7ff fff3 	bl	8019fd8 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8019ff2:	687b      	ldr	r3, [r7, #4]
 8019ff4:	685b      	ldr	r3, [r3, #4]
 8019ff6:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8019ff8:	68fb      	ldr	r3, [r7, #12]
 8019ffa:	2b00      	cmp	r3, #0
 8019ffc:	db25      	blt.n	801a04a <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8019ffe:	68fb      	ldr	r3, [r7, #12]
 801a000:	1c5a      	adds	r2, r3, #1
 801a002:	60fa      	str	r2, [r7, #12]
 801a004:	687a      	ldr	r2, [r7, #4]
 801a006:	4413      	add	r3, r2
 801a008:	78fa      	ldrb	r2, [r7, #3]
 801a00a:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801a00c:	68fb      	ldr	r3, [r7, #12]
 801a00e:	2b3c      	cmp	r3, #60	; 0x3c
 801a010:	dd12      	ble.n	801a038 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801a012:	687b      	ldr	r3, [r7, #4]
 801a014:	6818      	ldr	r0, [r3, #0]
 801a016:	687b      	ldr	r3, [r7, #4]
 801a018:	f103 010c 	add.w	r1, r3, #12
 801a01c:	68fa      	ldr	r2, [r7, #12]
 801a01e:	f107 0308 	add.w	r3, r7, #8
 801a022:	f7ff fd9d 	bl	8019b60 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801a026:	68ba      	ldr	r2, [r7, #8]
 801a028:	68fb      	ldr	r3, [r7, #12]
 801a02a:	429a      	cmp	r2, r3
 801a02c:	d101      	bne.n	801a032 <putc_bfd+0x5a>
 801a02e:	2300      	movs	r3, #0
 801a030:	e001      	b.n	801a036 <putc_bfd+0x5e>
 801a032:	f04f 33ff 	mov.w	r3, #4294967295
 801a036:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 801a038:	687b      	ldr	r3, [r7, #4]
 801a03a:	68fa      	ldr	r2, [r7, #12]
 801a03c:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 801a03e:	687b      	ldr	r3, [r7, #4]
 801a040:	689b      	ldr	r3, [r3, #8]
 801a042:	1c5a      	adds	r2, r3, #1
 801a044:	687b      	ldr	r3, [r7, #4]
 801a046:	609a      	str	r2, [r3, #8]
 801a048:	e000      	b.n	801a04c <putc_bfd+0x74>
	if (i < 0) return;
 801a04a:	bf00      	nop
}
 801a04c:	3710      	adds	r7, #16
 801a04e:	46bd      	mov	sp, r7
 801a050:	bd80      	pop	{r7, pc}

0801a052 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 801a052:	b580      	push	{r7, lr}
 801a054:	b084      	sub	sp, #16
 801a056:	af00      	add	r7, sp, #0
 801a058:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 801a05a:	687b      	ldr	r3, [r7, #4]
 801a05c:	685b      	ldr	r3, [r3, #4]
 801a05e:	2b00      	cmp	r3, #0
 801a060:	db16      	blt.n	801a090 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 801a062:	687b      	ldr	r3, [r7, #4]
 801a064:	6818      	ldr	r0, [r3, #0]
 801a066:	687b      	ldr	r3, [r7, #4]
 801a068:	f103 010c 	add.w	r1, r3, #12
 801a06c:	687b      	ldr	r3, [r7, #4]
 801a06e:	685b      	ldr	r3, [r3, #4]
 801a070:	461a      	mov	r2, r3
 801a072:	f107 030c 	add.w	r3, r7, #12
 801a076:	f7ff fd73 	bl	8019b60 <f_write>
 801a07a:	4603      	mov	r3, r0
 801a07c:	2b00      	cmp	r3, #0
 801a07e:	d107      	bne.n	801a090 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 801a080:	687b      	ldr	r3, [r7, #4]
 801a082:	685b      	ldr	r3, [r3, #4]
 801a084:	68fa      	ldr	r2, [r7, #12]
 801a086:	4293      	cmp	r3, r2
 801a088:	d102      	bne.n	801a090 <putc_flush+0x3e>
 801a08a:	687b      	ldr	r3, [r7, #4]
 801a08c:	689b      	ldr	r3, [r3, #8]
 801a08e:	e001      	b.n	801a094 <putc_flush+0x42>
	return EOF;
 801a090:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a094:	4618      	mov	r0, r3
 801a096:	3710      	adds	r7, #16
 801a098:	46bd      	mov	sp, r7
 801a09a:	bd80      	pop	{r7, pc}

0801a09c <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 801a09c:	b480      	push	{r7}
 801a09e:	b083      	sub	sp, #12
 801a0a0:	af00      	add	r7, sp, #0
 801a0a2:	6078      	str	r0, [r7, #4]
 801a0a4:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 801a0a6:	687b      	ldr	r3, [r7, #4]
 801a0a8:	683a      	ldr	r2, [r7, #0]
 801a0aa:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 801a0ac:	687b      	ldr	r3, [r7, #4]
 801a0ae:	2200      	movs	r2, #0
 801a0b0:	605a      	str	r2, [r3, #4]
 801a0b2:	687b      	ldr	r3, [r7, #4]
 801a0b4:	685a      	ldr	r2, [r3, #4]
 801a0b6:	687b      	ldr	r3, [r7, #4]
 801a0b8:	609a      	str	r2, [r3, #8]
}
 801a0ba:	bf00      	nop
 801a0bc:	370c      	adds	r7, #12
 801a0be:	46bd      	mov	sp, r7
 801a0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0c4:	4770      	bx	lr

0801a0c6 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 801a0c6:	b580      	push	{r7, lr}
 801a0c8:	b096      	sub	sp, #88	; 0x58
 801a0ca:	af00      	add	r7, sp, #0
 801a0cc:	6078      	str	r0, [r7, #4]
 801a0ce:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 801a0d0:	f107 030c 	add.w	r3, r7, #12
 801a0d4:	6839      	ldr	r1, [r7, #0]
 801a0d6:	4618      	mov	r0, r3
 801a0d8:	f7ff ffe0 	bl	801a09c <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 801a0dc:	e009      	b.n	801a0f2 <f_puts+0x2c>
 801a0de:	687b      	ldr	r3, [r7, #4]
 801a0e0:	1c5a      	adds	r2, r3, #1
 801a0e2:	607a      	str	r2, [r7, #4]
 801a0e4:	781a      	ldrb	r2, [r3, #0]
 801a0e6:	f107 030c 	add.w	r3, r7, #12
 801a0ea:	4611      	mov	r1, r2
 801a0ec:	4618      	mov	r0, r3
 801a0ee:	f7ff ff73 	bl	8019fd8 <putc_bfd>
 801a0f2:	687b      	ldr	r3, [r7, #4]
 801a0f4:	781b      	ldrb	r3, [r3, #0]
 801a0f6:	2b00      	cmp	r3, #0
 801a0f8:	d1f1      	bne.n	801a0de <f_puts+0x18>
	return putc_flush(&pb);
 801a0fa:	f107 030c 	add.w	r3, r7, #12
 801a0fe:	4618      	mov	r0, r3
 801a100:	f7ff ffa7 	bl	801a052 <putc_flush>
 801a104:	4603      	mov	r3, r0
}
 801a106:	4618      	mov	r0, r3
 801a108:	3758      	adds	r7, #88	; 0x58
 801a10a:	46bd      	mov	sp, r7
 801a10c:	bd80      	pop	{r7, pc}
	...

0801a110 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801a110:	b480      	push	{r7}
 801a112:	b087      	sub	sp, #28
 801a114:	af00      	add	r7, sp, #0
 801a116:	60f8      	str	r0, [r7, #12]
 801a118:	60b9      	str	r1, [r7, #8]
 801a11a:	4613      	mov	r3, r2
 801a11c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801a11e:	2301      	movs	r3, #1
 801a120:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801a122:	2300      	movs	r3, #0
 801a124:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801a126:	4b1f      	ldr	r3, [pc, #124]	; (801a1a4 <FATFS_LinkDriverEx+0x94>)
 801a128:	7a5b      	ldrb	r3, [r3, #9]
 801a12a:	b2db      	uxtb	r3, r3
 801a12c:	2b00      	cmp	r3, #0
 801a12e:	d131      	bne.n	801a194 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801a130:	4b1c      	ldr	r3, [pc, #112]	; (801a1a4 <FATFS_LinkDriverEx+0x94>)
 801a132:	7a5b      	ldrb	r3, [r3, #9]
 801a134:	b2db      	uxtb	r3, r3
 801a136:	461a      	mov	r2, r3
 801a138:	4b1a      	ldr	r3, [pc, #104]	; (801a1a4 <FATFS_LinkDriverEx+0x94>)
 801a13a:	2100      	movs	r1, #0
 801a13c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801a13e:	4b19      	ldr	r3, [pc, #100]	; (801a1a4 <FATFS_LinkDriverEx+0x94>)
 801a140:	7a5b      	ldrb	r3, [r3, #9]
 801a142:	b2db      	uxtb	r3, r3
 801a144:	4a17      	ldr	r2, [pc, #92]	; (801a1a4 <FATFS_LinkDriverEx+0x94>)
 801a146:	009b      	lsls	r3, r3, #2
 801a148:	4413      	add	r3, r2
 801a14a:	68fa      	ldr	r2, [r7, #12]
 801a14c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801a14e:	4b15      	ldr	r3, [pc, #84]	; (801a1a4 <FATFS_LinkDriverEx+0x94>)
 801a150:	7a5b      	ldrb	r3, [r3, #9]
 801a152:	b2db      	uxtb	r3, r3
 801a154:	461a      	mov	r2, r3
 801a156:	4b13      	ldr	r3, [pc, #76]	; (801a1a4 <FATFS_LinkDriverEx+0x94>)
 801a158:	4413      	add	r3, r2
 801a15a:	79fa      	ldrb	r2, [r7, #7]
 801a15c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801a15e:	4b11      	ldr	r3, [pc, #68]	; (801a1a4 <FATFS_LinkDriverEx+0x94>)
 801a160:	7a5b      	ldrb	r3, [r3, #9]
 801a162:	b2db      	uxtb	r3, r3
 801a164:	1c5a      	adds	r2, r3, #1
 801a166:	b2d1      	uxtb	r1, r2
 801a168:	4a0e      	ldr	r2, [pc, #56]	; (801a1a4 <FATFS_LinkDriverEx+0x94>)
 801a16a:	7251      	strb	r1, [r2, #9]
 801a16c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801a16e:	7dbb      	ldrb	r3, [r7, #22]
 801a170:	3330      	adds	r3, #48	; 0x30
 801a172:	b2da      	uxtb	r2, r3
 801a174:	68bb      	ldr	r3, [r7, #8]
 801a176:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801a178:	68bb      	ldr	r3, [r7, #8]
 801a17a:	3301      	adds	r3, #1
 801a17c:	223a      	movs	r2, #58	; 0x3a
 801a17e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801a180:	68bb      	ldr	r3, [r7, #8]
 801a182:	3302      	adds	r3, #2
 801a184:	222f      	movs	r2, #47	; 0x2f
 801a186:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801a188:	68bb      	ldr	r3, [r7, #8]
 801a18a:	3303      	adds	r3, #3
 801a18c:	2200      	movs	r2, #0
 801a18e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801a190:	2300      	movs	r3, #0
 801a192:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801a194:	7dfb      	ldrb	r3, [r7, #23]
}
 801a196:	4618      	mov	r0, r3
 801a198:	371c      	adds	r7, #28
 801a19a:	46bd      	mov	sp, r7
 801a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1a0:	4770      	bx	lr
 801a1a2:	bf00      	nop
 801a1a4:	240018dc 	.word	0x240018dc

0801a1a8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801a1a8:	b580      	push	{r7, lr}
 801a1aa:	b082      	sub	sp, #8
 801a1ac:	af00      	add	r7, sp, #0
 801a1ae:	6078      	str	r0, [r7, #4]
 801a1b0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801a1b2:	2200      	movs	r2, #0
 801a1b4:	6839      	ldr	r1, [r7, #0]
 801a1b6:	6878      	ldr	r0, [r7, #4]
 801a1b8:	f7ff ffaa 	bl	801a110 <FATFS_LinkDriverEx>
 801a1bc:	4603      	mov	r3, r0
}
 801a1be:	4618      	mov	r0, r3
 801a1c0:	3708      	adds	r7, #8
 801a1c2:	46bd      	mov	sp, r7
 801a1c4:	bd80      	pop	{r7, pc}
	...

0801a1c8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 801a1c8:	b480      	push	{r7}
 801a1ca:	b085      	sub	sp, #20
 801a1cc:	af00      	add	r7, sp, #0
 801a1ce:	4603      	mov	r3, r0
 801a1d0:	6039      	str	r1, [r7, #0]
 801a1d2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801a1d4:	88fb      	ldrh	r3, [r7, #6]
 801a1d6:	2b7f      	cmp	r3, #127	; 0x7f
 801a1d8:	d802      	bhi.n	801a1e0 <ff_convert+0x18>
		c = chr;
 801a1da:	88fb      	ldrh	r3, [r7, #6]
 801a1dc:	81fb      	strh	r3, [r7, #14]
 801a1de:	e025      	b.n	801a22c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801a1e0:	683b      	ldr	r3, [r7, #0]
 801a1e2:	2b00      	cmp	r3, #0
 801a1e4:	d00b      	beq.n	801a1fe <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801a1e6:	88fb      	ldrh	r3, [r7, #6]
 801a1e8:	2bff      	cmp	r3, #255	; 0xff
 801a1ea:	d805      	bhi.n	801a1f8 <ff_convert+0x30>
 801a1ec:	88fb      	ldrh	r3, [r7, #6]
 801a1ee:	3b80      	subs	r3, #128	; 0x80
 801a1f0:	4a12      	ldr	r2, [pc, #72]	; (801a23c <ff_convert+0x74>)
 801a1f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a1f6:	e000      	b.n	801a1fa <ff_convert+0x32>
 801a1f8:	2300      	movs	r3, #0
 801a1fa:	81fb      	strh	r3, [r7, #14]
 801a1fc:	e016      	b.n	801a22c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801a1fe:	2300      	movs	r3, #0
 801a200:	81fb      	strh	r3, [r7, #14]
 801a202:	e009      	b.n	801a218 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801a204:	89fb      	ldrh	r3, [r7, #14]
 801a206:	4a0d      	ldr	r2, [pc, #52]	; (801a23c <ff_convert+0x74>)
 801a208:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801a20c:	88fa      	ldrh	r2, [r7, #6]
 801a20e:	429a      	cmp	r2, r3
 801a210:	d006      	beq.n	801a220 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801a212:	89fb      	ldrh	r3, [r7, #14]
 801a214:	3301      	adds	r3, #1
 801a216:	81fb      	strh	r3, [r7, #14]
 801a218:	89fb      	ldrh	r3, [r7, #14]
 801a21a:	2b7f      	cmp	r3, #127	; 0x7f
 801a21c:	d9f2      	bls.n	801a204 <ff_convert+0x3c>
 801a21e:	e000      	b.n	801a222 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801a220:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801a222:	89fb      	ldrh	r3, [r7, #14]
 801a224:	3380      	adds	r3, #128	; 0x80
 801a226:	b29b      	uxth	r3, r3
 801a228:	b2db      	uxtb	r3, r3
 801a22a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801a22c:	89fb      	ldrh	r3, [r7, #14]
}
 801a22e:	4618      	mov	r0, r3
 801a230:	3714      	adds	r7, #20
 801a232:	46bd      	mov	sp, r7
 801a234:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a238:	4770      	bx	lr
 801a23a:	bf00      	nop
 801a23c:	0801f894 	.word	0x0801f894

0801a240 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801a240:	b480      	push	{r7}
 801a242:	b087      	sub	sp, #28
 801a244:	af00      	add	r7, sp, #0
 801a246:	4603      	mov	r3, r0
 801a248:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801a24a:	88fb      	ldrh	r3, [r7, #6]
 801a24c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801a250:	d201      	bcs.n	801a256 <ff_wtoupper+0x16>
 801a252:	4b3e      	ldr	r3, [pc, #248]	; (801a34c <ff_wtoupper+0x10c>)
 801a254:	e000      	b.n	801a258 <ff_wtoupper+0x18>
 801a256:	4b3e      	ldr	r3, [pc, #248]	; (801a350 <ff_wtoupper+0x110>)
 801a258:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801a25a:	697b      	ldr	r3, [r7, #20]
 801a25c:	1c9a      	adds	r2, r3, #2
 801a25e:	617a      	str	r2, [r7, #20]
 801a260:	881b      	ldrh	r3, [r3, #0]
 801a262:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801a264:	8a7b      	ldrh	r3, [r7, #18]
 801a266:	2b00      	cmp	r3, #0
 801a268:	d068      	beq.n	801a33c <ff_wtoupper+0xfc>
 801a26a:	88fa      	ldrh	r2, [r7, #6]
 801a26c:	8a7b      	ldrh	r3, [r7, #18]
 801a26e:	429a      	cmp	r2, r3
 801a270:	d364      	bcc.n	801a33c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801a272:	697b      	ldr	r3, [r7, #20]
 801a274:	1c9a      	adds	r2, r3, #2
 801a276:	617a      	str	r2, [r7, #20]
 801a278:	881b      	ldrh	r3, [r3, #0]
 801a27a:	823b      	strh	r3, [r7, #16]
 801a27c:	8a3b      	ldrh	r3, [r7, #16]
 801a27e:	0a1b      	lsrs	r3, r3, #8
 801a280:	81fb      	strh	r3, [r7, #14]
 801a282:	8a3b      	ldrh	r3, [r7, #16]
 801a284:	b2db      	uxtb	r3, r3
 801a286:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801a288:	88fa      	ldrh	r2, [r7, #6]
 801a28a:	8a79      	ldrh	r1, [r7, #18]
 801a28c:	8a3b      	ldrh	r3, [r7, #16]
 801a28e:	440b      	add	r3, r1
 801a290:	429a      	cmp	r2, r3
 801a292:	da49      	bge.n	801a328 <ff_wtoupper+0xe8>
			switch (cmd) {
 801a294:	89fb      	ldrh	r3, [r7, #14]
 801a296:	2b08      	cmp	r3, #8
 801a298:	d84f      	bhi.n	801a33a <ff_wtoupper+0xfa>
 801a29a:	a201      	add	r2, pc, #4	; (adr r2, 801a2a0 <ff_wtoupper+0x60>)
 801a29c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a2a0:	0801a2c5 	.word	0x0801a2c5
 801a2a4:	0801a2d7 	.word	0x0801a2d7
 801a2a8:	0801a2ed 	.word	0x0801a2ed
 801a2ac:	0801a2f5 	.word	0x0801a2f5
 801a2b0:	0801a2fd 	.word	0x0801a2fd
 801a2b4:	0801a305 	.word	0x0801a305
 801a2b8:	0801a30d 	.word	0x0801a30d
 801a2bc:	0801a315 	.word	0x0801a315
 801a2c0:	0801a31d 	.word	0x0801a31d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801a2c4:	88fa      	ldrh	r2, [r7, #6]
 801a2c6:	8a7b      	ldrh	r3, [r7, #18]
 801a2c8:	1ad3      	subs	r3, r2, r3
 801a2ca:	005b      	lsls	r3, r3, #1
 801a2cc:	697a      	ldr	r2, [r7, #20]
 801a2ce:	4413      	add	r3, r2
 801a2d0:	881b      	ldrh	r3, [r3, #0]
 801a2d2:	80fb      	strh	r3, [r7, #6]
 801a2d4:	e027      	b.n	801a326 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801a2d6:	88fa      	ldrh	r2, [r7, #6]
 801a2d8:	8a7b      	ldrh	r3, [r7, #18]
 801a2da:	1ad3      	subs	r3, r2, r3
 801a2dc:	b29b      	uxth	r3, r3
 801a2de:	f003 0301 	and.w	r3, r3, #1
 801a2e2:	b29b      	uxth	r3, r3
 801a2e4:	88fa      	ldrh	r2, [r7, #6]
 801a2e6:	1ad3      	subs	r3, r2, r3
 801a2e8:	80fb      	strh	r3, [r7, #6]
 801a2ea:	e01c      	b.n	801a326 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801a2ec:	88fb      	ldrh	r3, [r7, #6]
 801a2ee:	3b10      	subs	r3, #16
 801a2f0:	80fb      	strh	r3, [r7, #6]
 801a2f2:	e018      	b.n	801a326 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801a2f4:	88fb      	ldrh	r3, [r7, #6]
 801a2f6:	3b20      	subs	r3, #32
 801a2f8:	80fb      	strh	r3, [r7, #6]
 801a2fa:	e014      	b.n	801a326 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801a2fc:	88fb      	ldrh	r3, [r7, #6]
 801a2fe:	3b30      	subs	r3, #48	; 0x30
 801a300:	80fb      	strh	r3, [r7, #6]
 801a302:	e010      	b.n	801a326 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801a304:	88fb      	ldrh	r3, [r7, #6]
 801a306:	3b1a      	subs	r3, #26
 801a308:	80fb      	strh	r3, [r7, #6]
 801a30a:	e00c      	b.n	801a326 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801a30c:	88fb      	ldrh	r3, [r7, #6]
 801a30e:	3308      	adds	r3, #8
 801a310:	80fb      	strh	r3, [r7, #6]
 801a312:	e008      	b.n	801a326 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801a314:	88fb      	ldrh	r3, [r7, #6]
 801a316:	3b50      	subs	r3, #80	; 0x50
 801a318:	80fb      	strh	r3, [r7, #6]
 801a31a:	e004      	b.n	801a326 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801a31c:	88fb      	ldrh	r3, [r7, #6]
 801a31e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801a322:	80fb      	strh	r3, [r7, #6]
 801a324:	bf00      	nop
			}
			break;
 801a326:	e008      	b.n	801a33a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801a328:	89fb      	ldrh	r3, [r7, #14]
 801a32a:	2b00      	cmp	r3, #0
 801a32c:	d195      	bne.n	801a25a <ff_wtoupper+0x1a>
 801a32e:	8a3b      	ldrh	r3, [r7, #16]
 801a330:	005b      	lsls	r3, r3, #1
 801a332:	697a      	ldr	r2, [r7, #20]
 801a334:	4413      	add	r3, r2
 801a336:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801a338:	e78f      	b.n	801a25a <ff_wtoupper+0x1a>
			break;
 801a33a:	bf00      	nop
	}

	return chr;
 801a33c:	88fb      	ldrh	r3, [r7, #6]
}
 801a33e:	4618      	mov	r0, r3
 801a340:	371c      	adds	r7, #28
 801a342:	46bd      	mov	sp, r7
 801a344:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a348:	4770      	bx	lr
 801a34a:	bf00      	nop
 801a34c:	0801f994 	.word	0x0801f994
 801a350:	0801fb88 	.word	0x0801fb88

0801a354 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801a354:	b580      	push	{r7, lr}
 801a356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 801a358:	2201      	movs	r2, #1
 801a35a:	4913      	ldr	r1, [pc, #76]	; (801a3a8 <MX_USB_DEVICE_Init+0x54>)
 801a35c:	4813      	ldr	r0, [pc, #76]	; (801a3ac <MX_USB_DEVICE_Init+0x58>)
 801a35e:	f7fb fd1b 	bl	8015d98 <USBD_Init>
 801a362:	4603      	mov	r3, r0
 801a364:	2b00      	cmp	r3, #0
 801a366:	d001      	beq.n	801a36c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801a368:	f7e8 fd1a 	bl	8002da0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 801a36c:	4910      	ldr	r1, [pc, #64]	; (801a3b0 <MX_USB_DEVICE_Init+0x5c>)
 801a36e:	480f      	ldr	r0, [pc, #60]	; (801a3ac <MX_USB_DEVICE_Init+0x58>)
 801a370:	f7fb fd42 	bl	8015df8 <USBD_RegisterClass>
 801a374:	4603      	mov	r3, r0
 801a376:	2b00      	cmp	r3, #0
 801a378:	d001      	beq.n	801a37e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801a37a:	f7e8 fd11 	bl	8002da0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 801a37e:	490d      	ldr	r1, [pc, #52]	; (801a3b4 <MX_USB_DEVICE_Init+0x60>)
 801a380:	480a      	ldr	r0, [pc, #40]	; (801a3ac <MX_USB_DEVICE_Init+0x58>)
 801a382:	f7fb fc39 	bl	8015bf8 <USBD_CDC_RegisterInterface>
 801a386:	4603      	mov	r3, r0
 801a388:	2b00      	cmp	r3, #0
 801a38a:	d001      	beq.n	801a390 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801a38c:	f7e8 fd08 	bl	8002da0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 801a390:	4806      	ldr	r0, [pc, #24]	; (801a3ac <MX_USB_DEVICE_Init+0x58>)
 801a392:	f7fb fd67 	bl	8015e64 <USBD_Start>
 801a396:	4603      	mov	r3, r0
 801a398:	2b00      	cmp	r3, #0
 801a39a:	d001      	beq.n	801a3a0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801a39c:	f7e8 fd00 	bl	8002da0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801a3a0:	f7f0 f992 	bl	800a6c8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801a3a4:	bf00      	nop
 801a3a6:	bd80      	pop	{r7, pc}
 801a3a8:	240000b0 	.word	0x240000b0
 801a3ac:	240018e8 	.word	0x240018e8
 801a3b0:	2400001c 	.word	0x2400001c
 801a3b4:	2400009c 	.word	0x2400009c

0801a3b8 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 801a3b8:	b580      	push	{r7, lr}
 801a3ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 801a3bc:	2200      	movs	r2, #0
 801a3be:	4905      	ldr	r1, [pc, #20]	; (801a3d4 <CDC_Init_HS+0x1c>)
 801a3c0:	4805      	ldr	r0, [pc, #20]	; (801a3d8 <CDC_Init_HS+0x20>)
 801a3c2:	f7fb fc33 	bl	8015c2c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 801a3c6:	4905      	ldr	r1, [pc, #20]	; (801a3dc <CDC_Init_HS+0x24>)
 801a3c8:	4803      	ldr	r0, [pc, #12]	; (801a3d8 <CDC_Init_HS+0x20>)
 801a3ca:	f7fb fc51 	bl	8015c70 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801a3ce:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801a3d0:	4618      	mov	r0, r3
 801a3d2:	bd80      	pop	{r7, pc}
 801a3d4:	240023c4 	.word	0x240023c4
 801a3d8:	240018e8 	.word	0x240018e8
 801a3dc:	24001bc4 	.word	0x24001bc4

0801a3e0 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 801a3e0:	b480      	push	{r7}
 801a3e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 801a3e4:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 801a3e6:	4618      	mov	r0, r3
 801a3e8:	46bd      	mov	sp, r7
 801a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3ee:	4770      	bx	lr

0801a3f0 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801a3f0:	b480      	push	{r7}
 801a3f2:	b083      	sub	sp, #12
 801a3f4:	af00      	add	r7, sp, #0
 801a3f6:	4603      	mov	r3, r0
 801a3f8:	6039      	str	r1, [r7, #0]
 801a3fa:	71fb      	strb	r3, [r7, #7]
 801a3fc:	4613      	mov	r3, r2
 801a3fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 801a400:	79fb      	ldrb	r3, [r7, #7]
 801a402:	2b23      	cmp	r3, #35	; 0x23
 801a404:	d84a      	bhi.n	801a49c <CDC_Control_HS+0xac>
 801a406:	a201      	add	r2, pc, #4	; (adr r2, 801a40c <CDC_Control_HS+0x1c>)
 801a408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a40c:	0801a49d 	.word	0x0801a49d
 801a410:	0801a49d 	.word	0x0801a49d
 801a414:	0801a49d 	.word	0x0801a49d
 801a418:	0801a49d 	.word	0x0801a49d
 801a41c:	0801a49d 	.word	0x0801a49d
 801a420:	0801a49d 	.word	0x0801a49d
 801a424:	0801a49d 	.word	0x0801a49d
 801a428:	0801a49d 	.word	0x0801a49d
 801a42c:	0801a49d 	.word	0x0801a49d
 801a430:	0801a49d 	.word	0x0801a49d
 801a434:	0801a49d 	.word	0x0801a49d
 801a438:	0801a49d 	.word	0x0801a49d
 801a43c:	0801a49d 	.word	0x0801a49d
 801a440:	0801a49d 	.word	0x0801a49d
 801a444:	0801a49d 	.word	0x0801a49d
 801a448:	0801a49d 	.word	0x0801a49d
 801a44c:	0801a49d 	.word	0x0801a49d
 801a450:	0801a49d 	.word	0x0801a49d
 801a454:	0801a49d 	.word	0x0801a49d
 801a458:	0801a49d 	.word	0x0801a49d
 801a45c:	0801a49d 	.word	0x0801a49d
 801a460:	0801a49d 	.word	0x0801a49d
 801a464:	0801a49d 	.word	0x0801a49d
 801a468:	0801a49d 	.word	0x0801a49d
 801a46c:	0801a49d 	.word	0x0801a49d
 801a470:	0801a49d 	.word	0x0801a49d
 801a474:	0801a49d 	.word	0x0801a49d
 801a478:	0801a49d 	.word	0x0801a49d
 801a47c:	0801a49d 	.word	0x0801a49d
 801a480:	0801a49d 	.word	0x0801a49d
 801a484:	0801a49d 	.word	0x0801a49d
 801a488:	0801a49d 	.word	0x0801a49d
 801a48c:	0801a49d 	.word	0x0801a49d
 801a490:	0801a49d 	.word	0x0801a49d
 801a494:	0801a49d 	.word	0x0801a49d
 801a498:	0801a49d 	.word	0x0801a49d
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 801a49c:	bf00      	nop
  }

  return (USBD_OK);
 801a49e:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 801a4a0:	4618      	mov	r0, r3
 801a4a2:	370c      	adds	r7, #12
 801a4a4:	46bd      	mov	sp, r7
 801a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4aa:	4770      	bx	lr

0801a4ac <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 801a4ac:	b580      	push	{r7, lr}
 801a4ae:	b082      	sub	sp, #8
 801a4b0:	af00      	add	r7, sp, #0
 801a4b2:	6078      	str	r0, [r7, #4]
 801a4b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 801a4b6:	6879      	ldr	r1, [r7, #4]
 801a4b8:	4805      	ldr	r0, [pc, #20]	; (801a4d0 <CDC_Receive_HS+0x24>)
 801a4ba:	f7fb fbd9 	bl	8015c70 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 801a4be:	4804      	ldr	r0, [pc, #16]	; (801a4d0 <CDC_Receive_HS+0x24>)
 801a4c0:	f7fb fc34 	bl	8015d2c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801a4c4:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 801a4c6:	4618      	mov	r0, r3
 801a4c8:	3708      	adds	r7, #8
 801a4ca:	46bd      	mov	sp, r7
 801a4cc:	bd80      	pop	{r7, pc}
 801a4ce:	bf00      	nop
 801a4d0:	240018e8 	.word	0x240018e8

0801a4d4 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 801a4d4:	b580      	push	{r7, lr}
 801a4d6:	b084      	sub	sp, #16
 801a4d8:	af00      	add	r7, sp, #0
 801a4da:	6078      	str	r0, [r7, #4]
 801a4dc:	460b      	mov	r3, r1
 801a4de:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801a4e0:	2300      	movs	r3, #0
 801a4e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 801a4e4:	4b0d      	ldr	r3, [pc, #52]	; (801a51c <CDC_Transmit_HS+0x48>)
 801a4e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801a4ea:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801a4ec:	68bb      	ldr	r3, [r7, #8]
 801a4ee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801a4f2:	2b00      	cmp	r3, #0
 801a4f4:	d001      	beq.n	801a4fa <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 801a4f6:	2301      	movs	r3, #1
 801a4f8:	e00b      	b.n	801a512 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 801a4fa:	887b      	ldrh	r3, [r7, #2]
 801a4fc:	461a      	mov	r2, r3
 801a4fe:	6879      	ldr	r1, [r7, #4]
 801a500:	4806      	ldr	r0, [pc, #24]	; (801a51c <CDC_Transmit_HS+0x48>)
 801a502:	f7fb fb93 	bl	8015c2c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 801a506:	4805      	ldr	r0, [pc, #20]	; (801a51c <CDC_Transmit_HS+0x48>)
 801a508:	f7fb fbd0 	bl	8015cac <USBD_CDC_TransmitPacket>
 801a50c:	4603      	mov	r3, r0
 801a50e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 801a510:	7bfb      	ldrb	r3, [r7, #15]
}
 801a512:	4618      	mov	r0, r3
 801a514:	3710      	adds	r7, #16
 801a516:	46bd      	mov	sp, r7
 801a518:	bd80      	pop	{r7, pc}
 801a51a:	bf00      	nop
 801a51c:	240018e8 	.word	0x240018e8

0801a520 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801a520:	b480      	push	{r7}
 801a522:	b087      	sub	sp, #28
 801a524:	af00      	add	r7, sp, #0
 801a526:	60f8      	str	r0, [r7, #12]
 801a528:	60b9      	str	r1, [r7, #8]
 801a52a:	4613      	mov	r3, r2
 801a52c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801a52e:	2300      	movs	r3, #0
 801a530:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 801a532:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a536:	4618      	mov	r0, r3
 801a538:	371c      	adds	r7, #28
 801a53a:	46bd      	mov	sp, r7
 801a53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a540:	4770      	bx	lr
	...

0801a544 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a544:	b480      	push	{r7}
 801a546:	b083      	sub	sp, #12
 801a548:	af00      	add	r7, sp, #0
 801a54a:	4603      	mov	r3, r0
 801a54c:	6039      	str	r1, [r7, #0]
 801a54e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 801a550:	683b      	ldr	r3, [r7, #0]
 801a552:	2212      	movs	r2, #18
 801a554:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 801a556:	4b03      	ldr	r3, [pc, #12]	; (801a564 <USBD_HS_DeviceDescriptor+0x20>)
}
 801a558:	4618      	mov	r0, r3
 801a55a:	370c      	adds	r7, #12
 801a55c:	46bd      	mov	sp, r7
 801a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a562:	4770      	bx	lr
 801a564:	240000cc 	.word	0x240000cc

0801a568 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a568:	b480      	push	{r7}
 801a56a:	b083      	sub	sp, #12
 801a56c:	af00      	add	r7, sp, #0
 801a56e:	4603      	mov	r3, r0
 801a570:	6039      	str	r1, [r7, #0]
 801a572:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801a574:	683b      	ldr	r3, [r7, #0]
 801a576:	2204      	movs	r2, #4
 801a578:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801a57a:	4b03      	ldr	r3, [pc, #12]	; (801a588 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 801a57c:	4618      	mov	r0, r3
 801a57e:	370c      	adds	r7, #12
 801a580:	46bd      	mov	sp, r7
 801a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a586:	4770      	bx	lr
 801a588:	240000e0 	.word	0x240000e0

0801a58c <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a58c:	b580      	push	{r7, lr}
 801a58e:	b082      	sub	sp, #8
 801a590:	af00      	add	r7, sp, #0
 801a592:	4603      	mov	r3, r0
 801a594:	6039      	str	r1, [r7, #0]
 801a596:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a598:	79fb      	ldrb	r3, [r7, #7]
 801a59a:	2b00      	cmp	r3, #0
 801a59c:	d105      	bne.n	801a5aa <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801a59e:	683a      	ldr	r2, [r7, #0]
 801a5a0:	4907      	ldr	r1, [pc, #28]	; (801a5c0 <USBD_HS_ProductStrDescriptor+0x34>)
 801a5a2:	4808      	ldr	r0, [pc, #32]	; (801a5c4 <USBD_HS_ProductStrDescriptor+0x38>)
 801a5a4:	f7fc fe10 	bl	80171c8 <USBD_GetString>
 801a5a8:	e004      	b.n	801a5b4 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801a5aa:	683a      	ldr	r2, [r7, #0]
 801a5ac:	4904      	ldr	r1, [pc, #16]	; (801a5c0 <USBD_HS_ProductStrDescriptor+0x34>)
 801a5ae:	4805      	ldr	r0, [pc, #20]	; (801a5c4 <USBD_HS_ProductStrDescriptor+0x38>)
 801a5b0:	f7fc fe0a 	bl	80171c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a5b4:	4b02      	ldr	r3, [pc, #8]	; (801a5c0 <USBD_HS_ProductStrDescriptor+0x34>)
}
 801a5b6:	4618      	mov	r0, r3
 801a5b8:	3708      	adds	r7, #8
 801a5ba:	46bd      	mov	sp, r7
 801a5bc:	bd80      	pop	{r7, pc}
 801a5be:	bf00      	nop
 801a5c0:	24002bc4 	.word	0x24002bc4
 801a5c4:	0801f704 	.word	0x0801f704

0801a5c8 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a5c8:	b580      	push	{r7, lr}
 801a5ca:	b082      	sub	sp, #8
 801a5cc:	af00      	add	r7, sp, #0
 801a5ce:	4603      	mov	r3, r0
 801a5d0:	6039      	str	r1, [r7, #0]
 801a5d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801a5d4:	683a      	ldr	r2, [r7, #0]
 801a5d6:	4904      	ldr	r1, [pc, #16]	; (801a5e8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 801a5d8:	4804      	ldr	r0, [pc, #16]	; (801a5ec <USBD_HS_ManufacturerStrDescriptor+0x24>)
 801a5da:	f7fc fdf5 	bl	80171c8 <USBD_GetString>
  return USBD_StrDesc;
 801a5de:	4b02      	ldr	r3, [pc, #8]	; (801a5e8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 801a5e0:	4618      	mov	r0, r3
 801a5e2:	3708      	adds	r7, #8
 801a5e4:	46bd      	mov	sp, r7
 801a5e6:	bd80      	pop	{r7, pc}
 801a5e8:	24002bc4 	.word	0x24002bc4
 801a5ec:	0801f720 	.word	0x0801f720

0801a5f0 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a5f0:	b580      	push	{r7, lr}
 801a5f2:	b082      	sub	sp, #8
 801a5f4:	af00      	add	r7, sp, #0
 801a5f6:	4603      	mov	r3, r0
 801a5f8:	6039      	str	r1, [r7, #0]
 801a5fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801a5fc:	683b      	ldr	r3, [r7, #0]
 801a5fe:	221a      	movs	r2, #26
 801a600:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801a602:	f000 f843 	bl	801a68c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801a606:	4b02      	ldr	r3, [pc, #8]	; (801a610 <USBD_HS_SerialStrDescriptor+0x20>)
}
 801a608:	4618      	mov	r0, r3
 801a60a:	3708      	adds	r7, #8
 801a60c:	46bd      	mov	sp, r7
 801a60e:	bd80      	pop	{r7, pc}
 801a610:	240000e4 	.word	0x240000e4

0801a614 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a614:	b580      	push	{r7, lr}
 801a616:	b082      	sub	sp, #8
 801a618:	af00      	add	r7, sp, #0
 801a61a:	4603      	mov	r3, r0
 801a61c:	6039      	str	r1, [r7, #0]
 801a61e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801a620:	79fb      	ldrb	r3, [r7, #7]
 801a622:	2b00      	cmp	r3, #0
 801a624:	d105      	bne.n	801a632 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801a626:	683a      	ldr	r2, [r7, #0]
 801a628:	4907      	ldr	r1, [pc, #28]	; (801a648 <USBD_HS_ConfigStrDescriptor+0x34>)
 801a62a:	4808      	ldr	r0, [pc, #32]	; (801a64c <USBD_HS_ConfigStrDescriptor+0x38>)
 801a62c:	f7fc fdcc 	bl	80171c8 <USBD_GetString>
 801a630:	e004      	b.n	801a63c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801a632:	683a      	ldr	r2, [r7, #0]
 801a634:	4904      	ldr	r1, [pc, #16]	; (801a648 <USBD_HS_ConfigStrDescriptor+0x34>)
 801a636:	4805      	ldr	r0, [pc, #20]	; (801a64c <USBD_HS_ConfigStrDescriptor+0x38>)
 801a638:	f7fc fdc6 	bl	80171c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a63c:	4b02      	ldr	r3, [pc, #8]	; (801a648 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801a63e:	4618      	mov	r0, r3
 801a640:	3708      	adds	r7, #8
 801a642:	46bd      	mov	sp, r7
 801a644:	bd80      	pop	{r7, pc}
 801a646:	bf00      	nop
 801a648:	24002bc4 	.word	0x24002bc4
 801a64c:	0801f724 	.word	0x0801f724

0801a650 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a650:	b580      	push	{r7, lr}
 801a652:	b082      	sub	sp, #8
 801a654:	af00      	add	r7, sp, #0
 801a656:	4603      	mov	r3, r0
 801a658:	6039      	str	r1, [r7, #0]
 801a65a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a65c:	79fb      	ldrb	r3, [r7, #7]
 801a65e:	2b00      	cmp	r3, #0
 801a660:	d105      	bne.n	801a66e <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801a662:	683a      	ldr	r2, [r7, #0]
 801a664:	4907      	ldr	r1, [pc, #28]	; (801a684 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801a666:	4808      	ldr	r0, [pc, #32]	; (801a688 <USBD_HS_InterfaceStrDescriptor+0x38>)
 801a668:	f7fc fdae 	bl	80171c8 <USBD_GetString>
 801a66c:	e004      	b.n	801a678 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801a66e:	683a      	ldr	r2, [r7, #0]
 801a670:	4904      	ldr	r1, [pc, #16]	; (801a684 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801a672:	4805      	ldr	r0, [pc, #20]	; (801a688 <USBD_HS_InterfaceStrDescriptor+0x38>)
 801a674:	f7fc fda8 	bl	80171c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a678:	4b02      	ldr	r3, [pc, #8]	; (801a684 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 801a67a:	4618      	mov	r0, r3
 801a67c:	3708      	adds	r7, #8
 801a67e:	46bd      	mov	sp, r7
 801a680:	bd80      	pop	{r7, pc}
 801a682:	bf00      	nop
 801a684:	24002bc4 	.word	0x24002bc4
 801a688:	0801f730 	.word	0x0801f730

0801a68c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801a68c:	b580      	push	{r7, lr}
 801a68e:	b084      	sub	sp, #16
 801a690:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801a692:	4b0f      	ldr	r3, [pc, #60]	; (801a6d0 <Get_SerialNum+0x44>)
 801a694:	681b      	ldr	r3, [r3, #0]
 801a696:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801a698:	4b0e      	ldr	r3, [pc, #56]	; (801a6d4 <Get_SerialNum+0x48>)
 801a69a:	681b      	ldr	r3, [r3, #0]
 801a69c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801a69e:	4b0e      	ldr	r3, [pc, #56]	; (801a6d8 <Get_SerialNum+0x4c>)
 801a6a0:	681b      	ldr	r3, [r3, #0]
 801a6a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801a6a4:	68fa      	ldr	r2, [r7, #12]
 801a6a6:	687b      	ldr	r3, [r7, #4]
 801a6a8:	4413      	add	r3, r2
 801a6aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801a6ac:	68fb      	ldr	r3, [r7, #12]
 801a6ae:	2b00      	cmp	r3, #0
 801a6b0:	d009      	beq.n	801a6c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801a6b2:	2208      	movs	r2, #8
 801a6b4:	4909      	ldr	r1, [pc, #36]	; (801a6dc <Get_SerialNum+0x50>)
 801a6b6:	68f8      	ldr	r0, [r7, #12]
 801a6b8:	f000 f814 	bl	801a6e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801a6bc:	2204      	movs	r2, #4
 801a6be:	4908      	ldr	r1, [pc, #32]	; (801a6e0 <Get_SerialNum+0x54>)
 801a6c0:	68b8      	ldr	r0, [r7, #8]
 801a6c2:	f000 f80f 	bl	801a6e4 <IntToUnicode>
  }
}
 801a6c6:	bf00      	nop
 801a6c8:	3710      	adds	r7, #16
 801a6ca:	46bd      	mov	sp, r7
 801a6cc:	bd80      	pop	{r7, pc}
 801a6ce:	bf00      	nop
 801a6d0:	1ff1e800 	.word	0x1ff1e800
 801a6d4:	1ff1e804 	.word	0x1ff1e804
 801a6d8:	1ff1e808 	.word	0x1ff1e808
 801a6dc:	240000e6 	.word	0x240000e6
 801a6e0:	240000f6 	.word	0x240000f6

0801a6e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801a6e4:	b480      	push	{r7}
 801a6e6:	b087      	sub	sp, #28
 801a6e8:	af00      	add	r7, sp, #0
 801a6ea:	60f8      	str	r0, [r7, #12]
 801a6ec:	60b9      	str	r1, [r7, #8]
 801a6ee:	4613      	mov	r3, r2
 801a6f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801a6f2:	2300      	movs	r3, #0
 801a6f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801a6f6:	2300      	movs	r3, #0
 801a6f8:	75fb      	strb	r3, [r7, #23]
 801a6fa:	e027      	b.n	801a74c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801a6fc:	68fb      	ldr	r3, [r7, #12]
 801a6fe:	0f1b      	lsrs	r3, r3, #28
 801a700:	2b09      	cmp	r3, #9
 801a702:	d80b      	bhi.n	801a71c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801a704:	68fb      	ldr	r3, [r7, #12]
 801a706:	0f1b      	lsrs	r3, r3, #28
 801a708:	b2da      	uxtb	r2, r3
 801a70a:	7dfb      	ldrb	r3, [r7, #23]
 801a70c:	005b      	lsls	r3, r3, #1
 801a70e:	4619      	mov	r1, r3
 801a710:	68bb      	ldr	r3, [r7, #8]
 801a712:	440b      	add	r3, r1
 801a714:	3230      	adds	r2, #48	; 0x30
 801a716:	b2d2      	uxtb	r2, r2
 801a718:	701a      	strb	r2, [r3, #0]
 801a71a:	e00a      	b.n	801a732 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801a71c:	68fb      	ldr	r3, [r7, #12]
 801a71e:	0f1b      	lsrs	r3, r3, #28
 801a720:	b2da      	uxtb	r2, r3
 801a722:	7dfb      	ldrb	r3, [r7, #23]
 801a724:	005b      	lsls	r3, r3, #1
 801a726:	4619      	mov	r1, r3
 801a728:	68bb      	ldr	r3, [r7, #8]
 801a72a:	440b      	add	r3, r1
 801a72c:	3237      	adds	r2, #55	; 0x37
 801a72e:	b2d2      	uxtb	r2, r2
 801a730:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801a732:	68fb      	ldr	r3, [r7, #12]
 801a734:	011b      	lsls	r3, r3, #4
 801a736:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801a738:	7dfb      	ldrb	r3, [r7, #23]
 801a73a:	005b      	lsls	r3, r3, #1
 801a73c:	3301      	adds	r3, #1
 801a73e:	68ba      	ldr	r2, [r7, #8]
 801a740:	4413      	add	r3, r2
 801a742:	2200      	movs	r2, #0
 801a744:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801a746:	7dfb      	ldrb	r3, [r7, #23]
 801a748:	3301      	adds	r3, #1
 801a74a:	75fb      	strb	r3, [r7, #23]
 801a74c:	7dfa      	ldrb	r2, [r7, #23]
 801a74e:	79fb      	ldrb	r3, [r7, #7]
 801a750:	429a      	cmp	r2, r3
 801a752:	d3d3      	bcc.n	801a6fc <IntToUnicode+0x18>
  }
}
 801a754:	bf00      	nop
 801a756:	bf00      	nop
 801a758:	371c      	adds	r7, #28
 801a75a:	46bd      	mov	sp, r7
 801a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a760:	4770      	bx	lr
	...

0801a764 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801a764:	b580      	push	{r7, lr}
 801a766:	b0b2      	sub	sp, #200	; 0xc8
 801a768:	af00      	add	r7, sp, #0
 801a76a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801a76c:	f107 0310 	add.w	r3, r7, #16
 801a770:	22b8      	movs	r2, #184	; 0xb8
 801a772:	2100      	movs	r1, #0
 801a774:	4618      	mov	r0, r3
 801a776:	f000 fb39 	bl	801adec <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 801a77a:	687b      	ldr	r3, [r7, #4]
 801a77c:	681b      	ldr	r3, [r3, #0]
 801a77e:	4a1a      	ldr	r2, [pc, #104]	; (801a7e8 <HAL_PCD_MspInit+0x84>)
 801a780:	4293      	cmp	r3, r2
 801a782:	d12c      	bne.n	801a7de <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801a784:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 801a788:	f04f 0300 	mov.w	r3, #0
 801a78c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801a790:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 801a794:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801a798:	f107 0310 	add.w	r3, r7, #16
 801a79c:	4618      	mov	r0, r3
 801a79e:	f7f0 ff73 	bl	800b688 <HAL_RCCEx_PeriphCLKConfig>
 801a7a2:	4603      	mov	r3, r0
 801a7a4:	2b00      	cmp	r3, #0
 801a7a6:	d001      	beq.n	801a7ac <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 801a7a8:	f7e8 fafa 	bl	8002da0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801a7ac:	f7ef ff8c 	bl	800a6c8 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 801a7b0:	4b0e      	ldr	r3, [pc, #56]	; (801a7ec <HAL_PCD_MspInit+0x88>)
 801a7b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801a7b6:	4a0d      	ldr	r2, [pc, #52]	; (801a7ec <HAL_PCD_MspInit+0x88>)
 801a7b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801a7bc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801a7c0:	4b0a      	ldr	r3, [pc, #40]	; (801a7ec <HAL_PCD_MspInit+0x88>)
 801a7c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801a7c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a7ca:	60fb      	str	r3, [r7, #12]
 801a7cc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 801a7ce:	2200      	movs	r2, #0
 801a7d0:	2100      	movs	r1, #0
 801a7d2:	204d      	movs	r0, #77	; 0x4d
 801a7d4:	f7eb fcfb 	bl	80061ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 801a7d8:	204d      	movs	r0, #77	; 0x4d
 801a7da:	f7eb fd12 	bl	8006202 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801a7de:	bf00      	nop
 801a7e0:	37c8      	adds	r7, #200	; 0xc8
 801a7e2:	46bd      	mov	sp, r7
 801a7e4:	bd80      	pop	{r7, pc}
 801a7e6:	bf00      	nop
 801a7e8:	40040000 	.word	0x40040000
 801a7ec:	58024400 	.word	0x58024400

0801a7f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a7f0:	b580      	push	{r7, lr}
 801a7f2:	b082      	sub	sp, #8
 801a7f4:	af00      	add	r7, sp, #0
 801a7f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801a7f8:	687b      	ldr	r3, [r7, #4]
 801a7fa:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801a7fe:	687b      	ldr	r3, [r7, #4]
 801a800:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 801a804:	4619      	mov	r1, r3
 801a806:	4610      	mov	r0, r2
 801a808:	f7fb fb79 	bl	8015efe <USBD_LL_SetupStage>
}
 801a80c:	bf00      	nop
 801a80e:	3708      	adds	r7, #8
 801a810:	46bd      	mov	sp, r7
 801a812:	bd80      	pop	{r7, pc}

0801a814 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a814:	b580      	push	{r7, lr}
 801a816:	b082      	sub	sp, #8
 801a818:	af00      	add	r7, sp, #0
 801a81a:	6078      	str	r0, [r7, #4]
 801a81c:	460b      	mov	r3, r1
 801a81e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801a820:	687b      	ldr	r3, [r7, #4]
 801a822:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801a826:	78fa      	ldrb	r2, [r7, #3]
 801a828:	6879      	ldr	r1, [r7, #4]
 801a82a:	4613      	mov	r3, r2
 801a82c:	00db      	lsls	r3, r3, #3
 801a82e:	4413      	add	r3, r2
 801a830:	009b      	lsls	r3, r3, #2
 801a832:	440b      	add	r3, r1
 801a834:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801a838:	681a      	ldr	r2, [r3, #0]
 801a83a:	78fb      	ldrb	r3, [r7, #3]
 801a83c:	4619      	mov	r1, r3
 801a83e:	f7fb fbb3 	bl	8015fa8 <USBD_LL_DataOutStage>
}
 801a842:	bf00      	nop
 801a844:	3708      	adds	r7, #8
 801a846:	46bd      	mov	sp, r7
 801a848:	bd80      	pop	{r7, pc}

0801a84a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a84a:	b580      	push	{r7, lr}
 801a84c:	b082      	sub	sp, #8
 801a84e:	af00      	add	r7, sp, #0
 801a850:	6078      	str	r0, [r7, #4]
 801a852:	460b      	mov	r3, r1
 801a854:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801a856:	687b      	ldr	r3, [r7, #4]
 801a858:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801a85c:	78fa      	ldrb	r2, [r7, #3]
 801a85e:	6879      	ldr	r1, [r7, #4]
 801a860:	4613      	mov	r3, r2
 801a862:	00db      	lsls	r3, r3, #3
 801a864:	4413      	add	r3, r2
 801a866:	009b      	lsls	r3, r3, #2
 801a868:	440b      	add	r3, r1
 801a86a:	3348      	adds	r3, #72	; 0x48
 801a86c:	681a      	ldr	r2, [r3, #0]
 801a86e:	78fb      	ldrb	r3, [r7, #3]
 801a870:	4619      	mov	r1, r3
 801a872:	f7fb fc4c 	bl	801610e <USBD_LL_DataInStage>
}
 801a876:	bf00      	nop
 801a878:	3708      	adds	r7, #8
 801a87a:	46bd      	mov	sp, r7
 801a87c:	bd80      	pop	{r7, pc}

0801a87e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a87e:	b580      	push	{r7, lr}
 801a880:	b082      	sub	sp, #8
 801a882:	af00      	add	r7, sp, #0
 801a884:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801a886:	687b      	ldr	r3, [r7, #4]
 801a888:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a88c:	4618      	mov	r0, r3
 801a88e:	f7fb fd86 	bl	801639e <USBD_LL_SOF>
}
 801a892:	bf00      	nop
 801a894:	3708      	adds	r7, #8
 801a896:	46bd      	mov	sp, r7
 801a898:	bd80      	pop	{r7, pc}

0801a89a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a89a:	b580      	push	{r7, lr}
 801a89c:	b084      	sub	sp, #16
 801a89e:	af00      	add	r7, sp, #0
 801a8a0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801a8a2:	2301      	movs	r3, #1
 801a8a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801a8a6:	687b      	ldr	r3, [r7, #4]
 801a8a8:	691b      	ldr	r3, [r3, #16]
 801a8aa:	2b00      	cmp	r3, #0
 801a8ac:	d102      	bne.n	801a8b4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801a8ae:	2300      	movs	r3, #0
 801a8b0:	73fb      	strb	r3, [r7, #15]
 801a8b2:	e008      	b.n	801a8c6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801a8b4:	687b      	ldr	r3, [r7, #4]
 801a8b6:	691b      	ldr	r3, [r3, #16]
 801a8b8:	2b02      	cmp	r3, #2
 801a8ba:	d102      	bne.n	801a8c2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801a8bc:	2301      	movs	r3, #1
 801a8be:	73fb      	strb	r3, [r7, #15]
 801a8c0:	e001      	b.n	801a8c6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801a8c2:	f7e8 fa6d 	bl	8002da0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801a8c6:	687b      	ldr	r3, [r7, #4]
 801a8c8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a8cc:	7bfa      	ldrb	r2, [r7, #15]
 801a8ce:	4611      	mov	r1, r2
 801a8d0:	4618      	mov	r0, r3
 801a8d2:	f7fb fd20 	bl	8016316 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801a8d6:	687b      	ldr	r3, [r7, #4]
 801a8d8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a8dc:	4618      	mov	r0, r3
 801a8de:	f7fb fcc8 	bl	8016272 <USBD_LL_Reset>
}
 801a8e2:	bf00      	nop
 801a8e4:	3710      	adds	r7, #16
 801a8e6:	46bd      	mov	sp, r7
 801a8e8:	bd80      	pop	{r7, pc}
	...

0801a8ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a8ec:	b580      	push	{r7, lr}
 801a8ee:	b082      	sub	sp, #8
 801a8f0:	af00      	add	r7, sp, #0
 801a8f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801a8f4:	687b      	ldr	r3, [r7, #4]
 801a8f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a8fa:	4618      	mov	r0, r3
 801a8fc:	f7fb fd1b 	bl	8016336 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801a900:	687b      	ldr	r3, [r7, #4]
 801a902:	681b      	ldr	r3, [r3, #0]
 801a904:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801a908:	681b      	ldr	r3, [r3, #0]
 801a90a:	687a      	ldr	r2, [r7, #4]
 801a90c:	6812      	ldr	r2, [r2, #0]
 801a90e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801a912:	f043 0301 	orr.w	r3, r3, #1
 801a916:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801a918:	687b      	ldr	r3, [r7, #4]
 801a91a:	6a1b      	ldr	r3, [r3, #32]
 801a91c:	2b00      	cmp	r3, #0
 801a91e:	d005      	beq.n	801a92c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a920:	4b04      	ldr	r3, [pc, #16]	; (801a934 <HAL_PCD_SuspendCallback+0x48>)
 801a922:	691b      	ldr	r3, [r3, #16]
 801a924:	4a03      	ldr	r2, [pc, #12]	; (801a934 <HAL_PCD_SuspendCallback+0x48>)
 801a926:	f043 0306 	orr.w	r3, r3, #6
 801a92a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801a92c:	bf00      	nop
 801a92e:	3708      	adds	r7, #8
 801a930:	46bd      	mov	sp, r7
 801a932:	bd80      	pop	{r7, pc}
 801a934:	e000ed00 	.word	0xe000ed00

0801a938 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a938:	b580      	push	{r7, lr}
 801a93a:	b082      	sub	sp, #8
 801a93c:	af00      	add	r7, sp, #0
 801a93e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801a940:	687b      	ldr	r3, [r7, #4]
 801a942:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a946:	4618      	mov	r0, r3
 801a948:	f7fb fd11 	bl	801636e <USBD_LL_Resume>
}
 801a94c:	bf00      	nop
 801a94e:	3708      	adds	r7, #8
 801a950:	46bd      	mov	sp, r7
 801a952:	bd80      	pop	{r7, pc}

0801a954 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a954:	b580      	push	{r7, lr}
 801a956:	b082      	sub	sp, #8
 801a958:	af00      	add	r7, sp, #0
 801a95a:	6078      	str	r0, [r7, #4]
 801a95c:	460b      	mov	r3, r1
 801a95e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801a960:	687b      	ldr	r3, [r7, #4]
 801a962:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a966:	78fa      	ldrb	r2, [r7, #3]
 801a968:	4611      	mov	r1, r2
 801a96a:	4618      	mov	r0, r3
 801a96c:	f7fb fd69 	bl	8016442 <USBD_LL_IsoOUTIncomplete>
}
 801a970:	bf00      	nop
 801a972:	3708      	adds	r7, #8
 801a974:	46bd      	mov	sp, r7
 801a976:	bd80      	pop	{r7, pc}

0801a978 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a978:	b580      	push	{r7, lr}
 801a97a:	b082      	sub	sp, #8
 801a97c:	af00      	add	r7, sp, #0
 801a97e:	6078      	str	r0, [r7, #4]
 801a980:	460b      	mov	r3, r1
 801a982:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801a984:	687b      	ldr	r3, [r7, #4]
 801a986:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a98a:	78fa      	ldrb	r2, [r7, #3]
 801a98c:	4611      	mov	r1, r2
 801a98e:	4618      	mov	r0, r3
 801a990:	f7fb fd25 	bl	80163de <USBD_LL_IsoINIncomplete>
}
 801a994:	bf00      	nop
 801a996:	3708      	adds	r7, #8
 801a998:	46bd      	mov	sp, r7
 801a99a:	bd80      	pop	{r7, pc}

0801a99c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a99c:	b580      	push	{r7, lr}
 801a99e:	b082      	sub	sp, #8
 801a9a0:	af00      	add	r7, sp, #0
 801a9a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801a9a4:	687b      	ldr	r3, [r7, #4]
 801a9a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a9aa:	4618      	mov	r0, r3
 801a9ac:	f7fb fd7b 	bl	80164a6 <USBD_LL_DevConnected>
}
 801a9b0:	bf00      	nop
 801a9b2:	3708      	adds	r7, #8
 801a9b4:	46bd      	mov	sp, r7
 801a9b6:	bd80      	pop	{r7, pc}

0801a9b8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a9b8:	b580      	push	{r7, lr}
 801a9ba:	b082      	sub	sp, #8
 801a9bc:	af00      	add	r7, sp, #0
 801a9be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801a9c6:	4618      	mov	r0, r3
 801a9c8:	f7fb fd78 	bl	80164bc <USBD_LL_DevDisconnected>
}
 801a9cc:	bf00      	nop
 801a9ce:	3708      	adds	r7, #8
 801a9d0:	46bd      	mov	sp, r7
 801a9d2:	bd80      	pop	{r7, pc}

0801a9d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801a9d4:	b580      	push	{r7, lr}
 801a9d6:	b082      	sub	sp, #8
 801a9d8:	af00      	add	r7, sp, #0
 801a9da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 801a9dc:	687b      	ldr	r3, [r7, #4]
 801a9de:	781b      	ldrb	r3, [r3, #0]
 801a9e0:	2b01      	cmp	r3, #1
 801a9e2:	d140      	bne.n	801aa66 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 801a9e4:	4a22      	ldr	r2, [pc, #136]	; (801aa70 <USBD_LL_Init+0x9c>)
 801a9e6:	687b      	ldr	r3, [r7, #4]
 801a9e8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 801a9ec:	687b      	ldr	r3, [r7, #4]
 801a9ee:	4a20      	ldr	r2, [pc, #128]	; (801aa70 <USBD_LL_Init+0x9c>)
 801a9f0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 801a9f4:	4b1e      	ldr	r3, [pc, #120]	; (801aa70 <USBD_LL_Init+0x9c>)
 801a9f6:	4a1f      	ldr	r2, [pc, #124]	; (801aa74 <USBD_LL_Init+0xa0>)
 801a9f8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 801a9fa:	4b1d      	ldr	r3, [pc, #116]	; (801aa70 <USBD_LL_Init+0x9c>)
 801a9fc:	2209      	movs	r2, #9
 801a9fe:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 801aa00:	4b1b      	ldr	r3, [pc, #108]	; (801aa70 <USBD_LL_Init+0x9c>)
 801aa02:	2202      	movs	r2, #2
 801aa04:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801aa06:	4b1a      	ldr	r3, [pc, #104]	; (801aa70 <USBD_LL_Init+0x9c>)
 801aa08:	2200      	movs	r2, #0
 801aa0a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 801aa0c:	4b18      	ldr	r3, [pc, #96]	; (801aa70 <USBD_LL_Init+0x9c>)
 801aa0e:	2202      	movs	r2, #2
 801aa10:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 801aa12:	4b17      	ldr	r3, [pc, #92]	; (801aa70 <USBD_LL_Init+0x9c>)
 801aa14:	2200      	movs	r2, #0
 801aa16:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 801aa18:	4b15      	ldr	r3, [pc, #84]	; (801aa70 <USBD_LL_Init+0x9c>)
 801aa1a:	2200      	movs	r2, #0
 801aa1c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 801aa1e:	4b14      	ldr	r3, [pc, #80]	; (801aa70 <USBD_LL_Init+0x9c>)
 801aa20:	2200      	movs	r2, #0
 801aa22:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 801aa24:	4b12      	ldr	r3, [pc, #72]	; (801aa70 <USBD_LL_Init+0x9c>)
 801aa26:	2200      	movs	r2, #0
 801aa28:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 801aa2a:	4b11      	ldr	r3, [pc, #68]	; (801aa70 <USBD_LL_Init+0x9c>)
 801aa2c:	2200      	movs	r2, #0
 801aa2e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 801aa30:	4b0f      	ldr	r3, [pc, #60]	; (801aa70 <USBD_LL_Init+0x9c>)
 801aa32:	2200      	movs	r2, #0
 801aa34:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 801aa36:	480e      	ldr	r0, [pc, #56]	; (801aa70 <USBD_LL_Init+0x9c>)
 801aa38:	f7ee fb53 	bl	80090e2 <HAL_PCD_Init>
 801aa3c:	4603      	mov	r3, r0
 801aa3e:	2b00      	cmp	r3, #0
 801aa40:	d001      	beq.n	801aa46 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801aa42:	f7e8 f9ad 	bl	8002da0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 801aa46:	f44f 7100 	mov.w	r1, #512	; 0x200
 801aa4a:	4809      	ldr	r0, [pc, #36]	; (801aa70 <USBD_LL_Init+0x9c>)
 801aa4c:	f7ef fdc1 	bl	800a5d2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 801aa50:	2280      	movs	r2, #128	; 0x80
 801aa52:	2100      	movs	r1, #0
 801aa54:	4806      	ldr	r0, [pc, #24]	; (801aa70 <USBD_LL_Init+0x9c>)
 801aa56:	f7ef fd75 	bl	800a544 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 801aa5a:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801aa5e:	2101      	movs	r1, #1
 801aa60:	4803      	ldr	r0, [pc, #12]	; (801aa70 <USBD_LL_Init+0x9c>)
 801aa62:	f7ef fd6f 	bl	800a544 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 801aa66:	2300      	movs	r3, #0
}
 801aa68:	4618      	mov	r0, r3
 801aa6a:	3708      	adds	r7, #8
 801aa6c:	46bd      	mov	sp, r7
 801aa6e:	bd80      	pop	{r7, pc}
 801aa70:	24002dc4 	.word	0x24002dc4
 801aa74:	40040000 	.word	0x40040000

0801aa78 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801aa78:	b580      	push	{r7, lr}
 801aa7a:	b084      	sub	sp, #16
 801aa7c:	af00      	add	r7, sp, #0
 801aa7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801aa80:	2300      	movs	r3, #0
 801aa82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801aa84:	2300      	movs	r3, #0
 801aa86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801aa88:	687b      	ldr	r3, [r7, #4]
 801aa8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801aa8e:	4618      	mov	r0, r3
 801aa90:	f7ee fc4b 	bl	800932a <HAL_PCD_Start>
 801aa94:	4603      	mov	r3, r0
 801aa96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801aa98:	7bfb      	ldrb	r3, [r7, #15]
 801aa9a:	4618      	mov	r0, r3
 801aa9c:	f000 f942 	bl	801ad24 <USBD_Get_USB_Status>
 801aaa0:	4603      	mov	r3, r0
 801aaa2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801aaa4:	7bbb      	ldrb	r3, [r7, #14]
}
 801aaa6:	4618      	mov	r0, r3
 801aaa8:	3710      	adds	r7, #16
 801aaaa:	46bd      	mov	sp, r7
 801aaac:	bd80      	pop	{r7, pc}

0801aaae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801aaae:	b580      	push	{r7, lr}
 801aab0:	b084      	sub	sp, #16
 801aab2:	af00      	add	r7, sp, #0
 801aab4:	6078      	str	r0, [r7, #4]
 801aab6:	4608      	mov	r0, r1
 801aab8:	4611      	mov	r1, r2
 801aaba:	461a      	mov	r2, r3
 801aabc:	4603      	mov	r3, r0
 801aabe:	70fb      	strb	r3, [r7, #3]
 801aac0:	460b      	mov	r3, r1
 801aac2:	70bb      	strb	r3, [r7, #2]
 801aac4:	4613      	mov	r3, r2
 801aac6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801aac8:	2300      	movs	r3, #0
 801aaca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801aacc:	2300      	movs	r3, #0
 801aace:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801aad0:	687b      	ldr	r3, [r7, #4]
 801aad2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801aad6:	78bb      	ldrb	r3, [r7, #2]
 801aad8:	883a      	ldrh	r2, [r7, #0]
 801aada:	78f9      	ldrb	r1, [r7, #3]
 801aadc:	f7ef f94b 	bl	8009d76 <HAL_PCD_EP_Open>
 801aae0:	4603      	mov	r3, r0
 801aae2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801aae4:	7bfb      	ldrb	r3, [r7, #15]
 801aae6:	4618      	mov	r0, r3
 801aae8:	f000 f91c 	bl	801ad24 <USBD_Get_USB_Status>
 801aaec:	4603      	mov	r3, r0
 801aaee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801aaf0:	7bbb      	ldrb	r3, [r7, #14]
}
 801aaf2:	4618      	mov	r0, r3
 801aaf4:	3710      	adds	r7, #16
 801aaf6:	46bd      	mov	sp, r7
 801aaf8:	bd80      	pop	{r7, pc}

0801aafa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801aafa:	b580      	push	{r7, lr}
 801aafc:	b084      	sub	sp, #16
 801aafe:	af00      	add	r7, sp, #0
 801ab00:	6078      	str	r0, [r7, #4]
 801ab02:	460b      	mov	r3, r1
 801ab04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ab06:	2300      	movs	r3, #0
 801ab08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ab0a:	2300      	movs	r3, #0
 801ab0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801ab0e:	687b      	ldr	r3, [r7, #4]
 801ab10:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ab14:	78fa      	ldrb	r2, [r7, #3]
 801ab16:	4611      	mov	r1, r2
 801ab18:	4618      	mov	r0, r3
 801ab1a:	f7ef f994 	bl	8009e46 <HAL_PCD_EP_Close>
 801ab1e:	4603      	mov	r3, r0
 801ab20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ab22:	7bfb      	ldrb	r3, [r7, #15]
 801ab24:	4618      	mov	r0, r3
 801ab26:	f000 f8fd 	bl	801ad24 <USBD_Get_USB_Status>
 801ab2a:	4603      	mov	r3, r0
 801ab2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ab2e:	7bbb      	ldrb	r3, [r7, #14]
}
 801ab30:	4618      	mov	r0, r3
 801ab32:	3710      	adds	r7, #16
 801ab34:	46bd      	mov	sp, r7
 801ab36:	bd80      	pop	{r7, pc}

0801ab38 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ab38:	b580      	push	{r7, lr}
 801ab3a:	b084      	sub	sp, #16
 801ab3c:	af00      	add	r7, sp, #0
 801ab3e:	6078      	str	r0, [r7, #4]
 801ab40:	460b      	mov	r3, r1
 801ab42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ab44:	2300      	movs	r3, #0
 801ab46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ab48:	2300      	movs	r3, #0
 801ab4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801ab4c:	687b      	ldr	r3, [r7, #4]
 801ab4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ab52:	78fa      	ldrb	r2, [r7, #3]
 801ab54:	4611      	mov	r1, r2
 801ab56:	4618      	mov	r0, r3
 801ab58:	f7ef fa4e 	bl	8009ff8 <HAL_PCD_EP_SetStall>
 801ab5c:	4603      	mov	r3, r0
 801ab5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ab60:	7bfb      	ldrb	r3, [r7, #15]
 801ab62:	4618      	mov	r0, r3
 801ab64:	f000 f8de 	bl	801ad24 <USBD_Get_USB_Status>
 801ab68:	4603      	mov	r3, r0
 801ab6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ab6c:	7bbb      	ldrb	r3, [r7, #14]
}
 801ab6e:	4618      	mov	r0, r3
 801ab70:	3710      	adds	r7, #16
 801ab72:	46bd      	mov	sp, r7
 801ab74:	bd80      	pop	{r7, pc}

0801ab76 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ab76:	b580      	push	{r7, lr}
 801ab78:	b084      	sub	sp, #16
 801ab7a:	af00      	add	r7, sp, #0
 801ab7c:	6078      	str	r0, [r7, #4]
 801ab7e:	460b      	mov	r3, r1
 801ab80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ab82:	2300      	movs	r3, #0
 801ab84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ab86:	2300      	movs	r3, #0
 801ab88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801ab8a:	687b      	ldr	r3, [r7, #4]
 801ab8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ab90:	78fa      	ldrb	r2, [r7, #3]
 801ab92:	4611      	mov	r1, r2
 801ab94:	4618      	mov	r0, r3
 801ab96:	f7ef fa93 	bl	800a0c0 <HAL_PCD_EP_ClrStall>
 801ab9a:	4603      	mov	r3, r0
 801ab9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ab9e:	7bfb      	ldrb	r3, [r7, #15]
 801aba0:	4618      	mov	r0, r3
 801aba2:	f000 f8bf 	bl	801ad24 <USBD_Get_USB_Status>
 801aba6:	4603      	mov	r3, r0
 801aba8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801abaa:	7bbb      	ldrb	r3, [r7, #14]
}
 801abac:	4618      	mov	r0, r3
 801abae:	3710      	adds	r7, #16
 801abb0:	46bd      	mov	sp, r7
 801abb2:	bd80      	pop	{r7, pc}

0801abb4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801abb4:	b480      	push	{r7}
 801abb6:	b085      	sub	sp, #20
 801abb8:	af00      	add	r7, sp, #0
 801abba:	6078      	str	r0, [r7, #4]
 801abbc:	460b      	mov	r3, r1
 801abbe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801abc0:	687b      	ldr	r3, [r7, #4]
 801abc2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801abc6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801abc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801abcc:	2b00      	cmp	r3, #0
 801abce:	da0b      	bge.n	801abe8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801abd0:	78fb      	ldrb	r3, [r7, #3]
 801abd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801abd6:	68f9      	ldr	r1, [r7, #12]
 801abd8:	4613      	mov	r3, r2
 801abda:	00db      	lsls	r3, r3, #3
 801abdc:	4413      	add	r3, r2
 801abde:	009b      	lsls	r3, r3, #2
 801abe0:	440b      	add	r3, r1
 801abe2:	333e      	adds	r3, #62	; 0x3e
 801abe4:	781b      	ldrb	r3, [r3, #0]
 801abe6:	e00b      	b.n	801ac00 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801abe8:	78fb      	ldrb	r3, [r7, #3]
 801abea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801abee:	68f9      	ldr	r1, [r7, #12]
 801abf0:	4613      	mov	r3, r2
 801abf2:	00db      	lsls	r3, r3, #3
 801abf4:	4413      	add	r3, r2
 801abf6:	009b      	lsls	r3, r3, #2
 801abf8:	440b      	add	r3, r1
 801abfa:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801abfe:	781b      	ldrb	r3, [r3, #0]
  }
}
 801ac00:	4618      	mov	r0, r3
 801ac02:	3714      	adds	r7, #20
 801ac04:	46bd      	mov	sp, r7
 801ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac0a:	4770      	bx	lr

0801ac0c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801ac0c:	b580      	push	{r7, lr}
 801ac0e:	b084      	sub	sp, #16
 801ac10:	af00      	add	r7, sp, #0
 801ac12:	6078      	str	r0, [r7, #4]
 801ac14:	460b      	mov	r3, r1
 801ac16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ac18:	2300      	movs	r3, #0
 801ac1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ac1c:	2300      	movs	r3, #0
 801ac1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801ac20:	687b      	ldr	r3, [r7, #4]
 801ac22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ac26:	78fa      	ldrb	r2, [r7, #3]
 801ac28:	4611      	mov	r1, r2
 801ac2a:	4618      	mov	r0, r3
 801ac2c:	f7ef f87e 	bl	8009d2c <HAL_PCD_SetAddress>
 801ac30:	4603      	mov	r3, r0
 801ac32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ac34:	7bfb      	ldrb	r3, [r7, #15]
 801ac36:	4618      	mov	r0, r3
 801ac38:	f000 f874 	bl	801ad24 <USBD_Get_USB_Status>
 801ac3c:	4603      	mov	r3, r0
 801ac3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801ac40:	7bbb      	ldrb	r3, [r7, #14]
}
 801ac42:	4618      	mov	r0, r3
 801ac44:	3710      	adds	r7, #16
 801ac46:	46bd      	mov	sp, r7
 801ac48:	bd80      	pop	{r7, pc}

0801ac4a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801ac4a:	b580      	push	{r7, lr}
 801ac4c:	b086      	sub	sp, #24
 801ac4e:	af00      	add	r7, sp, #0
 801ac50:	60f8      	str	r0, [r7, #12]
 801ac52:	607a      	str	r2, [r7, #4]
 801ac54:	603b      	str	r3, [r7, #0]
 801ac56:	460b      	mov	r3, r1
 801ac58:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ac5a:	2300      	movs	r3, #0
 801ac5c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ac5e:	2300      	movs	r3, #0
 801ac60:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801ac62:	68fb      	ldr	r3, [r7, #12]
 801ac64:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801ac68:	7af9      	ldrb	r1, [r7, #11]
 801ac6a:	683b      	ldr	r3, [r7, #0]
 801ac6c:	687a      	ldr	r2, [r7, #4]
 801ac6e:	f7ef f988 	bl	8009f82 <HAL_PCD_EP_Transmit>
 801ac72:	4603      	mov	r3, r0
 801ac74:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ac76:	7dfb      	ldrb	r3, [r7, #23]
 801ac78:	4618      	mov	r0, r3
 801ac7a:	f000 f853 	bl	801ad24 <USBD_Get_USB_Status>
 801ac7e:	4603      	mov	r3, r0
 801ac80:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801ac82:	7dbb      	ldrb	r3, [r7, #22]
}
 801ac84:	4618      	mov	r0, r3
 801ac86:	3718      	adds	r7, #24
 801ac88:	46bd      	mov	sp, r7
 801ac8a:	bd80      	pop	{r7, pc}

0801ac8c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801ac8c:	b580      	push	{r7, lr}
 801ac8e:	b086      	sub	sp, #24
 801ac90:	af00      	add	r7, sp, #0
 801ac92:	60f8      	str	r0, [r7, #12]
 801ac94:	607a      	str	r2, [r7, #4]
 801ac96:	603b      	str	r3, [r7, #0]
 801ac98:	460b      	mov	r3, r1
 801ac9a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ac9c:	2300      	movs	r3, #0
 801ac9e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801aca0:	2300      	movs	r3, #0
 801aca2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801aca4:	68fb      	ldr	r3, [r7, #12]
 801aca6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801acaa:	7af9      	ldrb	r1, [r7, #11]
 801acac:	683b      	ldr	r3, [r7, #0]
 801acae:	687a      	ldr	r2, [r7, #4]
 801acb0:	f7ef f913 	bl	8009eda <HAL_PCD_EP_Receive>
 801acb4:	4603      	mov	r3, r0
 801acb6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801acb8:	7dfb      	ldrb	r3, [r7, #23]
 801acba:	4618      	mov	r0, r3
 801acbc:	f000 f832 	bl	801ad24 <USBD_Get_USB_Status>
 801acc0:	4603      	mov	r3, r0
 801acc2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801acc4:	7dbb      	ldrb	r3, [r7, #22]
}
 801acc6:	4618      	mov	r0, r3
 801acc8:	3718      	adds	r7, #24
 801acca:	46bd      	mov	sp, r7
 801accc:	bd80      	pop	{r7, pc}

0801acce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801acce:	b580      	push	{r7, lr}
 801acd0:	b082      	sub	sp, #8
 801acd2:	af00      	add	r7, sp, #0
 801acd4:	6078      	str	r0, [r7, #4]
 801acd6:	460b      	mov	r3, r1
 801acd8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801acda:	687b      	ldr	r3, [r7, #4]
 801acdc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801ace0:	78fa      	ldrb	r2, [r7, #3]
 801ace2:	4611      	mov	r1, r2
 801ace4:	4618      	mov	r0, r3
 801ace6:	f7ef f934 	bl	8009f52 <HAL_PCD_EP_GetRxCount>
 801acea:	4603      	mov	r3, r0
}
 801acec:	4618      	mov	r0, r3
 801acee:	3708      	adds	r7, #8
 801acf0:	46bd      	mov	sp, r7
 801acf2:	bd80      	pop	{r7, pc}

0801acf4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801acf4:	b480      	push	{r7}
 801acf6:	b083      	sub	sp, #12
 801acf8:	af00      	add	r7, sp, #0
 801acfa:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801acfc:	4b03      	ldr	r3, [pc, #12]	; (801ad0c <USBD_static_malloc+0x18>)
}
 801acfe:	4618      	mov	r0, r3
 801ad00:	370c      	adds	r7, #12
 801ad02:	46bd      	mov	sp, r7
 801ad04:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad08:	4770      	bx	lr
 801ad0a:	bf00      	nop
 801ad0c:	240032d0 	.word	0x240032d0

0801ad10 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801ad10:	b480      	push	{r7}
 801ad12:	b083      	sub	sp, #12
 801ad14:	af00      	add	r7, sp, #0
 801ad16:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 801ad18:	bf00      	nop
 801ad1a:	370c      	adds	r7, #12
 801ad1c:	46bd      	mov	sp, r7
 801ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad22:	4770      	bx	lr

0801ad24 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801ad24:	b480      	push	{r7}
 801ad26:	b085      	sub	sp, #20
 801ad28:	af00      	add	r7, sp, #0
 801ad2a:	4603      	mov	r3, r0
 801ad2c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ad2e:	2300      	movs	r3, #0
 801ad30:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801ad32:	79fb      	ldrb	r3, [r7, #7]
 801ad34:	2b03      	cmp	r3, #3
 801ad36:	d817      	bhi.n	801ad68 <USBD_Get_USB_Status+0x44>
 801ad38:	a201      	add	r2, pc, #4	; (adr r2, 801ad40 <USBD_Get_USB_Status+0x1c>)
 801ad3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ad3e:	bf00      	nop
 801ad40:	0801ad51 	.word	0x0801ad51
 801ad44:	0801ad57 	.word	0x0801ad57
 801ad48:	0801ad5d 	.word	0x0801ad5d
 801ad4c:	0801ad63 	.word	0x0801ad63
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801ad50:	2300      	movs	r3, #0
 801ad52:	73fb      	strb	r3, [r7, #15]
    break;
 801ad54:	e00b      	b.n	801ad6e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801ad56:	2303      	movs	r3, #3
 801ad58:	73fb      	strb	r3, [r7, #15]
    break;
 801ad5a:	e008      	b.n	801ad6e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801ad5c:	2301      	movs	r3, #1
 801ad5e:	73fb      	strb	r3, [r7, #15]
    break;
 801ad60:	e005      	b.n	801ad6e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801ad62:	2303      	movs	r3, #3
 801ad64:	73fb      	strb	r3, [r7, #15]
    break;
 801ad66:	e002      	b.n	801ad6e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801ad68:	2303      	movs	r3, #3
 801ad6a:	73fb      	strb	r3, [r7, #15]
    break;
 801ad6c:	bf00      	nop
  }
  return usb_status;
 801ad6e:	7bfb      	ldrb	r3, [r7, #15]
}
 801ad70:	4618      	mov	r0, r3
 801ad72:	3714      	adds	r7, #20
 801ad74:	46bd      	mov	sp, r7
 801ad76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad7a:	4770      	bx	lr

0801ad7c <__errno>:
 801ad7c:	4b01      	ldr	r3, [pc, #4]	; (801ad84 <__errno+0x8>)
 801ad7e:	6818      	ldr	r0, [r3, #0]
 801ad80:	4770      	bx	lr
 801ad82:	bf00      	nop
 801ad84:	24000100 	.word	0x24000100

0801ad88 <__libc_init_array>:
 801ad88:	b570      	push	{r4, r5, r6, lr}
 801ad8a:	4d0d      	ldr	r5, [pc, #52]	; (801adc0 <__libc_init_array+0x38>)
 801ad8c:	4c0d      	ldr	r4, [pc, #52]	; (801adc4 <__libc_init_array+0x3c>)
 801ad8e:	1b64      	subs	r4, r4, r5
 801ad90:	10a4      	asrs	r4, r4, #2
 801ad92:	2600      	movs	r6, #0
 801ad94:	42a6      	cmp	r6, r4
 801ad96:	d109      	bne.n	801adac <__libc_init_array+0x24>
 801ad98:	4d0b      	ldr	r5, [pc, #44]	; (801adc8 <__libc_init_array+0x40>)
 801ad9a:	4c0c      	ldr	r4, [pc, #48]	; (801adcc <__libc_init_array+0x44>)
 801ad9c:	f004 fb90 	bl	801f4c0 <_init>
 801ada0:	1b64      	subs	r4, r4, r5
 801ada2:	10a4      	asrs	r4, r4, #2
 801ada4:	2600      	movs	r6, #0
 801ada6:	42a6      	cmp	r6, r4
 801ada8:	d105      	bne.n	801adb6 <__libc_init_array+0x2e>
 801adaa:	bd70      	pop	{r4, r5, r6, pc}
 801adac:	f855 3b04 	ldr.w	r3, [r5], #4
 801adb0:	4798      	blx	r3
 801adb2:	3601      	adds	r6, #1
 801adb4:	e7ee      	b.n	801ad94 <__libc_init_array+0xc>
 801adb6:	f855 3b04 	ldr.w	r3, [r5], #4
 801adba:	4798      	blx	r3
 801adbc:	3601      	adds	r6, #1
 801adbe:	e7f2      	b.n	801ada6 <__libc_init_array+0x1e>
 801adc0:	080200f4 	.word	0x080200f4
 801adc4:	080200f4 	.word	0x080200f4
 801adc8:	080200f4 	.word	0x080200f4
 801adcc:	080200f8 	.word	0x080200f8

0801add0 <memcpy>:
 801add0:	440a      	add	r2, r1
 801add2:	4291      	cmp	r1, r2
 801add4:	f100 33ff 	add.w	r3, r0, #4294967295
 801add8:	d100      	bne.n	801addc <memcpy+0xc>
 801adda:	4770      	bx	lr
 801addc:	b510      	push	{r4, lr}
 801adde:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ade2:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ade6:	4291      	cmp	r1, r2
 801ade8:	d1f9      	bne.n	801adde <memcpy+0xe>
 801adea:	bd10      	pop	{r4, pc}

0801adec <memset>:
 801adec:	4402      	add	r2, r0
 801adee:	4603      	mov	r3, r0
 801adf0:	4293      	cmp	r3, r2
 801adf2:	d100      	bne.n	801adf6 <memset+0xa>
 801adf4:	4770      	bx	lr
 801adf6:	f803 1b01 	strb.w	r1, [r3], #1
 801adfa:	e7f9      	b.n	801adf0 <memset+0x4>

0801adfc <__cvt>:
 801adfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801adfe:	ed2d 8b02 	vpush	{d8}
 801ae02:	eeb0 8b40 	vmov.f64	d8, d0
 801ae06:	b085      	sub	sp, #20
 801ae08:	4617      	mov	r7, r2
 801ae0a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801ae0c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801ae0e:	ee18 2a90 	vmov	r2, s17
 801ae12:	f025 0520 	bic.w	r5, r5, #32
 801ae16:	2a00      	cmp	r2, #0
 801ae18:	bfb6      	itet	lt
 801ae1a:	222d      	movlt	r2, #45	; 0x2d
 801ae1c:	2200      	movge	r2, #0
 801ae1e:	eeb1 8b40 	vneglt.f64	d8, d0
 801ae22:	2d46      	cmp	r5, #70	; 0x46
 801ae24:	460c      	mov	r4, r1
 801ae26:	701a      	strb	r2, [r3, #0]
 801ae28:	d004      	beq.n	801ae34 <__cvt+0x38>
 801ae2a:	2d45      	cmp	r5, #69	; 0x45
 801ae2c:	d100      	bne.n	801ae30 <__cvt+0x34>
 801ae2e:	3401      	adds	r4, #1
 801ae30:	2102      	movs	r1, #2
 801ae32:	e000      	b.n	801ae36 <__cvt+0x3a>
 801ae34:	2103      	movs	r1, #3
 801ae36:	ab03      	add	r3, sp, #12
 801ae38:	9301      	str	r3, [sp, #4]
 801ae3a:	ab02      	add	r3, sp, #8
 801ae3c:	9300      	str	r3, [sp, #0]
 801ae3e:	4622      	mov	r2, r4
 801ae40:	4633      	mov	r3, r6
 801ae42:	eeb0 0b48 	vmov.f64	d0, d8
 801ae46:	f001 fd9f 	bl	801c988 <_dtoa_r>
 801ae4a:	2d47      	cmp	r5, #71	; 0x47
 801ae4c:	d101      	bne.n	801ae52 <__cvt+0x56>
 801ae4e:	07fb      	lsls	r3, r7, #31
 801ae50:	d51a      	bpl.n	801ae88 <__cvt+0x8c>
 801ae52:	2d46      	cmp	r5, #70	; 0x46
 801ae54:	eb00 0204 	add.w	r2, r0, r4
 801ae58:	d10c      	bne.n	801ae74 <__cvt+0x78>
 801ae5a:	7803      	ldrb	r3, [r0, #0]
 801ae5c:	2b30      	cmp	r3, #48	; 0x30
 801ae5e:	d107      	bne.n	801ae70 <__cvt+0x74>
 801ae60:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801ae64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae68:	bf1c      	itt	ne
 801ae6a:	f1c4 0401 	rsbne	r4, r4, #1
 801ae6e:	6034      	strne	r4, [r6, #0]
 801ae70:	6833      	ldr	r3, [r6, #0]
 801ae72:	441a      	add	r2, r3
 801ae74:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801ae78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae7c:	bf08      	it	eq
 801ae7e:	9203      	streq	r2, [sp, #12]
 801ae80:	2130      	movs	r1, #48	; 0x30
 801ae82:	9b03      	ldr	r3, [sp, #12]
 801ae84:	4293      	cmp	r3, r2
 801ae86:	d307      	bcc.n	801ae98 <__cvt+0x9c>
 801ae88:	9b03      	ldr	r3, [sp, #12]
 801ae8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ae8c:	1a1b      	subs	r3, r3, r0
 801ae8e:	6013      	str	r3, [r2, #0]
 801ae90:	b005      	add	sp, #20
 801ae92:	ecbd 8b02 	vpop	{d8}
 801ae96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ae98:	1c5c      	adds	r4, r3, #1
 801ae9a:	9403      	str	r4, [sp, #12]
 801ae9c:	7019      	strb	r1, [r3, #0]
 801ae9e:	e7f0      	b.n	801ae82 <__cvt+0x86>

0801aea0 <__exponent>:
 801aea0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801aea2:	4603      	mov	r3, r0
 801aea4:	2900      	cmp	r1, #0
 801aea6:	bfb8      	it	lt
 801aea8:	4249      	neglt	r1, r1
 801aeaa:	f803 2b02 	strb.w	r2, [r3], #2
 801aeae:	bfb4      	ite	lt
 801aeb0:	222d      	movlt	r2, #45	; 0x2d
 801aeb2:	222b      	movge	r2, #43	; 0x2b
 801aeb4:	2909      	cmp	r1, #9
 801aeb6:	7042      	strb	r2, [r0, #1]
 801aeb8:	dd2a      	ble.n	801af10 <__exponent+0x70>
 801aeba:	f10d 0407 	add.w	r4, sp, #7
 801aebe:	46a4      	mov	ip, r4
 801aec0:	270a      	movs	r7, #10
 801aec2:	46a6      	mov	lr, r4
 801aec4:	460a      	mov	r2, r1
 801aec6:	fb91 f6f7 	sdiv	r6, r1, r7
 801aeca:	fb07 1516 	mls	r5, r7, r6, r1
 801aece:	3530      	adds	r5, #48	; 0x30
 801aed0:	2a63      	cmp	r2, #99	; 0x63
 801aed2:	f104 34ff 	add.w	r4, r4, #4294967295
 801aed6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801aeda:	4631      	mov	r1, r6
 801aedc:	dcf1      	bgt.n	801aec2 <__exponent+0x22>
 801aede:	3130      	adds	r1, #48	; 0x30
 801aee0:	f1ae 0502 	sub.w	r5, lr, #2
 801aee4:	f804 1c01 	strb.w	r1, [r4, #-1]
 801aee8:	1c44      	adds	r4, r0, #1
 801aeea:	4629      	mov	r1, r5
 801aeec:	4561      	cmp	r1, ip
 801aeee:	d30a      	bcc.n	801af06 <__exponent+0x66>
 801aef0:	f10d 0209 	add.w	r2, sp, #9
 801aef4:	eba2 020e 	sub.w	r2, r2, lr
 801aef8:	4565      	cmp	r5, ip
 801aefa:	bf88      	it	hi
 801aefc:	2200      	movhi	r2, #0
 801aefe:	4413      	add	r3, r2
 801af00:	1a18      	subs	r0, r3, r0
 801af02:	b003      	add	sp, #12
 801af04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801af06:	f811 2b01 	ldrb.w	r2, [r1], #1
 801af0a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801af0e:	e7ed      	b.n	801aeec <__exponent+0x4c>
 801af10:	2330      	movs	r3, #48	; 0x30
 801af12:	3130      	adds	r1, #48	; 0x30
 801af14:	7083      	strb	r3, [r0, #2]
 801af16:	70c1      	strb	r1, [r0, #3]
 801af18:	1d03      	adds	r3, r0, #4
 801af1a:	e7f1      	b.n	801af00 <__exponent+0x60>
 801af1c:	0000      	movs	r0, r0
	...

0801af20 <_printf_float>:
 801af20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af24:	b08b      	sub	sp, #44	; 0x2c
 801af26:	460c      	mov	r4, r1
 801af28:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801af2c:	4616      	mov	r6, r2
 801af2e:	461f      	mov	r7, r3
 801af30:	4605      	mov	r5, r0
 801af32:	f002 fe07 	bl	801db44 <_localeconv_r>
 801af36:	f8d0 b000 	ldr.w	fp, [r0]
 801af3a:	4658      	mov	r0, fp
 801af3c:	f7e5 f9f2 	bl	8000324 <strlen>
 801af40:	2300      	movs	r3, #0
 801af42:	9308      	str	r3, [sp, #32]
 801af44:	f8d8 3000 	ldr.w	r3, [r8]
 801af48:	f894 9018 	ldrb.w	r9, [r4, #24]
 801af4c:	6822      	ldr	r2, [r4, #0]
 801af4e:	3307      	adds	r3, #7
 801af50:	f023 0307 	bic.w	r3, r3, #7
 801af54:	f103 0108 	add.w	r1, r3, #8
 801af58:	f8c8 1000 	str.w	r1, [r8]
 801af5c:	4682      	mov	sl, r0
 801af5e:	e9d3 0100 	ldrd	r0, r1, [r3]
 801af62:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801af66:	ed9f 7b98 	vldr	d7, [pc, #608]	; 801b1c8 <_printf_float+0x2a8>
 801af6a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801af6e:	eeb0 6bc0 	vabs.f64	d6, d0
 801af72:	eeb4 6b47 	vcmp.f64	d6, d7
 801af76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af7a:	dd24      	ble.n	801afc6 <_printf_float+0xa6>
 801af7c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801af80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af84:	d502      	bpl.n	801af8c <_printf_float+0x6c>
 801af86:	232d      	movs	r3, #45	; 0x2d
 801af88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801af8c:	4b90      	ldr	r3, [pc, #576]	; (801b1d0 <_printf_float+0x2b0>)
 801af8e:	4891      	ldr	r0, [pc, #580]	; (801b1d4 <_printf_float+0x2b4>)
 801af90:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801af94:	bf94      	ite	ls
 801af96:	4698      	movls	r8, r3
 801af98:	4680      	movhi	r8, r0
 801af9a:	2303      	movs	r3, #3
 801af9c:	6123      	str	r3, [r4, #16]
 801af9e:	f022 0204 	bic.w	r2, r2, #4
 801afa2:	2300      	movs	r3, #0
 801afa4:	6022      	str	r2, [r4, #0]
 801afa6:	9304      	str	r3, [sp, #16]
 801afa8:	9700      	str	r7, [sp, #0]
 801afaa:	4633      	mov	r3, r6
 801afac:	aa09      	add	r2, sp, #36	; 0x24
 801afae:	4621      	mov	r1, r4
 801afb0:	4628      	mov	r0, r5
 801afb2:	f000 f9d3 	bl	801b35c <_printf_common>
 801afb6:	3001      	adds	r0, #1
 801afb8:	f040 808a 	bne.w	801b0d0 <_printf_float+0x1b0>
 801afbc:	f04f 30ff 	mov.w	r0, #4294967295
 801afc0:	b00b      	add	sp, #44	; 0x2c
 801afc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801afc6:	eeb4 0b40 	vcmp.f64	d0, d0
 801afca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afce:	d709      	bvc.n	801afe4 <_printf_float+0xc4>
 801afd0:	ee10 3a90 	vmov	r3, s1
 801afd4:	2b00      	cmp	r3, #0
 801afd6:	bfbc      	itt	lt
 801afd8:	232d      	movlt	r3, #45	; 0x2d
 801afda:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801afde:	487e      	ldr	r0, [pc, #504]	; (801b1d8 <_printf_float+0x2b8>)
 801afe0:	4b7e      	ldr	r3, [pc, #504]	; (801b1dc <_printf_float+0x2bc>)
 801afe2:	e7d5      	b.n	801af90 <_printf_float+0x70>
 801afe4:	6863      	ldr	r3, [r4, #4]
 801afe6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801afea:	9104      	str	r1, [sp, #16]
 801afec:	1c59      	adds	r1, r3, #1
 801afee:	d13c      	bne.n	801b06a <_printf_float+0x14a>
 801aff0:	2306      	movs	r3, #6
 801aff2:	6063      	str	r3, [r4, #4]
 801aff4:	2300      	movs	r3, #0
 801aff6:	9303      	str	r3, [sp, #12]
 801aff8:	ab08      	add	r3, sp, #32
 801affa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801affe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801b002:	ab07      	add	r3, sp, #28
 801b004:	6861      	ldr	r1, [r4, #4]
 801b006:	9300      	str	r3, [sp, #0]
 801b008:	6022      	str	r2, [r4, #0]
 801b00a:	f10d 031b 	add.w	r3, sp, #27
 801b00e:	4628      	mov	r0, r5
 801b010:	f7ff fef4 	bl	801adfc <__cvt>
 801b014:	9b04      	ldr	r3, [sp, #16]
 801b016:	9907      	ldr	r1, [sp, #28]
 801b018:	2b47      	cmp	r3, #71	; 0x47
 801b01a:	4680      	mov	r8, r0
 801b01c:	d108      	bne.n	801b030 <_printf_float+0x110>
 801b01e:	1cc8      	adds	r0, r1, #3
 801b020:	db02      	blt.n	801b028 <_printf_float+0x108>
 801b022:	6863      	ldr	r3, [r4, #4]
 801b024:	4299      	cmp	r1, r3
 801b026:	dd41      	ble.n	801b0ac <_printf_float+0x18c>
 801b028:	f1a9 0902 	sub.w	r9, r9, #2
 801b02c:	fa5f f989 	uxtb.w	r9, r9
 801b030:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801b034:	d820      	bhi.n	801b078 <_printf_float+0x158>
 801b036:	3901      	subs	r1, #1
 801b038:	464a      	mov	r2, r9
 801b03a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801b03e:	9107      	str	r1, [sp, #28]
 801b040:	f7ff ff2e 	bl	801aea0 <__exponent>
 801b044:	9a08      	ldr	r2, [sp, #32]
 801b046:	9004      	str	r0, [sp, #16]
 801b048:	1813      	adds	r3, r2, r0
 801b04a:	2a01      	cmp	r2, #1
 801b04c:	6123      	str	r3, [r4, #16]
 801b04e:	dc02      	bgt.n	801b056 <_printf_float+0x136>
 801b050:	6822      	ldr	r2, [r4, #0]
 801b052:	07d2      	lsls	r2, r2, #31
 801b054:	d501      	bpl.n	801b05a <_printf_float+0x13a>
 801b056:	3301      	adds	r3, #1
 801b058:	6123      	str	r3, [r4, #16]
 801b05a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801b05e:	2b00      	cmp	r3, #0
 801b060:	d0a2      	beq.n	801afa8 <_printf_float+0x88>
 801b062:	232d      	movs	r3, #45	; 0x2d
 801b064:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b068:	e79e      	b.n	801afa8 <_printf_float+0x88>
 801b06a:	9904      	ldr	r1, [sp, #16]
 801b06c:	2947      	cmp	r1, #71	; 0x47
 801b06e:	d1c1      	bne.n	801aff4 <_printf_float+0xd4>
 801b070:	2b00      	cmp	r3, #0
 801b072:	d1bf      	bne.n	801aff4 <_printf_float+0xd4>
 801b074:	2301      	movs	r3, #1
 801b076:	e7bc      	b.n	801aff2 <_printf_float+0xd2>
 801b078:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801b07c:	d118      	bne.n	801b0b0 <_printf_float+0x190>
 801b07e:	2900      	cmp	r1, #0
 801b080:	6863      	ldr	r3, [r4, #4]
 801b082:	dd0b      	ble.n	801b09c <_printf_float+0x17c>
 801b084:	6121      	str	r1, [r4, #16]
 801b086:	b913      	cbnz	r3, 801b08e <_printf_float+0x16e>
 801b088:	6822      	ldr	r2, [r4, #0]
 801b08a:	07d0      	lsls	r0, r2, #31
 801b08c:	d502      	bpl.n	801b094 <_printf_float+0x174>
 801b08e:	3301      	adds	r3, #1
 801b090:	440b      	add	r3, r1
 801b092:	6123      	str	r3, [r4, #16]
 801b094:	2300      	movs	r3, #0
 801b096:	65a1      	str	r1, [r4, #88]	; 0x58
 801b098:	9304      	str	r3, [sp, #16]
 801b09a:	e7de      	b.n	801b05a <_printf_float+0x13a>
 801b09c:	b913      	cbnz	r3, 801b0a4 <_printf_float+0x184>
 801b09e:	6822      	ldr	r2, [r4, #0]
 801b0a0:	07d2      	lsls	r2, r2, #31
 801b0a2:	d501      	bpl.n	801b0a8 <_printf_float+0x188>
 801b0a4:	3302      	adds	r3, #2
 801b0a6:	e7f4      	b.n	801b092 <_printf_float+0x172>
 801b0a8:	2301      	movs	r3, #1
 801b0aa:	e7f2      	b.n	801b092 <_printf_float+0x172>
 801b0ac:	f04f 0967 	mov.w	r9, #103	; 0x67
 801b0b0:	9b08      	ldr	r3, [sp, #32]
 801b0b2:	4299      	cmp	r1, r3
 801b0b4:	db05      	blt.n	801b0c2 <_printf_float+0x1a2>
 801b0b6:	6823      	ldr	r3, [r4, #0]
 801b0b8:	6121      	str	r1, [r4, #16]
 801b0ba:	07d8      	lsls	r0, r3, #31
 801b0bc:	d5ea      	bpl.n	801b094 <_printf_float+0x174>
 801b0be:	1c4b      	adds	r3, r1, #1
 801b0c0:	e7e7      	b.n	801b092 <_printf_float+0x172>
 801b0c2:	2900      	cmp	r1, #0
 801b0c4:	bfd4      	ite	le
 801b0c6:	f1c1 0202 	rsble	r2, r1, #2
 801b0ca:	2201      	movgt	r2, #1
 801b0cc:	4413      	add	r3, r2
 801b0ce:	e7e0      	b.n	801b092 <_printf_float+0x172>
 801b0d0:	6823      	ldr	r3, [r4, #0]
 801b0d2:	055a      	lsls	r2, r3, #21
 801b0d4:	d407      	bmi.n	801b0e6 <_printf_float+0x1c6>
 801b0d6:	6923      	ldr	r3, [r4, #16]
 801b0d8:	4642      	mov	r2, r8
 801b0da:	4631      	mov	r1, r6
 801b0dc:	4628      	mov	r0, r5
 801b0de:	47b8      	blx	r7
 801b0e0:	3001      	adds	r0, #1
 801b0e2:	d12a      	bne.n	801b13a <_printf_float+0x21a>
 801b0e4:	e76a      	b.n	801afbc <_printf_float+0x9c>
 801b0e6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801b0ea:	f240 80e2 	bls.w	801b2b2 <_printf_float+0x392>
 801b0ee:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801b0f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b0f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b0fa:	d133      	bne.n	801b164 <_printf_float+0x244>
 801b0fc:	4a38      	ldr	r2, [pc, #224]	; (801b1e0 <_printf_float+0x2c0>)
 801b0fe:	2301      	movs	r3, #1
 801b100:	4631      	mov	r1, r6
 801b102:	4628      	mov	r0, r5
 801b104:	47b8      	blx	r7
 801b106:	3001      	adds	r0, #1
 801b108:	f43f af58 	beq.w	801afbc <_printf_float+0x9c>
 801b10c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b110:	429a      	cmp	r2, r3
 801b112:	db02      	blt.n	801b11a <_printf_float+0x1fa>
 801b114:	6823      	ldr	r3, [r4, #0]
 801b116:	07d8      	lsls	r0, r3, #31
 801b118:	d50f      	bpl.n	801b13a <_printf_float+0x21a>
 801b11a:	4653      	mov	r3, sl
 801b11c:	465a      	mov	r2, fp
 801b11e:	4631      	mov	r1, r6
 801b120:	4628      	mov	r0, r5
 801b122:	47b8      	blx	r7
 801b124:	3001      	adds	r0, #1
 801b126:	f43f af49 	beq.w	801afbc <_printf_float+0x9c>
 801b12a:	f04f 0800 	mov.w	r8, #0
 801b12e:	f104 091a 	add.w	r9, r4, #26
 801b132:	9b08      	ldr	r3, [sp, #32]
 801b134:	3b01      	subs	r3, #1
 801b136:	4543      	cmp	r3, r8
 801b138:	dc09      	bgt.n	801b14e <_printf_float+0x22e>
 801b13a:	6823      	ldr	r3, [r4, #0]
 801b13c:	079b      	lsls	r3, r3, #30
 801b13e:	f100 8108 	bmi.w	801b352 <_printf_float+0x432>
 801b142:	68e0      	ldr	r0, [r4, #12]
 801b144:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b146:	4298      	cmp	r0, r3
 801b148:	bfb8      	it	lt
 801b14a:	4618      	movlt	r0, r3
 801b14c:	e738      	b.n	801afc0 <_printf_float+0xa0>
 801b14e:	2301      	movs	r3, #1
 801b150:	464a      	mov	r2, r9
 801b152:	4631      	mov	r1, r6
 801b154:	4628      	mov	r0, r5
 801b156:	47b8      	blx	r7
 801b158:	3001      	adds	r0, #1
 801b15a:	f43f af2f 	beq.w	801afbc <_printf_float+0x9c>
 801b15e:	f108 0801 	add.w	r8, r8, #1
 801b162:	e7e6      	b.n	801b132 <_printf_float+0x212>
 801b164:	9b07      	ldr	r3, [sp, #28]
 801b166:	2b00      	cmp	r3, #0
 801b168:	dc3c      	bgt.n	801b1e4 <_printf_float+0x2c4>
 801b16a:	4a1d      	ldr	r2, [pc, #116]	; (801b1e0 <_printf_float+0x2c0>)
 801b16c:	2301      	movs	r3, #1
 801b16e:	4631      	mov	r1, r6
 801b170:	4628      	mov	r0, r5
 801b172:	47b8      	blx	r7
 801b174:	3001      	adds	r0, #1
 801b176:	f43f af21 	beq.w	801afbc <_printf_float+0x9c>
 801b17a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b17e:	4313      	orrs	r3, r2
 801b180:	d102      	bne.n	801b188 <_printf_float+0x268>
 801b182:	6823      	ldr	r3, [r4, #0]
 801b184:	07d9      	lsls	r1, r3, #31
 801b186:	d5d8      	bpl.n	801b13a <_printf_float+0x21a>
 801b188:	4653      	mov	r3, sl
 801b18a:	465a      	mov	r2, fp
 801b18c:	4631      	mov	r1, r6
 801b18e:	4628      	mov	r0, r5
 801b190:	47b8      	blx	r7
 801b192:	3001      	adds	r0, #1
 801b194:	f43f af12 	beq.w	801afbc <_printf_float+0x9c>
 801b198:	f04f 0900 	mov.w	r9, #0
 801b19c:	f104 0a1a 	add.w	sl, r4, #26
 801b1a0:	9b07      	ldr	r3, [sp, #28]
 801b1a2:	425b      	negs	r3, r3
 801b1a4:	454b      	cmp	r3, r9
 801b1a6:	dc01      	bgt.n	801b1ac <_printf_float+0x28c>
 801b1a8:	9b08      	ldr	r3, [sp, #32]
 801b1aa:	e795      	b.n	801b0d8 <_printf_float+0x1b8>
 801b1ac:	2301      	movs	r3, #1
 801b1ae:	4652      	mov	r2, sl
 801b1b0:	4631      	mov	r1, r6
 801b1b2:	4628      	mov	r0, r5
 801b1b4:	47b8      	blx	r7
 801b1b6:	3001      	adds	r0, #1
 801b1b8:	f43f af00 	beq.w	801afbc <_printf_float+0x9c>
 801b1bc:	f109 0901 	add.w	r9, r9, #1
 801b1c0:	e7ee      	b.n	801b1a0 <_printf_float+0x280>
 801b1c2:	bf00      	nop
 801b1c4:	f3af 8000 	nop.w
 801b1c8:	ffffffff 	.word	0xffffffff
 801b1cc:	7fefffff 	.word	0x7fefffff
 801b1d0:	0801fc48 	.word	0x0801fc48
 801b1d4:	0801fc4c 	.word	0x0801fc4c
 801b1d8:	0801fc54 	.word	0x0801fc54
 801b1dc:	0801fc50 	.word	0x0801fc50
 801b1e0:	0801fc58 	.word	0x0801fc58
 801b1e4:	9a08      	ldr	r2, [sp, #32]
 801b1e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b1e8:	429a      	cmp	r2, r3
 801b1ea:	bfa8      	it	ge
 801b1ec:	461a      	movge	r2, r3
 801b1ee:	2a00      	cmp	r2, #0
 801b1f0:	4691      	mov	r9, r2
 801b1f2:	dc38      	bgt.n	801b266 <_printf_float+0x346>
 801b1f4:	2300      	movs	r3, #0
 801b1f6:	9305      	str	r3, [sp, #20]
 801b1f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b1fc:	f104 021a 	add.w	r2, r4, #26
 801b200:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b202:	9905      	ldr	r1, [sp, #20]
 801b204:	9304      	str	r3, [sp, #16]
 801b206:	eba3 0309 	sub.w	r3, r3, r9
 801b20a:	428b      	cmp	r3, r1
 801b20c:	dc33      	bgt.n	801b276 <_printf_float+0x356>
 801b20e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b212:	429a      	cmp	r2, r3
 801b214:	db3c      	blt.n	801b290 <_printf_float+0x370>
 801b216:	6823      	ldr	r3, [r4, #0]
 801b218:	07da      	lsls	r2, r3, #31
 801b21a:	d439      	bmi.n	801b290 <_printf_float+0x370>
 801b21c:	9b08      	ldr	r3, [sp, #32]
 801b21e:	9a04      	ldr	r2, [sp, #16]
 801b220:	9907      	ldr	r1, [sp, #28]
 801b222:	1a9a      	subs	r2, r3, r2
 801b224:	eba3 0901 	sub.w	r9, r3, r1
 801b228:	4591      	cmp	r9, r2
 801b22a:	bfa8      	it	ge
 801b22c:	4691      	movge	r9, r2
 801b22e:	f1b9 0f00 	cmp.w	r9, #0
 801b232:	dc35      	bgt.n	801b2a0 <_printf_float+0x380>
 801b234:	f04f 0800 	mov.w	r8, #0
 801b238:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b23c:	f104 0a1a 	add.w	sl, r4, #26
 801b240:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b244:	1a9b      	subs	r3, r3, r2
 801b246:	eba3 0309 	sub.w	r3, r3, r9
 801b24a:	4543      	cmp	r3, r8
 801b24c:	f77f af75 	ble.w	801b13a <_printf_float+0x21a>
 801b250:	2301      	movs	r3, #1
 801b252:	4652      	mov	r2, sl
 801b254:	4631      	mov	r1, r6
 801b256:	4628      	mov	r0, r5
 801b258:	47b8      	blx	r7
 801b25a:	3001      	adds	r0, #1
 801b25c:	f43f aeae 	beq.w	801afbc <_printf_float+0x9c>
 801b260:	f108 0801 	add.w	r8, r8, #1
 801b264:	e7ec      	b.n	801b240 <_printf_float+0x320>
 801b266:	4613      	mov	r3, r2
 801b268:	4631      	mov	r1, r6
 801b26a:	4642      	mov	r2, r8
 801b26c:	4628      	mov	r0, r5
 801b26e:	47b8      	blx	r7
 801b270:	3001      	adds	r0, #1
 801b272:	d1bf      	bne.n	801b1f4 <_printf_float+0x2d4>
 801b274:	e6a2      	b.n	801afbc <_printf_float+0x9c>
 801b276:	2301      	movs	r3, #1
 801b278:	4631      	mov	r1, r6
 801b27a:	4628      	mov	r0, r5
 801b27c:	9204      	str	r2, [sp, #16]
 801b27e:	47b8      	blx	r7
 801b280:	3001      	adds	r0, #1
 801b282:	f43f ae9b 	beq.w	801afbc <_printf_float+0x9c>
 801b286:	9b05      	ldr	r3, [sp, #20]
 801b288:	9a04      	ldr	r2, [sp, #16]
 801b28a:	3301      	adds	r3, #1
 801b28c:	9305      	str	r3, [sp, #20]
 801b28e:	e7b7      	b.n	801b200 <_printf_float+0x2e0>
 801b290:	4653      	mov	r3, sl
 801b292:	465a      	mov	r2, fp
 801b294:	4631      	mov	r1, r6
 801b296:	4628      	mov	r0, r5
 801b298:	47b8      	blx	r7
 801b29a:	3001      	adds	r0, #1
 801b29c:	d1be      	bne.n	801b21c <_printf_float+0x2fc>
 801b29e:	e68d      	b.n	801afbc <_printf_float+0x9c>
 801b2a0:	9a04      	ldr	r2, [sp, #16]
 801b2a2:	464b      	mov	r3, r9
 801b2a4:	4442      	add	r2, r8
 801b2a6:	4631      	mov	r1, r6
 801b2a8:	4628      	mov	r0, r5
 801b2aa:	47b8      	blx	r7
 801b2ac:	3001      	adds	r0, #1
 801b2ae:	d1c1      	bne.n	801b234 <_printf_float+0x314>
 801b2b0:	e684      	b.n	801afbc <_printf_float+0x9c>
 801b2b2:	9a08      	ldr	r2, [sp, #32]
 801b2b4:	2a01      	cmp	r2, #1
 801b2b6:	dc01      	bgt.n	801b2bc <_printf_float+0x39c>
 801b2b8:	07db      	lsls	r3, r3, #31
 801b2ba:	d537      	bpl.n	801b32c <_printf_float+0x40c>
 801b2bc:	2301      	movs	r3, #1
 801b2be:	4642      	mov	r2, r8
 801b2c0:	4631      	mov	r1, r6
 801b2c2:	4628      	mov	r0, r5
 801b2c4:	47b8      	blx	r7
 801b2c6:	3001      	adds	r0, #1
 801b2c8:	f43f ae78 	beq.w	801afbc <_printf_float+0x9c>
 801b2cc:	4653      	mov	r3, sl
 801b2ce:	465a      	mov	r2, fp
 801b2d0:	4631      	mov	r1, r6
 801b2d2:	4628      	mov	r0, r5
 801b2d4:	47b8      	blx	r7
 801b2d6:	3001      	adds	r0, #1
 801b2d8:	f43f ae70 	beq.w	801afbc <_printf_float+0x9c>
 801b2dc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801b2e0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b2e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b2e8:	d01b      	beq.n	801b322 <_printf_float+0x402>
 801b2ea:	9b08      	ldr	r3, [sp, #32]
 801b2ec:	f108 0201 	add.w	r2, r8, #1
 801b2f0:	3b01      	subs	r3, #1
 801b2f2:	4631      	mov	r1, r6
 801b2f4:	4628      	mov	r0, r5
 801b2f6:	47b8      	blx	r7
 801b2f8:	3001      	adds	r0, #1
 801b2fa:	d10e      	bne.n	801b31a <_printf_float+0x3fa>
 801b2fc:	e65e      	b.n	801afbc <_printf_float+0x9c>
 801b2fe:	2301      	movs	r3, #1
 801b300:	464a      	mov	r2, r9
 801b302:	4631      	mov	r1, r6
 801b304:	4628      	mov	r0, r5
 801b306:	47b8      	blx	r7
 801b308:	3001      	adds	r0, #1
 801b30a:	f43f ae57 	beq.w	801afbc <_printf_float+0x9c>
 801b30e:	f108 0801 	add.w	r8, r8, #1
 801b312:	9b08      	ldr	r3, [sp, #32]
 801b314:	3b01      	subs	r3, #1
 801b316:	4543      	cmp	r3, r8
 801b318:	dcf1      	bgt.n	801b2fe <_printf_float+0x3de>
 801b31a:	9b04      	ldr	r3, [sp, #16]
 801b31c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801b320:	e6db      	b.n	801b0da <_printf_float+0x1ba>
 801b322:	f04f 0800 	mov.w	r8, #0
 801b326:	f104 091a 	add.w	r9, r4, #26
 801b32a:	e7f2      	b.n	801b312 <_printf_float+0x3f2>
 801b32c:	2301      	movs	r3, #1
 801b32e:	4642      	mov	r2, r8
 801b330:	e7df      	b.n	801b2f2 <_printf_float+0x3d2>
 801b332:	2301      	movs	r3, #1
 801b334:	464a      	mov	r2, r9
 801b336:	4631      	mov	r1, r6
 801b338:	4628      	mov	r0, r5
 801b33a:	47b8      	blx	r7
 801b33c:	3001      	adds	r0, #1
 801b33e:	f43f ae3d 	beq.w	801afbc <_printf_float+0x9c>
 801b342:	f108 0801 	add.w	r8, r8, #1
 801b346:	68e3      	ldr	r3, [r4, #12]
 801b348:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b34a:	1a5b      	subs	r3, r3, r1
 801b34c:	4543      	cmp	r3, r8
 801b34e:	dcf0      	bgt.n	801b332 <_printf_float+0x412>
 801b350:	e6f7      	b.n	801b142 <_printf_float+0x222>
 801b352:	f04f 0800 	mov.w	r8, #0
 801b356:	f104 0919 	add.w	r9, r4, #25
 801b35a:	e7f4      	b.n	801b346 <_printf_float+0x426>

0801b35c <_printf_common>:
 801b35c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b360:	4616      	mov	r6, r2
 801b362:	4699      	mov	r9, r3
 801b364:	688a      	ldr	r2, [r1, #8]
 801b366:	690b      	ldr	r3, [r1, #16]
 801b368:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b36c:	4293      	cmp	r3, r2
 801b36e:	bfb8      	it	lt
 801b370:	4613      	movlt	r3, r2
 801b372:	6033      	str	r3, [r6, #0]
 801b374:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b378:	4607      	mov	r7, r0
 801b37a:	460c      	mov	r4, r1
 801b37c:	b10a      	cbz	r2, 801b382 <_printf_common+0x26>
 801b37e:	3301      	adds	r3, #1
 801b380:	6033      	str	r3, [r6, #0]
 801b382:	6823      	ldr	r3, [r4, #0]
 801b384:	0699      	lsls	r1, r3, #26
 801b386:	bf42      	ittt	mi
 801b388:	6833      	ldrmi	r3, [r6, #0]
 801b38a:	3302      	addmi	r3, #2
 801b38c:	6033      	strmi	r3, [r6, #0]
 801b38e:	6825      	ldr	r5, [r4, #0]
 801b390:	f015 0506 	ands.w	r5, r5, #6
 801b394:	d106      	bne.n	801b3a4 <_printf_common+0x48>
 801b396:	f104 0a19 	add.w	sl, r4, #25
 801b39a:	68e3      	ldr	r3, [r4, #12]
 801b39c:	6832      	ldr	r2, [r6, #0]
 801b39e:	1a9b      	subs	r3, r3, r2
 801b3a0:	42ab      	cmp	r3, r5
 801b3a2:	dc26      	bgt.n	801b3f2 <_printf_common+0x96>
 801b3a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b3a8:	1e13      	subs	r3, r2, #0
 801b3aa:	6822      	ldr	r2, [r4, #0]
 801b3ac:	bf18      	it	ne
 801b3ae:	2301      	movne	r3, #1
 801b3b0:	0692      	lsls	r2, r2, #26
 801b3b2:	d42b      	bmi.n	801b40c <_printf_common+0xb0>
 801b3b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b3b8:	4649      	mov	r1, r9
 801b3ba:	4638      	mov	r0, r7
 801b3bc:	47c0      	blx	r8
 801b3be:	3001      	adds	r0, #1
 801b3c0:	d01e      	beq.n	801b400 <_printf_common+0xa4>
 801b3c2:	6823      	ldr	r3, [r4, #0]
 801b3c4:	68e5      	ldr	r5, [r4, #12]
 801b3c6:	6832      	ldr	r2, [r6, #0]
 801b3c8:	f003 0306 	and.w	r3, r3, #6
 801b3cc:	2b04      	cmp	r3, #4
 801b3ce:	bf08      	it	eq
 801b3d0:	1aad      	subeq	r5, r5, r2
 801b3d2:	68a3      	ldr	r3, [r4, #8]
 801b3d4:	6922      	ldr	r2, [r4, #16]
 801b3d6:	bf0c      	ite	eq
 801b3d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b3dc:	2500      	movne	r5, #0
 801b3de:	4293      	cmp	r3, r2
 801b3e0:	bfc4      	itt	gt
 801b3e2:	1a9b      	subgt	r3, r3, r2
 801b3e4:	18ed      	addgt	r5, r5, r3
 801b3e6:	2600      	movs	r6, #0
 801b3e8:	341a      	adds	r4, #26
 801b3ea:	42b5      	cmp	r5, r6
 801b3ec:	d11a      	bne.n	801b424 <_printf_common+0xc8>
 801b3ee:	2000      	movs	r0, #0
 801b3f0:	e008      	b.n	801b404 <_printf_common+0xa8>
 801b3f2:	2301      	movs	r3, #1
 801b3f4:	4652      	mov	r2, sl
 801b3f6:	4649      	mov	r1, r9
 801b3f8:	4638      	mov	r0, r7
 801b3fa:	47c0      	blx	r8
 801b3fc:	3001      	adds	r0, #1
 801b3fe:	d103      	bne.n	801b408 <_printf_common+0xac>
 801b400:	f04f 30ff 	mov.w	r0, #4294967295
 801b404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b408:	3501      	adds	r5, #1
 801b40a:	e7c6      	b.n	801b39a <_printf_common+0x3e>
 801b40c:	18e1      	adds	r1, r4, r3
 801b40e:	1c5a      	adds	r2, r3, #1
 801b410:	2030      	movs	r0, #48	; 0x30
 801b412:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b416:	4422      	add	r2, r4
 801b418:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b41c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b420:	3302      	adds	r3, #2
 801b422:	e7c7      	b.n	801b3b4 <_printf_common+0x58>
 801b424:	2301      	movs	r3, #1
 801b426:	4622      	mov	r2, r4
 801b428:	4649      	mov	r1, r9
 801b42a:	4638      	mov	r0, r7
 801b42c:	47c0      	blx	r8
 801b42e:	3001      	adds	r0, #1
 801b430:	d0e6      	beq.n	801b400 <_printf_common+0xa4>
 801b432:	3601      	adds	r6, #1
 801b434:	e7d9      	b.n	801b3ea <_printf_common+0x8e>
	...

0801b438 <_printf_i>:
 801b438:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b43c:	7e0f      	ldrb	r7, [r1, #24]
 801b43e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b440:	2f78      	cmp	r7, #120	; 0x78
 801b442:	4691      	mov	r9, r2
 801b444:	4680      	mov	r8, r0
 801b446:	460c      	mov	r4, r1
 801b448:	469a      	mov	sl, r3
 801b44a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801b44e:	d807      	bhi.n	801b460 <_printf_i+0x28>
 801b450:	2f62      	cmp	r7, #98	; 0x62
 801b452:	d80a      	bhi.n	801b46a <_printf_i+0x32>
 801b454:	2f00      	cmp	r7, #0
 801b456:	f000 80d8 	beq.w	801b60a <_printf_i+0x1d2>
 801b45a:	2f58      	cmp	r7, #88	; 0x58
 801b45c:	f000 80a3 	beq.w	801b5a6 <_printf_i+0x16e>
 801b460:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b464:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b468:	e03a      	b.n	801b4e0 <_printf_i+0xa8>
 801b46a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b46e:	2b15      	cmp	r3, #21
 801b470:	d8f6      	bhi.n	801b460 <_printf_i+0x28>
 801b472:	a101      	add	r1, pc, #4	; (adr r1, 801b478 <_printf_i+0x40>)
 801b474:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b478:	0801b4d1 	.word	0x0801b4d1
 801b47c:	0801b4e5 	.word	0x0801b4e5
 801b480:	0801b461 	.word	0x0801b461
 801b484:	0801b461 	.word	0x0801b461
 801b488:	0801b461 	.word	0x0801b461
 801b48c:	0801b461 	.word	0x0801b461
 801b490:	0801b4e5 	.word	0x0801b4e5
 801b494:	0801b461 	.word	0x0801b461
 801b498:	0801b461 	.word	0x0801b461
 801b49c:	0801b461 	.word	0x0801b461
 801b4a0:	0801b461 	.word	0x0801b461
 801b4a4:	0801b5f1 	.word	0x0801b5f1
 801b4a8:	0801b515 	.word	0x0801b515
 801b4ac:	0801b5d3 	.word	0x0801b5d3
 801b4b0:	0801b461 	.word	0x0801b461
 801b4b4:	0801b461 	.word	0x0801b461
 801b4b8:	0801b613 	.word	0x0801b613
 801b4bc:	0801b461 	.word	0x0801b461
 801b4c0:	0801b515 	.word	0x0801b515
 801b4c4:	0801b461 	.word	0x0801b461
 801b4c8:	0801b461 	.word	0x0801b461
 801b4cc:	0801b5db 	.word	0x0801b5db
 801b4d0:	682b      	ldr	r3, [r5, #0]
 801b4d2:	1d1a      	adds	r2, r3, #4
 801b4d4:	681b      	ldr	r3, [r3, #0]
 801b4d6:	602a      	str	r2, [r5, #0]
 801b4d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b4dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b4e0:	2301      	movs	r3, #1
 801b4e2:	e0a3      	b.n	801b62c <_printf_i+0x1f4>
 801b4e4:	6820      	ldr	r0, [r4, #0]
 801b4e6:	6829      	ldr	r1, [r5, #0]
 801b4e8:	0606      	lsls	r6, r0, #24
 801b4ea:	f101 0304 	add.w	r3, r1, #4
 801b4ee:	d50a      	bpl.n	801b506 <_printf_i+0xce>
 801b4f0:	680e      	ldr	r6, [r1, #0]
 801b4f2:	602b      	str	r3, [r5, #0]
 801b4f4:	2e00      	cmp	r6, #0
 801b4f6:	da03      	bge.n	801b500 <_printf_i+0xc8>
 801b4f8:	232d      	movs	r3, #45	; 0x2d
 801b4fa:	4276      	negs	r6, r6
 801b4fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b500:	485e      	ldr	r0, [pc, #376]	; (801b67c <_printf_i+0x244>)
 801b502:	230a      	movs	r3, #10
 801b504:	e019      	b.n	801b53a <_printf_i+0x102>
 801b506:	680e      	ldr	r6, [r1, #0]
 801b508:	602b      	str	r3, [r5, #0]
 801b50a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801b50e:	bf18      	it	ne
 801b510:	b236      	sxthne	r6, r6
 801b512:	e7ef      	b.n	801b4f4 <_printf_i+0xbc>
 801b514:	682b      	ldr	r3, [r5, #0]
 801b516:	6820      	ldr	r0, [r4, #0]
 801b518:	1d19      	adds	r1, r3, #4
 801b51a:	6029      	str	r1, [r5, #0]
 801b51c:	0601      	lsls	r1, r0, #24
 801b51e:	d501      	bpl.n	801b524 <_printf_i+0xec>
 801b520:	681e      	ldr	r6, [r3, #0]
 801b522:	e002      	b.n	801b52a <_printf_i+0xf2>
 801b524:	0646      	lsls	r6, r0, #25
 801b526:	d5fb      	bpl.n	801b520 <_printf_i+0xe8>
 801b528:	881e      	ldrh	r6, [r3, #0]
 801b52a:	4854      	ldr	r0, [pc, #336]	; (801b67c <_printf_i+0x244>)
 801b52c:	2f6f      	cmp	r7, #111	; 0x6f
 801b52e:	bf0c      	ite	eq
 801b530:	2308      	moveq	r3, #8
 801b532:	230a      	movne	r3, #10
 801b534:	2100      	movs	r1, #0
 801b536:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b53a:	6865      	ldr	r5, [r4, #4]
 801b53c:	60a5      	str	r5, [r4, #8]
 801b53e:	2d00      	cmp	r5, #0
 801b540:	bfa2      	ittt	ge
 801b542:	6821      	ldrge	r1, [r4, #0]
 801b544:	f021 0104 	bicge.w	r1, r1, #4
 801b548:	6021      	strge	r1, [r4, #0]
 801b54a:	b90e      	cbnz	r6, 801b550 <_printf_i+0x118>
 801b54c:	2d00      	cmp	r5, #0
 801b54e:	d04d      	beq.n	801b5ec <_printf_i+0x1b4>
 801b550:	4615      	mov	r5, r2
 801b552:	fbb6 f1f3 	udiv	r1, r6, r3
 801b556:	fb03 6711 	mls	r7, r3, r1, r6
 801b55a:	5dc7      	ldrb	r7, [r0, r7]
 801b55c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801b560:	4637      	mov	r7, r6
 801b562:	42bb      	cmp	r3, r7
 801b564:	460e      	mov	r6, r1
 801b566:	d9f4      	bls.n	801b552 <_printf_i+0x11a>
 801b568:	2b08      	cmp	r3, #8
 801b56a:	d10b      	bne.n	801b584 <_printf_i+0x14c>
 801b56c:	6823      	ldr	r3, [r4, #0]
 801b56e:	07de      	lsls	r6, r3, #31
 801b570:	d508      	bpl.n	801b584 <_printf_i+0x14c>
 801b572:	6923      	ldr	r3, [r4, #16]
 801b574:	6861      	ldr	r1, [r4, #4]
 801b576:	4299      	cmp	r1, r3
 801b578:	bfde      	ittt	le
 801b57a:	2330      	movle	r3, #48	; 0x30
 801b57c:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b580:	f105 35ff 	addle.w	r5, r5, #4294967295
 801b584:	1b52      	subs	r2, r2, r5
 801b586:	6122      	str	r2, [r4, #16]
 801b588:	f8cd a000 	str.w	sl, [sp]
 801b58c:	464b      	mov	r3, r9
 801b58e:	aa03      	add	r2, sp, #12
 801b590:	4621      	mov	r1, r4
 801b592:	4640      	mov	r0, r8
 801b594:	f7ff fee2 	bl	801b35c <_printf_common>
 801b598:	3001      	adds	r0, #1
 801b59a:	d14c      	bne.n	801b636 <_printf_i+0x1fe>
 801b59c:	f04f 30ff 	mov.w	r0, #4294967295
 801b5a0:	b004      	add	sp, #16
 801b5a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b5a6:	4835      	ldr	r0, [pc, #212]	; (801b67c <_printf_i+0x244>)
 801b5a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801b5ac:	6829      	ldr	r1, [r5, #0]
 801b5ae:	6823      	ldr	r3, [r4, #0]
 801b5b0:	f851 6b04 	ldr.w	r6, [r1], #4
 801b5b4:	6029      	str	r1, [r5, #0]
 801b5b6:	061d      	lsls	r5, r3, #24
 801b5b8:	d514      	bpl.n	801b5e4 <_printf_i+0x1ac>
 801b5ba:	07df      	lsls	r7, r3, #31
 801b5bc:	bf44      	itt	mi
 801b5be:	f043 0320 	orrmi.w	r3, r3, #32
 801b5c2:	6023      	strmi	r3, [r4, #0]
 801b5c4:	b91e      	cbnz	r6, 801b5ce <_printf_i+0x196>
 801b5c6:	6823      	ldr	r3, [r4, #0]
 801b5c8:	f023 0320 	bic.w	r3, r3, #32
 801b5cc:	6023      	str	r3, [r4, #0]
 801b5ce:	2310      	movs	r3, #16
 801b5d0:	e7b0      	b.n	801b534 <_printf_i+0xfc>
 801b5d2:	6823      	ldr	r3, [r4, #0]
 801b5d4:	f043 0320 	orr.w	r3, r3, #32
 801b5d8:	6023      	str	r3, [r4, #0]
 801b5da:	2378      	movs	r3, #120	; 0x78
 801b5dc:	4828      	ldr	r0, [pc, #160]	; (801b680 <_printf_i+0x248>)
 801b5de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b5e2:	e7e3      	b.n	801b5ac <_printf_i+0x174>
 801b5e4:	0659      	lsls	r1, r3, #25
 801b5e6:	bf48      	it	mi
 801b5e8:	b2b6      	uxthmi	r6, r6
 801b5ea:	e7e6      	b.n	801b5ba <_printf_i+0x182>
 801b5ec:	4615      	mov	r5, r2
 801b5ee:	e7bb      	b.n	801b568 <_printf_i+0x130>
 801b5f0:	682b      	ldr	r3, [r5, #0]
 801b5f2:	6826      	ldr	r6, [r4, #0]
 801b5f4:	6961      	ldr	r1, [r4, #20]
 801b5f6:	1d18      	adds	r0, r3, #4
 801b5f8:	6028      	str	r0, [r5, #0]
 801b5fa:	0635      	lsls	r5, r6, #24
 801b5fc:	681b      	ldr	r3, [r3, #0]
 801b5fe:	d501      	bpl.n	801b604 <_printf_i+0x1cc>
 801b600:	6019      	str	r1, [r3, #0]
 801b602:	e002      	b.n	801b60a <_printf_i+0x1d2>
 801b604:	0670      	lsls	r0, r6, #25
 801b606:	d5fb      	bpl.n	801b600 <_printf_i+0x1c8>
 801b608:	8019      	strh	r1, [r3, #0]
 801b60a:	2300      	movs	r3, #0
 801b60c:	6123      	str	r3, [r4, #16]
 801b60e:	4615      	mov	r5, r2
 801b610:	e7ba      	b.n	801b588 <_printf_i+0x150>
 801b612:	682b      	ldr	r3, [r5, #0]
 801b614:	1d1a      	adds	r2, r3, #4
 801b616:	602a      	str	r2, [r5, #0]
 801b618:	681d      	ldr	r5, [r3, #0]
 801b61a:	6862      	ldr	r2, [r4, #4]
 801b61c:	2100      	movs	r1, #0
 801b61e:	4628      	mov	r0, r5
 801b620:	f7e4 fe8e 	bl	8000340 <memchr>
 801b624:	b108      	cbz	r0, 801b62a <_printf_i+0x1f2>
 801b626:	1b40      	subs	r0, r0, r5
 801b628:	6060      	str	r0, [r4, #4]
 801b62a:	6863      	ldr	r3, [r4, #4]
 801b62c:	6123      	str	r3, [r4, #16]
 801b62e:	2300      	movs	r3, #0
 801b630:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b634:	e7a8      	b.n	801b588 <_printf_i+0x150>
 801b636:	6923      	ldr	r3, [r4, #16]
 801b638:	462a      	mov	r2, r5
 801b63a:	4649      	mov	r1, r9
 801b63c:	4640      	mov	r0, r8
 801b63e:	47d0      	blx	sl
 801b640:	3001      	adds	r0, #1
 801b642:	d0ab      	beq.n	801b59c <_printf_i+0x164>
 801b644:	6823      	ldr	r3, [r4, #0]
 801b646:	079b      	lsls	r3, r3, #30
 801b648:	d413      	bmi.n	801b672 <_printf_i+0x23a>
 801b64a:	68e0      	ldr	r0, [r4, #12]
 801b64c:	9b03      	ldr	r3, [sp, #12]
 801b64e:	4298      	cmp	r0, r3
 801b650:	bfb8      	it	lt
 801b652:	4618      	movlt	r0, r3
 801b654:	e7a4      	b.n	801b5a0 <_printf_i+0x168>
 801b656:	2301      	movs	r3, #1
 801b658:	4632      	mov	r2, r6
 801b65a:	4649      	mov	r1, r9
 801b65c:	4640      	mov	r0, r8
 801b65e:	47d0      	blx	sl
 801b660:	3001      	adds	r0, #1
 801b662:	d09b      	beq.n	801b59c <_printf_i+0x164>
 801b664:	3501      	adds	r5, #1
 801b666:	68e3      	ldr	r3, [r4, #12]
 801b668:	9903      	ldr	r1, [sp, #12]
 801b66a:	1a5b      	subs	r3, r3, r1
 801b66c:	42ab      	cmp	r3, r5
 801b66e:	dcf2      	bgt.n	801b656 <_printf_i+0x21e>
 801b670:	e7eb      	b.n	801b64a <_printf_i+0x212>
 801b672:	2500      	movs	r5, #0
 801b674:	f104 0619 	add.w	r6, r4, #25
 801b678:	e7f5      	b.n	801b666 <_printf_i+0x22e>
 801b67a:	bf00      	nop
 801b67c:	0801fc5a 	.word	0x0801fc5a
 801b680:	0801fc6b 	.word	0x0801fc6b

0801b684 <_scanf_float>:
 801b684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b688:	b087      	sub	sp, #28
 801b68a:	4617      	mov	r7, r2
 801b68c:	9303      	str	r3, [sp, #12]
 801b68e:	688b      	ldr	r3, [r1, #8]
 801b690:	1e5a      	subs	r2, r3, #1
 801b692:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801b696:	bf83      	ittte	hi
 801b698:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801b69c:	195b      	addhi	r3, r3, r5
 801b69e:	9302      	strhi	r3, [sp, #8]
 801b6a0:	2300      	movls	r3, #0
 801b6a2:	bf86      	itte	hi
 801b6a4:	f240 135d 	movwhi	r3, #349	; 0x15d
 801b6a8:	608b      	strhi	r3, [r1, #8]
 801b6aa:	9302      	strls	r3, [sp, #8]
 801b6ac:	680b      	ldr	r3, [r1, #0]
 801b6ae:	468b      	mov	fp, r1
 801b6b0:	2500      	movs	r5, #0
 801b6b2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801b6b6:	f84b 3b1c 	str.w	r3, [fp], #28
 801b6ba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801b6be:	4680      	mov	r8, r0
 801b6c0:	460c      	mov	r4, r1
 801b6c2:	465e      	mov	r6, fp
 801b6c4:	46aa      	mov	sl, r5
 801b6c6:	46a9      	mov	r9, r5
 801b6c8:	9501      	str	r5, [sp, #4]
 801b6ca:	68a2      	ldr	r2, [r4, #8]
 801b6cc:	b152      	cbz	r2, 801b6e4 <_scanf_float+0x60>
 801b6ce:	683b      	ldr	r3, [r7, #0]
 801b6d0:	781b      	ldrb	r3, [r3, #0]
 801b6d2:	2b4e      	cmp	r3, #78	; 0x4e
 801b6d4:	d864      	bhi.n	801b7a0 <_scanf_float+0x11c>
 801b6d6:	2b40      	cmp	r3, #64	; 0x40
 801b6d8:	d83c      	bhi.n	801b754 <_scanf_float+0xd0>
 801b6da:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801b6de:	b2c8      	uxtb	r0, r1
 801b6e0:	280e      	cmp	r0, #14
 801b6e2:	d93a      	bls.n	801b75a <_scanf_float+0xd6>
 801b6e4:	f1b9 0f00 	cmp.w	r9, #0
 801b6e8:	d003      	beq.n	801b6f2 <_scanf_float+0x6e>
 801b6ea:	6823      	ldr	r3, [r4, #0]
 801b6ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b6f0:	6023      	str	r3, [r4, #0]
 801b6f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b6f6:	f1ba 0f01 	cmp.w	sl, #1
 801b6fa:	f200 8113 	bhi.w	801b924 <_scanf_float+0x2a0>
 801b6fe:	455e      	cmp	r6, fp
 801b700:	f200 8105 	bhi.w	801b90e <_scanf_float+0x28a>
 801b704:	2501      	movs	r5, #1
 801b706:	4628      	mov	r0, r5
 801b708:	b007      	add	sp, #28
 801b70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b70e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801b712:	2a0d      	cmp	r2, #13
 801b714:	d8e6      	bhi.n	801b6e4 <_scanf_float+0x60>
 801b716:	a101      	add	r1, pc, #4	; (adr r1, 801b71c <_scanf_float+0x98>)
 801b718:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801b71c:	0801b85b 	.word	0x0801b85b
 801b720:	0801b6e5 	.word	0x0801b6e5
 801b724:	0801b6e5 	.word	0x0801b6e5
 801b728:	0801b6e5 	.word	0x0801b6e5
 801b72c:	0801b8bb 	.word	0x0801b8bb
 801b730:	0801b893 	.word	0x0801b893
 801b734:	0801b6e5 	.word	0x0801b6e5
 801b738:	0801b6e5 	.word	0x0801b6e5
 801b73c:	0801b869 	.word	0x0801b869
 801b740:	0801b6e5 	.word	0x0801b6e5
 801b744:	0801b6e5 	.word	0x0801b6e5
 801b748:	0801b6e5 	.word	0x0801b6e5
 801b74c:	0801b6e5 	.word	0x0801b6e5
 801b750:	0801b821 	.word	0x0801b821
 801b754:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801b758:	e7db      	b.n	801b712 <_scanf_float+0x8e>
 801b75a:	290e      	cmp	r1, #14
 801b75c:	d8c2      	bhi.n	801b6e4 <_scanf_float+0x60>
 801b75e:	a001      	add	r0, pc, #4	; (adr r0, 801b764 <_scanf_float+0xe0>)
 801b760:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801b764:	0801b813 	.word	0x0801b813
 801b768:	0801b6e5 	.word	0x0801b6e5
 801b76c:	0801b813 	.word	0x0801b813
 801b770:	0801b8a7 	.word	0x0801b8a7
 801b774:	0801b6e5 	.word	0x0801b6e5
 801b778:	0801b7c1 	.word	0x0801b7c1
 801b77c:	0801b7fd 	.word	0x0801b7fd
 801b780:	0801b7fd 	.word	0x0801b7fd
 801b784:	0801b7fd 	.word	0x0801b7fd
 801b788:	0801b7fd 	.word	0x0801b7fd
 801b78c:	0801b7fd 	.word	0x0801b7fd
 801b790:	0801b7fd 	.word	0x0801b7fd
 801b794:	0801b7fd 	.word	0x0801b7fd
 801b798:	0801b7fd 	.word	0x0801b7fd
 801b79c:	0801b7fd 	.word	0x0801b7fd
 801b7a0:	2b6e      	cmp	r3, #110	; 0x6e
 801b7a2:	d809      	bhi.n	801b7b8 <_scanf_float+0x134>
 801b7a4:	2b60      	cmp	r3, #96	; 0x60
 801b7a6:	d8b2      	bhi.n	801b70e <_scanf_float+0x8a>
 801b7a8:	2b54      	cmp	r3, #84	; 0x54
 801b7aa:	d077      	beq.n	801b89c <_scanf_float+0x218>
 801b7ac:	2b59      	cmp	r3, #89	; 0x59
 801b7ae:	d199      	bne.n	801b6e4 <_scanf_float+0x60>
 801b7b0:	2d07      	cmp	r5, #7
 801b7b2:	d197      	bne.n	801b6e4 <_scanf_float+0x60>
 801b7b4:	2508      	movs	r5, #8
 801b7b6:	e029      	b.n	801b80c <_scanf_float+0x188>
 801b7b8:	2b74      	cmp	r3, #116	; 0x74
 801b7ba:	d06f      	beq.n	801b89c <_scanf_float+0x218>
 801b7bc:	2b79      	cmp	r3, #121	; 0x79
 801b7be:	e7f6      	b.n	801b7ae <_scanf_float+0x12a>
 801b7c0:	6821      	ldr	r1, [r4, #0]
 801b7c2:	05c8      	lsls	r0, r1, #23
 801b7c4:	d51a      	bpl.n	801b7fc <_scanf_float+0x178>
 801b7c6:	9b02      	ldr	r3, [sp, #8]
 801b7c8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801b7cc:	6021      	str	r1, [r4, #0]
 801b7ce:	f109 0901 	add.w	r9, r9, #1
 801b7d2:	b11b      	cbz	r3, 801b7dc <_scanf_float+0x158>
 801b7d4:	3b01      	subs	r3, #1
 801b7d6:	3201      	adds	r2, #1
 801b7d8:	9302      	str	r3, [sp, #8]
 801b7da:	60a2      	str	r2, [r4, #8]
 801b7dc:	68a3      	ldr	r3, [r4, #8]
 801b7de:	3b01      	subs	r3, #1
 801b7e0:	60a3      	str	r3, [r4, #8]
 801b7e2:	6923      	ldr	r3, [r4, #16]
 801b7e4:	3301      	adds	r3, #1
 801b7e6:	6123      	str	r3, [r4, #16]
 801b7e8:	687b      	ldr	r3, [r7, #4]
 801b7ea:	3b01      	subs	r3, #1
 801b7ec:	2b00      	cmp	r3, #0
 801b7ee:	607b      	str	r3, [r7, #4]
 801b7f0:	f340 8084 	ble.w	801b8fc <_scanf_float+0x278>
 801b7f4:	683b      	ldr	r3, [r7, #0]
 801b7f6:	3301      	adds	r3, #1
 801b7f8:	603b      	str	r3, [r7, #0]
 801b7fa:	e766      	b.n	801b6ca <_scanf_float+0x46>
 801b7fc:	eb1a 0f05 	cmn.w	sl, r5
 801b800:	f47f af70 	bne.w	801b6e4 <_scanf_float+0x60>
 801b804:	6822      	ldr	r2, [r4, #0]
 801b806:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801b80a:	6022      	str	r2, [r4, #0]
 801b80c:	f806 3b01 	strb.w	r3, [r6], #1
 801b810:	e7e4      	b.n	801b7dc <_scanf_float+0x158>
 801b812:	6822      	ldr	r2, [r4, #0]
 801b814:	0610      	lsls	r0, r2, #24
 801b816:	f57f af65 	bpl.w	801b6e4 <_scanf_float+0x60>
 801b81a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801b81e:	e7f4      	b.n	801b80a <_scanf_float+0x186>
 801b820:	f1ba 0f00 	cmp.w	sl, #0
 801b824:	d10e      	bne.n	801b844 <_scanf_float+0x1c0>
 801b826:	f1b9 0f00 	cmp.w	r9, #0
 801b82a:	d10e      	bne.n	801b84a <_scanf_float+0x1c6>
 801b82c:	6822      	ldr	r2, [r4, #0]
 801b82e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801b832:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801b836:	d108      	bne.n	801b84a <_scanf_float+0x1c6>
 801b838:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b83c:	6022      	str	r2, [r4, #0]
 801b83e:	f04f 0a01 	mov.w	sl, #1
 801b842:	e7e3      	b.n	801b80c <_scanf_float+0x188>
 801b844:	f1ba 0f02 	cmp.w	sl, #2
 801b848:	d055      	beq.n	801b8f6 <_scanf_float+0x272>
 801b84a:	2d01      	cmp	r5, #1
 801b84c:	d002      	beq.n	801b854 <_scanf_float+0x1d0>
 801b84e:	2d04      	cmp	r5, #4
 801b850:	f47f af48 	bne.w	801b6e4 <_scanf_float+0x60>
 801b854:	3501      	adds	r5, #1
 801b856:	b2ed      	uxtb	r5, r5
 801b858:	e7d8      	b.n	801b80c <_scanf_float+0x188>
 801b85a:	f1ba 0f01 	cmp.w	sl, #1
 801b85e:	f47f af41 	bne.w	801b6e4 <_scanf_float+0x60>
 801b862:	f04f 0a02 	mov.w	sl, #2
 801b866:	e7d1      	b.n	801b80c <_scanf_float+0x188>
 801b868:	b97d      	cbnz	r5, 801b88a <_scanf_float+0x206>
 801b86a:	f1b9 0f00 	cmp.w	r9, #0
 801b86e:	f47f af3c 	bne.w	801b6ea <_scanf_float+0x66>
 801b872:	6822      	ldr	r2, [r4, #0]
 801b874:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801b878:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801b87c:	f47f af39 	bne.w	801b6f2 <_scanf_float+0x6e>
 801b880:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b884:	6022      	str	r2, [r4, #0]
 801b886:	2501      	movs	r5, #1
 801b888:	e7c0      	b.n	801b80c <_scanf_float+0x188>
 801b88a:	2d03      	cmp	r5, #3
 801b88c:	d0e2      	beq.n	801b854 <_scanf_float+0x1d0>
 801b88e:	2d05      	cmp	r5, #5
 801b890:	e7de      	b.n	801b850 <_scanf_float+0x1cc>
 801b892:	2d02      	cmp	r5, #2
 801b894:	f47f af26 	bne.w	801b6e4 <_scanf_float+0x60>
 801b898:	2503      	movs	r5, #3
 801b89a:	e7b7      	b.n	801b80c <_scanf_float+0x188>
 801b89c:	2d06      	cmp	r5, #6
 801b89e:	f47f af21 	bne.w	801b6e4 <_scanf_float+0x60>
 801b8a2:	2507      	movs	r5, #7
 801b8a4:	e7b2      	b.n	801b80c <_scanf_float+0x188>
 801b8a6:	6822      	ldr	r2, [r4, #0]
 801b8a8:	0591      	lsls	r1, r2, #22
 801b8aa:	f57f af1b 	bpl.w	801b6e4 <_scanf_float+0x60>
 801b8ae:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801b8b2:	6022      	str	r2, [r4, #0]
 801b8b4:	f8cd 9004 	str.w	r9, [sp, #4]
 801b8b8:	e7a8      	b.n	801b80c <_scanf_float+0x188>
 801b8ba:	6822      	ldr	r2, [r4, #0]
 801b8bc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801b8c0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801b8c4:	d006      	beq.n	801b8d4 <_scanf_float+0x250>
 801b8c6:	0550      	lsls	r0, r2, #21
 801b8c8:	f57f af0c 	bpl.w	801b6e4 <_scanf_float+0x60>
 801b8cc:	f1b9 0f00 	cmp.w	r9, #0
 801b8d0:	f43f af0f 	beq.w	801b6f2 <_scanf_float+0x6e>
 801b8d4:	0591      	lsls	r1, r2, #22
 801b8d6:	bf58      	it	pl
 801b8d8:	9901      	ldrpl	r1, [sp, #4]
 801b8da:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801b8de:	bf58      	it	pl
 801b8e0:	eba9 0101 	subpl.w	r1, r9, r1
 801b8e4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801b8e8:	bf58      	it	pl
 801b8ea:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801b8ee:	6022      	str	r2, [r4, #0]
 801b8f0:	f04f 0900 	mov.w	r9, #0
 801b8f4:	e78a      	b.n	801b80c <_scanf_float+0x188>
 801b8f6:	f04f 0a03 	mov.w	sl, #3
 801b8fa:	e787      	b.n	801b80c <_scanf_float+0x188>
 801b8fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801b900:	4639      	mov	r1, r7
 801b902:	4640      	mov	r0, r8
 801b904:	4798      	blx	r3
 801b906:	2800      	cmp	r0, #0
 801b908:	f43f aedf 	beq.w	801b6ca <_scanf_float+0x46>
 801b90c:	e6ea      	b.n	801b6e4 <_scanf_float+0x60>
 801b90e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b912:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b916:	463a      	mov	r2, r7
 801b918:	4640      	mov	r0, r8
 801b91a:	4798      	blx	r3
 801b91c:	6923      	ldr	r3, [r4, #16]
 801b91e:	3b01      	subs	r3, #1
 801b920:	6123      	str	r3, [r4, #16]
 801b922:	e6ec      	b.n	801b6fe <_scanf_float+0x7a>
 801b924:	1e6b      	subs	r3, r5, #1
 801b926:	2b06      	cmp	r3, #6
 801b928:	d825      	bhi.n	801b976 <_scanf_float+0x2f2>
 801b92a:	2d02      	cmp	r5, #2
 801b92c:	d836      	bhi.n	801b99c <_scanf_float+0x318>
 801b92e:	455e      	cmp	r6, fp
 801b930:	f67f aee8 	bls.w	801b704 <_scanf_float+0x80>
 801b934:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b938:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b93c:	463a      	mov	r2, r7
 801b93e:	4640      	mov	r0, r8
 801b940:	4798      	blx	r3
 801b942:	6923      	ldr	r3, [r4, #16]
 801b944:	3b01      	subs	r3, #1
 801b946:	6123      	str	r3, [r4, #16]
 801b948:	e7f1      	b.n	801b92e <_scanf_float+0x2aa>
 801b94a:	9802      	ldr	r0, [sp, #8]
 801b94c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b950:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801b954:	9002      	str	r0, [sp, #8]
 801b956:	463a      	mov	r2, r7
 801b958:	4640      	mov	r0, r8
 801b95a:	4798      	blx	r3
 801b95c:	6923      	ldr	r3, [r4, #16]
 801b95e:	3b01      	subs	r3, #1
 801b960:	6123      	str	r3, [r4, #16]
 801b962:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b966:	fa5f fa8a 	uxtb.w	sl, sl
 801b96a:	f1ba 0f02 	cmp.w	sl, #2
 801b96e:	d1ec      	bne.n	801b94a <_scanf_float+0x2c6>
 801b970:	3d03      	subs	r5, #3
 801b972:	b2ed      	uxtb	r5, r5
 801b974:	1b76      	subs	r6, r6, r5
 801b976:	6823      	ldr	r3, [r4, #0]
 801b978:	05da      	lsls	r2, r3, #23
 801b97a:	d52f      	bpl.n	801b9dc <_scanf_float+0x358>
 801b97c:	055b      	lsls	r3, r3, #21
 801b97e:	d510      	bpl.n	801b9a2 <_scanf_float+0x31e>
 801b980:	455e      	cmp	r6, fp
 801b982:	f67f aebf 	bls.w	801b704 <_scanf_float+0x80>
 801b986:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b98a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801b98e:	463a      	mov	r2, r7
 801b990:	4640      	mov	r0, r8
 801b992:	4798      	blx	r3
 801b994:	6923      	ldr	r3, [r4, #16]
 801b996:	3b01      	subs	r3, #1
 801b998:	6123      	str	r3, [r4, #16]
 801b99a:	e7f1      	b.n	801b980 <_scanf_float+0x2fc>
 801b99c:	46aa      	mov	sl, r5
 801b99e:	9602      	str	r6, [sp, #8]
 801b9a0:	e7df      	b.n	801b962 <_scanf_float+0x2de>
 801b9a2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801b9a6:	6923      	ldr	r3, [r4, #16]
 801b9a8:	2965      	cmp	r1, #101	; 0x65
 801b9aa:	f103 33ff 	add.w	r3, r3, #4294967295
 801b9ae:	f106 35ff 	add.w	r5, r6, #4294967295
 801b9b2:	6123      	str	r3, [r4, #16]
 801b9b4:	d00c      	beq.n	801b9d0 <_scanf_float+0x34c>
 801b9b6:	2945      	cmp	r1, #69	; 0x45
 801b9b8:	d00a      	beq.n	801b9d0 <_scanf_float+0x34c>
 801b9ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b9be:	463a      	mov	r2, r7
 801b9c0:	4640      	mov	r0, r8
 801b9c2:	4798      	blx	r3
 801b9c4:	6923      	ldr	r3, [r4, #16]
 801b9c6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801b9ca:	3b01      	subs	r3, #1
 801b9cc:	1eb5      	subs	r5, r6, #2
 801b9ce:	6123      	str	r3, [r4, #16]
 801b9d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b9d4:	463a      	mov	r2, r7
 801b9d6:	4640      	mov	r0, r8
 801b9d8:	4798      	blx	r3
 801b9da:	462e      	mov	r6, r5
 801b9dc:	6825      	ldr	r5, [r4, #0]
 801b9de:	f015 0510 	ands.w	r5, r5, #16
 801b9e2:	d14e      	bne.n	801ba82 <_scanf_float+0x3fe>
 801b9e4:	7035      	strb	r5, [r6, #0]
 801b9e6:	6823      	ldr	r3, [r4, #0]
 801b9e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801b9ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b9f0:	d119      	bne.n	801ba26 <_scanf_float+0x3a2>
 801b9f2:	9b01      	ldr	r3, [sp, #4]
 801b9f4:	454b      	cmp	r3, r9
 801b9f6:	eba3 0209 	sub.w	r2, r3, r9
 801b9fa:	d121      	bne.n	801ba40 <_scanf_float+0x3bc>
 801b9fc:	2200      	movs	r2, #0
 801b9fe:	4659      	mov	r1, fp
 801ba00:	4640      	mov	r0, r8
 801ba02:	f000 fe87 	bl	801c714 <_strtod_r>
 801ba06:	6822      	ldr	r2, [r4, #0]
 801ba08:	9b03      	ldr	r3, [sp, #12]
 801ba0a:	f012 0f02 	tst.w	r2, #2
 801ba0e:	681b      	ldr	r3, [r3, #0]
 801ba10:	d021      	beq.n	801ba56 <_scanf_float+0x3d2>
 801ba12:	9903      	ldr	r1, [sp, #12]
 801ba14:	1d1a      	adds	r2, r3, #4
 801ba16:	600a      	str	r2, [r1, #0]
 801ba18:	681b      	ldr	r3, [r3, #0]
 801ba1a:	ed83 0b00 	vstr	d0, [r3]
 801ba1e:	68e3      	ldr	r3, [r4, #12]
 801ba20:	3301      	adds	r3, #1
 801ba22:	60e3      	str	r3, [r4, #12]
 801ba24:	e66f      	b.n	801b706 <_scanf_float+0x82>
 801ba26:	9b04      	ldr	r3, [sp, #16]
 801ba28:	2b00      	cmp	r3, #0
 801ba2a:	d0e7      	beq.n	801b9fc <_scanf_float+0x378>
 801ba2c:	9905      	ldr	r1, [sp, #20]
 801ba2e:	230a      	movs	r3, #10
 801ba30:	462a      	mov	r2, r5
 801ba32:	3101      	adds	r1, #1
 801ba34:	4640      	mov	r0, r8
 801ba36:	f000 fef5 	bl	801c824 <_strtol_r>
 801ba3a:	9b04      	ldr	r3, [sp, #16]
 801ba3c:	9e05      	ldr	r6, [sp, #20]
 801ba3e:	1ac2      	subs	r2, r0, r3
 801ba40:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801ba44:	429e      	cmp	r6, r3
 801ba46:	bf28      	it	cs
 801ba48:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801ba4c:	490e      	ldr	r1, [pc, #56]	; (801ba88 <_scanf_float+0x404>)
 801ba4e:	4630      	mov	r0, r6
 801ba50:	f000 f824 	bl	801ba9c <siprintf>
 801ba54:	e7d2      	b.n	801b9fc <_scanf_float+0x378>
 801ba56:	9903      	ldr	r1, [sp, #12]
 801ba58:	f012 0f04 	tst.w	r2, #4
 801ba5c:	f103 0204 	add.w	r2, r3, #4
 801ba60:	600a      	str	r2, [r1, #0]
 801ba62:	d1d9      	bne.n	801ba18 <_scanf_float+0x394>
 801ba64:	eeb4 0b40 	vcmp.f64	d0, d0
 801ba68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba6c:	681e      	ldr	r6, [r3, #0]
 801ba6e:	d705      	bvc.n	801ba7c <_scanf_float+0x3f8>
 801ba70:	4806      	ldr	r0, [pc, #24]	; (801ba8c <_scanf_float+0x408>)
 801ba72:	f000 f80d 	bl	801ba90 <nanf>
 801ba76:	ed86 0a00 	vstr	s0, [r6]
 801ba7a:	e7d0      	b.n	801ba1e <_scanf_float+0x39a>
 801ba7c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801ba80:	e7f9      	b.n	801ba76 <_scanf_float+0x3f2>
 801ba82:	2500      	movs	r5, #0
 801ba84:	e63f      	b.n	801b706 <_scanf_float+0x82>
 801ba86:	bf00      	nop
 801ba88:	0801fc7c 	.word	0x0801fc7c
 801ba8c:	08020088 	.word	0x08020088

0801ba90 <nanf>:
 801ba90:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801ba98 <nanf+0x8>
 801ba94:	4770      	bx	lr
 801ba96:	bf00      	nop
 801ba98:	7fc00000 	.word	0x7fc00000

0801ba9c <siprintf>:
 801ba9c:	b40e      	push	{r1, r2, r3}
 801ba9e:	b500      	push	{lr}
 801baa0:	b09c      	sub	sp, #112	; 0x70
 801baa2:	ab1d      	add	r3, sp, #116	; 0x74
 801baa4:	9002      	str	r0, [sp, #8]
 801baa6:	9006      	str	r0, [sp, #24]
 801baa8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801baac:	4809      	ldr	r0, [pc, #36]	; (801bad4 <siprintf+0x38>)
 801baae:	9107      	str	r1, [sp, #28]
 801bab0:	9104      	str	r1, [sp, #16]
 801bab2:	4909      	ldr	r1, [pc, #36]	; (801bad8 <siprintf+0x3c>)
 801bab4:	f853 2b04 	ldr.w	r2, [r3], #4
 801bab8:	9105      	str	r1, [sp, #20]
 801baba:	6800      	ldr	r0, [r0, #0]
 801babc:	9301      	str	r3, [sp, #4]
 801babe:	a902      	add	r1, sp, #8
 801bac0:	f002 fe80 	bl	801e7c4 <_svfiprintf_r>
 801bac4:	9b02      	ldr	r3, [sp, #8]
 801bac6:	2200      	movs	r2, #0
 801bac8:	701a      	strb	r2, [r3, #0]
 801baca:	b01c      	add	sp, #112	; 0x70
 801bacc:	f85d eb04 	ldr.w	lr, [sp], #4
 801bad0:	b003      	add	sp, #12
 801bad2:	4770      	bx	lr
 801bad4:	24000100 	.word	0x24000100
 801bad8:	ffff0208 	.word	0xffff0208

0801badc <__sread>:
 801badc:	b510      	push	{r4, lr}
 801bade:	460c      	mov	r4, r1
 801bae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bae4:	f002 ff6e 	bl	801e9c4 <_read_r>
 801bae8:	2800      	cmp	r0, #0
 801baea:	bfab      	itete	ge
 801baec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801baee:	89a3      	ldrhlt	r3, [r4, #12]
 801baf0:	181b      	addge	r3, r3, r0
 801baf2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801baf6:	bfac      	ite	ge
 801baf8:	6563      	strge	r3, [r4, #84]	; 0x54
 801bafa:	81a3      	strhlt	r3, [r4, #12]
 801bafc:	bd10      	pop	{r4, pc}

0801bafe <__swrite>:
 801bafe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb02:	461f      	mov	r7, r3
 801bb04:	898b      	ldrh	r3, [r1, #12]
 801bb06:	05db      	lsls	r3, r3, #23
 801bb08:	4605      	mov	r5, r0
 801bb0a:	460c      	mov	r4, r1
 801bb0c:	4616      	mov	r6, r2
 801bb0e:	d505      	bpl.n	801bb1c <__swrite+0x1e>
 801bb10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bb14:	2302      	movs	r3, #2
 801bb16:	2200      	movs	r2, #0
 801bb18:	f002 f818 	bl	801db4c <_lseek_r>
 801bb1c:	89a3      	ldrh	r3, [r4, #12]
 801bb1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bb22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801bb26:	81a3      	strh	r3, [r4, #12]
 801bb28:	4632      	mov	r2, r6
 801bb2a:	463b      	mov	r3, r7
 801bb2c:	4628      	mov	r0, r5
 801bb2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bb32:	f000 be79 	b.w	801c828 <_write_r>

0801bb36 <__sseek>:
 801bb36:	b510      	push	{r4, lr}
 801bb38:	460c      	mov	r4, r1
 801bb3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bb3e:	f002 f805 	bl	801db4c <_lseek_r>
 801bb42:	1c43      	adds	r3, r0, #1
 801bb44:	89a3      	ldrh	r3, [r4, #12]
 801bb46:	bf15      	itete	ne
 801bb48:	6560      	strne	r0, [r4, #84]	; 0x54
 801bb4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801bb4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801bb52:	81a3      	strheq	r3, [r4, #12]
 801bb54:	bf18      	it	ne
 801bb56:	81a3      	strhne	r3, [r4, #12]
 801bb58:	bd10      	pop	{r4, pc}

0801bb5a <__sclose>:
 801bb5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bb5e:	f000 be75 	b.w	801c84c <_close_r>

0801bb62 <strcpy>:
 801bb62:	4603      	mov	r3, r0
 801bb64:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bb68:	f803 2b01 	strb.w	r2, [r3], #1
 801bb6c:	2a00      	cmp	r2, #0
 801bb6e:	d1f9      	bne.n	801bb64 <strcpy+0x2>
 801bb70:	4770      	bx	lr

0801bb72 <sulp>:
 801bb72:	b570      	push	{r4, r5, r6, lr}
 801bb74:	4604      	mov	r4, r0
 801bb76:	460d      	mov	r5, r1
 801bb78:	4616      	mov	r6, r2
 801bb7a:	ec45 4b10 	vmov	d0, r4, r5
 801bb7e:	f002 fb83 	bl	801e288 <__ulp>
 801bb82:	b17e      	cbz	r6, 801bba4 <sulp+0x32>
 801bb84:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801bb88:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801bb8c:	2b00      	cmp	r3, #0
 801bb8e:	dd09      	ble.n	801bba4 <sulp+0x32>
 801bb90:	051b      	lsls	r3, r3, #20
 801bb92:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801bb96:	2000      	movs	r0, #0
 801bb98:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 801bb9c:	ec41 0b17 	vmov	d7, r0, r1
 801bba0:	ee20 0b07 	vmul.f64	d0, d0, d7
 801bba4:	bd70      	pop	{r4, r5, r6, pc}
	...

0801bba8 <_strtod_l>:
 801bba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bbac:	ed2d 8b0e 	vpush	{d8-d14}
 801bbb0:	b097      	sub	sp, #92	; 0x5c
 801bbb2:	461f      	mov	r7, r3
 801bbb4:	2300      	movs	r3, #0
 801bbb6:	9312      	str	r3, [sp, #72]	; 0x48
 801bbb8:	4ba1      	ldr	r3, [pc, #644]	; (801be40 <_strtod_l+0x298>)
 801bbba:	920d      	str	r2, [sp, #52]	; 0x34
 801bbbc:	681b      	ldr	r3, [r3, #0]
 801bbbe:	9307      	str	r3, [sp, #28]
 801bbc0:	4604      	mov	r4, r0
 801bbc2:	4618      	mov	r0, r3
 801bbc4:	468b      	mov	fp, r1
 801bbc6:	f7e4 fbad 	bl	8000324 <strlen>
 801bbca:	f04f 0800 	mov.w	r8, #0
 801bbce:	4605      	mov	r5, r0
 801bbd0:	f04f 0900 	mov.w	r9, #0
 801bbd4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 801bbd8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bbda:	7813      	ldrb	r3, [r2, #0]
 801bbdc:	2b2b      	cmp	r3, #43	; 0x2b
 801bbde:	d04d      	beq.n	801bc7c <_strtod_l+0xd4>
 801bbe0:	d83a      	bhi.n	801bc58 <_strtod_l+0xb0>
 801bbe2:	2b0d      	cmp	r3, #13
 801bbe4:	d833      	bhi.n	801bc4e <_strtod_l+0xa6>
 801bbe6:	2b08      	cmp	r3, #8
 801bbe8:	d833      	bhi.n	801bc52 <_strtod_l+0xaa>
 801bbea:	2b00      	cmp	r3, #0
 801bbec:	d03d      	beq.n	801bc6a <_strtod_l+0xc2>
 801bbee:	2300      	movs	r3, #0
 801bbf0:	9308      	str	r3, [sp, #32]
 801bbf2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801bbf4:	7833      	ldrb	r3, [r6, #0]
 801bbf6:	2b30      	cmp	r3, #48	; 0x30
 801bbf8:	f040 80b0 	bne.w	801bd5c <_strtod_l+0x1b4>
 801bbfc:	7873      	ldrb	r3, [r6, #1]
 801bbfe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801bc02:	2b58      	cmp	r3, #88	; 0x58
 801bc04:	d167      	bne.n	801bcd6 <_strtod_l+0x12e>
 801bc06:	9b08      	ldr	r3, [sp, #32]
 801bc08:	9301      	str	r3, [sp, #4]
 801bc0a:	ab12      	add	r3, sp, #72	; 0x48
 801bc0c:	9702      	str	r7, [sp, #8]
 801bc0e:	9300      	str	r3, [sp, #0]
 801bc10:	4a8c      	ldr	r2, [pc, #560]	; (801be44 <_strtod_l+0x29c>)
 801bc12:	ab13      	add	r3, sp, #76	; 0x4c
 801bc14:	a911      	add	r1, sp, #68	; 0x44
 801bc16:	4620      	mov	r0, r4
 801bc18:	f001 fc8c 	bl	801d534 <__gethex>
 801bc1c:	f010 0507 	ands.w	r5, r0, #7
 801bc20:	4607      	mov	r7, r0
 801bc22:	d005      	beq.n	801bc30 <_strtod_l+0x88>
 801bc24:	2d06      	cmp	r5, #6
 801bc26:	d12b      	bne.n	801bc80 <_strtod_l+0xd8>
 801bc28:	3601      	adds	r6, #1
 801bc2a:	2300      	movs	r3, #0
 801bc2c:	9611      	str	r6, [sp, #68]	; 0x44
 801bc2e:	9308      	str	r3, [sp, #32]
 801bc30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bc32:	2b00      	cmp	r3, #0
 801bc34:	f040 854e 	bne.w	801c6d4 <_strtod_l+0xb2c>
 801bc38:	9b08      	ldr	r3, [sp, #32]
 801bc3a:	b1e3      	cbz	r3, 801bc76 <_strtod_l+0xce>
 801bc3c:	ec49 8b17 	vmov	d7, r8, r9
 801bc40:	eeb1 0b47 	vneg.f64	d0, d7
 801bc44:	b017      	add	sp, #92	; 0x5c
 801bc46:	ecbd 8b0e 	vpop	{d8-d14}
 801bc4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc4e:	2b20      	cmp	r3, #32
 801bc50:	d1cd      	bne.n	801bbee <_strtod_l+0x46>
 801bc52:	3201      	adds	r2, #1
 801bc54:	9211      	str	r2, [sp, #68]	; 0x44
 801bc56:	e7bf      	b.n	801bbd8 <_strtod_l+0x30>
 801bc58:	2b2d      	cmp	r3, #45	; 0x2d
 801bc5a:	d1c8      	bne.n	801bbee <_strtod_l+0x46>
 801bc5c:	2301      	movs	r3, #1
 801bc5e:	9308      	str	r3, [sp, #32]
 801bc60:	1c53      	adds	r3, r2, #1
 801bc62:	9311      	str	r3, [sp, #68]	; 0x44
 801bc64:	7853      	ldrb	r3, [r2, #1]
 801bc66:	2b00      	cmp	r3, #0
 801bc68:	d1c3      	bne.n	801bbf2 <_strtod_l+0x4a>
 801bc6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bc6c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 801bc70:	2b00      	cmp	r3, #0
 801bc72:	f040 852d 	bne.w	801c6d0 <_strtod_l+0xb28>
 801bc76:	ec49 8b10 	vmov	d0, r8, r9
 801bc7a:	e7e3      	b.n	801bc44 <_strtod_l+0x9c>
 801bc7c:	2300      	movs	r3, #0
 801bc7e:	e7ee      	b.n	801bc5e <_strtod_l+0xb6>
 801bc80:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bc82:	b13a      	cbz	r2, 801bc94 <_strtod_l+0xec>
 801bc84:	2135      	movs	r1, #53	; 0x35
 801bc86:	a814      	add	r0, sp, #80	; 0x50
 801bc88:	f002 fc06 	bl	801e498 <__copybits>
 801bc8c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801bc8e:	4620      	mov	r0, r4
 801bc90:	f001 ffc8 	bl	801dc24 <_Bfree>
 801bc94:	3d01      	subs	r5, #1
 801bc96:	2d04      	cmp	r5, #4
 801bc98:	d806      	bhi.n	801bca8 <_strtod_l+0x100>
 801bc9a:	e8df f005 	tbb	[pc, r5]
 801bc9e:	030a      	.short	0x030a
 801bca0:	1714      	.short	0x1714
 801bca2:	0a          	.byte	0x0a
 801bca3:	00          	.byte	0x00
 801bca4:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 801bca8:	073f      	lsls	r7, r7, #28
 801bcaa:	d5c1      	bpl.n	801bc30 <_strtod_l+0x88>
 801bcac:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 801bcb0:	e7be      	b.n	801bc30 <_strtod_l+0x88>
 801bcb2:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 801bcb6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801bcb8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801bcbc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801bcc0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801bcc4:	e7f0      	b.n	801bca8 <_strtod_l+0x100>
 801bcc6:	f8df 9180 	ldr.w	r9, [pc, #384]	; 801be48 <_strtod_l+0x2a0>
 801bcca:	e7ed      	b.n	801bca8 <_strtod_l+0x100>
 801bccc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801bcd0:	f04f 38ff 	mov.w	r8, #4294967295
 801bcd4:	e7e8      	b.n	801bca8 <_strtod_l+0x100>
 801bcd6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bcd8:	1c5a      	adds	r2, r3, #1
 801bcda:	9211      	str	r2, [sp, #68]	; 0x44
 801bcdc:	785b      	ldrb	r3, [r3, #1]
 801bcde:	2b30      	cmp	r3, #48	; 0x30
 801bce0:	d0f9      	beq.n	801bcd6 <_strtod_l+0x12e>
 801bce2:	2b00      	cmp	r3, #0
 801bce4:	d0a4      	beq.n	801bc30 <_strtod_l+0x88>
 801bce6:	2301      	movs	r3, #1
 801bce8:	f04f 0a00 	mov.w	sl, #0
 801bcec:	9304      	str	r3, [sp, #16]
 801bcee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bcf0:	930a      	str	r3, [sp, #40]	; 0x28
 801bcf2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801bcf6:	f8cd a018 	str.w	sl, [sp, #24]
 801bcfa:	220a      	movs	r2, #10
 801bcfc:	9811      	ldr	r0, [sp, #68]	; 0x44
 801bcfe:	7807      	ldrb	r7, [r0, #0]
 801bd00:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801bd04:	b2d9      	uxtb	r1, r3
 801bd06:	2909      	cmp	r1, #9
 801bd08:	d92a      	bls.n	801bd60 <_strtod_l+0x1b8>
 801bd0a:	9907      	ldr	r1, [sp, #28]
 801bd0c:	462a      	mov	r2, r5
 801bd0e:	f002 fe83 	bl	801ea18 <strncmp>
 801bd12:	2800      	cmp	r0, #0
 801bd14:	d033      	beq.n	801bd7e <_strtod_l+0x1d6>
 801bd16:	2000      	movs	r0, #0
 801bd18:	9b06      	ldr	r3, [sp, #24]
 801bd1a:	463a      	mov	r2, r7
 801bd1c:	4601      	mov	r1, r0
 801bd1e:	4607      	mov	r7, r0
 801bd20:	2a65      	cmp	r2, #101	; 0x65
 801bd22:	d001      	beq.n	801bd28 <_strtod_l+0x180>
 801bd24:	2a45      	cmp	r2, #69	; 0x45
 801bd26:	d117      	bne.n	801bd58 <_strtod_l+0x1b0>
 801bd28:	b91b      	cbnz	r3, 801bd32 <_strtod_l+0x18a>
 801bd2a:	9b04      	ldr	r3, [sp, #16]
 801bd2c:	4303      	orrs	r3, r0
 801bd2e:	d09c      	beq.n	801bc6a <_strtod_l+0xc2>
 801bd30:	2300      	movs	r3, #0
 801bd32:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 801bd36:	f10b 0201 	add.w	r2, fp, #1
 801bd3a:	9211      	str	r2, [sp, #68]	; 0x44
 801bd3c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 801bd40:	2a2b      	cmp	r2, #43	; 0x2b
 801bd42:	d071      	beq.n	801be28 <_strtod_l+0x280>
 801bd44:	2a2d      	cmp	r2, #45	; 0x2d
 801bd46:	d077      	beq.n	801be38 <_strtod_l+0x290>
 801bd48:	f04f 0e00 	mov.w	lr, #0
 801bd4c:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 801bd50:	2d09      	cmp	r5, #9
 801bd52:	d97f      	bls.n	801be54 <_strtod_l+0x2ac>
 801bd54:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 801bd58:	2500      	movs	r5, #0
 801bd5a:	e09b      	b.n	801be94 <_strtod_l+0x2ec>
 801bd5c:	2300      	movs	r3, #0
 801bd5e:	e7c3      	b.n	801bce8 <_strtod_l+0x140>
 801bd60:	9906      	ldr	r1, [sp, #24]
 801bd62:	2908      	cmp	r1, #8
 801bd64:	bfdd      	ittte	le
 801bd66:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801bd68:	fb02 3301 	mlale	r3, r2, r1, r3
 801bd6c:	9309      	strle	r3, [sp, #36]	; 0x24
 801bd6e:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801bd72:	9b06      	ldr	r3, [sp, #24]
 801bd74:	3001      	adds	r0, #1
 801bd76:	3301      	adds	r3, #1
 801bd78:	9306      	str	r3, [sp, #24]
 801bd7a:	9011      	str	r0, [sp, #68]	; 0x44
 801bd7c:	e7be      	b.n	801bcfc <_strtod_l+0x154>
 801bd7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bd80:	195a      	adds	r2, r3, r5
 801bd82:	9211      	str	r2, [sp, #68]	; 0x44
 801bd84:	5d5a      	ldrb	r2, [r3, r5]
 801bd86:	9b06      	ldr	r3, [sp, #24]
 801bd88:	b3a3      	cbz	r3, 801bdf4 <_strtod_l+0x24c>
 801bd8a:	4607      	mov	r7, r0
 801bd8c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801bd90:	2909      	cmp	r1, #9
 801bd92:	d912      	bls.n	801bdba <_strtod_l+0x212>
 801bd94:	2101      	movs	r1, #1
 801bd96:	e7c3      	b.n	801bd20 <_strtod_l+0x178>
 801bd98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bd9a:	1c5a      	adds	r2, r3, #1
 801bd9c:	9211      	str	r2, [sp, #68]	; 0x44
 801bd9e:	785a      	ldrb	r2, [r3, #1]
 801bda0:	3001      	adds	r0, #1
 801bda2:	2a30      	cmp	r2, #48	; 0x30
 801bda4:	d0f8      	beq.n	801bd98 <_strtod_l+0x1f0>
 801bda6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801bdaa:	2b08      	cmp	r3, #8
 801bdac:	f200 8497 	bhi.w	801c6de <_strtod_l+0xb36>
 801bdb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bdb2:	930a      	str	r3, [sp, #40]	; 0x28
 801bdb4:	4607      	mov	r7, r0
 801bdb6:	2000      	movs	r0, #0
 801bdb8:	4603      	mov	r3, r0
 801bdba:	3a30      	subs	r2, #48	; 0x30
 801bdbc:	f100 0101 	add.w	r1, r0, #1
 801bdc0:	d012      	beq.n	801bde8 <_strtod_l+0x240>
 801bdc2:	440f      	add	r7, r1
 801bdc4:	eb00 0c03 	add.w	ip, r0, r3
 801bdc8:	4619      	mov	r1, r3
 801bdca:	250a      	movs	r5, #10
 801bdcc:	4561      	cmp	r1, ip
 801bdce:	d113      	bne.n	801bdf8 <_strtod_l+0x250>
 801bdd0:	1819      	adds	r1, r3, r0
 801bdd2:	2908      	cmp	r1, #8
 801bdd4:	f103 0301 	add.w	r3, r3, #1
 801bdd8:	4403      	add	r3, r0
 801bdda:	dc1c      	bgt.n	801be16 <_strtod_l+0x26e>
 801bddc:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bdde:	210a      	movs	r1, #10
 801bde0:	fb01 2200 	mla	r2, r1, r0, r2
 801bde4:	9209      	str	r2, [sp, #36]	; 0x24
 801bde6:	2100      	movs	r1, #0
 801bde8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801bdea:	1c50      	adds	r0, r2, #1
 801bdec:	9011      	str	r0, [sp, #68]	; 0x44
 801bdee:	7852      	ldrb	r2, [r2, #1]
 801bdf0:	4608      	mov	r0, r1
 801bdf2:	e7cb      	b.n	801bd8c <_strtod_l+0x1e4>
 801bdf4:	9806      	ldr	r0, [sp, #24]
 801bdf6:	e7d4      	b.n	801bda2 <_strtod_l+0x1fa>
 801bdf8:	2908      	cmp	r1, #8
 801bdfa:	dc04      	bgt.n	801be06 <_strtod_l+0x25e>
 801bdfc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801bdfe:	436e      	muls	r6, r5
 801be00:	9609      	str	r6, [sp, #36]	; 0x24
 801be02:	3101      	adds	r1, #1
 801be04:	e7e2      	b.n	801bdcc <_strtod_l+0x224>
 801be06:	f101 0e01 	add.w	lr, r1, #1
 801be0a:	f1be 0f10 	cmp.w	lr, #16
 801be0e:	bfd8      	it	le
 801be10:	fb05 fa0a 	mulle.w	sl, r5, sl
 801be14:	e7f5      	b.n	801be02 <_strtod_l+0x25a>
 801be16:	2b10      	cmp	r3, #16
 801be18:	bfdc      	itt	le
 801be1a:	210a      	movle	r1, #10
 801be1c:	fb01 2a0a 	mlale	sl, r1, sl, r2
 801be20:	e7e1      	b.n	801bde6 <_strtod_l+0x23e>
 801be22:	2700      	movs	r7, #0
 801be24:	2101      	movs	r1, #1
 801be26:	e780      	b.n	801bd2a <_strtod_l+0x182>
 801be28:	f04f 0e00 	mov.w	lr, #0
 801be2c:	f10b 0202 	add.w	r2, fp, #2
 801be30:	9211      	str	r2, [sp, #68]	; 0x44
 801be32:	f89b 2002 	ldrb.w	r2, [fp, #2]
 801be36:	e789      	b.n	801bd4c <_strtod_l+0x1a4>
 801be38:	f04f 0e01 	mov.w	lr, #1
 801be3c:	e7f6      	b.n	801be2c <_strtod_l+0x284>
 801be3e:	bf00      	nop
 801be40:	0801fed0 	.word	0x0801fed0
 801be44:	0801fc84 	.word	0x0801fc84
 801be48:	7ff00000 	.word	0x7ff00000
 801be4c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801be4e:	1c55      	adds	r5, r2, #1
 801be50:	9511      	str	r5, [sp, #68]	; 0x44
 801be52:	7852      	ldrb	r2, [r2, #1]
 801be54:	2a30      	cmp	r2, #48	; 0x30
 801be56:	d0f9      	beq.n	801be4c <_strtod_l+0x2a4>
 801be58:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 801be5c:	2d08      	cmp	r5, #8
 801be5e:	f63f af7b 	bhi.w	801bd58 <_strtod_l+0x1b0>
 801be62:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 801be66:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801be68:	9207      	str	r2, [sp, #28]
 801be6a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801be6c:	1c55      	adds	r5, r2, #1
 801be6e:	9511      	str	r5, [sp, #68]	; 0x44
 801be70:	7852      	ldrb	r2, [r2, #1]
 801be72:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801be76:	2e09      	cmp	r6, #9
 801be78:	d937      	bls.n	801beea <_strtod_l+0x342>
 801be7a:	9e07      	ldr	r6, [sp, #28]
 801be7c:	1bad      	subs	r5, r5, r6
 801be7e:	2d08      	cmp	r5, #8
 801be80:	f644 651f 	movw	r5, #19999	; 0x4e1f
 801be84:	dc02      	bgt.n	801be8c <_strtod_l+0x2e4>
 801be86:	4565      	cmp	r5, ip
 801be88:	bfa8      	it	ge
 801be8a:	4665      	movge	r5, ip
 801be8c:	f1be 0f00 	cmp.w	lr, #0
 801be90:	d000      	beq.n	801be94 <_strtod_l+0x2ec>
 801be92:	426d      	negs	r5, r5
 801be94:	2b00      	cmp	r3, #0
 801be96:	d14d      	bne.n	801bf34 <_strtod_l+0x38c>
 801be98:	9b04      	ldr	r3, [sp, #16]
 801be9a:	4303      	orrs	r3, r0
 801be9c:	f47f aec8 	bne.w	801bc30 <_strtod_l+0x88>
 801bea0:	2900      	cmp	r1, #0
 801bea2:	f47f aee2 	bne.w	801bc6a <_strtod_l+0xc2>
 801bea6:	2a69      	cmp	r2, #105	; 0x69
 801bea8:	d027      	beq.n	801befa <_strtod_l+0x352>
 801beaa:	dc24      	bgt.n	801bef6 <_strtod_l+0x34e>
 801beac:	2a49      	cmp	r2, #73	; 0x49
 801beae:	d024      	beq.n	801befa <_strtod_l+0x352>
 801beb0:	2a4e      	cmp	r2, #78	; 0x4e
 801beb2:	f47f aeda 	bne.w	801bc6a <_strtod_l+0xc2>
 801beb6:	4996      	ldr	r1, [pc, #600]	; (801c110 <_strtod_l+0x568>)
 801beb8:	a811      	add	r0, sp, #68	; 0x44
 801beba:	f001 fd93 	bl	801d9e4 <__match>
 801bebe:	2800      	cmp	r0, #0
 801bec0:	f43f aed3 	beq.w	801bc6a <_strtod_l+0xc2>
 801bec4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bec6:	781b      	ldrb	r3, [r3, #0]
 801bec8:	2b28      	cmp	r3, #40	; 0x28
 801beca:	d12d      	bne.n	801bf28 <_strtod_l+0x380>
 801becc:	4991      	ldr	r1, [pc, #580]	; (801c114 <_strtod_l+0x56c>)
 801bece:	aa14      	add	r2, sp, #80	; 0x50
 801bed0:	a811      	add	r0, sp, #68	; 0x44
 801bed2:	f001 fd9b 	bl	801da0c <__hexnan>
 801bed6:	2805      	cmp	r0, #5
 801bed8:	d126      	bne.n	801bf28 <_strtod_l+0x380>
 801beda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801bedc:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801bee0:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801bee4:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801bee8:	e6a2      	b.n	801bc30 <_strtod_l+0x88>
 801beea:	250a      	movs	r5, #10
 801beec:	fb05 250c 	mla	r5, r5, ip, r2
 801bef0:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 801bef4:	e7b9      	b.n	801be6a <_strtod_l+0x2c2>
 801bef6:	2a6e      	cmp	r2, #110	; 0x6e
 801bef8:	e7db      	b.n	801beb2 <_strtod_l+0x30a>
 801befa:	4987      	ldr	r1, [pc, #540]	; (801c118 <_strtod_l+0x570>)
 801befc:	a811      	add	r0, sp, #68	; 0x44
 801befe:	f001 fd71 	bl	801d9e4 <__match>
 801bf02:	2800      	cmp	r0, #0
 801bf04:	f43f aeb1 	beq.w	801bc6a <_strtod_l+0xc2>
 801bf08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bf0a:	4984      	ldr	r1, [pc, #528]	; (801c11c <_strtod_l+0x574>)
 801bf0c:	3b01      	subs	r3, #1
 801bf0e:	a811      	add	r0, sp, #68	; 0x44
 801bf10:	9311      	str	r3, [sp, #68]	; 0x44
 801bf12:	f001 fd67 	bl	801d9e4 <__match>
 801bf16:	b910      	cbnz	r0, 801bf1e <_strtod_l+0x376>
 801bf18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bf1a:	3301      	adds	r3, #1
 801bf1c:	9311      	str	r3, [sp, #68]	; 0x44
 801bf1e:	f8df 9210 	ldr.w	r9, [pc, #528]	; 801c130 <_strtod_l+0x588>
 801bf22:	f04f 0800 	mov.w	r8, #0
 801bf26:	e683      	b.n	801bc30 <_strtod_l+0x88>
 801bf28:	487d      	ldr	r0, [pc, #500]	; (801c120 <_strtod_l+0x578>)
 801bf2a:	f002 fd5d 	bl	801e9e8 <nan>
 801bf2e:	ec59 8b10 	vmov	r8, r9, d0
 801bf32:	e67d      	b.n	801bc30 <_strtod_l+0x88>
 801bf34:	1bea      	subs	r2, r5, r7
 801bf36:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 801bf3a:	9207      	str	r2, [sp, #28]
 801bf3c:	9a06      	ldr	r2, [sp, #24]
 801bf3e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801bf42:	2a00      	cmp	r2, #0
 801bf44:	bf08      	it	eq
 801bf46:	461a      	moveq	r2, r3
 801bf48:	2b10      	cmp	r3, #16
 801bf4a:	9206      	str	r2, [sp, #24]
 801bf4c:	461a      	mov	r2, r3
 801bf4e:	bfa8      	it	ge
 801bf50:	2210      	movge	r2, #16
 801bf52:	2b09      	cmp	r3, #9
 801bf54:	ec59 8b17 	vmov	r8, r9, d7
 801bf58:	dd0c      	ble.n	801bf74 <_strtod_l+0x3cc>
 801bf5a:	4972      	ldr	r1, [pc, #456]	; (801c124 <_strtod_l+0x57c>)
 801bf5c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801bf60:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 801bf64:	ee06 aa90 	vmov	s13, sl
 801bf68:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 801bf6c:	eea7 6b05 	vfma.f64	d6, d7, d5
 801bf70:	ec59 8b16 	vmov	r8, r9, d6
 801bf74:	2b0f      	cmp	r3, #15
 801bf76:	dc36      	bgt.n	801bfe6 <_strtod_l+0x43e>
 801bf78:	9907      	ldr	r1, [sp, #28]
 801bf7a:	2900      	cmp	r1, #0
 801bf7c:	f43f ae58 	beq.w	801bc30 <_strtod_l+0x88>
 801bf80:	dd23      	ble.n	801bfca <_strtod_l+0x422>
 801bf82:	2916      	cmp	r1, #22
 801bf84:	dc0b      	bgt.n	801bf9e <_strtod_l+0x3f6>
 801bf86:	4b67      	ldr	r3, [pc, #412]	; (801c124 <_strtod_l+0x57c>)
 801bf88:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801bf8c:	ed93 7b00 	vldr	d7, [r3]
 801bf90:	ec49 8b16 	vmov	d6, r8, r9
 801bf94:	ee27 7b06 	vmul.f64	d7, d7, d6
 801bf98:	ec59 8b17 	vmov	r8, r9, d7
 801bf9c:	e648      	b.n	801bc30 <_strtod_l+0x88>
 801bf9e:	9807      	ldr	r0, [sp, #28]
 801bfa0:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801bfa4:	4281      	cmp	r1, r0
 801bfa6:	db1e      	blt.n	801bfe6 <_strtod_l+0x43e>
 801bfa8:	4a5e      	ldr	r2, [pc, #376]	; (801c124 <_strtod_l+0x57c>)
 801bfaa:	f1c3 030f 	rsb	r3, r3, #15
 801bfae:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801bfb2:	ed91 7b00 	vldr	d7, [r1]
 801bfb6:	ec49 8b16 	vmov	d6, r8, r9
 801bfba:	1ac3      	subs	r3, r0, r3
 801bfbc:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801bfc0:	ee27 7b06 	vmul.f64	d7, d7, d6
 801bfc4:	ed92 6b00 	vldr	d6, [r2]
 801bfc8:	e7e4      	b.n	801bf94 <_strtod_l+0x3ec>
 801bfca:	9907      	ldr	r1, [sp, #28]
 801bfcc:	3116      	adds	r1, #22
 801bfce:	db0a      	blt.n	801bfe6 <_strtod_l+0x43e>
 801bfd0:	4b54      	ldr	r3, [pc, #336]	; (801c124 <_strtod_l+0x57c>)
 801bfd2:	1b7d      	subs	r5, r7, r5
 801bfd4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801bfd8:	ed95 7b00 	vldr	d7, [r5]
 801bfdc:	ec49 8b16 	vmov	d6, r8, r9
 801bfe0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801bfe4:	e7d8      	b.n	801bf98 <_strtod_l+0x3f0>
 801bfe6:	9907      	ldr	r1, [sp, #28]
 801bfe8:	1a9a      	subs	r2, r3, r2
 801bfea:	440a      	add	r2, r1
 801bfec:	2a00      	cmp	r2, #0
 801bfee:	dd6f      	ble.n	801c0d0 <_strtod_l+0x528>
 801bff0:	f012 000f 	ands.w	r0, r2, #15
 801bff4:	d00a      	beq.n	801c00c <_strtod_l+0x464>
 801bff6:	494b      	ldr	r1, [pc, #300]	; (801c124 <_strtod_l+0x57c>)
 801bff8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801bffc:	ed91 7b00 	vldr	d7, [r1]
 801c000:	ec49 8b16 	vmov	d6, r8, r9
 801c004:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c008:	ec59 8b17 	vmov	r8, r9, d7
 801c00c:	f032 020f 	bics.w	r2, r2, #15
 801c010:	d04f      	beq.n	801c0b2 <_strtod_l+0x50a>
 801c012:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801c016:	dd22      	ble.n	801c05e <_strtod_l+0x4b6>
 801c018:	2500      	movs	r5, #0
 801c01a:	462e      	mov	r6, r5
 801c01c:	9506      	str	r5, [sp, #24]
 801c01e:	462f      	mov	r7, r5
 801c020:	2322      	movs	r3, #34	; 0x22
 801c022:	f8df 910c 	ldr.w	r9, [pc, #268]	; 801c130 <_strtod_l+0x588>
 801c026:	6023      	str	r3, [r4, #0]
 801c028:	f04f 0800 	mov.w	r8, #0
 801c02c:	9b06      	ldr	r3, [sp, #24]
 801c02e:	2b00      	cmp	r3, #0
 801c030:	f43f adfe 	beq.w	801bc30 <_strtod_l+0x88>
 801c034:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c036:	4620      	mov	r0, r4
 801c038:	f001 fdf4 	bl	801dc24 <_Bfree>
 801c03c:	4639      	mov	r1, r7
 801c03e:	4620      	mov	r0, r4
 801c040:	f001 fdf0 	bl	801dc24 <_Bfree>
 801c044:	4631      	mov	r1, r6
 801c046:	4620      	mov	r0, r4
 801c048:	f001 fdec 	bl	801dc24 <_Bfree>
 801c04c:	9906      	ldr	r1, [sp, #24]
 801c04e:	4620      	mov	r0, r4
 801c050:	f001 fde8 	bl	801dc24 <_Bfree>
 801c054:	4629      	mov	r1, r5
 801c056:	4620      	mov	r0, r4
 801c058:	f001 fde4 	bl	801dc24 <_Bfree>
 801c05c:	e5e8      	b.n	801bc30 <_strtod_l+0x88>
 801c05e:	2000      	movs	r0, #0
 801c060:	ec49 8b17 	vmov	d7, r8, r9
 801c064:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 801c128 <_strtod_l+0x580>
 801c068:	1112      	asrs	r2, r2, #4
 801c06a:	4601      	mov	r1, r0
 801c06c:	2a01      	cmp	r2, #1
 801c06e:	dc23      	bgt.n	801c0b8 <_strtod_l+0x510>
 801c070:	b108      	cbz	r0, 801c076 <_strtod_l+0x4ce>
 801c072:	ec59 8b17 	vmov	r8, r9, d7
 801c076:	4a2c      	ldr	r2, [pc, #176]	; (801c128 <_strtod_l+0x580>)
 801c078:	482c      	ldr	r0, [pc, #176]	; (801c12c <_strtod_l+0x584>)
 801c07a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801c07e:	ed92 7b00 	vldr	d7, [r2]
 801c082:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801c086:	ec49 8b16 	vmov	d6, r8, r9
 801c08a:	4a29      	ldr	r2, [pc, #164]	; (801c130 <_strtod_l+0x588>)
 801c08c:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c090:	ee17 1a90 	vmov	r1, s15
 801c094:	400a      	ands	r2, r1
 801c096:	4282      	cmp	r2, r0
 801c098:	ec59 8b17 	vmov	r8, r9, d7
 801c09c:	d8bc      	bhi.n	801c018 <_strtod_l+0x470>
 801c09e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801c0a2:	4282      	cmp	r2, r0
 801c0a4:	bf86      	itte	hi
 801c0a6:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 801c134 <_strtod_l+0x58c>
 801c0aa:	f04f 38ff 	movhi.w	r8, #4294967295
 801c0ae:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 801c0b2:	2200      	movs	r2, #0
 801c0b4:	9204      	str	r2, [sp, #16]
 801c0b6:	e078      	b.n	801c1aa <_strtod_l+0x602>
 801c0b8:	07d6      	lsls	r6, r2, #31
 801c0ba:	d504      	bpl.n	801c0c6 <_strtod_l+0x51e>
 801c0bc:	ed9c 6b00 	vldr	d6, [ip]
 801c0c0:	2001      	movs	r0, #1
 801c0c2:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c0c6:	3101      	adds	r1, #1
 801c0c8:	1052      	asrs	r2, r2, #1
 801c0ca:	f10c 0c08 	add.w	ip, ip, #8
 801c0ce:	e7cd      	b.n	801c06c <_strtod_l+0x4c4>
 801c0d0:	d0ef      	beq.n	801c0b2 <_strtod_l+0x50a>
 801c0d2:	4252      	negs	r2, r2
 801c0d4:	f012 000f 	ands.w	r0, r2, #15
 801c0d8:	d00a      	beq.n	801c0f0 <_strtod_l+0x548>
 801c0da:	4912      	ldr	r1, [pc, #72]	; (801c124 <_strtod_l+0x57c>)
 801c0dc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801c0e0:	ed91 7b00 	vldr	d7, [r1]
 801c0e4:	ec49 8b16 	vmov	d6, r8, r9
 801c0e8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801c0ec:	ec59 8b17 	vmov	r8, r9, d7
 801c0f0:	1112      	asrs	r2, r2, #4
 801c0f2:	d0de      	beq.n	801c0b2 <_strtod_l+0x50a>
 801c0f4:	2a1f      	cmp	r2, #31
 801c0f6:	dd1f      	ble.n	801c138 <_strtod_l+0x590>
 801c0f8:	2500      	movs	r5, #0
 801c0fa:	462e      	mov	r6, r5
 801c0fc:	9506      	str	r5, [sp, #24]
 801c0fe:	462f      	mov	r7, r5
 801c100:	2322      	movs	r3, #34	; 0x22
 801c102:	f04f 0800 	mov.w	r8, #0
 801c106:	f04f 0900 	mov.w	r9, #0
 801c10a:	6023      	str	r3, [r4, #0]
 801c10c:	e78e      	b.n	801c02c <_strtod_l+0x484>
 801c10e:	bf00      	nop
 801c110:	0801fc55 	.word	0x0801fc55
 801c114:	0801fc98 	.word	0x0801fc98
 801c118:	0801fc4d 	.word	0x0801fc4d
 801c11c:	0801fddc 	.word	0x0801fddc
 801c120:	08020088 	.word	0x08020088
 801c124:	0801ff68 	.word	0x0801ff68
 801c128:	0801ff40 	.word	0x0801ff40
 801c12c:	7ca00000 	.word	0x7ca00000
 801c130:	7ff00000 	.word	0x7ff00000
 801c134:	7fefffff 	.word	0x7fefffff
 801c138:	f012 0110 	ands.w	r1, r2, #16
 801c13c:	bf18      	it	ne
 801c13e:	216a      	movne	r1, #106	; 0x6a
 801c140:	9104      	str	r1, [sp, #16]
 801c142:	ec49 8b17 	vmov	d7, r8, r9
 801c146:	49be      	ldr	r1, [pc, #760]	; (801c440 <_strtod_l+0x898>)
 801c148:	2000      	movs	r0, #0
 801c14a:	07d6      	lsls	r6, r2, #31
 801c14c:	d504      	bpl.n	801c158 <_strtod_l+0x5b0>
 801c14e:	ed91 6b00 	vldr	d6, [r1]
 801c152:	2001      	movs	r0, #1
 801c154:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c158:	1052      	asrs	r2, r2, #1
 801c15a:	f101 0108 	add.w	r1, r1, #8
 801c15e:	d1f4      	bne.n	801c14a <_strtod_l+0x5a2>
 801c160:	b108      	cbz	r0, 801c166 <_strtod_l+0x5be>
 801c162:	ec59 8b17 	vmov	r8, r9, d7
 801c166:	9a04      	ldr	r2, [sp, #16]
 801c168:	b1c2      	cbz	r2, 801c19c <_strtod_l+0x5f4>
 801c16a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 801c16e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 801c172:	2a00      	cmp	r2, #0
 801c174:	4648      	mov	r0, r9
 801c176:	dd11      	ble.n	801c19c <_strtod_l+0x5f4>
 801c178:	2a1f      	cmp	r2, #31
 801c17a:	f340 812e 	ble.w	801c3da <_strtod_l+0x832>
 801c17e:	2a34      	cmp	r2, #52	; 0x34
 801c180:	bfde      	ittt	le
 801c182:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 801c186:	f04f 32ff 	movle.w	r2, #4294967295
 801c18a:	fa02 f101 	lslle.w	r1, r2, r1
 801c18e:	f04f 0800 	mov.w	r8, #0
 801c192:	bfcc      	ite	gt
 801c194:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801c198:	ea01 0900 	andle.w	r9, r1, r0
 801c19c:	ec49 8b17 	vmov	d7, r8, r9
 801c1a0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801c1a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c1a8:	d0a6      	beq.n	801c0f8 <_strtod_l+0x550>
 801c1aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c1ac:	9200      	str	r2, [sp, #0]
 801c1ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 801c1b0:	9a06      	ldr	r2, [sp, #24]
 801c1b2:	4620      	mov	r0, r4
 801c1b4:	f001 fd9e 	bl	801dcf4 <__s2b>
 801c1b8:	9006      	str	r0, [sp, #24]
 801c1ba:	2800      	cmp	r0, #0
 801c1bc:	f43f af2c 	beq.w	801c018 <_strtod_l+0x470>
 801c1c0:	9b07      	ldr	r3, [sp, #28]
 801c1c2:	1b7d      	subs	r5, r7, r5
 801c1c4:	2b00      	cmp	r3, #0
 801c1c6:	bfb4      	ite	lt
 801c1c8:	462b      	movlt	r3, r5
 801c1ca:	2300      	movge	r3, #0
 801c1cc:	9309      	str	r3, [sp, #36]	; 0x24
 801c1ce:	9b07      	ldr	r3, [sp, #28]
 801c1d0:	ed9f 9b93 	vldr	d9, [pc, #588]	; 801c420 <_strtod_l+0x878>
 801c1d4:	ed9f ab94 	vldr	d10, [pc, #592]	; 801c428 <_strtod_l+0x880>
 801c1d8:	ed9f bb95 	vldr	d11, [pc, #596]	; 801c430 <_strtod_l+0x888>
 801c1dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c1e0:	2500      	movs	r5, #0
 801c1e2:	930c      	str	r3, [sp, #48]	; 0x30
 801c1e4:	462e      	mov	r6, r5
 801c1e6:	9b06      	ldr	r3, [sp, #24]
 801c1e8:	4620      	mov	r0, r4
 801c1ea:	6859      	ldr	r1, [r3, #4]
 801c1ec:	f001 fcda 	bl	801dba4 <_Balloc>
 801c1f0:	4607      	mov	r7, r0
 801c1f2:	2800      	cmp	r0, #0
 801c1f4:	f43f af14 	beq.w	801c020 <_strtod_l+0x478>
 801c1f8:	9b06      	ldr	r3, [sp, #24]
 801c1fa:	691a      	ldr	r2, [r3, #16]
 801c1fc:	3202      	adds	r2, #2
 801c1fe:	f103 010c 	add.w	r1, r3, #12
 801c202:	0092      	lsls	r2, r2, #2
 801c204:	300c      	adds	r0, #12
 801c206:	f7fe fde3 	bl	801add0 <memcpy>
 801c20a:	ec49 8b10 	vmov	d0, r8, r9
 801c20e:	aa14      	add	r2, sp, #80	; 0x50
 801c210:	a913      	add	r1, sp, #76	; 0x4c
 801c212:	4620      	mov	r0, r4
 801c214:	f002 f8b4 	bl	801e380 <__d2b>
 801c218:	ec49 8b18 	vmov	d8, r8, r9
 801c21c:	9012      	str	r0, [sp, #72]	; 0x48
 801c21e:	2800      	cmp	r0, #0
 801c220:	f43f aefe 	beq.w	801c020 <_strtod_l+0x478>
 801c224:	2101      	movs	r1, #1
 801c226:	4620      	mov	r0, r4
 801c228:	f001 fdfe 	bl	801de28 <__i2b>
 801c22c:	4606      	mov	r6, r0
 801c22e:	2800      	cmp	r0, #0
 801c230:	f43f aef6 	beq.w	801c020 <_strtod_l+0x478>
 801c234:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801c236:	9914      	ldr	r1, [sp, #80]	; 0x50
 801c238:	2b00      	cmp	r3, #0
 801c23a:	bfab      	itete	ge
 801c23c:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 801c23e:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 801c240:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 801c244:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 801c248:	bfac      	ite	ge
 801c24a:	eb03 0b02 	addge.w	fp, r3, r2
 801c24e:	eba2 0a03 	sublt.w	sl, r2, r3
 801c252:	9a04      	ldr	r2, [sp, #16]
 801c254:	1a9b      	subs	r3, r3, r2
 801c256:	440b      	add	r3, r1
 801c258:	4a7a      	ldr	r2, [pc, #488]	; (801c444 <_strtod_l+0x89c>)
 801c25a:	3b01      	subs	r3, #1
 801c25c:	4293      	cmp	r3, r2
 801c25e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 801c262:	f280 80cd 	bge.w	801c400 <_strtod_l+0x858>
 801c266:	1ad2      	subs	r2, r2, r3
 801c268:	2a1f      	cmp	r2, #31
 801c26a:	eba1 0102 	sub.w	r1, r1, r2
 801c26e:	f04f 0001 	mov.w	r0, #1
 801c272:	f300 80b9 	bgt.w	801c3e8 <_strtod_l+0x840>
 801c276:	fa00 f302 	lsl.w	r3, r0, r2
 801c27a:	930b      	str	r3, [sp, #44]	; 0x2c
 801c27c:	2300      	movs	r3, #0
 801c27e:	930a      	str	r3, [sp, #40]	; 0x28
 801c280:	eb0b 0301 	add.w	r3, fp, r1
 801c284:	9a04      	ldr	r2, [sp, #16]
 801c286:	459b      	cmp	fp, r3
 801c288:	448a      	add	sl, r1
 801c28a:	4492      	add	sl, r2
 801c28c:	465a      	mov	r2, fp
 801c28e:	bfa8      	it	ge
 801c290:	461a      	movge	r2, r3
 801c292:	4552      	cmp	r2, sl
 801c294:	bfa8      	it	ge
 801c296:	4652      	movge	r2, sl
 801c298:	2a00      	cmp	r2, #0
 801c29a:	bfc2      	ittt	gt
 801c29c:	1a9b      	subgt	r3, r3, r2
 801c29e:	ebaa 0a02 	subgt.w	sl, sl, r2
 801c2a2:	ebab 0b02 	subgt.w	fp, fp, r2
 801c2a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c2a8:	2a00      	cmp	r2, #0
 801c2aa:	dd18      	ble.n	801c2de <_strtod_l+0x736>
 801c2ac:	4631      	mov	r1, r6
 801c2ae:	4620      	mov	r0, r4
 801c2b0:	930f      	str	r3, [sp, #60]	; 0x3c
 801c2b2:	f001 fe79 	bl	801dfa8 <__pow5mult>
 801c2b6:	4606      	mov	r6, r0
 801c2b8:	2800      	cmp	r0, #0
 801c2ba:	f43f aeb1 	beq.w	801c020 <_strtod_l+0x478>
 801c2be:	4601      	mov	r1, r0
 801c2c0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801c2c2:	4620      	mov	r0, r4
 801c2c4:	f001 fdc6 	bl	801de54 <__multiply>
 801c2c8:	900e      	str	r0, [sp, #56]	; 0x38
 801c2ca:	2800      	cmp	r0, #0
 801c2cc:	f43f aea8 	beq.w	801c020 <_strtod_l+0x478>
 801c2d0:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c2d2:	4620      	mov	r0, r4
 801c2d4:	f001 fca6 	bl	801dc24 <_Bfree>
 801c2d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c2da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c2dc:	9212      	str	r2, [sp, #72]	; 0x48
 801c2de:	2b00      	cmp	r3, #0
 801c2e0:	f300 8093 	bgt.w	801c40a <_strtod_l+0x862>
 801c2e4:	9b07      	ldr	r3, [sp, #28]
 801c2e6:	2b00      	cmp	r3, #0
 801c2e8:	dd08      	ble.n	801c2fc <_strtod_l+0x754>
 801c2ea:	4639      	mov	r1, r7
 801c2ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c2ee:	4620      	mov	r0, r4
 801c2f0:	f001 fe5a 	bl	801dfa8 <__pow5mult>
 801c2f4:	4607      	mov	r7, r0
 801c2f6:	2800      	cmp	r0, #0
 801c2f8:	f43f ae92 	beq.w	801c020 <_strtod_l+0x478>
 801c2fc:	f1ba 0f00 	cmp.w	sl, #0
 801c300:	dd08      	ble.n	801c314 <_strtod_l+0x76c>
 801c302:	4639      	mov	r1, r7
 801c304:	4652      	mov	r2, sl
 801c306:	4620      	mov	r0, r4
 801c308:	f001 fea8 	bl	801e05c <__lshift>
 801c30c:	4607      	mov	r7, r0
 801c30e:	2800      	cmp	r0, #0
 801c310:	f43f ae86 	beq.w	801c020 <_strtod_l+0x478>
 801c314:	f1bb 0f00 	cmp.w	fp, #0
 801c318:	dd08      	ble.n	801c32c <_strtod_l+0x784>
 801c31a:	4631      	mov	r1, r6
 801c31c:	465a      	mov	r2, fp
 801c31e:	4620      	mov	r0, r4
 801c320:	f001 fe9c 	bl	801e05c <__lshift>
 801c324:	4606      	mov	r6, r0
 801c326:	2800      	cmp	r0, #0
 801c328:	f43f ae7a 	beq.w	801c020 <_strtod_l+0x478>
 801c32c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c32e:	463a      	mov	r2, r7
 801c330:	4620      	mov	r0, r4
 801c332:	f001 ff1f 	bl	801e174 <__mdiff>
 801c336:	4605      	mov	r5, r0
 801c338:	2800      	cmp	r0, #0
 801c33a:	f43f ae71 	beq.w	801c020 <_strtod_l+0x478>
 801c33e:	2300      	movs	r3, #0
 801c340:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 801c344:	60c3      	str	r3, [r0, #12]
 801c346:	4631      	mov	r1, r6
 801c348:	f001 fef8 	bl	801e13c <__mcmp>
 801c34c:	2800      	cmp	r0, #0
 801c34e:	da7d      	bge.n	801c44c <_strtod_l+0x8a4>
 801c350:	ea5a 0308 	orrs.w	r3, sl, r8
 801c354:	f040 80a3 	bne.w	801c49e <_strtod_l+0x8f6>
 801c358:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c35c:	2b00      	cmp	r3, #0
 801c35e:	f040 809e 	bne.w	801c49e <_strtod_l+0x8f6>
 801c362:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801c366:	0d1b      	lsrs	r3, r3, #20
 801c368:	051b      	lsls	r3, r3, #20
 801c36a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801c36e:	f240 8096 	bls.w	801c49e <_strtod_l+0x8f6>
 801c372:	696b      	ldr	r3, [r5, #20]
 801c374:	b91b      	cbnz	r3, 801c37e <_strtod_l+0x7d6>
 801c376:	692b      	ldr	r3, [r5, #16]
 801c378:	2b01      	cmp	r3, #1
 801c37a:	f340 8090 	ble.w	801c49e <_strtod_l+0x8f6>
 801c37e:	4629      	mov	r1, r5
 801c380:	2201      	movs	r2, #1
 801c382:	4620      	mov	r0, r4
 801c384:	f001 fe6a 	bl	801e05c <__lshift>
 801c388:	4631      	mov	r1, r6
 801c38a:	4605      	mov	r5, r0
 801c38c:	f001 fed6 	bl	801e13c <__mcmp>
 801c390:	2800      	cmp	r0, #0
 801c392:	f340 8084 	ble.w	801c49e <_strtod_l+0x8f6>
 801c396:	9904      	ldr	r1, [sp, #16]
 801c398:	4a2b      	ldr	r2, [pc, #172]	; (801c448 <_strtod_l+0x8a0>)
 801c39a:	464b      	mov	r3, r9
 801c39c:	2900      	cmp	r1, #0
 801c39e:	f000 809d 	beq.w	801c4dc <_strtod_l+0x934>
 801c3a2:	ea02 0109 	and.w	r1, r2, r9
 801c3a6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801c3aa:	f300 8097 	bgt.w	801c4dc <_strtod_l+0x934>
 801c3ae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801c3b2:	f77f aea5 	ble.w	801c100 <_strtod_l+0x558>
 801c3b6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 801c438 <_strtod_l+0x890>
 801c3ba:	ec49 8b16 	vmov	d6, r8, r9
 801c3be:	ee26 7b07 	vmul.f64	d7, d6, d7
 801c3c2:	ed8d 7b04 	vstr	d7, [sp, #16]
 801c3c6:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801c3ca:	4313      	orrs	r3, r2
 801c3cc:	bf08      	it	eq
 801c3ce:	2322      	moveq	r3, #34	; 0x22
 801c3d0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801c3d4:	bf08      	it	eq
 801c3d6:	6023      	streq	r3, [r4, #0]
 801c3d8:	e62c      	b.n	801c034 <_strtod_l+0x48c>
 801c3da:	f04f 31ff 	mov.w	r1, #4294967295
 801c3de:	fa01 f202 	lsl.w	r2, r1, r2
 801c3e2:	ea02 0808 	and.w	r8, r2, r8
 801c3e6:	e6d9      	b.n	801c19c <_strtod_l+0x5f4>
 801c3e8:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 801c3ec:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801c3f0:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801c3f4:	33e2      	adds	r3, #226	; 0xe2
 801c3f6:	fa00 f303 	lsl.w	r3, r0, r3
 801c3fa:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 801c3fe:	e73f      	b.n	801c280 <_strtod_l+0x6d8>
 801c400:	2200      	movs	r2, #0
 801c402:	2301      	movs	r3, #1
 801c404:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801c408:	e73a      	b.n	801c280 <_strtod_l+0x6d8>
 801c40a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c40c:	461a      	mov	r2, r3
 801c40e:	4620      	mov	r0, r4
 801c410:	f001 fe24 	bl	801e05c <__lshift>
 801c414:	9012      	str	r0, [sp, #72]	; 0x48
 801c416:	2800      	cmp	r0, #0
 801c418:	f47f af64 	bne.w	801c2e4 <_strtod_l+0x73c>
 801c41c:	e600      	b.n	801c020 <_strtod_l+0x478>
 801c41e:	bf00      	nop
 801c420:	94a03595 	.word	0x94a03595
 801c424:	3fcfffff 	.word	0x3fcfffff
 801c428:	94a03595 	.word	0x94a03595
 801c42c:	3fdfffff 	.word	0x3fdfffff
 801c430:	35afe535 	.word	0x35afe535
 801c434:	3fe00000 	.word	0x3fe00000
 801c438:	00000000 	.word	0x00000000
 801c43c:	39500000 	.word	0x39500000
 801c440:	0801fcb0 	.word	0x0801fcb0
 801c444:	fffffc02 	.word	0xfffffc02
 801c448:	7ff00000 	.word	0x7ff00000
 801c44c:	46cb      	mov	fp, r9
 801c44e:	d15f      	bne.n	801c510 <_strtod_l+0x968>
 801c450:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c454:	f1ba 0f00 	cmp.w	sl, #0
 801c458:	d02a      	beq.n	801c4b0 <_strtod_l+0x908>
 801c45a:	4aa7      	ldr	r2, [pc, #668]	; (801c6f8 <_strtod_l+0xb50>)
 801c45c:	4293      	cmp	r3, r2
 801c45e:	d12b      	bne.n	801c4b8 <_strtod_l+0x910>
 801c460:	9b04      	ldr	r3, [sp, #16]
 801c462:	4642      	mov	r2, r8
 801c464:	b1fb      	cbz	r3, 801c4a6 <_strtod_l+0x8fe>
 801c466:	4ba5      	ldr	r3, [pc, #660]	; (801c6fc <_strtod_l+0xb54>)
 801c468:	ea09 0303 	and.w	r3, r9, r3
 801c46c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801c470:	f04f 31ff 	mov.w	r1, #4294967295
 801c474:	d81a      	bhi.n	801c4ac <_strtod_l+0x904>
 801c476:	0d1b      	lsrs	r3, r3, #20
 801c478:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801c47c:	fa01 f303 	lsl.w	r3, r1, r3
 801c480:	429a      	cmp	r2, r3
 801c482:	d119      	bne.n	801c4b8 <_strtod_l+0x910>
 801c484:	4b9e      	ldr	r3, [pc, #632]	; (801c700 <_strtod_l+0xb58>)
 801c486:	459b      	cmp	fp, r3
 801c488:	d102      	bne.n	801c490 <_strtod_l+0x8e8>
 801c48a:	3201      	adds	r2, #1
 801c48c:	f43f adc8 	beq.w	801c020 <_strtod_l+0x478>
 801c490:	4b9a      	ldr	r3, [pc, #616]	; (801c6fc <_strtod_l+0xb54>)
 801c492:	ea0b 0303 	and.w	r3, fp, r3
 801c496:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801c49a:	f04f 0800 	mov.w	r8, #0
 801c49e:	9b04      	ldr	r3, [sp, #16]
 801c4a0:	2b00      	cmp	r3, #0
 801c4a2:	d188      	bne.n	801c3b6 <_strtod_l+0x80e>
 801c4a4:	e5c6      	b.n	801c034 <_strtod_l+0x48c>
 801c4a6:	f04f 33ff 	mov.w	r3, #4294967295
 801c4aa:	e7e9      	b.n	801c480 <_strtod_l+0x8d8>
 801c4ac:	460b      	mov	r3, r1
 801c4ae:	e7e7      	b.n	801c480 <_strtod_l+0x8d8>
 801c4b0:	ea53 0308 	orrs.w	r3, r3, r8
 801c4b4:	f43f af6f 	beq.w	801c396 <_strtod_l+0x7ee>
 801c4b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c4ba:	b1cb      	cbz	r3, 801c4f0 <_strtod_l+0x948>
 801c4bc:	ea13 0f0b 	tst.w	r3, fp
 801c4c0:	d0ed      	beq.n	801c49e <_strtod_l+0x8f6>
 801c4c2:	9a04      	ldr	r2, [sp, #16]
 801c4c4:	4640      	mov	r0, r8
 801c4c6:	4649      	mov	r1, r9
 801c4c8:	f1ba 0f00 	cmp.w	sl, #0
 801c4cc:	d014      	beq.n	801c4f8 <_strtod_l+0x950>
 801c4ce:	f7ff fb50 	bl	801bb72 <sulp>
 801c4d2:	ee38 7b00 	vadd.f64	d7, d8, d0
 801c4d6:	ec59 8b17 	vmov	r8, r9, d7
 801c4da:	e7e0      	b.n	801c49e <_strtod_l+0x8f6>
 801c4dc:	4013      	ands	r3, r2
 801c4de:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801c4e2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801c4e6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801c4ea:	f04f 38ff 	mov.w	r8, #4294967295
 801c4ee:	e7d6      	b.n	801c49e <_strtod_l+0x8f6>
 801c4f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c4f2:	ea13 0f08 	tst.w	r3, r8
 801c4f6:	e7e3      	b.n	801c4c0 <_strtod_l+0x918>
 801c4f8:	f7ff fb3b 	bl	801bb72 <sulp>
 801c4fc:	ee38 0b40 	vsub.f64	d0, d8, d0
 801c500:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801c504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c508:	ec59 8b10 	vmov	r8, r9, d0
 801c50c:	d1c7      	bne.n	801c49e <_strtod_l+0x8f6>
 801c50e:	e5f7      	b.n	801c100 <_strtod_l+0x558>
 801c510:	4631      	mov	r1, r6
 801c512:	4628      	mov	r0, r5
 801c514:	f001 ff90 	bl	801e438 <__ratio>
 801c518:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801c51c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801c520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c524:	d865      	bhi.n	801c5f2 <_strtod_l+0xa4a>
 801c526:	f1ba 0f00 	cmp.w	sl, #0
 801c52a:	d042      	beq.n	801c5b2 <_strtod_l+0xa0a>
 801c52c:	4b75      	ldr	r3, [pc, #468]	; (801c704 <_strtod_l+0xb5c>)
 801c52e:	2200      	movs	r2, #0
 801c530:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801c534:	4871      	ldr	r0, [pc, #452]	; (801c6fc <_strtod_l+0xb54>)
 801c536:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 801c710 <_strtod_l+0xb68>
 801c53a:	ea0b 0100 	and.w	r1, fp, r0
 801c53e:	4561      	cmp	r1, ip
 801c540:	f040 808e 	bne.w	801c660 <_strtod_l+0xab8>
 801c544:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 801c548:	ec49 8b10 	vmov	d0, r8, r9
 801c54c:	ec43 2b1c 	vmov	d12, r2, r3
 801c550:	910a      	str	r1, [sp, #40]	; 0x28
 801c552:	f001 fe99 	bl	801e288 <__ulp>
 801c556:	ec49 8b1e 	vmov	d14, r8, r9
 801c55a:	4868      	ldr	r0, [pc, #416]	; (801c6fc <_strtod_l+0xb54>)
 801c55c:	eeac eb00 	vfma.f64	d14, d12, d0
 801c560:	ee1e 3a90 	vmov	r3, s29
 801c564:	4a68      	ldr	r2, [pc, #416]	; (801c708 <_strtod_l+0xb60>)
 801c566:	990a      	ldr	r1, [sp, #40]	; 0x28
 801c568:	4018      	ands	r0, r3
 801c56a:	4290      	cmp	r0, r2
 801c56c:	ec59 8b1e 	vmov	r8, r9, d14
 801c570:	d94e      	bls.n	801c610 <_strtod_l+0xa68>
 801c572:	ee18 3a90 	vmov	r3, s17
 801c576:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801c57a:	4293      	cmp	r3, r2
 801c57c:	d104      	bne.n	801c588 <_strtod_l+0x9e0>
 801c57e:	ee18 3a10 	vmov	r3, s16
 801c582:	3301      	adds	r3, #1
 801c584:	f43f ad4c 	beq.w	801c020 <_strtod_l+0x478>
 801c588:	f8df 9174 	ldr.w	r9, [pc, #372]	; 801c700 <_strtod_l+0xb58>
 801c58c:	f04f 38ff 	mov.w	r8, #4294967295
 801c590:	9912      	ldr	r1, [sp, #72]	; 0x48
 801c592:	4620      	mov	r0, r4
 801c594:	f001 fb46 	bl	801dc24 <_Bfree>
 801c598:	4639      	mov	r1, r7
 801c59a:	4620      	mov	r0, r4
 801c59c:	f001 fb42 	bl	801dc24 <_Bfree>
 801c5a0:	4631      	mov	r1, r6
 801c5a2:	4620      	mov	r0, r4
 801c5a4:	f001 fb3e 	bl	801dc24 <_Bfree>
 801c5a8:	4629      	mov	r1, r5
 801c5aa:	4620      	mov	r0, r4
 801c5ac:	f001 fb3a 	bl	801dc24 <_Bfree>
 801c5b0:	e619      	b.n	801c1e6 <_strtod_l+0x63e>
 801c5b2:	f1b8 0f00 	cmp.w	r8, #0
 801c5b6:	d112      	bne.n	801c5de <_strtod_l+0xa36>
 801c5b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c5bc:	b9b3      	cbnz	r3, 801c5ec <_strtod_l+0xa44>
 801c5be:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801c5c2:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801c5c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c5ca:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801c5ce:	bf58      	it	pl
 801c5d0:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 801c5d4:	eeb1 7b4d 	vneg.f64	d7, d13
 801c5d8:	ec53 2b17 	vmov	r2, r3, d7
 801c5dc:	e7aa      	b.n	801c534 <_strtod_l+0x98c>
 801c5de:	f1b8 0f01 	cmp.w	r8, #1
 801c5e2:	d103      	bne.n	801c5ec <_strtod_l+0xa44>
 801c5e4:	f1b9 0f00 	cmp.w	r9, #0
 801c5e8:	f43f ad8a 	beq.w	801c100 <_strtod_l+0x558>
 801c5ec:	4b47      	ldr	r3, [pc, #284]	; (801c70c <_strtod_l+0xb64>)
 801c5ee:	2200      	movs	r2, #0
 801c5f0:	e79e      	b.n	801c530 <_strtod_l+0x988>
 801c5f2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801c5f6:	ee20 db0d 	vmul.f64	d13, d0, d13
 801c5fa:	f1ba 0f00 	cmp.w	sl, #0
 801c5fe:	d104      	bne.n	801c60a <_strtod_l+0xa62>
 801c600:	eeb1 7b4d 	vneg.f64	d7, d13
 801c604:	ec53 2b17 	vmov	r2, r3, d7
 801c608:	e794      	b.n	801c534 <_strtod_l+0x98c>
 801c60a:	eeb0 7b4d 	vmov.f64	d7, d13
 801c60e:	e7f9      	b.n	801c604 <_strtod_l+0xa5c>
 801c610:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801c614:	9b04      	ldr	r3, [sp, #16]
 801c616:	2b00      	cmp	r3, #0
 801c618:	d1ba      	bne.n	801c590 <_strtod_l+0x9e8>
 801c61a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801c61e:	0d1b      	lsrs	r3, r3, #20
 801c620:	051b      	lsls	r3, r3, #20
 801c622:	4299      	cmp	r1, r3
 801c624:	d1b4      	bne.n	801c590 <_strtod_l+0x9e8>
 801c626:	ec51 0b1d 	vmov	r0, r1, d13
 801c62a:	f7e4 f8ad 	bl	8000788 <__aeabi_d2lz>
 801c62e:	f7e4 f865 	bl	80006fc <__aeabi_l2d>
 801c632:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c636:	ec41 0b17 	vmov	d7, r0, r1
 801c63a:	ea43 0308 	orr.w	r3, r3, r8
 801c63e:	ea53 030a 	orrs.w	r3, r3, sl
 801c642:	ee3d db47 	vsub.f64	d13, d13, d7
 801c646:	d03c      	beq.n	801c6c2 <_strtod_l+0xb1a>
 801c648:	eeb4 dbca 	vcmpe.f64	d13, d10
 801c64c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c650:	f53f acf0 	bmi.w	801c034 <_strtod_l+0x48c>
 801c654:	eeb4 dbcb 	vcmpe.f64	d13, d11
 801c658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c65c:	dd98      	ble.n	801c590 <_strtod_l+0x9e8>
 801c65e:	e4e9      	b.n	801c034 <_strtod_l+0x48c>
 801c660:	9804      	ldr	r0, [sp, #16]
 801c662:	b1f0      	cbz	r0, 801c6a2 <_strtod_l+0xafa>
 801c664:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 801c668:	d81b      	bhi.n	801c6a2 <_strtod_l+0xafa>
 801c66a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 801c6f0 <_strtod_l+0xb48>
 801c66e:	eeb4 dbc7 	vcmpe.f64	d13, d7
 801c672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c676:	d811      	bhi.n	801c69c <_strtod_l+0xaf4>
 801c678:	eebc dbcd 	vcvt.u32.f64	s26, d13
 801c67c:	ee1d 3a10 	vmov	r3, s26
 801c680:	2b01      	cmp	r3, #1
 801c682:	bf38      	it	cc
 801c684:	2301      	movcc	r3, #1
 801c686:	ee0d 3a10 	vmov	s26, r3
 801c68a:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 801c68e:	f1ba 0f00 	cmp.w	sl, #0
 801c692:	d113      	bne.n	801c6bc <_strtod_l+0xb14>
 801c694:	eeb1 7b4d 	vneg.f64	d7, d13
 801c698:	ec53 2b17 	vmov	r2, r3, d7
 801c69c:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 801c6a0:	1a43      	subs	r3, r0, r1
 801c6a2:	eeb0 0b48 	vmov.f64	d0, d8
 801c6a6:	ec43 2b1c 	vmov	d12, r2, r3
 801c6aa:	910a      	str	r1, [sp, #40]	; 0x28
 801c6ac:	f001 fdec 	bl	801e288 <__ulp>
 801c6b0:	990a      	ldr	r1, [sp, #40]	; 0x28
 801c6b2:	eeac 8b00 	vfma.f64	d8, d12, d0
 801c6b6:	ec59 8b18 	vmov	r8, r9, d8
 801c6ba:	e7ab      	b.n	801c614 <_strtod_l+0xa6c>
 801c6bc:	eeb0 7b4d 	vmov.f64	d7, d13
 801c6c0:	e7ea      	b.n	801c698 <_strtod_l+0xaf0>
 801c6c2:	eeb4 dbc9 	vcmpe.f64	d13, d9
 801c6c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c6ca:	f57f af61 	bpl.w	801c590 <_strtod_l+0x9e8>
 801c6ce:	e4b1      	b.n	801c034 <_strtod_l+0x48c>
 801c6d0:	2300      	movs	r3, #0
 801c6d2:	9308      	str	r3, [sp, #32]
 801c6d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c6d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c6d8:	6013      	str	r3, [r2, #0]
 801c6da:	f7ff baad 	b.w	801bc38 <_strtod_l+0x90>
 801c6de:	2a65      	cmp	r2, #101	; 0x65
 801c6e0:	f43f ab9f 	beq.w	801be22 <_strtod_l+0x27a>
 801c6e4:	2a45      	cmp	r2, #69	; 0x45
 801c6e6:	f43f ab9c 	beq.w	801be22 <_strtod_l+0x27a>
 801c6ea:	2101      	movs	r1, #1
 801c6ec:	f7ff bbd4 	b.w	801be98 <_strtod_l+0x2f0>
 801c6f0:	ffc00000 	.word	0xffc00000
 801c6f4:	41dfffff 	.word	0x41dfffff
 801c6f8:	000fffff 	.word	0x000fffff
 801c6fc:	7ff00000 	.word	0x7ff00000
 801c700:	7fefffff 	.word	0x7fefffff
 801c704:	3ff00000 	.word	0x3ff00000
 801c708:	7c9fffff 	.word	0x7c9fffff
 801c70c:	bff00000 	.word	0xbff00000
 801c710:	7fe00000 	.word	0x7fe00000

0801c714 <_strtod_r>:
 801c714:	4b01      	ldr	r3, [pc, #4]	; (801c71c <_strtod_r+0x8>)
 801c716:	f7ff ba47 	b.w	801bba8 <_strtod_l>
 801c71a:	bf00      	nop
 801c71c:	24000168 	.word	0x24000168

0801c720 <_strtol_l.constprop.0>:
 801c720:	2b01      	cmp	r3, #1
 801c722:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c726:	d001      	beq.n	801c72c <_strtol_l.constprop.0+0xc>
 801c728:	2b24      	cmp	r3, #36	; 0x24
 801c72a:	d906      	bls.n	801c73a <_strtol_l.constprop.0+0x1a>
 801c72c:	f7fe fb26 	bl	801ad7c <__errno>
 801c730:	2316      	movs	r3, #22
 801c732:	6003      	str	r3, [r0, #0]
 801c734:	2000      	movs	r0, #0
 801c736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c73a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801c820 <_strtol_l.constprop.0+0x100>
 801c73e:	460d      	mov	r5, r1
 801c740:	462e      	mov	r6, r5
 801c742:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c746:	f814 700c 	ldrb.w	r7, [r4, ip]
 801c74a:	f017 0708 	ands.w	r7, r7, #8
 801c74e:	d1f7      	bne.n	801c740 <_strtol_l.constprop.0+0x20>
 801c750:	2c2d      	cmp	r4, #45	; 0x2d
 801c752:	d132      	bne.n	801c7ba <_strtol_l.constprop.0+0x9a>
 801c754:	782c      	ldrb	r4, [r5, #0]
 801c756:	2701      	movs	r7, #1
 801c758:	1cb5      	adds	r5, r6, #2
 801c75a:	2b00      	cmp	r3, #0
 801c75c:	d05b      	beq.n	801c816 <_strtol_l.constprop.0+0xf6>
 801c75e:	2b10      	cmp	r3, #16
 801c760:	d109      	bne.n	801c776 <_strtol_l.constprop.0+0x56>
 801c762:	2c30      	cmp	r4, #48	; 0x30
 801c764:	d107      	bne.n	801c776 <_strtol_l.constprop.0+0x56>
 801c766:	782c      	ldrb	r4, [r5, #0]
 801c768:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801c76c:	2c58      	cmp	r4, #88	; 0x58
 801c76e:	d14d      	bne.n	801c80c <_strtol_l.constprop.0+0xec>
 801c770:	786c      	ldrb	r4, [r5, #1]
 801c772:	2310      	movs	r3, #16
 801c774:	3502      	adds	r5, #2
 801c776:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801c77a:	f108 38ff 	add.w	r8, r8, #4294967295
 801c77e:	f04f 0c00 	mov.w	ip, #0
 801c782:	fbb8 f9f3 	udiv	r9, r8, r3
 801c786:	4666      	mov	r6, ip
 801c788:	fb03 8a19 	mls	sl, r3, r9, r8
 801c78c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801c790:	f1be 0f09 	cmp.w	lr, #9
 801c794:	d816      	bhi.n	801c7c4 <_strtol_l.constprop.0+0xa4>
 801c796:	4674      	mov	r4, lr
 801c798:	42a3      	cmp	r3, r4
 801c79a:	dd24      	ble.n	801c7e6 <_strtol_l.constprop.0+0xc6>
 801c79c:	f1bc 0f00 	cmp.w	ip, #0
 801c7a0:	db1e      	blt.n	801c7e0 <_strtol_l.constprop.0+0xc0>
 801c7a2:	45b1      	cmp	r9, r6
 801c7a4:	d31c      	bcc.n	801c7e0 <_strtol_l.constprop.0+0xc0>
 801c7a6:	d101      	bne.n	801c7ac <_strtol_l.constprop.0+0x8c>
 801c7a8:	45a2      	cmp	sl, r4
 801c7aa:	db19      	blt.n	801c7e0 <_strtol_l.constprop.0+0xc0>
 801c7ac:	fb06 4603 	mla	r6, r6, r3, r4
 801c7b0:	f04f 0c01 	mov.w	ip, #1
 801c7b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c7b8:	e7e8      	b.n	801c78c <_strtol_l.constprop.0+0x6c>
 801c7ba:	2c2b      	cmp	r4, #43	; 0x2b
 801c7bc:	bf04      	itt	eq
 801c7be:	782c      	ldrbeq	r4, [r5, #0]
 801c7c0:	1cb5      	addeq	r5, r6, #2
 801c7c2:	e7ca      	b.n	801c75a <_strtol_l.constprop.0+0x3a>
 801c7c4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801c7c8:	f1be 0f19 	cmp.w	lr, #25
 801c7cc:	d801      	bhi.n	801c7d2 <_strtol_l.constprop.0+0xb2>
 801c7ce:	3c37      	subs	r4, #55	; 0x37
 801c7d0:	e7e2      	b.n	801c798 <_strtol_l.constprop.0+0x78>
 801c7d2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801c7d6:	f1be 0f19 	cmp.w	lr, #25
 801c7da:	d804      	bhi.n	801c7e6 <_strtol_l.constprop.0+0xc6>
 801c7dc:	3c57      	subs	r4, #87	; 0x57
 801c7de:	e7db      	b.n	801c798 <_strtol_l.constprop.0+0x78>
 801c7e0:	f04f 3cff 	mov.w	ip, #4294967295
 801c7e4:	e7e6      	b.n	801c7b4 <_strtol_l.constprop.0+0x94>
 801c7e6:	f1bc 0f00 	cmp.w	ip, #0
 801c7ea:	da05      	bge.n	801c7f8 <_strtol_l.constprop.0+0xd8>
 801c7ec:	2322      	movs	r3, #34	; 0x22
 801c7ee:	6003      	str	r3, [r0, #0]
 801c7f0:	4646      	mov	r6, r8
 801c7f2:	b942      	cbnz	r2, 801c806 <_strtol_l.constprop.0+0xe6>
 801c7f4:	4630      	mov	r0, r6
 801c7f6:	e79e      	b.n	801c736 <_strtol_l.constprop.0+0x16>
 801c7f8:	b107      	cbz	r7, 801c7fc <_strtol_l.constprop.0+0xdc>
 801c7fa:	4276      	negs	r6, r6
 801c7fc:	2a00      	cmp	r2, #0
 801c7fe:	d0f9      	beq.n	801c7f4 <_strtol_l.constprop.0+0xd4>
 801c800:	f1bc 0f00 	cmp.w	ip, #0
 801c804:	d000      	beq.n	801c808 <_strtol_l.constprop.0+0xe8>
 801c806:	1e69      	subs	r1, r5, #1
 801c808:	6011      	str	r1, [r2, #0]
 801c80a:	e7f3      	b.n	801c7f4 <_strtol_l.constprop.0+0xd4>
 801c80c:	2430      	movs	r4, #48	; 0x30
 801c80e:	2b00      	cmp	r3, #0
 801c810:	d1b1      	bne.n	801c776 <_strtol_l.constprop.0+0x56>
 801c812:	2308      	movs	r3, #8
 801c814:	e7af      	b.n	801c776 <_strtol_l.constprop.0+0x56>
 801c816:	2c30      	cmp	r4, #48	; 0x30
 801c818:	d0a5      	beq.n	801c766 <_strtol_l.constprop.0+0x46>
 801c81a:	230a      	movs	r3, #10
 801c81c:	e7ab      	b.n	801c776 <_strtol_l.constprop.0+0x56>
 801c81e:	bf00      	nop
 801c820:	0801fcd9 	.word	0x0801fcd9

0801c824 <_strtol_r>:
 801c824:	f7ff bf7c 	b.w	801c720 <_strtol_l.constprop.0>

0801c828 <_write_r>:
 801c828:	b538      	push	{r3, r4, r5, lr}
 801c82a:	4d07      	ldr	r5, [pc, #28]	; (801c848 <_write_r+0x20>)
 801c82c:	4604      	mov	r4, r0
 801c82e:	4608      	mov	r0, r1
 801c830:	4611      	mov	r1, r2
 801c832:	2200      	movs	r2, #0
 801c834:	602a      	str	r2, [r5, #0]
 801c836:	461a      	mov	r2, r3
 801c838:	f7e7 fa3d 	bl	8003cb6 <_write>
 801c83c:	1c43      	adds	r3, r0, #1
 801c83e:	d102      	bne.n	801c846 <_write_r+0x1e>
 801c840:	682b      	ldr	r3, [r5, #0]
 801c842:	b103      	cbz	r3, 801c846 <_write_r+0x1e>
 801c844:	6023      	str	r3, [r4, #0]
 801c846:	bd38      	pop	{r3, r4, r5, pc}
 801c848:	240034f8 	.word	0x240034f8

0801c84c <_close_r>:
 801c84c:	b538      	push	{r3, r4, r5, lr}
 801c84e:	4d06      	ldr	r5, [pc, #24]	; (801c868 <_close_r+0x1c>)
 801c850:	2300      	movs	r3, #0
 801c852:	4604      	mov	r4, r0
 801c854:	4608      	mov	r0, r1
 801c856:	602b      	str	r3, [r5, #0]
 801c858:	f7e7 fa49 	bl	8003cee <_close>
 801c85c:	1c43      	adds	r3, r0, #1
 801c85e:	d102      	bne.n	801c866 <_close_r+0x1a>
 801c860:	682b      	ldr	r3, [r5, #0]
 801c862:	b103      	cbz	r3, 801c866 <_close_r+0x1a>
 801c864:	6023      	str	r3, [r4, #0]
 801c866:	bd38      	pop	{r3, r4, r5, pc}
 801c868:	240034f8 	.word	0x240034f8

0801c86c <quorem>:
 801c86c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c870:	6903      	ldr	r3, [r0, #16]
 801c872:	690c      	ldr	r4, [r1, #16]
 801c874:	42a3      	cmp	r3, r4
 801c876:	4607      	mov	r7, r0
 801c878:	f2c0 8081 	blt.w	801c97e <quorem+0x112>
 801c87c:	3c01      	subs	r4, #1
 801c87e:	f101 0814 	add.w	r8, r1, #20
 801c882:	f100 0514 	add.w	r5, r0, #20
 801c886:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c88a:	9301      	str	r3, [sp, #4]
 801c88c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801c890:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c894:	3301      	adds	r3, #1
 801c896:	429a      	cmp	r2, r3
 801c898:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801c89c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801c8a0:	fbb2 f6f3 	udiv	r6, r2, r3
 801c8a4:	d331      	bcc.n	801c90a <quorem+0x9e>
 801c8a6:	f04f 0e00 	mov.w	lr, #0
 801c8aa:	4640      	mov	r0, r8
 801c8ac:	46ac      	mov	ip, r5
 801c8ae:	46f2      	mov	sl, lr
 801c8b0:	f850 2b04 	ldr.w	r2, [r0], #4
 801c8b4:	b293      	uxth	r3, r2
 801c8b6:	fb06 e303 	mla	r3, r6, r3, lr
 801c8ba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801c8be:	b29b      	uxth	r3, r3
 801c8c0:	ebaa 0303 	sub.w	r3, sl, r3
 801c8c4:	f8dc a000 	ldr.w	sl, [ip]
 801c8c8:	0c12      	lsrs	r2, r2, #16
 801c8ca:	fa13 f38a 	uxtah	r3, r3, sl
 801c8ce:	fb06 e202 	mla	r2, r6, r2, lr
 801c8d2:	9300      	str	r3, [sp, #0]
 801c8d4:	9b00      	ldr	r3, [sp, #0]
 801c8d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801c8da:	b292      	uxth	r2, r2
 801c8dc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801c8e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c8e4:	f8bd 3000 	ldrh.w	r3, [sp]
 801c8e8:	4581      	cmp	r9, r0
 801c8ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c8ee:	f84c 3b04 	str.w	r3, [ip], #4
 801c8f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801c8f6:	d2db      	bcs.n	801c8b0 <quorem+0x44>
 801c8f8:	f855 300b 	ldr.w	r3, [r5, fp]
 801c8fc:	b92b      	cbnz	r3, 801c90a <quorem+0x9e>
 801c8fe:	9b01      	ldr	r3, [sp, #4]
 801c900:	3b04      	subs	r3, #4
 801c902:	429d      	cmp	r5, r3
 801c904:	461a      	mov	r2, r3
 801c906:	d32e      	bcc.n	801c966 <quorem+0xfa>
 801c908:	613c      	str	r4, [r7, #16]
 801c90a:	4638      	mov	r0, r7
 801c90c:	f001 fc16 	bl	801e13c <__mcmp>
 801c910:	2800      	cmp	r0, #0
 801c912:	db24      	blt.n	801c95e <quorem+0xf2>
 801c914:	3601      	adds	r6, #1
 801c916:	4628      	mov	r0, r5
 801c918:	f04f 0c00 	mov.w	ip, #0
 801c91c:	f858 2b04 	ldr.w	r2, [r8], #4
 801c920:	f8d0 e000 	ldr.w	lr, [r0]
 801c924:	b293      	uxth	r3, r2
 801c926:	ebac 0303 	sub.w	r3, ip, r3
 801c92a:	0c12      	lsrs	r2, r2, #16
 801c92c:	fa13 f38e 	uxtah	r3, r3, lr
 801c930:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801c934:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c938:	b29b      	uxth	r3, r3
 801c93a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c93e:	45c1      	cmp	r9, r8
 801c940:	f840 3b04 	str.w	r3, [r0], #4
 801c944:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801c948:	d2e8      	bcs.n	801c91c <quorem+0xb0>
 801c94a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c94e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c952:	b922      	cbnz	r2, 801c95e <quorem+0xf2>
 801c954:	3b04      	subs	r3, #4
 801c956:	429d      	cmp	r5, r3
 801c958:	461a      	mov	r2, r3
 801c95a:	d30a      	bcc.n	801c972 <quorem+0x106>
 801c95c:	613c      	str	r4, [r7, #16]
 801c95e:	4630      	mov	r0, r6
 801c960:	b003      	add	sp, #12
 801c962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c966:	6812      	ldr	r2, [r2, #0]
 801c968:	3b04      	subs	r3, #4
 801c96a:	2a00      	cmp	r2, #0
 801c96c:	d1cc      	bne.n	801c908 <quorem+0x9c>
 801c96e:	3c01      	subs	r4, #1
 801c970:	e7c7      	b.n	801c902 <quorem+0x96>
 801c972:	6812      	ldr	r2, [r2, #0]
 801c974:	3b04      	subs	r3, #4
 801c976:	2a00      	cmp	r2, #0
 801c978:	d1f0      	bne.n	801c95c <quorem+0xf0>
 801c97a:	3c01      	subs	r4, #1
 801c97c:	e7eb      	b.n	801c956 <quorem+0xea>
 801c97e:	2000      	movs	r0, #0
 801c980:	e7ee      	b.n	801c960 <quorem+0xf4>
 801c982:	0000      	movs	r0, r0
 801c984:	0000      	movs	r0, r0
	...

0801c988 <_dtoa_r>:
 801c988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c98c:	ed2d 8b02 	vpush	{d8}
 801c990:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801c992:	b091      	sub	sp, #68	; 0x44
 801c994:	ed8d 0b02 	vstr	d0, [sp, #8]
 801c998:	ec59 8b10 	vmov	r8, r9, d0
 801c99c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801c99e:	9106      	str	r1, [sp, #24]
 801c9a0:	4606      	mov	r6, r0
 801c9a2:	9208      	str	r2, [sp, #32]
 801c9a4:	930c      	str	r3, [sp, #48]	; 0x30
 801c9a6:	b975      	cbnz	r5, 801c9c6 <_dtoa_r+0x3e>
 801c9a8:	2010      	movs	r0, #16
 801c9aa:	f001 f8e1 	bl	801db70 <malloc>
 801c9ae:	4602      	mov	r2, r0
 801c9b0:	6270      	str	r0, [r6, #36]	; 0x24
 801c9b2:	b920      	cbnz	r0, 801c9be <_dtoa_r+0x36>
 801c9b4:	4baa      	ldr	r3, [pc, #680]	; (801cc60 <_dtoa_r+0x2d8>)
 801c9b6:	21ea      	movs	r1, #234	; 0xea
 801c9b8:	48aa      	ldr	r0, [pc, #680]	; (801cc64 <_dtoa_r+0x2dc>)
 801c9ba:	f002 f84f 	bl	801ea5c <__assert_func>
 801c9be:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801c9c2:	6005      	str	r5, [r0, #0]
 801c9c4:	60c5      	str	r5, [r0, #12]
 801c9c6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801c9c8:	6819      	ldr	r1, [r3, #0]
 801c9ca:	b151      	cbz	r1, 801c9e2 <_dtoa_r+0x5a>
 801c9cc:	685a      	ldr	r2, [r3, #4]
 801c9ce:	604a      	str	r2, [r1, #4]
 801c9d0:	2301      	movs	r3, #1
 801c9d2:	4093      	lsls	r3, r2
 801c9d4:	608b      	str	r3, [r1, #8]
 801c9d6:	4630      	mov	r0, r6
 801c9d8:	f001 f924 	bl	801dc24 <_Bfree>
 801c9dc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801c9de:	2200      	movs	r2, #0
 801c9e0:	601a      	str	r2, [r3, #0]
 801c9e2:	f1b9 0300 	subs.w	r3, r9, #0
 801c9e6:	bfbb      	ittet	lt
 801c9e8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801c9ec:	9303      	strlt	r3, [sp, #12]
 801c9ee:	2300      	movge	r3, #0
 801c9f0:	2201      	movlt	r2, #1
 801c9f2:	bfac      	ite	ge
 801c9f4:	6023      	strge	r3, [r4, #0]
 801c9f6:	6022      	strlt	r2, [r4, #0]
 801c9f8:	4b9b      	ldr	r3, [pc, #620]	; (801cc68 <_dtoa_r+0x2e0>)
 801c9fa:	9c03      	ldr	r4, [sp, #12]
 801c9fc:	43a3      	bics	r3, r4
 801c9fe:	d11c      	bne.n	801ca3a <_dtoa_r+0xb2>
 801ca00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ca02:	f242 730f 	movw	r3, #9999	; 0x270f
 801ca06:	6013      	str	r3, [r2, #0]
 801ca08:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801ca0c:	ea53 0308 	orrs.w	r3, r3, r8
 801ca10:	f000 84fd 	beq.w	801d40e <_dtoa_r+0xa86>
 801ca14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ca16:	b963      	cbnz	r3, 801ca32 <_dtoa_r+0xaa>
 801ca18:	4b94      	ldr	r3, [pc, #592]	; (801cc6c <_dtoa_r+0x2e4>)
 801ca1a:	e01f      	b.n	801ca5c <_dtoa_r+0xd4>
 801ca1c:	4b94      	ldr	r3, [pc, #592]	; (801cc70 <_dtoa_r+0x2e8>)
 801ca1e:	9301      	str	r3, [sp, #4]
 801ca20:	3308      	adds	r3, #8
 801ca22:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801ca24:	6013      	str	r3, [r2, #0]
 801ca26:	9801      	ldr	r0, [sp, #4]
 801ca28:	b011      	add	sp, #68	; 0x44
 801ca2a:	ecbd 8b02 	vpop	{d8}
 801ca2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca32:	4b8e      	ldr	r3, [pc, #568]	; (801cc6c <_dtoa_r+0x2e4>)
 801ca34:	9301      	str	r3, [sp, #4]
 801ca36:	3303      	adds	r3, #3
 801ca38:	e7f3      	b.n	801ca22 <_dtoa_r+0x9a>
 801ca3a:	ed9d 8b02 	vldr	d8, [sp, #8]
 801ca3e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801ca42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ca46:	d10b      	bne.n	801ca60 <_dtoa_r+0xd8>
 801ca48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ca4a:	2301      	movs	r3, #1
 801ca4c:	6013      	str	r3, [r2, #0]
 801ca4e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ca50:	2b00      	cmp	r3, #0
 801ca52:	f000 84d9 	beq.w	801d408 <_dtoa_r+0xa80>
 801ca56:	4887      	ldr	r0, [pc, #540]	; (801cc74 <_dtoa_r+0x2ec>)
 801ca58:	6018      	str	r0, [r3, #0]
 801ca5a:	1e43      	subs	r3, r0, #1
 801ca5c:	9301      	str	r3, [sp, #4]
 801ca5e:	e7e2      	b.n	801ca26 <_dtoa_r+0x9e>
 801ca60:	a90f      	add	r1, sp, #60	; 0x3c
 801ca62:	aa0e      	add	r2, sp, #56	; 0x38
 801ca64:	4630      	mov	r0, r6
 801ca66:	eeb0 0b48 	vmov.f64	d0, d8
 801ca6a:	f001 fc89 	bl	801e380 <__d2b>
 801ca6e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 801ca72:	4605      	mov	r5, r0
 801ca74:	980e      	ldr	r0, [sp, #56]	; 0x38
 801ca76:	2900      	cmp	r1, #0
 801ca78:	d046      	beq.n	801cb08 <_dtoa_r+0x180>
 801ca7a:	ee18 4a90 	vmov	r4, s17
 801ca7e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801ca82:	ec53 2b18 	vmov	r2, r3, d8
 801ca86:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801ca8a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801ca8e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801ca92:	2400      	movs	r4, #0
 801ca94:	ec43 2b16 	vmov	d6, r2, r3
 801ca98:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801ca9c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 801cc48 <_dtoa_r+0x2c0>
 801caa0:	ee36 7b47 	vsub.f64	d7, d6, d7
 801caa4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 801cc50 <_dtoa_r+0x2c8>
 801caa8:	eea7 6b05 	vfma.f64	d6, d7, d5
 801caac:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 801cc58 <_dtoa_r+0x2d0>
 801cab0:	ee07 1a90 	vmov	s15, r1
 801cab4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801cab8:	eeb0 7b46 	vmov.f64	d7, d6
 801cabc:	eea4 7b05 	vfma.f64	d7, d4, d5
 801cac0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801cac4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801cac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cacc:	ee16 ba90 	vmov	fp, s13
 801cad0:	940a      	str	r4, [sp, #40]	; 0x28
 801cad2:	d508      	bpl.n	801cae6 <_dtoa_r+0x15e>
 801cad4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801cad8:	eeb4 6b47 	vcmp.f64	d6, d7
 801cadc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cae0:	bf18      	it	ne
 801cae2:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801cae6:	f1bb 0f16 	cmp.w	fp, #22
 801caea:	d82f      	bhi.n	801cb4c <_dtoa_r+0x1c4>
 801caec:	4b62      	ldr	r3, [pc, #392]	; (801cc78 <_dtoa_r+0x2f0>)
 801caee:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801caf2:	ed93 7b00 	vldr	d7, [r3]
 801caf6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801cafa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cafe:	d501      	bpl.n	801cb04 <_dtoa_r+0x17c>
 801cb00:	f10b 3bff 	add.w	fp, fp, #4294967295
 801cb04:	2300      	movs	r3, #0
 801cb06:	e022      	b.n	801cb4e <_dtoa_r+0x1c6>
 801cb08:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801cb0a:	4401      	add	r1, r0
 801cb0c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 801cb10:	2b20      	cmp	r3, #32
 801cb12:	bfc1      	itttt	gt
 801cb14:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801cb18:	fa04 f303 	lslgt.w	r3, r4, r3
 801cb1c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 801cb20:	fa28 f804 	lsrgt.w	r8, r8, r4
 801cb24:	bfd6      	itet	le
 801cb26:	f1c3 0320 	rsble	r3, r3, #32
 801cb2a:	ea43 0808 	orrgt.w	r8, r3, r8
 801cb2e:	fa08 f803 	lslle.w	r8, r8, r3
 801cb32:	ee07 8a90 	vmov	s15, r8
 801cb36:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801cb3a:	3901      	subs	r1, #1
 801cb3c:	ee17 4a90 	vmov	r4, s15
 801cb40:	ec53 2b17 	vmov	r2, r3, d7
 801cb44:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 801cb48:	2401      	movs	r4, #1
 801cb4a:	e7a3      	b.n	801ca94 <_dtoa_r+0x10c>
 801cb4c:	2301      	movs	r3, #1
 801cb4e:	930b      	str	r3, [sp, #44]	; 0x2c
 801cb50:	1a43      	subs	r3, r0, r1
 801cb52:	1e5a      	subs	r2, r3, #1
 801cb54:	bf45      	ittet	mi
 801cb56:	f1c3 0301 	rsbmi	r3, r3, #1
 801cb5a:	9304      	strmi	r3, [sp, #16]
 801cb5c:	2300      	movpl	r3, #0
 801cb5e:	2300      	movmi	r3, #0
 801cb60:	9205      	str	r2, [sp, #20]
 801cb62:	bf54      	ite	pl
 801cb64:	9304      	strpl	r3, [sp, #16]
 801cb66:	9305      	strmi	r3, [sp, #20]
 801cb68:	f1bb 0f00 	cmp.w	fp, #0
 801cb6c:	db18      	blt.n	801cba0 <_dtoa_r+0x218>
 801cb6e:	9b05      	ldr	r3, [sp, #20]
 801cb70:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801cb74:	445b      	add	r3, fp
 801cb76:	9305      	str	r3, [sp, #20]
 801cb78:	2300      	movs	r3, #0
 801cb7a:	9a06      	ldr	r2, [sp, #24]
 801cb7c:	2a09      	cmp	r2, #9
 801cb7e:	d849      	bhi.n	801cc14 <_dtoa_r+0x28c>
 801cb80:	2a05      	cmp	r2, #5
 801cb82:	bfc4      	itt	gt
 801cb84:	3a04      	subgt	r2, #4
 801cb86:	9206      	strgt	r2, [sp, #24]
 801cb88:	9a06      	ldr	r2, [sp, #24]
 801cb8a:	f1a2 0202 	sub.w	r2, r2, #2
 801cb8e:	bfcc      	ite	gt
 801cb90:	2400      	movgt	r4, #0
 801cb92:	2401      	movle	r4, #1
 801cb94:	2a03      	cmp	r2, #3
 801cb96:	d848      	bhi.n	801cc2a <_dtoa_r+0x2a2>
 801cb98:	e8df f002 	tbb	[pc, r2]
 801cb9c:	3a2c2e0b 	.word	0x3a2c2e0b
 801cba0:	9b04      	ldr	r3, [sp, #16]
 801cba2:	2200      	movs	r2, #0
 801cba4:	eba3 030b 	sub.w	r3, r3, fp
 801cba8:	9304      	str	r3, [sp, #16]
 801cbaa:	9209      	str	r2, [sp, #36]	; 0x24
 801cbac:	f1cb 0300 	rsb	r3, fp, #0
 801cbb0:	e7e3      	b.n	801cb7a <_dtoa_r+0x1f2>
 801cbb2:	2200      	movs	r2, #0
 801cbb4:	9207      	str	r2, [sp, #28]
 801cbb6:	9a08      	ldr	r2, [sp, #32]
 801cbb8:	2a00      	cmp	r2, #0
 801cbba:	dc39      	bgt.n	801cc30 <_dtoa_r+0x2a8>
 801cbbc:	f04f 0a01 	mov.w	sl, #1
 801cbc0:	46d1      	mov	r9, sl
 801cbc2:	4652      	mov	r2, sl
 801cbc4:	f8cd a020 	str.w	sl, [sp, #32]
 801cbc8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801cbca:	2100      	movs	r1, #0
 801cbcc:	6079      	str	r1, [r7, #4]
 801cbce:	2004      	movs	r0, #4
 801cbd0:	f100 0c14 	add.w	ip, r0, #20
 801cbd4:	4594      	cmp	ip, r2
 801cbd6:	6879      	ldr	r1, [r7, #4]
 801cbd8:	d92f      	bls.n	801cc3a <_dtoa_r+0x2b2>
 801cbda:	4630      	mov	r0, r6
 801cbdc:	930d      	str	r3, [sp, #52]	; 0x34
 801cbde:	f000 ffe1 	bl	801dba4 <_Balloc>
 801cbe2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cbe4:	9001      	str	r0, [sp, #4]
 801cbe6:	4602      	mov	r2, r0
 801cbe8:	2800      	cmp	r0, #0
 801cbea:	d149      	bne.n	801cc80 <_dtoa_r+0x2f8>
 801cbec:	4b23      	ldr	r3, [pc, #140]	; (801cc7c <_dtoa_r+0x2f4>)
 801cbee:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801cbf2:	e6e1      	b.n	801c9b8 <_dtoa_r+0x30>
 801cbf4:	2201      	movs	r2, #1
 801cbf6:	e7dd      	b.n	801cbb4 <_dtoa_r+0x22c>
 801cbf8:	2200      	movs	r2, #0
 801cbfa:	9207      	str	r2, [sp, #28]
 801cbfc:	9a08      	ldr	r2, [sp, #32]
 801cbfe:	eb0b 0a02 	add.w	sl, fp, r2
 801cc02:	f10a 0901 	add.w	r9, sl, #1
 801cc06:	464a      	mov	r2, r9
 801cc08:	2a01      	cmp	r2, #1
 801cc0a:	bfb8      	it	lt
 801cc0c:	2201      	movlt	r2, #1
 801cc0e:	e7db      	b.n	801cbc8 <_dtoa_r+0x240>
 801cc10:	2201      	movs	r2, #1
 801cc12:	e7f2      	b.n	801cbfa <_dtoa_r+0x272>
 801cc14:	2401      	movs	r4, #1
 801cc16:	2200      	movs	r2, #0
 801cc18:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801cc1c:	f04f 3aff 	mov.w	sl, #4294967295
 801cc20:	2100      	movs	r1, #0
 801cc22:	46d1      	mov	r9, sl
 801cc24:	2212      	movs	r2, #18
 801cc26:	9108      	str	r1, [sp, #32]
 801cc28:	e7ce      	b.n	801cbc8 <_dtoa_r+0x240>
 801cc2a:	2201      	movs	r2, #1
 801cc2c:	9207      	str	r2, [sp, #28]
 801cc2e:	e7f5      	b.n	801cc1c <_dtoa_r+0x294>
 801cc30:	f8dd a020 	ldr.w	sl, [sp, #32]
 801cc34:	46d1      	mov	r9, sl
 801cc36:	4652      	mov	r2, sl
 801cc38:	e7c6      	b.n	801cbc8 <_dtoa_r+0x240>
 801cc3a:	3101      	adds	r1, #1
 801cc3c:	6079      	str	r1, [r7, #4]
 801cc3e:	0040      	lsls	r0, r0, #1
 801cc40:	e7c6      	b.n	801cbd0 <_dtoa_r+0x248>
 801cc42:	bf00      	nop
 801cc44:	f3af 8000 	nop.w
 801cc48:	636f4361 	.word	0x636f4361
 801cc4c:	3fd287a7 	.word	0x3fd287a7
 801cc50:	8b60c8b3 	.word	0x8b60c8b3
 801cc54:	3fc68a28 	.word	0x3fc68a28
 801cc58:	509f79fb 	.word	0x509f79fb
 801cc5c:	3fd34413 	.word	0x3fd34413
 801cc60:	0801fde6 	.word	0x0801fde6
 801cc64:	0801fdfd 	.word	0x0801fdfd
 801cc68:	7ff00000 	.word	0x7ff00000
 801cc6c:	0801fde2 	.word	0x0801fde2
 801cc70:	0801fdd9 	.word	0x0801fdd9
 801cc74:	0801fc59 	.word	0x0801fc59
 801cc78:	0801ff68 	.word	0x0801ff68
 801cc7c:	0801fe58 	.word	0x0801fe58
 801cc80:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801cc82:	9901      	ldr	r1, [sp, #4]
 801cc84:	6011      	str	r1, [r2, #0]
 801cc86:	f1b9 0f0e 	cmp.w	r9, #14
 801cc8a:	d86c      	bhi.n	801cd66 <_dtoa_r+0x3de>
 801cc8c:	2c00      	cmp	r4, #0
 801cc8e:	d06a      	beq.n	801cd66 <_dtoa_r+0x3de>
 801cc90:	f1bb 0f00 	cmp.w	fp, #0
 801cc94:	f340 80a0 	ble.w	801cdd8 <_dtoa_r+0x450>
 801cc98:	49c1      	ldr	r1, [pc, #772]	; (801cfa0 <_dtoa_r+0x618>)
 801cc9a:	f00b 020f 	and.w	r2, fp, #15
 801cc9e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801cca2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801cca6:	ed92 7b00 	vldr	d7, [r2]
 801ccaa:	ea4f 112b 	mov.w	r1, fp, asr #4
 801ccae:	f000 8087 	beq.w	801cdc0 <_dtoa_r+0x438>
 801ccb2:	4abc      	ldr	r2, [pc, #752]	; (801cfa4 <_dtoa_r+0x61c>)
 801ccb4:	ed92 6b08 	vldr	d6, [r2, #32]
 801ccb8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801ccbc:	ed8d 6b02 	vstr	d6, [sp, #8]
 801ccc0:	f001 010f 	and.w	r1, r1, #15
 801ccc4:	2203      	movs	r2, #3
 801ccc6:	48b7      	ldr	r0, [pc, #732]	; (801cfa4 <_dtoa_r+0x61c>)
 801ccc8:	2900      	cmp	r1, #0
 801ccca:	d17b      	bne.n	801cdc4 <_dtoa_r+0x43c>
 801cccc:	ed9d 6b02 	vldr	d6, [sp, #8]
 801ccd0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801ccd4:	ed8d 7b02 	vstr	d7, [sp, #8]
 801ccd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801ccda:	2900      	cmp	r1, #0
 801ccdc:	f000 80a2 	beq.w	801ce24 <_dtoa_r+0x49c>
 801cce0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801cce4:	ed9d 7b02 	vldr	d7, [sp, #8]
 801cce8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801ccec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ccf0:	f140 8098 	bpl.w	801ce24 <_dtoa_r+0x49c>
 801ccf4:	f1b9 0f00 	cmp.w	r9, #0
 801ccf8:	f000 8094 	beq.w	801ce24 <_dtoa_r+0x49c>
 801ccfc:	f1ba 0f00 	cmp.w	sl, #0
 801cd00:	dd2f      	ble.n	801cd62 <_dtoa_r+0x3da>
 801cd02:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801cd06:	ee27 7b06 	vmul.f64	d7, d7, d6
 801cd0a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801cd0e:	f10b 37ff 	add.w	r7, fp, #4294967295
 801cd12:	3201      	adds	r2, #1
 801cd14:	4650      	mov	r0, sl
 801cd16:	ed9d 6b02 	vldr	d6, [sp, #8]
 801cd1a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801cd1e:	ee07 2a90 	vmov	s15, r2
 801cd22:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801cd26:	eea7 5b06 	vfma.f64	d5, d7, d6
 801cd2a:	ee15 4a90 	vmov	r4, s11
 801cd2e:	ec52 1b15 	vmov	r1, r2, d5
 801cd32:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 801cd36:	2800      	cmp	r0, #0
 801cd38:	d177      	bne.n	801ce2a <_dtoa_r+0x4a2>
 801cd3a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801cd3e:	ee36 6b47 	vsub.f64	d6, d6, d7
 801cd42:	ec42 1b17 	vmov	d7, r1, r2
 801cd46:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801cd4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd4e:	f300 8263 	bgt.w	801d218 <_dtoa_r+0x890>
 801cd52:	eeb1 7b47 	vneg.f64	d7, d7
 801cd56:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801cd5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cd5e:	f100 8258 	bmi.w	801d212 <_dtoa_r+0x88a>
 801cd62:	ed8d 8b02 	vstr	d8, [sp, #8]
 801cd66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cd68:	2a00      	cmp	r2, #0
 801cd6a:	f2c0 811d 	blt.w	801cfa8 <_dtoa_r+0x620>
 801cd6e:	f1bb 0f0e 	cmp.w	fp, #14
 801cd72:	f300 8119 	bgt.w	801cfa8 <_dtoa_r+0x620>
 801cd76:	4b8a      	ldr	r3, [pc, #552]	; (801cfa0 <_dtoa_r+0x618>)
 801cd78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801cd7c:	ed93 6b00 	vldr	d6, [r3]
 801cd80:	9b08      	ldr	r3, [sp, #32]
 801cd82:	2b00      	cmp	r3, #0
 801cd84:	f280 80b7 	bge.w	801cef6 <_dtoa_r+0x56e>
 801cd88:	f1b9 0f00 	cmp.w	r9, #0
 801cd8c:	f300 80b3 	bgt.w	801cef6 <_dtoa_r+0x56e>
 801cd90:	f040 823f 	bne.w	801d212 <_dtoa_r+0x88a>
 801cd94:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801cd98:	ee26 6b07 	vmul.f64	d6, d6, d7
 801cd9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801cda0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801cda4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cda8:	464c      	mov	r4, r9
 801cdaa:	464f      	mov	r7, r9
 801cdac:	f280 8215 	bge.w	801d1da <_dtoa_r+0x852>
 801cdb0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801cdb4:	2331      	movs	r3, #49	; 0x31
 801cdb6:	f808 3b01 	strb.w	r3, [r8], #1
 801cdba:	f10b 0b01 	add.w	fp, fp, #1
 801cdbe:	e211      	b.n	801d1e4 <_dtoa_r+0x85c>
 801cdc0:	2202      	movs	r2, #2
 801cdc2:	e780      	b.n	801ccc6 <_dtoa_r+0x33e>
 801cdc4:	07cc      	lsls	r4, r1, #31
 801cdc6:	d504      	bpl.n	801cdd2 <_dtoa_r+0x44a>
 801cdc8:	ed90 6b00 	vldr	d6, [r0]
 801cdcc:	3201      	adds	r2, #1
 801cdce:	ee27 7b06 	vmul.f64	d7, d7, d6
 801cdd2:	1049      	asrs	r1, r1, #1
 801cdd4:	3008      	adds	r0, #8
 801cdd6:	e777      	b.n	801ccc8 <_dtoa_r+0x340>
 801cdd8:	d022      	beq.n	801ce20 <_dtoa_r+0x498>
 801cdda:	f1cb 0100 	rsb	r1, fp, #0
 801cdde:	4a70      	ldr	r2, [pc, #448]	; (801cfa0 <_dtoa_r+0x618>)
 801cde0:	f001 000f 	and.w	r0, r1, #15
 801cde4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801cde8:	ed92 7b00 	vldr	d7, [r2]
 801cdec:	ee28 7b07 	vmul.f64	d7, d8, d7
 801cdf0:	ed8d 7b02 	vstr	d7, [sp, #8]
 801cdf4:	486b      	ldr	r0, [pc, #428]	; (801cfa4 <_dtoa_r+0x61c>)
 801cdf6:	1109      	asrs	r1, r1, #4
 801cdf8:	2400      	movs	r4, #0
 801cdfa:	2202      	movs	r2, #2
 801cdfc:	b929      	cbnz	r1, 801ce0a <_dtoa_r+0x482>
 801cdfe:	2c00      	cmp	r4, #0
 801ce00:	f43f af6a 	beq.w	801ccd8 <_dtoa_r+0x350>
 801ce04:	ed8d 7b02 	vstr	d7, [sp, #8]
 801ce08:	e766      	b.n	801ccd8 <_dtoa_r+0x350>
 801ce0a:	07cf      	lsls	r7, r1, #31
 801ce0c:	d505      	bpl.n	801ce1a <_dtoa_r+0x492>
 801ce0e:	ed90 6b00 	vldr	d6, [r0]
 801ce12:	3201      	adds	r2, #1
 801ce14:	2401      	movs	r4, #1
 801ce16:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ce1a:	1049      	asrs	r1, r1, #1
 801ce1c:	3008      	adds	r0, #8
 801ce1e:	e7ed      	b.n	801cdfc <_dtoa_r+0x474>
 801ce20:	2202      	movs	r2, #2
 801ce22:	e759      	b.n	801ccd8 <_dtoa_r+0x350>
 801ce24:	465f      	mov	r7, fp
 801ce26:	4648      	mov	r0, r9
 801ce28:	e775      	b.n	801cd16 <_dtoa_r+0x38e>
 801ce2a:	ec42 1b17 	vmov	d7, r1, r2
 801ce2e:	4a5c      	ldr	r2, [pc, #368]	; (801cfa0 <_dtoa_r+0x618>)
 801ce30:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801ce34:	ed12 4b02 	vldr	d4, [r2, #-8]
 801ce38:	9a01      	ldr	r2, [sp, #4]
 801ce3a:	1814      	adds	r4, r2, r0
 801ce3c:	9a07      	ldr	r2, [sp, #28]
 801ce3e:	b352      	cbz	r2, 801ce96 <_dtoa_r+0x50e>
 801ce40:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801ce44:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801ce48:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801ce4c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801ce50:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801ce54:	ee35 7b47 	vsub.f64	d7, d5, d7
 801ce58:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801ce5c:	ee14 2a90 	vmov	r2, s9
 801ce60:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801ce64:	3230      	adds	r2, #48	; 0x30
 801ce66:	ee36 6b45 	vsub.f64	d6, d6, d5
 801ce6a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ce6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce72:	f808 2b01 	strb.w	r2, [r8], #1
 801ce76:	d439      	bmi.n	801ceec <_dtoa_r+0x564>
 801ce78:	ee32 5b46 	vsub.f64	d5, d2, d6
 801ce7c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801ce80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ce84:	d472      	bmi.n	801cf6c <_dtoa_r+0x5e4>
 801ce86:	45a0      	cmp	r8, r4
 801ce88:	f43f af6b 	beq.w	801cd62 <_dtoa_r+0x3da>
 801ce8c:	ee27 7b03 	vmul.f64	d7, d7, d3
 801ce90:	ee26 6b03 	vmul.f64	d6, d6, d3
 801ce94:	e7e0      	b.n	801ce58 <_dtoa_r+0x4d0>
 801ce96:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801ce9a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801ce9e:	4621      	mov	r1, r4
 801cea0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801cea4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801cea8:	ee14 2a90 	vmov	r2, s9
 801ceac:	3230      	adds	r2, #48	; 0x30
 801ceae:	f808 2b01 	strb.w	r2, [r8], #1
 801ceb2:	45a0      	cmp	r8, r4
 801ceb4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801ceb8:	ee36 6b45 	vsub.f64	d6, d6, d5
 801cebc:	d118      	bne.n	801cef0 <_dtoa_r+0x568>
 801cebe:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801cec2:	ee37 4b05 	vadd.f64	d4, d7, d5
 801cec6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801ceca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cece:	dc4d      	bgt.n	801cf6c <_dtoa_r+0x5e4>
 801ced0:	ee35 7b47 	vsub.f64	d7, d5, d7
 801ced4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801ced8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cedc:	f57f af41 	bpl.w	801cd62 <_dtoa_r+0x3da>
 801cee0:	4688      	mov	r8, r1
 801cee2:	3901      	subs	r1, #1
 801cee4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801cee8:	2b30      	cmp	r3, #48	; 0x30
 801ceea:	d0f9      	beq.n	801cee0 <_dtoa_r+0x558>
 801ceec:	46bb      	mov	fp, r7
 801ceee:	e02a      	b.n	801cf46 <_dtoa_r+0x5be>
 801cef0:	ee26 6b03 	vmul.f64	d6, d6, d3
 801cef4:	e7d6      	b.n	801cea4 <_dtoa_r+0x51c>
 801cef6:	ed9d 7b02 	vldr	d7, [sp, #8]
 801cefa:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801cefe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801cf02:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801cf06:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801cf0a:	ee15 3a10 	vmov	r3, s10
 801cf0e:	3330      	adds	r3, #48	; 0x30
 801cf10:	f808 3b01 	strb.w	r3, [r8], #1
 801cf14:	9b01      	ldr	r3, [sp, #4]
 801cf16:	eba8 0303 	sub.w	r3, r8, r3
 801cf1a:	4599      	cmp	r9, r3
 801cf1c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801cf20:	eea3 7b46 	vfms.f64	d7, d3, d6
 801cf24:	d133      	bne.n	801cf8e <_dtoa_r+0x606>
 801cf26:	ee37 7b07 	vadd.f64	d7, d7, d7
 801cf2a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801cf2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf32:	dc1a      	bgt.n	801cf6a <_dtoa_r+0x5e2>
 801cf34:	eeb4 7b46 	vcmp.f64	d7, d6
 801cf38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf3c:	d103      	bne.n	801cf46 <_dtoa_r+0x5be>
 801cf3e:	ee15 3a10 	vmov	r3, s10
 801cf42:	07d9      	lsls	r1, r3, #31
 801cf44:	d411      	bmi.n	801cf6a <_dtoa_r+0x5e2>
 801cf46:	4629      	mov	r1, r5
 801cf48:	4630      	mov	r0, r6
 801cf4a:	f000 fe6b 	bl	801dc24 <_Bfree>
 801cf4e:	2300      	movs	r3, #0
 801cf50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801cf52:	f888 3000 	strb.w	r3, [r8]
 801cf56:	f10b 0301 	add.w	r3, fp, #1
 801cf5a:	6013      	str	r3, [r2, #0]
 801cf5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801cf5e:	2b00      	cmp	r3, #0
 801cf60:	f43f ad61 	beq.w	801ca26 <_dtoa_r+0x9e>
 801cf64:	f8c3 8000 	str.w	r8, [r3]
 801cf68:	e55d      	b.n	801ca26 <_dtoa_r+0x9e>
 801cf6a:	465f      	mov	r7, fp
 801cf6c:	4643      	mov	r3, r8
 801cf6e:	4698      	mov	r8, r3
 801cf70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801cf74:	2a39      	cmp	r2, #57	; 0x39
 801cf76:	d106      	bne.n	801cf86 <_dtoa_r+0x5fe>
 801cf78:	9a01      	ldr	r2, [sp, #4]
 801cf7a:	429a      	cmp	r2, r3
 801cf7c:	d1f7      	bne.n	801cf6e <_dtoa_r+0x5e6>
 801cf7e:	9901      	ldr	r1, [sp, #4]
 801cf80:	2230      	movs	r2, #48	; 0x30
 801cf82:	3701      	adds	r7, #1
 801cf84:	700a      	strb	r2, [r1, #0]
 801cf86:	781a      	ldrb	r2, [r3, #0]
 801cf88:	3201      	adds	r2, #1
 801cf8a:	701a      	strb	r2, [r3, #0]
 801cf8c:	e7ae      	b.n	801ceec <_dtoa_r+0x564>
 801cf8e:	ee27 7b04 	vmul.f64	d7, d7, d4
 801cf92:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801cf96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf9a:	d1b2      	bne.n	801cf02 <_dtoa_r+0x57a>
 801cf9c:	e7d3      	b.n	801cf46 <_dtoa_r+0x5be>
 801cf9e:	bf00      	nop
 801cfa0:	0801ff68 	.word	0x0801ff68
 801cfa4:	0801ff40 	.word	0x0801ff40
 801cfa8:	9907      	ldr	r1, [sp, #28]
 801cfaa:	2900      	cmp	r1, #0
 801cfac:	f000 80d0 	beq.w	801d150 <_dtoa_r+0x7c8>
 801cfb0:	9906      	ldr	r1, [sp, #24]
 801cfb2:	2901      	cmp	r1, #1
 801cfb4:	f300 80b4 	bgt.w	801d120 <_dtoa_r+0x798>
 801cfb8:	990a      	ldr	r1, [sp, #40]	; 0x28
 801cfba:	2900      	cmp	r1, #0
 801cfbc:	f000 80ac 	beq.w	801d118 <_dtoa_r+0x790>
 801cfc0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801cfc4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801cfc8:	461c      	mov	r4, r3
 801cfca:	930a      	str	r3, [sp, #40]	; 0x28
 801cfcc:	9b04      	ldr	r3, [sp, #16]
 801cfce:	4413      	add	r3, r2
 801cfd0:	9304      	str	r3, [sp, #16]
 801cfd2:	9b05      	ldr	r3, [sp, #20]
 801cfd4:	2101      	movs	r1, #1
 801cfd6:	4413      	add	r3, r2
 801cfd8:	4630      	mov	r0, r6
 801cfda:	9305      	str	r3, [sp, #20]
 801cfdc:	f000 ff24 	bl	801de28 <__i2b>
 801cfe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cfe2:	4607      	mov	r7, r0
 801cfe4:	f1b8 0f00 	cmp.w	r8, #0
 801cfe8:	dd0d      	ble.n	801d006 <_dtoa_r+0x67e>
 801cfea:	9a05      	ldr	r2, [sp, #20]
 801cfec:	2a00      	cmp	r2, #0
 801cfee:	dd0a      	ble.n	801d006 <_dtoa_r+0x67e>
 801cff0:	4542      	cmp	r2, r8
 801cff2:	9904      	ldr	r1, [sp, #16]
 801cff4:	bfa8      	it	ge
 801cff6:	4642      	movge	r2, r8
 801cff8:	1a89      	subs	r1, r1, r2
 801cffa:	9104      	str	r1, [sp, #16]
 801cffc:	9905      	ldr	r1, [sp, #20]
 801cffe:	eba8 0802 	sub.w	r8, r8, r2
 801d002:	1a8a      	subs	r2, r1, r2
 801d004:	9205      	str	r2, [sp, #20]
 801d006:	b303      	cbz	r3, 801d04a <_dtoa_r+0x6c2>
 801d008:	9a07      	ldr	r2, [sp, #28]
 801d00a:	2a00      	cmp	r2, #0
 801d00c:	f000 80a5 	beq.w	801d15a <_dtoa_r+0x7d2>
 801d010:	2c00      	cmp	r4, #0
 801d012:	dd13      	ble.n	801d03c <_dtoa_r+0x6b4>
 801d014:	4639      	mov	r1, r7
 801d016:	4622      	mov	r2, r4
 801d018:	4630      	mov	r0, r6
 801d01a:	930d      	str	r3, [sp, #52]	; 0x34
 801d01c:	f000 ffc4 	bl	801dfa8 <__pow5mult>
 801d020:	462a      	mov	r2, r5
 801d022:	4601      	mov	r1, r0
 801d024:	4607      	mov	r7, r0
 801d026:	4630      	mov	r0, r6
 801d028:	f000 ff14 	bl	801de54 <__multiply>
 801d02c:	4629      	mov	r1, r5
 801d02e:	900a      	str	r0, [sp, #40]	; 0x28
 801d030:	4630      	mov	r0, r6
 801d032:	f000 fdf7 	bl	801dc24 <_Bfree>
 801d036:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d038:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d03a:	4615      	mov	r5, r2
 801d03c:	1b1a      	subs	r2, r3, r4
 801d03e:	d004      	beq.n	801d04a <_dtoa_r+0x6c2>
 801d040:	4629      	mov	r1, r5
 801d042:	4630      	mov	r0, r6
 801d044:	f000 ffb0 	bl	801dfa8 <__pow5mult>
 801d048:	4605      	mov	r5, r0
 801d04a:	2101      	movs	r1, #1
 801d04c:	4630      	mov	r0, r6
 801d04e:	f000 feeb 	bl	801de28 <__i2b>
 801d052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d054:	2b00      	cmp	r3, #0
 801d056:	4604      	mov	r4, r0
 801d058:	f340 8081 	ble.w	801d15e <_dtoa_r+0x7d6>
 801d05c:	461a      	mov	r2, r3
 801d05e:	4601      	mov	r1, r0
 801d060:	4630      	mov	r0, r6
 801d062:	f000 ffa1 	bl	801dfa8 <__pow5mult>
 801d066:	9b06      	ldr	r3, [sp, #24]
 801d068:	2b01      	cmp	r3, #1
 801d06a:	4604      	mov	r4, r0
 801d06c:	dd7a      	ble.n	801d164 <_dtoa_r+0x7dc>
 801d06e:	2300      	movs	r3, #0
 801d070:	930a      	str	r3, [sp, #40]	; 0x28
 801d072:	6922      	ldr	r2, [r4, #16]
 801d074:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801d078:	6910      	ldr	r0, [r2, #16]
 801d07a:	f000 fe85 	bl	801dd88 <__hi0bits>
 801d07e:	f1c0 0020 	rsb	r0, r0, #32
 801d082:	9b05      	ldr	r3, [sp, #20]
 801d084:	4418      	add	r0, r3
 801d086:	f010 001f 	ands.w	r0, r0, #31
 801d08a:	f000 808c 	beq.w	801d1a6 <_dtoa_r+0x81e>
 801d08e:	f1c0 0220 	rsb	r2, r0, #32
 801d092:	2a04      	cmp	r2, #4
 801d094:	f340 8085 	ble.w	801d1a2 <_dtoa_r+0x81a>
 801d098:	f1c0 001c 	rsb	r0, r0, #28
 801d09c:	9b04      	ldr	r3, [sp, #16]
 801d09e:	4403      	add	r3, r0
 801d0a0:	9304      	str	r3, [sp, #16]
 801d0a2:	9b05      	ldr	r3, [sp, #20]
 801d0a4:	4403      	add	r3, r0
 801d0a6:	4480      	add	r8, r0
 801d0a8:	9305      	str	r3, [sp, #20]
 801d0aa:	9b04      	ldr	r3, [sp, #16]
 801d0ac:	2b00      	cmp	r3, #0
 801d0ae:	dd05      	ble.n	801d0bc <_dtoa_r+0x734>
 801d0b0:	4629      	mov	r1, r5
 801d0b2:	461a      	mov	r2, r3
 801d0b4:	4630      	mov	r0, r6
 801d0b6:	f000 ffd1 	bl	801e05c <__lshift>
 801d0ba:	4605      	mov	r5, r0
 801d0bc:	9b05      	ldr	r3, [sp, #20]
 801d0be:	2b00      	cmp	r3, #0
 801d0c0:	dd05      	ble.n	801d0ce <_dtoa_r+0x746>
 801d0c2:	4621      	mov	r1, r4
 801d0c4:	461a      	mov	r2, r3
 801d0c6:	4630      	mov	r0, r6
 801d0c8:	f000 ffc8 	bl	801e05c <__lshift>
 801d0cc:	4604      	mov	r4, r0
 801d0ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d0d0:	2b00      	cmp	r3, #0
 801d0d2:	d06a      	beq.n	801d1aa <_dtoa_r+0x822>
 801d0d4:	4621      	mov	r1, r4
 801d0d6:	4628      	mov	r0, r5
 801d0d8:	f001 f830 	bl	801e13c <__mcmp>
 801d0dc:	2800      	cmp	r0, #0
 801d0de:	da64      	bge.n	801d1aa <_dtoa_r+0x822>
 801d0e0:	2300      	movs	r3, #0
 801d0e2:	4629      	mov	r1, r5
 801d0e4:	220a      	movs	r2, #10
 801d0e6:	4630      	mov	r0, r6
 801d0e8:	f000 fdbe 	bl	801dc68 <__multadd>
 801d0ec:	9b07      	ldr	r3, [sp, #28]
 801d0ee:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d0f2:	4605      	mov	r5, r0
 801d0f4:	2b00      	cmp	r3, #0
 801d0f6:	f000 8191 	beq.w	801d41c <_dtoa_r+0xa94>
 801d0fa:	4639      	mov	r1, r7
 801d0fc:	2300      	movs	r3, #0
 801d0fe:	220a      	movs	r2, #10
 801d100:	4630      	mov	r0, r6
 801d102:	f000 fdb1 	bl	801dc68 <__multadd>
 801d106:	f1ba 0f00 	cmp.w	sl, #0
 801d10a:	4607      	mov	r7, r0
 801d10c:	f300 808d 	bgt.w	801d22a <_dtoa_r+0x8a2>
 801d110:	9b06      	ldr	r3, [sp, #24]
 801d112:	2b02      	cmp	r3, #2
 801d114:	dc50      	bgt.n	801d1b8 <_dtoa_r+0x830>
 801d116:	e088      	b.n	801d22a <_dtoa_r+0x8a2>
 801d118:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d11a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801d11e:	e751      	b.n	801cfc4 <_dtoa_r+0x63c>
 801d120:	f109 34ff 	add.w	r4, r9, #4294967295
 801d124:	42a3      	cmp	r3, r4
 801d126:	bfbf      	itttt	lt
 801d128:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 801d12a:	1ae3      	sublt	r3, r4, r3
 801d12c:	18d2      	addlt	r2, r2, r3
 801d12e:	9209      	strlt	r2, [sp, #36]	; 0x24
 801d130:	bfb6      	itet	lt
 801d132:	4623      	movlt	r3, r4
 801d134:	1b1c      	subge	r4, r3, r4
 801d136:	2400      	movlt	r4, #0
 801d138:	f1b9 0f00 	cmp.w	r9, #0
 801d13c:	bfb5      	itete	lt
 801d13e:	9a04      	ldrlt	r2, [sp, #16]
 801d140:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801d144:	eba2 0809 	sublt.w	r8, r2, r9
 801d148:	464a      	movge	r2, r9
 801d14a:	bfb8      	it	lt
 801d14c:	2200      	movlt	r2, #0
 801d14e:	e73c      	b.n	801cfca <_dtoa_r+0x642>
 801d150:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801d154:	9f07      	ldr	r7, [sp, #28]
 801d156:	461c      	mov	r4, r3
 801d158:	e744      	b.n	801cfe4 <_dtoa_r+0x65c>
 801d15a:	461a      	mov	r2, r3
 801d15c:	e770      	b.n	801d040 <_dtoa_r+0x6b8>
 801d15e:	9b06      	ldr	r3, [sp, #24]
 801d160:	2b01      	cmp	r3, #1
 801d162:	dc18      	bgt.n	801d196 <_dtoa_r+0x80e>
 801d164:	9b02      	ldr	r3, [sp, #8]
 801d166:	b9b3      	cbnz	r3, 801d196 <_dtoa_r+0x80e>
 801d168:	9b03      	ldr	r3, [sp, #12]
 801d16a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801d16e:	b9a2      	cbnz	r2, 801d19a <_dtoa_r+0x812>
 801d170:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801d174:	0d12      	lsrs	r2, r2, #20
 801d176:	0512      	lsls	r2, r2, #20
 801d178:	b18a      	cbz	r2, 801d19e <_dtoa_r+0x816>
 801d17a:	9b04      	ldr	r3, [sp, #16]
 801d17c:	3301      	adds	r3, #1
 801d17e:	9304      	str	r3, [sp, #16]
 801d180:	9b05      	ldr	r3, [sp, #20]
 801d182:	3301      	adds	r3, #1
 801d184:	9305      	str	r3, [sp, #20]
 801d186:	2301      	movs	r3, #1
 801d188:	930a      	str	r3, [sp, #40]	; 0x28
 801d18a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d18c:	2b00      	cmp	r3, #0
 801d18e:	f47f af70 	bne.w	801d072 <_dtoa_r+0x6ea>
 801d192:	2001      	movs	r0, #1
 801d194:	e775      	b.n	801d082 <_dtoa_r+0x6fa>
 801d196:	2300      	movs	r3, #0
 801d198:	e7f6      	b.n	801d188 <_dtoa_r+0x800>
 801d19a:	9b02      	ldr	r3, [sp, #8]
 801d19c:	e7f4      	b.n	801d188 <_dtoa_r+0x800>
 801d19e:	920a      	str	r2, [sp, #40]	; 0x28
 801d1a0:	e7f3      	b.n	801d18a <_dtoa_r+0x802>
 801d1a2:	d082      	beq.n	801d0aa <_dtoa_r+0x722>
 801d1a4:	4610      	mov	r0, r2
 801d1a6:	301c      	adds	r0, #28
 801d1a8:	e778      	b.n	801d09c <_dtoa_r+0x714>
 801d1aa:	f1b9 0f00 	cmp.w	r9, #0
 801d1ae:	dc37      	bgt.n	801d220 <_dtoa_r+0x898>
 801d1b0:	9b06      	ldr	r3, [sp, #24]
 801d1b2:	2b02      	cmp	r3, #2
 801d1b4:	dd34      	ble.n	801d220 <_dtoa_r+0x898>
 801d1b6:	46ca      	mov	sl, r9
 801d1b8:	f1ba 0f00 	cmp.w	sl, #0
 801d1bc:	d10d      	bne.n	801d1da <_dtoa_r+0x852>
 801d1be:	4621      	mov	r1, r4
 801d1c0:	4653      	mov	r3, sl
 801d1c2:	2205      	movs	r2, #5
 801d1c4:	4630      	mov	r0, r6
 801d1c6:	f000 fd4f 	bl	801dc68 <__multadd>
 801d1ca:	4601      	mov	r1, r0
 801d1cc:	4604      	mov	r4, r0
 801d1ce:	4628      	mov	r0, r5
 801d1d0:	f000 ffb4 	bl	801e13c <__mcmp>
 801d1d4:	2800      	cmp	r0, #0
 801d1d6:	f73f adeb 	bgt.w	801cdb0 <_dtoa_r+0x428>
 801d1da:	9b08      	ldr	r3, [sp, #32]
 801d1dc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801d1e0:	ea6f 0b03 	mvn.w	fp, r3
 801d1e4:	f04f 0900 	mov.w	r9, #0
 801d1e8:	4621      	mov	r1, r4
 801d1ea:	4630      	mov	r0, r6
 801d1ec:	f000 fd1a 	bl	801dc24 <_Bfree>
 801d1f0:	2f00      	cmp	r7, #0
 801d1f2:	f43f aea8 	beq.w	801cf46 <_dtoa_r+0x5be>
 801d1f6:	f1b9 0f00 	cmp.w	r9, #0
 801d1fa:	d005      	beq.n	801d208 <_dtoa_r+0x880>
 801d1fc:	45b9      	cmp	r9, r7
 801d1fe:	d003      	beq.n	801d208 <_dtoa_r+0x880>
 801d200:	4649      	mov	r1, r9
 801d202:	4630      	mov	r0, r6
 801d204:	f000 fd0e 	bl	801dc24 <_Bfree>
 801d208:	4639      	mov	r1, r7
 801d20a:	4630      	mov	r0, r6
 801d20c:	f000 fd0a 	bl	801dc24 <_Bfree>
 801d210:	e699      	b.n	801cf46 <_dtoa_r+0x5be>
 801d212:	2400      	movs	r4, #0
 801d214:	4627      	mov	r7, r4
 801d216:	e7e0      	b.n	801d1da <_dtoa_r+0x852>
 801d218:	46bb      	mov	fp, r7
 801d21a:	4604      	mov	r4, r0
 801d21c:	4607      	mov	r7, r0
 801d21e:	e5c7      	b.n	801cdb0 <_dtoa_r+0x428>
 801d220:	9b07      	ldr	r3, [sp, #28]
 801d222:	46ca      	mov	sl, r9
 801d224:	2b00      	cmp	r3, #0
 801d226:	f000 8100 	beq.w	801d42a <_dtoa_r+0xaa2>
 801d22a:	f1b8 0f00 	cmp.w	r8, #0
 801d22e:	dd05      	ble.n	801d23c <_dtoa_r+0x8b4>
 801d230:	4639      	mov	r1, r7
 801d232:	4642      	mov	r2, r8
 801d234:	4630      	mov	r0, r6
 801d236:	f000 ff11 	bl	801e05c <__lshift>
 801d23a:	4607      	mov	r7, r0
 801d23c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d23e:	2b00      	cmp	r3, #0
 801d240:	d05d      	beq.n	801d2fe <_dtoa_r+0x976>
 801d242:	6879      	ldr	r1, [r7, #4]
 801d244:	4630      	mov	r0, r6
 801d246:	f000 fcad 	bl	801dba4 <_Balloc>
 801d24a:	4680      	mov	r8, r0
 801d24c:	b928      	cbnz	r0, 801d25a <_dtoa_r+0x8d2>
 801d24e:	4b82      	ldr	r3, [pc, #520]	; (801d458 <_dtoa_r+0xad0>)
 801d250:	4602      	mov	r2, r0
 801d252:	f240 21ea 	movw	r1, #746	; 0x2ea
 801d256:	f7ff bbaf 	b.w	801c9b8 <_dtoa_r+0x30>
 801d25a:	693a      	ldr	r2, [r7, #16]
 801d25c:	3202      	adds	r2, #2
 801d25e:	0092      	lsls	r2, r2, #2
 801d260:	f107 010c 	add.w	r1, r7, #12
 801d264:	300c      	adds	r0, #12
 801d266:	f7fd fdb3 	bl	801add0 <memcpy>
 801d26a:	2201      	movs	r2, #1
 801d26c:	4641      	mov	r1, r8
 801d26e:	4630      	mov	r0, r6
 801d270:	f000 fef4 	bl	801e05c <__lshift>
 801d274:	9b01      	ldr	r3, [sp, #4]
 801d276:	3301      	adds	r3, #1
 801d278:	9304      	str	r3, [sp, #16]
 801d27a:	9b01      	ldr	r3, [sp, #4]
 801d27c:	4453      	add	r3, sl
 801d27e:	9308      	str	r3, [sp, #32]
 801d280:	9b02      	ldr	r3, [sp, #8]
 801d282:	f003 0301 	and.w	r3, r3, #1
 801d286:	46b9      	mov	r9, r7
 801d288:	9307      	str	r3, [sp, #28]
 801d28a:	4607      	mov	r7, r0
 801d28c:	9b04      	ldr	r3, [sp, #16]
 801d28e:	4621      	mov	r1, r4
 801d290:	3b01      	subs	r3, #1
 801d292:	4628      	mov	r0, r5
 801d294:	9302      	str	r3, [sp, #8]
 801d296:	f7ff fae9 	bl	801c86c <quorem>
 801d29a:	4603      	mov	r3, r0
 801d29c:	3330      	adds	r3, #48	; 0x30
 801d29e:	9005      	str	r0, [sp, #20]
 801d2a0:	4649      	mov	r1, r9
 801d2a2:	4628      	mov	r0, r5
 801d2a4:	9309      	str	r3, [sp, #36]	; 0x24
 801d2a6:	f000 ff49 	bl	801e13c <__mcmp>
 801d2aa:	463a      	mov	r2, r7
 801d2ac:	4682      	mov	sl, r0
 801d2ae:	4621      	mov	r1, r4
 801d2b0:	4630      	mov	r0, r6
 801d2b2:	f000 ff5f 	bl	801e174 <__mdiff>
 801d2b6:	68c2      	ldr	r2, [r0, #12]
 801d2b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d2ba:	4680      	mov	r8, r0
 801d2bc:	bb0a      	cbnz	r2, 801d302 <_dtoa_r+0x97a>
 801d2be:	4601      	mov	r1, r0
 801d2c0:	4628      	mov	r0, r5
 801d2c2:	f000 ff3b 	bl	801e13c <__mcmp>
 801d2c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d2c8:	4602      	mov	r2, r0
 801d2ca:	4641      	mov	r1, r8
 801d2cc:	4630      	mov	r0, r6
 801d2ce:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801d2d2:	f000 fca7 	bl	801dc24 <_Bfree>
 801d2d6:	9b06      	ldr	r3, [sp, #24]
 801d2d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d2da:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801d2de:	ea43 0102 	orr.w	r1, r3, r2
 801d2e2:	9b07      	ldr	r3, [sp, #28]
 801d2e4:	430b      	orrs	r3, r1
 801d2e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d2e8:	d10d      	bne.n	801d306 <_dtoa_r+0x97e>
 801d2ea:	2b39      	cmp	r3, #57	; 0x39
 801d2ec:	d029      	beq.n	801d342 <_dtoa_r+0x9ba>
 801d2ee:	f1ba 0f00 	cmp.w	sl, #0
 801d2f2:	dd01      	ble.n	801d2f8 <_dtoa_r+0x970>
 801d2f4:	9b05      	ldr	r3, [sp, #20]
 801d2f6:	3331      	adds	r3, #49	; 0x31
 801d2f8:	9a02      	ldr	r2, [sp, #8]
 801d2fa:	7013      	strb	r3, [r2, #0]
 801d2fc:	e774      	b.n	801d1e8 <_dtoa_r+0x860>
 801d2fe:	4638      	mov	r0, r7
 801d300:	e7b8      	b.n	801d274 <_dtoa_r+0x8ec>
 801d302:	2201      	movs	r2, #1
 801d304:	e7e1      	b.n	801d2ca <_dtoa_r+0x942>
 801d306:	f1ba 0f00 	cmp.w	sl, #0
 801d30a:	db06      	blt.n	801d31a <_dtoa_r+0x992>
 801d30c:	9906      	ldr	r1, [sp, #24]
 801d30e:	ea41 0a0a 	orr.w	sl, r1, sl
 801d312:	9907      	ldr	r1, [sp, #28]
 801d314:	ea5a 0101 	orrs.w	r1, sl, r1
 801d318:	d120      	bne.n	801d35c <_dtoa_r+0x9d4>
 801d31a:	2a00      	cmp	r2, #0
 801d31c:	ddec      	ble.n	801d2f8 <_dtoa_r+0x970>
 801d31e:	4629      	mov	r1, r5
 801d320:	2201      	movs	r2, #1
 801d322:	4630      	mov	r0, r6
 801d324:	9304      	str	r3, [sp, #16]
 801d326:	f000 fe99 	bl	801e05c <__lshift>
 801d32a:	4621      	mov	r1, r4
 801d32c:	4605      	mov	r5, r0
 801d32e:	f000 ff05 	bl	801e13c <__mcmp>
 801d332:	2800      	cmp	r0, #0
 801d334:	9b04      	ldr	r3, [sp, #16]
 801d336:	dc02      	bgt.n	801d33e <_dtoa_r+0x9b6>
 801d338:	d1de      	bne.n	801d2f8 <_dtoa_r+0x970>
 801d33a:	07da      	lsls	r2, r3, #31
 801d33c:	d5dc      	bpl.n	801d2f8 <_dtoa_r+0x970>
 801d33e:	2b39      	cmp	r3, #57	; 0x39
 801d340:	d1d8      	bne.n	801d2f4 <_dtoa_r+0x96c>
 801d342:	9a02      	ldr	r2, [sp, #8]
 801d344:	2339      	movs	r3, #57	; 0x39
 801d346:	7013      	strb	r3, [r2, #0]
 801d348:	4643      	mov	r3, r8
 801d34a:	4698      	mov	r8, r3
 801d34c:	3b01      	subs	r3, #1
 801d34e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801d352:	2a39      	cmp	r2, #57	; 0x39
 801d354:	d051      	beq.n	801d3fa <_dtoa_r+0xa72>
 801d356:	3201      	adds	r2, #1
 801d358:	701a      	strb	r2, [r3, #0]
 801d35a:	e745      	b.n	801d1e8 <_dtoa_r+0x860>
 801d35c:	2a00      	cmp	r2, #0
 801d35e:	dd03      	ble.n	801d368 <_dtoa_r+0x9e0>
 801d360:	2b39      	cmp	r3, #57	; 0x39
 801d362:	d0ee      	beq.n	801d342 <_dtoa_r+0x9ba>
 801d364:	3301      	adds	r3, #1
 801d366:	e7c7      	b.n	801d2f8 <_dtoa_r+0x970>
 801d368:	9a04      	ldr	r2, [sp, #16]
 801d36a:	9908      	ldr	r1, [sp, #32]
 801d36c:	f802 3c01 	strb.w	r3, [r2, #-1]
 801d370:	428a      	cmp	r2, r1
 801d372:	d02b      	beq.n	801d3cc <_dtoa_r+0xa44>
 801d374:	4629      	mov	r1, r5
 801d376:	2300      	movs	r3, #0
 801d378:	220a      	movs	r2, #10
 801d37a:	4630      	mov	r0, r6
 801d37c:	f000 fc74 	bl	801dc68 <__multadd>
 801d380:	45b9      	cmp	r9, r7
 801d382:	4605      	mov	r5, r0
 801d384:	f04f 0300 	mov.w	r3, #0
 801d388:	f04f 020a 	mov.w	r2, #10
 801d38c:	4649      	mov	r1, r9
 801d38e:	4630      	mov	r0, r6
 801d390:	d107      	bne.n	801d3a2 <_dtoa_r+0xa1a>
 801d392:	f000 fc69 	bl	801dc68 <__multadd>
 801d396:	4681      	mov	r9, r0
 801d398:	4607      	mov	r7, r0
 801d39a:	9b04      	ldr	r3, [sp, #16]
 801d39c:	3301      	adds	r3, #1
 801d39e:	9304      	str	r3, [sp, #16]
 801d3a0:	e774      	b.n	801d28c <_dtoa_r+0x904>
 801d3a2:	f000 fc61 	bl	801dc68 <__multadd>
 801d3a6:	4639      	mov	r1, r7
 801d3a8:	4681      	mov	r9, r0
 801d3aa:	2300      	movs	r3, #0
 801d3ac:	220a      	movs	r2, #10
 801d3ae:	4630      	mov	r0, r6
 801d3b0:	f000 fc5a 	bl	801dc68 <__multadd>
 801d3b4:	4607      	mov	r7, r0
 801d3b6:	e7f0      	b.n	801d39a <_dtoa_r+0xa12>
 801d3b8:	f1ba 0f00 	cmp.w	sl, #0
 801d3bc:	9a01      	ldr	r2, [sp, #4]
 801d3be:	bfcc      	ite	gt
 801d3c0:	46d0      	movgt	r8, sl
 801d3c2:	f04f 0801 	movle.w	r8, #1
 801d3c6:	4490      	add	r8, r2
 801d3c8:	f04f 0900 	mov.w	r9, #0
 801d3cc:	4629      	mov	r1, r5
 801d3ce:	2201      	movs	r2, #1
 801d3d0:	4630      	mov	r0, r6
 801d3d2:	9302      	str	r3, [sp, #8]
 801d3d4:	f000 fe42 	bl	801e05c <__lshift>
 801d3d8:	4621      	mov	r1, r4
 801d3da:	4605      	mov	r5, r0
 801d3dc:	f000 feae 	bl	801e13c <__mcmp>
 801d3e0:	2800      	cmp	r0, #0
 801d3e2:	dcb1      	bgt.n	801d348 <_dtoa_r+0x9c0>
 801d3e4:	d102      	bne.n	801d3ec <_dtoa_r+0xa64>
 801d3e6:	9b02      	ldr	r3, [sp, #8]
 801d3e8:	07db      	lsls	r3, r3, #31
 801d3ea:	d4ad      	bmi.n	801d348 <_dtoa_r+0x9c0>
 801d3ec:	4643      	mov	r3, r8
 801d3ee:	4698      	mov	r8, r3
 801d3f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d3f4:	2a30      	cmp	r2, #48	; 0x30
 801d3f6:	d0fa      	beq.n	801d3ee <_dtoa_r+0xa66>
 801d3f8:	e6f6      	b.n	801d1e8 <_dtoa_r+0x860>
 801d3fa:	9a01      	ldr	r2, [sp, #4]
 801d3fc:	429a      	cmp	r2, r3
 801d3fe:	d1a4      	bne.n	801d34a <_dtoa_r+0x9c2>
 801d400:	f10b 0b01 	add.w	fp, fp, #1
 801d404:	2331      	movs	r3, #49	; 0x31
 801d406:	e778      	b.n	801d2fa <_dtoa_r+0x972>
 801d408:	4b14      	ldr	r3, [pc, #80]	; (801d45c <_dtoa_r+0xad4>)
 801d40a:	f7ff bb27 	b.w	801ca5c <_dtoa_r+0xd4>
 801d40e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801d410:	2b00      	cmp	r3, #0
 801d412:	f47f ab03 	bne.w	801ca1c <_dtoa_r+0x94>
 801d416:	4b12      	ldr	r3, [pc, #72]	; (801d460 <_dtoa_r+0xad8>)
 801d418:	f7ff bb20 	b.w	801ca5c <_dtoa_r+0xd4>
 801d41c:	f1ba 0f00 	cmp.w	sl, #0
 801d420:	dc03      	bgt.n	801d42a <_dtoa_r+0xaa2>
 801d422:	9b06      	ldr	r3, [sp, #24]
 801d424:	2b02      	cmp	r3, #2
 801d426:	f73f aec7 	bgt.w	801d1b8 <_dtoa_r+0x830>
 801d42a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801d42e:	4621      	mov	r1, r4
 801d430:	4628      	mov	r0, r5
 801d432:	f7ff fa1b 	bl	801c86c <quorem>
 801d436:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801d43a:	f808 3b01 	strb.w	r3, [r8], #1
 801d43e:	9a01      	ldr	r2, [sp, #4]
 801d440:	eba8 0202 	sub.w	r2, r8, r2
 801d444:	4592      	cmp	sl, r2
 801d446:	ddb7      	ble.n	801d3b8 <_dtoa_r+0xa30>
 801d448:	4629      	mov	r1, r5
 801d44a:	2300      	movs	r3, #0
 801d44c:	220a      	movs	r2, #10
 801d44e:	4630      	mov	r0, r6
 801d450:	f000 fc0a 	bl	801dc68 <__multadd>
 801d454:	4605      	mov	r5, r0
 801d456:	e7ea      	b.n	801d42e <_dtoa_r+0xaa6>
 801d458:	0801fe58 	.word	0x0801fe58
 801d45c:	0801fc58 	.word	0x0801fc58
 801d460:	0801fdd9 	.word	0x0801fdd9

0801d464 <rshift>:
 801d464:	6903      	ldr	r3, [r0, #16]
 801d466:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801d46a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d46e:	ea4f 1261 	mov.w	r2, r1, asr #5
 801d472:	f100 0414 	add.w	r4, r0, #20
 801d476:	dd45      	ble.n	801d504 <rshift+0xa0>
 801d478:	f011 011f 	ands.w	r1, r1, #31
 801d47c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801d480:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801d484:	d10c      	bne.n	801d4a0 <rshift+0x3c>
 801d486:	f100 0710 	add.w	r7, r0, #16
 801d48a:	4629      	mov	r1, r5
 801d48c:	42b1      	cmp	r1, r6
 801d48e:	d334      	bcc.n	801d4fa <rshift+0x96>
 801d490:	1a9b      	subs	r3, r3, r2
 801d492:	009b      	lsls	r3, r3, #2
 801d494:	1eea      	subs	r2, r5, #3
 801d496:	4296      	cmp	r6, r2
 801d498:	bf38      	it	cc
 801d49a:	2300      	movcc	r3, #0
 801d49c:	4423      	add	r3, r4
 801d49e:	e015      	b.n	801d4cc <rshift+0x68>
 801d4a0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801d4a4:	f1c1 0820 	rsb	r8, r1, #32
 801d4a8:	40cf      	lsrs	r7, r1
 801d4aa:	f105 0e04 	add.w	lr, r5, #4
 801d4ae:	46a1      	mov	r9, r4
 801d4b0:	4576      	cmp	r6, lr
 801d4b2:	46f4      	mov	ip, lr
 801d4b4:	d815      	bhi.n	801d4e2 <rshift+0x7e>
 801d4b6:	1a9a      	subs	r2, r3, r2
 801d4b8:	0092      	lsls	r2, r2, #2
 801d4ba:	3a04      	subs	r2, #4
 801d4bc:	3501      	adds	r5, #1
 801d4be:	42ae      	cmp	r6, r5
 801d4c0:	bf38      	it	cc
 801d4c2:	2200      	movcc	r2, #0
 801d4c4:	18a3      	adds	r3, r4, r2
 801d4c6:	50a7      	str	r7, [r4, r2]
 801d4c8:	b107      	cbz	r7, 801d4cc <rshift+0x68>
 801d4ca:	3304      	adds	r3, #4
 801d4cc:	1b1a      	subs	r2, r3, r4
 801d4ce:	42a3      	cmp	r3, r4
 801d4d0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801d4d4:	bf08      	it	eq
 801d4d6:	2300      	moveq	r3, #0
 801d4d8:	6102      	str	r2, [r0, #16]
 801d4da:	bf08      	it	eq
 801d4dc:	6143      	streq	r3, [r0, #20]
 801d4de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d4e2:	f8dc c000 	ldr.w	ip, [ip]
 801d4e6:	fa0c fc08 	lsl.w	ip, ip, r8
 801d4ea:	ea4c 0707 	orr.w	r7, ip, r7
 801d4ee:	f849 7b04 	str.w	r7, [r9], #4
 801d4f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 801d4f6:	40cf      	lsrs	r7, r1
 801d4f8:	e7da      	b.n	801d4b0 <rshift+0x4c>
 801d4fa:	f851 cb04 	ldr.w	ip, [r1], #4
 801d4fe:	f847 cf04 	str.w	ip, [r7, #4]!
 801d502:	e7c3      	b.n	801d48c <rshift+0x28>
 801d504:	4623      	mov	r3, r4
 801d506:	e7e1      	b.n	801d4cc <rshift+0x68>

0801d508 <__hexdig_fun>:
 801d508:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801d50c:	2b09      	cmp	r3, #9
 801d50e:	d802      	bhi.n	801d516 <__hexdig_fun+0xe>
 801d510:	3820      	subs	r0, #32
 801d512:	b2c0      	uxtb	r0, r0
 801d514:	4770      	bx	lr
 801d516:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801d51a:	2b05      	cmp	r3, #5
 801d51c:	d801      	bhi.n	801d522 <__hexdig_fun+0x1a>
 801d51e:	3847      	subs	r0, #71	; 0x47
 801d520:	e7f7      	b.n	801d512 <__hexdig_fun+0xa>
 801d522:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801d526:	2b05      	cmp	r3, #5
 801d528:	d801      	bhi.n	801d52e <__hexdig_fun+0x26>
 801d52a:	3827      	subs	r0, #39	; 0x27
 801d52c:	e7f1      	b.n	801d512 <__hexdig_fun+0xa>
 801d52e:	2000      	movs	r0, #0
 801d530:	4770      	bx	lr
	...

0801d534 <__gethex>:
 801d534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d538:	ed2d 8b02 	vpush	{d8}
 801d53c:	b089      	sub	sp, #36	; 0x24
 801d53e:	ee08 0a10 	vmov	s16, r0
 801d542:	9304      	str	r3, [sp, #16]
 801d544:	4bb4      	ldr	r3, [pc, #720]	; (801d818 <__gethex+0x2e4>)
 801d546:	681b      	ldr	r3, [r3, #0]
 801d548:	9301      	str	r3, [sp, #4]
 801d54a:	4618      	mov	r0, r3
 801d54c:	468b      	mov	fp, r1
 801d54e:	4690      	mov	r8, r2
 801d550:	f7e2 fee8 	bl	8000324 <strlen>
 801d554:	9b01      	ldr	r3, [sp, #4]
 801d556:	f8db 2000 	ldr.w	r2, [fp]
 801d55a:	4403      	add	r3, r0
 801d55c:	4682      	mov	sl, r0
 801d55e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801d562:	9305      	str	r3, [sp, #20]
 801d564:	1c93      	adds	r3, r2, #2
 801d566:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801d56a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801d56e:	32fe      	adds	r2, #254	; 0xfe
 801d570:	18d1      	adds	r1, r2, r3
 801d572:	461f      	mov	r7, r3
 801d574:	f813 0b01 	ldrb.w	r0, [r3], #1
 801d578:	9100      	str	r1, [sp, #0]
 801d57a:	2830      	cmp	r0, #48	; 0x30
 801d57c:	d0f8      	beq.n	801d570 <__gethex+0x3c>
 801d57e:	f7ff ffc3 	bl	801d508 <__hexdig_fun>
 801d582:	4604      	mov	r4, r0
 801d584:	2800      	cmp	r0, #0
 801d586:	d13a      	bne.n	801d5fe <__gethex+0xca>
 801d588:	9901      	ldr	r1, [sp, #4]
 801d58a:	4652      	mov	r2, sl
 801d58c:	4638      	mov	r0, r7
 801d58e:	f001 fa43 	bl	801ea18 <strncmp>
 801d592:	4605      	mov	r5, r0
 801d594:	2800      	cmp	r0, #0
 801d596:	d168      	bne.n	801d66a <__gethex+0x136>
 801d598:	f817 000a 	ldrb.w	r0, [r7, sl]
 801d59c:	eb07 060a 	add.w	r6, r7, sl
 801d5a0:	f7ff ffb2 	bl	801d508 <__hexdig_fun>
 801d5a4:	2800      	cmp	r0, #0
 801d5a6:	d062      	beq.n	801d66e <__gethex+0x13a>
 801d5a8:	4633      	mov	r3, r6
 801d5aa:	7818      	ldrb	r0, [r3, #0]
 801d5ac:	2830      	cmp	r0, #48	; 0x30
 801d5ae:	461f      	mov	r7, r3
 801d5b0:	f103 0301 	add.w	r3, r3, #1
 801d5b4:	d0f9      	beq.n	801d5aa <__gethex+0x76>
 801d5b6:	f7ff ffa7 	bl	801d508 <__hexdig_fun>
 801d5ba:	2301      	movs	r3, #1
 801d5bc:	fab0 f480 	clz	r4, r0
 801d5c0:	0964      	lsrs	r4, r4, #5
 801d5c2:	4635      	mov	r5, r6
 801d5c4:	9300      	str	r3, [sp, #0]
 801d5c6:	463a      	mov	r2, r7
 801d5c8:	4616      	mov	r6, r2
 801d5ca:	3201      	adds	r2, #1
 801d5cc:	7830      	ldrb	r0, [r6, #0]
 801d5ce:	f7ff ff9b 	bl	801d508 <__hexdig_fun>
 801d5d2:	2800      	cmp	r0, #0
 801d5d4:	d1f8      	bne.n	801d5c8 <__gethex+0x94>
 801d5d6:	9901      	ldr	r1, [sp, #4]
 801d5d8:	4652      	mov	r2, sl
 801d5da:	4630      	mov	r0, r6
 801d5dc:	f001 fa1c 	bl	801ea18 <strncmp>
 801d5e0:	b980      	cbnz	r0, 801d604 <__gethex+0xd0>
 801d5e2:	b94d      	cbnz	r5, 801d5f8 <__gethex+0xc4>
 801d5e4:	eb06 050a 	add.w	r5, r6, sl
 801d5e8:	462a      	mov	r2, r5
 801d5ea:	4616      	mov	r6, r2
 801d5ec:	3201      	adds	r2, #1
 801d5ee:	7830      	ldrb	r0, [r6, #0]
 801d5f0:	f7ff ff8a 	bl	801d508 <__hexdig_fun>
 801d5f4:	2800      	cmp	r0, #0
 801d5f6:	d1f8      	bne.n	801d5ea <__gethex+0xb6>
 801d5f8:	1bad      	subs	r5, r5, r6
 801d5fa:	00ad      	lsls	r5, r5, #2
 801d5fc:	e004      	b.n	801d608 <__gethex+0xd4>
 801d5fe:	2400      	movs	r4, #0
 801d600:	4625      	mov	r5, r4
 801d602:	e7e0      	b.n	801d5c6 <__gethex+0x92>
 801d604:	2d00      	cmp	r5, #0
 801d606:	d1f7      	bne.n	801d5f8 <__gethex+0xc4>
 801d608:	7833      	ldrb	r3, [r6, #0]
 801d60a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801d60e:	2b50      	cmp	r3, #80	; 0x50
 801d610:	d13b      	bne.n	801d68a <__gethex+0x156>
 801d612:	7873      	ldrb	r3, [r6, #1]
 801d614:	2b2b      	cmp	r3, #43	; 0x2b
 801d616:	d02c      	beq.n	801d672 <__gethex+0x13e>
 801d618:	2b2d      	cmp	r3, #45	; 0x2d
 801d61a:	d02e      	beq.n	801d67a <__gethex+0x146>
 801d61c:	1c71      	adds	r1, r6, #1
 801d61e:	f04f 0900 	mov.w	r9, #0
 801d622:	7808      	ldrb	r0, [r1, #0]
 801d624:	f7ff ff70 	bl	801d508 <__hexdig_fun>
 801d628:	1e43      	subs	r3, r0, #1
 801d62a:	b2db      	uxtb	r3, r3
 801d62c:	2b18      	cmp	r3, #24
 801d62e:	d82c      	bhi.n	801d68a <__gethex+0x156>
 801d630:	f1a0 0210 	sub.w	r2, r0, #16
 801d634:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801d638:	f7ff ff66 	bl	801d508 <__hexdig_fun>
 801d63c:	1e43      	subs	r3, r0, #1
 801d63e:	b2db      	uxtb	r3, r3
 801d640:	2b18      	cmp	r3, #24
 801d642:	d91d      	bls.n	801d680 <__gethex+0x14c>
 801d644:	f1b9 0f00 	cmp.w	r9, #0
 801d648:	d000      	beq.n	801d64c <__gethex+0x118>
 801d64a:	4252      	negs	r2, r2
 801d64c:	4415      	add	r5, r2
 801d64e:	f8cb 1000 	str.w	r1, [fp]
 801d652:	b1e4      	cbz	r4, 801d68e <__gethex+0x15a>
 801d654:	9b00      	ldr	r3, [sp, #0]
 801d656:	2b00      	cmp	r3, #0
 801d658:	bf14      	ite	ne
 801d65a:	2700      	movne	r7, #0
 801d65c:	2706      	moveq	r7, #6
 801d65e:	4638      	mov	r0, r7
 801d660:	b009      	add	sp, #36	; 0x24
 801d662:	ecbd 8b02 	vpop	{d8}
 801d666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d66a:	463e      	mov	r6, r7
 801d66c:	4625      	mov	r5, r4
 801d66e:	2401      	movs	r4, #1
 801d670:	e7ca      	b.n	801d608 <__gethex+0xd4>
 801d672:	f04f 0900 	mov.w	r9, #0
 801d676:	1cb1      	adds	r1, r6, #2
 801d678:	e7d3      	b.n	801d622 <__gethex+0xee>
 801d67a:	f04f 0901 	mov.w	r9, #1
 801d67e:	e7fa      	b.n	801d676 <__gethex+0x142>
 801d680:	230a      	movs	r3, #10
 801d682:	fb03 0202 	mla	r2, r3, r2, r0
 801d686:	3a10      	subs	r2, #16
 801d688:	e7d4      	b.n	801d634 <__gethex+0x100>
 801d68a:	4631      	mov	r1, r6
 801d68c:	e7df      	b.n	801d64e <__gethex+0x11a>
 801d68e:	1bf3      	subs	r3, r6, r7
 801d690:	3b01      	subs	r3, #1
 801d692:	4621      	mov	r1, r4
 801d694:	2b07      	cmp	r3, #7
 801d696:	dc0b      	bgt.n	801d6b0 <__gethex+0x17c>
 801d698:	ee18 0a10 	vmov	r0, s16
 801d69c:	f000 fa82 	bl	801dba4 <_Balloc>
 801d6a0:	4604      	mov	r4, r0
 801d6a2:	b940      	cbnz	r0, 801d6b6 <__gethex+0x182>
 801d6a4:	4b5d      	ldr	r3, [pc, #372]	; (801d81c <__gethex+0x2e8>)
 801d6a6:	4602      	mov	r2, r0
 801d6a8:	21de      	movs	r1, #222	; 0xde
 801d6aa:	485d      	ldr	r0, [pc, #372]	; (801d820 <__gethex+0x2ec>)
 801d6ac:	f001 f9d6 	bl	801ea5c <__assert_func>
 801d6b0:	3101      	adds	r1, #1
 801d6b2:	105b      	asrs	r3, r3, #1
 801d6b4:	e7ee      	b.n	801d694 <__gethex+0x160>
 801d6b6:	f100 0914 	add.w	r9, r0, #20
 801d6ba:	f04f 0b00 	mov.w	fp, #0
 801d6be:	f1ca 0301 	rsb	r3, sl, #1
 801d6c2:	f8cd 9008 	str.w	r9, [sp, #8]
 801d6c6:	f8cd b000 	str.w	fp, [sp]
 801d6ca:	9306      	str	r3, [sp, #24]
 801d6cc:	42b7      	cmp	r7, r6
 801d6ce:	d340      	bcc.n	801d752 <__gethex+0x21e>
 801d6d0:	9802      	ldr	r0, [sp, #8]
 801d6d2:	9b00      	ldr	r3, [sp, #0]
 801d6d4:	f840 3b04 	str.w	r3, [r0], #4
 801d6d8:	eba0 0009 	sub.w	r0, r0, r9
 801d6dc:	1080      	asrs	r0, r0, #2
 801d6de:	0146      	lsls	r6, r0, #5
 801d6e0:	6120      	str	r0, [r4, #16]
 801d6e2:	4618      	mov	r0, r3
 801d6e4:	f000 fb50 	bl	801dd88 <__hi0bits>
 801d6e8:	1a30      	subs	r0, r6, r0
 801d6ea:	f8d8 6000 	ldr.w	r6, [r8]
 801d6ee:	42b0      	cmp	r0, r6
 801d6f0:	dd63      	ble.n	801d7ba <__gethex+0x286>
 801d6f2:	1b87      	subs	r7, r0, r6
 801d6f4:	4639      	mov	r1, r7
 801d6f6:	4620      	mov	r0, r4
 801d6f8:	f000 fef1 	bl	801e4de <__any_on>
 801d6fc:	4682      	mov	sl, r0
 801d6fe:	b1a8      	cbz	r0, 801d72c <__gethex+0x1f8>
 801d700:	1e7b      	subs	r3, r7, #1
 801d702:	1159      	asrs	r1, r3, #5
 801d704:	f003 021f 	and.w	r2, r3, #31
 801d708:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801d70c:	f04f 0a01 	mov.w	sl, #1
 801d710:	fa0a f202 	lsl.w	r2, sl, r2
 801d714:	420a      	tst	r2, r1
 801d716:	d009      	beq.n	801d72c <__gethex+0x1f8>
 801d718:	4553      	cmp	r3, sl
 801d71a:	dd05      	ble.n	801d728 <__gethex+0x1f4>
 801d71c:	1eb9      	subs	r1, r7, #2
 801d71e:	4620      	mov	r0, r4
 801d720:	f000 fedd 	bl	801e4de <__any_on>
 801d724:	2800      	cmp	r0, #0
 801d726:	d145      	bne.n	801d7b4 <__gethex+0x280>
 801d728:	f04f 0a02 	mov.w	sl, #2
 801d72c:	4639      	mov	r1, r7
 801d72e:	4620      	mov	r0, r4
 801d730:	f7ff fe98 	bl	801d464 <rshift>
 801d734:	443d      	add	r5, r7
 801d736:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d73a:	42ab      	cmp	r3, r5
 801d73c:	da4c      	bge.n	801d7d8 <__gethex+0x2a4>
 801d73e:	ee18 0a10 	vmov	r0, s16
 801d742:	4621      	mov	r1, r4
 801d744:	f000 fa6e 	bl	801dc24 <_Bfree>
 801d748:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d74a:	2300      	movs	r3, #0
 801d74c:	6013      	str	r3, [r2, #0]
 801d74e:	27a3      	movs	r7, #163	; 0xa3
 801d750:	e785      	b.n	801d65e <__gethex+0x12a>
 801d752:	1e73      	subs	r3, r6, #1
 801d754:	9a05      	ldr	r2, [sp, #20]
 801d756:	9303      	str	r3, [sp, #12]
 801d758:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801d75c:	4293      	cmp	r3, r2
 801d75e:	d019      	beq.n	801d794 <__gethex+0x260>
 801d760:	f1bb 0f20 	cmp.w	fp, #32
 801d764:	d107      	bne.n	801d776 <__gethex+0x242>
 801d766:	9b02      	ldr	r3, [sp, #8]
 801d768:	9a00      	ldr	r2, [sp, #0]
 801d76a:	f843 2b04 	str.w	r2, [r3], #4
 801d76e:	9302      	str	r3, [sp, #8]
 801d770:	2300      	movs	r3, #0
 801d772:	9300      	str	r3, [sp, #0]
 801d774:	469b      	mov	fp, r3
 801d776:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801d77a:	f7ff fec5 	bl	801d508 <__hexdig_fun>
 801d77e:	9b00      	ldr	r3, [sp, #0]
 801d780:	f000 000f 	and.w	r0, r0, #15
 801d784:	fa00 f00b 	lsl.w	r0, r0, fp
 801d788:	4303      	orrs	r3, r0
 801d78a:	9300      	str	r3, [sp, #0]
 801d78c:	f10b 0b04 	add.w	fp, fp, #4
 801d790:	9b03      	ldr	r3, [sp, #12]
 801d792:	e00d      	b.n	801d7b0 <__gethex+0x27c>
 801d794:	9b03      	ldr	r3, [sp, #12]
 801d796:	9a06      	ldr	r2, [sp, #24]
 801d798:	4413      	add	r3, r2
 801d79a:	42bb      	cmp	r3, r7
 801d79c:	d3e0      	bcc.n	801d760 <__gethex+0x22c>
 801d79e:	4618      	mov	r0, r3
 801d7a0:	9901      	ldr	r1, [sp, #4]
 801d7a2:	9307      	str	r3, [sp, #28]
 801d7a4:	4652      	mov	r2, sl
 801d7a6:	f001 f937 	bl	801ea18 <strncmp>
 801d7aa:	9b07      	ldr	r3, [sp, #28]
 801d7ac:	2800      	cmp	r0, #0
 801d7ae:	d1d7      	bne.n	801d760 <__gethex+0x22c>
 801d7b0:	461e      	mov	r6, r3
 801d7b2:	e78b      	b.n	801d6cc <__gethex+0x198>
 801d7b4:	f04f 0a03 	mov.w	sl, #3
 801d7b8:	e7b8      	b.n	801d72c <__gethex+0x1f8>
 801d7ba:	da0a      	bge.n	801d7d2 <__gethex+0x29e>
 801d7bc:	1a37      	subs	r7, r6, r0
 801d7be:	4621      	mov	r1, r4
 801d7c0:	ee18 0a10 	vmov	r0, s16
 801d7c4:	463a      	mov	r2, r7
 801d7c6:	f000 fc49 	bl	801e05c <__lshift>
 801d7ca:	1bed      	subs	r5, r5, r7
 801d7cc:	4604      	mov	r4, r0
 801d7ce:	f100 0914 	add.w	r9, r0, #20
 801d7d2:	f04f 0a00 	mov.w	sl, #0
 801d7d6:	e7ae      	b.n	801d736 <__gethex+0x202>
 801d7d8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801d7dc:	42a8      	cmp	r0, r5
 801d7de:	dd72      	ble.n	801d8c6 <__gethex+0x392>
 801d7e0:	1b45      	subs	r5, r0, r5
 801d7e2:	42ae      	cmp	r6, r5
 801d7e4:	dc36      	bgt.n	801d854 <__gethex+0x320>
 801d7e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d7ea:	2b02      	cmp	r3, #2
 801d7ec:	d02a      	beq.n	801d844 <__gethex+0x310>
 801d7ee:	2b03      	cmp	r3, #3
 801d7f0:	d02c      	beq.n	801d84c <__gethex+0x318>
 801d7f2:	2b01      	cmp	r3, #1
 801d7f4:	d11c      	bne.n	801d830 <__gethex+0x2fc>
 801d7f6:	42ae      	cmp	r6, r5
 801d7f8:	d11a      	bne.n	801d830 <__gethex+0x2fc>
 801d7fa:	2e01      	cmp	r6, #1
 801d7fc:	d112      	bne.n	801d824 <__gethex+0x2f0>
 801d7fe:	9a04      	ldr	r2, [sp, #16]
 801d800:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801d804:	6013      	str	r3, [r2, #0]
 801d806:	2301      	movs	r3, #1
 801d808:	6123      	str	r3, [r4, #16]
 801d80a:	f8c9 3000 	str.w	r3, [r9]
 801d80e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d810:	2762      	movs	r7, #98	; 0x62
 801d812:	601c      	str	r4, [r3, #0]
 801d814:	e723      	b.n	801d65e <__gethex+0x12a>
 801d816:	bf00      	nop
 801d818:	0801fed0 	.word	0x0801fed0
 801d81c:	0801fe58 	.word	0x0801fe58
 801d820:	0801fe69 	.word	0x0801fe69
 801d824:	1e71      	subs	r1, r6, #1
 801d826:	4620      	mov	r0, r4
 801d828:	f000 fe59 	bl	801e4de <__any_on>
 801d82c:	2800      	cmp	r0, #0
 801d82e:	d1e6      	bne.n	801d7fe <__gethex+0x2ca>
 801d830:	ee18 0a10 	vmov	r0, s16
 801d834:	4621      	mov	r1, r4
 801d836:	f000 f9f5 	bl	801dc24 <_Bfree>
 801d83a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d83c:	2300      	movs	r3, #0
 801d83e:	6013      	str	r3, [r2, #0]
 801d840:	2750      	movs	r7, #80	; 0x50
 801d842:	e70c      	b.n	801d65e <__gethex+0x12a>
 801d844:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d846:	2b00      	cmp	r3, #0
 801d848:	d1f2      	bne.n	801d830 <__gethex+0x2fc>
 801d84a:	e7d8      	b.n	801d7fe <__gethex+0x2ca>
 801d84c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d84e:	2b00      	cmp	r3, #0
 801d850:	d1d5      	bne.n	801d7fe <__gethex+0x2ca>
 801d852:	e7ed      	b.n	801d830 <__gethex+0x2fc>
 801d854:	1e6f      	subs	r7, r5, #1
 801d856:	f1ba 0f00 	cmp.w	sl, #0
 801d85a:	d131      	bne.n	801d8c0 <__gethex+0x38c>
 801d85c:	b127      	cbz	r7, 801d868 <__gethex+0x334>
 801d85e:	4639      	mov	r1, r7
 801d860:	4620      	mov	r0, r4
 801d862:	f000 fe3c 	bl	801e4de <__any_on>
 801d866:	4682      	mov	sl, r0
 801d868:	117b      	asrs	r3, r7, #5
 801d86a:	2101      	movs	r1, #1
 801d86c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801d870:	f007 071f 	and.w	r7, r7, #31
 801d874:	fa01 f707 	lsl.w	r7, r1, r7
 801d878:	421f      	tst	r7, r3
 801d87a:	4629      	mov	r1, r5
 801d87c:	4620      	mov	r0, r4
 801d87e:	bf18      	it	ne
 801d880:	f04a 0a02 	orrne.w	sl, sl, #2
 801d884:	1b76      	subs	r6, r6, r5
 801d886:	f7ff fded 	bl	801d464 <rshift>
 801d88a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801d88e:	2702      	movs	r7, #2
 801d890:	f1ba 0f00 	cmp.w	sl, #0
 801d894:	d048      	beq.n	801d928 <__gethex+0x3f4>
 801d896:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d89a:	2b02      	cmp	r3, #2
 801d89c:	d015      	beq.n	801d8ca <__gethex+0x396>
 801d89e:	2b03      	cmp	r3, #3
 801d8a0:	d017      	beq.n	801d8d2 <__gethex+0x39e>
 801d8a2:	2b01      	cmp	r3, #1
 801d8a4:	d109      	bne.n	801d8ba <__gethex+0x386>
 801d8a6:	f01a 0f02 	tst.w	sl, #2
 801d8aa:	d006      	beq.n	801d8ba <__gethex+0x386>
 801d8ac:	f8d9 0000 	ldr.w	r0, [r9]
 801d8b0:	ea4a 0a00 	orr.w	sl, sl, r0
 801d8b4:	f01a 0f01 	tst.w	sl, #1
 801d8b8:	d10e      	bne.n	801d8d8 <__gethex+0x3a4>
 801d8ba:	f047 0710 	orr.w	r7, r7, #16
 801d8be:	e033      	b.n	801d928 <__gethex+0x3f4>
 801d8c0:	f04f 0a01 	mov.w	sl, #1
 801d8c4:	e7d0      	b.n	801d868 <__gethex+0x334>
 801d8c6:	2701      	movs	r7, #1
 801d8c8:	e7e2      	b.n	801d890 <__gethex+0x35c>
 801d8ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d8cc:	f1c3 0301 	rsb	r3, r3, #1
 801d8d0:	9315      	str	r3, [sp, #84]	; 0x54
 801d8d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801d8d4:	2b00      	cmp	r3, #0
 801d8d6:	d0f0      	beq.n	801d8ba <__gethex+0x386>
 801d8d8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801d8dc:	f104 0314 	add.w	r3, r4, #20
 801d8e0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801d8e4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801d8e8:	f04f 0c00 	mov.w	ip, #0
 801d8ec:	4618      	mov	r0, r3
 801d8ee:	f853 2b04 	ldr.w	r2, [r3], #4
 801d8f2:	f1b2 3fff 	cmp.w	r2, #4294967295
 801d8f6:	d01c      	beq.n	801d932 <__gethex+0x3fe>
 801d8f8:	3201      	adds	r2, #1
 801d8fa:	6002      	str	r2, [r0, #0]
 801d8fc:	2f02      	cmp	r7, #2
 801d8fe:	f104 0314 	add.w	r3, r4, #20
 801d902:	d13f      	bne.n	801d984 <__gethex+0x450>
 801d904:	f8d8 2000 	ldr.w	r2, [r8]
 801d908:	3a01      	subs	r2, #1
 801d90a:	42b2      	cmp	r2, r6
 801d90c:	d10a      	bne.n	801d924 <__gethex+0x3f0>
 801d90e:	1171      	asrs	r1, r6, #5
 801d910:	2201      	movs	r2, #1
 801d912:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801d916:	f006 061f 	and.w	r6, r6, #31
 801d91a:	fa02 f606 	lsl.w	r6, r2, r6
 801d91e:	421e      	tst	r6, r3
 801d920:	bf18      	it	ne
 801d922:	4617      	movne	r7, r2
 801d924:	f047 0720 	orr.w	r7, r7, #32
 801d928:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d92a:	601c      	str	r4, [r3, #0]
 801d92c:	9b04      	ldr	r3, [sp, #16]
 801d92e:	601d      	str	r5, [r3, #0]
 801d930:	e695      	b.n	801d65e <__gethex+0x12a>
 801d932:	4299      	cmp	r1, r3
 801d934:	f843 cc04 	str.w	ip, [r3, #-4]
 801d938:	d8d8      	bhi.n	801d8ec <__gethex+0x3b8>
 801d93a:	68a3      	ldr	r3, [r4, #8]
 801d93c:	459b      	cmp	fp, r3
 801d93e:	db19      	blt.n	801d974 <__gethex+0x440>
 801d940:	6861      	ldr	r1, [r4, #4]
 801d942:	ee18 0a10 	vmov	r0, s16
 801d946:	3101      	adds	r1, #1
 801d948:	f000 f92c 	bl	801dba4 <_Balloc>
 801d94c:	4681      	mov	r9, r0
 801d94e:	b918      	cbnz	r0, 801d958 <__gethex+0x424>
 801d950:	4b1a      	ldr	r3, [pc, #104]	; (801d9bc <__gethex+0x488>)
 801d952:	4602      	mov	r2, r0
 801d954:	2184      	movs	r1, #132	; 0x84
 801d956:	e6a8      	b.n	801d6aa <__gethex+0x176>
 801d958:	6922      	ldr	r2, [r4, #16]
 801d95a:	3202      	adds	r2, #2
 801d95c:	f104 010c 	add.w	r1, r4, #12
 801d960:	0092      	lsls	r2, r2, #2
 801d962:	300c      	adds	r0, #12
 801d964:	f7fd fa34 	bl	801add0 <memcpy>
 801d968:	4621      	mov	r1, r4
 801d96a:	ee18 0a10 	vmov	r0, s16
 801d96e:	f000 f959 	bl	801dc24 <_Bfree>
 801d972:	464c      	mov	r4, r9
 801d974:	6923      	ldr	r3, [r4, #16]
 801d976:	1c5a      	adds	r2, r3, #1
 801d978:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801d97c:	6122      	str	r2, [r4, #16]
 801d97e:	2201      	movs	r2, #1
 801d980:	615a      	str	r2, [r3, #20]
 801d982:	e7bb      	b.n	801d8fc <__gethex+0x3c8>
 801d984:	6922      	ldr	r2, [r4, #16]
 801d986:	455a      	cmp	r2, fp
 801d988:	dd0b      	ble.n	801d9a2 <__gethex+0x46e>
 801d98a:	2101      	movs	r1, #1
 801d98c:	4620      	mov	r0, r4
 801d98e:	f7ff fd69 	bl	801d464 <rshift>
 801d992:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d996:	3501      	adds	r5, #1
 801d998:	42ab      	cmp	r3, r5
 801d99a:	f6ff aed0 	blt.w	801d73e <__gethex+0x20a>
 801d99e:	2701      	movs	r7, #1
 801d9a0:	e7c0      	b.n	801d924 <__gethex+0x3f0>
 801d9a2:	f016 061f 	ands.w	r6, r6, #31
 801d9a6:	d0fa      	beq.n	801d99e <__gethex+0x46a>
 801d9a8:	4453      	add	r3, sl
 801d9aa:	f1c6 0620 	rsb	r6, r6, #32
 801d9ae:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801d9b2:	f000 f9e9 	bl	801dd88 <__hi0bits>
 801d9b6:	42b0      	cmp	r0, r6
 801d9b8:	dbe7      	blt.n	801d98a <__gethex+0x456>
 801d9ba:	e7f0      	b.n	801d99e <__gethex+0x46a>
 801d9bc:	0801fe58 	.word	0x0801fe58

0801d9c0 <L_shift>:
 801d9c0:	f1c2 0208 	rsb	r2, r2, #8
 801d9c4:	0092      	lsls	r2, r2, #2
 801d9c6:	b570      	push	{r4, r5, r6, lr}
 801d9c8:	f1c2 0620 	rsb	r6, r2, #32
 801d9cc:	6843      	ldr	r3, [r0, #4]
 801d9ce:	6804      	ldr	r4, [r0, #0]
 801d9d0:	fa03 f506 	lsl.w	r5, r3, r6
 801d9d4:	432c      	orrs	r4, r5
 801d9d6:	40d3      	lsrs	r3, r2
 801d9d8:	6004      	str	r4, [r0, #0]
 801d9da:	f840 3f04 	str.w	r3, [r0, #4]!
 801d9de:	4288      	cmp	r0, r1
 801d9e0:	d3f4      	bcc.n	801d9cc <L_shift+0xc>
 801d9e2:	bd70      	pop	{r4, r5, r6, pc}

0801d9e4 <__match>:
 801d9e4:	b530      	push	{r4, r5, lr}
 801d9e6:	6803      	ldr	r3, [r0, #0]
 801d9e8:	3301      	adds	r3, #1
 801d9ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d9ee:	b914      	cbnz	r4, 801d9f6 <__match+0x12>
 801d9f0:	6003      	str	r3, [r0, #0]
 801d9f2:	2001      	movs	r0, #1
 801d9f4:	bd30      	pop	{r4, r5, pc}
 801d9f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d9fa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801d9fe:	2d19      	cmp	r5, #25
 801da00:	bf98      	it	ls
 801da02:	3220      	addls	r2, #32
 801da04:	42a2      	cmp	r2, r4
 801da06:	d0f0      	beq.n	801d9ea <__match+0x6>
 801da08:	2000      	movs	r0, #0
 801da0a:	e7f3      	b.n	801d9f4 <__match+0x10>

0801da0c <__hexnan>:
 801da0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da10:	680b      	ldr	r3, [r1, #0]
 801da12:	115e      	asrs	r6, r3, #5
 801da14:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801da18:	f013 031f 	ands.w	r3, r3, #31
 801da1c:	b087      	sub	sp, #28
 801da1e:	bf18      	it	ne
 801da20:	3604      	addne	r6, #4
 801da22:	2500      	movs	r5, #0
 801da24:	1f37      	subs	r7, r6, #4
 801da26:	4690      	mov	r8, r2
 801da28:	6802      	ldr	r2, [r0, #0]
 801da2a:	9301      	str	r3, [sp, #4]
 801da2c:	4682      	mov	sl, r0
 801da2e:	f846 5c04 	str.w	r5, [r6, #-4]
 801da32:	46b9      	mov	r9, r7
 801da34:	463c      	mov	r4, r7
 801da36:	9502      	str	r5, [sp, #8]
 801da38:	46ab      	mov	fp, r5
 801da3a:	7851      	ldrb	r1, [r2, #1]
 801da3c:	1c53      	adds	r3, r2, #1
 801da3e:	9303      	str	r3, [sp, #12]
 801da40:	b341      	cbz	r1, 801da94 <__hexnan+0x88>
 801da42:	4608      	mov	r0, r1
 801da44:	9205      	str	r2, [sp, #20]
 801da46:	9104      	str	r1, [sp, #16]
 801da48:	f7ff fd5e 	bl	801d508 <__hexdig_fun>
 801da4c:	2800      	cmp	r0, #0
 801da4e:	d14f      	bne.n	801daf0 <__hexnan+0xe4>
 801da50:	9904      	ldr	r1, [sp, #16]
 801da52:	9a05      	ldr	r2, [sp, #20]
 801da54:	2920      	cmp	r1, #32
 801da56:	d818      	bhi.n	801da8a <__hexnan+0x7e>
 801da58:	9b02      	ldr	r3, [sp, #8]
 801da5a:	459b      	cmp	fp, r3
 801da5c:	dd13      	ble.n	801da86 <__hexnan+0x7a>
 801da5e:	454c      	cmp	r4, r9
 801da60:	d206      	bcs.n	801da70 <__hexnan+0x64>
 801da62:	2d07      	cmp	r5, #7
 801da64:	dc04      	bgt.n	801da70 <__hexnan+0x64>
 801da66:	462a      	mov	r2, r5
 801da68:	4649      	mov	r1, r9
 801da6a:	4620      	mov	r0, r4
 801da6c:	f7ff ffa8 	bl	801d9c0 <L_shift>
 801da70:	4544      	cmp	r4, r8
 801da72:	d950      	bls.n	801db16 <__hexnan+0x10a>
 801da74:	2300      	movs	r3, #0
 801da76:	f1a4 0904 	sub.w	r9, r4, #4
 801da7a:	f844 3c04 	str.w	r3, [r4, #-4]
 801da7e:	f8cd b008 	str.w	fp, [sp, #8]
 801da82:	464c      	mov	r4, r9
 801da84:	461d      	mov	r5, r3
 801da86:	9a03      	ldr	r2, [sp, #12]
 801da88:	e7d7      	b.n	801da3a <__hexnan+0x2e>
 801da8a:	2929      	cmp	r1, #41	; 0x29
 801da8c:	d156      	bne.n	801db3c <__hexnan+0x130>
 801da8e:	3202      	adds	r2, #2
 801da90:	f8ca 2000 	str.w	r2, [sl]
 801da94:	f1bb 0f00 	cmp.w	fp, #0
 801da98:	d050      	beq.n	801db3c <__hexnan+0x130>
 801da9a:	454c      	cmp	r4, r9
 801da9c:	d206      	bcs.n	801daac <__hexnan+0xa0>
 801da9e:	2d07      	cmp	r5, #7
 801daa0:	dc04      	bgt.n	801daac <__hexnan+0xa0>
 801daa2:	462a      	mov	r2, r5
 801daa4:	4649      	mov	r1, r9
 801daa6:	4620      	mov	r0, r4
 801daa8:	f7ff ff8a 	bl	801d9c0 <L_shift>
 801daac:	4544      	cmp	r4, r8
 801daae:	d934      	bls.n	801db1a <__hexnan+0x10e>
 801dab0:	f1a8 0204 	sub.w	r2, r8, #4
 801dab4:	4623      	mov	r3, r4
 801dab6:	f853 1b04 	ldr.w	r1, [r3], #4
 801daba:	f842 1f04 	str.w	r1, [r2, #4]!
 801dabe:	429f      	cmp	r7, r3
 801dac0:	d2f9      	bcs.n	801dab6 <__hexnan+0xaa>
 801dac2:	1b3b      	subs	r3, r7, r4
 801dac4:	f023 0303 	bic.w	r3, r3, #3
 801dac8:	3304      	adds	r3, #4
 801daca:	3401      	adds	r4, #1
 801dacc:	3e03      	subs	r6, #3
 801dace:	42b4      	cmp	r4, r6
 801dad0:	bf88      	it	hi
 801dad2:	2304      	movhi	r3, #4
 801dad4:	4443      	add	r3, r8
 801dad6:	2200      	movs	r2, #0
 801dad8:	f843 2b04 	str.w	r2, [r3], #4
 801dadc:	429f      	cmp	r7, r3
 801dade:	d2fb      	bcs.n	801dad8 <__hexnan+0xcc>
 801dae0:	683b      	ldr	r3, [r7, #0]
 801dae2:	b91b      	cbnz	r3, 801daec <__hexnan+0xe0>
 801dae4:	4547      	cmp	r7, r8
 801dae6:	d127      	bne.n	801db38 <__hexnan+0x12c>
 801dae8:	2301      	movs	r3, #1
 801daea:	603b      	str	r3, [r7, #0]
 801daec:	2005      	movs	r0, #5
 801daee:	e026      	b.n	801db3e <__hexnan+0x132>
 801daf0:	3501      	adds	r5, #1
 801daf2:	2d08      	cmp	r5, #8
 801daf4:	f10b 0b01 	add.w	fp, fp, #1
 801daf8:	dd06      	ble.n	801db08 <__hexnan+0xfc>
 801dafa:	4544      	cmp	r4, r8
 801dafc:	d9c3      	bls.n	801da86 <__hexnan+0x7a>
 801dafe:	2300      	movs	r3, #0
 801db00:	f844 3c04 	str.w	r3, [r4, #-4]
 801db04:	2501      	movs	r5, #1
 801db06:	3c04      	subs	r4, #4
 801db08:	6822      	ldr	r2, [r4, #0]
 801db0a:	f000 000f 	and.w	r0, r0, #15
 801db0e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801db12:	6022      	str	r2, [r4, #0]
 801db14:	e7b7      	b.n	801da86 <__hexnan+0x7a>
 801db16:	2508      	movs	r5, #8
 801db18:	e7b5      	b.n	801da86 <__hexnan+0x7a>
 801db1a:	9b01      	ldr	r3, [sp, #4]
 801db1c:	2b00      	cmp	r3, #0
 801db1e:	d0df      	beq.n	801dae0 <__hexnan+0xd4>
 801db20:	f04f 32ff 	mov.w	r2, #4294967295
 801db24:	f1c3 0320 	rsb	r3, r3, #32
 801db28:	fa22 f303 	lsr.w	r3, r2, r3
 801db2c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801db30:	401a      	ands	r2, r3
 801db32:	f846 2c04 	str.w	r2, [r6, #-4]
 801db36:	e7d3      	b.n	801dae0 <__hexnan+0xd4>
 801db38:	3f04      	subs	r7, #4
 801db3a:	e7d1      	b.n	801dae0 <__hexnan+0xd4>
 801db3c:	2004      	movs	r0, #4
 801db3e:	b007      	add	sp, #28
 801db40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801db44 <_localeconv_r>:
 801db44:	4800      	ldr	r0, [pc, #0]	; (801db48 <_localeconv_r+0x4>)
 801db46:	4770      	bx	lr
 801db48:	24000258 	.word	0x24000258

0801db4c <_lseek_r>:
 801db4c:	b538      	push	{r3, r4, r5, lr}
 801db4e:	4d07      	ldr	r5, [pc, #28]	; (801db6c <_lseek_r+0x20>)
 801db50:	4604      	mov	r4, r0
 801db52:	4608      	mov	r0, r1
 801db54:	4611      	mov	r1, r2
 801db56:	2200      	movs	r2, #0
 801db58:	602a      	str	r2, [r5, #0]
 801db5a:	461a      	mov	r2, r3
 801db5c:	f7e6 f8ee 	bl	8003d3c <_lseek>
 801db60:	1c43      	adds	r3, r0, #1
 801db62:	d102      	bne.n	801db6a <_lseek_r+0x1e>
 801db64:	682b      	ldr	r3, [r5, #0]
 801db66:	b103      	cbz	r3, 801db6a <_lseek_r+0x1e>
 801db68:	6023      	str	r3, [r4, #0]
 801db6a:	bd38      	pop	{r3, r4, r5, pc}
 801db6c:	240034f8 	.word	0x240034f8

0801db70 <malloc>:
 801db70:	4b02      	ldr	r3, [pc, #8]	; (801db7c <malloc+0xc>)
 801db72:	4601      	mov	r1, r0
 801db74:	6818      	ldr	r0, [r3, #0]
 801db76:	f000 bd55 	b.w	801e624 <_malloc_r>
 801db7a:	bf00      	nop
 801db7c:	24000100 	.word	0x24000100

0801db80 <__ascii_mbtowc>:
 801db80:	b082      	sub	sp, #8
 801db82:	b901      	cbnz	r1, 801db86 <__ascii_mbtowc+0x6>
 801db84:	a901      	add	r1, sp, #4
 801db86:	b142      	cbz	r2, 801db9a <__ascii_mbtowc+0x1a>
 801db88:	b14b      	cbz	r3, 801db9e <__ascii_mbtowc+0x1e>
 801db8a:	7813      	ldrb	r3, [r2, #0]
 801db8c:	600b      	str	r3, [r1, #0]
 801db8e:	7812      	ldrb	r2, [r2, #0]
 801db90:	1e10      	subs	r0, r2, #0
 801db92:	bf18      	it	ne
 801db94:	2001      	movne	r0, #1
 801db96:	b002      	add	sp, #8
 801db98:	4770      	bx	lr
 801db9a:	4610      	mov	r0, r2
 801db9c:	e7fb      	b.n	801db96 <__ascii_mbtowc+0x16>
 801db9e:	f06f 0001 	mvn.w	r0, #1
 801dba2:	e7f8      	b.n	801db96 <__ascii_mbtowc+0x16>

0801dba4 <_Balloc>:
 801dba4:	b570      	push	{r4, r5, r6, lr}
 801dba6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801dba8:	4604      	mov	r4, r0
 801dbaa:	460d      	mov	r5, r1
 801dbac:	b976      	cbnz	r6, 801dbcc <_Balloc+0x28>
 801dbae:	2010      	movs	r0, #16
 801dbb0:	f7ff ffde 	bl	801db70 <malloc>
 801dbb4:	4602      	mov	r2, r0
 801dbb6:	6260      	str	r0, [r4, #36]	; 0x24
 801dbb8:	b920      	cbnz	r0, 801dbc4 <_Balloc+0x20>
 801dbba:	4b18      	ldr	r3, [pc, #96]	; (801dc1c <_Balloc+0x78>)
 801dbbc:	4818      	ldr	r0, [pc, #96]	; (801dc20 <_Balloc+0x7c>)
 801dbbe:	2166      	movs	r1, #102	; 0x66
 801dbc0:	f000 ff4c 	bl	801ea5c <__assert_func>
 801dbc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801dbc8:	6006      	str	r6, [r0, #0]
 801dbca:	60c6      	str	r6, [r0, #12]
 801dbcc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801dbce:	68f3      	ldr	r3, [r6, #12]
 801dbd0:	b183      	cbz	r3, 801dbf4 <_Balloc+0x50>
 801dbd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801dbd4:	68db      	ldr	r3, [r3, #12]
 801dbd6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801dbda:	b9b8      	cbnz	r0, 801dc0c <_Balloc+0x68>
 801dbdc:	2101      	movs	r1, #1
 801dbde:	fa01 f605 	lsl.w	r6, r1, r5
 801dbe2:	1d72      	adds	r2, r6, #5
 801dbe4:	0092      	lsls	r2, r2, #2
 801dbe6:	4620      	mov	r0, r4
 801dbe8:	f000 fc9a 	bl	801e520 <_calloc_r>
 801dbec:	b160      	cbz	r0, 801dc08 <_Balloc+0x64>
 801dbee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801dbf2:	e00e      	b.n	801dc12 <_Balloc+0x6e>
 801dbf4:	2221      	movs	r2, #33	; 0x21
 801dbf6:	2104      	movs	r1, #4
 801dbf8:	4620      	mov	r0, r4
 801dbfa:	f000 fc91 	bl	801e520 <_calloc_r>
 801dbfe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801dc00:	60f0      	str	r0, [r6, #12]
 801dc02:	68db      	ldr	r3, [r3, #12]
 801dc04:	2b00      	cmp	r3, #0
 801dc06:	d1e4      	bne.n	801dbd2 <_Balloc+0x2e>
 801dc08:	2000      	movs	r0, #0
 801dc0a:	bd70      	pop	{r4, r5, r6, pc}
 801dc0c:	6802      	ldr	r2, [r0, #0]
 801dc0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801dc12:	2300      	movs	r3, #0
 801dc14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801dc18:	e7f7      	b.n	801dc0a <_Balloc+0x66>
 801dc1a:	bf00      	nop
 801dc1c:	0801fde6 	.word	0x0801fde6
 801dc20:	0801fee4 	.word	0x0801fee4

0801dc24 <_Bfree>:
 801dc24:	b570      	push	{r4, r5, r6, lr}
 801dc26:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801dc28:	4605      	mov	r5, r0
 801dc2a:	460c      	mov	r4, r1
 801dc2c:	b976      	cbnz	r6, 801dc4c <_Bfree+0x28>
 801dc2e:	2010      	movs	r0, #16
 801dc30:	f7ff ff9e 	bl	801db70 <malloc>
 801dc34:	4602      	mov	r2, r0
 801dc36:	6268      	str	r0, [r5, #36]	; 0x24
 801dc38:	b920      	cbnz	r0, 801dc44 <_Bfree+0x20>
 801dc3a:	4b09      	ldr	r3, [pc, #36]	; (801dc60 <_Bfree+0x3c>)
 801dc3c:	4809      	ldr	r0, [pc, #36]	; (801dc64 <_Bfree+0x40>)
 801dc3e:	218a      	movs	r1, #138	; 0x8a
 801dc40:	f000 ff0c 	bl	801ea5c <__assert_func>
 801dc44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801dc48:	6006      	str	r6, [r0, #0]
 801dc4a:	60c6      	str	r6, [r0, #12]
 801dc4c:	b13c      	cbz	r4, 801dc5e <_Bfree+0x3a>
 801dc4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801dc50:	6862      	ldr	r2, [r4, #4]
 801dc52:	68db      	ldr	r3, [r3, #12]
 801dc54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801dc58:	6021      	str	r1, [r4, #0]
 801dc5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801dc5e:	bd70      	pop	{r4, r5, r6, pc}
 801dc60:	0801fde6 	.word	0x0801fde6
 801dc64:	0801fee4 	.word	0x0801fee4

0801dc68 <__multadd>:
 801dc68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dc6c:	690d      	ldr	r5, [r1, #16]
 801dc6e:	4607      	mov	r7, r0
 801dc70:	460c      	mov	r4, r1
 801dc72:	461e      	mov	r6, r3
 801dc74:	f101 0c14 	add.w	ip, r1, #20
 801dc78:	2000      	movs	r0, #0
 801dc7a:	f8dc 3000 	ldr.w	r3, [ip]
 801dc7e:	b299      	uxth	r1, r3
 801dc80:	fb02 6101 	mla	r1, r2, r1, r6
 801dc84:	0c1e      	lsrs	r6, r3, #16
 801dc86:	0c0b      	lsrs	r3, r1, #16
 801dc88:	fb02 3306 	mla	r3, r2, r6, r3
 801dc8c:	b289      	uxth	r1, r1
 801dc8e:	3001      	adds	r0, #1
 801dc90:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801dc94:	4285      	cmp	r5, r0
 801dc96:	f84c 1b04 	str.w	r1, [ip], #4
 801dc9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801dc9e:	dcec      	bgt.n	801dc7a <__multadd+0x12>
 801dca0:	b30e      	cbz	r6, 801dce6 <__multadd+0x7e>
 801dca2:	68a3      	ldr	r3, [r4, #8]
 801dca4:	42ab      	cmp	r3, r5
 801dca6:	dc19      	bgt.n	801dcdc <__multadd+0x74>
 801dca8:	6861      	ldr	r1, [r4, #4]
 801dcaa:	4638      	mov	r0, r7
 801dcac:	3101      	adds	r1, #1
 801dcae:	f7ff ff79 	bl	801dba4 <_Balloc>
 801dcb2:	4680      	mov	r8, r0
 801dcb4:	b928      	cbnz	r0, 801dcc2 <__multadd+0x5a>
 801dcb6:	4602      	mov	r2, r0
 801dcb8:	4b0c      	ldr	r3, [pc, #48]	; (801dcec <__multadd+0x84>)
 801dcba:	480d      	ldr	r0, [pc, #52]	; (801dcf0 <__multadd+0x88>)
 801dcbc:	21b5      	movs	r1, #181	; 0xb5
 801dcbe:	f000 fecd 	bl	801ea5c <__assert_func>
 801dcc2:	6922      	ldr	r2, [r4, #16]
 801dcc4:	3202      	adds	r2, #2
 801dcc6:	f104 010c 	add.w	r1, r4, #12
 801dcca:	0092      	lsls	r2, r2, #2
 801dccc:	300c      	adds	r0, #12
 801dcce:	f7fd f87f 	bl	801add0 <memcpy>
 801dcd2:	4621      	mov	r1, r4
 801dcd4:	4638      	mov	r0, r7
 801dcd6:	f7ff ffa5 	bl	801dc24 <_Bfree>
 801dcda:	4644      	mov	r4, r8
 801dcdc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801dce0:	3501      	adds	r5, #1
 801dce2:	615e      	str	r6, [r3, #20]
 801dce4:	6125      	str	r5, [r4, #16]
 801dce6:	4620      	mov	r0, r4
 801dce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dcec:	0801fe58 	.word	0x0801fe58
 801dcf0:	0801fee4 	.word	0x0801fee4

0801dcf4 <__s2b>:
 801dcf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dcf8:	460c      	mov	r4, r1
 801dcfa:	4615      	mov	r5, r2
 801dcfc:	461f      	mov	r7, r3
 801dcfe:	2209      	movs	r2, #9
 801dd00:	3308      	adds	r3, #8
 801dd02:	4606      	mov	r6, r0
 801dd04:	fb93 f3f2 	sdiv	r3, r3, r2
 801dd08:	2100      	movs	r1, #0
 801dd0a:	2201      	movs	r2, #1
 801dd0c:	429a      	cmp	r2, r3
 801dd0e:	db09      	blt.n	801dd24 <__s2b+0x30>
 801dd10:	4630      	mov	r0, r6
 801dd12:	f7ff ff47 	bl	801dba4 <_Balloc>
 801dd16:	b940      	cbnz	r0, 801dd2a <__s2b+0x36>
 801dd18:	4602      	mov	r2, r0
 801dd1a:	4b19      	ldr	r3, [pc, #100]	; (801dd80 <__s2b+0x8c>)
 801dd1c:	4819      	ldr	r0, [pc, #100]	; (801dd84 <__s2b+0x90>)
 801dd1e:	21ce      	movs	r1, #206	; 0xce
 801dd20:	f000 fe9c 	bl	801ea5c <__assert_func>
 801dd24:	0052      	lsls	r2, r2, #1
 801dd26:	3101      	adds	r1, #1
 801dd28:	e7f0      	b.n	801dd0c <__s2b+0x18>
 801dd2a:	9b08      	ldr	r3, [sp, #32]
 801dd2c:	6143      	str	r3, [r0, #20]
 801dd2e:	2d09      	cmp	r5, #9
 801dd30:	f04f 0301 	mov.w	r3, #1
 801dd34:	6103      	str	r3, [r0, #16]
 801dd36:	dd16      	ble.n	801dd66 <__s2b+0x72>
 801dd38:	f104 0909 	add.w	r9, r4, #9
 801dd3c:	46c8      	mov	r8, r9
 801dd3e:	442c      	add	r4, r5
 801dd40:	f818 3b01 	ldrb.w	r3, [r8], #1
 801dd44:	4601      	mov	r1, r0
 801dd46:	3b30      	subs	r3, #48	; 0x30
 801dd48:	220a      	movs	r2, #10
 801dd4a:	4630      	mov	r0, r6
 801dd4c:	f7ff ff8c 	bl	801dc68 <__multadd>
 801dd50:	45a0      	cmp	r8, r4
 801dd52:	d1f5      	bne.n	801dd40 <__s2b+0x4c>
 801dd54:	f1a5 0408 	sub.w	r4, r5, #8
 801dd58:	444c      	add	r4, r9
 801dd5a:	1b2d      	subs	r5, r5, r4
 801dd5c:	1963      	adds	r3, r4, r5
 801dd5e:	42bb      	cmp	r3, r7
 801dd60:	db04      	blt.n	801dd6c <__s2b+0x78>
 801dd62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dd66:	340a      	adds	r4, #10
 801dd68:	2509      	movs	r5, #9
 801dd6a:	e7f6      	b.n	801dd5a <__s2b+0x66>
 801dd6c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801dd70:	4601      	mov	r1, r0
 801dd72:	3b30      	subs	r3, #48	; 0x30
 801dd74:	220a      	movs	r2, #10
 801dd76:	4630      	mov	r0, r6
 801dd78:	f7ff ff76 	bl	801dc68 <__multadd>
 801dd7c:	e7ee      	b.n	801dd5c <__s2b+0x68>
 801dd7e:	bf00      	nop
 801dd80:	0801fe58 	.word	0x0801fe58
 801dd84:	0801fee4 	.word	0x0801fee4

0801dd88 <__hi0bits>:
 801dd88:	0c03      	lsrs	r3, r0, #16
 801dd8a:	041b      	lsls	r3, r3, #16
 801dd8c:	b9d3      	cbnz	r3, 801ddc4 <__hi0bits+0x3c>
 801dd8e:	0400      	lsls	r0, r0, #16
 801dd90:	2310      	movs	r3, #16
 801dd92:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801dd96:	bf04      	itt	eq
 801dd98:	0200      	lsleq	r0, r0, #8
 801dd9a:	3308      	addeq	r3, #8
 801dd9c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801dda0:	bf04      	itt	eq
 801dda2:	0100      	lsleq	r0, r0, #4
 801dda4:	3304      	addeq	r3, #4
 801dda6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801ddaa:	bf04      	itt	eq
 801ddac:	0080      	lsleq	r0, r0, #2
 801ddae:	3302      	addeq	r3, #2
 801ddb0:	2800      	cmp	r0, #0
 801ddb2:	db05      	blt.n	801ddc0 <__hi0bits+0x38>
 801ddb4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801ddb8:	f103 0301 	add.w	r3, r3, #1
 801ddbc:	bf08      	it	eq
 801ddbe:	2320      	moveq	r3, #32
 801ddc0:	4618      	mov	r0, r3
 801ddc2:	4770      	bx	lr
 801ddc4:	2300      	movs	r3, #0
 801ddc6:	e7e4      	b.n	801dd92 <__hi0bits+0xa>

0801ddc8 <__lo0bits>:
 801ddc8:	6803      	ldr	r3, [r0, #0]
 801ddca:	f013 0207 	ands.w	r2, r3, #7
 801ddce:	4601      	mov	r1, r0
 801ddd0:	d00b      	beq.n	801ddea <__lo0bits+0x22>
 801ddd2:	07da      	lsls	r2, r3, #31
 801ddd4:	d423      	bmi.n	801de1e <__lo0bits+0x56>
 801ddd6:	0798      	lsls	r0, r3, #30
 801ddd8:	bf49      	itett	mi
 801ddda:	085b      	lsrmi	r3, r3, #1
 801dddc:	089b      	lsrpl	r3, r3, #2
 801ddde:	2001      	movmi	r0, #1
 801dde0:	600b      	strmi	r3, [r1, #0]
 801dde2:	bf5c      	itt	pl
 801dde4:	600b      	strpl	r3, [r1, #0]
 801dde6:	2002      	movpl	r0, #2
 801dde8:	4770      	bx	lr
 801ddea:	b298      	uxth	r0, r3
 801ddec:	b9a8      	cbnz	r0, 801de1a <__lo0bits+0x52>
 801ddee:	0c1b      	lsrs	r3, r3, #16
 801ddf0:	2010      	movs	r0, #16
 801ddf2:	b2da      	uxtb	r2, r3
 801ddf4:	b90a      	cbnz	r2, 801ddfa <__lo0bits+0x32>
 801ddf6:	3008      	adds	r0, #8
 801ddf8:	0a1b      	lsrs	r3, r3, #8
 801ddfa:	071a      	lsls	r2, r3, #28
 801ddfc:	bf04      	itt	eq
 801ddfe:	091b      	lsreq	r3, r3, #4
 801de00:	3004      	addeq	r0, #4
 801de02:	079a      	lsls	r2, r3, #30
 801de04:	bf04      	itt	eq
 801de06:	089b      	lsreq	r3, r3, #2
 801de08:	3002      	addeq	r0, #2
 801de0a:	07da      	lsls	r2, r3, #31
 801de0c:	d403      	bmi.n	801de16 <__lo0bits+0x4e>
 801de0e:	085b      	lsrs	r3, r3, #1
 801de10:	f100 0001 	add.w	r0, r0, #1
 801de14:	d005      	beq.n	801de22 <__lo0bits+0x5a>
 801de16:	600b      	str	r3, [r1, #0]
 801de18:	4770      	bx	lr
 801de1a:	4610      	mov	r0, r2
 801de1c:	e7e9      	b.n	801ddf2 <__lo0bits+0x2a>
 801de1e:	2000      	movs	r0, #0
 801de20:	4770      	bx	lr
 801de22:	2020      	movs	r0, #32
 801de24:	4770      	bx	lr
	...

0801de28 <__i2b>:
 801de28:	b510      	push	{r4, lr}
 801de2a:	460c      	mov	r4, r1
 801de2c:	2101      	movs	r1, #1
 801de2e:	f7ff feb9 	bl	801dba4 <_Balloc>
 801de32:	4602      	mov	r2, r0
 801de34:	b928      	cbnz	r0, 801de42 <__i2b+0x1a>
 801de36:	4b05      	ldr	r3, [pc, #20]	; (801de4c <__i2b+0x24>)
 801de38:	4805      	ldr	r0, [pc, #20]	; (801de50 <__i2b+0x28>)
 801de3a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801de3e:	f000 fe0d 	bl	801ea5c <__assert_func>
 801de42:	2301      	movs	r3, #1
 801de44:	6144      	str	r4, [r0, #20]
 801de46:	6103      	str	r3, [r0, #16]
 801de48:	bd10      	pop	{r4, pc}
 801de4a:	bf00      	nop
 801de4c:	0801fe58 	.word	0x0801fe58
 801de50:	0801fee4 	.word	0x0801fee4

0801de54 <__multiply>:
 801de54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de58:	4691      	mov	r9, r2
 801de5a:	690a      	ldr	r2, [r1, #16]
 801de5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801de60:	429a      	cmp	r2, r3
 801de62:	bfb8      	it	lt
 801de64:	460b      	movlt	r3, r1
 801de66:	460c      	mov	r4, r1
 801de68:	bfbc      	itt	lt
 801de6a:	464c      	movlt	r4, r9
 801de6c:	4699      	movlt	r9, r3
 801de6e:	6927      	ldr	r7, [r4, #16]
 801de70:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801de74:	68a3      	ldr	r3, [r4, #8]
 801de76:	6861      	ldr	r1, [r4, #4]
 801de78:	eb07 060a 	add.w	r6, r7, sl
 801de7c:	42b3      	cmp	r3, r6
 801de7e:	b085      	sub	sp, #20
 801de80:	bfb8      	it	lt
 801de82:	3101      	addlt	r1, #1
 801de84:	f7ff fe8e 	bl	801dba4 <_Balloc>
 801de88:	b930      	cbnz	r0, 801de98 <__multiply+0x44>
 801de8a:	4602      	mov	r2, r0
 801de8c:	4b44      	ldr	r3, [pc, #272]	; (801dfa0 <__multiply+0x14c>)
 801de8e:	4845      	ldr	r0, [pc, #276]	; (801dfa4 <__multiply+0x150>)
 801de90:	f240 115d 	movw	r1, #349	; 0x15d
 801de94:	f000 fde2 	bl	801ea5c <__assert_func>
 801de98:	f100 0514 	add.w	r5, r0, #20
 801de9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801dea0:	462b      	mov	r3, r5
 801dea2:	2200      	movs	r2, #0
 801dea4:	4543      	cmp	r3, r8
 801dea6:	d321      	bcc.n	801deec <__multiply+0x98>
 801dea8:	f104 0314 	add.w	r3, r4, #20
 801deac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801deb0:	f109 0314 	add.w	r3, r9, #20
 801deb4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801deb8:	9202      	str	r2, [sp, #8]
 801deba:	1b3a      	subs	r2, r7, r4
 801debc:	3a15      	subs	r2, #21
 801debe:	f022 0203 	bic.w	r2, r2, #3
 801dec2:	3204      	adds	r2, #4
 801dec4:	f104 0115 	add.w	r1, r4, #21
 801dec8:	428f      	cmp	r7, r1
 801deca:	bf38      	it	cc
 801decc:	2204      	movcc	r2, #4
 801dece:	9201      	str	r2, [sp, #4]
 801ded0:	9a02      	ldr	r2, [sp, #8]
 801ded2:	9303      	str	r3, [sp, #12]
 801ded4:	429a      	cmp	r2, r3
 801ded6:	d80c      	bhi.n	801def2 <__multiply+0x9e>
 801ded8:	2e00      	cmp	r6, #0
 801deda:	dd03      	ble.n	801dee4 <__multiply+0x90>
 801dedc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801dee0:	2b00      	cmp	r3, #0
 801dee2:	d05a      	beq.n	801df9a <__multiply+0x146>
 801dee4:	6106      	str	r6, [r0, #16]
 801dee6:	b005      	add	sp, #20
 801dee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801deec:	f843 2b04 	str.w	r2, [r3], #4
 801def0:	e7d8      	b.n	801dea4 <__multiply+0x50>
 801def2:	f8b3 a000 	ldrh.w	sl, [r3]
 801def6:	f1ba 0f00 	cmp.w	sl, #0
 801defa:	d024      	beq.n	801df46 <__multiply+0xf2>
 801defc:	f104 0e14 	add.w	lr, r4, #20
 801df00:	46a9      	mov	r9, r5
 801df02:	f04f 0c00 	mov.w	ip, #0
 801df06:	f85e 2b04 	ldr.w	r2, [lr], #4
 801df0a:	f8d9 1000 	ldr.w	r1, [r9]
 801df0e:	fa1f fb82 	uxth.w	fp, r2
 801df12:	b289      	uxth	r1, r1
 801df14:	fb0a 110b 	mla	r1, sl, fp, r1
 801df18:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801df1c:	f8d9 2000 	ldr.w	r2, [r9]
 801df20:	4461      	add	r1, ip
 801df22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801df26:	fb0a c20b 	mla	r2, sl, fp, ip
 801df2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801df2e:	b289      	uxth	r1, r1
 801df30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801df34:	4577      	cmp	r7, lr
 801df36:	f849 1b04 	str.w	r1, [r9], #4
 801df3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801df3e:	d8e2      	bhi.n	801df06 <__multiply+0xb2>
 801df40:	9a01      	ldr	r2, [sp, #4]
 801df42:	f845 c002 	str.w	ip, [r5, r2]
 801df46:	9a03      	ldr	r2, [sp, #12]
 801df48:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801df4c:	3304      	adds	r3, #4
 801df4e:	f1b9 0f00 	cmp.w	r9, #0
 801df52:	d020      	beq.n	801df96 <__multiply+0x142>
 801df54:	6829      	ldr	r1, [r5, #0]
 801df56:	f104 0c14 	add.w	ip, r4, #20
 801df5a:	46ae      	mov	lr, r5
 801df5c:	f04f 0a00 	mov.w	sl, #0
 801df60:	f8bc b000 	ldrh.w	fp, [ip]
 801df64:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801df68:	fb09 220b 	mla	r2, r9, fp, r2
 801df6c:	4492      	add	sl, r2
 801df6e:	b289      	uxth	r1, r1
 801df70:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801df74:	f84e 1b04 	str.w	r1, [lr], #4
 801df78:	f85c 2b04 	ldr.w	r2, [ip], #4
 801df7c:	f8be 1000 	ldrh.w	r1, [lr]
 801df80:	0c12      	lsrs	r2, r2, #16
 801df82:	fb09 1102 	mla	r1, r9, r2, r1
 801df86:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801df8a:	4567      	cmp	r7, ip
 801df8c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801df90:	d8e6      	bhi.n	801df60 <__multiply+0x10c>
 801df92:	9a01      	ldr	r2, [sp, #4]
 801df94:	50a9      	str	r1, [r5, r2]
 801df96:	3504      	adds	r5, #4
 801df98:	e79a      	b.n	801ded0 <__multiply+0x7c>
 801df9a:	3e01      	subs	r6, #1
 801df9c:	e79c      	b.n	801ded8 <__multiply+0x84>
 801df9e:	bf00      	nop
 801dfa0:	0801fe58 	.word	0x0801fe58
 801dfa4:	0801fee4 	.word	0x0801fee4

0801dfa8 <__pow5mult>:
 801dfa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dfac:	4615      	mov	r5, r2
 801dfae:	f012 0203 	ands.w	r2, r2, #3
 801dfb2:	4606      	mov	r6, r0
 801dfb4:	460f      	mov	r7, r1
 801dfb6:	d007      	beq.n	801dfc8 <__pow5mult+0x20>
 801dfb8:	4c25      	ldr	r4, [pc, #148]	; (801e050 <__pow5mult+0xa8>)
 801dfba:	3a01      	subs	r2, #1
 801dfbc:	2300      	movs	r3, #0
 801dfbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801dfc2:	f7ff fe51 	bl	801dc68 <__multadd>
 801dfc6:	4607      	mov	r7, r0
 801dfc8:	10ad      	asrs	r5, r5, #2
 801dfca:	d03d      	beq.n	801e048 <__pow5mult+0xa0>
 801dfcc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801dfce:	b97c      	cbnz	r4, 801dff0 <__pow5mult+0x48>
 801dfd0:	2010      	movs	r0, #16
 801dfd2:	f7ff fdcd 	bl	801db70 <malloc>
 801dfd6:	4602      	mov	r2, r0
 801dfd8:	6270      	str	r0, [r6, #36]	; 0x24
 801dfda:	b928      	cbnz	r0, 801dfe8 <__pow5mult+0x40>
 801dfdc:	4b1d      	ldr	r3, [pc, #116]	; (801e054 <__pow5mult+0xac>)
 801dfde:	481e      	ldr	r0, [pc, #120]	; (801e058 <__pow5mult+0xb0>)
 801dfe0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801dfe4:	f000 fd3a 	bl	801ea5c <__assert_func>
 801dfe8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801dfec:	6004      	str	r4, [r0, #0]
 801dfee:	60c4      	str	r4, [r0, #12]
 801dff0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801dff4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801dff8:	b94c      	cbnz	r4, 801e00e <__pow5mult+0x66>
 801dffa:	f240 2171 	movw	r1, #625	; 0x271
 801dffe:	4630      	mov	r0, r6
 801e000:	f7ff ff12 	bl	801de28 <__i2b>
 801e004:	2300      	movs	r3, #0
 801e006:	f8c8 0008 	str.w	r0, [r8, #8]
 801e00a:	4604      	mov	r4, r0
 801e00c:	6003      	str	r3, [r0, #0]
 801e00e:	f04f 0900 	mov.w	r9, #0
 801e012:	07eb      	lsls	r3, r5, #31
 801e014:	d50a      	bpl.n	801e02c <__pow5mult+0x84>
 801e016:	4639      	mov	r1, r7
 801e018:	4622      	mov	r2, r4
 801e01a:	4630      	mov	r0, r6
 801e01c:	f7ff ff1a 	bl	801de54 <__multiply>
 801e020:	4639      	mov	r1, r7
 801e022:	4680      	mov	r8, r0
 801e024:	4630      	mov	r0, r6
 801e026:	f7ff fdfd 	bl	801dc24 <_Bfree>
 801e02a:	4647      	mov	r7, r8
 801e02c:	106d      	asrs	r5, r5, #1
 801e02e:	d00b      	beq.n	801e048 <__pow5mult+0xa0>
 801e030:	6820      	ldr	r0, [r4, #0]
 801e032:	b938      	cbnz	r0, 801e044 <__pow5mult+0x9c>
 801e034:	4622      	mov	r2, r4
 801e036:	4621      	mov	r1, r4
 801e038:	4630      	mov	r0, r6
 801e03a:	f7ff ff0b 	bl	801de54 <__multiply>
 801e03e:	6020      	str	r0, [r4, #0]
 801e040:	f8c0 9000 	str.w	r9, [r0]
 801e044:	4604      	mov	r4, r0
 801e046:	e7e4      	b.n	801e012 <__pow5mult+0x6a>
 801e048:	4638      	mov	r0, r7
 801e04a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e04e:	bf00      	nop
 801e050:	08020030 	.word	0x08020030
 801e054:	0801fde6 	.word	0x0801fde6
 801e058:	0801fee4 	.word	0x0801fee4

0801e05c <__lshift>:
 801e05c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e060:	460c      	mov	r4, r1
 801e062:	6849      	ldr	r1, [r1, #4]
 801e064:	6923      	ldr	r3, [r4, #16]
 801e066:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801e06a:	68a3      	ldr	r3, [r4, #8]
 801e06c:	4607      	mov	r7, r0
 801e06e:	4691      	mov	r9, r2
 801e070:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801e074:	f108 0601 	add.w	r6, r8, #1
 801e078:	42b3      	cmp	r3, r6
 801e07a:	db0b      	blt.n	801e094 <__lshift+0x38>
 801e07c:	4638      	mov	r0, r7
 801e07e:	f7ff fd91 	bl	801dba4 <_Balloc>
 801e082:	4605      	mov	r5, r0
 801e084:	b948      	cbnz	r0, 801e09a <__lshift+0x3e>
 801e086:	4602      	mov	r2, r0
 801e088:	4b2a      	ldr	r3, [pc, #168]	; (801e134 <__lshift+0xd8>)
 801e08a:	482b      	ldr	r0, [pc, #172]	; (801e138 <__lshift+0xdc>)
 801e08c:	f240 11d9 	movw	r1, #473	; 0x1d9
 801e090:	f000 fce4 	bl	801ea5c <__assert_func>
 801e094:	3101      	adds	r1, #1
 801e096:	005b      	lsls	r3, r3, #1
 801e098:	e7ee      	b.n	801e078 <__lshift+0x1c>
 801e09a:	2300      	movs	r3, #0
 801e09c:	f100 0114 	add.w	r1, r0, #20
 801e0a0:	f100 0210 	add.w	r2, r0, #16
 801e0a4:	4618      	mov	r0, r3
 801e0a6:	4553      	cmp	r3, sl
 801e0a8:	db37      	blt.n	801e11a <__lshift+0xbe>
 801e0aa:	6920      	ldr	r0, [r4, #16]
 801e0ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801e0b0:	f104 0314 	add.w	r3, r4, #20
 801e0b4:	f019 091f 	ands.w	r9, r9, #31
 801e0b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801e0bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801e0c0:	d02f      	beq.n	801e122 <__lshift+0xc6>
 801e0c2:	f1c9 0e20 	rsb	lr, r9, #32
 801e0c6:	468a      	mov	sl, r1
 801e0c8:	f04f 0c00 	mov.w	ip, #0
 801e0cc:	681a      	ldr	r2, [r3, #0]
 801e0ce:	fa02 f209 	lsl.w	r2, r2, r9
 801e0d2:	ea42 020c 	orr.w	r2, r2, ip
 801e0d6:	f84a 2b04 	str.w	r2, [sl], #4
 801e0da:	f853 2b04 	ldr.w	r2, [r3], #4
 801e0de:	4298      	cmp	r0, r3
 801e0e0:	fa22 fc0e 	lsr.w	ip, r2, lr
 801e0e4:	d8f2      	bhi.n	801e0cc <__lshift+0x70>
 801e0e6:	1b03      	subs	r3, r0, r4
 801e0e8:	3b15      	subs	r3, #21
 801e0ea:	f023 0303 	bic.w	r3, r3, #3
 801e0ee:	3304      	adds	r3, #4
 801e0f0:	f104 0215 	add.w	r2, r4, #21
 801e0f4:	4290      	cmp	r0, r2
 801e0f6:	bf38      	it	cc
 801e0f8:	2304      	movcc	r3, #4
 801e0fa:	f841 c003 	str.w	ip, [r1, r3]
 801e0fe:	f1bc 0f00 	cmp.w	ip, #0
 801e102:	d001      	beq.n	801e108 <__lshift+0xac>
 801e104:	f108 0602 	add.w	r6, r8, #2
 801e108:	3e01      	subs	r6, #1
 801e10a:	4638      	mov	r0, r7
 801e10c:	612e      	str	r6, [r5, #16]
 801e10e:	4621      	mov	r1, r4
 801e110:	f7ff fd88 	bl	801dc24 <_Bfree>
 801e114:	4628      	mov	r0, r5
 801e116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e11a:	f842 0f04 	str.w	r0, [r2, #4]!
 801e11e:	3301      	adds	r3, #1
 801e120:	e7c1      	b.n	801e0a6 <__lshift+0x4a>
 801e122:	3904      	subs	r1, #4
 801e124:	f853 2b04 	ldr.w	r2, [r3], #4
 801e128:	f841 2f04 	str.w	r2, [r1, #4]!
 801e12c:	4298      	cmp	r0, r3
 801e12e:	d8f9      	bhi.n	801e124 <__lshift+0xc8>
 801e130:	e7ea      	b.n	801e108 <__lshift+0xac>
 801e132:	bf00      	nop
 801e134:	0801fe58 	.word	0x0801fe58
 801e138:	0801fee4 	.word	0x0801fee4

0801e13c <__mcmp>:
 801e13c:	b530      	push	{r4, r5, lr}
 801e13e:	6902      	ldr	r2, [r0, #16]
 801e140:	690c      	ldr	r4, [r1, #16]
 801e142:	1b12      	subs	r2, r2, r4
 801e144:	d10e      	bne.n	801e164 <__mcmp+0x28>
 801e146:	f100 0314 	add.w	r3, r0, #20
 801e14a:	3114      	adds	r1, #20
 801e14c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801e150:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801e154:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801e158:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801e15c:	42a5      	cmp	r5, r4
 801e15e:	d003      	beq.n	801e168 <__mcmp+0x2c>
 801e160:	d305      	bcc.n	801e16e <__mcmp+0x32>
 801e162:	2201      	movs	r2, #1
 801e164:	4610      	mov	r0, r2
 801e166:	bd30      	pop	{r4, r5, pc}
 801e168:	4283      	cmp	r3, r0
 801e16a:	d3f3      	bcc.n	801e154 <__mcmp+0x18>
 801e16c:	e7fa      	b.n	801e164 <__mcmp+0x28>
 801e16e:	f04f 32ff 	mov.w	r2, #4294967295
 801e172:	e7f7      	b.n	801e164 <__mcmp+0x28>

0801e174 <__mdiff>:
 801e174:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e178:	460c      	mov	r4, r1
 801e17a:	4606      	mov	r6, r0
 801e17c:	4611      	mov	r1, r2
 801e17e:	4620      	mov	r0, r4
 801e180:	4690      	mov	r8, r2
 801e182:	f7ff ffdb 	bl	801e13c <__mcmp>
 801e186:	1e05      	subs	r5, r0, #0
 801e188:	d110      	bne.n	801e1ac <__mdiff+0x38>
 801e18a:	4629      	mov	r1, r5
 801e18c:	4630      	mov	r0, r6
 801e18e:	f7ff fd09 	bl	801dba4 <_Balloc>
 801e192:	b930      	cbnz	r0, 801e1a2 <__mdiff+0x2e>
 801e194:	4b3a      	ldr	r3, [pc, #232]	; (801e280 <__mdiff+0x10c>)
 801e196:	4602      	mov	r2, r0
 801e198:	f240 2132 	movw	r1, #562	; 0x232
 801e19c:	4839      	ldr	r0, [pc, #228]	; (801e284 <__mdiff+0x110>)
 801e19e:	f000 fc5d 	bl	801ea5c <__assert_func>
 801e1a2:	2301      	movs	r3, #1
 801e1a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801e1a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e1ac:	bfa4      	itt	ge
 801e1ae:	4643      	movge	r3, r8
 801e1b0:	46a0      	movge	r8, r4
 801e1b2:	4630      	mov	r0, r6
 801e1b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801e1b8:	bfa6      	itte	ge
 801e1ba:	461c      	movge	r4, r3
 801e1bc:	2500      	movge	r5, #0
 801e1be:	2501      	movlt	r5, #1
 801e1c0:	f7ff fcf0 	bl	801dba4 <_Balloc>
 801e1c4:	b920      	cbnz	r0, 801e1d0 <__mdiff+0x5c>
 801e1c6:	4b2e      	ldr	r3, [pc, #184]	; (801e280 <__mdiff+0x10c>)
 801e1c8:	4602      	mov	r2, r0
 801e1ca:	f44f 7110 	mov.w	r1, #576	; 0x240
 801e1ce:	e7e5      	b.n	801e19c <__mdiff+0x28>
 801e1d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801e1d4:	6926      	ldr	r6, [r4, #16]
 801e1d6:	60c5      	str	r5, [r0, #12]
 801e1d8:	f104 0914 	add.w	r9, r4, #20
 801e1dc:	f108 0514 	add.w	r5, r8, #20
 801e1e0:	f100 0e14 	add.w	lr, r0, #20
 801e1e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801e1e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801e1ec:	f108 0210 	add.w	r2, r8, #16
 801e1f0:	46f2      	mov	sl, lr
 801e1f2:	2100      	movs	r1, #0
 801e1f4:	f859 3b04 	ldr.w	r3, [r9], #4
 801e1f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801e1fc:	fa1f f883 	uxth.w	r8, r3
 801e200:	fa11 f18b 	uxtah	r1, r1, fp
 801e204:	0c1b      	lsrs	r3, r3, #16
 801e206:	eba1 0808 	sub.w	r8, r1, r8
 801e20a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801e20e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801e212:	fa1f f888 	uxth.w	r8, r8
 801e216:	1419      	asrs	r1, r3, #16
 801e218:	454e      	cmp	r6, r9
 801e21a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801e21e:	f84a 3b04 	str.w	r3, [sl], #4
 801e222:	d8e7      	bhi.n	801e1f4 <__mdiff+0x80>
 801e224:	1b33      	subs	r3, r6, r4
 801e226:	3b15      	subs	r3, #21
 801e228:	f023 0303 	bic.w	r3, r3, #3
 801e22c:	3304      	adds	r3, #4
 801e22e:	3415      	adds	r4, #21
 801e230:	42a6      	cmp	r6, r4
 801e232:	bf38      	it	cc
 801e234:	2304      	movcc	r3, #4
 801e236:	441d      	add	r5, r3
 801e238:	4473      	add	r3, lr
 801e23a:	469e      	mov	lr, r3
 801e23c:	462e      	mov	r6, r5
 801e23e:	4566      	cmp	r6, ip
 801e240:	d30e      	bcc.n	801e260 <__mdiff+0xec>
 801e242:	f10c 0203 	add.w	r2, ip, #3
 801e246:	1b52      	subs	r2, r2, r5
 801e248:	f022 0203 	bic.w	r2, r2, #3
 801e24c:	3d03      	subs	r5, #3
 801e24e:	45ac      	cmp	ip, r5
 801e250:	bf38      	it	cc
 801e252:	2200      	movcc	r2, #0
 801e254:	441a      	add	r2, r3
 801e256:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801e25a:	b17b      	cbz	r3, 801e27c <__mdiff+0x108>
 801e25c:	6107      	str	r7, [r0, #16]
 801e25e:	e7a3      	b.n	801e1a8 <__mdiff+0x34>
 801e260:	f856 8b04 	ldr.w	r8, [r6], #4
 801e264:	fa11 f288 	uxtah	r2, r1, r8
 801e268:	1414      	asrs	r4, r2, #16
 801e26a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801e26e:	b292      	uxth	r2, r2
 801e270:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801e274:	f84e 2b04 	str.w	r2, [lr], #4
 801e278:	1421      	asrs	r1, r4, #16
 801e27a:	e7e0      	b.n	801e23e <__mdiff+0xca>
 801e27c:	3f01      	subs	r7, #1
 801e27e:	e7ea      	b.n	801e256 <__mdiff+0xe2>
 801e280:	0801fe58 	.word	0x0801fe58
 801e284:	0801fee4 	.word	0x0801fee4

0801e288 <__ulp>:
 801e288:	b082      	sub	sp, #8
 801e28a:	ed8d 0b00 	vstr	d0, [sp]
 801e28e:	9b01      	ldr	r3, [sp, #4]
 801e290:	4912      	ldr	r1, [pc, #72]	; (801e2dc <__ulp+0x54>)
 801e292:	4019      	ands	r1, r3
 801e294:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801e298:	2900      	cmp	r1, #0
 801e29a:	dd05      	ble.n	801e2a8 <__ulp+0x20>
 801e29c:	2200      	movs	r2, #0
 801e29e:	460b      	mov	r3, r1
 801e2a0:	ec43 2b10 	vmov	d0, r2, r3
 801e2a4:	b002      	add	sp, #8
 801e2a6:	4770      	bx	lr
 801e2a8:	4249      	negs	r1, r1
 801e2aa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801e2ae:	ea4f 5021 	mov.w	r0, r1, asr #20
 801e2b2:	f04f 0200 	mov.w	r2, #0
 801e2b6:	f04f 0300 	mov.w	r3, #0
 801e2ba:	da04      	bge.n	801e2c6 <__ulp+0x3e>
 801e2bc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801e2c0:	fa41 f300 	asr.w	r3, r1, r0
 801e2c4:	e7ec      	b.n	801e2a0 <__ulp+0x18>
 801e2c6:	f1a0 0114 	sub.w	r1, r0, #20
 801e2ca:	291e      	cmp	r1, #30
 801e2cc:	bfda      	itte	le
 801e2ce:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801e2d2:	fa20 f101 	lsrle.w	r1, r0, r1
 801e2d6:	2101      	movgt	r1, #1
 801e2d8:	460a      	mov	r2, r1
 801e2da:	e7e1      	b.n	801e2a0 <__ulp+0x18>
 801e2dc:	7ff00000 	.word	0x7ff00000

0801e2e0 <__b2d>:
 801e2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e2e2:	6905      	ldr	r5, [r0, #16]
 801e2e4:	f100 0714 	add.w	r7, r0, #20
 801e2e8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801e2ec:	1f2e      	subs	r6, r5, #4
 801e2ee:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801e2f2:	4620      	mov	r0, r4
 801e2f4:	f7ff fd48 	bl	801dd88 <__hi0bits>
 801e2f8:	f1c0 0320 	rsb	r3, r0, #32
 801e2fc:	280a      	cmp	r0, #10
 801e2fe:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801e37c <__b2d+0x9c>
 801e302:	600b      	str	r3, [r1, #0]
 801e304:	dc14      	bgt.n	801e330 <__b2d+0x50>
 801e306:	f1c0 0e0b 	rsb	lr, r0, #11
 801e30a:	fa24 f10e 	lsr.w	r1, r4, lr
 801e30e:	42b7      	cmp	r7, r6
 801e310:	ea41 030c 	orr.w	r3, r1, ip
 801e314:	bf34      	ite	cc
 801e316:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801e31a:	2100      	movcs	r1, #0
 801e31c:	3015      	adds	r0, #21
 801e31e:	fa04 f000 	lsl.w	r0, r4, r0
 801e322:	fa21 f10e 	lsr.w	r1, r1, lr
 801e326:	ea40 0201 	orr.w	r2, r0, r1
 801e32a:	ec43 2b10 	vmov	d0, r2, r3
 801e32e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e330:	42b7      	cmp	r7, r6
 801e332:	bf3a      	itte	cc
 801e334:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801e338:	f1a5 0608 	subcc.w	r6, r5, #8
 801e33c:	2100      	movcs	r1, #0
 801e33e:	380b      	subs	r0, #11
 801e340:	d017      	beq.n	801e372 <__b2d+0x92>
 801e342:	f1c0 0c20 	rsb	ip, r0, #32
 801e346:	fa04 f500 	lsl.w	r5, r4, r0
 801e34a:	42be      	cmp	r6, r7
 801e34c:	fa21 f40c 	lsr.w	r4, r1, ip
 801e350:	ea45 0504 	orr.w	r5, r5, r4
 801e354:	bf8c      	ite	hi
 801e356:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801e35a:	2400      	movls	r4, #0
 801e35c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801e360:	fa01 f000 	lsl.w	r0, r1, r0
 801e364:	fa24 f40c 	lsr.w	r4, r4, ip
 801e368:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801e36c:	ea40 0204 	orr.w	r2, r0, r4
 801e370:	e7db      	b.n	801e32a <__b2d+0x4a>
 801e372:	ea44 030c 	orr.w	r3, r4, ip
 801e376:	460a      	mov	r2, r1
 801e378:	e7d7      	b.n	801e32a <__b2d+0x4a>
 801e37a:	bf00      	nop
 801e37c:	3ff00000 	.word	0x3ff00000

0801e380 <__d2b>:
 801e380:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801e384:	4689      	mov	r9, r1
 801e386:	2101      	movs	r1, #1
 801e388:	ec57 6b10 	vmov	r6, r7, d0
 801e38c:	4690      	mov	r8, r2
 801e38e:	f7ff fc09 	bl	801dba4 <_Balloc>
 801e392:	4604      	mov	r4, r0
 801e394:	b930      	cbnz	r0, 801e3a4 <__d2b+0x24>
 801e396:	4602      	mov	r2, r0
 801e398:	4b25      	ldr	r3, [pc, #148]	; (801e430 <__d2b+0xb0>)
 801e39a:	4826      	ldr	r0, [pc, #152]	; (801e434 <__d2b+0xb4>)
 801e39c:	f240 310a 	movw	r1, #778	; 0x30a
 801e3a0:	f000 fb5c 	bl	801ea5c <__assert_func>
 801e3a4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801e3a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801e3ac:	bb35      	cbnz	r5, 801e3fc <__d2b+0x7c>
 801e3ae:	2e00      	cmp	r6, #0
 801e3b0:	9301      	str	r3, [sp, #4]
 801e3b2:	d028      	beq.n	801e406 <__d2b+0x86>
 801e3b4:	4668      	mov	r0, sp
 801e3b6:	9600      	str	r6, [sp, #0]
 801e3b8:	f7ff fd06 	bl	801ddc8 <__lo0bits>
 801e3bc:	9900      	ldr	r1, [sp, #0]
 801e3be:	b300      	cbz	r0, 801e402 <__d2b+0x82>
 801e3c0:	9a01      	ldr	r2, [sp, #4]
 801e3c2:	f1c0 0320 	rsb	r3, r0, #32
 801e3c6:	fa02 f303 	lsl.w	r3, r2, r3
 801e3ca:	430b      	orrs	r3, r1
 801e3cc:	40c2      	lsrs	r2, r0
 801e3ce:	6163      	str	r3, [r4, #20]
 801e3d0:	9201      	str	r2, [sp, #4]
 801e3d2:	9b01      	ldr	r3, [sp, #4]
 801e3d4:	61a3      	str	r3, [r4, #24]
 801e3d6:	2b00      	cmp	r3, #0
 801e3d8:	bf14      	ite	ne
 801e3da:	2202      	movne	r2, #2
 801e3dc:	2201      	moveq	r2, #1
 801e3de:	6122      	str	r2, [r4, #16]
 801e3e0:	b1d5      	cbz	r5, 801e418 <__d2b+0x98>
 801e3e2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801e3e6:	4405      	add	r5, r0
 801e3e8:	f8c9 5000 	str.w	r5, [r9]
 801e3ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801e3f0:	f8c8 0000 	str.w	r0, [r8]
 801e3f4:	4620      	mov	r0, r4
 801e3f6:	b003      	add	sp, #12
 801e3f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e3fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801e400:	e7d5      	b.n	801e3ae <__d2b+0x2e>
 801e402:	6161      	str	r1, [r4, #20]
 801e404:	e7e5      	b.n	801e3d2 <__d2b+0x52>
 801e406:	a801      	add	r0, sp, #4
 801e408:	f7ff fcde 	bl	801ddc8 <__lo0bits>
 801e40c:	9b01      	ldr	r3, [sp, #4]
 801e40e:	6163      	str	r3, [r4, #20]
 801e410:	2201      	movs	r2, #1
 801e412:	6122      	str	r2, [r4, #16]
 801e414:	3020      	adds	r0, #32
 801e416:	e7e3      	b.n	801e3e0 <__d2b+0x60>
 801e418:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801e41c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801e420:	f8c9 0000 	str.w	r0, [r9]
 801e424:	6918      	ldr	r0, [r3, #16]
 801e426:	f7ff fcaf 	bl	801dd88 <__hi0bits>
 801e42a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801e42e:	e7df      	b.n	801e3f0 <__d2b+0x70>
 801e430:	0801fe58 	.word	0x0801fe58
 801e434:	0801fee4 	.word	0x0801fee4

0801e438 <__ratio>:
 801e438:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e43c:	4688      	mov	r8, r1
 801e43e:	4669      	mov	r1, sp
 801e440:	4681      	mov	r9, r0
 801e442:	f7ff ff4d 	bl	801e2e0 <__b2d>
 801e446:	a901      	add	r1, sp, #4
 801e448:	4640      	mov	r0, r8
 801e44a:	ec55 4b10 	vmov	r4, r5, d0
 801e44e:	ee10 aa10 	vmov	sl, s0
 801e452:	f7ff ff45 	bl	801e2e0 <__b2d>
 801e456:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801e45a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801e45e:	1a59      	subs	r1, r3, r1
 801e460:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e464:	1ad3      	subs	r3, r2, r3
 801e466:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801e46a:	ec57 6b10 	vmov	r6, r7, d0
 801e46e:	2b00      	cmp	r3, #0
 801e470:	bfd6      	itet	le
 801e472:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801e476:	462a      	movgt	r2, r5
 801e478:	463a      	movle	r2, r7
 801e47a:	46ab      	mov	fp, r5
 801e47c:	bfd6      	itet	le
 801e47e:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801e482:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801e486:	ee00 3a90 	vmovle	s1, r3
 801e48a:	ec4b ab17 	vmov	d7, sl, fp
 801e48e:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801e492:	b003      	add	sp, #12
 801e494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e498 <__copybits>:
 801e498:	3901      	subs	r1, #1
 801e49a:	b570      	push	{r4, r5, r6, lr}
 801e49c:	1149      	asrs	r1, r1, #5
 801e49e:	6914      	ldr	r4, [r2, #16]
 801e4a0:	3101      	adds	r1, #1
 801e4a2:	f102 0314 	add.w	r3, r2, #20
 801e4a6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801e4aa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801e4ae:	1f05      	subs	r5, r0, #4
 801e4b0:	42a3      	cmp	r3, r4
 801e4b2:	d30c      	bcc.n	801e4ce <__copybits+0x36>
 801e4b4:	1aa3      	subs	r3, r4, r2
 801e4b6:	3b11      	subs	r3, #17
 801e4b8:	f023 0303 	bic.w	r3, r3, #3
 801e4bc:	3211      	adds	r2, #17
 801e4be:	42a2      	cmp	r2, r4
 801e4c0:	bf88      	it	hi
 801e4c2:	2300      	movhi	r3, #0
 801e4c4:	4418      	add	r0, r3
 801e4c6:	2300      	movs	r3, #0
 801e4c8:	4288      	cmp	r0, r1
 801e4ca:	d305      	bcc.n	801e4d8 <__copybits+0x40>
 801e4cc:	bd70      	pop	{r4, r5, r6, pc}
 801e4ce:	f853 6b04 	ldr.w	r6, [r3], #4
 801e4d2:	f845 6f04 	str.w	r6, [r5, #4]!
 801e4d6:	e7eb      	b.n	801e4b0 <__copybits+0x18>
 801e4d8:	f840 3b04 	str.w	r3, [r0], #4
 801e4dc:	e7f4      	b.n	801e4c8 <__copybits+0x30>

0801e4de <__any_on>:
 801e4de:	f100 0214 	add.w	r2, r0, #20
 801e4e2:	6900      	ldr	r0, [r0, #16]
 801e4e4:	114b      	asrs	r3, r1, #5
 801e4e6:	4298      	cmp	r0, r3
 801e4e8:	b510      	push	{r4, lr}
 801e4ea:	db11      	blt.n	801e510 <__any_on+0x32>
 801e4ec:	dd0a      	ble.n	801e504 <__any_on+0x26>
 801e4ee:	f011 011f 	ands.w	r1, r1, #31
 801e4f2:	d007      	beq.n	801e504 <__any_on+0x26>
 801e4f4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801e4f8:	fa24 f001 	lsr.w	r0, r4, r1
 801e4fc:	fa00 f101 	lsl.w	r1, r0, r1
 801e500:	428c      	cmp	r4, r1
 801e502:	d10b      	bne.n	801e51c <__any_on+0x3e>
 801e504:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801e508:	4293      	cmp	r3, r2
 801e50a:	d803      	bhi.n	801e514 <__any_on+0x36>
 801e50c:	2000      	movs	r0, #0
 801e50e:	bd10      	pop	{r4, pc}
 801e510:	4603      	mov	r3, r0
 801e512:	e7f7      	b.n	801e504 <__any_on+0x26>
 801e514:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801e518:	2900      	cmp	r1, #0
 801e51a:	d0f5      	beq.n	801e508 <__any_on+0x2a>
 801e51c:	2001      	movs	r0, #1
 801e51e:	e7f6      	b.n	801e50e <__any_on+0x30>

0801e520 <_calloc_r>:
 801e520:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e522:	fba1 2402 	umull	r2, r4, r1, r2
 801e526:	b94c      	cbnz	r4, 801e53c <_calloc_r+0x1c>
 801e528:	4611      	mov	r1, r2
 801e52a:	9201      	str	r2, [sp, #4]
 801e52c:	f000 f87a 	bl	801e624 <_malloc_r>
 801e530:	9a01      	ldr	r2, [sp, #4]
 801e532:	4605      	mov	r5, r0
 801e534:	b930      	cbnz	r0, 801e544 <_calloc_r+0x24>
 801e536:	4628      	mov	r0, r5
 801e538:	b003      	add	sp, #12
 801e53a:	bd30      	pop	{r4, r5, pc}
 801e53c:	220c      	movs	r2, #12
 801e53e:	6002      	str	r2, [r0, #0]
 801e540:	2500      	movs	r5, #0
 801e542:	e7f8      	b.n	801e536 <_calloc_r+0x16>
 801e544:	4621      	mov	r1, r4
 801e546:	f7fc fc51 	bl	801adec <memset>
 801e54a:	e7f4      	b.n	801e536 <_calloc_r+0x16>

0801e54c <_free_r>:
 801e54c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e54e:	2900      	cmp	r1, #0
 801e550:	d044      	beq.n	801e5dc <_free_r+0x90>
 801e552:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e556:	9001      	str	r0, [sp, #4]
 801e558:	2b00      	cmp	r3, #0
 801e55a:	f1a1 0404 	sub.w	r4, r1, #4
 801e55e:	bfb8      	it	lt
 801e560:	18e4      	addlt	r4, r4, r3
 801e562:	f000 fc7f 	bl	801ee64 <__malloc_lock>
 801e566:	4a1e      	ldr	r2, [pc, #120]	; (801e5e0 <_free_r+0x94>)
 801e568:	9801      	ldr	r0, [sp, #4]
 801e56a:	6813      	ldr	r3, [r2, #0]
 801e56c:	b933      	cbnz	r3, 801e57c <_free_r+0x30>
 801e56e:	6063      	str	r3, [r4, #4]
 801e570:	6014      	str	r4, [r2, #0]
 801e572:	b003      	add	sp, #12
 801e574:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e578:	f000 bc7a 	b.w	801ee70 <__malloc_unlock>
 801e57c:	42a3      	cmp	r3, r4
 801e57e:	d908      	bls.n	801e592 <_free_r+0x46>
 801e580:	6825      	ldr	r5, [r4, #0]
 801e582:	1961      	adds	r1, r4, r5
 801e584:	428b      	cmp	r3, r1
 801e586:	bf01      	itttt	eq
 801e588:	6819      	ldreq	r1, [r3, #0]
 801e58a:	685b      	ldreq	r3, [r3, #4]
 801e58c:	1949      	addeq	r1, r1, r5
 801e58e:	6021      	streq	r1, [r4, #0]
 801e590:	e7ed      	b.n	801e56e <_free_r+0x22>
 801e592:	461a      	mov	r2, r3
 801e594:	685b      	ldr	r3, [r3, #4]
 801e596:	b10b      	cbz	r3, 801e59c <_free_r+0x50>
 801e598:	42a3      	cmp	r3, r4
 801e59a:	d9fa      	bls.n	801e592 <_free_r+0x46>
 801e59c:	6811      	ldr	r1, [r2, #0]
 801e59e:	1855      	adds	r5, r2, r1
 801e5a0:	42a5      	cmp	r5, r4
 801e5a2:	d10b      	bne.n	801e5bc <_free_r+0x70>
 801e5a4:	6824      	ldr	r4, [r4, #0]
 801e5a6:	4421      	add	r1, r4
 801e5a8:	1854      	adds	r4, r2, r1
 801e5aa:	42a3      	cmp	r3, r4
 801e5ac:	6011      	str	r1, [r2, #0]
 801e5ae:	d1e0      	bne.n	801e572 <_free_r+0x26>
 801e5b0:	681c      	ldr	r4, [r3, #0]
 801e5b2:	685b      	ldr	r3, [r3, #4]
 801e5b4:	6053      	str	r3, [r2, #4]
 801e5b6:	4421      	add	r1, r4
 801e5b8:	6011      	str	r1, [r2, #0]
 801e5ba:	e7da      	b.n	801e572 <_free_r+0x26>
 801e5bc:	d902      	bls.n	801e5c4 <_free_r+0x78>
 801e5be:	230c      	movs	r3, #12
 801e5c0:	6003      	str	r3, [r0, #0]
 801e5c2:	e7d6      	b.n	801e572 <_free_r+0x26>
 801e5c4:	6825      	ldr	r5, [r4, #0]
 801e5c6:	1961      	adds	r1, r4, r5
 801e5c8:	428b      	cmp	r3, r1
 801e5ca:	bf04      	itt	eq
 801e5cc:	6819      	ldreq	r1, [r3, #0]
 801e5ce:	685b      	ldreq	r3, [r3, #4]
 801e5d0:	6063      	str	r3, [r4, #4]
 801e5d2:	bf04      	itt	eq
 801e5d4:	1949      	addeq	r1, r1, r5
 801e5d6:	6021      	streq	r1, [r4, #0]
 801e5d8:	6054      	str	r4, [r2, #4]
 801e5da:	e7ca      	b.n	801e572 <_free_r+0x26>
 801e5dc:	b003      	add	sp, #12
 801e5de:	bd30      	pop	{r4, r5, pc}
 801e5e0:	240034f0 	.word	0x240034f0

0801e5e4 <sbrk_aligned>:
 801e5e4:	b570      	push	{r4, r5, r6, lr}
 801e5e6:	4e0e      	ldr	r6, [pc, #56]	; (801e620 <sbrk_aligned+0x3c>)
 801e5e8:	460c      	mov	r4, r1
 801e5ea:	6831      	ldr	r1, [r6, #0]
 801e5ec:	4605      	mov	r5, r0
 801e5ee:	b911      	cbnz	r1, 801e5f6 <sbrk_aligned+0x12>
 801e5f0:	f000 fa02 	bl	801e9f8 <_sbrk_r>
 801e5f4:	6030      	str	r0, [r6, #0]
 801e5f6:	4621      	mov	r1, r4
 801e5f8:	4628      	mov	r0, r5
 801e5fa:	f000 f9fd 	bl	801e9f8 <_sbrk_r>
 801e5fe:	1c43      	adds	r3, r0, #1
 801e600:	d00a      	beq.n	801e618 <sbrk_aligned+0x34>
 801e602:	1cc4      	adds	r4, r0, #3
 801e604:	f024 0403 	bic.w	r4, r4, #3
 801e608:	42a0      	cmp	r0, r4
 801e60a:	d007      	beq.n	801e61c <sbrk_aligned+0x38>
 801e60c:	1a21      	subs	r1, r4, r0
 801e60e:	4628      	mov	r0, r5
 801e610:	f000 f9f2 	bl	801e9f8 <_sbrk_r>
 801e614:	3001      	adds	r0, #1
 801e616:	d101      	bne.n	801e61c <sbrk_aligned+0x38>
 801e618:	f04f 34ff 	mov.w	r4, #4294967295
 801e61c:	4620      	mov	r0, r4
 801e61e:	bd70      	pop	{r4, r5, r6, pc}
 801e620:	240034f4 	.word	0x240034f4

0801e624 <_malloc_r>:
 801e624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e628:	1ccd      	adds	r5, r1, #3
 801e62a:	f025 0503 	bic.w	r5, r5, #3
 801e62e:	3508      	adds	r5, #8
 801e630:	2d0c      	cmp	r5, #12
 801e632:	bf38      	it	cc
 801e634:	250c      	movcc	r5, #12
 801e636:	2d00      	cmp	r5, #0
 801e638:	4607      	mov	r7, r0
 801e63a:	db01      	blt.n	801e640 <_malloc_r+0x1c>
 801e63c:	42a9      	cmp	r1, r5
 801e63e:	d905      	bls.n	801e64c <_malloc_r+0x28>
 801e640:	230c      	movs	r3, #12
 801e642:	603b      	str	r3, [r7, #0]
 801e644:	2600      	movs	r6, #0
 801e646:	4630      	mov	r0, r6
 801e648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e64c:	4e2e      	ldr	r6, [pc, #184]	; (801e708 <_malloc_r+0xe4>)
 801e64e:	f000 fc09 	bl	801ee64 <__malloc_lock>
 801e652:	6833      	ldr	r3, [r6, #0]
 801e654:	461c      	mov	r4, r3
 801e656:	bb34      	cbnz	r4, 801e6a6 <_malloc_r+0x82>
 801e658:	4629      	mov	r1, r5
 801e65a:	4638      	mov	r0, r7
 801e65c:	f7ff ffc2 	bl	801e5e4 <sbrk_aligned>
 801e660:	1c43      	adds	r3, r0, #1
 801e662:	4604      	mov	r4, r0
 801e664:	d14d      	bne.n	801e702 <_malloc_r+0xde>
 801e666:	6834      	ldr	r4, [r6, #0]
 801e668:	4626      	mov	r6, r4
 801e66a:	2e00      	cmp	r6, #0
 801e66c:	d140      	bne.n	801e6f0 <_malloc_r+0xcc>
 801e66e:	6823      	ldr	r3, [r4, #0]
 801e670:	4631      	mov	r1, r6
 801e672:	4638      	mov	r0, r7
 801e674:	eb04 0803 	add.w	r8, r4, r3
 801e678:	f000 f9be 	bl	801e9f8 <_sbrk_r>
 801e67c:	4580      	cmp	r8, r0
 801e67e:	d13a      	bne.n	801e6f6 <_malloc_r+0xd2>
 801e680:	6821      	ldr	r1, [r4, #0]
 801e682:	3503      	adds	r5, #3
 801e684:	1a6d      	subs	r5, r5, r1
 801e686:	f025 0503 	bic.w	r5, r5, #3
 801e68a:	3508      	adds	r5, #8
 801e68c:	2d0c      	cmp	r5, #12
 801e68e:	bf38      	it	cc
 801e690:	250c      	movcc	r5, #12
 801e692:	4629      	mov	r1, r5
 801e694:	4638      	mov	r0, r7
 801e696:	f7ff ffa5 	bl	801e5e4 <sbrk_aligned>
 801e69a:	3001      	adds	r0, #1
 801e69c:	d02b      	beq.n	801e6f6 <_malloc_r+0xd2>
 801e69e:	6823      	ldr	r3, [r4, #0]
 801e6a0:	442b      	add	r3, r5
 801e6a2:	6023      	str	r3, [r4, #0]
 801e6a4:	e00e      	b.n	801e6c4 <_malloc_r+0xa0>
 801e6a6:	6822      	ldr	r2, [r4, #0]
 801e6a8:	1b52      	subs	r2, r2, r5
 801e6aa:	d41e      	bmi.n	801e6ea <_malloc_r+0xc6>
 801e6ac:	2a0b      	cmp	r2, #11
 801e6ae:	d916      	bls.n	801e6de <_malloc_r+0xba>
 801e6b0:	1961      	adds	r1, r4, r5
 801e6b2:	42a3      	cmp	r3, r4
 801e6b4:	6025      	str	r5, [r4, #0]
 801e6b6:	bf18      	it	ne
 801e6b8:	6059      	strne	r1, [r3, #4]
 801e6ba:	6863      	ldr	r3, [r4, #4]
 801e6bc:	bf08      	it	eq
 801e6be:	6031      	streq	r1, [r6, #0]
 801e6c0:	5162      	str	r2, [r4, r5]
 801e6c2:	604b      	str	r3, [r1, #4]
 801e6c4:	4638      	mov	r0, r7
 801e6c6:	f104 060b 	add.w	r6, r4, #11
 801e6ca:	f000 fbd1 	bl	801ee70 <__malloc_unlock>
 801e6ce:	f026 0607 	bic.w	r6, r6, #7
 801e6d2:	1d23      	adds	r3, r4, #4
 801e6d4:	1af2      	subs	r2, r6, r3
 801e6d6:	d0b6      	beq.n	801e646 <_malloc_r+0x22>
 801e6d8:	1b9b      	subs	r3, r3, r6
 801e6da:	50a3      	str	r3, [r4, r2]
 801e6dc:	e7b3      	b.n	801e646 <_malloc_r+0x22>
 801e6de:	6862      	ldr	r2, [r4, #4]
 801e6e0:	42a3      	cmp	r3, r4
 801e6e2:	bf0c      	ite	eq
 801e6e4:	6032      	streq	r2, [r6, #0]
 801e6e6:	605a      	strne	r2, [r3, #4]
 801e6e8:	e7ec      	b.n	801e6c4 <_malloc_r+0xa0>
 801e6ea:	4623      	mov	r3, r4
 801e6ec:	6864      	ldr	r4, [r4, #4]
 801e6ee:	e7b2      	b.n	801e656 <_malloc_r+0x32>
 801e6f0:	4634      	mov	r4, r6
 801e6f2:	6876      	ldr	r6, [r6, #4]
 801e6f4:	e7b9      	b.n	801e66a <_malloc_r+0x46>
 801e6f6:	230c      	movs	r3, #12
 801e6f8:	603b      	str	r3, [r7, #0]
 801e6fa:	4638      	mov	r0, r7
 801e6fc:	f000 fbb8 	bl	801ee70 <__malloc_unlock>
 801e700:	e7a1      	b.n	801e646 <_malloc_r+0x22>
 801e702:	6025      	str	r5, [r4, #0]
 801e704:	e7de      	b.n	801e6c4 <_malloc_r+0xa0>
 801e706:	bf00      	nop
 801e708:	240034f0 	.word	0x240034f0

0801e70c <__ssputs_r>:
 801e70c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e710:	688e      	ldr	r6, [r1, #8]
 801e712:	429e      	cmp	r6, r3
 801e714:	4682      	mov	sl, r0
 801e716:	460c      	mov	r4, r1
 801e718:	4690      	mov	r8, r2
 801e71a:	461f      	mov	r7, r3
 801e71c:	d838      	bhi.n	801e790 <__ssputs_r+0x84>
 801e71e:	898a      	ldrh	r2, [r1, #12]
 801e720:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801e724:	d032      	beq.n	801e78c <__ssputs_r+0x80>
 801e726:	6825      	ldr	r5, [r4, #0]
 801e728:	6909      	ldr	r1, [r1, #16]
 801e72a:	eba5 0901 	sub.w	r9, r5, r1
 801e72e:	6965      	ldr	r5, [r4, #20]
 801e730:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e734:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801e738:	3301      	adds	r3, #1
 801e73a:	444b      	add	r3, r9
 801e73c:	106d      	asrs	r5, r5, #1
 801e73e:	429d      	cmp	r5, r3
 801e740:	bf38      	it	cc
 801e742:	461d      	movcc	r5, r3
 801e744:	0553      	lsls	r3, r2, #21
 801e746:	d531      	bpl.n	801e7ac <__ssputs_r+0xa0>
 801e748:	4629      	mov	r1, r5
 801e74a:	f7ff ff6b 	bl	801e624 <_malloc_r>
 801e74e:	4606      	mov	r6, r0
 801e750:	b950      	cbnz	r0, 801e768 <__ssputs_r+0x5c>
 801e752:	230c      	movs	r3, #12
 801e754:	f8ca 3000 	str.w	r3, [sl]
 801e758:	89a3      	ldrh	r3, [r4, #12]
 801e75a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e75e:	81a3      	strh	r3, [r4, #12]
 801e760:	f04f 30ff 	mov.w	r0, #4294967295
 801e764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e768:	6921      	ldr	r1, [r4, #16]
 801e76a:	464a      	mov	r2, r9
 801e76c:	f7fc fb30 	bl	801add0 <memcpy>
 801e770:	89a3      	ldrh	r3, [r4, #12]
 801e772:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801e776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e77a:	81a3      	strh	r3, [r4, #12]
 801e77c:	6126      	str	r6, [r4, #16]
 801e77e:	6165      	str	r5, [r4, #20]
 801e780:	444e      	add	r6, r9
 801e782:	eba5 0509 	sub.w	r5, r5, r9
 801e786:	6026      	str	r6, [r4, #0]
 801e788:	60a5      	str	r5, [r4, #8]
 801e78a:	463e      	mov	r6, r7
 801e78c:	42be      	cmp	r6, r7
 801e78e:	d900      	bls.n	801e792 <__ssputs_r+0x86>
 801e790:	463e      	mov	r6, r7
 801e792:	6820      	ldr	r0, [r4, #0]
 801e794:	4632      	mov	r2, r6
 801e796:	4641      	mov	r1, r8
 801e798:	f000 fb4a 	bl	801ee30 <memmove>
 801e79c:	68a3      	ldr	r3, [r4, #8]
 801e79e:	1b9b      	subs	r3, r3, r6
 801e7a0:	60a3      	str	r3, [r4, #8]
 801e7a2:	6823      	ldr	r3, [r4, #0]
 801e7a4:	4433      	add	r3, r6
 801e7a6:	6023      	str	r3, [r4, #0]
 801e7a8:	2000      	movs	r0, #0
 801e7aa:	e7db      	b.n	801e764 <__ssputs_r+0x58>
 801e7ac:	462a      	mov	r2, r5
 801e7ae:	f000 fb65 	bl	801ee7c <_realloc_r>
 801e7b2:	4606      	mov	r6, r0
 801e7b4:	2800      	cmp	r0, #0
 801e7b6:	d1e1      	bne.n	801e77c <__ssputs_r+0x70>
 801e7b8:	6921      	ldr	r1, [r4, #16]
 801e7ba:	4650      	mov	r0, sl
 801e7bc:	f7ff fec6 	bl	801e54c <_free_r>
 801e7c0:	e7c7      	b.n	801e752 <__ssputs_r+0x46>
	...

0801e7c4 <_svfiprintf_r>:
 801e7c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e7c8:	4698      	mov	r8, r3
 801e7ca:	898b      	ldrh	r3, [r1, #12]
 801e7cc:	061b      	lsls	r3, r3, #24
 801e7ce:	b09d      	sub	sp, #116	; 0x74
 801e7d0:	4607      	mov	r7, r0
 801e7d2:	460d      	mov	r5, r1
 801e7d4:	4614      	mov	r4, r2
 801e7d6:	d50e      	bpl.n	801e7f6 <_svfiprintf_r+0x32>
 801e7d8:	690b      	ldr	r3, [r1, #16]
 801e7da:	b963      	cbnz	r3, 801e7f6 <_svfiprintf_r+0x32>
 801e7dc:	2140      	movs	r1, #64	; 0x40
 801e7de:	f7ff ff21 	bl	801e624 <_malloc_r>
 801e7e2:	6028      	str	r0, [r5, #0]
 801e7e4:	6128      	str	r0, [r5, #16]
 801e7e6:	b920      	cbnz	r0, 801e7f2 <_svfiprintf_r+0x2e>
 801e7e8:	230c      	movs	r3, #12
 801e7ea:	603b      	str	r3, [r7, #0]
 801e7ec:	f04f 30ff 	mov.w	r0, #4294967295
 801e7f0:	e0d1      	b.n	801e996 <_svfiprintf_r+0x1d2>
 801e7f2:	2340      	movs	r3, #64	; 0x40
 801e7f4:	616b      	str	r3, [r5, #20]
 801e7f6:	2300      	movs	r3, #0
 801e7f8:	9309      	str	r3, [sp, #36]	; 0x24
 801e7fa:	2320      	movs	r3, #32
 801e7fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e800:	f8cd 800c 	str.w	r8, [sp, #12]
 801e804:	2330      	movs	r3, #48	; 0x30
 801e806:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801e9b0 <_svfiprintf_r+0x1ec>
 801e80a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e80e:	f04f 0901 	mov.w	r9, #1
 801e812:	4623      	mov	r3, r4
 801e814:	469a      	mov	sl, r3
 801e816:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e81a:	b10a      	cbz	r2, 801e820 <_svfiprintf_r+0x5c>
 801e81c:	2a25      	cmp	r2, #37	; 0x25
 801e81e:	d1f9      	bne.n	801e814 <_svfiprintf_r+0x50>
 801e820:	ebba 0b04 	subs.w	fp, sl, r4
 801e824:	d00b      	beq.n	801e83e <_svfiprintf_r+0x7a>
 801e826:	465b      	mov	r3, fp
 801e828:	4622      	mov	r2, r4
 801e82a:	4629      	mov	r1, r5
 801e82c:	4638      	mov	r0, r7
 801e82e:	f7ff ff6d 	bl	801e70c <__ssputs_r>
 801e832:	3001      	adds	r0, #1
 801e834:	f000 80aa 	beq.w	801e98c <_svfiprintf_r+0x1c8>
 801e838:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e83a:	445a      	add	r2, fp
 801e83c:	9209      	str	r2, [sp, #36]	; 0x24
 801e83e:	f89a 3000 	ldrb.w	r3, [sl]
 801e842:	2b00      	cmp	r3, #0
 801e844:	f000 80a2 	beq.w	801e98c <_svfiprintf_r+0x1c8>
 801e848:	2300      	movs	r3, #0
 801e84a:	f04f 32ff 	mov.w	r2, #4294967295
 801e84e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e852:	f10a 0a01 	add.w	sl, sl, #1
 801e856:	9304      	str	r3, [sp, #16]
 801e858:	9307      	str	r3, [sp, #28]
 801e85a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e85e:	931a      	str	r3, [sp, #104]	; 0x68
 801e860:	4654      	mov	r4, sl
 801e862:	2205      	movs	r2, #5
 801e864:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e868:	4851      	ldr	r0, [pc, #324]	; (801e9b0 <_svfiprintf_r+0x1ec>)
 801e86a:	f7e1 fd69 	bl	8000340 <memchr>
 801e86e:	9a04      	ldr	r2, [sp, #16]
 801e870:	b9d8      	cbnz	r0, 801e8aa <_svfiprintf_r+0xe6>
 801e872:	06d0      	lsls	r0, r2, #27
 801e874:	bf44      	itt	mi
 801e876:	2320      	movmi	r3, #32
 801e878:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e87c:	0711      	lsls	r1, r2, #28
 801e87e:	bf44      	itt	mi
 801e880:	232b      	movmi	r3, #43	; 0x2b
 801e882:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e886:	f89a 3000 	ldrb.w	r3, [sl]
 801e88a:	2b2a      	cmp	r3, #42	; 0x2a
 801e88c:	d015      	beq.n	801e8ba <_svfiprintf_r+0xf6>
 801e88e:	9a07      	ldr	r2, [sp, #28]
 801e890:	4654      	mov	r4, sl
 801e892:	2000      	movs	r0, #0
 801e894:	f04f 0c0a 	mov.w	ip, #10
 801e898:	4621      	mov	r1, r4
 801e89a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e89e:	3b30      	subs	r3, #48	; 0x30
 801e8a0:	2b09      	cmp	r3, #9
 801e8a2:	d94e      	bls.n	801e942 <_svfiprintf_r+0x17e>
 801e8a4:	b1b0      	cbz	r0, 801e8d4 <_svfiprintf_r+0x110>
 801e8a6:	9207      	str	r2, [sp, #28]
 801e8a8:	e014      	b.n	801e8d4 <_svfiprintf_r+0x110>
 801e8aa:	eba0 0308 	sub.w	r3, r0, r8
 801e8ae:	fa09 f303 	lsl.w	r3, r9, r3
 801e8b2:	4313      	orrs	r3, r2
 801e8b4:	9304      	str	r3, [sp, #16]
 801e8b6:	46a2      	mov	sl, r4
 801e8b8:	e7d2      	b.n	801e860 <_svfiprintf_r+0x9c>
 801e8ba:	9b03      	ldr	r3, [sp, #12]
 801e8bc:	1d19      	adds	r1, r3, #4
 801e8be:	681b      	ldr	r3, [r3, #0]
 801e8c0:	9103      	str	r1, [sp, #12]
 801e8c2:	2b00      	cmp	r3, #0
 801e8c4:	bfbb      	ittet	lt
 801e8c6:	425b      	neglt	r3, r3
 801e8c8:	f042 0202 	orrlt.w	r2, r2, #2
 801e8cc:	9307      	strge	r3, [sp, #28]
 801e8ce:	9307      	strlt	r3, [sp, #28]
 801e8d0:	bfb8      	it	lt
 801e8d2:	9204      	strlt	r2, [sp, #16]
 801e8d4:	7823      	ldrb	r3, [r4, #0]
 801e8d6:	2b2e      	cmp	r3, #46	; 0x2e
 801e8d8:	d10c      	bne.n	801e8f4 <_svfiprintf_r+0x130>
 801e8da:	7863      	ldrb	r3, [r4, #1]
 801e8dc:	2b2a      	cmp	r3, #42	; 0x2a
 801e8de:	d135      	bne.n	801e94c <_svfiprintf_r+0x188>
 801e8e0:	9b03      	ldr	r3, [sp, #12]
 801e8e2:	1d1a      	adds	r2, r3, #4
 801e8e4:	681b      	ldr	r3, [r3, #0]
 801e8e6:	9203      	str	r2, [sp, #12]
 801e8e8:	2b00      	cmp	r3, #0
 801e8ea:	bfb8      	it	lt
 801e8ec:	f04f 33ff 	movlt.w	r3, #4294967295
 801e8f0:	3402      	adds	r4, #2
 801e8f2:	9305      	str	r3, [sp, #20]
 801e8f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801e9c0 <_svfiprintf_r+0x1fc>
 801e8f8:	7821      	ldrb	r1, [r4, #0]
 801e8fa:	2203      	movs	r2, #3
 801e8fc:	4650      	mov	r0, sl
 801e8fe:	f7e1 fd1f 	bl	8000340 <memchr>
 801e902:	b140      	cbz	r0, 801e916 <_svfiprintf_r+0x152>
 801e904:	2340      	movs	r3, #64	; 0x40
 801e906:	eba0 000a 	sub.w	r0, r0, sl
 801e90a:	fa03 f000 	lsl.w	r0, r3, r0
 801e90e:	9b04      	ldr	r3, [sp, #16]
 801e910:	4303      	orrs	r3, r0
 801e912:	3401      	adds	r4, #1
 801e914:	9304      	str	r3, [sp, #16]
 801e916:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e91a:	4826      	ldr	r0, [pc, #152]	; (801e9b4 <_svfiprintf_r+0x1f0>)
 801e91c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e920:	2206      	movs	r2, #6
 801e922:	f7e1 fd0d 	bl	8000340 <memchr>
 801e926:	2800      	cmp	r0, #0
 801e928:	d038      	beq.n	801e99c <_svfiprintf_r+0x1d8>
 801e92a:	4b23      	ldr	r3, [pc, #140]	; (801e9b8 <_svfiprintf_r+0x1f4>)
 801e92c:	bb1b      	cbnz	r3, 801e976 <_svfiprintf_r+0x1b2>
 801e92e:	9b03      	ldr	r3, [sp, #12]
 801e930:	3307      	adds	r3, #7
 801e932:	f023 0307 	bic.w	r3, r3, #7
 801e936:	3308      	adds	r3, #8
 801e938:	9303      	str	r3, [sp, #12]
 801e93a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e93c:	4433      	add	r3, r6
 801e93e:	9309      	str	r3, [sp, #36]	; 0x24
 801e940:	e767      	b.n	801e812 <_svfiprintf_r+0x4e>
 801e942:	fb0c 3202 	mla	r2, ip, r2, r3
 801e946:	460c      	mov	r4, r1
 801e948:	2001      	movs	r0, #1
 801e94a:	e7a5      	b.n	801e898 <_svfiprintf_r+0xd4>
 801e94c:	2300      	movs	r3, #0
 801e94e:	3401      	adds	r4, #1
 801e950:	9305      	str	r3, [sp, #20]
 801e952:	4619      	mov	r1, r3
 801e954:	f04f 0c0a 	mov.w	ip, #10
 801e958:	4620      	mov	r0, r4
 801e95a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e95e:	3a30      	subs	r2, #48	; 0x30
 801e960:	2a09      	cmp	r2, #9
 801e962:	d903      	bls.n	801e96c <_svfiprintf_r+0x1a8>
 801e964:	2b00      	cmp	r3, #0
 801e966:	d0c5      	beq.n	801e8f4 <_svfiprintf_r+0x130>
 801e968:	9105      	str	r1, [sp, #20]
 801e96a:	e7c3      	b.n	801e8f4 <_svfiprintf_r+0x130>
 801e96c:	fb0c 2101 	mla	r1, ip, r1, r2
 801e970:	4604      	mov	r4, r0
 801e972:	2301      	movs	r3, #1
 801e974:	e7f0      	b.n	801e958 <_svfiprintf_r+0x194>
 801e976:	ab03      	add	r3, sp, #12
 801e978:	9300      	str	r3, [sp, #0]
 801e97a:	462a      	mov	r2, r5
 801e97c:	4b0f      	ldr	r3, [pc, #60]	; (801e9bc <_svfiprintf_r+0x1f8>)
 801e97e:	a904      	add	r1, sp, #16
 801e980:	4638      	mov	r0, r7
 801e982:	f7fc facd 	bl	801af20 <_printf_float>
 801e986:	1c42      	adds	r2, r0, #1
 801e988:	4606      	mov	r6, r0
 801e98a:	d1d6      	bne.n	801e93a <_svfiprintf_r+0x176>
 801e98c:	89ab      	ldrh	r3, [r5, #12]
 801e98e:	065b      	lsls	r3, r3, #25
 801e990:	f53f af2c 	bmi.w	801e7ec <_svfiprintf_r+0x28>
 801e994:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e996:	b01d      	add	sp, #116	; 0x74
 801e998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e99c:	ab03      	add	r3, sp, #12
 801e99e:	9300      	str	r3, [sp, #0]
 801e9a0:	462a      	mov	r2, r5
 801e9a2:	4b06      	ldr	r3, [pc, #24]	; (801e9bc <_svfiprintf_r+0x1f8>)
 801e9a4:	a904      	add	r1, sp, #16
 801e9a6:	4638      	mov	r0, r7
 801e9a8:	f7fc fd46 	bl	801b438 <_printf_i>
 801e9ac:	e7eb      	b.n	801e986 <_svfiprintf_r+0x1c2>
 801e9ae:	bf00      	nop
 801e9b0:	0802003c 	.word	0x0802003c
 801e9b4:	08020046 	.word	0x08020046
 801e9b8:	0801af21 	.word	0x0801af21
 801e9bc:	0801e70d 	.word	0x0801e70d
 801e9c0:	08020042 	.word	0x08020042

0801e9c4 <_read_r>:
 801e9c4:	b538      	push	{r3, r4, r5, lr}
 801e9c6:	4d07      	ldr	r5, [pc, #28]	; (801e9e4 <_read_r+0x20>)
 801e9c8:	4604      	mov	r4, r0
 801e9ca:	4608      	mov	r0, r1
 801e9cc:	4611      	mov	r1, r2
 801e9ce:	2200      	movs	r2, #0
 801e9d0:	602a      	str	r2, [r5, #0]
 801e9d2:	461a      	mov	r2, r3
 801e9d4:	f7e5 f952 	bl	8003c7c <_read>
 801e9d8:	1c43      	adds	r3, r0, #1
 801e9da:	d102      	bne.n	801e9e2 <_read_r+0x1e>
 801e9dc:	682b      	ldr	r3, [r5, #0]
 801e9de:	b103      	cbz	r3, 801e9e2 <_read_r+0x1e>
 801e9e0:	6023      	str	r3, [r4, #0]
 801e9e2:	bd38      	pop	{r3, r4, r5, pc}
 801e9e4:	240034f8 	.word	0x240034f8

0801e9e8 <nan>:
 801e9e8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801e9f0 <nan+0x8>
 801e9ec:	4770      	bx	lr
 801e9ee:	bf00      	nop
 801e9f0:	00000000 	.word	0x00000000
 801e9f4:	7ff80000 	.word	0x7ff80000

0801e9f8 <_sbrk_r>:
 801e9f8:	b538      	push	{r3, r4, r5, lr}
 801e9fa:	4d06      	ldr	r5, [pc, #24]	; (801ea14 <_sbrk_r+0x1c>)
 801e9fc:	2300      	movs	r3, #0
 801e9fe:	4604      	mov	r4, r0
 801ea00:	4608      	mov	r0, r1
 801ea02:	602b      	str	r3, [r5, #0]
 801ea04:	f7e5 f9a8 	bl	8003d58 <_sbrk>
 801ea08:	1c43      	adds	r3, r0, #1
 801ea0a:	d102      	bne.n	801ea12 <_sbrk_r+0x1a>
 801ea0c:	682b      	ldr	r3, [r5, #0]
 801ea0e:	b103      	cbz	r3, 801ea12 <_sbrk_r+0x1a>
 801ea10:	6023      	str	r3, [r4, #0]
 801ea12:	bd38      	pop	{r3, r4, r5, pc}
 801ea14:	240034f8 	.word	0x240034f8

0801ea18 <strncmp>:
 801ea18:	b510      	push	{r4, lr}
 801ea1a:	b17a      	cbz	r2, 801ea3c <strncmp+0x24>
 801ea1c:	4603      	mov	r3, r0
 801ea1e:	3901      	subs	r1, #1
 801ea20:	1884      	adds	r4, r0, r2
 801ea22:	f813 0b01 	ldrb.w	r0, [r3], #1
 801ea26:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801ea2a:	4290      	cmp	r0, r2
 801ea2c:	d101      	bne.n	801ea32 <strncmp+0x1a>
 801ea2e:	42a3      	cmp	r3, r4
 801ea30:	d101      	bne.n	801ea36 <strncmp+0x1e>
 801ea32:	1a80      	subs	r0, r0, r2
 801ea34:	bd10      	pop	{r4, pc}
 801ea36:	2800      	cmp	r0, #0
 801ea38:	d1f3      	bne.n	801ea22 <strncmp+0xa>
 801ea3a:	e7fa      	b.n	801ea32 <strncmp+0x1a>
 801ea3c:	4610      	mov	r0, r2
 801ea3e:	e7f9      	b.n	801ea34 <strncmp+0x1c>

0801ea40 <__ascii_wctomb>:
 801ea40:	b149      	cbz	r1, 801ea56 <__ascii_wctomb+0x16>
 801ea42:	2aff      	cmp	r2, #255	; 0xff
 801ea44:	bf85      	ittet	hi
 801ea46:	238a      	movhi	r3, #138	; 0x8a
 801ea48:	6003      	strhi	r3, [r0, #0]
 801ea4a:	700a      	strbls	r2, [r1, #0]
 801ea4c:	f04f 30ff 	movhi.w	r0, #4294967295
 801ea50:	bf98      	it	ls
 801ea52:	2001      	movls	r0, #1
 801ea54:	4770      	bx	lr
 801ea56:	4608      	mov	r0, r1
 801ea58:	4770      	bx	lr
	...

0801ea5c <__assert_func>:
 801ea5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ea5e:	4614      	mov	r4, r2
 801ea60:	461a      	mov	r2, r3
 801ea62:	4b09      	ldr	r3, [pc, #36]	; (801ea88 <__assert_func+0x2c>)
 801ea64:	681b      	ldr	r3, [r3, #0]
 801ea66:	4605      	mov	r5, r0
 801ea68:	68d8      	ldr	r0, [r3, #12]
 801ea6a:	b14c      	cbz	r4, 801ea80 <__assert_func+0x24>
 801ea6c:	4b07      	ldr	r3, [pc, #28]	; (801ea8c <__assert_func+0x30>)
 801ea6e:	9100      	str	r1, [sp, #0]
 801ea70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ea74:	4906      	ldr	r1, [pc, #24]	; (801ea90 <__assert_func+0x34>)
 801ea76:	462b      	mov	r3, r5
 801ea78:	f000 f9a6 	bl	801edc8 <fiprintf>
 801ea7c:	f000 fc46 	bl	801f30c <abort>
 801ea80:	4b04      	ldr	r3, [pc, #16]	; (801ea94 <__assert_func+0x38>)
 801ea82:	461c      	mov	r4, r3
 801ea84:	e7f3      	b.n	801ea6e <__assert_func+0x12>
 801ea86:	bf00      	nop
 801ea88:	24000100 	.word	0x24000100
 801ea8c:	0802004d 	.word	0x0802004d
 801ea90:	0802005a 	.word	0x0802005a
 801ea94:	08020088 	.word	0x08020088

0801ea98 <__sflush_r>:
 801ea98:	898a      	ldrh	r2, [r1, #12]
 801ea9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ea9e:	4605      	mov	r5, r0
 801eaa0:	0710      	lsls	r0, r2, #28
 801eaa2:	460c      	mov	r4, r1
 801eaa4:	d458      	bmi.n	801eb58 <__sflush_r+0xc0>
 801eaa6:	684b      	ldr	r3, [r1, #4]
 801eaa8:	2b00      	cmp	r3, #0
 801eaaa:	dc05      	bgt.n	801eab8 <__sflush_r+0x20>
 801eaac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801eaae:	2b00      	cmp	r3, #0
 801eab0:	dc02      	bgt.n	801eab8 <__sflush_r+0x20>
 801eab2:	2000      	movs	r0, #0
 801eab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801eab8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801eaba:	2e00      	cmp	r6, #0
 801eabc:	d0f9      	beq.n	801eab2 <__sflush_r+0x1a>
 801eabe:	2300      	movs	r3, #0
 801eac0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801eac4:	682f      	ldr	r7, [r5, #0]
 801eac6:	602b      	str	r3, [r5, #0]
 801eac8:	d032      	beq.n	801eb30 <__sflush_r+0x98>
 801eaca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801eacc:	89a3      	ldrh	r3, [r4, #12]
 801eace:	075a      	lsls	r2, r3, #29
 801ead0:	d505      	bpl.n	801eade <__sflush_r+0x46>
 801ead2:	6863      	ldr	r3, [r4, #4]
 801ead4:	1ac0      	subs	r0, r0, r3
 801ead6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ead8:	b10b      	cbz	r3, 801eade <__sflush_r+0x46>
 801eada:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801eadc:	1ac0      	subs	r0, r0, r3
 801eade:	2300      	movs	r3, #0
 801eae0:	4602      	mov	r2, r0
 801eae2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801eae4:	6a21      	ldr	r1, [r4, #32]
 801eae6:	4628      	mov	r0, r5
 801eae8:	47b0      	blx	r6
 801eaea:	1c43      	adds	r3, r0, #1
 801eaec:	89a3      	ldrh	r3, [r4, #12]
 801eaee:	d106      	bne.n	801eafe <__sflush_r+0x66>
 801eaf0:	6829      	ldr	r1, [r5, #0]
 801eaf2:	291d      	cmp	r1, #29
 801eaf4:	d82c      	bhi.n	801eb50 <__sflush_r+0xb8>
 801eaf6:	4a2a      	ldr	r2, [pc, #168]	; (801eba0 <__sflush_r+0x108>)
 801eaf8:	40ca      	lsrs	r2, r1
 801eafa:	07d6      	lsls	r6, r2, #31
 801eafc:	d528      	bpl.n	801eb50 <__sflush_r+0xb8>
 801eafe:	2200      	movs	r2, #0
 801eb00:	6062      	str	r2, [r4, #4]
 801eb02:	04d9      	lsls	r1, r3, #19
 801eb04:	6922      	ldr	r2, [r4, #16]
 801eb06:	6022      	str	r2, [r4, #0]
 801eb08:	d504      	bpl.n	801eb14 <__sflush_r+0x7c>
 801eb0a:	1c42      	adds	r2, r0, #1
 801eb0c:	d101      	bne.n	801eb12 <__sflush_r+0x7a>
 801eb0e:	682b      	ldr	r3, [r5, #0]
 801eb10:	b903      	cbnz	r3, 801eb14 <__sflush_r+0x7c>
 801eb12:	6560      	str	r0, [r4, #84]	; 0x54
 801eb14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801eb16:	602f      	str	r7, [r5, #0]
 801eb18:	2900      	cmp	r1, #0
 801eb1a:	d0ca      	beq.n	801eab2 <__sflush_r+0x1a>
 801eb1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801eb20:	4299      	cmp	r1, r3
 801eb22:	d002      	beq.n	801eb2a <__sflush_r+0x92>
 801eb24:	4628      	mov	r0, r5
 801eb26:	f7ff fd11 	bl	801e54c <_free_r>
 801eb2a:	2000      	movs	r0, #0
 801eb2c:	6360      	str	r0, [r4, #52]	; 0x34
 801eb2e:	e7c1      	b.n	801eab4 <__sflush_r+0x1c>
 801eb30:	6a21      	ldr	r1, [r4, #32]
 801eb32:	2301      	movs	r3, #1
 801eb34:	4628      	mov	r0, r5
 801eb36:	47b0      	blx	r6
 801eb38:	1c41      	adds	r1, r0, #1
 801eb3a:	d1c7      	bne.n	801eacc <__sflush_r+0x34>
 801eb3c:	682b      	ldr	r3, [r5, #0]
 801eb3e:	2b00      	cmp	r3, #0
 801eb40:	d0c4      	beq.n	801eacc <__sflush_r+0x34>
 801eb42:	2b1d      	cmp	r3, #29
 801eb44:	d001      	beq.n	801eb4a <__sflush_r+0xb2>
 801eb46:	2b16      	cmp	r3, #22
 801eb48:	d101      	bne.n	801eb4e <__sflush_r+0xb6>
 801eb4a:	602f      	str	r7, [r5, #0]
 801eb4c:	e7b1      	b.n	801eab2 <__sflush_r+0x1a>
 801eb4e:	89a3      	ldrh	r3, [r4, #12]
 801eb50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801eb54:	81a3      	strh	r3, [r4, #12]
 801eb56:	e7ad      	b.n	801eab4 <__sflush_r+0x1c>
 801eb58:	690f      	ldr	r7, [r1, #16]
 801eb5a:	2f00      	cmp	r7, #0
 801eb5c:	d0a9      	beq.n	801eab2 <__sflush_r+0x1a>
 801eb5e:	0793      	lsls	r3, r2, #30
 801eb60:	680e      	ldr	r6, [r1, #0]
 801eb62:	bf08      	it	eq
 801eb64:	694b      	ldreq	r3, [r1, #20]
 801eb66:	600f      	str	r7, [r1, #0]
 801eb68:	bf18      	it	ne
 801eb6a:	2300      	movne	r3, #0
 801eb6c:	eba6 0807 	sub.w	r8, r6, r7
 801eb70:	608b      	str	r3, [r1, #8]
 801eb72:	f1b8 0f00 	cmp.w	r8, #0
 801eb76:	dd9c      	ble.n	801eab2 <__sflush_r+0x1a>
 801eb78:	6a21      	ldr	r1, [r4, #32]
 801eb7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801eb7c:	4643      	mov	r3, r8
 801eb7e:	463a      	mov	r2, r7
 801eb80:	4628      	mov	r0, r5
 801eb82:	47b0      	blx	r6
 801eb84:	2800      	cmp	r0, #0
 801eb86:	dc06      	bgt.n	801eb96 <__sflush_r+0xfe>
 801eb88:	89a3      	ldrh	r3, [r4, #12]
 801eb8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801eb8e:	81a3      	strh	r3, [r4, #12]
 801eb90:	f04f 30ff 	mov.w	r0, #4294967295
 801eb94:	e78e      	b.n	801eab4 <__sflush_r+0x1c>
 801eb96:	4407      	add	r7, r0
 801eb98:	eba8 0800 	sub.w	r8, r8, r0
 801eb9c:	e7e9      	b.n	801eb72 <__sflush_r+0xda>
 801eb9e:	bf00      	nop
 801eba0:	20400001 	.word	0x20400001

0801eba4 <_fflush_r>:
 801eba4:	b538      	push	{r3, r4, r5, lr}
 801eba6:	690b      	ldr	r3, [r1, #16]
 801eba8:	4605      	mov	r5, r0
 801ebaa:	460c      	mov	r4, r1
 801ebac:	b913      	cbnz	r3, 801ebb4 <_fflush_r+0x10>
 801ebae:	2500      	movs	r5, #0
 801ebb0:	4628      	mov	r0, r5
 801ebb2:	bd38      	pop	{r3, r4, r5, pc}
 801ebb4:	b118      	cbz	r0, 801ebbe <_fflush_r+0x1a>
 801ebb6:	6983      	ldr	r3, [r0, #24]
 801ebb8:	b90b      	cbnz	r3, 801ebbe <_fflush_r+0x1a>
 801ebba:	f000 f887 	bl	801eccc <__sinit>
 801ebbe:	4b14      	ldr	r3, [pc, #80]	; (801ec10 <_fflush_r+0x6c>)
 801ebc0:	429c      	cmp	r4, r3
 801ebc2:	d11b      	bne.n	801ebfc <_fflush_r+0x58>
 801ebc4:	686c      	ldr	r4, [r5, #4]
 801ebc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ebca:	2b00      	cmp	r3, #0
 801ebcc:	d0ef      	beq.n	801ebae <_fflush_r+0xa>
 801ebce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801ebd0:	07d0      	lsls	r0, r2, #31
 801ebd2:	d404      	bmi.n	801ebde <_fflush_r+0x3a>
 801ebd4:	0599      	lsls	r1, r3, #22
 801ebd6:	d402      	bmi.n	801ebde <_fflush_r+0x3a>
 801ebd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ebda:	f000 f927 	bl	801ee2c <__retarget_lock_acquire_recursive>
 801ebde:	4628      	mov	r0, r5
 801ebe0:	4621      	mov	r1, r4
 801ebe2:	f7ff ff59 	bl	801ea98 <__sflush_r>
 801ebe6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ebe8:	07da      	lsls	r2, r3, #31
 801ebea:	4605      	mov	r5, r0
 801ebec:	d4e0      	bmi.n	801ebb0 <_fflush_r+0xc>
 801ebee:	89a3      	ldrh	r3, [r4, #12]
 801ebf0:	059b      	lsls	r3, r3, #22
 801ebf2:	d4dd      	bmi.n	801ebb0 <_fflush_r+0xc>
 801ebf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ebf6:	f000 f91a 	bl	801ee2e <__retarget_lock_release_recursive>
 801ebfa:	e7d9      	b.n	801ebb0 <_fflush_r+0xc>
 801ebfc:	4b05      	ldr	r3, [pc, #20]	; (801ec14 <_fflush_r+0x70>)
 801ebfe:	429c      	cmp	r4, r3
 801ec00:	d101      	bne.n	801ec06 <_fflush_r+0x62>
 801ec02:	68ac      	ldr	r4, [r5, #8]
 801ec04:	e7df      	b.n	801ebc6 <_fflush_r+0x22>
 801ec06:	4b04      	ldr	r3, [pc, #16]	; (801ec18 <_fflush_r+0x74>)
 801ec08:	429c      	cmp	r4, r3
 801ec0a:	bf08      	it	eq
 801ec0c:	68ec      	ldreq	r4, [r5, #12]
 801ec0e:	e7da      	b.n	801ebc6 <_fflush_r+0x22>
 801ec10:	080200ac 	.word	0x080200ac
 801ec14:	080200cc 	.word	0x080200cc
 801ec18:	0802008c 	.word	0x0802008c

0801ec1c <std>:
 801ec1c:	2300      	movs	r3, #0
 801ec1e:	b510      	push	{r4, lr}
 801ec20:	4604      	mov	r4, r0
 801ec22:	e9c0 3300 	strd	r3, r3, [r0]
 801ec26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ec2a:	6083      	str	r3, [r0, #8]
 801ec2c:	8181      	strh	r1, [r0, #12]
 801ec2e:	6643      	str	r3, [r0, #100]	; 0x64
 801ec30:	81c2      	strh	r2, [r0, #14]
 801ec32:	6183      	str	r3, [r0, #24]
 801ec34:	4619      	mov	r1, r3
 801ec36:	2208      	movs	r2, #8
 801ec38:	305c      	adds	r0, #92	; 0x5c
 801ec3a:	f7fc f8d7 	bl	801adec <memset>
 801ec3e:	4b05      	ldr	r3, [pc, #20]	; (801ec54 <std+0x38>)
 801ec40:	6263      	str	r3, [r4, #36]	; 0x24
 801ec42:	4b05      	ldr	r3, [pc, #20]	; (801ec58 <std+0x3c>)
 801ec44:	62a3      	str	r3, [r4, #40]	; 0x28
 801ec46:	4b05      	ldr	r3, [pc, #20]	; (801ec5c <std+0x40>)
 801ec48:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ec4a:	4b05      	ldr	r3, [pc, #20]	; (801ec60 <std+0x44>)
 801ec4c:	6224      	str	r4, [r4, #32]
 801ec4e:	6323      	str	r3, [r4, #48]	; 0x30
 801ec50:	bd10      	pop	{r4, pc}
 801ec52:	bf00      	nop
 801ec54:	0801badd 	.word	0x0801badd
 801ec58:	0801baff 	.word	0x0801baff
 801ec5c:	0801bb37 	.word	0x0801bb37
 801ec60:	0801bb5b 	.word	0x0801bb5b

0801ec64 <_cleanup_r>:
 801ec64:	4901      	ldr	r1, [pc, #4]	; (801ec6c <_cleanup_r+0x8>)
 801ec66:	f000 b8c1 	b.w	801edec <_fwalk_reent>
 801ec6a:	bf00      	nop
 801ec6c:	0801eba5 	.word	0x0801eba5

0801ec70 <__sfmoreglue>:
 801ec70:	b570      	push	{r4, r5, r6, lr}
 801ec72:	2268      	movs	r2, #104	; 0x68
 801ec74:	1e4d      	subs	r5, r1, #1
 801ec76:	4355      	muls	r5, r2
 801ec78:	460e      	mov	r6, r1
 801ec7a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801ec7e:	f7ff fcd1 	bl	801e624 <_malloc_r>
 801ec82:	4604      	mov	r4, r0
 801ec84:	b140      	cbz	r0, 801ec98 <__sfmoreglue+0x28>
 801ec86:	2100      	movs	r1, #0
 801ec88:	e9c0 1600 	strd	r1, r6, [r0]
 801ec8c:	300c      	adds	r0, #12
 801ec8e:	60a0      	str	r0, [r4, #8]
 801ec90:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801ec94:	f7fc f8aa 	bl	801adec <memset>
 801ec98:	4620      	mov	r0, r4
 801ec9a:	bd70      	pop	{r4, r5, r6, pc}

0801ec9c <__sfp_lock_acquire>:
 801ec9c:	4801      	ldr	r0, [pc, #4]	; (801eca4 <__sfp_lock_acquire+0x8>)
 801ec9e:	f000 b8c5 	b.w	801ee2c <__retarget_lock_acquire_recursive>
 801eca2:	bf00      	nop
 801eca4:	240034fd 	.word	0x240034fd

0801eca8 <__sfp_lock_release>:
 801eca8:	4801      	ldr	r0, [pc, #4]	; (801ecb0 <__sfp_lock_release+0x8>)
 801ecaa:	f000 b8c0 	b.w	801ee2e <__retarget_lock_release_recursive>
 801ecae:	bf00      	nop
 801ecb0:	240034fd 	.word	0x240034fd

0801ecb4 <__sinit_lock_acquire>:
 801ecb4:	4801      	ldr	r0, [pc, #4]	; (801ecbc <__sinit_lock_acquire+0x8>)
 801ecb6:	f000 b8b9 	b.w	801ee2c <__retarget_lock_acquire_recursive>
 801ecba:	bf00      	nop
 801ecbc:	240034fe 	.word	0x240034fe

0801ecc0 <__sinit_lock_release>:
 801ecc0:	4801      	ldr	r0, [pc, #4]	; (801ecc8 <__sinit_lock_release+0x8>)
 801ecc2:	f000 b8b4 	b.w	801ee2e <__retarget_lock_release_recursive>
 801ecc6:	bf00      	nop
 801ecc8:	240034fe 	.word	0x240034fe

0801eccc <__sinit>:
 801eccc:	b510      	push	{r4, lr}
 801ecce:	4604      	mov	r4, r0
 801ecd0:	f7ff fff0 	bl	801ecb4 <__sinit_lock_acquire>
 801ecd4:	69a3      	ldr	r3, [r4, #24]
 801ecd6:	b11b      	cbz	r3, 801ece0 <__sinit+0x14>
 801ecd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ecdc:	f7ff bff0 	b.w	801ecc0 <__sinit_lock_release>
 801ece0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801ece4:	6523      	str	r3, [r4, #80]	; 0x50
 801ece6:	4b13      	ldr	r3, [pc, #76]	; (801ed34 <__sinit+0x68>)
 801ece8:	4a13      	ldr	r2, [pc, #76]	; (801ed38 <__sinit+0x6c>)
 801ecea:	681b      	ldr	r3, [r3, #0]
 801ecec:	62a2      	str	r2, [r4, #40]	; 0x28
 801ecee:	42a3      	cmp	r3, r4
 801ecf0:	bf04      	itt	eq
 801ecf2:	2301      	moveq	r3, #1
 801ecf4:	61a3      	streq	r3, [r4, #24]
 801ecf6:	4620      	mov	r0, r4
 801ecf8:	f000 f820 	bl	801ed3c <__sfp>
 801ecfc:	6060      	str	r0, [r4, #4]
 801ecfe:	4620      	mov	r0, r4
 801ed00:	f000 f81c 	bl	801ed3c <__sfp>
 801ed04:	60a0      	str	r0, [r4, #8]
 801ed06:	4620      	mov	r0, r4
 801ed08:	f000 f818 	bl	801ed3c <__sfp>
 801ed0c:	2200      	movs	r2, #0
 801ed0e:	60e0      	str	r0, [r4, #12]
 801ed10:	2104      	movs	r1, #4
 801ed12:	6860      	ldr	r0, [r4, #4]
 801ed14:	f7ff ff82 	bl	801ec1c <std>
 801ed18:	68a0      	ldr	r0, [r4, #8]
 801ed1a:	2201      	movs	r2, #1
 801ed1c:	2109      	movs	r1, #9
 801ed1e:	f7ff ff7d 	bl	801ec1c <std>
 801ed22:	68e0      	ldr	r0, [r4, #12]
 801ed24:	2202      	movs	r2, #2
 801ed26:	2112      	movs	r1, #18
 801ed28:	f7ff ff78 	bl	801ec1c <std>
 801ed2c:	2301      	movs	r3, #1
 801ed2e:	61a3      	str	r3, [r4, #24]
 801ed30:	e7d2      	b.n	801ecd8 <__sinit+0xc>
 801ed32:	bf00      	nop
 801ed34:	0801fc44 	.word	0x0801fc44
 801ed38:	0801ec65 	.word	0x0801ec65

0801ed3c <__sfp>:
 801ed3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ed3e:	4607      	mov	r7, r0
 801ed40:	f7ff ffac 	bl	801ec9c <__sfp_lock_acquire>
 801ed44:	4b1e      	ldr	r3, [pc, #120]	; (801edc0 <__sfp+0x84>)
 801ed46:	681e      	ldr	r6, [r3, #0]
 801ed48:	69b3      	ldr	r3, [r6, #24]
 801ed4a:	b913      	cbnz	r3, 801ed52 <__sfp+0x16>
 801ed4c:	4630      	mov	r0, r6
 801ed4e:	f7ff ffbd 	bl	801eccc <__sinit>
 801ed52:	3648      	adds	r6, #72	; 0x48
 801ed54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801ed58:	3b01      	subs	r3, #1
 801ed5a:	d503      	bpl.n	801ed64 <__sfp+0x28>
 801ed5c:	6833      	ldr	r3, [r6, #0]
 801ed5e:	b30b      	cbz	r3, 801eda4 <__sfp+0x68>
 801ed60:	6836      	ldr	r6, [r6, #0]
 801ed62:	e7f7      	b.n	801ed54 <__sfp+0x18>
 801ed64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801ed68:	b9d5      	cbnz	r5, 801eda0 <__sfp+0x64>
 801ed6a:	4b16      	ldr	r3, [pc, #88]	; (801edc4 <__sfp+0x88>)
 801ed6c:	60e3      	str	r3, [r4, #12]
 801ed6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801ed72:	6665      	str	r5, [r4, #100]	; 0x64
 801ed74:	f000 f859 	bl	801ee2a <__retarget_lock_init_recursive>
 801ed78:	f7ff ff96 	bl	801eca8 <__sfp_lock_release>
 801ed7c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801ed80:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801ed84:	6025      	str	r5, [r4, #0]
 801ed86:	61a5      	str	r5, [r4, #24]
 801ed88:	2208      	movs	r2, #8
 801ed8a:	4629      	mov	r1, r5
 801ed8c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801ed90:	f7fc f82c 	bl	801adec <memset>
 801ed94:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801ed98:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801ed9c:	4620      	mov	r0, r4
 801ed9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801eda0:	3468      	adds	r4, #104	; 0x68
 801eda2:	e7d9      	b.n	801ed58 <__sfp+0x1c>
 801eda4:	2104      	movs	r1, #4
 801eda6:	4638      	mov	r0, r7
 801eda8:	f7ff ff62 	bl	801ec70 <__sfmoreglue>
 801edac:	4604      	mov	r4, r0
 801edae:	6030      	str	r0, [r6, #0]
 801edb0:	2800      	cmp	r0, #0
 801edb2:	d1d5      	bne.n	801ed60 <__sfp+0x24>
 801edb4:	f7ff ff78 	bl	801eca8 <__sfp_lock_release>
 801edb8:	230c      	movs	r3, #12
 801edba:	603b      	str	r3, [r7, #0]
 801edbc:	e7ee      	b.n	801ed9c <__sfp+0x60>
 801edbe:	bf00      	nop
 801edc0:	0801fc44 	.word	0x0801fc44
 801edc4:	ffff0001 	.word	0xffff0001

0801edc8 <fiprintf>:
 801edc8:	b40e      	push	{r1, r2, r3}
 801edca:	b503      	push	{r0, r1, lr}
 801edcc:	4601      	mov	r1, r0
 801edce:	ab03      	add	r3, sp, #12
 801edd0:	4805      	ldr	r0, [pc, #20]	; (801ede8 <fiprintf+0x20>)
 801edd2:	f853 2b04 	ldr.w	r2, [r3], #4
 801edd6:	6800      	ldr	r0, [r0, #0]
 801edd8:	9301      	str	r3, [sp, #4]
 801edda:	f000 f8a7 	bl	801ef2c <_vfiprintf_r>
 801edde:	b002      	add	sp, #8
 801ede0:	f85d eb04 	ldr.w	lr, [sp], #4
 801ede4:	b003      	add	sp, #12
 801ede6:	4770      	bx	lr
 801ede8:	24000100 	.word	0x24000100

0801edec <_fwalk_reent>:
 801edec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801edf0:	4606      	mov	r6, r0
 801edf2:	4688      	mov	r8, r1
 801edf4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801edf8:	2700      	movs	r7, #0
 801edfa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801edfe:	f1b9 0901 	subs.w	r9, r9, #1
 801ee02:	d505      	bpl.n	801ee10 <_fwalk_reent+0x24>
 801ee04:	6824      	ldr	r4, [r4, #0]
 801ee06:	2c00      	cmp	r4, #0
 801ee08:	d1f7      	bne.n	801edfa <_fwalk_reent+0xe>
 801ee0a:	4638      	mov	r0, r7
 801ee0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ee10:	89ab      	ldrh	r3, [r5, #12]
 801ee12:	2b01      	cmp	r3, #1
 801ee14:	d907      	bls.n	801ee26 <_fwalk_reent+0x3a>
 801ee16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ee1a:	3301      	adds	r3, #1
 801ee1c:	d003      	beq.n	801ee26 <_fwalk_reent+0x3a>
 801ee1e:	4629      	mov	r1, r5
 801ee20:	4630      	mov	r0, r6
 801ee22:	47c0      	blx	r8
 801ee24:	4307      	orrs	r7, r0
 801ee26:	3568      	adds	r5, #104	; 0x68
 801ee28:	e7e9      	b.n	801edfe <_fwalk_reent+0x12>

0801ee2a <__retarget_lock_init_recursive>:
 801ee2a:	4770      	bx	lr

0801ee2c <__retarget_lock_acquire_recursive>:
 801ee2c:	4770      	bx	lr

0801ee2e <__retarget_lock_release_recursive>:
 801ee2e:	4770      	bx	lr

0801ee30 <memmove>:
 801ee30:	4288      	cmp	r0, r1
 801ee32:	b510      	push	{r4, lr}
 801ee34:	eb01 0402 	add.w	r4, r1, r2
 801ee38:	d902      	bls.n	801ee40 <memmove+0x10>
 801ee3a:	4284      	cmp	r4, r0
 801ee3c:	4623      	mov	r3, r4
 801ee3e:	d807      	bhi.n	801ee50 <memmove+0x20>
 801ee40:	1e43      	subs	r3, r0, #1
 801ee42:	42a1      	cmp	r1, r4
 801ee44:	d008      	beq.n	801ee58 <memmove+0x28>
 801ee46:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ee4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ee4e:	e7f8      	b.n	801ee42 <memmove+0x12>
 801ee50:	4402      	add	r2, r0
 801ee52:	4601      	mov	r1, r0
 801ee54:	428a      	cmp	r2, r1
 801ee56:	d100      	bne.n	801ee5a <memmove+0x2a>
 801ee58:	bd10      	pop	{r4, pc}
 801ee5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ee5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ee62:	e7f7      	b.n	801ee54 <memmove+0x24>

0801ee64 <__malloc_lock>:
 801ee64:	4801      	ldr	r0, [pc, #4]	; (801ee6c <__malloc_lock+0x8>)
 801ee66:	f7ff bfe1 	b.w	801ee2c <__retarget_lock_acquire_recursive>
 801ee6a:	bf00      	nop
 801ee6c:	240034fc 	.word	0x240034fc

0801ee70 <__malloc_unlock>:
 801ee70:	4801      	ldr	r0, [pc, #4]	; (801ee78 <__malloc_unlock+0x8>)
 801ee72:	f7ff bfdc 	b.w	801ee2e <__retarget_lock_release_recursive>
 801ee76:	bf00      	nop
 801ee78:	240034fc 	.word	0x240034fc

0801ee7c <_realloc_r>:
 801ee7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ee80:	4680      	mov	r8, r0
 801ee82:	4614      	mov	r4, r2
 801ee84:	460e      	mov	r6, r1
 801ee86:	b921      	cbnz	r1, 801ee92 <_realloc_r+0x16>
 801ee88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ee8c:	4611      	mov	r1, r2
 801ee8e:	f7ff bbc9 	b.w	801e624 <_malloc_r>
 801ee92:	b92a      	cbnz	r2, 801eea0 <_realloc_r+0x24>
 801ee94:	f7ff fb5a 	bl	801e54c <_free_r>
 801ee98:	4625      	mov	r5, r4
 801ee9a:	4628      	mov	r0, r5
 801ee9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801eea0:	f000 faa0 	bl	801f3e4 <_malloc_usable_size_r>
 801eea4:	4284      	cmp	r4, r0
 801eea6:	4607      	mov	r7, r0
 801eea8:	d802      	bhi.n	801eeb0 <_realloc_r+0x34>
 801eeaa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801eeae:	d812      	bhi.n	801eed6 <_realloc_r+0x5a>
 801eeb0:	4621      	mov	r1, r4
 801eeb2:	4640      	mov	r0, r8
 801eeb4:	f7ff fbb6 	bl	801e624 <_malloc_r>
 801eeb8:	4605      	mov	r5, r0
 801eeba:	2800      	cmp	r0, #0
 801eebc:	d0ed      	beq.n	801ee9a <_realloc_r+0x1e>
 801eebe:	42bc      	cmp	r4, r7
 801eec0:	4622      	mov	r2, r4
 801eec2:	4631      	mov	r1, r6
 801eec4:	bf28      	it	cs
 801eec6:	463a      	movcs	r2, r7
 801eec8:	f7fb ff82 	bl	801add0 <memcpy>
 801eecc:	4631      	mov	r1, r6
 801eece:	4640      	mov	r0, r8
 801eed0:	f7ff fb3c 	bl	801e54c <_free_r>
 801eed4:	e7e1      	b.n	801ee9a <_realloc_r+0x1e>
 801eed6:	4635      	mov	r5, r6
 801eed8:	e7df      	b.n	801ee9a <_realloc_r+0x1e>

0801eeda <__sfputc_r>:
 801eeda:	6893      	ldr	r3, [r2, #8]
 801eedc:	3b01      	subs	r3, #1
 801eede:	2b00      	cmp	r3, #0
 801eee0:	b410      	push	{r4}
 801eee2:	6093      	str	r3, [r2, #8]
 801eee4:	da08      	bge.n	801eef8 <__sfputc_r+0x1e>
 801eee6:	6994      	ldr	r4, [r2, #24]
 801eee8:	42a3      	cmp	r3, r4
 801eeea:	db01      	blt.n	801eef0 <__sfputc_r+0x16>
 801eeec:	290a      	cmp	r1, #10
 801eeee:	d103      	bne.n	801eef8 <__sfputc_r+0x1e>
 801eef0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801eef4:	f000 b94a 	b.w	801f18c <__swbuf_r>
 801eef8:	6813      	ldr	r3, [r2, #0]
 801eefa:	1c58      	adds	r0, r3, #1
 801eefc:	6010      	str	r0, [r2, #0]
 801eefe:	7019      	strb	r1, [r3, #0]
 801ef00:	4608      	mov	r0, r1
 801ef02:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ef06:	4770      	bx	lr

0801ef08 <__sfputs_r>:
 801ef08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ef0a:	4606      	mov	r6, r0
 801ef0c:	460f      	mov	r7, r1
 801ef0e:	4614      	mov	r4, r2
 801ef10:	18d5      	adds	r5, r2, r3
 801ef12:	42ac      	cmp	r4, r5
 801ef14:	d101      	bne.n	801ef1a <__sfputs_r+0x12>
 801ef16:	2000      	movs	r0, #0
 801ef18:	e007      	b.n	801ef2a <__sfputs_r+0x22>
 801ef1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ef1e:	463a      	mov	r2, r7
 801ef20:	4630      	mov	r0, r6
 801ef22:	f7ff ffda 	bl	801eeda <__sfputc_r>
 801ef26:	1c43      	adds	r3, r0, #1
 801ef28:	d1f3      	bne.n	801ef12 <__sfputs_r+0xa>
 801ef2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801ef2c <_vfiprintf_r>:
 801ef2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef30:	460d      	mov	r5, r1
 801ef32:	b09d      	sub	sp, #116	; 0x74
 801ef34:	4614      	mov	r4, r2
 801ef36:	4698      	mov	r8, r3
 801ef38:	4606      	mov	r6, r0
 801ef3a:	b118      	cbz	r0, 801ef44 <_vfiprintf_r+0x18>
 801ef3c:	6983      	ldr	r3, [r0, #24]
 801ef3e:	b90b      	cbnz	r3, 801ef44 <_vfiprintf_r+0x18>
 801ef40:	f7ff fec4 	bl	801eccc <__sinit>
 801ef44:	4b89      	ldr	r3, [pc, #548]	; (801f16c <_vfiprintf_r+0x240>)
 801ef46:	429d      	cmp	r5, r3
 801ef48:	d11b      	bne.n	801ef82 <_vfiprintf_r+0x56>
 801ef4a:	6875      	ldr	r5, [r6, #4]
 801ef4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ef4e:	07d9      	lsls	r1, r3, #31
 801ef50:	d405      	bmi.n	801ef5e <_vfiprintf_r+0x32>
 801ef52:	89ab      	ldrh	r3, [r5, #12]
 801ef54:	059a      	lsls	r2, r3, #22
 801ef56:	d402      	bmi.n	801ef5e <_vfiprintf_r+0x32>
 801ef58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ef5a:	f7ff ff67 	bl	801ee2c <__retarget_lock_acquire_recursive>
 801ef5e:	89ab      	ldrh	r3, [r5, #12]
 801ef60:	071b      	lsls	r3, r3, #28
 801ef62:	d501      	bpl.n	801ef68 <_vfiprintf_r+0x3c>
 801ef64:	692b      	ldr	r3, [r5, #16]
 801ef66:	b9eb      	cbnz	r3, 801efa4 <_vfiprintf_r+0x78>
 801ef68:	4629      	mov	r1, r5
 801ef6a:	4630      	mov	r0, r6
 801ef6c:	f000 f960 	bl	801f230 <__swsetup_r>
 801ef70:	b1c0      	cbz	r0, 801efa4 <_vfiprintf_r+0x78>
 801ef72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ef74:	07dc      	lsls	r4, r3, #31
 801ef76:	d50e      	bpl.n	801ef96 <_vfiprintf_r+0x6a>
 801ef78:	f04f 30ff 	mov.w	r0, #4294967295
 801ef7c:	b01d      	add	sp, #116	; 0x74
 801ef7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef82:	4b7b      	ldr	r3, [pc, #492]	; (801f170 <_vfiprintf_r+0x244>)
 801ef84:	429d      	cmp	r5, r3
 801ef86:	d101      	bne.n	801ef8c <_vfiprintf_r+0x60>
 801ef88:	68b5      	ldr	r5, [r6, #8]
 801ef8a:	e7df      	b.n	801ef4c <_vfiprintf_r+0x20>
 801ef8c:	4b79      	ldr	r3, [pc, #484]	; (801f174 <_vfiprintf_r+0x248>)
 801ef8e:	429d      	cmp	r5, r3
 801ef90:	bf08      	it	eq
 801ef92:	68f5      	ldreq	r5, [r6, #12]
 801ef94:	e7da      	b.n	801ef4c <_vfiprintf_r+0x20>
 801ef96:	89ab      	ldrh	r3, [r5, #12]
 801ef98:	0598      	lsls	r0, r3, #22
 801ef9a:	d4ed      	bmi.n	801ef78 <_vfiprintf_r+0x4c>
 801ef9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ef9e:	f7ff ff46 	bl	801ee2e <__retarget_lock_release_recursive>
 801efa2:	e7e9      	b.n	801ef78 <_vfiprintf_r+0x4c>
 801efa4:	2300      	movs	r3, #0
 801efa6:	9309      	str	r3, [sp, #36]	; 0x24
 801efa8:	2320      	movs	r3, #32
 801efaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801efae:	f8cd 800c 	str.w	r8, [sp, #12]
 801efb2:	2330      	movs	r3, #48	; 0x30
 801efb4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801f178 <_vfiprintf_r+0x24c>
 801efb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801efbc:	f04f 0901 	mov.w	r9, #1
 801efc0:	4623      	mov	r3, r4
 801efc2:	469a      	mov	sl, r3
 801efc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801efc8:	b10a      	cbz	r2, 801efce <_vfiprintf_r+0xa2>
 801efca:	2a25      	cmp	r2, #37	; 0x25
 801efcc:	d1f9      	bne.n	801efc2 <_vfiprintf_r+0x96>
 801efce:	ebba 0b04 	subs.w	fp, sl, r4
 801efd2:	d00b      	beq.n	801efec <_vfiprintf_r+0xc0>
 801efd4:	465b      	mov	r3, fp
 801efd6:	4622      	mov	r2, r4
 801efd8:	4629      	mov	r1, r5
 801efda:	4630      	mov	r0, r6
 801efdc:	f7ff ff94 	bl	801ef08 <__sfputs_r>
 801efe0:	3001      	adds	r0, #1
 801efe2:	f000 80aa 	beq.w	801f13a <_vfiprintf_r+0x20e>
 801efe6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801efe8:	445a      	add	r2, fp
 801efea:	9209      	str	r2, [sp, #36]	; 0x24
 801efec:	f89a 3000 	ldrb.w	r3, [sl]
 801eff0:	2b00      	cmp	r3, #0
 801eff2:	f000 80a2 	beq.w	801f13a <_vfiprintf_r+0x20e>
 801eff6:	2300      	movs	r3, #0
 801eff8:	f04f 32ff 	mov.w	r2, #4294967295
 801effc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f000:	f10a 0a01 	add.w	sl, sl, #1
 801f004:	9304      	str	r3, [sp, #16]
 801f006:	9307      	str	r3, [sp, #28]
 801f008:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f00c:	931a      	str	r3, [sp, #104]	; 0x68
 801f00e:	4654      	mov	r4, sl
 801f010:	2205      	movs	r2, #5
 801f012:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f016:	4858      	ldr	r0, [pc, #352]	; (801f178 <_vfiprintf_r+0x24c>)
 801f018:	f7e1 f992 	bl	8000340 <memchr>
 801f01c:	9a04      	ldr	r2, [sp, #16]
 801f01e:	b9d8      	cbnz	r0, 801f058 <_vfiprintf_r+0x12c>
 801f020:	06d1      	lsls	r1, r2, #27
 801f022:	bf44      	itt	mi
 801f024:	2320      	movmi	r3, #32
 801f026:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f02a:	0713      	lsls	r3, r2, #28
 801f02c:	bf44      	itt	mi
 801f02e:	232b      	movmi	r3, #43	; 0x2b
 801f030:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f034:	f89a 3000 	ldrb.w	r3, [sl]
 801f038:	2b2a      	cmp	r3, #42	; 0x2a
 801f03a:	d015      	beq.n	801f068 <_vfiprintf_r+0x13c>
 801f03c:	9a07      	ldr	r2, [sp, #28]
 801f03e:	4654      	mov	r4, sl
 801f040:	2000      	movs	r0, #0
 801f042:	f04f 0c0a 	mov.w	ip, #10
 801f046:	4621      	mov	r1, r4
 801f048:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f04c:	3b30      	subs	r3, #48	; 0x30
 801f04e:	2b09      	cmp	r3, #9
 801f050:	d94e      	bls.n	801f0f0 <_vfiprintf_r+0x1c4>
 801f052:	b1b0      	cbz	r0, 801f082 <_vfiprintf_r+0x156>
 801f054:	9207      	str	r2, [sp, #28]
 801f056:	e014      	b.n	801f082 <_vfiprintf_r+0x156>
 801f058:	eba0 0308 	sub.w	r3, r0, r8
 801f05c:	fa09 f303 	lsl.w	r3, r9, r3
 801f060:	4313      	orrs	r3, r2
 801f062:	9304      	str	r3, [sp, #16]
 801f064:	46a2      	mov	sl, r4
 801f066:	e7d2      	b.n	801f00e <_vfiprintf_r+0xe2>
 801f068:	9b03      	ldr	r3, [sp, #12]
 801f06a:	1d19      	adds	r1, r3, #4
 801f06c:	681b      	ldr	r3, [r3, #0]
 801f06e:	9103      	str	r1, [sp, #12]
 801f070:	2b00      	cmp	r3, #0
 801f072:	bfbb      	ittet	lt
 801f074:	425b      	neglt	r3, r3
 801f076:	f042 0202 	orrlt.w	r2, r2, #2
 801f07a:	9307      	strge	r3, [sp, #28]
 801f07c:	9307      	strlt	r3, [sp, #28]
 801f07e:	bfb8      	it	lt
 801f080:	9204      	strlt	r2, [sp, #16]
 801f082:	7823      	ldrb	r3, [r4, #0]
 801f084:	2b2e      	cmp	r3, #46	; 0x2e
 801f086:	d10c      	bne.n	801f0a2 <_vfiprintf_r+0x176>
 801f088:	7863      	ldrb	r3, [r4, #1]
 801f08a:	2b2a      	cmp	r3, #42	; 0x2a
 801f08c:	d135      	bne.n	801f0fa <_vfiprintf_r+0x1ce>
 801f08e:	9b03      	ldr	r3, [sp, #12]
 801f090:	1d1a      	adds	r2, r3, #4
 801f092:	681b      	ldr	r3, [r3, #0]
 801f094:	9203      	str	r2, [sp, #12]
 801f096:	2b00      	cmp	r3, #0
 801f098:	bfb8      	it	lt
 801f09a:	f04f 33ff 	movlt.w	r3, #4294967295
 801f09e:	3402      	adds	r4, #2
 801f0a0:	9305      	str	r3, [sp, #20]
 801f0a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801f188 <_vfiprintf_r+0x25c>
 801f0a6:	7821      	ldrb	r1, [r4, #0]
 801f0a8:	2203      	movs	r2, #3
 801f0aa:	4650      	mov	r0, sl
 801f0ac:	f7e1 f948 	bl	8000340 <memchr>
 801f0b0:	b140      	cbz	r0, 801f0c4 <_vfiprintf_r+0x198>
 801f0b2:	2340      	movs	r3, #64	; 0x40
 801f0b4:	eba0 000a 	sub.w	r0, r0, sl
 801f0b8:	fa03 f000 	lsl.w	r0, r3, r0
 801f0bc:	9b04      	ldr	r3, [sp, #16]
 801f0be:	4303      	orrs	r3, r0
 801f0c0:	3401      	adds	r4, #1
 801f0c2:	9304      	str	r3, [sp, #16]
 801f0c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f0c8:	482c      	ldr	r0, [pc, #176]	; (801f17c <_vfiprintf_r+0x250>)
 801f0ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f0ce:	2206      	movs	r2, #6
 801f0d0:	f7e1 f936 	bl	8000340 <memchr>
 801f0d4:	2800      	cmp	r0, #0
 801f0d6:	d03f      	beq.n	801f158 <_vfiprintf_r+0x22c>
 801f0d8:	4b29      	ldr	r3, [pc, #164]	; (801f180 <_vfiprintf_r+0x254>)
 801f0da:	bb1b      	cbnz	r3, 801f124 <_vfiprintf_r+0x1f8>
 801f0dc:	9b03      	ldr	r3, [sp, #12]
 801f0de:	3307      	adds	r3, #7
 801f0e0:	f023 0307 	bic.w	r3, r3, #7
 801f0e4:	3308      	adds	r3, #8
 801f0e6:	9303      	str	r3, [sp, #12]
 801f0e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f0ea:	443b      	add	r3, r7
 801f0ec:	9309      	str	r3, [sp, #36]	; 0x24
 801f0ee:	e767      	b.n	801efc0 <_vfiprintf_r+0x94>
 801f0f0:	fb0c 3202 	mla	r2, ip, r2, r3
 801f0f4:	460c      	mov	r4, r1
 801f0f6:	2001      	movs	r0, #1
 801f0f8:	e7a5      	b.n	801f046 <_vfiprintf_r+0x11a>
 801f0fa:	2300      	movs	r3, #0
 801f0fc:	3401      	adds	r4, #1
 801f0fe:	9305      	str	r3, [sp, #20]
 801f100:	4619      	mov	r1, r3
 801f102:	f04f 0c0a 	mov.w	ip, #10
 801f106:	4620      	mov	r0, r4
 801f108:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f10c:	3a30      	subs	r2, #48	; 0x30
 801f10e:	2a09      	cmp	r2, #9
 801f110:	d903      	bls.n	801f11a <_vfiprintf_r+0x1ee>
 801f112:	2b00      	cmp	r3, #0
 801f114:	d0c5      	beq.n	801f0a2 <_vfiprintf_r+0x176>
 801f116:	9105      	str	r1, [sp, #20]
 801f118:	e7c3      	b.n	801f0a2 <_vfiprintf_r+0x176>
 801f11a:	fb0c 2101 	mla	r1, ip, r1, r2
 801f11e:	4604      	mov	r4, r0
 801f120:	2301      	movs	r3, #1
 801f122:	e7f0      	b.n	801f106 <_vfiprintf_r+0x1da>
 801f124:	ab03      	add	r3, sp, #12
 801f126:	9300      	str	r3, [sp, #0]
 801f128:	462a      	mov	r2, r5
 801f12a:	4b16      	ldr	r3, [pc, #88]	; (801f184 <_vfiprintf_r+0x258>)
 801f12c:	a904      	add	r1, sp, #16
 801f12e:	4630      	mov	r0, r6
 801f130:	f7fb fef6 	bl	801af20 <_printf_float>
 801f134:	4607      	mov	r7, r0
 801f136:	1c78      	adds	r0, r7, #1
 801f138:	d1d6      	bne.n	801f0e8 <_vfiprintf_r+0x1bc>
 801f13a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f13c:	07d9      	lsls	r1, r3, #31
 801f13e:	d405      	bmi.n	801f14c <_vfiprintf_r+0x220>
 801f140:	89ab      	ldrh	r3, [r5, #12]
 801f142:	059a      	lsls	r2, r3, #22
 801f144:	d402      	bmi.n	801f14c <_vfiprintf_r+0x220>
 801f146:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f148:	f7ff fe71 	bl	801ee2e <__retarget_lock_release_recursive>
 801f14c:	89ab      	ldrh	r3, [r5, #12]
 801f14e:	065b      	lsls	r3, r3, #25
 801f150:	f53f af12 	bmi.w	801ef78 <_vfiprintf_r+0x4c>
 801f154:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f156:	e711      	b.n	801ef7c <_vfiprintf_r+0x50>
 801f158:	ab03      	add	r3, sp, #12
 801f15a:	9300      	str	r3, [sp, #0]
 801f15c:	462a      	mov	r2, r5
 801f15e:	4b09      	ldr	r3, [pc, #36]	; (801f184 <_vfiprintf_r+0x258>)
 801f160:	a904      	add	r1, sp, #16
 801f162:	4630      	mov	r0, r6
 801f164:	f7fc f968 	bl	801b438 <_printf_i>
 801f168:	e7e4      	b.n	801f134 <_vfiprintf_r+0x208>
 801f16a:	bf00      	nop
 801f16c:	080200ac 	.word	0x080200ac
 801f170:	080200cc 	.word	0x080200cc
 801f174:	0802008c 	.word	0x0802008c
 801f178:	0802003c 	.word	0x0802003c
 801f17c:	08020046 	.word	0x08020046
 801f180:	0801af21 	.word	0x0801af21
 801f184:	0801ef09 	.word	0x0801ef09
 801f188:	08020042 	.word	0x08020042

0801f18c <__swbuf_r>:
 801f18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f18e:	460e      	mov	r6, r1
 801f190:	4614      	mov	r4, r2
 801f192:	4605      	mov	r5, r0
 801f194:	b118      	cbz	r0, 801f19e <__swbuf_r+0x12>
 801f196:	6983      	ldr	r3, [r0, #24]
 801f198:	b90b      	cbnz	r3, 801f19e <__swbuf_r+0x12>
 801f19a:	f7ff fd97 	bl	801eccc <__sinit>
 801f19e:	4b21      	ldr	r3, [pc, #132]	; (801f224 <__swbuf_r+0x98>)
 801f1a0:	429c      	cmp	r4, r3
 801f1a2:	d12b      	bne.n	801f1fc <__swbuf_r+0x70>
 801f1a4:	686c      	ldr	r4, [r5, #4]
 801f1a6:	69a3      	ldr	r3, [r4, #24]
 801f1a8:	60a3      	str	r3, [r4, #8]
 801f1aa:	89a3      	ldrh	r3, [r4, #12]
 801f1ac:	071a      	lsls	r2, r3, #28
 801f1ae:	d52f      	bpl.n	801f210 <__swbuf_r+0x84>
 801f1b0:	6923      	ldr	r3, [r4, #16]
 801f1b2:	b36b      	cbz	r3, 801f210 <__swbuf_r+0x84>
 801f1b4:	6923      	ldr	r3, [r4, #16]
 801f1b6:	6820      	ldr	r0, [r4, #0]
 801f1b8:	1ac0      	subs	r0, r0, r3
 801f1ba:	6963      	ldr	r3, [r4, #20]
 801f1bc:	b2f6      	uxtb	r6, r6
 801f1be:	4283      	cmp	r3, r0
 801f1c0:	4637      	mov	r7, r6
 801f1c2:	dc04      	bgt.n	801f1ce <__swbuf_r+0x42>
 801f1c4:	4621      	mov	r1, r4
 801f1c6:	4628      	mov	r0, r5
 801f1c8:	f7ff fcec 	bl	801eba4 <_fflush_r>
 801f1cc:	bb30      	cbnz	r0, 801f21c <__swbuf_r+0x90>
 801f1ce:	68a3      	ldr	r3, [r4, #8]
 801f1d0:	3b01      	subs	r3, #1
 801f1d2:	60a3      	str	r3, [r4, #8]
 801f1d4:	6823      	ldr	r3, [r4, #0]
 801f1d6:	1c5a      	adds	r2, r3, #1
 801f1d8:	6022      	str	r2, [r4, #0]
 801f1da:	701e      	strb	r6, [r3, #0]
 801f1dc:	6963      	ldr	r3, [r4, #20]
 801f1de:	3001      	adds	r0, #1
 801f1e0:	4283      	cmp	r3, r0
 801f1e2:	d004      	beq.n	801f1ee <__swbuf_r+0x62>
 801f1e4:	89a3      	ldrh	r3, [r4, #12]
 801f1e6:	07db      	lsls	r3, r3, #31
 801f1e8:	d506      	bpl.n	801f1f8 <__swbuf_r+0x6c>
 801f1ea:	2e0a      	cmp	r6, #10
 801f1ec:	d104      	bne.n	801f1f8 <__swbuf_r+0x6c>
 801f1ee:	4621      	mov	r1, r4
 801f1f0:	4628      	mov	r0, r5
 801f1f2:	f7ff fcd7 	bl	801eba4 <_fflush_r>
 801f1f6:	b988      	cbnz	r0, 801f21c <__swbuf_r+0x90>
 801f1f8:	4638      	mov	r0, r7
 801f1fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f1fc:	4b0a      	ldr	r3, [pc, #40]	; (801f228 <__swbuf_r+0x9c>)
 801f1fe:	429c      	cmp	r4, r3
 801f200:	d101      	bne.n	801f206 <__swbuf_r+0x7a>
 801f202:	68ac      	ldr	r4, [r5, #8]
 801f204:	e7cf      	b.n	801f1a6 <__swbuf_r+0x1a>
 801f206:	4b09      	ldr	r3, [pc, #36]	; (801f22c <__swbuf_r+0xa0>)
 801f208:	429c      	cmp	r4, r3
 801f20a:	bf08      	it	eq
 801f20c:	68ec      	ldreq	r4, [r5, #12]
 801f20e:	e7ca      	b.n	801f1a6 <__swbuf_r+0x1a>
 801f210:	4621      	mov	r1, r4
 801f212:	4628      	mov	r0, r5
 801f214:	f000 f80c 	bl	801f230 <__swsetup_r>
 801f218:	2800      	cmp	r0, #0
 801f21a:	d0cb      	beq.n	801f1b4 <__swbuf_r+0x28>
 801f21c:	f04f 37ff 	mov.w	r7, #4294967295
 801f220:	e7ea      	b.n	801f1f8 <__swbuf_r+0x6c>
 801f222:	bf00      	nop
 801f224:	080200ac 	.word	0x080200ac
 801f228:	080200cc 	.word	0x080200cc
 801f22c:	0802008c 	.word	0x0802008c

0801f230 <__swsetup_r>:
 801f230:	4b32      	ldr	r3, [pc, #200]	; (801f2fc <__swsetup_r+0xcc>)
 801f232:	b570      	push	{r4, r5, r6, lr}
 801f234:	681d      	ldr	r5, [r3, #0]
 801f236:	4606      	mov	r6, r0
 801f238:	460c      	mov	r4, r1
 801f23a:	b125      	cbz	r5, 801f246 <__swsetup_r+0x16>
 801f23c:	69ab      	ldr	r3, [r5, #24]
 801f23e:	b913      	cbnz	r3, 801f246 <__swsetup_r+0x16>
 801f240:	4628      	mov	r0, r5
 801f242:	f7ff fd43 	bl	801eccc <__sinit>
 801f246:	4b2e      	ldr	r3, [pc, #184]	; (801f300 <__swsetup_r+0xd0>)
 801f248:	429c      	cmp	r4, r3
 801f24a:	d10f      	bne.n	801f26c <__swsetup_r+0x3c>
 801f24c:	686c      	ldr	r4, [r5, #4]
 801f24e:	89a3      	ldrh	r3, [r4, #12]
 801f250:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f254:	0719      	lsls	r1, r3, #28
 801f256:	d42c      	bmi.n	801f2b2 <__swsetup_r+0x82>
 801f258:	06dd      	lsls	r5, r3, #27
 801f25a:	d411      	bmi.n	801f280 <__swsetup_r+0x50>
 801f25c:	2309      	movs	r3, #9
 801f25e:	6033      	str	r3, [r6, #0]
 801f260:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801f264:	81a3      	strh	r3, [r4, #12]
 801f266:	f04f 30ff 	mov.w	r0, #4294967295
 801f26a:	e03e      	b.n	801f2ea <__swsetup_r+0xba>
 801f26c:	4b25      	ldr	r3, [pc, #148]	; (801f304 <__swsetup_r+0xd4>)
 801f26e:	429c      	cmp	r4, r3
 801f270:	d101      	bne.n	801f276 <__swsetup_r+0x46>
 801f272:	68ac      	ldr	r4, [r5, #8]
 801f274:	e7eb      	b.n	801f24e <__swsetup_r+0x1e>
 801f276:	4b24      	ldr	r3, [pc, #144]	; (801f308 <__swsetup_r+0xd8>)
 801f278:	429c      	cmp	r4, r3
 801f27a:	bf08      	it	eq
 801f27c:	68ec      	ldreq	r4, [r5, #12]
 801f27e:	e7e6      	b.n	801f24e <__swsetup_r+0x1e>
 801f280:	0758      	lsls	r0, r3, #29
 801f282:	d512      	bpl.n	801f2aa <__swsetup_r+0x7a>
 801f284:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f286:	b141      	cbz	r1, 801f29a <__swsetup_r+0x6a>
 801f288:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801f28c:	4299      	cmp	r1, r3
 801f28e:	d002      	beq.n	801f296 <__swsetup_r+0x66>
 801f290:	4630      	mov	r0, r6
 801f292:	f7ff f95b 	bl	801e54c <_free_r>
 801f296:	2300      	movs	r3, #0
 801f298:	6363      	str	r3, [r4, #52]	; 0x34
 801f29a:	89a3      	ldrh	r3, [r4, #12]
 801f29c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801f2a0:	81a3      	strh	r3, [r4, #12]
 801f2a2:	2300      	movs	r3, #0
 801f2a4:	6063      	str	r3, [r4, #4]
 801f2a6:	6923      	ldr	r3, [r4, #16]
 801f2a8:	6023      	str	r3, [r4, #0]
 801f2aa:	89a3      	ldrh	r3, [r4, #12]
 801f2ac:	f043 0308 	orr.w	r3, r3, #8
 801f2b0:	81a3      	strh	r3, [r4, #12]
 801f2b2:	6923      	ldr	r3, [r4, #16]
 801f2b4:	b94b      	cbnz	r3, 801f2ca <__swsetup_r+0x9a>
 801f2b6:	89a3      	ldrh	r3, [r4, #12]
 801f2b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801f2bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f2c0:	d003      	beq.n	801f2ca <__swsetup_r+0x9a>
 801f2c2:	4621      	mov	r1, r4
 801f2c4:	4630      	mov	r0, r6
 801f2c6:	f000 f84d 	bl	801f364 <__smakebuf_r>
 801f2ca:	89a0      	ldrh	r0, [r4, #12]
 801f2cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f2d0:	f010 0301 	ands.w	r3, r0, #1
 801f2d4:	d00a      	beq.n	801f2ec <__swsetup_r+0xbc>
 801f2d6:	2300      	movs	r3, #0
 801f2d8:	60a3      	str	r3, [r4, #8]
 801f2da:	6963      	ldr	r3, [r4, #20]
 801f2dc:	425b      	negs	r3, r3
 801f2de:	61a3      	str	r3, [r4, #24]
 801f2e0:	6923      	ldr	r3, [r4, #16]
 801f2e2:	b943      	cbnz	r3, 801f2f6 <__swsetup_r+0xc6>
 801f2e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801f2e8:	d1ba      	bne.n	801f260 <__swsetup_r+0x30>
 801f2ea:	bd70      	pop	{r4, r5, r6, pc}
 801f2ec:	0781      	lsls	r1, r0, #30
 801f2ee:	bf58      	it	pl
 801f2f0:	6963      	ldrpl	r3, [r4, #20]
 801f2f2:	60a3      	str	r3, [r4, #8]
 801f2f4:	e7f4      	b.n	801f2e0 <__swsetup_r+0xb0>
 801f2f6:	2000      	movs	r0, #0
 801f2f8:	e7f7      	b.n	801f2ea <__swsetup_r+0xba>
 801f2fa:	bf00      	nop
 801f2fc:	24000100 	.word	0x24000100
 801f300:	080200ac 	.word	0x080200ac
 801f304:	080200cc 	.word	0x080200cc
 801f308:	0802008c 	.word	0x0802008c

0801f30c <abort>:
 801f30c:	b508      	push	{r3, lr}
 801f30e:	2006      	movs	r0, #6
 801f310:	f000 f898 	bl	801f444 <raise>
 801f314:	2001      	movs	r0, #1
 801f316:	f7e4 fca7 	bl	8003c68 <_exit>

0801f31a <__swhatbuf_r>:
 801f31a:	b570      	push	{r4, r5, r6, lr}
 801f31c:	460e      	mov	r6, r1
 801f31e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f322:	2900      	cmp	r1, #0
 801f324:	b096      	sub	sp, #88	; 0x58
 801f326:	4614      	mov	r4, r2
 801f328:	461d      	mov	r5, r3
 801f32a:	da08      	bge.n	801f33e <__swhatbuf_r+0x24>
 801f32c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801f330:	2200      	movs	r2, #0
 801f332:	602a      	str	r2, [r5, #0]
 801f334:	061a      	lsls	r2, r3, #24
 801f336:	d410      	bmi.n	801f35a <__swhatbuf_r+0x40>
 801f338:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801f33c:	e00e      	b.n	801f35c <__swhatbuf_r+0x42>
 801f33e:	466a      	mov	r2, sp
 801f340:	f000 f89c 	bl	801f47c <_fstat_r>
 801f344:	2800      	cmp	r0, #0
 801f346:	dbf1      	blt.n	801f32c <__swhatbuf_r+0x12>
 801f348:	9a01      	ldr	r2, [sp, #4]
 801f34a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801f34e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801f352:	425a      	negs	r2, r3
 801f354:	415a      	adcs	r2, r3
 801f356:	602a      	str	r2, [r5, #0]
 801f358:	e7ee      	b.n	801f338 <__swhatbuf_r+0x1e>
 801f35a:	2340      	movs	r3, #64	; 0x40
 801f35c:	2000      	movs	r0, #0
 801f35e:	6023      	str	r3, [r4, #0]
 801f360:	b016      	add	sp, #88	; 0x58
 801f362:	bd70      	pop	{r4, r5, r6, pc}

0801f364 <__smakebuf_r>:
 801f364:	898b      	ldrh	r3, [r1, #12]
 801f366:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f368:	079d      	lsls	r5, r3, #30
 801f36a:	4606      	mov	r6, r0
 801f36c:	460c      	mov	r4, r1
 801f36e:	d507      	bpl.n	801f380 <__smakebuf_r+0x1c>
 801f370:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801f374:	6023      	str	r3, [r4, #0]
 801f376:	6123      	str	r3, [r4, #16]
 801f378:	2301      	movs	r3, #1
 801f37a:	6163      	str	r3, [r4, #20]
 801f37c:	b002      	add	sp, #8
 801f37e:	bd70      	pop	{r4, r5, r6, pc}
 801f380:	ab01      	add	r3, sp, #4
 801f382:	466a      	mov	r2, sp
 801f384:	f7ff ffc9 	bl	801f31a <__swhatbuf_r>
 801f388:	9900      	ldr	r1, [sp, #0]
 801f38a:	4605      	mov	r5, r0
 801f38c:	4630      	mov	r0, r6
 801f38e:	f7ff f949 	bl	801e624 <_malloc_r>
 801f392:	b948      	cbnz	r0, 801f3a8 <__smakebuf_r+0x44>
 801f394:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f398:	059a      	lsls	r2, r3, #22
 801f39a:	d4ef      	bmi.n	801f37c <__smakebuf_r+0x18>
 801f39c:	f023 0303 	bic.w	r3, r3, #3
 801f3a0:	f043 0302 	orr.w	r3, r3, #2
 801f3a4:	81a3      	strh	r3, [r4, #12]
 801f3a6:	e7e3      	b.n	801f370 <__smakebuf_r+0xc>
 801f3a8:	4b0d      	ldr	r3, [pc, #52]	; (801f3e0 <__smakebuf_r+0x7c>)
 801f3aa:	62b3      	str	r3, [r6, #40]	; 0x28
 801f3ac:	89a3      	ldrh	r3, [r4, #12]
 801f3ae:	6020      	str	r0, [r4, #0]
 801f3b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f3b4:	81a3      	strh	r3, [r4, #12]
 801f3b6:	9b00      	ldr	r3, [sp, #0]
 801f3b8:	6163      	str	r3, [r4, #20]
 801f3ba:	9b01      	ldr	r3, [sp, #4]
 801f3bc:	6120      	str	r0, [r4, #16]
 801f3be:	b15b      	cbz	r3, 801f3d8 <__smakebuf_r+0x74>
 801f3c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f3c4:	4630      	mov	r0, r6
 801f3c6:	f000 f86b 	bl	801f4a0 <_isatty_r>
 801f3ca:	b128      	cbz	r0, 801f3d8 <__smakebuf_r+0x74>
 801f3cc:	89a3      	ldrh	r3, [r4, #12]
 801f3ce:	f023 0303 	bic.w	r3, r3, #3
 801f3d2:	f043 0301 	orr.w	r3, r3, #1
 801f3d6:	81a3      	strh	r3, [r4, #12]
 801f3d8:	89a0      	ldrh	r0, [r4, #12]
 801f3da:	4305      	orrs	r5, r0
 801f3dc:	81a5      	strh	r5, [r4, #12]
 801f3de:	e7cd      	b.n	801f37c <__smakebuf_r+0x18>
 801f3e0:	0801ec65 	.word	0x0801ec65

0801f3e4 <_malloc_usable_size_r>:
 801f3e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f3e8:	1f18      	subs	r0, r3, #4
 801f3ea:	2b00      	cmp	r3, #0
 801f3ec:	bfbc      	itt	lt
 801f3ee:	580b      	ldrlt	r3, [r1, r0]
 801f3f0:	18c0      	addlt	r0, r0, r3
 801f3f2:	4770      	bx	lr

0801f3f4 <_raise_r>:
 801f3f4:	291f      	cmp	r1, #31
 801f3f6:	b538      	push	{r3, r4, r5, lr}
 801f3f8:	4604      	mov	r4, r0
 801f3fa:	460d      	mov	r5, r1
 801f3fc:	d904      	bls.n	801f408 <_raise_r+0x14>
 801f3fe:	2316      	movs	r3, #22
 801f400:	6003      	str	r3, [r0, #0]
 801f402:	f04f 30ff 	mov.w	r0, #4294967295
 801f406:	bd38      	pop	{r3, r4, r5, pc}
 801f408:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801f40a:	b112      	cbz	r2, 801f412 <_raise_r+0x1e>
 801f40c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f410:	b94b      	cbnz	r3, 801f426 <_raise_r+0x32>
 801f412:	4620      	mov	r0, r4
 801f414:	f000 f830 	bl	801f478 <_getpid_r>
 801f418:	462a      	mov	r2, r5
 801f41a:	4601      	mov	r1, r0
 801f41c:	4620      	mov	r0, r4
 801f41e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f422:	f000 b817 	b.w	801f454 <_kill_r>
 801f426:	2b01      	cmp	r3, #1
 801f428:	d00a      	beq.n	801f440 <_raise_r+0x4c>
 801f42a:	1c59      	adds	r1, r3, #1
 801f42c:	d103      	bne.n	801f436 <_raise_r+0x42>
 801f42e:	2316      	movs	r3, #22
 801f430:	6003      	str	r3, [r0, #0]
 801f432:	2001      	movs	r0, #1
 801f434:	e7e7      	b.n	801f406 <_raise_r+0x12>
 801f436:	2400      	movs	r4, #0
 801f438:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801f43c:	4628      	mov	r0, r5
 801f43e:	4798      	blx	r3
 801f440:	2000      	movs	r0, #0
 801f442:	e7e0      	b.n	801f406 <_raise_r+0x12>

0801f444 <raise>:
 801f444:	4b02      	ldr	r3, [pc, #8]	; (801f450 <raise+0xc>)
 801f446:	4601      	mov	r1, r0
 801f448:	6818      	ldr	r0, [r3, #0]
 801f44a:	f7ff bfd3 	b.w	801f3f4 <_raise_r>
 801f44e:	bf00      	nop
 801f450:	24000100 	.word	0x24000100

0801f454 <_kill_r>:
 801f454:	b538      	push	{r3, r4, r5, lr}
 801f456:	4d07      	ldr	r5, [pc, #28]	; (801f474 <_kill_r+0x20>)
 801f458:	2300      	movs	r3, #0
 801f45a:	4604      	mov	r4, r0
 801f45c:	4608      	mov	r0, r1
 801f45e:	4611      	mov	r1, r2
 801f460:	602b      	str	r3, [r5, #0]
 801f462:	f7e4 fbf1 	bl	8003c48 <_kill>
 801f466:	1c43      	adds	r3, r0, #1
 801f468:	d102      	bne.n	801f470 <_kill_r+0x1c>
 801f46a:	682b      	ldr	r3, [r5, #0]
 801f46c:	b103      	cbz	r3, 801f470 <_kill_r+0x1c>
 801f46e:	6023      	str	r3, [r4, #0]
 801f470:	bd38      	pop	{r3, r4, r5, pc}
 801f472:	bf00      	nop
 801f474:	240034f8 	.word	0x240034f8

0801f478 <_getpid_r>:
 801f478:	f7e4 bbde 	b.w	8003c38 <_getpid>

0801f47c <_fstat_r>:
 801f47c:	b538      	push	{r3, r4, r5, lr}
 801f47e:	4d07      	ldr	r5, [pc, #28]	; (801f49c <_fstat_r+0x20>)
 801f480:	2300      	movs	r3, #0
 801f482:	4604      	mov	r4, r0
 801f484:	4608      	mov	r0, r1
 801f486:	4611      	mov	r1, r2
 801f488:	602b      	str	r3, [r5, #0]
 801f48a:	f7e4 fc3c 	bl	8003d06 <_fstat>
 801f48e:	1c43      	adds	r3, r0, #1
 801f490:	d102      	bne.n	801f498 <_fstat_r+0x1c>
 801f492:	682b      	ldr	r3, [r5, #0]
 801f494:	b103      	cbz	r3, 801f498 <_fstat_r+0x1c>
 801f496:	6023      	str	r3, [r4, #0]
 801f498:	bd38      	pop	{r3, r4, r5, pc}
 801f49a:	bf00      	nop
 801f49c:	240034f8 	.word	0x240034f8

0801f4a0 <_isatty_r>:
 801f4a0:	b538      	push	{r3, r4, r5, lr}
 801f4a2:	4d06      	ldr	r5, [pc, #24]	; (801f4bc <_isatty_r+0x1c>)
 801f4a4:	2300      	movs	r3, #0
 801f4a6:	4604      	mov	r4, r0
 801f4a8:	4608      	mov	r0, r1
 801f4aa:	602b      	str	r3, [r5, #0]
 801f4ac:	f7e4 fc3b 	bl	8003d26 <_isatty>
 801f4b0:	1c43      	adds	r3, r0, #1
 801f4b2:	d102      	bne.n	801f4ba <_isatty_r+0x1a>
 801f4b4:	682b      	ldr	r3, [r5, #0]
 801f4b6:	b103      	cbz	r3, 801f4ba <_isatty_r+0x1a>
 801f4b8:	6023      	str	r3, [r4, #0]
 801f4ba:	bd38      	pop	{r3, r4, r5, pc}
 801f4bc:	240034f8 	.word	0x240034f8

0801f4c0 <_init>:
 801f4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f4c2:	bf00      	nop
 801f4c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f4c6:	bc08      	pop	{r3}
 801f4c8:	469e      	mov	lr, r3
 801f4ca:	4770      	bx	lr

0801f4cc <_fini>:
 801f4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f4ce:	bf00      	nop
 801f4d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f4d2:	bc08      	pop	{r3}
 801f4d4:	469e      	mov	lr, r3
 801f4d6:	4770      	bx	lr
